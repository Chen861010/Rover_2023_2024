
ModbusDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a18  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004d4  20000000  00402a18  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000278  200004d4  00402eec  000204d4  2**2
                  ALLOC
  3 .stack        00003004  2000074c  00403164  000204d4  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204fe  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014378  00000000  00000000  00020557  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b24  00000000  00000000  000348cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000850  00000000  00000000  000373f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00012fd5  00000000  00000000  00037c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000b99e  00000000  00000000  0004ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00051346  00000000  00000000  000565b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005701  00000000  00000000  000a78fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  000acffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001554  00000000  00000000  000ad8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 37 00 20 3d 26 40 00 39 26 40 00 39 26 40 00     P7. =&@.9&@.9&@.
  400010:	39 26 40 00 39 26 40 00 39 26 40 00 00 00 00 00     9&@.9&@.9&@.....
	...
  40002c:	39 26 40 00 39 26 40 00 00 00 00 00 39 26 40 00     9&@.9&@.....9&@.
  40003c:	39 26 40 00 39 26 40 00 39 26 40 00 39 26 40 00     9&@.9&@.9&@.9&@.
  40004c:	39 26 40 00 39 26 40 00 39 26 40 00 39 26 40 00     9&@.9&@.9&@.9&@.
  40005c:	00 00 00 00 39 26 40 00 39 26 40 00 00 00 00 00     ....9&@.9&@.....
  40006c:	89 0c 40 00 9d 0c 40 00 00 00 00 00 39 26 40 00     ..@...@.....9&@.
	...
  40008c:	39 26 40 00 39 26 40 00 39 26 40 00 39 26 40 00     9&@.9&@.9&@.9&@.
  40009c:	39 26 40 00 39 26 40 00 39 26 40 00 00 00 00 00     9&@.9&@.9&@.....
	...
  4000b4:	39 26 40 00 00 00 00 00 39 26 40 00 39 26 40 00     9&@.....9&@.9&@.
  4000c4:	39 26 40 00 6d 12 40 00                             9&@.m.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200004d4 	.word	0x200004d4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402a18 	.word	0x00402a18

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402a18 	.word	0x00402a18
  40012c:	200004d8 	.word	0x200004d8
  400130:	00402a18 	.word	0x00402a18
  400134:	00000000 	.word	0x00000000

00400138 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400138:	490e      	ldr	r1, [pc, #56]	; (400174 <udi_cdc_comm_enable+0x3c>)
  40013a:	2300      	movs	r3, #0
  40013c:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40013e:	4a0e      	ldr	r2, [pc, #56]	; (400178 <udi_cdc_comm_enable+0x40>)
  400140:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400142:	4a0e      	ldr	r2, [pc, #56]	; (40017c <udi_cdc_comm_enable+0x44>)
  400144:	20a1      	movs	r0, #161	; 0xa1
  400146:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400148:	2020      	movs	r0, #32
  40014a:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40014c:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40014e:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400150:	2002      	movs	r0, #2
  400152:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400154:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400156:	4a0a      	ldr	r2, [pc, #40]	; (400180 <udi_cdc_comm_enable+0x48>)
  400158:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  40015c:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40015e:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400160:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400162:	2308      	movs	r3, #8
  400164:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400166:	780b      	ldrb	r3, [r1, #0]
  400168:	3301      	adds	r3, #1
  40016a:	b2db      	uxtb	r3, r3
  40016c:	700b      	strb	r3, [r1, #0]
	return true;
}
  40016e:	2001      	movs	r0, #1
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	200004fb 	.word	0x200004fb
  400178:	20000590 	.word	0x20000590
  40017c:	20000628 	.word	0x20000628
  400180:	200004f4 	.word	0x200004f4

00400184 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400184:	4a02      	ldr	r2, [pc, #8]	; (400190 <udi_cdc_comm_disable+0xc>)
  400186:	7813      	ldrb	r3, [r2, #0]
  400188:	3b01      	subs	r3, #1
  40018a:	b2db      	uxtb	r3, r3
  40018c:	7013      	strb	r3, [r2, #0]
  40018e:	4770      	bx	lr
  400190:	200004fb 	.word	0x200004fb

00400194 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400194:	4a04      	ldr	r2, [pc, #16]	; (4001a8 <udi_cdc_data_disable+0x14>)
  400196:	7813      	ldrb	r3, [r2, #0]
  400198:	3b01      	subs	r3, #1
  40019a:	b2db      	uxtb	r3, r3
  40019c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  40019e:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001a0:	2200      	movs	r2, #0
  4001a2:	4b02      	ldr	r3, [pc, #8]	; (4001ac <udi_cdc_data_disable+0x18>)
  4001a4:	701a      	strb	r2, [r3, #0]
  4001a6:	4770      	bx	lr
  4001a8:	200004fc 	.word	0x200004fc
  4001ac:	200004f2 	.word	0x200004f2

004001b0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b0:	2000      	movs	r0, #0
  4001b2:	4770      	bx	lr

004001b4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001b4:	2000      	movs	r0, #0
  4001b6:	4770      	bx	lr

004001b8 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001b8:	4b1d      	ldr	r3, [pc, #116]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001ba:	781b      	ldrb	r3, [r3, #0]
  4001bc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001c0:	d105      	bne.n	4001ce <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001c6:	2b20      	cmp	r3, #32
  4001c8:	d018      	beq.n	4001fc <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001ca:	2000      	movs	r0, #0
  4001cc:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001d2:	2b20      	cmp	r3, #32
  4001d4:	d001      	beq.n	4001da <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  4001d6:	2000      	movs	r0, #0
  4001d8:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001da:	4b15      	ldr	r3, [pc, #84]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001dc:	785b      	ldrb	r3, [r3, #1]
  4001de:	2b21      	cmp	r3, #33	; 0x21
  4001e0:	d124      	bne.n	40022c <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  4001e2:	4b13      	ldr	r3, [pc, #76]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e4:	88db      	ldrh	r3, [r3, #6]
  4001e6:	2b07      	cmp	r3, #7
  4001e8:	d001      	beq.n	4001ee <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  4001ea:	2000      	movs	r0, #0
  4001ec:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <udi_cdc_comm_setup+0x7c>)
  4001f2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4001f4:	2207      	movs	r2, #7
  4001f6:	819a      	strh	r2, [r3, #12]
				return true;
  4001f8:	2001      	movs	r0, #1
  4001fa:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001fc:	4b0c      	ldr	r3, [pc, #48]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001fe:	7858      	ldrb	r0, [r3, #1]
  400200:	2820      	cmp	r0, #32
  400202:	d004      	beq.n	40020e <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400204:	2822      	cmp	r0, #34	; 0x22
  400206:	bf14      	ite	ne
  400208:	2000      	movne	r0, #0
  40020a:	2001      	moveq	r0, #1
  40020c:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  40020e:	4b08      	ldr	r3, [pc, #32]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400210:	88db      	ldrh	r3, [r3, #6]
  400212:	2b07      	cmp	r3, #7
  400214:	d001      	beq.n	40021a <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  400216:	2000      	movs	r0, #0
}
  400218:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <udi_cdc_comm_setup+0x78>)
  40021c:	4a06      	ldr	r2, [pc, #24]	; (400238 <udi_cdc_comm_setup+0x80>)
  40021e:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400220:	4a04      	ldr	r2, [pc, #16]	; (400234 <udi_cdc_comm_setup+0x7c>)
  400222:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400224:	2207      	movs	r2, #7
  400226:	819a      	strh	r2, [r3, #12]
				return true;
  400228:	2001      	movs	r0, #1
  40022a:	4770      	bx	lr
	return false;  // request Not supported
  40022c:	2000      	movs	r0, #0
  40022e:	4770      	bx	lr
  400230:	2000070c 	.word	0x2000070c
  400234:	200004f4 	.word	0x200004f4
  400238:	0040023d 	.word	0x0040023d

0040023c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  40023c:	4770      	bx	lr
	...

00400240 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400240:	4b44      	ldr	r3, [pc, #272]	; (400354 <udi_cdc_tx_send+0x114>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b103      	cbz	r3, 400248 <udi_cdc_tx_send+0x8>
  400246:	4770      	bx	lr
{
  400248:	b570      	push	{r4, r5, r6, lr}
  40024a:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40024c:	4b42      	ldr	r3, [pc, #264]	; (400358 <udi_cdc_tx_send+0x118>)
  40024e:	4798      	blx	r3
  400250:	2800      	cmp	r0, #0
  400252:	d041      	beq.n	4002d8 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400254:	4b41      	ldr	r3, [pc, #260]	; (40035c <udi_cdc_tx_send+0x11c>)
  400256:	881c      	ldrh	r4, [r3, #0]
  400258:	4b41      	ldr	r3, [pc, #260]	; (400360 <udi_cdc_tx_send+0x120>)
  40025a:	4798      	blx	r3
  40025c:	4284      	cmp	r4, r0
  40025e:	d076      	beq.n	40034e <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400260:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400264:	fab3 f383 	clz	r3, r3
  400268:	095b      	lsrs	r3, r3, #5
  40026a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40026c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40026e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400272:	2200      	movs	r2, #0
  400274:	4b3b      	ldr	r3, [pc, #236]	; (400364 <udi_cdc_tx_send+0x124>)
  400276:	701a      	strb	r2, [r3, #0]
	return flags;
  400278:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40027a:	4b3b      	ldr	r3, [pc, #236]	; (400368 <udi_cdc_tx_send+0x128>)
  40027c:	781c      	ldrb	r4, [r3, #0]
  40027e:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400280:	4b3a      	ldr	r3, [pc, #232]	; (40036c <udi_cdc_tx_send+0x12c>)
  400282:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400286:	2b00      	cmp	r3, #0
  400288:	d02d      	beq.n	4002e6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40028a:	2200      	movs	r2, #0
  40028c:	4b38      	ldr	r3, [pc, #224]	; (400370 <udi_cdc_tx_send+0x130>)
  40028e:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400290:	4b38      	ldr	r3, [pc, #224]	; (400374 <udi_cdc_tx_send+0x134>)
  400292:	781b      	ldrb	r3, [r3, #0]
  400294:	2b00      	cmp	r3, #0
  400296:	d142      	bne.n	40031e <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400298:	fab4 f384 	clz	r3, r4
  40029c:	095b      	lsrs	r3, r3, #5
  40029e:	4a32      	ldr	r2, [pc, #200]	; (400368 <udi_cdc_tx_send+0x128>)
  4002a0:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002a2:	2201      	movs	r2, #1
  4002a4:	4b2b      	ldr	r3, [pc, #172]	; (400354 <udi_cdc_tx_send+0x114>)
  4002a6:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002a8:	b125      	cbz	r5, 4002b4 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002aa:	4b2e      	ldr	r3, [pc, #184]	; (400364 <udi_cdc_tx_send+0x124>)
  4002ac:	701a      	strb	r2, [r3, #0]
  4002ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002b2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002b4:	4626      	mov	r6, r4
  4002b6:	4b2d      	ldr	r3, [pc, #180]	; (40036c <udi_cdc_tx_send+0x12c>)
  4002b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002bc:	2b40      	cmp	r3, #64	; 0x40
  4002be:	bf14      	ite	ne
  4002c0:	2501      	movne	r5, #1
  4002c2:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002c4:	d034      	beq.n	400330 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4002c6:	4b24      	ldr	r3, [pc, #144]	; (400358 <udi_cdc_tx_send+0x118>)
  4002c8:	4798      	blx	r3
  4002ca:	2800      	cmp	r0, #0
  4002cc:	d02b      	beq.n	400326 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002ce:	4b24      	ldr	r3, [pc, #144]	; (400360 <udi_cdc_tx_send+0x120>)
  4002d0:	4798      	blx	r3
  4002d2:	4b22      	ldr	r3, [pc, #136]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002d4:	8018      	strh	r0, [r3, #0]
  4002d6:	e02e      	b.n	400336 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4002d8:	4b20      	ldr	r3, [pc, #128]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002da:	881c      	ldrh	r4, [r3, #0]
  4002dc:	4b26      	ldr	r3, [pc, #152]	; (400378 <udi_cdc_tx_send+0x138>)
  4002de:	4798      	blx	r3
  4002e0:	4284      	cmp	r4, r0
  4002e2:	d1bd      	bne.n	400260 <udi_cdc_tx_send+0x20>
  4002e4:	e033      	b.n	40034e <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4002e6:	4a22      	ldr	r2, [pc, #136]	; (400370 <udi_cdc_tx_send+0x130>)
  4002e8:	8813      	ldrh	r3, [r2, #0]
  4002ea:	3301      	adds	r3, #1
  4002ec:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002ee:	4b1a      	ldr	r3, [pc, #104]	; (400358 <udi_cdc_tx_send+0x118>)
  4002f0:	4798      	blx	r3
  4002f2:	b918      	cbnz	r0, 4002fc <udi_cdc_tx_send+0xbc>
  4002f4:	4b1e      	ldr	r3, [pc, #120]	; (400370 <udi_cdc_tx_send+0x130>)
  4002f6:	881b      	ldrh	r3, [r3, #0]
  4002f8:	2b63      	cmp	r3, #99	; 0x63
  4002fa:	d908      	bls.n	40030e <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4002fc:	4b16      	ldr	r3, [pc, #88]	; (400358 <udi_cdc_tx_send+0x118>)
  4002fe:	4798      	blx	r3
  400300:	2800      	cmp	r0, #0
  400302:	d0c2      	beq.n	40028a <udi_cdc_tx_send+0x4a>
  400304:	4b1a      	ldr	r3, [pc, #104]	; (400370 <udi_cdc_tx_send+0x130>)
  400306:	881b      	ldrh	r3, [r3, #0]
  400308:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40030c:	d2bd      	bcs.n	40028a <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  40030e:	b1f5      	cbz	r5, 40034e <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  400310:	2201      	movs	r2, #1
  400312:	4b14      	ldr	r3, [pc, #80]	; (400364 <udi_cdc_tx_send+0x124>)
  400314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40031a:	b662      	cpsie	i
  40031c:	e017      	b.n	40034e <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40031e:	fab4 f484 	clz	r4, r4
  400322:	0964      	lsrs	r4, r4, #5
  400324:	e7bd      	b.n	4002a2 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400326:	4b14      	ldr	r3, [pc, #80]	; (400378 <udi_cdc_tx_send+0x138>)
  400328:	4798      	blx	r3
  40032a:	4b0c      	ldr	r3, [pc, #48]	; (40035c <udi_cdc_tx_send+0x11c>)
  40032c:	8018      	strh	r0, [r3, #0]
  40032e:	e002      	b.n	400336 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400330:	2200      	movs	r2, #0
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <udi_cdc_tx_send+0x11c>)
  400334:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400336:	4b0d      	ldr	r3, [pc, #52]	; (40036c <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400338:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  40033c:	4a0f      	ldr	r2, [pc, #60]	; (40037c <udi_cdc_tx_send+0x13c>)
  40033e:	9200      	str	r2, [sp, #0]
  400340:	4a0f      	ldr	r2, [pc, #60]	; (400380 <udi_cdc_tx_send+0x140>)
  400342:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400346:	4629      	mov	r1, r5
  400348:	2081      	movs	r0, #129	; 0x81
  40034a:	4c0e      	ldr	r4, [pc, #56]	; (400384 <udi_cdc_tx_send+0x144>)
  40034c:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40034e:	b004      	add	sp, #16
  400350:	bd70      	pop	{r4, r5, r6, pc}
  400352:	bf00      	nop
  400354:	20000624 	.word	0x20000624
  400358:	00401ccd 	.word	0x00401ccd
  40035c:	20000620 	.word	0x20000620
  400360:	00401d39 	.word	0x00401d39
  400364:	200000a0 	.word	0x200000a0
  400368:	2000061c 	.word	0x2000061c
  40036c:	20000618 	.word	0x20000618
  400370:	200004f0 	.word	0x200004f0
  400374:	20000594 	.word	0x20000594
  400378:	00401d29 	.word	0x00401d29
  40037c:	00400389 	.word	0x00400389
  400380:	20000598 	.word	0x20000598
  400384:	00402091 	.word	0x00402091

00400388 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400388:	b100      	cbz	r0, 40038c <udi_cdc_data_sent+0x4>
  40038a:	4770      	bx	lr
{
  40038c:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40038e:	4b07      	ldr	r3, [pc, #28]	; (4003ac <udi_cdc_data_sent+0x24>)
  400390:	781b      	ldrb	r3, [r3, #0]
  400392:	fab3 f383 	clz	r3, r3
  400396:	095b      	lsrs	r3, r3, #5
  400398:	4a05      	ldr	r2, [pc, #20]	; (4003b0 <udi_cdc_data_sent+0x28>)
  40039a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40039e:	4b05      	ldr	r3, [pc, #20]	; (4003b4 <udi_cdc_data_sent+0x2c>)
  4003a0:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003a2:	4b05      	ldr	r3, [pc, #20]	; (4003b8 <udi_cdc_data_sent+0x30>)
  4003a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  4003a6:	4b05      	ldr	r3, [pc, #20]	; (4003bc <udi_cdc_data_sent+0x34>)
  4003a8:	4798      	blx	r3
  4003aa:	bd08      	pop	{r3, pc}
  4003ac:	2000061c 	.word	0x2000061c
  4003b0:	20000618 	.word	0x20000618
  4003b4:	20000594 	.word	0x20000594
  4003b8:	20000624 	.word	0x20000624
  4003bc:	00400241 	.word	0x00400241

004003c0 <udi_cdc_data_sof_notify>:
{
  4003c0:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  4003c2:	2000      	movs	r0, #0
  4003c4:	4b01      	ldr	r3, [pc, #4]	; (4003cc <udi_cdc_data_sof_notify+0xc>)
  4003c6:	4798      	blx	r3
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	00400241 	.word	0x00400241

004003d0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003d0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003d2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003d6:	fab3 f383 	clz	r3, r3
  4003da:	095b      	lsrs	r3, r3, #5
  4003dc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4003e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003e4:	2200      	movs	r2, #0
  4003e6:	4b0b      	ldr	r3, [pc, #44]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  4003e8:	701a      	strb	r2, [r3, #0]
	return flags;
  4003ea:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4003ec:	4b0a      	ldr	r3, [pc, #40]	; (400418 <udi_cdc_multi_get_nb_received_data+0x48>)
  4003ee:	8818      	ldrh	r0, [r3, #0]
  4003f0:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4003f2:	4a0a      	ldr	r2, [pc, #40]	; (40041c <udi_cdc_multi_get_nb_received_data+0x4c>)
  4003f4:	7812      	ldrb	r2, [r2, #0]
  4003f6:	b2d2      	uxtb	r2, r2
  4003f8:	4809      	ldr	r0, [pc, #36]	; (400420 <udi_cdc_multi_get_nb_received_data+0x50>)
  4003fa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  4003fe:	b280      	uxth	r0, r0
  400400:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  400402:	b129      	cbz	r1, 400410 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400404:	2201      	movs	r2, #1
  400406:	4b03      	ldr	r3, [pc, #12]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  400408:	701a      	strb	r2, [r3, #0]
  40040a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40040e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400410:	b002      	add	sp, #8
  400412:	4770      	bx	lr
  400414:	200000a0 	.word	0x200000a0
  400418:	20000588 	.word	0x20000588
  40041c:	20000584 	.word	0x20000584
  400420:	20000580 	.word	0x20000580

00400424 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400424:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400426:	4b03      	ldr	r3, [pc, #12]	; (400434 <udi_cdc_multi_is_rx_ready+0x10>)
  400428:	4798      	blx	r3
}
  40042a:	3000      	adds	r0, #0
  40042c:	bf18      	it	ne
  40042e:	2001      	movne	r0, #1
  400430:	bd08      	pop	{r3, pc}
  400432:	bf00      	nop
  400434:	004003d1 	.word	0x004003d1

00400438 <udi_cdc_rx_start>:
{
  400438:	b510      	push	{r4, lr}
  40043a:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40043c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400440:	fab3 f383 	clz	r3, r3
  400444:	095b      	lsrs	r3, r3, #5
  400446:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400448:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40044a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40044e:	2200      	movs	r2, #0
  400450:	4b1e      	ldr	r3, [pc, #120]	; (4004cc <udi_cdc_rx_start+0x94>)
  400452:	701a      	strb	r2, [r3, #0]
	return flags;
  400454:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400456:	4a1e      	ldr	r2, [pc, #120]	; (4004d0 <udi_cdc_rx_start+0x98>)
  400458:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  40045a:	4a1e      	ldr	r2, [pc, #120]	; (4004d4 <udi_cdc_rx_start+0x9c>)
  40045c:	7812      	ldrb	r2, [r2, #0]
  40045e:	b94a      	cbnz	r2, 400474 <udi_cdc_rx_start+0x3c>
  400460:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400462:	4a1d      	ldr	r2, [pc, #116]	; (4004d8 <udi_cdc_rx_start+0xa0>)
  400464:	8811      	ldrh	r1, [r2, #0]
  400466:	b289      	uxth	r1, r1
  400468:	4a1c      	ldr	r2, [pc, #112]	; (4004dc <udi_cdc_rx_start+0xa4>)
  40046a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40046e:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400470:	4291      	cmp	r1, r2
  400472:	d209      	bcs.n	400488 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  400474:	b33b      	cbz	r3, 4004c6 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400476:	2201      	movs	r2, #1
  400478:	4b14      	ldr	r3, [pc, #80]	; (4004cc <udi_cdc_rx_start+0x94>)
  40047a:	701a      	strb	r2, [r3, #0]
  40047c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400480:	b662      	cpsie	i
		return false;
  400482:	2000      	movs	r0, #0
}
  400484:	b004      	add	sp, #16
  400486:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  400488:	2100      	movs	r1, #0
  40048a:	4a13      	ldr	r2, [pc, #76]	; (4004d8 <udi_cdc_rx_start+0xa0>)
  40048c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40048e:	fab4 f284 	clz	r2, r4
  400492:	0952      	lsrs	r2, r2, #5
  400494:	490e      	ldr	r1, [pc, #56]	; (4004d0 <udi_cdc_rx_start+0x98>)
  400496:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400498:	2101      	movs	r1, #1
  40049a:	4a0e      	ldr	r2, [pc, #56]	; (4004d4 <udi_cdc_rx_start+0x9c>)
  40049c:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40049e:	b123      	cbz	r3, 4004aa <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004a0:	4b0a      	ldr	r3, [pc, #40]	; (4004cc <udi_cdc_rx_start+0x94>)
  4004a2:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4004a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004a8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004aa:	2000      	movs	r0, #0
  4004ac:	4b0c      	ldr	r3, [pc, #48]	; (4004e0 <udi_cdc_rx_start+0xa8>)
  4004ae:	4798      	blx	r3
	return udd_ep_run(ep,
  4004b0:	4b0c      	ldr	r3, [pc, #48]	; (4004e4 <udi_cdc_rx_start+0xac>)
  4004b2:	9300      	str	r3, [sp, #0]
  4004b4:	2340      	movs	r3, #64	; 0x40
  4004b6:	4a0c      	ldr	r2, [pc, #48]	; (4004e8 <udi_cdc_rx_start+0xb0>)
  4004b8:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004bc:	2101      	movs	r1, #1
  4004be:	2002      	movs	r0, #2
  4004c0:	4c0a      	ldr	r4, [pc, #40]	; (4004ec <udi_cdc_rx_start+0xb4>)
  4004c2:	47a0      	blx	r4
  4004c4:	e7de      	b.n	400484 <udi_cdc_rx_start+0x4c>
		return false;
  4004c6:	2000      	movs	r0, #0
  4004c8:	e7dc      	b.n	400484 <udi_cdc_rx_start+0x4c>
  4004ca:	bf00      	nop
  4004cc:	200000a0 	.word	0x200000a0
  4004d0:	20000584 	.word	0x20000584
  4004d4:	2000058c 	.word	0x2000058c
  4004d8:	20000588 	.word	0x20000588
  4004dc:	20000580 	.word	0x20000580
  4004e0:	00400425 	.word	0x00400425
  4004e4:	00400585 	.word	0x00400585
  4004e8:	20000500 	.word	0x20000500
  4004ec:	00402091 	.word	0x00402091

004004f0 <udi_cdc_data_enable>:
{
  4004f0:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  4004f2:	2400      	movs	r4, #0
  4004f4:	4b16      	ldr	r3, [pc, #88]	; (400550 <udi_cdc_data_enable+0x60>)
  4004f6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4004f8:	4b16      	ldr	r3, [pc, #88]	; (400554 <udi_cdc_data_enable+0x64>)
  4004fa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4004fc:	4b16      	ldr	r3, [pc, #88]	; (400558 <udi_cdc_data_enable+0x68>)
  4004fe:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400500:	4b16      	ldr	r3, [pc, #88]	; (40055c <udi_cdc_data_enable+0x6c>)
  400502:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400504:	4b16      	ldr	r3, [pc, #88]	; (400560 <udi_cdc_data_enable+0x70>)
  400506:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400508:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40050a:	4b16      	ldr	r3, [pc, #88]	; (400564 <udi_cdc_data_enable+0x74>)
  40050c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40050e:	4620      	mov	r0, r4
  400510:	4b15      	ldr	r3, [pc, #84]	; (400568 <udi_cdc_data_enable+0x78>)
  400512:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400514:	4b15      	ldr	r3, [pc, #84]	; (40056c <udi_cdc_data_enable+0x7c>)
  400516:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400518:	4b15      	ldr	r3, [pc, #84]	; (400570 <udi_cdc_data_enable+0x80>)
  40051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40051c:	4b15      	ldr	r3, [pc, #84]	; (400574 <udi_cdc_data_enable+0x84>)
  40051e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400520:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  400522:	4b15      	ldr	r3, [pc, #84]	; (400578 <udi_cdc_data_enable+0x88>)
  400524:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400526:	4620      	mov	r0, r4
  400528:	4b14      	ldr	r3, [pc, #80]	; (40057c <udi_cdc_data_enable+0x8c>)
  40052a:	4798      	blx	r3
  40052c:	4601      	mov	r1, r0
  40052e:	b140      	cbz	r0, 400542 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400530:	4a07      	ldr	r2, [pc, #28]	; (400550 <udi_cdc_data_enable+0x60>)
  400532:	7813      	ldrb	r3, [r2, #0]
  400534:	3301      	adds	r3, #1
  400536:	b2db      	uxtb	r3, r3
  400538:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40053a:	7813      	ldrb	r3, [r2, #0]
  40053c:	b2db      	uxtb	r3, r3
  40053e:	2b01      	cmp	r3, #1
  400540:	d001      	beq.n	400546 <udi_cdc_data_enable+0x56>
}
  400542:	4608      	mov	r0, r1
  400544:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  400546:	2201      	movs	r2, #1
  400548:	4b0d      	ldr	r3, [pc, #52]	; (400580 <udi_cdc_data_enable+0x90>)
  40054a:	701a      	strb	r2, [r3, #0]
  40054c:	e7f9      	b.n	400542 <udi_cdc_data_enable+0x52>
  40054e:	bf00      	nop
  400550:	200004fc 	.word	0x200004fc
  400554:	20000624 	.word	0x20000624
  400558:	20000594 	.word	0x20000594
  40055c:	2000061c 	.word	0x2000061c
  400560:	20000618 	.word	0x20000618
  400564:	20000620 	.word	0x20000620
  400568:	00400241 	.word	0x00400241
  40056c:	2000058c 	.word	0x2000058c
  400570:	20000584 	.word	0x20000584
  400574:	20000580 	.word	0x20000580
  400578:	20000588 	.word	0x20000588
  40057c:	00400439 	.word	0x00400439
  400580:	200004f2 	.word	0x200004f2

00400584 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400584:	b9e8      	cbnz	r0, 4005c2 <udi_cdc_data_received+0x3e>
{
  400586:	b510      	push	{r4, lr}
  400588:	b082      	sub	sp, #8
  40058a:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  40058c:	4b0d      	ldr	r3, [pc, #52]	; (4005c4 <udi_cdc_data_received+0x40>)
  40058e:	781c      	ldrb	r4, [r3, #0]
  400590:	fab4 f484 	clz	r4, r4
  400594:	0964      	lsrs	r4, r4, #5
	if (!n) {
  400596:	b151      	cbz	r1, 4005ae <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400598:	b289      	uxth	r1, r1
  40059a:	4b0b      	ldr	r3, [pc, #44]	; (4005c8 <udi_cdc_data_received+0x44>)
  40059c:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005a0:	2000      	movs	r0, #0
  4005a2:	4b0a      	ldr	r3, [pc, #40]	; (4005cc <udi_cdc_data_received+0x48>)
  4005a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005a6:	4b0a      	ldr	r3, [pc, #40]	; (4005d0 <udi_cdc_data_received+0x4c>)
  4005a8:	4798      	blx	r3
}
  4005aa:	b002      	add	sp, #8
  4005ac:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  4005ae:	4b09      	ldr	r3, [pc, #36]	; (4005d4 <udi_cdc_data_received+0x50>)
  4005b0:	9300      	str	r3, [sp, #0]
  4005b2:	2340      	movs	r3, #64	; 0x40
  4005b4:	4a08      	ldr	r2, [pc, #32]	; (4005d8 <udi_cdc_data_received+0x54>)
  4005b6:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4005ba:	2101      	movs	r1, #1
  4005bc:	4c07      	ldr	r4, [pc, #28]	; (4005dc <udi_cdc_data_received+0x58>)
  4005be:	47a0      	blx	r4
		return;
  4005c0:	e7f3      	b.n	4005aa <udi_cdc_data_received+0x26>
  4005c2:	4770      	bx	lr
  4005c4:	20000584 	.word	0x20000584
  4005c8:	20000580 	.word	0x20000580
  4005cc:	2000058c 	.word	0x2000058c
  4005d0:	00400439 	.word	0x00400439
  4005d4:	00400585 	.word	0x00400585
  4005d8:	20000500 	.word	0x20000500
  4005dc:	00402091 	.word	0x00402091

004005e0 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  4005e0:	4b10      	ldr	r3, [pc, #64]	; (400624 <udc_next_desc_in_iface+0x44>)
  4005e2:	681b      	ldr	r3, [r3, #0]
  4005e4:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4005e6:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4005e8:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  4005ea:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4005ec:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4005ee:	4290      	cmp	r0, r2
  4005f0:	d211      	bcs.n	400616 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4005f2:	7843      	ldrb	r3, [r0, #1]
  4005f4:	2b04      	cmp	r3, #4
  4005f6:	d010      	beq.n	40061a <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4005f8:	428b      	cmp	r3, r1
  4005fa:	d009      	beq.n	400610 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  4005fc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4005fe:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400600:	4290      	cmp	r0, r2
  400602:	d206      	bcs.n	400612 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400604:	7843      	ldrb	r3, [r0, #1]
  400606:	2b04      	cmp	r3, #4
  400608:	d009      	beq.n	40061e <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  40060a:	428b      	cmp	r3, r1
  40060c:	d1f6      	bne.n	4005fc <udc_next_desc_in_iface+0x1c>
  40060e:	e007      	b.n	400620 <udc_next_desc_in_iface+0x40>
  400610:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  400612:	2000      	movs	r0, #0
  400614:	4770      	bx	lr
  400616:	2000      	movs	r0, #0
  400618:	4770      	bx	lr
  40061a:	2000      	movs	r0, #0
  40061c:	4770      	bx	lr
  40061e:	2000      	movs	r0, #0
}
  400620:	4770      	bx	lr
  400622:	bf00      	nop
  400624:	20000640 	.word	0x20000640

00400628 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400628:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  40062a:	4b03      	ldr	r3, [pc, #12]	; (400638 <udc_valid_address+0x10>)
  40062c:	7898      	ldrb	r0, [r3, #2]
  40062e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400632:	4b02      	ldr	r3, [pc, #8]	; (40063c <udc_valid_address+0x14>)
  400634:	4798      	blx	r3
  400636:	bd08      	pop	{r3, pc}
  400638:	2000070c 	.word	0x2000070c
  40063c:	00401cd1 	.word	0x00401cd1

00400640 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400640:	4b19      	ldr	r3, [pc, #100]	; (4006a8 <udc_update_iface_desc+0x68>)
  400642:	781b      	ldrb	r3, [r3, #0]
  400644:	b34b      	cbz	r3, 40069a <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400646:	4b19      	ldr	r3, [pc, #100]	; (4006ac <udc_update_iface_desc+0x6c>)
  400648:	681b      	ldr	r3, [r3, #0]
  40064a:	681b      	ldr	r3, [r3, #0]
  40064c:	791a      	ldrb	r2, [r3, #4]
  40064e:	4282      	cmp	r2, r0
  400650:	d925      	bls.n	40069e <udc_update_iface_desc+0x5e>
{
  400652:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400654:	4a16      	ldr	r2, [pc, #88]	; (4006b0 <udc_update_iface_desc+0x70>)
  400656:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400658:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40065a:	441c      	add	r4, r3
	while (ptr_end_desc >
  40065c:	42a3      	cmp	r3, r4
  40065e:	d220      	bcs.n	4006a2 <udc_update_iface_desc+0x62>
  400660:	2500      	movs	r5, #0
  400662:	2601      	movs	r6, #1
  400664:	e007      	b.n	400676 <udc_update_iface_desc+0x36>
  400666:	4a12      	ldr	r2, [pc, #72]	; (4006b0 <udc_update_iface_desc+0x70>)
  400668:	6013      	str	r3, [r2, #0]
  40066a:	e00f      	b.n	40068c <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  40066c:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  40066e:	4413      	add	r3, r2
  400670:	4635      	mov	r5, r6
	while (ptr_end_desc >
  400672:	42a3      	cmp	r3, r4
  400674:	d20c      	bcs.n	400690 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400676:	785a      	ldrb	r2, [r3, #1]
  400678:	2a04      	cmp	r2, #4
  40067a:	d1f7      	bne.n	40066c <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40067c:	789a      	ldrb	r2, [r3, #2]
  40067e:	4282      	cmp	r2, r0
  400680:	d1f4      	bne.n	40066c <udc_update_iface_desc+0x2c>
  400682:	78da      	ldrb	r2, [r3, #3]
  400684:	428a      	cmp	r2, r1
  400686:	d1f1      	bne.n	40066c <udc_update_iface_desc+0x2c>
  400688:	2d00      	cmp	r5, #0
  40068a:	d1ec      	bne.n	400666 <udc_update_iface_desc+0x26>
				return true; // Interface found
  40068c:	2001      	movs	r0, #1
  40068e:	e002      	b.n	400696 <udc_update_iface_desc+0x56>
  400690:	4a07      	ldr	r2, [pc, #28]	; (4006b0 <udc_update_iface_desc+0x70>)
  400692:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400694:	2000      	movs	r0, #0
}
  400696:	bc70      	pop	{r4, r5, r6}
  400698:	4770      	bx	lr
		return false;
  40069a:	2000      	movs	r0, #0
  40069c:	4770      	bx	lr
		return false;
  40069e:	2000      	movs	r0, #0
  4006a0:	4770      	bx	lr
	return false; // Interface not found
  4006a2:	2000      	movs	r0, #0
  4006a4:	e7f7      	b.n	400696 <udc_update_iface_desc+0x56>
  4006a6:	bf00      	nop
  4006a8:	2000063c 	.word	0x2000063c
  4006ac:	20000640 	.word	0x20000640
  4006b0:	20000644 	.word	0x20000644

004006b4 <udc_iface_disable>:
{
  4006b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006b8:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4006ba:	2100      	movs	r1, #0
  4006bc:	4b13      	ldr	r3, [pc, #76]	; (40070c <udc_iface_disable+0x58>)
  4006be:	4798      	blx	r3
  4006c0:	4680      	mov	r8, r0
  4006c2:	b910      	cbnz	r0, 4006ca <udc_iface_disable+0x16>
}
  4006c4:	4640      	mov	r0, r8
  4006c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4006ca:	4b11      	ldr	r3, [pc, #68]	; (400710 <udc_iface_disable+0x5c>)
  4006cc:	681b      	ldr	r3, [r3, #0]
  4006ce:	685b      	ldr	r3, [r3, #4]
  4006d0:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4006d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4006d8:	4798      	blx	r3
  4006da:	4601      	mov	r1, r0
  4006dc:	4620      	mov	r0, r4
  4006de:	4b0b      	ldr	r3, [pc, #44]	; (40070c <udc_iface_disable+0x58>)
  4006e0:	4798      	blx	r3
  4006e2:	4680      	mov	r8, r0
  4006e4:	2800      	cmp	r0, #0
  4006e6:	d0ed      	beq.n	4006c4 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4006e8:	4b0a      	ldr	r3, [pc, #40]	; (400714 <udc_iface_disable+0x60>)
  4006ea:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4006ec:	2605      	movs	r6, #5
  4006ee:	4d0a      	ldr	r5, [pc, #40]	; (400718 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  4006f0:	4f0a      	ldr	r7, [pc, #40]	; (40071c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4006f2:	4631      	mov	r1, r6
  4006f4:	4620      	mov	r0, r4
  4006f6:	47a8      	blx	r5
			if (NULL == ep_desc) {
  4006f8:	4604      	mov	r4, r0
  4006fa:	b110      	cbz	r0, 400702 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  4006fc:	7880      	ldrb	r0, [r0, #2]
  4006fe:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400700:	e7f7      	b.n	4006f2 <udc_iface_disable+0x3e>
	udi_api->disable();
  400702:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400706:	4798      	blx	r3
	return true;
  400708:	e7dc      	b.n	4006c4 <udc_iface_disable+0x10>
  40070a:	bf00      	nop
  40070c:	00400641 	.word	0x00400641
  400710:	20000640 	.word	0x20000640
  400714:	20000644 	.word	0x20000644
  400718:	004005e1 	.word	0x004005e1
  40071c:	00401e41 	.word	0x00401e41

00400720 <udc_iface_enable>:
{
  400720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400724:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400726:	4b10      	ldr	r3, [pc, #64]	; (400768 <udc_iface_enable+0x48>)
  400728:	4798      	blx	r3
  40072a:	4603      	mov	r3, r0
  40072c:	b1c8      	cbz	r0, 400762 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40072e:	4b0f      	ldr	r3, [pc, #60]	; (40076c <udc_iface_enable+0x4c>)
  400730:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400732:	2605      	movs	r6, #5
  400734:	4d0e      	ldr	r5, [pc, #56]	; (400770 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400736:	4f0f      	ldr	r7, [pc, #60]	; (400774 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400738:	4631      	mov	r1, r6
  40073a:	4620      	mov	r0, r4
  40073c:	47a8      	blx	r5
		if (NULL == ep_desc)
  40073e:	4604      	mov	r4, r0
  400740:	b138      	cbz	r0, 400752 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400742:	8882      	ldrh	r2, [r0, #4]
  400744:	78c1      	ldrb	r1, [r0, #3]
  400746:	7880      	ldrb	r0, [r0, #2]
  400748:	47b8      	blx	r7
  40074a:	4603      	mov	r3, r0
  40074c:	2800      	cmp	r0, #0
  40074e:	d1f3      	bne.n	400738 <udc_iface_enable+0x18>
  400750:	e007      	b.n	400762 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400752:	4b09      	ldr	r3, [pc, #36]	; (400778 <udc_iface_enable+0x58>)
  400754:	681b      	ldr	r3, [r3, #0]
  400756:	685b      	ldr	r3, [r3, #4]
  400758:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	4798      	blx	r3
  400760:	4603      	mov	r3, r0
}
  400762:	4618      	mov	r0, r3
  400764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400768:	00400641 	.word	0x00400641
  40076c:	20000644 	.word	0x20000644
  400770:	004005e1 	.word	0x004005e1
  400774:	00401d49 	.word	0x00401d49
  400778:	20000640 	.word	0x20000640

0040077c <udc_start>:
{
  40077c:	b508      	push	{r3, lr}
	udd_enable();
  40077e:	4b01      	ldr	r3, [pc, #4]	; (400784 <udc_start+0x8>)
  400780:	4798      	blx	r3
  400782:	bd08      	pop	{r3, pc}
  400784:	00401bf1 	.word	0x00401bf1

00400788 <udc_reset>:
{
  400788:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  40078a:	4b0d      	ldr	r3, [pc, #52]	; (4007c0 <udc_reset+0x38>)
  40078c:	781b      	ldrb	r3, [r3, #0]
  40078e:	b183      	cbz	r3, 4007b2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400790:	4b0c      	ldr	r3, [pc, #48]	; (4007c4 <udc_reset+0x3c>)
  400792:	681b      	ldr	r3, [r3, #0]
  400794:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400796:	791b      	ldrb	r3, [r3, #4]
  400798:	b15b      	cbz	r3, 4007b2 <udc_reset+0x2a>
  40079a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  40079c:	4e0a      	ldr	r6, [pc, #40]	; (4007c8 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40079e:	4d09      	ldr	r5, [pc, #36]	; (4007c4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4007a0:	4620      	mov	r0, r4
  4007a2:	47b0      	blx	r6
				iface_num++) {
  4007a4:	3401      	adds	r4, #1
  4007a6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007a8:	682b      	ldr	r3, [r5, #0]
  4007aa:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4007ac:	791b      	ldrb	r3, [r3, #4]
  4007ae:	42a3      	cmp	r3, r4
  4007b0:	d8f6      	bhi.n	4007a0 <udc_reset+0x18>
	udc_num_configuration = 0;
  4007b2:	2200      	movs	r2, #0
  4007b4:	4b02      	ldr	r3, [pc, #8]	; (4007c0 <udc_reset+0x38>)
  4007b6:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4007b8:	2201      	movs	r2, #1
  4007ba:	4b04      	ldr	r3, [pc, #16]	; (4007cc <udc_reset+0x44>)
  4007bc:	801a      	strh	r2, [r3, #0]
  4007be:	bd70      	pop	{r4, r5, r6, pc}
  4007c0:	2000063c 	.word	0x2000063c
  4007c4:	20000640 	.word	0x20000640
  4007c8:	004006b5 	.word	0x004006b5
  4007cc:	20000632 	.word	0x20000632

004007d0 <udc_sof_notify>:
{
  4007d0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4007d2:	4b0d      	ldr	r3, [pc, #52]	; (400808 <udc_sof_notify+0x38>)
  4007d4:	781b      	ldrb	r3, [r3, #0]
  4007d6:	b1b3      	cbz	r3, 400806 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007d8:	4b0c      	ldr	r3, [pc, #48]	; (40080c <udc_sof_notify+0x3c>)
  4007da:	681b      	ldr	r3, [r3, #0]
  4007dc:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4007de:	7912      	ldrb	r2, [r2, #4]
  4007e0:	b18a      	cbz	r2, 400806 <udc_sof_notify+0x36>
  4007e2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007e4:	4d09      	ldr	r5, [pc, #36]	; (40080c <udc_sof_notify+0x3c>)
  4007e6:	e006      	b.n	4007f6 <udc_sof_notify+0x26>
				iface_num++) {
  4007e8:	3401      	adds	r4, #1
  4007ea:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007ec:	682b      	ldr	r3, [r5, #0]
  4007ee:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4007f0:	7912      	ldrb	r2, [r2, #4]
  4007f2:	42a2      	cmp	r2, r4
  4007f4:	d907      	bls.n	400806 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4007f6:	685b      	ldr	r3, [r3, #4]
  4007f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4007fc:	691b      	ldr	r3, [r3, #16]
  4007fe:	2b00      	cmp	r3, #0
  400800:	d0f2      	beq.n	4007e8 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400802:	4798      	blx	r3
  400804:	e7f0      	b.n	4007e8 <udc_sof_notify+0x18>
  400806:	bd38      	pop	{r3, r4, r5, pc}
  400808:	2000063c 	.word	0x2000063c
  40080c:	20000640 	.word	0x20000640

00400810 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400812:	4b96      	ldr	r3, [pc, #600]	; (400a6c <udc_process_setup+0x25c>)
  400814:	2200      	movs	r2, #0
  400816:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400818:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40081a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  40081c:	781b      	ldrb	r3, [r3, #0]
  40081e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400822:	d114      	bne.n	40084e <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400824:	f013 0f60 	tst.w	r3, #96	; 0x60
  400828:	f000 80b8 	beq.w	40099c <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  40082c:	4b8f      	ldr	r3, [pc, #572]	; (400a6c <udc_process_setup+0x25c>)
  40082e:	781b      	ldrb	r3, [r3, #0]
  400830:	f003 031f 	and.w	r3, r3, #31
  400834:	2b01      	cmp	r3, #1
  400836:	f000 818b 	beq.w	400b50 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  40083a:	4b8c      	ldr	r3, [pc, #560]	; (400a6c <udc_process_setup+0x25c>)
  40083c:	781b      	ldrb	r3, [r3, #0]
  40083e:	f003 031f 	and.w	r3, r3, #31
  400842:	2b02      	cmp	r3, #2
  400844:	f000 81ac 	beq.w	400ba0 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400848:	2300      	movs	r3, #0
#endif
}
  40084a:	4618      	mov	r0, r3
  40084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  40084e:	4a87      	ldr	r2, [pc, #540]	; (400a6c <udc_process_setup+0x25c>)
  400850:	88d2      	ldrh	r2, [r2, #6]
  400852:	2a00      	cmp	r2, #0
  400854:	f000 81cd 	beq.w	400bf2 <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400858:	f013 0f60 	tst.w	r3, #96	; 0x60
  40085c:	d1e6      	bne.n	40082c <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40085e:	f013 031f 	ands.w	r3, r3, #31
  400862:	d106      	bne.n	400872 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400864:	4981      	ldr	r1, [pc, #516]	; (400a6c <udc_process_setup+0x25c>)
  400866:	7849      	ldrb	r1, [r1, #1]
  400868:	2906      	cmp	r1, #6
  40086a:	d013      	beq.n	400894 <udc_process_setup+0x84>
  40086c:	2908      	cmp	r1, #8
  40086e:	d058      	beq.n	400922 <udc_process_setup+0x112>
  400870:	b149      	cbz	r1, 400886 <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400872:	2b01      	cmp	r3, #1
  400874:	d05c      	beq.n	400930 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400876:	2b02      	cmp	r3, #2
  400878:	d1d8      	bne.n	40082c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  40087a:	4b7c      	ldr	r3, [pc, #496]	; (400a6c <udc_process_setup+0x25c>)
  40087c:	785b      	ldrb	r3, [r3, #1]
  40087e:	2b00      	cmp	r3, #0
  400880:	d07e      	beq.n	400980 <udc_process_setup+0x170>
	return false;
  400882:	2300      	movs	r3, #0
  400884:	e160      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400886:	2a02      	cmp	r2, #2
  400888:	d1d0      	bne.n	40082c <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  40088a:	2102      	movs	r1, #2
  40088c:	4878      	ldr	r0, [pc, #480]	; (400a70 <udc_process_setup+0x260>)
  40088e:	4b79      	ldr	r3, [pc, #484]	; (400a74 <udc_process_setup+0x264>)
  400890:	4798      	blx	r3
  400892:	e09f      	b.n	4009d4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400894:	4b75      	ldr	r3, [pc, #468]	; (400a6c <udc_process_setup+0x25c>)
  400896:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400898:	0a13      	lsrs	r3, r2, #8
  40089a:	3b01      	subs	r3, #1
  40089c:	2b0e      	cmp	r3, #14
  40089e:	f200 8150 	bhi.w	400b42 <udc_process_setup+0x332>
  4008a2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4008a6:	000f      	.short	0x000f
  4008a8:	0036001c 	.word	0x0036001c
  4008ac:	014e014e 	.word	0x014e014e
  4008b0:	014e014e 	.word	0x014e014e
  4008b4:	014e014e 	.word	0x014e014e
  4008b8:	014e014e 	.word	0x014e014e
  4008bc:	014e014e 	.word	0x014e014e
  4008c0:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  4008c4:	4b6c      	ldr	r3, [pc, #432]	; (400a78 <udc_process_setup+0x268>)
  4008c6:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4008c8:	7801      	ldrb	r1, [r0, #0]
  4008ca:	4b6a      	ldr	r3, [pc, #424]	; (400a74 <udc_process_setup+0x264>)
  4008cc:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4008ce:	4b67      	ldr	r3, [pc, #412]	; (400a6c <udc_process_setup+0x25c>)
  4008d0:	88da      	ldrh	r2, [r3, #6]
  4008d2:	899b      	ldrh	r3, [r3, #12]
  4008d4:	4293      	cmp	r3, r2
  4008d6:	d97d      	bls.n	4009d4 <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4008d8:	4b64      	ldr	r3, [pc, #400]	; (400a6c <udc_process_setup+0x25c>)
  4008da:	819a      	strh	r2, [r3, #12]
  4008dc:	e07a      	b.n	4009d4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4008de:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  4008e0:	4b65      	ldr	r3, [pc, #404]	; (400a78 <udc_process_setup+0x268>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	7c5b      	ldrb	r3, [r3, #17]
  4008e6:	4293      	cmp	r3, r2
  4008e8:	d9a0      	bls.n	40082c <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4008ea:	4b63      	ldr	r3, [pc, #396]	; (400a78 <udc_process_setup+0x268>)
  4008ec:	685b      	ldr	r3, [r3, #4]
  4008ee:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  4008f2:	8841      	ldrh	r1, [r0, #2]
  4008f4:	4b5f      	ldr	r3, [pc, #380]	; (400a74 <udc_process_setup+0x264>)
  4008f6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  4008f8:	4b5c      	ldr	r3, [pc, #368]	; (400a6c <udc_process_setup+0x25c>)
  4008fa:	689b      	ldr	r3, [r3, #8]
  4008fc:	2202      	movs	r2, #2
  4008fe:	705a      	strb	r2, [r3, #1]
  400900:	e7e5      	b.n	4008ce <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400902:	4b5d      	ldr	r3, [pc, #372]	; (400a78 <udc_process_setup+0x268>)
  400904:	6898      	ldr	r0, [r3, #8]
  400906:	2800      	cmp	r0, #0
  400908:	d090      	beq.n	40082c <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40090a:	8841      	ldrh	r1, [r0, #2]
  40090c:	4b59      	ldr	r3, [pc, #356]	; (400a74 <udc_process_setup+0x264>)
  40090e:	4798      	blx	r3
  400910:	e7dd      	b.n	4008ce <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400912:	f012 0fff 	tst.w	r2, #255	; 0xff
  400916:	d189      	bne.n	40082c <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400918:	2104      	movs	r1, #4
  40091a:	4858      	ldr	r0, [pc, #352]	; (400a7c <udc_process_setup+0x26c>)
  40091c:	4b55      	ldr	r3, [pc, #340]	; (400a74 <udc_process_setup+0x264>)
  40091e:	4798      	blx	r3
  400920:	e7d5      	b.n	4008ce <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400922:	2a01      	cmp	r2, #1
  400924:	d182      	bne.n	40082c <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400926:	2101      	movs	r1, #1
  400928:	4855      	ldr	r0, [pc, #340]	; (400a80 <udc_process_setup+0x270>)
  40092a:	4b52      	ldr	r3, [pc, #328]	; (400a74 <udc_process_setup+0x264>)
  40092c:	4798      	blx	r3
  40092e:	e051      	b.n	4009d4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400930:	494e      	ldr	r1, [pc, #312]	; (400a6c <udc_process_setup+0x25c>)
  400932:	7849      	ldrb	r1, [r1, #1]
  400934:	290a      	cmp	r1, #10
  400936:	d19e      	bne.n	400876 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400938:	2a01      	cmp	r2, #1
  40093a:	f47f af77 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  40093e:	4b50      	ldr	r3, [pc, #320]	; (400a80 <udc_process_setup+0x270>)
  400940:	781b      	ldrb	r3, [r3, #0]
  400942:	2b00      	cmp	r3, #0
  400944:	f43f af72 	beq.w	40082c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400948:	4b48      	ldr	r3, [pc, #288]	; (400a6c <udc_process_setup+0x25c>)
  40094a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40094c:	4b4d      	ldr	r3, [pc, #308]	; (400a84 <udc_process_setup+0x274>)
  40094e:	681d      	ldr	r5, [r3, #0]
  400950:	682b      	ldr	r3, [r5, #0]
  400952:	791b      	ldrb	r3, [r3, #4]
  400954:	42a3      	cmp	r3, r4
  400956:	f67f af69 	bls.w	40082c <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  40095a:	2100      	movs	r1, #0
  40095c:	4620      	mov	r0, r4
  40095e:	4b4a      	ldr	r3, [pc, #296]	; (400a88 <udc_process_setup+0x278>)
  400960:	4798      	blx	r3
  400962:	2800      	cmp	r0, #0
  400964:	f43f af62 	beq.w	40082c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400968:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  40096a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  40096e:	68db      	ldr	r3, [r3, #12]
  400970:	4798      	blx	r3
  400972:	4b46      	ldr	r3, [pc, #280]	; (400a8c <udc_process_setup+0x27c>)
  400974:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400976:	2101      	movs	r1, #1
  400978:	4618      	mov	r0, r3
  40097a:	4b3e      	ldr	r3, [pc, #248]	; (400a74 <udc_process_setup+0x264>)
  40097c:	4798      	blx	r3
  40097e:	e029      	b.n	4009d4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400980:	2a02      	cmp	r2, #2
  400982:	f47f af53 	bne.w	40082c <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400986:	4b39      	ldr	r3, [pc, #228]	; (400a6c <udc_process_setup+0x25c>)
  400988:	7918      	ldrb	r0, [r3, #4]
  40098a:	4b41      	ldr	r3, [pc, #260]	; (400a90 <udc_process_setup+0x280>)
  40098c:	4798      	blx	r3
  40098e:	4b41      	ldr	r3, [pc, #260]	; (400a94 <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400990:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400992:	2102      	movs	r1, #2
  400994:	4618      	mov	r0, r3
  400996:	4b37      	ldr	r3, [pc, #220]	; (400a74 <udc_process_setup+0x264>)
  400998:	4798      	blx	r3
  40099a:	e01b      	b.n	4009d4 <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40099c:	f013 031f 	ands.w	r3, r3, #31
  4009a0:	f040 8082 	bne.w	400aa8 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  4009a4:	4a31      	ldr	r2, [pc, #196]	; (400a6c <udc_process_setup+0x25c>)
  4009a6:	7852      	ldrb	r2, [r2, #1]
  4009a8:	3a01      	subs	r2, #1
  4009aa:	2a08      	cmp	r2, #8
  4009ac:	d87c      	bhi.n	400aa8 <udc_process_setup+0x298>
  4009ae:	e8df f012 	tbh	[pc, r2, lsl #1]
  4009b2:	0013      	.short	0x0013
  4009b4:	00ca007b 	.word	0x00ca007b
  4009b8:	0009007b 	.word	0x0009007b
  4009bc:	007b007b 	.word	0x007b007b
  4009c0:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  4009c4:	4b29      	ldr	r3, [pc, #164]	; (400a6c <udc_process_setup+0x25c>)
  4009c6:	88db      	ldrh	r3, [r3, #6]
  4009c8:	2b00      	cmp	r3, #0
  4009ca:	f47f af2f 	bne.w	40082c <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  4009ce:	4a32      	ldr	r2, [pc, #200]	; (400a98 <udc_process_setup+0x288>)
  4009d0:	4b26      	ldr	r3, [pc, #152]	; (400a6c <udc_process_setup+0x25c>)
  4009d2:	611a      	str	r2, [r3, #16]
			return true;
  4009d4:	2301      	movs	r3, #1
  4009d6:	e738      	b.n	40084a <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  4009d8:	4b24      	ldr	r3, [pc, #144]	; (400a6c <udc_process_setup+0x25c>)
  4009da:	88db      	ldrh	r3, [r3, #6]
  4009dc:	2b00      	cmp	r3, #0
  4009de:	f47f af25 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4009e2:	4b22      	ldr	r3, [pc, #136]	; (400a6c <udc_process_setup+0x25c>)
  4009e4:	885b      	ldrh	r3, [r3, #2]
  4009e6:	2b01      	cmp	r3, #1
  4009e8:	f47f af20 	bne.w	40082c <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4009ec:	4a20      	ldr	r2, [pc, #128]	; (400a70 <udc_process_setup+0x260>)
  4009ee:	8813      	ldrh	r3, [r2, #0]
  4009f0:	f023 0302 	bic.w	r3, r3, #2
  4009f4:	8013      	strh	r3, [r2, #0]
  4009f6:	e7ed      	b.n	4009d4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  4009f8:	4b1c      	ldr	r3, [pc, #112]	; (400a6c <udc_process_setup+0x25c>)
  4009fa:	88db      	ldrh	r3, [r3, #6]
  4009fc:	2b00      	cmp	r3, #0
  4009fe:	f47f af15 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400a02:	4b26      	ldr	r3, [pc, #152]	; (400a9c <udc_process_setup+0x28c>)
  400a04:	4798      	blx	r3
  400a06:	2800      	cmp	r0, #0
  400a08:	f43f af10 	beq.w	40082c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a0c:	4b17      	ldr	r3, [pc, #92]	; (400a6c <udc_process_setup+0x25c>)
  400a0e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400a10:	4b19      	ldr	r3, [pc, #100]	; (400a78 <udc_process_setup+0x268>)
  400a12:	681b      	ldr	r3, [r3, #0]
  400a14:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a16:	429a      	cmp	r2, r3
  400a18:	f73f af08 	bgt.w	40082c <udc_process_setup+0x1c>
	udc_reset();
  400a1c:	4b20      	ldr	r3, [pc, #128]	; (400aa0 <udc_process_setup+0x290>)
  400a1e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400a20:	4b12      	ldr	r3, [pc, #72]	; (400a6c <udc_process_setup+0x25c>)
  400a22:	789b      	ldrb	r3, [r3, #2]
  400a24:	4a16      	ldr	r2, [pc, #88]	; (400a80 <udc_process_setup+0x270>)
  400a26:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400a28:	2b00      	cmp	r3, #0
  400a2a:	d0d3      	beq.n	4009d4 <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400a2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400a30:	3b01      	subs	r3, #1
  400a32:	4a11      	ldr	r2, [pc, #68]	; (400a78 <udc_process_setup+0x268>)
  400a34:	6852      	ldr	r2, [r2, #4]
  400a36:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400a3a:	4912      	ldr	r1, [pc, #72]	; (400a84 <udc_process_setup+0x274>)
  400a3c:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400a42:	791b      	ldrb	r3, [r3, #4]
  400a44:	2b00      	cmp	r3, #0
  400a46:	d0c5      	beq.n	4009d4 <udc_process_setup+0x1c4>
  400a48:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400a4a:	4626      	mov	r6, r4
  400a4c:	4d15      	ldr	r5, [pc, #84]	; (400aa4 <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a4e:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400a50:	4631      	mov	r1, r6
  400a52:	4620      	mov	r0, r4
  400a54:	47a8      	blx	r5
  400a56:	2800      	cmp	r0, #0
  400a58:	f43f aee8 	beq.w	40082c <udc_process_setup+0x1c>
			iface_num++) {
  400a5c:	3401      	adds	r4, #1
  400a5e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a60:	683b      	ldr	r3, [r7, #0]
  400a62:	681b      	ldr	r3, [r3, #0]
  400a64:	791b      	ldrb	r3, [r3, #4]
  400a66:	42a3      	cmp	r3, r4
  400a68:	d8f2      	bhi.n	400a50 <udc_process_setup+0x240>
  400a6a:	e7b3      	b.n	4009d4 <udc_process_setup+0x1c4>
  400a6c:	2000070c 	.word	0x2000070c
  400a70:	20000632 	.word	0x20000632
  400a74:	00401d3d 	.word	0x00401d3d
  400a78:	20000028 	.word	0x20000028
  400a7c:	2000009c 	.word	0x2000009c
  400a80:	2000063c 	.word	0x2000063c
  400a84:	20000640 	.word	0x20000640
  400a88:	00400641 	.word	0x00400641
  400a8c:	20000638 	.word	0x20000638
  400a90:	00401e99 	.word	0x00401e99
  400a94:	20000634 	.word	0x20000634
  400a98:	00400629 	.word	0x00400629
  400a9c:	00401d0d 	.word	0x00401d0d
  400aa0:	00400789 	.word	0x00400789
  400aa4:	00400721 	.word	0x00400721
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400aa8:	2b01      	cmp	r3, #1
  400aaa:	d00a      	beq.n	400ac2 <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400aac:	2b02      	cmp	r3, #2
  400aae:	f47f aebd 	bne.w	40082c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ab2:	4b52      	ldr	r3, [pc, #328]	; (400bfc <udc_process_setup+0x3ec>)
  400ab4:	785b      	ldrb	r3, [r3, #1]
  400ab6:	2b01      	cmp	r3, #1
  400ab8:	d020      	beq.n	400afc <udc_process_setup+0x2ec>
  400aba:	2b03      	cmp	r3, #3
  400abc:	d02e      	beq.n	400b1c <udc_process_setup+0x30c>
	return false;
  400abe:	2300      	movs	r3, #0
  400ac0:	e042      	b.n	400b48 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ac2:	4a4e      	ldr	r2, [pc, #312]	; (400bfc <udc_process_setup+0x3ec>)
  400ac4:	7852      	ldrb	r2, [r2, #1]
  400ac6:	2a0b      	cmp	r2, #11
  400ac8:	d1f0      	bne.n	400aac <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400aca:	4b4c      	ldr	r3, [pc, #304]	; (400bfc <udc_process_setup+0x3ec>)
  400acc:	88db      	ldrh	r3, [r3, #6]
  400ace:	2b00      	cmp	r3, #0
  400ad0:	f47f aeac 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400ad4:	4b4a      	ldr	r3, [pc, #296]	; (400c00 <udc_process_setup+0x3f0>)
  400ad6:	781b      	ldrb	r3, [r3, #0]
  400ad8:	2b00      	cmp	r3, #0
  400ada:	f43f aea7 	beq.w	40082c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400ade:	4b47      	ldr	r3, [pc, #284]	; (400bfc <udc_process_setup+0x3ec>)
  400ae0:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400ae2:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400ae4:	4620      	mov	r0, r4
  400ae6:	4b47      	ldr	r3, [pc, #284]	; (400c04 <udc_process_setup+0x3f4>)
  400ae8:	4798      	blx	r3
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ae9e 	beq.w	40082c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400af0:	b2e9      	uxtb	r1, r5
  400af2:	4620      	mov	r0, r4
  400af4:	4b44      	ldr	r3, [pc, #272]	; (400c08 <udc_process_setup+0x3f8>)
  400af6:	4798      	blx	r3
  400af8:	4603      	mov	r3, r0
  400afa:	e025      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400afc:	4b3f      	ldr	r3, [pc, #252]	; (400bfc <udc_process_setup+0x3ec>)
  400afe:	88db      	ldrh	r3, [r3, #6]
  400b00:	2b00      	cmp	r3, #0
  400b02:	f47f ae93 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b06:	4b3d      	ldr	r3, [pc, #244]	; (400bfc <udc_process_setup+0x3ec>)
  400b08:	885b      	ldrh	r3, [r3, #2]
  400b0a:	2b00      	cmp	r3, #0
  400b0c:	f47f ae8e 	bne.w	40082c <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b10:	4b3a      	ldr	r3, [pc, #232]	; (400bfc <udc_process_setup+0x3ec>)
  400b12:	7918      	ldrb	r0, [r3, #4]
  400b14:	4b3d      	ldr	r3, [pc, #244]	; (400c0c <udc_process_setup+0x3fc>)
  400b16:	4798      	blx	r3
  400b18:	4603      	mov	r3, r0
  400b1a:	e015      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400b1c:	4b37      	ldr	r3, [pc, #220]	; (400bfc <udc_process_setup+0x3ec>)
  400b1e:	88db      	ldrh	r3, [r3, #6]
  400b20:	2b00      	cmp	r3, #0
  400b22:	f47f ae83 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b26:	4b35      	ldr	r3, [pc, #212]	; (400bfc <udc_process_setup+0x3ec>)
  400b28:	885b      	ldrh	r3, [r3, #2]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	f47f ae7e 	bne.w	40082c <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b30:	4c32      	ldr	r4, [pc, #200]	; (400bfc <udc_process_setup+0x3ec>)
  400b32:	7920      	ldrb	r0, [r4, #4]
  400b34:	4b36      	ldr	r3, [pc, #216]	; (400c10 <udc_process_setup+0x400>)
  400b36:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b38:	7920      	ldrb	r0, [r4, #4]
  400b3a:	4b36      	ldr	r3, [pc, #216]	; (400c14 <udc_process_setup+0x404>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	e002      	b.n	400b48 <udc_process_setup+0x338>
		return false;
  400b42:	2300      	movs	r3, #0
  400b44:	e000      	b.n	400b48 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400b46:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400b48:	2b00      	cmp	r3, #0
  400b4a:	f47f ae7e 	bne.w	40084a <udc_process_setup+0x3a>
  400b4e:	e66d      	b.n	40082c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400b50:	4b2b      	ldr	r3, [pc, #172]	; (400c00 <udc_process_setup+0x3f0>)
  400b52:	781b      	ldrb	r3, [r3, #0]
  400b54:	2b00      	cmp	r3, #0
  400b56:	d04e      	beq.n	400bf6 <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b58:	4b28      	ldr	r3, [pc, #160]	; (400bfc <udc_process_setup+0x3ec>)
  400b5a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b5c:	4b2e      	ldr	r3, [pc, #184]	; (400c18 <udc_process_setup+0x408>)
  400b5e:	681d      	ldr	r5, [r3, #0]
  400b60:	682b      	ldr	r3, [r5, #0]
  400b62:	791b      	ldrb	r3, [r3, #4]
  400b64:	42a3      	cmp	r3, r4
  400b66:	d801      	bhi.n	400b6c <udc_process_setup+0x35c>
	return false;
  400b68:	2300      	movs	r3, #0
  400b6a:	e66e      	b.n	40084a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b6c:	2100      	movs	r1, #0
  400b6e:	4620      	mov	r0, r4
  400b70:	4b2a      	ldr	r3, [pc, #168]	; (400c1c <udc_process_setup+0x40c>)
  400b72:	4798      	blx	r3
  400b74:	2800      	cmp	r0, #0
  400b76:	f43f ae60 	beq.w	40083a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b7a:	686b      	ldr	r3, [r5, #4]
  400b7c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400b80:	68eb      	ldr	r3, [r5, #12]
  400b82:	4798      	blx	r3
  400b84:	4601      	mov	r1, r0
  400b86:	4620      	mov	r0, r4
  400b88:	4b24      	ldr	r3, [pc, #144]	; (400c1c <udc_process_setup+0x40c>)
  400b8a:	4798      	blx	r3
  400b8c:	2800      	cmp	r0, #0
  400b8e:	f43f ae54 	beq.w	40083a <udc_process_setup+0x2a>
	return udi_api->setup();
  400b92:	68ab      	ldr	r3, [r5, #8]
  400b94:	4798      	blx	r3
		if (udc_req_iface()) {
  400b96:	4603      	mov	r3, r0
  400b98:	2800      	cmp	r0, #0
  400b9a:	f47f ae56 	bne.w	40084a <udc_process_setup+0x3a>
  400b9e:	e64c      	b.n	40083a <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400ba0:	4b17      	ldr	r3, [pc, #92]	; (400c00 <udc_process_setup+0x3f0>)
  400ba2:	781b      	ldrb	r3, [r3, #0]
  400ba4:	b30b      	cbz	r3, 400bea <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ba6:	4b1c      	ldr	r3, [pc, #112]	; (400c18 <udc_process_setup+0x408>)
  400ba8:	681a      	ldr	r2, [r3, #0]
  400baa:	6813      	ldr	r3, [r2, #0]
  400bac:	791b      	ldrb	r3, [r3, #4]
  400bae:	b1f3      	cbz	r3, 400bee <udc_process_setup+0x3de>
  400bb0:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bb2:	4e1a      	ldr	r6, [pc, #104]	; (400c1c <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bb4:	4f18      	ldr	r7, [pc, #96]	; (400c18 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400bb6:	6853      	ldr	r3, [r2, #4]
  400bb8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bbc:	68eb      	ldr	r3, [r5, #12]
  400bbe:	4798      	blx	r3
  400bc0:	4601      	mov	r1, r0
  400bc2:	4620      	mov	r0, r4
  400bc4:	47b0      	blx	r6
  400bc6:	4603      	mov	r3, r0
  400bc8:	2800      	cmp	r0, #0
  400bca:	f43f ae3e 	beq.w	40084a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400bce:	68ab      	ldr	r3, [r5, #8]
  400bd0:	4798      	blx	r3
  400bd2:	4603      	mov	r3, r0
  400bd4:	2800      	cmp	r0, #0
  400bd6:	f47f ae38 	bne.w	40084a <udc_process_setup+0x3a>
			iface_num++) {
  400bda:	3401      	adds	r4, #1
  400bdc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bde:	683a      	ldr	r2, [r7, #0]
  400be0:	6811      	ldr	r1, [r2, #0]
  400be2:	7909      	ldrb	r1, [r1, #4]
  400be4:	42a1      	cmp	r1, r4
  400be6:	d8e6      	bhi.n	400bb6 <udc_process_setup+0x3a6>
  400be8:	e62f      	b.n	40084a <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400bea:	2300      	movs	r3, #0
  400bec:	e62d      	b.n	40084a <udc_process_setup+0x3a>
	return false;
  400bee:	2300      	movs	r3, #0
  400bf0:	e62b      	b.n	40084a <udc_process_setup+0x3a>
			return false; // Error from USB host
  400bf2:	2300      	movs	r3, #0
  400bf4:	e629      	b.n	40084a <udc_process_setup+0x3a>
	return false;
  400bf6:	2300      	movs	r3, #0
  400bf8:	e627      	b.n	40084a <udc_process_setup+0x3a>
  400bfa:	bf00      	nop
  400bfc:	2000070c 	.word	0x2000070c
  400c00:	2000063c 	.word	0x2000063c
  400c04:	004006b5 	.word	0x004006b5
  400c08:	00400721 	.word	0x00400721
  400c0c:	00401fb9 	.word	0x00401fb9
  400c10:	0040220d 	.word	0x0040220d
  400c14:	00401ed9 	.word	0x00401ed9
  400c18:	20000640 	.word	0x20000640
  400c1c:	00400641 	.word	0x00400641

00400c20 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c24:	4681      	mov	r9, r0
  400c26:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c28:	4b12      	ldr	r3, [pc, #72]	; (400c74 <pio_handler_process+0x54>)
  400c2a:	4798      	blx	r3
  400c2c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c2e:	4648      	mov	r0, r9
  400c30:	4b11      	ldr	r3, [pc, #68]	; (400c78 <pio_handler_process+0x58>)
  400c32:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c34:	4005      	ands	r5, r0
  400c36:	d013      	beq.n	400c60 <pio_handler_process+0x40>
  400c38:	4c10      	ldr	r4, [pc, #64]	; (400c7c <pio_handler_process+0x5c>)
  400c3a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c3e:	e003      	b.n	400c48 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c40:	42b4      	cmp	r4, r6
  400c42:	d00d      	beq.n	400c60 <pio_handler_process+0x40>
  400c44:	3410      	adds	r4, #16
		while (status != 0) {
  400c46:	b15d      	cbz	r5, 400c60 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c48:	6820      	ldr	r0, [r4, #0]
  400c4a:	42b8      	cmp	r0, r7
  400c4c:	d1f8      	bne.n	400c40 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c4e:	6861      	ldr	r1, [r4, #4]
  400c50:	4229      	tst	r1, r5
  400c52:	d0f5      	beq.n	400c40 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c54:	68e3      	ldr	r3, [r4, #12]
  400c56:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c58:	6863      	ldr	r3, [r4, #4]
  400c5a:	ea25 0503 	bic.w	r5, r5, r3
  400c5e:	e7ef      	b.n	400c40 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c60:	4b07      	ldr	r3, [pc, #28]	; (400c80 <pio_handler_process+0x60>)
  400c62:	681b      	ldr	r3, [r3, #0]
  400c64:	b123      	cbz	r3, 400c70 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400c66:	4b07      	ldr	r3, [pc, #28]	; (400c84 <pio_handler_process+0x64>)
  400c68:	681b      	ldr	r3, [r3, #0]
  400c6a:	b10b      	cbz	r3, 400c70 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400c6c:	4648      	mov	r0, r9
  400c6e:	4798      	blx	r3
  400c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c74:	00402425 	.word	0x00402425
  400c78:	00402429 	.word	0x00402429
  400c7c:	20000648 	.word	0x20000648
  400c80:	20000724 	.word	0x20000724
  400c84:	200006b8 	.word	0x200006b8

00400c88 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c88:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400c8a:	210b      	movs	r1, #11
  400c8c:	4801      	ldr	r0, [pc, #4]	; (400c94 <PIOA_Handler+0xc>)
  400c8e:	4b02      	ldr	r3, [pc, #8]	; (400c98 <PIOA_Handler+0x10>)
  400c90:	4798      	blx	r3
  400c92:	bd08      	pop	{r3, pc}
  400c94:	400e0e00 	.word	0x400e0e00
  400c98:	00400c21 	.word	0x00400c21

00400c9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400c9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400c9e:	210c      	movs	r1, #12
  400ca0:	4801      	ldr	r0, [pc, #4]	; (400ca8 <PIOB_Handler+0xc>)
  400ca2:	4b02      	ldr	r3, [pc, #8]	; (400cac <PIOB_Handler+0x10>)
  400ca4:	4798      	blx	r3
  400ca6:	bd08      	pop	{r3, pc}
  400ca8:	400e1000 	.word	0x400e1000
  400cac:	00400c21 	.word	0x00400c21

00400cb0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  400cb0:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  400cb2:	4601      	mov	r1, r0
  400cb4:	bb28      	cbnz	r0, 400d02 <udd_sleep_mode+0x52>
  400cb6:	4b24      	ldr	r3, [pc, #144]	; (400d48 <udd_sleep_mode+0x98>)
  400cb8:	781b      	ldrb	r3, [r3, #0]
  400cba:	b91b      	cbnz	r3, 400cc4 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  400cbc:	4b22      	ldr	r3, [pc, #136]	; (400d48 <udd_sleep_mode+0x98>)
  400cbe:	7019      	strb	r1, [r3, #0]
}
  400cc0:	b002      	add	sp, #8
  400cc2:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400cc4:	4b21      	ldr	r3, [pc, #132]	; (400d4c <udd_sleep_mode+0x9c>)
  400cc6:	789b      	ldrb	r3, [r3, #2]
  400cc8:	b903      	cbnz	r3, 400ccc <udd_sleep_mode+0x1c>
  400cca:	e7fe      	b.n	400cca <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400ccc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400cd0:	fab3 f383 	clz	r3, r3
  400cd4:	095b      	lsrs	r3, r3, #5
  400cd6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400cd8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400cda:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400cde:	2200      	movs	r2, #0
  400ce0:	4b1b      	ldr	r3, [pc, #108]	; (400d50 <udd_sleep_mode+0xa0>)
  400ce2:	701a      	strb	r2, [r3, #0]
	return flags;
  400ce4:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  400ce6:	4a19      	ldr	r2, [pc, #100]	; (400d4c <udd_sleep_mode+0x9c>)
  400ce8:	7893      	ldrb	r3, [r2, #2]
  400cea:	3b01      	subs	r3, #1
  400cec:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400cee:	2800      	cmp	r0, #0
  400cf0:	d0e4      	beq.n	400cbc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400cf2:	2201      	movs	r2, #1
  400cf4:	4b16      	ldr	r3, [pc, #88]	; (400d50 <udd_sleep_mode+0xa0>)
  400cf6:	701a      	strb	r2, [r3, #0]
  400cf8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400cfc:	b662      	cpsie	i
  400cfe:	e7dd      	b.n	400cbc <udd_sleep_mode+0xc>
  400d00:	e7fe      	b.n	400d00 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  400d02:	4b11      	ldr	r3, [pc, #68]	; (400d48 <udd_sleep_mode+0x98>)
  400d04:	781b      	ldrb	r3, [r3, #0]
  400d06:	2b00      	cmp	r3, #0
  400d08:	d1d8      	bne.n	400cbc <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  400d0a:	4b10      	ldr	r3, [pc, #64]	; (400d4c <udd_sleep_mode+0x9c>)
  400d0c:	789b      	ldrb	r3, [r3, #2]
  400d0e:	2bff      	cmp	r3, #255	; 0xff
  400d10:	d0f6      	beq.n	400d00 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d12:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d16:	fab3 f383 	clz	r3, r3
  400d1a:	095b      	lsrs	r3, r3, #5
  400d1c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d1e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d24:	2200      	movs	r2, #0
  400d26:	4b0a      	ldr	r3, [pc, #40]	; (400d50 <udd_sleep_mode+0xa0>)
  400d28:	701a      	strb	r2, [r3, #0]
	return flags;
  400d2a:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  400d2c:	4a07      	ldr	r2, [pc, #28]	; (400d4c <udd_sleep_mode+0x9c>)
  400d2e:	7893      	ldrb	r3, [r2, #2]
  400d30:	3301      	adds	r3, #1
  400d32:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400d34:	2800      	cmp	r0, #0
  400d36:	d0c1      	beq.n	400cbc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400d38:	2201      	movs	r2, #1
  400d3a:	4b05      	ldr	r3, [pc, #20]	; (400d50 <udd_sleep_mode+0xa0>)
  400d3c:	701a      	strb	r2, [r3, #0]
  400d3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d42:	b662      	cpsie	i
  400d44:	e7ba      	b.n	400cbc <udd_sleep_mode+0xc>
  400d46:	bf00      	nop
  400d48:	200006bd 	.word	0x200006bd
  400d4c:	20000704 	.word	0x20000704
  400d50:	200000a0 	.word	0x200000a0

00400d54 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  400d54:	4a03      	ldr	r2, [pc, #12]	; (400d64 <udd_ctrl_init+0x10>)
  400d56:	2300      	movs	r3, #0
  400d58:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400d5a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  400d5c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  400d5e:	4a02      	ldr	r2, [pc, #8]	; (400d68 <udd_ctrl_init+0x14>)
  400d60:	7013      	strb	r3, [r2, #0]
  400d62:	4770      	bx	lr
  400d64:	2000070c 	.word	0x2000070c
  400d68:	200006c2 	.word	0x200006c2

00400d6c <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  400d6c:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  400d6e:	2205      	movs	r2, #5
  400d70:	4b0a      	ldr	r3, [pc, #40]	; (400d9c <udd_ctrl_stall_data+0x30>)
  400d72:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  400d74:	4a0a      	ldr	r2, [pc, #40]	; (400da0 <udd_ctrl_stall_data+0x34>)
  400d76:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d78:	9301      	str	r3, [sp, #4]
  400d7a:	9b01      	ldr	r3, [sp, #4]
  400d7c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400d80:	9301      	str	r3, [sp, #4]
  400d82:	9b01      	ldr	r3, [sp, #4]
  400d84:	f043 0320 	orr.w	r3, r3, #32
  400d88:	9301      	str	r3, [sp, #4]
  400d8a:	9b01      	ldr	r3, [sp, #4]
  400d8c:	6313      	str	r3, [r2, #48]	; 0x30
  400d8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d90:	f013 0f20 	tst.w	r3, #32
  400d94:	d0fb      	beq.n	400d8e <udd_ctrl_stall_data+0x22>
}
  400d96:	b002      	add	sp, #8
  400d98:	4770      	bx	lr
  400d9a:	bf00      	nop
  400d9c:	200006c2 	.word	0x200006c2
  400da0:	40034000 	.word	0x40034000

00400da4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  400da4:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  400da6:	2203      	movs	r2, #3
  400da8:	4b0a      	ldr	r3, [pc, #40]	; (400dd4 <udd_ctrl_send_zlp_in+0x30>)
  400daa:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  400dac:	4a0a      	ldr	r2, [pc, #40]	; (400dd8 <udd_ctrl_send_zlp_in+0x34>)
  400dae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400db0:	9301      	str	r3, [sp, #4]
  400db2:	9b01      	ldr	r3, [sp, #4]
  400db4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400db8:	9301      	str	r3, [sp, #4]
  400dba:	9b01      	ldr	r3, [sp, #4]
  400dbc:	f043 0310 	orr.w	r3, r3, #16
  400dc0:	9301      	str	r3, [sp, #4]
  400dc2:	9b01      	ldr	r3, [sp, #4]
  400dc4:	6313      	str	r3, [r2, #48]	; 0x30
  400dc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dc8:	f013 0f10 	tst.w	r3, #16
  400dcc:	d0fb      	beq.n	400dc6 <udd_ctrl_send_zlp_in+0x22>
}
  400dce:	b002      	add	sp, #8
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	200006c2 	.word	0x200006c2
  400dd8:	40034000 	.word	0x40034000

00400ddc <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  400ddc:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  400dde:	4b02      	ldr	r3, [pc, #8]	; (400de8 <udd_ctrl_endofrequest+0xc>)
  400de0:	691b      	ldr	r3, [r3, #16]
  400de2:	b103      	cbz	r3, 400de6 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  400de4:	4798      	blx	r3
  400de6:	bd08      	pop	{r3, pc}
  400de8:	2000070c 	.word	0x2000070c

00400dec <udd_ctrl_in_sent>:
{
  400dec:	b530      	push	{r4, r5, lr}
  400dee:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  400df0:	4b63      	ldr	r3, [pc, #396]	; (400f80 <udd_ctrl_in_sent+0x194>)
  400df2:	781b      	ldrb	r3, [r3, #0]
  400df4:	2b03      	cmp	r3, #3
  400df6:	d029      	beq.n	400e4c <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  400df8:	4b62      	ldr	r3, [pc, #392]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400dfa:	881b      	ldrh	r3, [r3, #0]
  400dfc:	4a62      	ldr	r2, [pc, #392]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400dfe:	8994      	ldrh	r4, [r2, #12]
  400e00:	1ae4      	subs	r4, r4, r3
  400e02:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  400e04:	2c00      	cmp	r4, #0
  400e06:	d144      	bne.n	400e92 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  400e08:	4a60      	ldr	r2, [pc, #384]	; (400f8c <udd_ctrl_in_sent+0x1a0>)
  400e0a:	8811      	ldrh	r1, [r2, #0]
  400e0c:	440b      	add	r3, r1
  400e0e:	b29b      	uxth	r3, r3
  400e10:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  400e12:	4a5d      	ldr	r2, [pc, #372]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400e14:	88d2      	ldrh	r2, [r2, #6]
  400e16:	429a      	cmp	r2, r3
  400e18:	d003      	beq.n	400e22 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  400e1a:	4b5d      	ldr	r3, [pc, #372]	; (400f90 <udd_ctrl_in_sent+0x1a4>)
  400e1c:	781b      	ldrb	r3, [r3, #0]
  400e1e:	2b00      	cmp	r3, #0
  400e20:	d02b      	beq.n	400e7a <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400e22:	2204      	movs	r2, #4
  400e24:	4b56      	ldr	r3, [pc, #344]	; (400f80 <udd_ctrl_in_sent+0x194>)
  400e26:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  400e28:	4a5a      	ldr	r2, [pc, #360]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400e2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e2c:	9301      	str	r3, [sp, #4]
  400e2e:	9b01      	ldr	r3, [sp, #4]
  400e30:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400e34:	9301      	str	r3, [sp, #4]
  400e36:	9b01      	ldr	r3, [sp, #4]
  400e38:	f023 0301 	bic.w	r3, r3, #1
  400e3c:	9301      	str	r3, [sp, #4]
  400e3e:	9b01      	ldr	r3, [sp, #4]
  400e40:	6313      	str	r3, [r2, #48]	; 0x30
  400e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e44:	f013 0f01 	tst.w	r3, #1
  400e48:	d1fb      	bne.n	400e42 <udd_ctrl_in_sent+0x56>
  400e4a:	e014      	b.n	400e76 <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  400e4c:	4a51      	ldr	r2, [pc, #324]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400e4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e50:	9300      	str	r3, [sp, #0]
  400e52:	9b00      	ldr	r3, [sp, #0]
  400e54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400e58:	9300      	str	r3, [sp, #0]
  400e5a:	9b00      	ldr	r3, [sp, #0]
  400e5c:	f023 0301 	bic.w	r3, r3, #1
  400e60:	9300      	str	r3, [sp, #0]
  400e62:	9b00      	ldr	r3, [sp, #0]
  400e64:	6313      	str	r3, [r2, #48]	; 0x30
  400e66:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e68:	f013 0f01 	tst.w	r3, #1
  400e6c:	d1fb      	bne.n	400e66 <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  400e6e:	4b4a      	ldr	r3, [pc, #296]	; (400f98 <udd_ctrl_in_sent+0x1ac>)
  400e70:	4798      	blx	r3
		udd_ctrl_init();
  400e72:	4b4a      	ldr	r3, [pc, #296]	; (400f9c <udd_ctrl_in_sent+0x1b0>)
  400e74:	4798      	blx	r3
}
  400e76:	b007      	add	sp, #28
  400e78:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  400e7a:	4b43      	ldr	r3, [pc, #268]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400e7c:	695b      	ldr	r3, [r3, #20]
  400e7e:	2b00      	cmp	r3, #0
  400e80:	d05d      	beq.n	400f3e <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  400e82:	4798      	blx	r3
  400e84:	2800      	cmp	r0, #0
  400e86:	d05a      	beq.n	400f3e <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  400e88:	2200      	movs	r2, #0
  400e8a:	4b3e      	ldr	r3, [pc, #248]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400e8c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  400e8e:	4b3e      	ldr	r3, [pc, #248]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400e90:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  400e92:	2c3f      	cmp	r4, #63	; 0x3f
  400e94:	d953      	bls.n	400f3e <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  400e96:	2200      	movs	r2, #0
  400e98:	4b3d      	ldr	r3, [pc, #244]	; (400f90 <udd_ctrl_in_sent+0x1a4>)
  400e9a:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  400e9c:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400e9e:	4b3a      	ldr	r3, [pc, #232]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400ea0:	6899      	ldr	r1, [r3, #8]
  400ea2:	4b38      	ldr	r3, [pc, #224]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400ea4:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400ea6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400eaa:	fab3 f383 	clz	r3, r3
  400eae:	095b      	lsrs	r3, r3, #5
  400eb0:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  400eb2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400eb4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400eb8:	2200      	movs	r2, #0
  400eba:	4b39      	ldr	r3, [pc, #228]	; (400fa0 <udd_ctrl_in_sent+0x1b4>)
  400ebc:	701a      	strb	r2, [r3, #0]
	return flags;
  400ebe:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  400ec0:	4b34      	ldr	r3, [pc, #208]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ec4:	f013 0f02 	tst.w	r3, #2
  400ec8:	d13d      	bne.n	400f46 <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  400eca:	b14c      	cbz	r4, 400ee0 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400ecc:	4401      	add	r1, r0
  400ece:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  400ed0:	4830      	ldr	r0, [pc, #192]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400ed2:	f812 3b01 	ldrb.w	r3, [r2], #1
  400ed6:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  400ed8:	1a53      	subs	r3, r2, r1
  400eda:	b2db      	uxtb	r3, r3
  400edc:	42a3      	cmp	r3, r4
  400ede:	d3f8      	bcc.n	400ed2 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  400ee0:	4b28      	ldr	r3, [pc, #160]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400ee2:	881a      	ldrh	r2, [r3, #0]
  400ee4:	4414      	add	r4, r2
  400ee6:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  400ee8:	4a2a      	ldr	r2, [pc, #168]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400eea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400eec:	9303      	str	r3, [sp, #12]
  400eee:	9b03      	ldr	r3, [sp, #12]
  400ef0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400ef4:	9303      	str	r3, [sp, #12]
  400ef6:	9b03      	ldr	r3, [sp, #12]
  400ef8:	f043 0310 	orr.w	r3, r3, #16
  400efc:	9303      	str	r3, [sp, #12]
  400efe:	9b03      	ldr	r3, [sp, #12]
  400f00:	6313      	str	r3, [r2, #48]	; 0x30
  400f02:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f04:	f013 0f10 	tst.w	r3, #16
  400f08:	d0fb      	beq.n	400f02 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  400f0a:	4a22      	ldr	r2, [pc, #136]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400f0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f0e:	9304      	str	r3, [sp, #16]
  400f10:	9b04      	ldr	r3, [sp, #16]
  400f12:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f16:	9304      	str	r3, [sp, #16]
  400f18:	9b04      	ldr	r3, [sp, #16]
  400f1a:	f023 0301 	bic.w	r3, r3, #1
  400f1e:	9304      	str	r3, [sp, #16]
  400f20:	9b04      	ldr	r3, [sp, #16]
  400f22:	6313      	str	r3, [r2, #48]	; 0x30
  400f24:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f26:	f013 0f01 	tst.w	r3, #1
  400f2a:	d1fb      	bne.n	400f24 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  400f2c:	2d00      	cmp	r5, #0
  400f2e:	d0a2      	beq.n	400e76 <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  400f30:	2201      	movs	r2, #1
  400f32:	4b1b      	ldr	r3, [pc, #108]	; (400fa0 <udd_ctrl_in_sent+0x1b4>)
  400f34:	701a      	strb	r2, [r3, #0]
  400f36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f3a:	b662      	cpsie	i
  400f3c:	e79b      	b.n	400e76 <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  400f3e:	2201      	movs	r2, #1
  400f40:	4b13      	ldr	r3, [pc, #76]	; (400f90 <udd_ctrl_in_sent+0x1a4>)
  400f42:	701a      	strb	r2, [r3, #0]
  400f44:	e7ab      	b.n	400e9e <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  400f46:	b12d      	cbz	r5, 400f54 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  400f48:	2201      	movs	r2, #1
  400f4a:	4b15      	ldr	r3, [pc, #84]	; (400fa0 <udd_ctrl_in_sent+0x1b4>)
  400f4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400f4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f52:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400f54:	2204      	movs	r2, #4
  400f56:	4b0a      	ldr	r3, [pc, #40]	; (400f80 <udd_ctrl_in_sent+0x194>)
  400f58:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  400f5a:	4a0e      	ldr	r2, [pc, #56]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400f5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f5e:	9302      	str	r3, [sp, #8]
  400f60:	9b02      	ldr	r3, [sp, #8]
  400f62:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f66:	9302      	str	r3, [sp, #8]
  400f68:	9b02      	ldr	r3, [sp, #8]
  400f6a:	f023 0301 	bic.w	r3, r3, #1
  400f6e:	9302      	str	r3, [sp, #8]
  400f70:	9b02      	ldr	r3, [sp, #8]
  400f72:	6313      	str	r3, [r2, #48]	; 0x30
  400f74:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f76:	f013 0f01 	tst.w	r3, #1
  400f7a:	d1fb      	bne.n	400f74 <udd_ctrl_in_sent+0x188>
  400f7c:	e77b      	b.n	400e76 <udd_ctrl_in_sent+0x8a>
  400f7e:	bf00      	nop
  400f80:	200006c2 	.word	0x200006c2
  400f84:	200006be 	.word	0x200006be
  400f88:	2000070c 	.word	0x2000070c
  400f8c:	200006c0 	.word	0x200006c0
  400f90:	200006bc 	.word	0x200006bc
  400f94:	40034000 	.word	0x40034000
  400f98:	00400ddd 	.word	0x00400ddd
  400f9c:	00400d55 	.word	0x00400d55
  400fa0:	200000a0 	.word	0x200000a0

00400fa4 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  400fa4:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  400fa6:	7c43      	ldrb	r3, [r0, #17]
  400fa8:	f013 0f10 	tst.w	r3, #16
  400fac:	d016      	beq.n	400fdc <udd_ep_finish_job+0x38>
  400fae:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  400fb0:	7c43      	ldrb	r3, [r0, #17]
  400fb2:	f36f 1304 	bfc	r3, #4, #1
  400fb6:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  400fb8:	6804      	ldr	r4, [r0, #0]
  400fba:	b17c      	cbz	r4, 400fdc <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  400fbc:	f102 030c 	add.w	r3, r2, #12
  400fc0:	4907      	ldr	r1, [pc, #28]	; (400fe0 <udd_ep_finish_job+0x3c>)
  400fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  400fc6:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  400fca:	bf18      	it	ne
  400fcc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  400fd0:	6881      	ldr	r1, [r0, #8]
  400fd2:	2d01      	cmp	r5, #1
  400fd4:	bf14      	ite	ne
  400fd6:	2000      	movne	r0, #0
  400fd8:	2001      	moveq	r0, #1
  400fda:	47a0      	blx	r4
  400fdc:	bd38      	pop	{r3, r4, r5, pc}
  400fde:	bf00      	nop
  400fe0:	40034000 	.word	0x40034000

00400fe4 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  400fe4:	b430      	push	{r4, r5}
  400fe6:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  400fe8:	1e41      	subs	r1, r0, #1
  400fea:	0083      	lsls	r3, r0, #2
  400fec:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  400ff0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  400ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  400ff6:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  400ff8:	f012 0f02 	tst.w	r2, #2
  400ffc:	d032      	beq.n	401064 <udd_ep_ack_out_received+0x80>
  400ffe:	f014 0f40 	tst.w	r4, #64	; 0x40
  401002:	d108      	bne.n	401016 <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401004:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401008:	4c2a      	ldr	r4, [pc, #168]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  40100a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40100e:	7c54      	ldrb	r4, [r2, #17]
  401010:	f36f 0483 	bfc	r4, #2, #2
  401014:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  401016:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40101a:	4c26      	ldr	r4, [pc, #152]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  40101c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401020:	7c52      	ldrb	r2, [r2, #17]
  401022:	f012 0f0c 	tst.w	r2, #12
  401026:	d128      	bne.n	40107a <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  401028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40102a:	9200      	str	r2, [sp, #0]
  40102c:	9a00      	ldr	r2, [sp, #0]
  40102e:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401032:	9200      	str	r2, [sp, #0]
  401034:	9a00      	ldr	r2, [sp, #0]
  401036:	f022 0202 	bic.w	r2, r2, #2
  40103a:	9200      	str	r2, [sp, #0]
  40103c:	9a00      	ldr	r2, [sp, #0]
  40103e:	631a      	str	r2, [r3, #48]	; 0x30
  401040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401042:	f012 0f02 	tst.w	r2, #2
  401046:	d1fb      	bne.n	401040 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401048:	b380      	cbz	r0, 4010ac <udd_ep_ack_out_received+0xc8>
  40104a:	2803      	cmp	r0, #3
  40104c:	d02e      	beq.n	4010ac <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  40104e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401052:	4b18      	ldr	r3, [pc, #96]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  401054:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  401058:	7c5a      	ldrb	r2, [r3, #17]
  40105a:	2101      	movs	r1, #1
  40105c:	f361 0283 	bfi	r2, r1, #2, #2
  401060:	745a      	strb	r2, [r3, #17]
  401062:	e023      	b.n	4010ac <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401064:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401068:	4c12      	ldr	r4, [pc, #72]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  40106a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40106e:	7c54      	ldrb	r4, [r2, #17]
  401070:	2501      	movs	r5, #1
  401072:	f365 0483 	bfi	r4, r5, #2, #2
  401076:	7454      	strb	r4, [r2, #17]
  401078:	e7cd      	b.n	401016 <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  40107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40107c:	9201      	str	r2, [sp, #4]
  40107e:	9a01      	ldr	r2, [sp, #4]
  401080:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401084:	9201      	str	r2, [sp, #4]
  401086:	9a01      	ldr	r2, [sp, #4]
  401088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  40108c:	9201      	str	r2, [sp, #4]
  40108e:	9a01      	ldr	r2, [sp, #4]
  401090:	631a      	str	r2, [r3, #48]	; 0x30
  401092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401094:	f012 0f40 	tst.w	r2, #64	; 0x40
  401098:	d1fb      	bne.n	401092 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  40109a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40109e:	4b05      	ldr	r3, [pc, #20]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  4010a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4010a4:	7c4b      	ldrb	r3, [r1, #17]
  4010a6:	f36f 0383 	bfc	r3, #2, #2
  4010aa:	744b      	strb	r3, [r1, #17]
	}
}
  4010ac:	b002      	add	sp, #8
  4010ae:	bc30      	pop	{r4, r5}
  4010b0:	4770      	bx	lr
  4010b2:	bf00      	nop
  4010b4:	200006c4 	.word	0x200006c4

004010b8 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4010b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4010bc:	b083      	sub	sp, #12
  4010be:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4010c0:	4681      	mov	r9, r0
  4010c2:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4010c4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  4010c8:	4b66      	ldr	r3, [pc, #408]	; (401264 <udd_ep_in_sent+0x1ac>)
  4010ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4010ce:	f893 c011 	ldrb.w	ip, [r3, #17]
  4010d2:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  4010d6:	2800      	cmp	r0, #0
  4010d8:	f000 80b7 	beq.w	40124a <udd_ep_in_sent+0x192>
  4010dc:	2803      	cmp	r0, #3
  4010de:	bf0c      	ite	eq
  4010e0:	2301      	moveq	r3, #1
  4010e2:	2302      	movne	r3, #2
  4010e4:	4563      	cmp	r3, ip
  4010e6:	f340 80b2 	ble.w	40124e <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4010ea:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4010ee:	4a5d      	ldr	r2, [pc, #372]	; (401264 <udd_ep_in_sent+0x1ac>)
  4010f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4010f4:	68da      	ldr	r2, [r3, #12]
  4010f6:	689b      	ldr	r3, [r3, #8]
  4010f8:	429a      	cmp	r2, r3
  4010fa:	d309      	bcc.n	401110 <udd_ep_in_sent+0x58>
  4010fc:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  401100:	4c58      	ldr	r4, [pc, #352]	; (401264 <udd_ep_in_sent+0x1ac>)
  401102:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  401106:	7c49      	ldrb	r1, [r1, #17]
  401108:	f011 0f40 	tst.w	r1, #64	; 0x40
  40110c:	f000 80a3 	beq.w	401256 <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401110:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401114:	4953      	ldr	r1, [pc, #332]	; (401264 <udd_ep_in_sent+0x1ac>)
  401116:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  40111a:	686c      	ldr	r4, [r5, #4]
  40111c:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40111e:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401120:	8a2b      	ldrh	r3, [r5, #16]
  401122:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  401126:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  401128:	bf3a      	itte	cc
  40112a:	460f      	movcc	r7, r1
		is_short_pkt = true;
  40112c:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  401130:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401134:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401138:	494a      	ldr	r1, [pc, #296]	; (401264 <udd_ep_in_sent+0x1ac>)
  40113a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40113e:	443a      	add	r2, r7
  401140:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  401142:	2f07      	cmp	r7, #7
  401144:	d92b      	bls.n	40119e <udd_ep_in_sent+0xe6>
  401146:	f104 0308 	add.w	r3, r4, #8
  40114a:	463d      	mov	r5, r7
  40114c:	0082      	lsls	r2, r0, #2
  40114e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401152:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401156:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  40115a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40115c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  401160:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401162:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  401166:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401168:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  40116c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40116e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  401172:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401174:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  401178:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40117a:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  40117e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401180:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401184:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  401186:	3d08      	subs	r5, #8
  401188:	3308      	adds	r3, #8
  40118a:	2d07      	cmp	r5, #7
  40118c:	d8e3      	bhi.n	401156 <udd_ep_in_sent+0x9e>
  40118e:	f1a7 0308 	sub.w	r3, r7, #8
  401192:	f023 0307 	bic.w	r3, r3, #7
  401196:	3308      	adds	r3, #8
  401198:	441c      	add	r4, r3
  40119a:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  40119e:	b14f      	cbz	r7, 4011b4 <udd_ep_in_sent+0xfc>
  4011a0:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011a2:	4931      	ldr	r1, [pc, #196]	; (401268 <udd_ep_in_sent+0x1b0>)
  4011a4:	f109 0914 	add.w	r9, r9, #20
  4011a8:	f814 2b01 	ldrb.w	r2, [r4], #1
  4011ac:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  4011b0:	429c      	cmp	r4, r3
  4011b2:	d1f9      	bne.n	4011a8 <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  4011b4:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4011b8:	4a2a      	ldr	r2, [pc, #168]	; (401264 <udd_ep_in_sent+0x1ac>)
  4011ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4011be:	f10c 0c01 	add.w	ip, ip, #1
  4011c2:	7c5a      	ldrb	r2, [r3, #17]
  4011c4:	f36c 0283 	bfi	r2, ip, #2, #2
  4011c8:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  4011ca:	f1b8 0f00 	cmp.w	r8, #0
  4011ce:	d014      	beq.n	4011fa <udd_ep_in_sent+0x142>
  4011d0:	0080      	lsls	r0, r0, #2
  4011d2:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4011d6:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4011da:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4011dc:	9301      	str	r3, [sp, #4]
  4011de:	9b01      	ldr	r3, [sp, #4]
  4011e0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011e4:	9301      	str	r3, [sp, #4]
  4011e6:	9b01      	ldr	r3, [sp, #4]
  4011e8:	f043 0310 	orr.w	r3, r3, #16
  4011ec:	9301      	str	r3, [sp, #4]
  4011ee:	9b01      	ldr	r3, [sp, #4]
  4011f0:	6303      	str	r3, [r0, #48]	; 0x30
  4011f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4011f4:	f013 0f10 	tst.w	r3, #16
  4011f8:	d0fb      	beq.n	4011f2 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4011fa:	f1be 0f00 	cmp.w	lr, #0
  4011fe:	d008      	beq.n	401212 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  401200:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401204:	4a17      	ldr	r2, [pc, #92]	; (401264 <udd_ep_in_sent+0x1ac>)
  401206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40120a:	7c5a      	ldrb	r2, [r3, #17]
  40120c:	f36f 1286 	bfc	r2, #6, #1
  401210:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401212:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401216:	4a13      	ldr	r2, [pc, #76]	; (401264 <udd_ep_in_sent+0x1ac>)
  401218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40121c:	68da      	ldr	r2, [r3, #12]
  40121e:	689b      	ldr	r3, [r3, #8]
  401220:	429a      	cmp	r2, r3
  401222:	d31a      	bcc.n	40125a <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401224:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401228:	4a0e      	ldr	r2, [pc, #56]	; (401264 <udd_ep_in_sent+0x1ac>)
  40122a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40122e:	7c5b      	ldrb	r3, [r3, #17]
  401230:	f013 0f40 	tst.w	r3, #64	; 0x40
  401234:	d113      	bne.n	40125e <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  401236:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40123a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40123e:	7c73      	ldrb	r3, [r6, #17]
  401240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401244:	7473      	strb	r3, [r6, #17]
		return false;
  401246:	2000      	movs	r0, #0
  401248:	e002      	b.n	401250 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40124a:	2301      	movs	r3, #1
  40124c:	e74a      	b.n	4010e4 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  40124e:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  401250:	b003      	add	sp, #12
  401252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  401256:	2000      	movs	r0, #0
  401258:	e7fa      	b.n	401250 <udd_ep_in_sent+0x198>
	return true; // Pending
  40125a:	2001      	movs	r0, #1
  40125c:	e7f8      	b.n	401250 <udd_ep_in_sent+0x198>
  40125e:	2001      	movs	r0, #1
  401260:	e7f6      	b.n	401250 <udd_ep_in_sent+0x198>
  401262:	bf00      	nop
  401264:	200006c4 	.word	0x200006c4
  401268:	40034000 	.word	0x40034000

0040126c <UDP_Handler>:
{
  40126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401270:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401272:	4b86      	ldr	r3, [pc, #536]	; (40148c <UDP_Handler+0x220>)
  401274:	4798      	blx	r3
  401276:	b920      	cbnz	r0, 401282 <UDP_Handler+0x16>
  401278:	4b85      	ldr	r3, [pc, #532]	; (401490 <UDP_Handler+0x224>)
  40127a:	69db      	ldr	r3, [r3, #28]
  40127c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401280:	d03b      	beq.n	4012fa <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  401282:	2022      	movs	r0, #34	; 0x22
  401284:	4b83      	ldr	r3, [pc, #524]	; (401494 <UDP_Handler+0x228>)
  401286:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401288:	4b81      	ldr	r3, [pc, #516]	; (401490 <UDP_Handler+0x224>)
  40128a:	699b      	ldr	r3, [r3, #24]
  40128c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401290:	d004      	beq.n	40129c <UDP_Handler+0x30>
  401292:	4b7f      	ldr	r3, [pc, #508]	; (401490 <UDP_Handler+0x224>)
  401294:	69db      	ldr	r3, [r3, #28]
  401296:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40129a:	d137      	bne.n	40130c <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  40129c:	4b7c      	ldr	r3, [pc, #496]	; (401490 <UDP_Handler+0x224>)
  40129e:	69db      	ldr	r3, [r3, #28]
  4012a0:	f013 0f01 	tst.w	r3, #1
  4012a4:	f000 81b6 	beq.w	401614 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  4012a8:	4b79      	ldr	r3, [pc, #484]	; (401490 <UDP_Handler+0x224>)
  4012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012ac:	f013 0f04 	tst.w	r3, #4
  4012b0:	d133      	bne.n	40131a <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  4012b2:	4b77      	ldr	r3, [pc, #476]	; (401490 <UDP_Handler+0x224>)
  4012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012b6:	f013 0f01 	tst.w	r3, #1
  4012ba:	f040 80c3 	bne.w	401444 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  4012be:	4b74      	ldr	r3, [pc, #464]	; (401490 <UDP_Handler+0x224>)
  4012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012c2:	f013 0f02 	tst.w	r3, #2
  4012c6:	f040 80c0 	bne.w	40144a <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  4012ca:	4b71      	ldr	r3, [pc, #452]	; (401490 <UDP_Handler+0x224>)
  4012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012ce:	f013 0f08 	tst.w	r3, #8
  4012d2:	f000 819f 	beq.w	401614 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  4012d6:	4a6e      	ldr	r2, [pc, #440]	; (401490 <UDP_Handler+0x224>)
  4012d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012da:	9300      	str	r3, [sp, #0]
  4012dc:	9b00      	ldr	r3, [sp, #0]
  4012de:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4012e2:	9300      	str	r3, [sp, #0]
  4012e4:	9b00      	ldr	r3, [sp, #0]
  4012e6:	f023 0308 	bic.w	r3, r3, #8
  4012ea:	9300      	str	r3, [sp, #0]
  4012ec:	9b00      	ldr	r3, [sp, #0]
  4012ee:	6313      	str	r3, [r2, #48]	; 0x30
  4012f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012f2:	f013 0f08 	tst.w	r3, #8
  4012f6:	d1fb      	bne.n	4012f0 <UDP_Handler+0x84>
  4012f8:	e005      	b.n	401306 <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  4012fa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4012fc:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401300:	2200      	movs	r2, #0
  401302:	4b65      	ldr	r3, [pc, #404]	; (401498 <UDP_Handler+0x22c>)
  401304:	701a      	strb	r2, [r3, #0]
}
  401306:	b01b      	add	sp, #108	; 0x6c
  401308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  40130c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401310:	4b5f      	ldr	r3, [pc, #380]	; (401490 <UDP_Handler+0x224>)
  401312:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401314:	4b61      	ldr	r3, [pc, #388]	; (40149c <UDP_Handler+0x230>)
  401316:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  401318:	e7f5      	b.n	401306 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40131a:	4b61      	ldr	r3, [pc, #388]	; (4014a0 <UDP_Handler+0x234>)
  40131c:	781b      	ldrb	r3, [r3, #0]
  40131e:	b9cb      	cbnz	r3, 401354 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  401320:	4b5b      	ldr	r3, [pc, #364]	; (401490 <UDP_Handler+0x224>)
  401322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401324:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401328:	2b08      	cmp	r3, #8
  40132a:	d018      	beq.n	40135e <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  40132c:	4a58      	ldr	r2, [pc, #352]	; (401490 <UDP_Handler+0x224>)
  40132e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401330:	9301      	str	r3, [sp, #4]
  401332:	9b01      	ldr	r3, [sp, #4]
  401334:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401338:	9301      	str	r3, [sp, #4]
  40133a:	9b01      	ldr	r3, [sp, #4]
  40133c:	f023 0304 	bic.w	r3, r3, #4
  401340:	9301      	str	r3, [sp, #4]
  401342:	9b01      	ldr	r3, [sp, #4]
  401344:	6313      	str	r3, [r2, #48]	; 0x30
  401346:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401348:	f013 0f04 	tst.w	r3, #4
  40134c:	d1fb      	bne.n	401346 <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  40134e:	4b55      	ldr	r3, [pc, #340]	; (4014a4 <UDP_Handler+0x238>)
  401350:	4798      	blx	r3
  401352:	e7d8      	b.n	401306 <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401354:	4b54      	ldr	r3, [pc, #336]	; (4014a8 <UDP_Handler+0x23c>)
  401356:	4798      	blx	r3
		udd_ctrl_init();
  401358:	4b54      	ldr	r3, [pc, #336]	; (4014ac <UDP_Handler+0x240>)
  40135a:	4798      	blx	r3
  40135c:	e7e0      	b.n	401320 <UDP_Handler+0xb4>
  40135e:	4b54      	ldr	r3, [pc, #336]	; (4014b0 <UDP_Handler+0x244>)
  401360:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401364:	494a      	ldr	r1, [pc, #296]	; (401490 <UDP_Handler+0x224>)
  401366:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401368:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  40136c:	4283      	cmp	r3, r0
  40136e:	d1fa      	bne.n	401366 <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  401370:	4b50      	ldr	r3, [pc, #320]	; (4014b4 <UDP_Handler+0x248>)
  401372:	4798      	blx	r3
  401374:	b998      	cbnz	r0, 40139e <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  401376:	4a46      	ldr	r2, [pc, #280]	; (401490 <UDP_Handler+0x224>)
  401378:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40137a:	9302      	str	r3, [sp, #8]
  40137c:	9b02      	ldr	r3, [sp, #8]
  40137e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401382:	9302      	str	r3, [sp, #8]
  401384:	9b02      	ldr	r3, [sp, #8]
  401386:	f023 0304 	bic.w	r3, r3, #4
  40138a:	9302      	str	r3, [sp, #8]
  40138c:	9b02      	ldr	r3, [sp, #8]
  40138e:	6313      	str	r3, [r2, #48]	; 0x30
  401390:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401392:	f013 0f04 	tst.w	r3, #4
  401396:	d1fb      	bne.n	401390 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  401398:	4b42      	ldr	r3, [pc, #264]	; (4014a4 <UDP_Handler+0x238>)
  40139a:	4798      	blx	r3
  40139c:	e7b3      	b.n	401306 <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  40139e:	4b46      	ldr	r3, [pc, #280]	; (4014b8 <UDP_Handler+0x24c>)
  4013a0:	f993 3000 	ldrsb.w	r3, [r3]
  4013a4:	2b00      	cmp	r3, #0
  4013a6:	db1d      	blt.n	4013e4 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  4013a8:	4a39      	ldr	r2, [pc, #228]	; (401490 <UDP_Handler+0x224>)
  4013aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013ac:	9305      	str	r3, [sp, #20]
  4013ae:	9b05      	ldr	r3, [sp, #20]
  4013b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013b4:	9305      	str	r3, [sp, #20]
  4013b6:	9b05      	ldr	r3, [sp, #20]
  4013b8:	f023 0304 	bic.w	r3, r3, #4
  4013bc:	9305      	str	r3, [sp, #20]
  4013be:	9b05      	ldr	r3, [sp, #20]
  4013c0:	6313      	str	r3, [r2, #48]	; 0x30
  4013c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013c4:	f013 0f04 	tst.w	r3, #4
  4013c8:	d1fb      	bne.n	4013c2 <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4013ca:	4b3b      	ldr	r3, [pc, #236]	; (4014b8 <UDP_Handler+0x24c>)
  4013cc:	88db      	ldrh	r3, [r3, #6]
  4013ce:	2b00      	cmp	r3, #0
  4013d0:	d035      	beq.n	40143e <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  4013d2:	2300      	movs	r3, #0
  4013d4:	4a39      	ldr	r2, [pc, #228]	; (4014bc <UDP_Handler+0x250>)
  4013d6:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4013d8:	4a39      	ldr	r2, [pc, #228]	; (4014c0 <UDP_Handler+0x254>)
  4013da:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4013dc:	2201      	movs	r2, #1
  4013de:	4b30      	ldr	r3, [pc, #192]	; (4014a0 <UDP_Handler+0x234>)
  4013e0:	701a      	strb	r2, [r3, #0]
  4013e2:	e790      	b.n	401306 <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  4013e4:	4a2a      	ldr	r2, [pc, #168]	; (401490 <UDP_Handler+0x224>)
  4013e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013e8:	9303      	str	r3, [sp, #12]
  4013ea:	9b03      	ldr	r3, [sp, #12]
  4013ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013f0:	9303      	str	r3, [sp, #12]
  4013f2:	9b03      	ldr	r3, [sp, #12]
  4013f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4013f8:	9303      	str	r3, [sp, #12]
  4013fa:	9b03      	ldr	r3, [sp, #12]
  4013fc:	6313      	str	r3, [r2, #48]	; 0x30
  4013fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401400:	f013 0f80 	tst.w	r3, #128	; 0x80
  401404:	d0fb      	beq.n	4013fe <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  401406:	4a22      	ldr	r2, [pc, #136]	; (401490 <UDP_Handler+0x224>)
  401408:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40140a:	9304      	str	r3, [sp, #16]
  40140c:	9b04      	ldr	r3, [sp, #16]
  40140e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401412:	9304      	str	r3, [sp, #16]
  401414:	9b04      	ldr	r3, [sp, #16]
  401416:	f023 0304 	bic.w	r3, r3, #4
  40141a:	9304      	str	r3, [sp, #16]
  40141c:	9b04      	ldr	r3, [sp, #16]
  40141e:	6313      	str	r3, [r2, #48]	; 0x30
  401420:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401422:	f013 0f04 	tst.w	r3, #4
  401426:	d1fb      	bne.n	401420 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  401428:	2300      	movs	r3, #0
  40142a:	4a24      	ldr	r2, [pc, #144]	; (4014bc <UDP_Handler+0x250>)
  40142c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40142e:	4a24      	ldr	r2, [pc, #144]	; (4014c0 <UDP_Handler+0x254>)
  401430:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401432:	2202      	movs	r2, #2
  401434:	4b1a      	ldr	r3, [pc, #104]	; (4014a0 <UDP_Handler+0x234>)
  401436:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401438:	4b22      	ldr	r3, [pc, #136]	; (4014c4 <UDP_Handler+0x258>)
  40143a:	4798      	blx	r3
  40143c:	e763      	b.n	401306 <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  40143e:	4b22      	ldr	r3, [pc, #136]	; (4014c8 <UDP_Handler+0x25c>)
  401440:	4798      	blx	r3
  401442:	e760      	b.n	401306 <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401444:	4b1f      	ldr	r3, [pc, #124]	; (4014c4 <UDP_Handler+0x258>)
  401446:	4798      	blx	r3
  401448:	e75d      	b.n	401306 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40144a:	4b15      	ldr	r3, [pc, #84]	; (4014a0 <UDP_Handler+0x234>)
  40144c:	781b      	ldrb	r3, [r3, #0]
  40144e:	2b01      	cmp	r3, #1
  401450:	d03c      	beq.n	4014cc <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401452:	2b02      	cmp	r3, #2
  401454:	d004      	beq.n	401460 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401456:	2b04      	cmp	r3, #4
  401458:	d002      	beq.n	401460 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  40145a:	4b12      	ldr	r3, [pc, #72]	; (4014a4 <UDP_Handler+0x238>)
  40145c:	4798      	blx	r3
  40145e:	e001      	b.n	401464 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  401460:	4b11      	ldr	r3, [pc, #68]	; (4014a8 <UDP_Handler+0x23c>)
  401462:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401464:	4a0a      	ldr	r2, [pc, #40]	; (401490 <UDP_Handler+0x224>)
  401466:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401468:	9306      	str	r3, [sp, #24]
  40146a:	9b06      	ldr	r3, [sp, #24]
  40146c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401470:	9306      	str	r3, [sp, #24]
  401472:	9b06      	ldr	r3, [sp, #24]
  401474:	f023 0302 	bic.w	r3, r3, #2
  401478:	9306      	str	r3, [sp, #24]
  40147a:	9b06      	ldr	r3, [sp, #24]
  40147c:	6313      	str	r3, [r2, #48]	; 0x30
  40147e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401480:	f013 0f02 	tst.w	r3, #2
  401484:	d1fb      	bne.n	40147e <UDP_Handler+0x212>
		udd_ctrl_init();
  401486:	4b09      	ldr	r3, [pc, #36]	; (4014ac <UDP_Handler+0x240>)
  401488:	4798      	blx	r3
  40148a:	e73c      	b.n	401306 <UDP_Handler+0x9a>
  40148c:	0040260d 	.word	0x0040260d
  401490:	40034000 	.word	0x40034000
  401494:	00402531 	.word	0x00402531
  401498:	200000a0 	.word	0x200000a0
  40149c:	004007d1 	.word	0x004007d1
  4014a0:	200006c2 	.word	0x200006c2
  4014a4:	00400d6d 	.word	0x00400d6d
  4014a8:	00400ddd 	.word	0x00400ddd
  4014ac:	00400d55 	.word	0x00400d55
  4014b0:	2000070b 	.word	0x2000070b
  4014b4:	00400811 	.word	0x00400811
  4014b8:	2000070c 	.word	0x2000070c
  4014bc:	200006c0 	.word	0x200006c0
  4014c0:	200006be 	.word	0x200006be
  4014c4:	00400ded 	.word	0x00400ded
  4014c8:	00400da5 	.word	0x00400da5
	nb_data = udd_byte_count(0);
  4014cc:	4b93      	ldr	r3, [pc, #588]	; (40171c <UDP_Handler+0x4b0>)
  4014ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4014d0:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4014d4:	4b92      	ldr	r3, [pc, #584]	; (401720 <UDP_Handler+0x4b4>)
  4014d6:	899b      	ldrh	r3, [r3, #12]
  4014d8:	4a92      	ldr	r2, [pc, #584]	; (401724 <UDP_Handler+0x4b8>)
  4014da:	8815      	ldrh	r5, [r2, #0]
  4014dc:	186a      	adds	r2, r5, r1
  4014de:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  4014e0:	bfbc      	itt	lt
  4014e2:	1b5b      	sublt	r3, r3, r5
  4014e4:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4014e6:	4b8e      	ldr	r3, [pc, #568]	; (401720 <UDP_Handler+0x4b4>)
  4014e8:	6898      	ldr	r0, [r3, #8]
  4014ea:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4014ec:	b171      	cbz	r1, 40150c <UDP_Handler+0x2a0>
  4014ee:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4014f0:	4c8a      	ldr	r4, [pc, #552]	; (40171c <UDP_Handler+0x4b0>)
  4014f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4014f4:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  4014f8:	1a13      	subs	r3, r2, r0
  4014fa:	b2db      	uxtb	r3, r3
  4014fc:	428b      	cmp	r3, r1
  4014fe:	d3f8      	bcc.n	4014f2 <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  401500:	440d      	add	r5, r1
  401502:	b2ad      	uxth	r5, r5
  401504:	4b87      	ldr	r3, [pc, #540]	; (401724 <UDP_Handler+0x4b8>)
  401506:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401508:	2940      	cmp	r1, #64	; 0x40
  40150a:	d01a      	beq.n	401542 <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  40150c:	4b84      	ldr	r3, [pc, #528]	; (401720 <UDP_Handler+0x4b4>)
  40150e:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401510:	695b      	ldr	r3, [r3, #20]
  401512:	b113      	cbz	r3, 40151a <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  401514:	4798      	blx	r3
  401516:	2800      	cmp	r0, #0
  401518:	d030      	beq.n	40157c <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  40151a:	4a80      	ldr	r2, [pc, #512]	; (40171c <UDP_Handler+0x4b0>)
  40151c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40151e:	9308      	str	r3, [sp, #32]
  401520:	9b08      	ldr	r3, [sp, #32]
  401522:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401526:	9308      	str	r3, [sp, #32]
  401528:	9b08      	ldr	r3, [sp, #32]
  40152a:	f023 0302 	bic.w	r3, r3, #2
  40152e:	9308      	str	r3, [sp, #32]
  401530:	9b08      	ldr	r3, [sp, #32]
  401532:	6313      	str	r3, [r2, #48]	; 0x30
  401534:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401536:	f013 0f02 	tst.w	r3, #2
  40153a:	d1fb      	bne.n	401534 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  40153c:	4b7a      	ldr	r3, [pc, #488]	; (401728 <UDP_Handler+0x4bc>)
  40153e:	4798      	blx	r3
  401540:	e6e1      	b.n	401306 <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  401542:	4b77      	ldr	r3, [pc, #476]	; (401720 <UDP_Handler+0x4b4>)
  401544:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401546:	4b79      	ldr	r3, [pc, #484]	; (40172c <UDP_Handler+0x4c0>)
  401548:	881b      	ldrh	r3, [r3, #0]
  40154a:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  40154c:	429a      	cmp	r2, r3
  40154e:	dddd      	ble.n	40150c <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401550:	4b73      	ldr	r3, [pc, #460]	; (401720 <UDP_Handler+0x4b4>)
  401552:	899b      	ldrh	r3, [r3, #12]
  401554:	42ab      	cmp	r3, r5
  401556:	d025      	beq.n	4015a4 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  401558:	4a70      	ldr	r2, [pc, #448]	; (40171c <UDP_Handler+0x4b0>)
  40155a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40155c:	930b      	str	r3, [sp, #44]	; 0x2c
  40155e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401560:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401564:	930b      	str	r3, [sp, #44]	; 0x2c
  401566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401568:	f023 0302 	bic.w	r3, r3, #2
  40156c:	930b      	str	r3, [sp, #44]	; 0x2c
  40156e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401570:	6313      	str	r3, [r2, #48]	; 0x30
  401572:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401574:	f013 0f02 	tst.w	r3, #2
  401578:	d1fb      	bne.n	401572 <UDP_Handler+0x306>
  40157a:	e6c4      	b.n	401306 <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  40157c:	4b6c      	ldr	r3, [pc, #432]	; (401730 <UDP_Handler+0x4c4>)
  40157e:	4798      	blx	r3
				udd_ack_bank0_received(0);
  401580:	4a66      	ldr	r2, [pc, #408]	; (40171c <UDP_Handler+0x4b0>)
  401582:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401584:	9307      	str	r3, [sp, #28]
  401586:	9b07      	ldr	r3, [sp, #28]
  401588:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40158c:	9307      	str	r3, [sp, #28]
  40158e:	9b07      	ldr	r3, [sp, #28]
  401590:	f023 0302 	bic.w	r3, r3, #2
  401594:	9307      	str	r3, [sp, #28]
  401596:	9b07      	ldr	r3, [sp, #28]
  401598:	6313      	str	r3, [r2, #48]	; 0x30
  40159a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40159c:	f013 0f02 	tst.w	r3, #2
  4015a0:	d1fb      	bne.n	40159a <UDP_Handler+0x32e>
  4015a2:	e6b0      	b.n	401306 <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  4015a4:	4b5e      	ldr	r3, [pc, #376]	; (401720 <UDP_Handler+0x4b4>)
  4015a6:	695b      	ldr	r3, [r3, #20]
  4015a8:	b153      	cbz	r3, 4015c0 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  4015aa:	4798      	blx	r3
  4015ac:	b1e8      	cbz	r0, 4015ea <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4015ae:	495f      	ldr	r1, [pc, #380]	; (40172c <UDP_Handler+0x4c0>)
  4015b0:	4a5c      	ldr	r2, [pc, #368]	; (401724 <UDP_Handler+0x4b8>)
  4015b2:	880b      	ldrh	r3, [r1, #0]
  4015b4:	8810      	ldrh	r0, [r2, #0]
  4015b6:	4403      	add	r3, r0
  4015b8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  4015ba:	2300      	movs	r3, #0
  4015bc:	8013      	strh	r3, [r2, #0]
  4015be:	e7cb      	b.n	401558 <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  4015c0:	4b5b      	ldr	r3, [pc, #364]	; (401730 <UDP_Handler+0x4c4>)
  4015c2:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4015c4:	4a55      	ldr	r2, [pc, #340]	; (40171c <UDP_Handler+0x4b0>)
  4015c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015c8:	9309      	str	r3, [sp, #36]	; 0x24
  4015ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015d0:	9309      	str	r3, [sp, #36]	; 0x24
  4015d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015d4:	f023 0302 	bic.w	r3, r3, #2
  4015d8:	9309      	str	r3, [sp, #36]	; 0x24
  4015da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015dc:	6313      	str	r3, [r2, #48]	; 0x30
  4015de:	4613      	mov	r3, r2
  4015e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4015e2:	f012 0f02 	tst.w	r2, #2
  4015e6:	d1fb      	bne.n	4015e0 <UDP_Handler+0x374>
  4015e8:	e68d      	b.n	401306 <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  4015ea:	4b51      	ldr	r3, [pc, #324]	; (401730 <UDP_Handler+0x4c4>)
  4015ec:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4015ee:	4a4b      	ldr	r2, [pc, #300]	; (40171c <UDP_Handler+0x4b0>)
  4015f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015f2:	930a      	str	r3, [sp, #40]	; 0x28
  4015f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4015f6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015fa:	930a      	str	r3, [sp, #40]	; 0x28
  4015fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4015fe:	f023 0302 	bic.w	r3, r3, #2
  401602:	930a      	str	r3, [sp, #40]	; 0x28
  401604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401606:	6313      	str	r3, [r2, #48]	; 0x30
  401608:	4613      	mov	r3, r2
  40160a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40160c:	f012 0f02 	tst.w	r2, #2
  401610:	d1fb      	bne.n	40160a <UDP_Handler+0x39e>
  401612:	e678      	b.n	401306 <UDP_Handler+0x9a>
  401614:	4a47      	ldr	r2, [pc, #284]	; (401734 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  401616:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401618:	f8df e100 	ldr.w	lr, [pc, #256]	; 40171c <UDP_Handler+0x4b0>
  40161c:	4618      	mov	r0, r3
  40161e:	e17f      	b.n	401920 <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  401620:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401624:	4b43      	ldr	r3, [pc, #268]	; (401734 <UDP_Handler+0x4c8>)
  401626:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40162a:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  40162e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401632:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401634:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  401638:	f1b9 0f00 	cmp.w	r9, #0
  40163c:	f000 81df 	beq.w	4019fe <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401640:	4b3c      	ldr	r3, [pc, #240]	; (401734 <UDP_Handler+0x4c8>)
  401642:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401646:	f8d3 e008 	ldr.w	lr, [r3, #8]
  40164a:	68da      	ldr	r2, [r3, #12]
  40164c:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401650:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401652:	4548      	cmp	r0, r9
  401654:	f240 81c7 	bls.w	4019e6 <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  401658:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  40165c:	4b35      	ldr	r3, [pc, #212]	; (401734 <UDP_Handler+0x4c8>)
  40165e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401662:	eb02 0009 	add.w	r0, r2, r9
  401666:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  401668:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  40166a:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40166e:	4411      	add	r1, r2
  401670:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401672:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401674:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  401678:	1a5a      	subs	r2, r3, r1
  40167a:	4282      	cmp	r2, r0
  40167c:	d3f9      	bcc.n	401672 <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  40167e:	4630      	mov	r0, r6
  401680:	4b2d      	ldr	r3, [pc, #180]	; (401738 <UDP_Handler+0x4cc>)
  401682:	4798      	blx	r3
	if ((b_full || b_short) &&
  401684:	f1bb 0f00 	cmp.w	fp, #0
  401688:	f000 81bc 	beq.w	401a04 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  40168c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  40168e:	f013 0f20 	tst.w	r3, #32
  401692:	f47f ae38 	bne.w	401306 <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  401696:	4b21      	ldr	r3, [pc, #132]	; (40171c <UDP_Handler+0x4b0>)
  401698:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40169a:	4b26      	ldr	r3, [pc, #152]	; (401734 <UDP_Handler+0x4c8>)
  40169c:	00ba      	lsls	r2, r7, #2
  40169e:	19d1      	adds	r1, r2, r7
  4016a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4016a4:	68cb      	ldr	r3, [r1, #12]
  4016a6:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4016a8:	4632      	mov	r2, r6
  4016aa:	2100      	movs	r1, #0
  4016ac:	4640      	mov	r0, r8
  4016ae:	4b23      	ldr	r3, [pc, #140]	; (40173c <UDP_Handler+0x4d0>)
  4016b0:	4798      	blx	r3
  4016b2:	e628      	b.n	401306 <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  4016b4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4016b8:	4b1e      	ldr	r3, [pc, #120]	; (401734 <UDP_Handler+0x4c8>)
  4016ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4016be:	7c53      	ldrb	r3, [r2, #17]
  4016c0:	f3c3 0181 	ubfx	r1, r3, #2, #2
  4016c4:	3103      	adds	r1, #3
  4016c6:	f361 0383 	bfi	r3, r1, #2, #2
  4016ca:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4016cc:	7c53      	ldrb	r3, [r2, #17]
  4016ce:	f013 0f20 	tst.w	r3, #32
  4016d2:	d05f      	beq.n	401794 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  4016d4:	f013 0f0c 	tst.w	r3, #12
  4016d8:	d032      	beq.n	401740 <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  4016da:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4016dc:	930c      	str	r3, [sp, #48]	; 0x30
  4016de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4016e0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016e4:	930c      	str	r3, [sp, #48]	; 0x30
  4016e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4016e8:	f043 0310 	orr.w	r3, r3, #16
  4016ec:	930c      	str	r3, [sp, #48]	; 0x30
  4016ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4016f0:	6323      	str	r3, [r4, #48]	; 0x30
  4016f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4016f4:	f013 0f10 	tst.w	r3, #16
  4016f8:	d0fb      	beq.n	4016f2 <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  4016fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4016fc:	930d      	str	r3, [sp, #52]	; 0x34
  4016fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401700:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401704:	930d      	str	r3, [sp, #52]	; 0x34
  401706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401708:	f023 0301 	bic.w	r3, r3, #1
  40170c:	930d      	str	r3, [sp, #52]	; 0x34
  40170e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401710:	6323      	str	r3, [r4, #48]	; 0x30
  401712:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401714:	f013 0f01 	tst.w	r3, #1
  401718:	d1fb      	bne.n	401712 <UDP_Handler+0x4a6>
  40171a:	e5f4      	b.n	401306 <UDP_Handler+0x9a>
  40171c:	40034000 	.word	0x40034000
  401720:	2000070c 	.word	0x2000070c
  401724:	200006be 	.word	0x200006be
  401728:	00400da5 	.word	0x00400da5
  40172c:	200006c0 	.word	0x200006c0
  401730:	00400d6d 	.word	0x00400d6d
  401734:	200006c4 	.word	0x200006c4
  401738:	00400fe5 	.word	0x00400fe5
  40173c:	00400fa5 	.word	0x00400fa5
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401740:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401742:	930e      	str	r3, [sp, #56]	; 0x38
  401744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401746:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40174a:	930e      	str	r3, [sp, #56]	; 0x38
  40174c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40174e:	f023 0301 	bic.w	r3, r3, #1
  401752:	930e      	str	r3, [sp, #56]	; 0x38
  401754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401756:	6323      	str	r3, [r4, #48]	; 0x30
  401758:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40175a:	f013 0f01 	tst.w	r3, #1
  40175e:	d1fb      	bne.n	401758 <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401760:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401762:	930f      	str	r3, [sp, #60]	; 0x3c
  401764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401766:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40176a:	930f      	str	r3, [sp, #60]	; 0x3c
  40176c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40176e:	f043 0320 	orr.w	r3, r3, #32
  401772:	930f      	str	r3, [sp, #60]	; 0x3c
  401774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401776:	6323      	str	r3, [r4, #48]	; 0x30
  401778:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40177a:	f013 0f20 	tst.w	r3, #32
  40177e:	d0fb      	beq.n	401778 <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401780:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401784:	4ba1      	ldr	r3, [pc, #644]	; (401a0c <UDP_Handler+0x7a0>)
  401786:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  40178a:	7c5a      	ldrb	r2, [r3, #17]
  40178c:	f36f 1245 	bfc	r2, #5, #1
  401790:	745a      	strb	r2, [r3, #17]
  401792:	e5b8      	b.n	401306 <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401794:	f013 0f80 	tst.w	r3, #128	; 0x80
  401798:	d138      	bne.n	40180c <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40179a:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40179e:	4b9b      	ldr	r3, [pc, #620]	; (401a0c <UDP_Handler+0x7a0>)
  4017a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4017a4:	68da      	ldr	r2, [r3, #12]
  4017a6:	689b      	ldr	r3, [r3, #8]
  4017a8:	429a      	cmp	r2, r3
  4017aa:	d341      	bcc.n	401830 <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  4017ac:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4017b0:	4b96      	ldr	r3, [pc, #600]	; (401a0c <UDP_Handler+0x7a0>)
  4017b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4017b6:	7c5b      	ldrb	r3, [r3, #17]
  4017b8:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  4017bc:	d138      	bne.n	401830 <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4017be:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4017c2:	fab3 f383 	clz	r3, r3
  4017c6:	095b      	lsrs	r3, r3, #5
  4017c8:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  4017ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4017cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017d0:	2200      	movs	r2, #0
  4017d2:	4b8f      	ldr	r3, [pc, #572]	; (401a10 <UDP_Handler+0x7a4>)
  4017d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4017d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  4017d8:	4a8e      	ldr	r2, [pc, #568]	; (401a14 <UDP_Handler+0x7a8>)
  4017da:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4017dc:	b12b      	cbz	r3, 4017ea <UDP_Handler+0x57e>
		cpu_irq_enable();
  4017de:	2201      	movs	r2, #1
  4017e0:	4b8b      	ldr	r3, [pc, #556]	; (401a10 <UDP_Handler+0x7a4>)
  4017e2:	701a      	strb	r2, [r3, #0]
  4017e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017e8:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  4017ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4017ec:	9311      	str	r3, [sp, #68]	; 0x44
  4017ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4017f0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017f4:	9311      	str	r3, [sp, #68]	; 0x44
  4017f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4017f8:	f023 0301 	bic.w	r3, r3, #1
  4017fc:	9311      	str	r3, [sp, #68]	; 0x44
  4017fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401800:	6323      	str	r3, [r4, #48]	; 0x30
  401802:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401804:	f013 0f01 	tst.w	r3, #1
  401808:	d1fb      	bne.n	401802 <UDP_Handler+0x596>
  40180a:	e57c      	b.n	401306 <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  40180c:	2314      	movs	r3, #20
  40180e:	4a7f      	ldr	r2, [pc, #508]	; (401a0c <UDP_Handler+0x7a0>)
  401810:	fb03 2307 	mla	r3, r3, r7, r2
  401814:	7c59      	ldrb	r1, [r3, #17]
  401816:	f36f 11c7 	bfc	r1, #7, #1
  40181a:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40181c:	68da      	ldr	r2, [r3, #12]
  40181e:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401820:	4b7c      	ldr	r3, [pc, #496]	; (401a14 <UDP_Handler+0x7a8>)
  401822:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401824:	4632      	mov	r2, r6
  401826:	2100      	movs	r1, #0
  401828:	4640      	mov	r0, r8
  40182a:	4b7b      	ldr	r3, [pc, #492]	; (401a18 <UDP_Handler+0x7ac>)
  40182c:	4798      	blx	r3
  40182e:	e7b4      	b.n	40179a <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401830:	2e00      	cmp	r6, #0
  401832:	d05b      	beq.n	4018ec <UDP_Handler+0x680>
  401834:	2e03      	cmp	r6, #3
  401836:	d059      	beq.n	4018ec <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401838:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40183c:	4b73      	ldr	r3, [pc, #460]	; (401a0c <UDP_Handler+0x7a0>)
  40183e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401842:	7c5b      	ldrb	r3, [r3, #17]
  401844:	f013 0f0c 	tst.w	r3, #12
  401848:	d024      	beq.n	401894 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  40184a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40184c:	9312      	str	r3, [sp, #72]	; 0x48
  40184e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401850:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401854:	9312      	str	r3, [sp, #72]	; 0x48
  401856:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401858:	f043 0310 	orr.w	r3, r3, #16
  40185c:	9312      	str	r3, [sp, #72]	; 0x48
  40185e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401860:	6323      	str	r3, [r4, #48]	; 0x30
  401862:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401864:	f013 0f10 	tst.w	r3, #16
  401868:	d0fb      	beq.n	401862 <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  40186a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40186c:	9313      	str	r3, [sp, #76]	; 0x4c
  40186e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401870:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401874:	9313      	str	r3, [sp, #76]	; 0x4c
  401876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401878:	f023 0301 	bic.w	r3, r3, #1
  40187c:	9313      	str	r3, [sp, #76]	; 0x4c
  40187e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401880:	6323      	str	r3, [r4, #48]	; 0x30
  401882:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401884:	f013 0f01 	tst.w	r3, #1
  401888:	d1fb      	bne.n	401882 <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  40188a:	2100      	movs	r1, #0
  40188c:	4630      	mov	r0, r6
  40188e:	4b63      	ldr	r3, [pc, #396]	; (401a1c <UDP_Handler+0x7b0>)
  401890:	4798      	blx	r3
  401892:	e538      	b.n	401306 <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401894:	2101      	movs	r1, #1
  401896:	4630      	mov	r0, r6
  401898:	4b60      	ldr	r3, [pc, #384]	; (401a1c <UDP_Handler+0x7b0>)
  40189a:	4798      	blx	r3
  40189c:	b1a0      	cbz	r0, 4018c8 <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  40189e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018a0:	9314      	str	r3, [sp, #80]	; 0x50
  4018a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4018a4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018a8:	9314      	str	r3, [sp, #80]	; 0x50
  4018aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4018ac:	f023 0301 	bic.w	r3, r3, #1
  4018b0:	9314      	str	r3, [sp, #80]	; 0x50
  4018b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4018b4:	6323      	str	r3, [r4, #48]	; 0x30
  4018b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018b8:	f013 0f01 	tst.w	r3, #1
  4018bc:	d1fb      	bne.n	4018b6 <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  4018be:	2100      	movs	r1, #0
  4018c0:	4630      	mov	r0, r6
  4018c2:	4b56      	ldr	r3, [pc, #344]	; (401a1c <UDP_Handler+0x7b0>)
  4018c4:	4798      	blx	r3
  4018c6:	e51e      	b.n	401306 <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  4018c8:	2314      	movs	r3, #20
  4018ca:	4a50      	ldr	r2, [pc, #320]	; (401a0c <UDP_Handler+0x7a0>)
  4018cc:	fb03 2707 	mla	r7, r3, r7, r2
  4018d0:	7c7a      	ldrb	r2, [r7, #17]
  4018d2:	f36f 12c7 	bfc	r2, #7, #1
  4018d6:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4018d8:	68fb      	ldr	r3, [r7, #12]
  4018da:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  4018dc:	4b4d      	ldr	r3, [pc, #308]	; (401a14 <UDP_Handler+0x7a8>)
  4018de:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4018e0:	4632      	mov	r2, r6
  4018e2:	2100      	movs	r1, #0
  4018e4:	4640      	mov	r0, r8
  4018e6:	4b4c      	ldr	r3, [pc, #304]	; (401a18 <UDP_Handler+0x7ac>)
  4018e8:	4798      	blx	r3
  4018ea:	e7d8      	b.n	40189e <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4018ec:	2101      	movs	r1, #1
  4018ee:	4630      	mov	r0, r6
  4018f0:	4b4a      	ldr	r3, [pc, #296]	; (401a1c <UDP_Handler+0x7b0>)
  4018f2:	4798      	blx	r3
				udd_ack_in_sent(ep);
  4018f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018f6:	9315      	str	r3, [sp, #84]	; 0x54
  4018f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4018fa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018fe:	9315      	str	r3, [sp, #84]	; 0x54
  401900:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401902:	f023 0301 	bic.w	r3, r3, #1
  401906:	9315      	str	r3, [sp, #84]	; 0x54
  401908:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40190a:	6323      	str	r3, [r4, #48]	; 0x30
  40190c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40190e:	f013 0f01 	tst.w	r3, #1
  401912:	d1fb      	bne.n	40190c <UDP_Handler+0x6a0>
  401914:	e4f7      	b.n	401306 <UDP_Handler+0x9a>
  401916:	3301      	adds	r3, #1
  401918:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40191a:	2b04      	cmp	r3, #4
  40191c:	f000 8086 	beq.w	401a2c <UDP_Handler+0x7c0>
  401920:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401922:	f8de 1018 	ldr.w	r1, [lr, #24]
  401926:	fa00 f503 	lsl.w	r5, r0, r3
  40192a:	4229      	tst	r1, r5
  40192c:	d0f3      	beq.n	401916 <UDP_Handler+0x6aa>
  40192e:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401930:	4690      	mov	r8, r2
  401932:	009c      	lsls	r4, r3, #2
  401934:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401938:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  40193c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40193e:	f011 0f42 	tst.w	r1, #66	; 0x42
  401942:	f47f ae6d 	bne.w	401620 <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401946:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401948:	f011 0f01 	tst.w	r1, #1
  40194c:	f47f aeb2 	bne.w	4016b4 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401950:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401952:	f011 0f08 	tst.w	r1, #8
  401956:	d0de      	beq.n	401916 <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401958:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40195a:	9316      	str	r3, [sp, #88]	; 0x58
  40195c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40195e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401962:	9316      	str	r3, [sp, #88]	; 0x58
  401964:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401966:	f023 0308 	bic.w	r3, r3, #8
  40196a:	9316      	str	r3, [sp, #88]	; 0x58
  40196c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40196e:	6323      	str	r3, [r4, #48]	; 0x30
  401970:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401972:	f013 0f08 	tst.w	r3, #8
  401976:	d1fb      	bne.n	401970 <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401978:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40197a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40197e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401982:	f43f acc0 	beq.w	401306 <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401986:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401988:	e4bd      	b.n	401306 <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40198a:	4b22      	ldr	r3, [pc, #136]	; (401a14 <UDP_Handler+0x7a8>)
  40198c:	69db      	ldr	r3, [r3, #28]
  40198e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401992:	d050      	beq.n	401a36 <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401994:	4c1f      	ldr	r4, [pc, #124]	; (401a14 <UDP_Handler+0x7a8>)
  401996:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  40199a:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  40199c:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  40199e:	2001      	movs	r0, #1
  4019a0:	4b1f      	ldr	r3, [pc, #124]	; (401a20 <UDP_Handler+0x7b4>)
  4019a2:	4798      	blx	r3
		udd_ack_suspend();
  4019a4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4019a8:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  4019aa:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  4019ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019b0:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  4019b2:	e4a8      	b.n	401306 <UDP_Handler+0x9a>
		udd_ack_suspend();
  4019b4:	4b17      	ldr	r3, [pc, #92]	; (401a14 <UDP_Handler+0x7a8>)
  4019b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019ba:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4019bc:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4019be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4019c2:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019c8:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4019ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4019ce:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  4019d0:	2022      	movs	r0, #34	; 0x22
  4019d2:	4b14      	ldr	r3, [pc, #80]	; (401a24 <UDP_Handler+0x7b8>)
  4019d4:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  4019d6:	2000      	movs	r0, #0
  4019d8:	4b11      	ldr	r3, [pc, #68]	; (401a20 <UDP_Handler+0x7b4>)
  4019da:	4798      	blx	r3
		goto udd_interrupt_end;
  4019dc:	e493      	b.n	401306 <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  4019de:	4630      	mov	r0, r6
  4019e0:	4b11      	ldr	r3, [pc, #68]	; (401a28 <UDP_Handler+0x7bc>)
  4019e2:	4798      	blx	r3
  4019e4:	e652      	b.n	40168c <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  4019e6:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  4019ea:	4b08      	ldr	r3, [pc, #32]	; (401a0c <UDP_Handler+0x7a0>)
  4019ec:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  4019f0:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  4019f4:	2800      	cmp	r0, #0
  4019f6:	d0f2      	beq.n	4019de <UDP_Handler+0x772>
			b_full = true;
  4019f8:	f04f 0b01 	mov.w	fp, #1
  4019fc:	e637      	b.n	40166e <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  4019fe:	4630      	mov	r0, r6
  401a00:	4b09      	ldr	r3, [pc, #36]	; (401a28 <UDP_Handler+0x7bc>)
  401a02:	4798      	blx	r3
	if ((b_full || b_short) &&
  401a04:	45ca      	cmp	sl, r9
  401a06:	f63f ae41 	bhi.w	40168c <UDP_Handler+0x420>
  401a0a:	e47c      	b.n	401306 <UDP_Handler+0x9a>
  401a0c:	200006c4 	.word	0x200006c4
  401a10:	200000a0 	.word	0x200000a0
  401a14:	40034000 	.word	0x40034000
  401a18:	00400fa5 	.word	0x00400fa5
  401a1c:	004010b9 	.word	0x004010b9
  401a20:	00400cb1 	.word	0x00400cb1
  401a24:	00402585 	.word	0x00402585
  401a28:	00400fe5 	.word	0x00400fe5
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a2c:	4b4b      	ldr	r3, [pc, #300]	; (401b5c <UDP_Handler+0x8f0>)
  401a2e:	699b      	ldr	r3, [r3, #24]
  401a30:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401a34:	d1a9      	bne.n	40198a <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a36:	4b49      	ldr	r3, [pc, #292]	; (401b5c <UDP_Handler+0x8f0>)
  401a38:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a3a:	f413 7f00 	tst.w	r3, #512	; 0x200
  401a3e:	d004      	beq.n	401a4a <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a40:	4b46      	ldr	r3, [pc, #280]	; (401b5c <UDP_Handler+0x8f0>)
  401a42:	69db      	ldr	r3, [r3, #28]
  401a44:	f413 7f00 	tst.w	r3, #512	; 0x200
  401a48:	d1a4      	bne.n	401994 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401a4a:	4b44      	ldr	r3, [pc, #272]	; (401b5c <UDP_Handler+0x8f0>)
  401a4c:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401a52:	d004      	beq.n	401a5e <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401a54:	4b41      	ldr	r3, [pc, #260]	; (401b5c <UDP_Handler+0x8f0>)
  401a56:	69db      	ldr	r3, [r3, #28]
  401a58:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401a5c:	d19a      	bne.n	401994 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401a5e:	4b3f      	ldr	r3, [pc, #252]	; (401b5c <UDP_Handler+0x8f0>)
  401a60:	699b      	ldr	r3, [r3, #24]
  401a62:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a66:	d004      	beq.n	401a72 <UDP_Handler+0x806>
  401a68:	4b3c      	ldr	r3, [pc, #240]	; (401b5c <UDP_Handler+0x8f0>)
  401a6a:	69db      	ldr	r3, [r3, #28]
  401a6c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a70:	d1a0      	bne.n	4019b4 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401a72:	4b3a      	ldr	r3, [pc, #232]	; (401b5c <UDP_Handler+0x8f0>)
  401a74:	69db      	ldr	r3, [r3, #28]
  401a76:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401a7a:	f43f ac44 	beq.w	401306 <UDP_Handler+0x9a>
		udd_ack_reset();
  401a7e:	4c37      	ldr	r4, [pc, #220]	; (401b5c <UDP_Handler+0x8f0>)
  401a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401a84:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401a86:	4e36      	ldr	r6, [pc, #216]	; (401b60 <UDP_Handler+0x8f4>)
  401a88:	2201      	movs	r2, #1
  401a8a:	4611      	mov	r1, r2
  401a8c:	4630      	mov	r0, r6
  401a8e:	4d35      	ldr	r5, [pc, #212]	; (401b64 <UDP_Handler+0x8f8>)
  401a90:	47a8      	blx	r5
  401a92:	2202      	movs	r2, #2
  401a94:	2101      	movs	r1, #1
  401a96:	f106 0014 	add.w	r0, r6, #20
  401a9a:	47a8      	blx	r5
  401a9c:	2203      	movs	r2, #3
  401a9e:	2101      	movs	r1, #1
  401aa0:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401aa4:	47a8      	blx	r5
		udc_reset();
  401aa6:	4b30      	ldr	r3, [pc, #192]	; (401b68 <UDP_Handler+0x8fc>)
  401aa8:	4798      	blx	r3
		udd_disable_address_state();
  401aaa:	6863      	ldr	r3, [r4, #4]
  401aac:	f023 0301 	bic.w	r3, r3, #1
  401ab0:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401ab2:	6863      	ldr	r3, [r4, #4]
  401ab4:	f023 0302 	bic.w	r3, r3, #2
  401ab8:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401aba:	68a3      	ldr	r3, [r4, #8]
  401abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401ac0:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401ac2:	68a3      	ldr	r3, [r4, #8]
  401ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ac8:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401acc:	9318      	str	r3, [sp, #96]	; 0x60
  401ace:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ad0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ad4:	9318      	str	r3, [sp, #96]	; 0x60
  401ad6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ad8:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401ae0:	9318      	str	r3, [sp, #96]	; 0x60
  401ae2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401ae8:	9318      	str	r3, [sp, #96]	; 0x60
  401aea:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401aec:	6323      	str	r3, [r4, #48]	; 0x30
  401aee:	4622      	mov	r2, r4
  401af0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401af2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401af6:	d0fb      	beq.n	401af0 <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401af8:	4a18      	ldr	r2, [pc, #96]	; (401b5c <UDP_Handler+0x8f0>)
  401afa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401afc:	9319      	str	r3, [sp, #100]	; 0x64
  401afe:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b00:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b04:	9319      	str	r3, [sp, #100]	; 0x64
  401b06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401b0c:	9319      	str	r3, [sp, #100]	; 0x64
  401b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b10:	6313      	str	r3, [r2, #48]	; 0x30
  401b12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401b18:	d0fb      	beq.n	401b12 <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401b1a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b1e:	fab3 f383 	clz	r3, r3
  401b22:	095b      	lsrs	r3, r3, #5
  401b24:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401b26:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401b28:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b2c:	2200      	movs	r2, #0
  401b2e:	4b0f      	ldr	r3, [pc, #60]	; (401b6c <UDP_Handler+0x900>)
  401b30:	701a      	strb	r2, [r3, #0]
	return flags;
  401b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401b34:	2101      	movs	r1, #1
  401b36:	4a09      	ldr	r2, [pc, #36]	; (401b5c <UDP_Handler+0x8f0>)
  401b38:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401b3a:	b123      	cbz	r3, 401b46 <UDP_Handler+0x8da>
		cpu_irq_enable();
  401b3c:	4b0b      	ldr	r3, [pc, #44]	; (401b6c <UDP_Handler+0x900>)
  401b3e:	7019      	strb	r1, [r3, #0]
  401b40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b44:	b662      	cpsie	i
		udd_ctrl_init();
  401b46:	4b0a      	ldr	r3, [pc, #40]	; (401b70 <UDP_Handler+0x904>)
  401b48:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401b4a:	4b04      	ldr	r3, [pc, #16]	; (401b5c <UDP_Handler+0x8f0>)
  401b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401b50:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b56:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401b58:	f7ff bbd5 	b.w	401306 <UDP_Handler+0x9a>
  401b5c:	40034000 	.word	0x40034000
  401b60:	200006c4 	.word	0x200006c4
  401b64:	00400fa5 	.word	0x00400fa5
  401b68:	00400789 	.word	0x00400789
  401b6c:	200000a0 	.word	0x200000a0
  401b70:	00400d55 	.word	0x00400d55

00401b74 <udd_attach>:
{
  401b74:	b510      	push	{r4, lr}
  401b76:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401b78:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b7c:	fab3 f383 	clz	r3, r3
  401b80:	095b      	lsrs	r3, r3, #5
  401b82:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401b84:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401b86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b8a:	2200      	movs	r2, #0
  401b8c:	4b14      	ldr	r3, [pc, #80]	; (401be0 <udd_attach+0x6c>)
  401b8e:	701a      	strb	r2, [r3, #0]
	return flags;
  401b90:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  401b92:	2001      	movs	r0, #1
  401b94:	4b13      	ldr	r3, [pc, #76]	; (401be4 <udd_attach+0x70>)
  401b96:	4798      	blx	r3
	udd_enable_periph_ck();
  401b98:	2022      	movs	r0, #34	; 0x22
  401b9a:	4b13      	ldr	r3, [pc, #76]	; (401be8 <udd_attach+0x74>)
  401b9c:	4798      	blx	r3
	udd_enable_transceiver();
  401b9e:	4b13      	ldr	r3, [pc, #76]	; (401bec <udd_attach+0x78>)
  401ba0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401ba6:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401ba8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401bae:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  401bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
  401bb4:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401bba:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
  401bc0:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401bc6:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401bcc:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401bce:	b12c      	cbz	r4, 401bdc <udd_attach+0x68>
		cpu_irq_enable();
  401bd0:	2201      	movs	r2, #1
  401bd2:	4b03      	ldr	r3, [pc, #12]	; (401be0 <udd_attach+0x6c>)
  401bd4:	701a      	strb	r2, [r3, #0]
  401bd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401bda:	b662      	cpsie	i
}
  401bdc:	b002      	add	sp, #8
  401bde:	bd10      	pop	{r4, pc}
  401be0:	200000a0 	.word	0x200000a0
  401be4:	00400cb1 	.word	0x00400cb1
  401be8:	00402531 	.word	0x00402531
  401bec:	40034000 	.word	0x40034000

00401bf0 <udd_enable>:
{
  401bf0:	b530      	push	{r4, r5, lr}
  401bf2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401bf4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401bf8:	fab3 f383 	clz	r3, r3
  401bfc:	095b      	lsrs	r3, r3, #5
  401bfe:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401c00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401c02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c06:	2400      	movs	r4, #0
  401c08:	4b27      	ldr	r3, [pc, #156]	; (401ca8 <udd_enable+0xb8>)
  401c0a:	701c      	strb	r4, [r3, #0]
	return flags;
  401c0c:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  401c0e:	2022      	movs	r0, #34	; 0x22
  401c10:	4b26      	ldr	r3, [pc, #152]	; (401cac <udd_enable+0xbc>)
  401c12:	4798      	blx	r3
	sysclk_enable_usb();
  401c14:	4b26      	ldr	r3, [pc, #152]	; (401cb0 <udd_enable+0xc0>)
  401c16:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401c18:	4b26      	ldr	r3, [pc, #152]	; (401cb4 <udd_enable+0xc4>)
  401c1a:	2250      	movs	r2, #80	; 0x50
  401c1c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c20:	2204      	movs	r2, #4
  401c22:	605a      	str	r2, [r3, #4]
  401c24:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  401c26:	4824      	ldr	r0, [pc, #144]	; (401cb8 <udd_enable+0xc8>)
  401c28:	009a      	lsls	r2, r3, #2
  401c2a:	18d1      	adds	r1, r2, r3
  401c2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401c30:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  401c32:	441a      	add	r2, r3
  401c34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401c38:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401c3c:	f36f 11c7 	bfc	r1, #7, #1
  401c40:	7451      	strb	r1, [r2, #17]
  401c42:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401c44:	2b03      	cmp	r3, #3
  401c46:	d1ef      	bne.n	401c28 <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401c48:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401c4c:	4b1b      	ldr	r3, [pc, #108]	; (401cbc <udd_enable+0xcc>)
  401c4e:	4798      	blx	r3
	udd_b_idle = false;
  401c50:	2200      	movs	r2, #0
  401c52:	4b1b      	ldr	r3, [pc, #108]	; (401cc0 <udd_enable+0xd0>)
  401c54:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  401c56:	4b1b      	ldr	r3, [pc, #108]	; (401cc4 <udd_enable+0xd4>)
  401c58:	781b      	ldrb	r3, [r3, #0]
  401c5a:	2bff      	cmp	r3, #255	; 0xff
  401c5c:	d022      	beq.n	401ca4 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401c5e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c62:	fab3 f383 	clz	r3, r3
  401c66:	095b      	lsrs	r3, r3, #5
  401c68:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401c6a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401c6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c70:	2200      	movs	r2, #0
  401c72:	4b0d      	ldr	r3, [pc, #52]	; (401ca8 <udd_enable+0xb8>)
  401c74:	701a      	strb	r2, [r3, #0]
	return flags;
  401c76:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  401c78:	4a12      	ldr	r2, [pc, #72]	; (401cc4 <udd_enable+0xd4>)
  401c7a:	7813      	ldrb	r3, [r2, #0]
  401c7c:	3301      	adds	r3, #1
  401c7e:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401c80:	b129      	cbz	r1, 401c8e <udd_enable+0x9e>
		cpu_irq_enable();
  401c82:	2201      	movs	r2, #1
  401c84:	4b08      	ldr	r3, [pc, #32]	; (401ca8 <udd_enable+0xb8>)
  401c86:	701a      	strb	r2, [r3, #0]
  401c88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401c8c:	b662      	cpsie	i
	udd_attach();
  401c8e:	4b0e      	ldr	r3, [pc, #56]	; (401cc8 <udd_enable+0xd8>)
  401c90:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  401c92:	b12d      	cbz	r5, 401ca0 <udd_enable+0xb0>
		cpu_irq_enable();
  401c94:	2201      	movs	r2, #1
  401c96:	4b04      	ldr	r3, [pc, #16]	; (401ca8 <udd_enable+0xb8>)
  401c98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401c9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401c9e:	b662      	cpsie	i
}
  401ca0:	b003      	add	sp, #12
  401ca2:	bd30      	pop	{r4, r5, pc}
  401ca4:	e7fe      	b.n	401ca4 <udd_enable+0xb4>
  401ca6:	bf00      	nop
  401ca8:	200000a0 	.word	0x200000a0
  401cac:	00402531 	.word	0x00402531
  401cb0:	00402371 	.word	0x00402371
  401cb4:	e000e100 	.word	0xe000e100
  401cb8:	200006c4 	.word	0x200006c4
  401cbc:	004025f9 	.word	0x004025f9
  401cc0:	200006bd 	.word	0x200006bd
  401cc4:	20000704 	.word	0x20000704
  401cc8:	00401b75 	.word	0x00401b75

00401ccc <udd_is_high_speed>:
}
  401ccc:	2000      	movs	r0, #0
  401cce:	4770      	bx	lr

00401cd0 <udd_set_address>:
	udd_disable_address_state();
  401cd0:	4b0d      	ldr	r3, [pc, #52]	; (401d08 <udd_set_address+0x38>)
  401cd2:	685a      	ldr	r2, [r3, #4]
  401cd4:	f022 0201 	bic.w	r2, r2, #1
  401cd8:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401cda:	689a      	ldr	r2, [r3, #8]
  401cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401ce0:	609a      	str	r2, [r3, #8]
	if (address) {
  401ce2:	4602      	mov	r2, r0
  401ce4:	b170      	cbz	r0, 401d04 <udd_set_address+0x34>
		udd_configure_address(address);
  401ce6:	6898      	ldr	r0, [r3, #8]
  401ce8:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  401cec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401cf0:	4310      	orrs	r0, r2
  401cf2:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  401cf4:	689a      	ldr	r2, [r3, #8]
  401cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401cfa:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  401cfc:	685a      	ldr	r2, [r3, #4]
  401cfe:	f042 0201 	orr.w	r2, r2, #1
  401d02:	605a      	str	r2, [r3, #4]
  401d04:	4770      	bx	lr
  401d06:	bf00      	nop
  401d08:	40034000 	.word	0x40034000

00401d0c <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  401d0c:	4b05      	ldr	r3, [pc, #20]	; (401d24 <udd_getaddress+0x18>)
  401d0e:	685b      	ldr	r3, [r3, #4]
  401d10:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  401d14:	bf1d      	ittte	ne
  401d16:	4b03      	ldrne	r3, [pc, #12]	; (401d24 <udd_getaddress+0x18>)
  401d18:	6898      	ldrne	r0, [r3, #8]
  401d1a:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  401d1e:	2000      	moveq	r0, #0
}
  401d20:	4770      	bx	lr
  401d22:	bf00      	nop
  401d24:	40034000 	.word	0x40034000

00401d28 <udd_get_frame_number>:
	return udd_frame_number();
  401d28:	4b02      	ldr	r3, [pc, #8]	; (401d34 <udd_get_frame_number+0xc>)
  401d2a:	6818      	ldr	r0, [r3, #0]
}
  401d2c:	f3c0 000a 	ubfx	r0, r0, #0, #11
  401d30:	4770      	bx	lr
  401d32:	bf00      	nop
  401d34:	40034000 	.word	0x40034000

00401d38 <udd_get_micro_frame_number>:
}
  401d38:	2000      	movs	r0, #0
  401d3a:	4770      	bx	lr

00401d3c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  401d3c:	4b01      	ldr	r3, [pc, #4]	; (401d44 <udd_set_setup_payload+0x8>)
  401d3e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  401d40:	8199      	strh	r1, [r3, #12]
  401d42:	4770      	bx	lr
  401d44:	2000070c 	.word	0x2000070c

00401d48 <udd_ep_alloc>:
{
  401d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d4a:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  401d4c:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  401d50:	2c03      	cmp	r4, #3
  401d52:	d867      	bhi.n	401e24 <udd_ep_alloc+0xdc>
  401d54:	00a3      	lsls	r3, r4, #2
  401d56:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401d5a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  401d5e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  401d60:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401d64:	d161      	bne.n	401e2a <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401d66:	f001 0503 	and.w	r5, r1, #3
  401d6a:	2d01      	cmp	r5, #1
  401d6c:	d050      	beq.n	401e10 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  401d6e:	1f25      	subs	r5, r4, #4
  401d70:	b2ed      	uxtb	r5, r5
  401d72:	2d02      	cmp	r5, #2
  401d74:	bf34      	ite	cc
  401d76:	f44f 7500 	movcc.w	r5, #512	; 0x200
  401d7a:	2540      	movcs	r5, #64	; 0x40
  401d7c:	4295      	cmp	r5, r2
  401d7e:	db58      	blt.n	401e32 <udd_ep_alloc+0xea>
  401d80:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  401d82:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  401d84:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  401d88:	4d2b      	ldr	r5, [pc, #172]	; (401e38 <udd_ep_alloc+0xf0>)
  401d8a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  401d8e:	f105 0710 	add.w	r7, r5, #16
  401d92:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  401d96:	f362 0e09 	bfi	lr, r2, #0, #10
  401d9a:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  401d9e:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  401da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401da4:	f36f 1245 	bfc	r2, #5, #1
  401da8:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  401daa:	2800      	cmp	r0, #0
  401dac:	db35      	blt.n	401e1a <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  401dae:	4e23      	ldr	r6, [pc, #140]	; (401e3c <udd_ep_alloc+0xf4>)
  401db0:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  401db2:	2201      	movs	r2, #1
  401db4:	fa02 f404 	lsl.w	r4, r2, r4
  401db8:	4325      	orrs	r5, r4
  401dba:	62b5      	str	r5, [r6, #40]	; 0x28
  401dbc:	4635      	mov	r5, r6
  401dbe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401dc0:	4214      	tst	r4, r2
  401dc2:	d0fc      	beq.n	401dbe <udd_ep_alloc+0x76>
  401dc4:	4d1d      	ldr	r5, [pc, #116]	; (401e3c <udd_ep_alloc+0xf4>)
  401dc6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401dc8:	ea22 0404 	bic.w	r4, r2, r4
  401dcc:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  401dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401dd0:	9201      	str	r2, [sp, #4]
  401dd2:	9a01      	ldr	r2, [sp, #4]
  401dd4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401dd8:	9201      	str	r2, [sp, #4]
  401dda:	9a01      	ldr	r2, [sp, #4]
  401ddc:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401de4:	9201      	str	r2, [sp, #4]
  401de6:	2800      	cmp	r0, #0
  401de8:	ea4f 2201 	mov.w	r2, r1, lsl #8
  401dec:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401df0:	bfb4      	ite	lt
  401df2:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  401df6:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  401dfa:	9901      	ldr	r1, [sp, #4]
  401dfc:	4311      	orrs	r1, r2
  401dfe:	9101      	str	r1, [sp, #4]
  401e00:	9901      	ldr	r1, [sp, #4]
  401e02:	6319      	str	r1, [r3, #48]	; 0x30
  401e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401e06:	ea32 0101 	bics.w	r1, r2, r1
  401e0a:	d1fb      	bne.n	401e04 <udd_ep_alloc+0xbc>
	return true;
  401e0c:	2001      	movs	r0, #1
  401e0e:	e00a      	b.n	401e26 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401e10:	b16c      	cbz	r4, 401e2e <udd_ep_alloc+0xe6>
  401e12:	2c03      	cmp	r4, #3
  401e14:	d1ab      	bne.n	401d6e <udd_ep_alloc+0x26>
		return false;
  401e16:	2000      	movs	r0, #0
  401e18:	e005      	b.n	401e26 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  401e1a:	787a      	ldrb	r2, [r7, #1]
  401e1c:	f36f 0283 	bfc	r2, #2, #2
  401e20:	707a      	strb	r2, [r7, #1]
  401e22:	e7c4      	b.n	401dae <udd_ep_alloc+0x66>
		return false;
  401e24:	2000      	movs	r0, #0
}
  401e26:	b003      	add	sp, #12
  401e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  401e2a:	2000      	movs	r0, #0
  401e2c:	e7fb      	b.n	401e26 <udd_ep_alloc+0xde>
		return false;
  401e2e:	2000      	movs	r0, #0
  401e30:	e7f9      	b.n	401e26 <udd_ep_alloc+0xde>
		return false;
  401e32:	2000      	movs	r0, #0
  401e34:	e7f7      	b.n	401e26 <udd_ep_alloc+0xde>
  401e36:	bf00      	nop
  401e38:	200006c4 	.word	0x200006c4
  401e3c:	40034000 	.word	0x40034000

00401e40 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401e40:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401e44:	2a03      	cmp	r2, #3
  401e46:	d822      	bhi.n	401e8e <udd_ep_free+0x4e>
{
  401e48:	b500      	push	{lr}
  401e4a:	b083      	sub	sp, #12
  401e4c:	0091      	lsls	r1, r2, #2
  401e4e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  401e52:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  401e56:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e58:	9301      	str	r3, [sp, #4]
  401e5a:	9b01      	ldr	r3, [sp, #4]
  401e5c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e60:	9301      	str	r3, [sp, #4]
  401e62:	9b01      	ldr	r3, [sp, #4]
  401e64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  401e68:	9301      	str	r3, [sp, #4]
  401e6a:	9b01      	ldr	r3, [sp, #4]
  401e6c:	630b      	str	r3, [r1, #48]	; 0x30
  401e6e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401e74:	d1fb      	bne.n	401e6e <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  401e76:	1e50      	subs	r0, r2, #1
  401e78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e7c:	2101      	movs	r1, #1
  401e7e:	4b04      	ldr	r3, [pc, #16]	; (401e90 <udd_ep_free+0x50>)
  401e80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e84:	4b03      	ldr	r3, [pc, #12]	; (401e94 <udd_ep_free+0x54>)
  401e86:	4798      	blx	r3
}
  401e88:	b003      	add	sp, #12
  401e8a:	f85d fb04 	ldr.w	pc, [sp], #4
  401e8e:	4770      	bx	lr
  401e90:	200006c4 	.word	0x200006c4
  401e94:	00400fa5 	.word	0x00400fa5

00401e98 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401e98:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401e9c:	2803      	cmp	r0, #3
  401e9e:	d815      	bhi.n	401ecc <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  401ea0:	1e43      	subs	r3, r0, #1
  401ea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ea6:	4a0a      	ldr	r2, [pc, #40]	; (401ed0 <udd_ep_is_halted+0x38>)
  401ea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401eac:	7c5b      	ldrb	r3, [r3, #17]
  401eae:	f013 0f20 	tst.w	r3, #32
  401eb2:	d109      	bne.n	401ec8 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  401eb4:	300c      	adds	r0, #12
  401eb6:	4b07      	ldr	r3, [pc, #28]	; (401ed4 <udd_ep_is_halted+0x3c>)
  401eb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  401ebc:	f013 0f28 	tst.w	r3, #40	; 0x28
  401ec0:	bf14      	ite	ne
  401ec2:	2001      	movne	r0, #1
  401ec4:	2000      	moveq	r0, #0
  401ec6:	4770      	bx	lr
  401ec8:	2001      	movs	r0, #1
  401eca:	4770      	bx	lr
		return false;
  401ecc:	2000      	movs	r0, #0
}
  401ece:	4770      	bx	lr
  401ed0:	200006c4 	.word	0x200006c4
  401ed4:	40034000 	.word	0x40034000

00401ed8 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401ed8:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401edc:	2903      	cmp	r1, #3
  401ede:	d85f      	bhi.n	401fa0 <udd_ep_set_halt+0xc8>
{
  401ee0:	b410      	push	{r4}
  401ee2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401ee4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ee8:	fab3 f383 	clz	r3, r3
  401eec:	095b      	lsrs	r3, r3, #5
  401eee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401ef0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401ef2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ef6:	2200      	movs	r2, #0
  401ef8:	4b2c      	ldr	r3, [pc, #176]	; (401fac <udd_ep_set_halt+0xd4>)
  401efa:	701a      	strb	r2, [r3, #0]
	return flags;
  401efc:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401efe:	f010 0f80 	tst.w	r0, #128	; 0x80
  401f02:	d124      	bne.n	401f4e <udd_ep_set_halt+0x76>
  401f04:	008a      	lsls	r2, r1, #2
  401f06:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401f0a:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  401f0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f10:	9300      	str	r3, [sp, #0]
  401f12:	9b00      	ldr	r3, [sp, #0]
  401f14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f18:	9300      	str	r3, [sp, #0]
  401f1a:	9b00      	ldr	r3, [sp, #0]
  401f1c:	f043 0320 	orr.w	r3, r3, #32
  401f20:	9300      	str	r3, [sp, #0]
  401f22:	9b00      	ldr	r3, [sp, #0]
  401f24:	6313      	str	r3, [r2, #48]	; 0x30
  401f26:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f28:	f013 0f20 	tst.w	r3, #32
  401f2c:	d0fb      	beq.n	401f26 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  401f2e:	2301      	movs	r3, #1
  401f30:	fa03 f101 	lsl.w	r1, r3, r1
  401f34:	4b1e      	ldr	r3, [pc, #120]	; (401fb0 <udd_ep_set_halt+0xd8>)
  401f36:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401f38:	2c00      	cmp	r4, #0
  401f3a:	d035      	beq.n	401fa8 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  401f3c:	2001      	movs	r0, #1
  401f3e:	4b1b      	ldr	r3, [pc, #108]	; (401fac <udd_ep_set_halt+0xd4>)
  401f40:	7018      	strb	r0, [r3, #0]
  401f42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f46:	b662      	cpsie	i
}
  401f48:	b003      	add	sp, #12
  401f4a:	bc10      	pop	{r4}
  401f4c:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  401f4e:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401f50:	f101 020c 	add.w	r2, r1, #12
  401f54:	4816      	ldr	r0, [pc, #88]	; (401fb0 <udd_ep_set_halt+0xd8>)
  401f56:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  401f5a:	f012 0f10 	tst.w	r2, #16
  401f5e:	d109      	bne.n	401f74 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  401f60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401f64:	4813      	ldr	r0, [pc, #76]	; (401fb4 <udd_ep_set_halt+0xdc>)
  401f66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401f6a:	7c52      	ldrb	r2, [r2, #17]
  401f6c:	f3c2 0281 	ubfx	r2, r2, #2, #2
  401f70:	2a01      	cmp	r2, #1
  401f72:	ddc7      	ble.n	401f04 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  401f74:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401f78:	4b0e      	ldr	r3, [pc, #56]	; (401fb4 <udd_ep_set_halt+0xdc>)
  401f7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401f7e:	7c5a      	ldrb	r2, [r3, #17]
  401f80:	f042 0220 	orr.w	r2, r2, #32
  401f84:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  401f86:	2301      	movs	r3, #1
  401f88:	fa03 f101 	lsl.w	r1, r3, r1
  401f8c:	4b08      	ldr	r3, [pc, #32]	; (401fb0 <udd_ep_set_halt+0xd8>)
  401f8e:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401f90:	b144      	cbz	r4, 401fa4 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  401f92:	2001      	movs	r0, #1
  401f94:	4b05      	ldr	r3, [pc, #20]	; (401fac <udd_ep_set_halt+0xd4>)
  401f96:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401f98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f9c:	b662      	cpsie	i
  401f9e:	e7d3      	b.n	401f48 <udd_ep_set_halt+0x70>
		return false;
  401fa0:	2000      	movs	r0, #0
  401fa2:	4770      	bx	lr
		return true;
  401fa4:	2001      	movs	r0, #1
  401fa6:	e7cf      	b.n	401f48 <udd_ep_set_halt+0x70>
	return true;
  401fa8:	2001      	movs	r0, #1
  401faa:	e7cd      	b.n	401f48 <udd_ep_set_halt+0x70>
  401fac:	200000a0 	.word	0x200000a0
  401fb0:	40034000 	.word	0x40034000
  401fb4:	200006c4 	.word	0x200006c4

00401fb8 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  401fb8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  401fbc:	2803      	cmp	r0, #3
  401fbe:	d85e      	bhi.n	40207e <udd_ep_clear_halt+0xc6>
{
  401fc0:	b530      	push	{r4, r5, lr}
  401fc2:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  401fc4:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  401fc6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  401fca:	4b2f      	ldr	r3, [pc, #188]	; (402088 <udd_ep_clear_halt+0xd0>)
  401fcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401fd0:	7c5a      	ldrb	r2, [r3, #17]
  401fd2:	f36f 1245 	bfc	r2, #5, #1
  401fd6:	745a      	strb	r2, [r3, #17]
  401fd8:	0083      	lsls	r3, r0, #2
  401fda:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401fde:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  401fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fe4:	f012 0f20 	tst.w	r2, #32
  401fe8:	d04b      	beq.n	402082 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  401fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fec:	9200      	str	r2, [sp, #0]
  401fee:	9a00      	ldr	r2, [sp, #0]
  401ff0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ff4:	9200      	str	r2, [sp, #0]
  401ff6:	9a00      	ldr	r2, [sp, #0]
  401ff8:	f022 0220 	bic.w	r2, r2, #32
  401ffc:	9200      	str	r2, [sp, #0]
  401ffe:	9a00      	ldr	r2, [sp, #0]
  402000:	631a      	str	r2, [r3, #48]	; 0x30
  402002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402004:	f012 0f20 	tst.w	r2, #32
  402008:	d1fb      	bne.n	402002 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40200a:	4d20      	ldr	r5, [pc, #128]	; (40208c <udd_ep_clear_halt+0xd4>)
  40200c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  40200e:	2201      	movs	r2, #1
  402010:	fa02 f000 	lsl.w	r0, r2, r0
  402014:	4301      	orrs	r1, r0
  402016:	62a9      	str	r1, [r5, #40]	; 0x28
  402018:	4629      	mov	r1, r5
  40201a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  40201c:	4210      	tst	r0, r2
  40201e:	d0fc      	beq.n	40201a <udd_ep_clear_halt+0x62>
  402020:	491a      	ldr	r1, [pc, #104]	; (40208c <udd_ep_clear_halt+0xd4>)
  402022:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402024:	ea22 0000 	bic.w	r0, r2, r0
  402028:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40202c:	9201      	str	r2, [sp, #4]
  40202e:	9a01      	ldr	r2, [sp, #4]
  402030:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402034:	9201      	str	r2, [sp, #4]
  402036:	9a01      	ldr	r2, [sp, #4]
  402038:	f022 0208 	bic.w	r2, r2, #8
  40203c:	9201      	str	r2, [sp, #4]
  40203e:	9a01      	ldr	r2, [sp, #4]
  402040:	631a      	str	r2, [r3, #48]	; 0x30
  402042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402044:	f012 0f08 	tst.w	r2, #8
  402048:	d1fb      	bne.n	402042 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  40204a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40204e:	4a0e      	ldr	r2, [pc, #56]	; (402088 <udd_ep_clear_halt+0xd0>)
  402050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402054:	7c5b      	ldrb	r3, [r3, #17]
  402056:	f013 0f10 	tst.w	r3, #16
  40205a:	d101      	bne.n	402060 <udd_ep_clear_halt+0xa8>
	return true;
  40205c:	2001      	movs	r0, #1
  40205e:	e011      	b.n	402084 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  402060:	4611      	mov	r1, r2
  402062:	00a2      	lsls	r2, r4, #2
  402064:	1913      	adds	r3, r2, r4
  402066:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40206a:	7c58      	ldrb	r0, [r3, #17]
  40206c:	f36f 1004 	bfc	r0, #4, #1
  402070:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  402072:	4414      	add	r4, r2
  402074:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  402078:	4798      	blx	r3
	return true;
  40207a:	2001      	movs	r0, #1
  40207c:	e002      	b.n	402084 <udd_ep_clear_halt+0xcc>
		return false;
  40207e:	2000      	movs	r0, #0
  402080:	4770      	bx	lr
	return true;
  402082:	2001      	movs	r0, #1
}
  402084:	b003      	add	sp, #12
  402086:	bd30      	pop	{r4, r5, pc}
  402088:	200006c4 	.word	0x200006c4
  40208c:	40034000 	.word	0x40034000

00402090 <udd_ep_run>:
{
  402090:	b5f0      	push	{r4, r5, r6, r7, lr}
  402092:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402094:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402098:	2f03      	cmp	r7, #3
  40209a:	f200 80a2 	bhi.w	4021e2 <udd_ep_run+0x152>
  40209e:	00bc      	lsls	r4, r7, #2
  4020a0:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4020a4:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  4020a8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4020aa:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4020ae:	f000 809b 	beq.w	4021e8 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  4020b2:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  4020b4:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4020b8:	4e50      	ldr	r6, [pc, #320]	; (4021fc <udd_ep_run+0x16c>)
  4020ba:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4020be:	7c76      	ldrb	r6, [r6, #17]
  4020c0:	f016 0f20 	tst.w	r6, #32
  4020c4:	f040 8092 	bne.w	4021ec <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4020c8:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4020ca:	f016 0f20 	tst.w	r6, #32
  4020ce:	f040 808f 	bne.w	4021f0 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4020d2:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4020d6:	fab6 f686 	clz	r6, r6
  4020da:	0976      	lsrs	r6, r6, #5
  4020dc:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4020de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4020e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4020e4:	f04f 0e00 	mov.w	lr, #0
  4020e8:	4e45      	ldr	r6, [pc, #276]	; (402200 <udd_ep_run+0x170>)
  4020ea:	f886 e000 	strb.w	lr, [r6]
	return flags;
  4020ee:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  4020f2:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4020f6:	4e41      	ldr	r6, [pc, #260]	; (4021fc <udd_ep_run+0x16c>)
  4020f8:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4020fc:	7c76      	ldrb	r6, [r6, #17]
  4020fe:	f016 0f10 	tst.w	r6, #16
  402102:	d00a      	beq.n	40211a <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402104:	f1bc 0f00 	cmp.w	ip, #0
  402108:	d074      	beq.n	4021f4 <udd_ep_run+0x164>
		cpu_irq_enable();
  40210a:	2201      	movs	r2, #1
  40210c:	4b3c      	ldr	r3, [pc, #240]	; (402200 <udd_ep_run+0x170>)
  40210e:	701a      	strb	r2, [r3, #0]
  402110:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402114:	b662      	cpsie	i
		return false; // Job already on going
  402116:	2000      	movs	r0, #0
  402118:	e064      	b.n	4021e4 <udd_ep_run+0x154>
	ptr_job->busy = true;
  40211a:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40211e:	4e37      	ldr	r6, [pc, #220]	; (4021fc <udd_ep_run+0x16c>)
  402120:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402124:	f896 e011 	ldrb.w	lr, [r6, #17]
  402128:	f04e 0e10 	orr.w	lr, lr, #16
  40212c:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  402130:	f1bc 0f00 	cmp.w	ip, #0
  402134:	d007      	beq.n	402146 <udd_ep_run+0xb6>
		cpu_irq_enable();
  402136:	f04f 0e01 	mov.w	lr, #1
  40213a:	4e31      	ldr	r6, [pc, #196]	; (402200 <udd_ep_run+0x170>)
  40213c:	f886 e000 	strb.w	lr, [r6]
  __ASM volatile ("dmb 0xF":::"memory");
  402140:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402144:	b662      	cpsie	i
	ptr_job->buf = buf;
  402146:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 4021fc <udd_ep_run+0x16c>
  40214a:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  40214e:	00b6      	lsls	r6, r6, #2
  402150:	eb0c 0e06 	add.w	lr, ip, r6
  402154:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  402158:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  40215c:	2200      	movs	r2, #0
  40215e:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  402162:	9a08      	ldr	r2, [sp, #32]
  402164:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402168:	b911      	cbnz	r1, 402170 <udd_ep_run+0xe0>
  40216a:	fab3 f183 	clz	r1, r3
  40216e:	0949      	lsrs	r1, r1, #5
  402170:	4a22      	ldr	r2, [pc, #136]	; (4021fc <udd_ep_run+0x16c>)
  402172:	00ae      	lsls	r6, r5, #2
  402174:	1973      	adds	r3, r6, r5
  402176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40217a:	7c5b      	ldrb	r3, [r3, #17]
  40217c:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  402180:	4435      	add	r5, r6
  402182:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  402186:	f36f 13c7 	bfc	r3, #7, #1
  40218a:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40218c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402190:	fab3 f383 	clz	r3, r3
  402194:	095b      	lsrs	r3, r3, #5
  402196:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402198:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40219a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40219e:	2200      	movs	r2, #0
  4021a0:	4b17      	ldr	r3, [pc, #92]	; (402200 <udd_ep_run+0x170>)
  4021a2:	701a      	strb	r2, [r3, #0]
	return flags;
  4021a4:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  4021a6:	2301      	movs	r3, #1
  4021a8:	40bb      	lsls	r3, r7
  4021aa:	4a16      	ldr	r2, [pc, #88]	; (402204 <udd_ep_run+0x174>)
  4021ac:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  4021ae:	f010 0f80 	tst.w	r0, #128	; 0x80
  4021b2:	d107      	bne.n	4021c4 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  4021b4:	b305      	cbz	r5, 4021f8 <udd_ep_run+0x168>
		cpu_irq_enable();
  4021b6:	2001      	movs	r0, #1
  4021b8:	4b11      	ldr	r3, [pc, #68]	; (402200 <udd_ep_run+0x170>)
  4021ba:	7018      	strb	r0, [r3, #0]
  4021bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4021c0:	b662      	cpsie	i
  4021c2:	e00f      	b.n	4021e4 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  4021c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4021c6:	f013 0f11 	tst.w	r3, #17
  4021ca:	d1f3      	bne.n	4021b4 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  4021cc:	2101      	movs	r1, #1
  4021ce:	4638      	mov	r0, r7
  4021d0:	4b0d      	ldr	r3, [pc, #52]	; (402208 <udd_ep_run+0x178>)
  4021d2:	4798      	blx	r3
  4021d4:	2800      	cmp	r0, #0
  4021d6:	d0ed      	beq.n	4021b4 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  4021d8:	2100      	movs	r1, #0
  4021da:	4638      	mov	r0, r7
  4021dc:	4b0a      	ldr	r3, [pc, #40]	; (402208 <udd_ep_run+0x178>)
  4021de:	4798      	blx	r3
  4021e0:	e7e8      	b.n	4021b4 <udd_ep_run+0x124>
		return false;
  4021e2:	2000      	movs	r0, #0
}
  4021e4:	b003      	add	sp, #12
  4021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  4021e8:	2000      	movs	r0, #0
  4021ea:	e7fb      	b.n	4021e4 <udd_ep_run+0x154>
  4021ec:	2000      	movs	r0, #0
  4021ee:	e7f9      	b.n	4021e4 <udd_ep_run+0x154>
  4021f0:	2000      	movs	r0, #0
  4021f2:	e7f7      	b.n	4021e4 <udd_ep_run+0x154>
		return false; // Job already on going
  4021f4:	2000      	movs	r0, #0
  4021f6:	e7f5      	b.n	4021e4 <udd_ep_run+0x154>
	return true;
  4021f8:	2001      	movs	r0, #1
  4021fa:	e7f3      	b.n	4021e4 <udd_ep_run+0x154>
  4021fc:	200006c4 	.word	0x200006c4
  402200:	200000a0 	.word	0x200000a0
  402204:	40034000 	.word	0x40034000
  402208:	004010b9 	.word	0x004010b9

0040220c <udd_ep_abort>:
{
  40220c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40220e:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  402210:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402214:	2d03      	cmp	r5, #3
  402216:	d840      	bhi.n	40229a <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402218:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40221c:	fab3 f383 	clz	r3, r3
  402220:	095b      	lsrs	r3, r3, #5
  402222:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402224:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402226:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40222a:	2200      	movs	r2, #0
  40222c:	4b4b      	ldr	r3, [pc, #300]	; (40235c <udd_ep_abort+0x150>)
  40222e:	701a      	strb	r2, [r3, #0]
	return flags;
  402230:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  402232:	2401      	movs	r4, #1
  402234:	40ac      	lsls	r4, r5
  402236:	4a4a      	ldr	r2, [pc, #296]	; (402360 <udd_ep_abort+0x154>)
  402238:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40223a:	b12b      	cbz	r3, 402248 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  40223c:	2201      	movs	r2, #1
  40223e:	4b47      	ldr	r3, [pc, #284]	; (40235c <udd_ep_abort+0x150>)
  402240:	701a      	strb	r2, [r3, #0]
  402242:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402246:	b662      	cpsie	i
	if (b_dir_in) {
  402248:	f010 0f80 	tst.w	r0, #128	; 0x80
  40224c:	d127      	bne.n	40229e <udd_ep_abort+0x92>
  40224e:	00ae      	lsls	r6, r5, #2
  402250:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402254:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  402258:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40225a:	f013 0f42 	tst.w	r3, #66	; 0x42
  40225e:	d006      	beq.n	40226e <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  402260:	4f40      	ldr	r7, [pc, #256]	; (402364 <udd_ep_abort+0x158>)
  402262:	4628      	mov	r0, r5
  402264:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  402266:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402268:	f013 0f42 	tst.w	r3, #66	; 0x42
  40226c:	d1f9      	bne.n	402262 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  40226e:	4a3c      	ldr	r2, [pc, #240]	; (402360 <udd_ep_abort+0x154>)
  402270:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402272:	4323      	orrs	r3, r4
  402274:	6293      	str	r3, [r2, #40]	; 0x28
  402276:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402278:	421c      	tst	r4, r3
  40227a:	d0fc      	beq.n	402276 <udd_ep_abort+0x6a>
  40227c:	4a38      	ldr	r2, [pc, #224]	; (402360 <udd_ep_abort+0x154>)
  40227e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402280:	ea23 0404 	bic.w	r4, r3, r4
  402284:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402286:	1e68      	subs	r0, r5, #1
  402288:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40228c:	462a      	mov	r2, r5
  40228e:	2101      	movs	r1, #1
  402290:	4b35      	ldr	r3, [pc, #212]	; (402368 <udd_ep_abort+0x15c>)
  402292:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402296:	4b35      	ldr	r3, [pc, #212]	; (40236c <udd_ep_abort+0x160>)
  402298:	4798      	blx	r3
}
  40229a:	b007      	add	sp, #28
  40229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40229e:	00ab      	lsls	r3, r5, #2
  4022a0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4022a4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  4022a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022aa:	f012 0f10 	tst.w	r2, #16
  4022ae:	d03a      	beq.n	402326 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4022b0:	b34d      	cbz	r5, 402306 <udd_ep_abort+0xfa>
  4022b2:	2d03      	cmp	r5, #3
  4022b4:	d027      	beq.n	402306 <udd_ep_abort+0xfa>
  4022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022b8:	9201      	str	r2, [sp, #4]
  4022ba:	9a01      	ldr	r2, [sp, #4]
  4022bc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022c0:	9201      	str	r2, [sp, #4]
  4022c2:	9a01      	ldr	r2, [sp, #4]
  4022c4:	f022 0210 	bic.w	r2, r2, #16
  4022c8:	9201      	str	r2, [sp, #4]
  4022ca:	9a01      	ldr	r2, [sp, #4]
  4022cc:	631a      	str	r2, [r3, #48]	; 0x30
  4022ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022d0:	f012 0f10 	tst.w	r2, #16
  4022d4:	d1fb      	bne.n	4022ce <udd_ep_abort+0xc2>
  4022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022d8:	f012 0f10 	tst.w	r2, #16
  4022dc:	d1fb      	bne.n	4022d6 <udd_ep_abort+0xca>
  4022de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022e0:	9202      	str	r2, [sp, #8]
  4022e2:	9a02      	ldr	r2, [sp, #8]
  4022e4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022e8:	9202      	str	r2, [sp, #8]
  4022ea:	9a02      	ldr	r2, [sp, #8]
  4022ec:	f042 0210 	orr.w	r2, r2, #16
  4022f0:	9202      	str	r2, [sp, #8]
  4022f2:	9a02      	ldr	r2, [sp, #8]
  4022f4:	631a      	str	r2, [r3, #48]	; 0x30
  4022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022f8:	f012 0f10 	tst.w	r2, #16
  4022fc:	d0fb      	beq.n	4022f6 <udd_ep_abort+0xea>
  4022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402300:	f012 0f10 	tst.w	r2, #16
  402304:	d0fb      	beq.n	4022fe <udd_ep_abort+0xf2>
  402306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402308:	9203      	str	r2, [sp, #12]
  40230a:	9a03      	ldr	r2, [sp, #12]
  40230c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402310:	9203      	str	r2, [sp, #12]
  402312:	9a03      	ldr	r2, [sp, #12]
  402314:	f022 0210 	bic.w	r2, r2, #16
  402318:	9203      	str	r2, [sp, #12]
  40231a:	9a03      	ldr	r2, [sp, #12]
  40231c:	631a      	str	r2, [r3, #48]	; 0x30
  40231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402320:	f012 0f10 	tst.w	r2, #16
  402324:	d1fb      	bne.n	40231e <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  402326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402328:	9204      	str	r2, [sp, #16]
  40232a:	9a04      	ldr	r2, [sp, #16]
  40232c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402330:	9204      	str	r2, [sp, #16]
  402332:	9a04      	ldr	r2, [sp, #16]
  402334:	f022 0201 	bic.w	r2, r2, #1
  402338:	9204      	str	r2, [sp, #16]
  40233a:	9a04      	ldr	r2, [sp, #16]
  40233c:	631a      	str	r2, [r3, #48]	; 0x30
  40233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402340:	f012 0f01 	tst.w	r2, #1
  402344:	d1fb      	bne.n	40233e <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  402346:	1e6b      	subs	r3, r5, #1
  402348:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40234c:	4b06      	ldr	r3, [pc, #24]	; (402368 <udd_ep_abort+0x15c>)
  40234e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402352:	7c5a      	ldrb	r2, [r3, #17]
  402354:	f36f 0283 	bfc	r2, #2, #2
  402358:	745a      	strb	r2, [r3, #17]
  40235a:	e788      	b.n	40226e <udd_ep_abort+0x62>
  40235c:	200000a0 	.word	0x200000a0
  402360:	40034000 	.word	0x40034000
  402364:	00400fe5 	.word	0x00400fe5
  402368:	200006c4 	.word	0x200006c4
  40236c:	00400fa5 	.word	0x00400fa5

00402370 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402370:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402372:	213e      	movs	r1, #62	; 0x3e
  402374:	2000      	movs	r0, #0
  402376:	4b0a      	ldr	r3, [pc, #40]	; (4023a0 <sysclk_enable_usb+0x30>)
  402378:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40237a:	4c0a      	ldr	r4, [pc, #40]	; (4023a4 <sysclk_enable_usb+0x34>)
  40237c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40237e:	2800      	cmp	r0, #0
  402380:	d0fc      	beq.n	40237c <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402382:	4b09      	ldr	r3, [pc, #36]	; (4023a8 <sysclk_enable_usb+0x38>)
  402384:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402386:	4a09      	ldr	r2, [pc, #36]	; (4023ac <sysclk_enable_usb+0x3c>)
  402388:	4b09      	ldr	r3, [pc, #36]	; (4023b0 <sysclk_enable_usb+0x40>)
  40238a:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  40238c:	4c09      	ldr	r4, [pc, #36]	; (4023b4 <sysclk_enable_usb+0x44>)
  40238e:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402390:	2800      	cmp	r0, #0
  402392:	d0fc      	beq.n	40238e <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402394:	2001      	movs	r0, #1
  402396:	4b08      	ldr	r3, [pc, #32]	; (4023b8 <sysclk_enable_usb+0x48>)
  402398:	4798      	blx	r3
		pmc_enable_udpck();
  40239a:	4b08      	ldr	r3, [pc, #32]	; (4023bc <sysclk_enable_usb+0x4c>)
  40239c:	4798      	blx	r3
  40239e:	bd10      	pop	{r4, pc}
  4023a0:	00402491 	.word	0x00402491
  4023a4:	004024e5 	.word	0x004024e5
  4023a8:	00402515 	.word	0x00402515
  4023ac:	000f3f02 	.word	0x000f3f02
  4023b0:	400e0400 	.word	0x400e0400
  4023b4:	00402521 	.word	0x00402521
  4023b8:	004025d9 	.word	0x004025d9
  4023bc:	004025ed 	.word	0x004025ed

004023c0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4023c0:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4023c2:	480e      	ldr	r0, [pc, #56]	; (4023fc <sysclk_init+0x3c>)
  4023c4:	4b0e      	ldr	r3, [pc, #56]	; (402400 <sysclk_init+0x40>)
  4023c6:	4798      	blx	r3
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4023c8:	213e      	movs	r1, #62	; 0x3e
  4023ca:	2000      	movs	r0, #0
  4023cc:	4b0d      	ldr	r3, [pc, #52]	; (402404 <sysclk_init+0x44>)
  4023ce:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  4023d0:	4c0d      	ldr	r4, [pc, #52]	; (402408 <sysclk_init+0x48>)
  4023d2:	47a0      	blx	r4
  4023d4:	2800      	cmp	r0, #0
  4023d6:	d0fc      	beq.n	4023d2 <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  4023d8:	4b0c      	ldr	r3, [pc, #48]	; (40240c <sysclk_init+0x4c>)
  4023da:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4023dc:	4a0c      	ldr	r2, [pc, #48]	; (402410 <sysclk_init+0x50>)
  4023de:	4b0d      	ldr	r3, [pc, #52]	; (402414 <sysclk_init+0x54>)
  4023e0:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  4023e2:	4c0d      	ldr	r4, [pc, #52]	; (402418 <sysclk_init+0x58>)
  4023e4:	47a0      	blx	r4
  4023e6:	2800      	cmp	r0, #0
  4023e8:	d0fc      	beq.n	4023e4 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4023ea:	2010      	movs	r0, #16
  4023ec:	4b0b      	ldr	r3, [pc, #44]	; (40241c <sysclk_init+0x5c>)
  4023ee:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4023f0:	4b0b      	ldr	r3, [pc, #44]	; (402420 <sysclk_init+0x60>)
  4023f2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4023f4:	4801      	ldr	r0, [pc, #4]	; (4023fc <sysclk_init+0x3c>)
  4023f6:	4b02      	ldr	r3, [pc, #8]	; (402400 <sysclk_init+0x40>)
  4023f8:	4798      	blx	r3
  4023fa:	bd10      	pop	{r4, pc}
  4023fc:	07270e00 	.word	0x07270e00
  402400:	004027f9 	.word	0x004027f9
  402404:	00402491 	.word	0x00402491
  402408:	004024e5 	.word	0x004024e5
  40240c:	004024f5 	.word	0x004024f5
  402410:	20133f01 	.word	0x20133f01
  402414:	400e0400 	.word	0x400e0400
  402418:	00402505 	.word	0x00402505
  40241c:	0040242d 	.word	0x0040242d
  402420:	004026e9 	.word	0x004026e9

00402424 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402424:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402426:	4770      	bx	lr

00402428 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402428:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40242a:	4770      	bx	lr

0040242c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40242c:	4a17      	ldr	r2, [pc, #92]	; (40248c <pmc_switch_mck_to_pllack+0x60>)
  40242e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402434:	4318      	orrs	r0, r3
  402436:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402438:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40243a:	f013 0f08 	tst.w	r3, #8
  40243e:	d10a      	bne.n	402456 <pmc_switch_mck_to_pllack+0x2a>
  402440:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402444:	4911      	ldr	r1, [pc, #68]	; (40248c <pmc_switch_mck_to_pllack+0x60>)
  402446:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402448:	f012 0f08 	tst.w	r2, #8
  40244c:	d103      	bne.n	402456 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40244e:	3b01      	subs	r3, #1
  402450:	d1f9      	bne.n	402446 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  402452:	2001      	movs	r0, #1
  402454:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402456:	4a0d      	ldr	r2, [pc, #52]	; (40248c <pmc_switch_mck_to_pllack+0x60>)
  402458:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40245a:	f023 0303 	bic.w	r3, r3, #3
  40245e:	f043 0302 	orr.w	r3, r3, #2
  402462:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402464:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402466:	f013 0f08 	tst.w	r3, #8
  40246a:	d10a      	bne.n	402482 <pmc_switch_mck_to_pllack+0x56>
  40246c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402470:	4906      	ldr	r1, [pc, #24]	; (40248c <pmc_switch_mck_to_pllack+0x60>)
  402472:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402474:	f012 0f08 	tst.w	r2, #8
  402478:	d105      	bne.n	402486 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40247a:	3b01      	subs	r3, #1
  40247c:	d1f9      	bne.n	402472 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40247e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402480:	4770      	bx	lr
	return 0;
  402482:	2000      	movs	r0, #0
  402484:	4770      	bx	lr
  402486:	2000      	movs	r0, #0
  402488:	4770      	bx	lr
  40248a:	bf00      	nop
  40248c:	400e0400 	.word	0x400e0400

00402490 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402490:	b9c8      	cbnz	r0, 4024c6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402492:	4a11      	ldr	r2, [pc, #68]	; (4024d8 <pmc_switch_mainck_to_xtal+0x48>)
  402494:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402496:	0209      	lsls	r1, r1, #8
  402498:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40249a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40249e:	f023 0303 	bic.w	r3, r3, #3
  4024a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4024a6:	f043 0301 	orr.w	r3, r3, #1
  4024aa:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024ac:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4024ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4024b0:	f013 0f01 	tst.w	r3, #1
  4024b4:	d0fb      	beq.n	4024ae <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4024b6:	4a08      	ldr	r2, [pc, #32]	; (4024d8 <pmc_switch_mainck_to_xtal+0x48>)
  4024b8:	6a13      	ldr	r3, [r2, #32]
  4024ba:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4024c2:	6213      	str	r3, [r2, #32]
  4024c4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024c6:	4904      	ldr	r1, [pc, #16]	; (4024d8 <pmc_switch_mainck_to_xtal+0x48>)
  4024c8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4024ca:	4a04      	ldr	r2, [pc, #16]	; (4024dc <pmc_switch_mainck_to_xtal+0x4c>)
  4024cc:	401a      	ands	r2, r3
  4024ce:	4b04      	ldr	r3, [pc, #16]	; (4024e0 <pmc_switch_mainck_to_xtal+0x50>)
  4024d0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024d2:	620b      	str	r3, [r1, #32]
  4024d4:	4770      	bx	lr
  4024d6:	bf00      	nop
  4024d8:	400e0400 	.word	0x400e0400
  4024dc:	fec8fffc 	.word	0xfec8fffc
  4024e0:	01370002 	.word	0x01370002

004024e4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4024e4:	4b02      	ldr	r3, [pc, #8]	; (4024f0 <pmc_osc_is_ready_mainck+0xc>)
  4024e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4024e8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4024ec:	4770      	bx	lr
  4024ee:	bf00      	nop
  4024f0:	400e0400 	.word	0x400e0400

004024f4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4024f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4024f8:	4b01      	ldr	r3, [pc, #4]	; (402500 <pmc_disable_pllack+0xc>)
  4024fa:	629a      	str	r2, [r3, #40]	; 0x28
  4024fc:	4770      	bx	lr
  4024fe:	bf00      	nop
  402500:	400e0400 	.word	0x400e0400

00402504 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402504:	4b02      	ldr	r3, [pc, #8]	; (402510 <pmc_is_locked_pllack+0xc>)
  402506:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402508:	f000 0002 	and.w	r0, r0, #2
  40250c:	4770      	bx	lr
  40250e:	bf00      	nop
  402510:	400e0400 	.word	0x400e0400

00402514 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402514:	2200      	movs	r2, #0
  402516:	4b01      	ldr	r3, [pc, #4]	; (40251c <pmc_disable_pllbck+0x8>)
  402518:	62da      	str	r2, [r3, #44]	; 0x2c
  40251a:	4770      	bx	lr
  40251c:	400e0400 	.word	0x400e0400

00402520 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402520:	4b02      	ldr	r3, [pc, #8]	; (40252c <pmc_is_locked_pllbck+0xc>)
  402522:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402524:	f000 0004 	and.w	r0, r0, #4
  402528:	4770      	bx	lr
  40252a:	bf00      	nop
  40252c:	400e0400 	.word	0x400e0400

00402530 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402530:	2822      	cmp	r0, #34	; 0x22
  402532:	d81e      	bhi.n	402572 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402534:	281f      	cmp	r0, #31
  402536:	d80c      	bhi.n	402552 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402538:	4b11      	ldr	r3, [pc, #68]	; (402580 <pmc_enable_periph_clk+0x50>)
  40253a:	699a      	ldr	r2, [r3, #24]
  40253c:	2301      	movs	r3, #1
  40253e:	4083      	lsls	r3, r0
  402540:	4393      	bics	r3, r2
  402542:	d018      	beq.n	402576 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402544:	2301      	movs	r3, #1
  402546:	fa03 f000 	lsl.w	r0, r3, r0
  40254a:	4b0d      	ldr	r3, [pc, #52]	; (402580 <pmc_enable_periph_clk+0x50>)
  40254c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40254e:	2000      	movs	r0, #0
  402550:	4770      	bx	lr
		ul_id -= 32;
  402552:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402554:	4b0a      	ldr	r3, [pc, #40]	; (402580 <pmc_enable_periph_clk+0x50>)
  402556:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40255a:	2301      	movs	r3, #1
  40255c:	4083      	lsls	r3, r0
  40255e:	4393      	bics	r3, r2
  402560:	d00b      	beq.n	40257a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402562:	2301      	movs	r3, #1
  402564:	fa03 f000 	lsl.w	r0, r3, r0
  402568:	4b05      	ldr	r3, [pc, #20]	; (402580 <pmc_enable_periph_clk+0x50>)
  40256a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40256e:	2000      	movs	r0, #0
  402570:	4770      	bx	lr
		return 1;
  402572:	2001      	movs	r0, #1
  402574:	4770      	bx	lr
	return 0;
  402576:	2000      	movs	r0, #0
  402578:	4770      	bx	lr
  40257a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40257c:	4770      	bx	lr
  40257e:	bf00      	nop
  402580:	400e0400 	.word	0x400e0400

00402584 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402584:	2822      	cmp	r0, #34	; 0x22
  402586:	d822      	bhi.n	4025ce <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  402588:	281f      	cmp	r0, #31
  40258a:	d80e      	bhi.n	4025aa <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  40258c:	4b11      	ldr	r3, [pc, #68]	; (4025d4 <pmc_disable_periph_clk+0x50>)
  40258e:	699a      	ldr	r2, [r3, #24]
  402590:	2301      	movs	r3, #1
  402592:	4083      	lsls	r3, r0
  402594:	4393      	bics	r3, r2
  402596:	d001      	beq.n	40259c <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402598:	2000      	movs	r0, #0
  40259a:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  40259c:	2301      	movs	r3, #1
  40259e:	fa03 f000 	lsl.w	r0, r3, r0
  4025a2:	4b0c      	ldr	r3, [pc, #48]	; (4025d4 <pmc_disable_periph_clk+0x50>)
  4025a4:	6158      	str	r0, [r3, #20]
	return 0;
  4025a6:	2000      	movs	r0, #0
  4025a8:	4770      	bx	lr
		ul_id -= 32;
  4025aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4025ac:	4b09      	ldr	r3, [pc, #36]	; (4025d4 <pmc_disable_periph_clk+0x50>)
  4025ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4025b2:	2301      	movs	r3, #1
  4025b4:	4083      	lsls	r3, r0
  4025b6:	4393      	bics	r3, r2
  4025b8:	d001      	beq.n	4025be <pmc_disable_periph_clk+0x3a>
	return 0;
  4025ba:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4025bc:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  4025be:	2301      	movs	r3, #1
  4025c0:	fa03 f000 	lsl.w	r0, r3, r0
  4025c4:	4b03      	ldr	r3, [pc, #12]	; (4025d4 <pmc_disable_periph_clk+0x50>)
  4025c6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  4025ca:	2000      	movs	r0, #0
  4025cc:	4770      	bx	lr
		return 1;
  4025ce:	2001      	movs	r0, #1
  4025d0:	4770      	bx	lr
  4025d2:	bf00      	nop
  4025d4:	400e0400 	.word	0x400e0400

004025d8 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4025d8:	0200      	lsls	r0, r0, #8
  4025da:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4025de:	f040 0001 	orr.w	r0, r0, #1
  4025e2:	4b01      	ldr	r3, [pc, #4]	; (4025e8 <pmc_switch_udpck_to_pllbck+0x10>)
  4025e4:	6398      	str	r0, [r3, #56]	; 0x38
  4025e6:	4770      	bx	lr
  4025e8:	400e0400 	.word	0x400e0400

004025ec <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4025ec:	2280      	movs	r2, #128	; 0x80
  4025ee:	4b01      	ldr	r3, [pc, #4]	; (4025f4 <pmc_enable_udpck+0x8>)
  4025f0:	601a      	str	r2, [r3, #0]
  4025f2:	4770      	bx	lr
  4025f4:	400e0400 	.word	0x400e0400

004025f8 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4025f8:	4b03      	ldr	r3, [pc, #12]	; (402608 <pmc_set_fast_startup_input+0x10>)
  4025fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4025fc:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  402600:	4310      	orrs	r0, r2
  402602:	6718      	str	r0, [r3, #112]	; 0x70
  402604:	4770      	bx	lr
  402606:	bf00      	nop
  402608:	400e0400 	.word	0x400e0400

0040260c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  40260c:	4b02      	ldr	r3, [pc, #8]	; (402618 <pmc_is_wakeup_clocks_restored+0xc>)
  40260e:	7818      	ldrb	r0, [r3, #0]
}
  402610:	f080 0001 	eor.w	r0, r0, #1
  402614:	4770      	bx	lr
  402616:	bf00      	nop
  402618:	20000700 	.word	0x20000700

0040261c <board_init>:
#include <conf_board.h>
#include <registers.h>
#include <modbus.h>

void board_init(void)
{
  40261c:	b508      	push	{r3, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	WDT->WDT_MR |= WDT_MR_WDDIS; // Disable watchdog timer to prevent uC resetting every 15 seconds :)
  40261e:	4a04      	ldr	r2, [pc, #16]	; (402630 <board_init+0x14>)
  402620:	6853      	ldr	r3, [r2, #4]
  402622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402626:	6053      	str	r3, [r2, #4]
	
	//Enable USB Comm port so we can send debug data over serial to a computer (could be useful)
	//Configuration for this is in conf_usb.h
	udc_start();
  402628:	4b02      	ldr	r3, [pc, #8]	; (402634 <board_init+0x18>)
  40262a:	4798      	blx	r3
  40262c:	bd08      	pop	{r3, pc}
  40262e:	bf00      	nop
  402630:	400e1450 	.word	0x400e1450
  402634:	0040077d 	.word	0x0040077d

00402638 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402638:	e7fe      	b.n	402638 <Dummy_Handler>
	...

0040263c <Reset_Handler>:
{
  40263c:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  40263e:	4b21      	ldr	r3, [pc, #132]	; (4026c4 <Reset_Handler+0x88>)
  402640:	4a21      	ldr	r2, [pc, #132]	; (4026c8 <Reset_Handler+0x8c>)
  402642:	429a      	cmp	r2, r3
  402644:	d928      	bls.n	402698 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  402646:	4b21      	ldr	r3, [pc, #132]	; (4026cc <Reset_Handler+0x90>)
  402648:	4a1e      	ldr	r2, [pc, #120]	; (4026c4 <Reset_Handler+0x88>)
  40264a:	429a      	cmp	r2, r3
  40264c:	d20c      	bcs.n	402668 <Reset_Handler+0x2c>
  40264e:	3b01      	subs	r3, #1
  402650:	1a9b      	subs	r3, r3, r2
  402652:	f023 0303 	bic.w	r3, r3, #3
  402656:	3304      	adds	r3, #4
  402658:	4413      	add	r3, r2
  40265a:	491b      	ldr	r1, [pc, #108]	; (4026c8 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  40265c:	f851 0b04 	ldr.w	r0, [r1], #4
  402660:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  402664:	429a      	cmp	r2, r3
  402666:	d1f9      	bne.n	40265c <Reset_Handler+0x20>
	__NOP();
  402668:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40266a:	4b19      	ldr	r3, [pc, #100]	; (4026d0 <Reset_Handler+0x94>)
  40266c:	4a19      	ldr	r2, [pc, #100]	; (4026d4 <Reset_Handler+0x98>)
  40266e:	429a      	cmp	r2, r3
  402670:	d20a      	bcs.n	402688 <Reset_Handler+0x4c>
  402672:	3b01      	subs	r3, #1
  402674:	1a9b      	subs	r3, r3, r2
  402676:	f023 0303 	bic.w	r3, r3, #3
  40267a:	3304      	adds	r3, #4
  40267c:	4413      	add	r3, r2
		*pDest++ = 0;
  40267e:	2100      	movs	r1, #0
  402680:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  402684:	429a      	cmp	r2, r3
  402686:	d1fb      	bne.n	402680 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  402688:	4b13      	ldr	r3, [pc, #76]	; (4026d8 <Reset_Handler+0x9c>)
  40268a:	4a14      	ldr	r2, [pc, #80]	; (4026dc <Reset_Handler+0xa0>)
  40268c:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  40268e:	4b14      	ldr	r3, [pc, #80]	; (4026e0 <Reset_Handler+0xa4>)
  402690:	4798      	blx	r3
	main();
  402692:	4b14      	ldr	r3, [pc, #80]	; (4026e4 <Reset_Handler+0xa8>)
  402694:	4798      	blx	r3
  402696:	e7fe      	b.n	402696 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  402698:	4b0a      	ldr	r3, [pc, #40]	; (4026c4 <Reset_Handler+0x88>)
  40269a:	4a0b      	ldr	r2, [pc, #44]	; (4026c8 <Reset_Handler+0x8c>)
  40269c:	429a      	cmp	r2, r3
  40269e:	d2e3      	bcs.n	402668 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4026a0:	4b0a      	ldr	r3, [pc, #40]	; (4026cc <Reset_Handler+0x90>)
  4026a2:	4808      	ldr	r0, [pc, #32]	; (4026c4 <Reset_Handler+0x88>)
  4026a4:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4026a6:	4611      	mov	r1, r2
  4026a8:	3a04      	subs	r2, #4
  4026aa:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  4026ac:	2800      	cmp	r0, #0
  4026ae:	d0db      	beq.n	402668 <Reset_Handler+0x2c>
  4026b0:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  4026b4:	f852 0904 	ldr.w	r0, [r2], #-4
  4026b8:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  4026bc:	42ca      	cmn	r2, r1
  4026be:	d1f9      	bne.n	4026b4 <Reset_Handler+0x78>
  4026c0:	e7d2      	b.n	402668 <Reset_Handler+0x2c>
  4026c2:	bf00      	nop
  4026c4:	20000000 	.word	0x20000000
  4026c8:	00402a18 	.word	0x00402a18
  4026cc:	200004d4 	.word	0x200004d4
  4026d0:	2000074c 	.word	0x2000074c
  4026d4:	200004d4 	.word	0x200004d4
  4026d8:	e000ed00 	.word	0xe000ed00
  4026dc:	00400000 	.word	0x00400000
  4026e0:	00402881 	.word	0x00402881
  4026e4:	0040286d 	.word	0x0040286d

004026e8 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4026e8:	4b3c      	ldr	r3, [pc, #240]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  4026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026ec:	f003 0303 	and.w	r3, r3, #3
  4026f0:	2b03      	cmp	r3, #3
  4026f2:	d80e      	bhi.n	402712 <SystemCoreClockUpdate+0x2a>
  4026f4:	e8df f003 	tbb	[pc, r3]
  4026f8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4026fc:	4b38      	ldr	r3, [pc, #224]	; (4027e0 <SystemCoreClockUpdate+0xf8>)
  4026fe:	695b      	ldr	r3, [r3, #20]
  402700:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402704:	bf14      	ite	ne
  402706:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40270a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40270e:	4b35      	ldr	r3, [pc, #212]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  402710:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  402712:	4b32      	ldr	r3, [pc, #200]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  402714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402716:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40271a:	2b70      	cmp	r3, #112	; 0x70
  40271c:	d055      	beq.n	4027ca <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40271e:	4b2f      	ldr	r3, [pc, #188]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  402720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  402722:	4930      	ldr	r1, [pc, #192]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402724:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  402728:	680b      	ldr	r3, [r1, #0]
  40272a:	40d3      	lsrs	r3, r2
  40272c:	600b      	str	r3, [r1, #0]
  40272e:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402730:	4b2a      	ldr	r3, [pc, #168]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  402732:	6a1b      	ldr	r3, [r3, #32]
  402734:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402738:	d003      	beq.n	402742 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40273a:	4a2b      	ldr	r2, [pc, #172]	; (4027e8 <SystemCoreClockUpdate+0x100>)
  40273c:	4b29      	ldr	r3, [pc, #164]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  40273e:	601a      	str	r2, [r3, #0]
  402740:	e7e7      	b.n	402712 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402742:	4a2a      	ldr	r2, [pc, #168]	; (4027ec <SystemCoreClockUpdate+0x104>)
  402744:	4b27      	ldr	r3, [pc, #156]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  402746:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402748:	4b24      	ldr	r3, [pc, #144]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  40274a:	6a1b      	ldr	r3, [r3, #32]
  40274c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402750:	2b10      	cmp	r3, #16
  402752:	d005      	beq.n	402760 <SystemCoreClockUpdate+0x78>
  402754:	2b20      	cmp	r3, #32
  402756:	d1dc      	bne.n	402712 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  402758:	4a23      	ldr	r2, [pc, #140]	; (4027e8 <SystemCoreClockUpdate+0x100>)
  40275a:	4b22      	ldr	r3, [pc, #136]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  40275c:	601a      	str	r2, [r3, #0]
			break;
  40275e:	e7d8      	b.n	402712 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402760:	4a23      	ldr	r2, [pc, #140]	; (4027f0 <SystemCoreClockUpdate+0x108>)
  402762:	4b20      	ldr	r3, [pc, #128]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  402764:	601a      	str	r2, [r3, #0]
			break;
  402766:	e7d4      	b.n	402712 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402768:	4b1c      	ldr	r3, [pc, #112]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  40276a:	6a1b      	ldr	r3, [r3, #32]
  40276c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402770:	d018      	beq.n	4027a4 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402772:	4a1d      	ldr	r2, [pc, #116]	; (4027e8 <SystemCoreClockUpdate+0x100>)
  402774:	4b1b      	ldr	r3, [pc, #108]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  402776:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402778:	4b18      	ldr	r3, [pc, #96]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  40277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40277c:	f003 0303 	and.w	r3, r3, #3
  402780:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402782:	4a16      	ldr	r2, [pc, #88]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  402784:	bf07      	ittee	eq
  402786:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402788:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40278a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40278c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40278e:	4815      	ldr	r0, [pc, #84]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402790:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402794:	6803      	ldr	r3, [r0, #0]
  402796:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40279a:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40279c:	fbb3 f3f2 	udiv	r3, r3, r2
  4027a0:	6003      	str	r3, [r0, #0]
  4027a2:	e7b6      	b.n	402712 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4027a4:	4a11      	ldr	r2, [pc, #68]	; (4027ec <SystemCoreClockUpdate+0x104>)
  4027a6:	4b0f      	ldr	r3, [pc, #60]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  4027a8:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4027aa:	4b0c      	ldr	r3, [pc, #48]	; (4027dc <SystemCoreClockUpdate+0xf4>)
  4027ac:	6a1b      	ldr	r3, [r3, #32]
  4027ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027b2:	2b10      	cmp	r3, #16
  4027b4:	d005      	beq.n	4027c2 <SystemCoreClockUpdate+0xda>
  4027b6:	2b20      	cmp	r3, #32
  4027b8:	d1de      	bne.n	402778 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4027ba:	4a0b      	ldr	r2, [pc, #44]	; (4027e8 <SystemCoreClockUpdate+0x100>)
  4027bc:	4b09      	ldr	r3, [pc, #36]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  4027be:	601a      	str	r2, [r3, #0]
					break;
  4027c0:	e7da      	b.n	402778 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4027c2:	4a0b      	ldr	r2, [pc, #44]	; (4027f0 <SystemCoreClockUpdate+0x108>)
  4027c4:	4b07      	ldr	r3, [pc, #28]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  4027c6:	601a      	str	r2, [r3, #0]
					break;
  4027c8:	e7d6      	b.n	402778 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4027ca:	4a06      	ldr	r2, [pc, #24]	; (4027e4 <SystemCoreClockUpdate+0xfc>)
  4027cc:	6813      	ldr	r3, [r2, #0]
  4027ce:	4909      	ldr	r1, [pc, #36]	; (4027f4 <SystemCoreClockUpdate+0x10c>)
  4027d0:	fba1 1303 	umull	r1, r3, r1, r3
  4027d4:	085b      	lsrs	r3, r3, #1
  4027d6:	6013      	str	r3, [r2, #0]
  4027d8:	4770      	bx	lr
  4027da:	bf00      	nop
  4027dc:	400e0400 	.word	0x400e0400
  4027e0:	400e1410 	.word	0x400e1410
  4027e4:	200000a4 	.word	0x200000a4
  4027e8:	00b71b00 	.word	0x00b71b00
  4027ec:	003d0900 	.word	0x003d0900
  4027f0:	007a1200 	.word	0x007a1200
  4027f4:	aaaaaaab 	.word	0xaaaaaaab

004027f8 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4027f8:	4b12      	ldr	r3, [pc, #72]	; (402844 <system_init_flash+0x4c>)
  4027fa:	4298      	cmp	r0, r3
  4027fc:	d911      	bls.n	402822 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4027fe:	4b12      	ldr	r3, [pc, #72]	; (402848 <system_init_flash+0x50>)
  402800:	4298      	cmp	r0, r3
  402802:	d913      	bls.n	40282c <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402804:	4b11      	ldr	r3, [pc, #68]	; (40284c <system_init_flash+0x54>)
  402806:	4298      	cmp	r0, r3
  402808:	d914      	bls.n	402834 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40280a:	4b11      	ldr	r3, [pc, #68]	; (402850 <system_init_flash+0x58>)
  40280c:	4298      	cmp	r0, r3
  40280e:	d915      	bls.n	40283c <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  402810:	4b10      	ldr	r3, [pc, #64]	; (402854 <system_init_flash+0x5c>)
  402812:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402814:	bf94      	ite	ls
  402816:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40281a:	4a0f      	ldrhi	r2, [pc, #60]	; (402858 <system_init_flash+0x60>)
  40281c:	4b0f      	ldr	r3, [pc, #60]	; (40285c <system_init_flash+0x64>)
  40281e:	601a      	str	r2, [r3, #0]
  402820:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402822:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402826:	4b0d      	ldr	r3, [pc, #52]	; (40285c <system_init_flash+0x64>)
  402828:	601a      	str	r2, [r3, #0]
  40282a:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40282c:	4a0c      	ldr	r2, [pc, #48]	; (402860 <system_init_flash+0x68>)
  40282e:	4b0b      	ldr	r3, [pc, #44]	; (40285c <system_init_flash+0x64>)
  402830:	601a      	str	r2, [r3, #0]
  402832:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402834:	4a0b      	ldr	r2, [pc, #44]	; (402864 <system_init_flash+0x6c>)
  402836:	4b09      	ldr	r3, [pc, #36]	; (40285c <system_init_flash+0x64>)
  402838:	601a      	str	r2, [r3, #0]
  40283a:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40283c:	4a0a      	ldr	r2, [pc, #40]	; (402868 <system_init_flash+0x70>)
  40283e:	4b07      	ldr	r3, [pc, #28]	; (40285c <system_init_flash+0x64>)
  402840:	601a      	str	r2, [r3, #0]
  402842:	4770      	bx	lr
  402844:	01312cff 	.word	0x01312cff
  402848:	026259ff 	.word	0x026259ff
  40284c:	039386ff 	.word	0x039386ff
  402850:	04c4b3ff 	.word	0x04c4b3ff
  402854:	05f5e0ff 	.word	0x05f5e0ff
  402858:	04000500 	.word	0x04000500
  40285c:	400e0a00 	.word	0x400e0a00
  402860:	04000100 	.word	0x04000100
  402864:	04000200 	.word	0x04000200
  402868:	04000300 	.word	0x04000300

0040286c <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
  40286c:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	sysclk_init();
  40286e:	4b02      	ldr	r3, [pc, #8]	; (402878 <main+0xc>)
  402870:	4798      	blx	r3
	board_init();
  402872:	4b02      	ldr	r3, [pc, #8]	; (40287c <main+0x10>)
  402874:	4798      	blx	r3
  402876:	e7fe      	b.n	402876 <main+0xa>
  402878:	004023c1 	.word	0x004023c1
  40287c:	0040261d 	.word	0x0040261d

00402880 <__libc_init_array>:
  402880:	b570      	push	{r4, r5, r6, lr}
  402882:	4e0f      	ldr	r6, [pc, #60]	; (4028c0 <__libc_init_array+0x40>)
  402884:	4d0f      	ldr	r5, [pc, #60]	; (4028c4 <__libc_init_array+0x44>)
  402886:	1b76      	subs	r6, r6, r5
  402888:	10b6      	asrs	r6, r6, #2
  40288a:	bf18      	it	ne
  40288c:	2400      	movne	r4, #0
  40288e:	d005      	beq.n	40289c <__libc_init_array+0x1c>
  402890:	3401      	adds	r4, #1
  402892:	f855 3b04 	ldr.w	r3, [r5], #4
  402896:	4798      	blx	r3
  402898:	42a6      	cmp	r6, r4
  40289a:	d1f9      	bne.n	402890 <__libc_init_array+0x10>
  40289c:	4e0a      	ldr	r6, [pc, #40]	; (4028c8 <__libc_init_array+0x48>)
  40289e:	4d0b      	ldr	r5, [pc, #44]	; (4028cc <__libc_init_array+0x4c>)
  4028a0:	1b76      	subs	r6, r6, r5
  4028a2:	f000 f8a7 	bl	4029f4 <_init>
  4028a6:	10b6      	asrs	r6, r6, #2
  4028a8:	bf18      	it	ne
  4028aa:	2400      	movne	r4, #0
  4028ac:	d006      	beq.n	4028bc <__libc_init_array+0x3c>
  4028ae:	3401      	adds	r4, #1
  4028b0:	f855 3b04 	ldr.w	r3, [r5], #4
  4028b4:	4798      	blx	r3
  4028b6:	42a6      	cmp	r6, r4
  4028b8:	d1f9      	bne.n	4028ae <__libc_init_array+0x2e>
  4028ba:	bd70      	pop	{r4, r5, r6, pc}
  4028bc:	bd70      	pop	{r4, r5, r6, pc}
  4028be:	bf00      	nop
  4028c0:	00402a00 	.word	0x00402a00
  4028c4:	00402a00 	.word	0x00402a00
  4028c8:	00402a08 	.word	0x00402a08
  4028cc:	00402a00 	.word	0x00402a00

004028d0 <register_fini>:
  4028d0:	4b02      	ldr	r3, [pc, #8]	; (4028dc <register_fini+0xc>)
  4028d2:	b113      	cbz	r3, 4028da <register_fini+0xa>
  4028d4:	4802      	ldr	r0, [pc, #8]	; (4028e0 <register_fini+0x10>)
  4028d6:	f000 b805 	b.w	4028e4 <atexit>
  4028da:	4770      	bx	lr
  4028dc:	00000000 	.word	0x00000000
  4028e0:	004028f1 	.word	0x004028f1

004028e4 <atexit>:
  4028e4:	2300      	movs	r3, #0
  4028e6:	4601      	mov	r1, r0
  4028e8:	461a      	mov	r2, r3
  4028ea:	4618      	mov	r0, r3
  4028ec:	f000 b81e 	b.w	40292c <__register_exitproc>

004028f0 <__libc_fini_array>:
  4028f0:	b538      	push	{r3, r4, r5, lr}
  4028f2:	4c0a      	ldr	r4, [pc, #40]	; (40291c <__libc_fini_array+0x2c>)
  4028f4:	4d0a      	ldr	r5, [pc, #40]	; (402920 <__libc_fini_array+0x30>)
  4028f6:	1b64      	subs	r4, r4, r5
  4028f8:	10a4      	asrs	r4, r4, #2
  4028fa:	d00a      	beq.n	402912 <__libc_fini_array+0x22>
  4028fc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402900:	3b01      	subs	r3, #1
  402902:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402906:	3c01      	subs	r4, #1
  402908:	f855 3904 	ldr.w	r3, [r5], #-4
  40290c:	4798      	blx	r3
  40290e:	2c00      	cmp	r4, #0
  402910:	d1f9      	bne.n	402906 <__libc_fini_array+0x16>
  402912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402916:	f000 b877 	b.w	402a08 <_fini>
  40291a:	bf00      	nop
  40291c:	00402a18 	.word	0x00402a18
  402920:	00402a14 	.word	0x00402a14

00402924 <__retarget_lock_acquire_recursive>:
  402924:	4770      	bx	lr
  402926:	bf00      	nop

00402928 <__retarget_lock_release_recursive>:
  402928:	4770      	bx	lr
  40292a:	bf00      	nop

0040292c <__register_exitproc>:
  40292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402930:	4d2c      	ldr	r5, [pc, #176]	; (4029e4 <__register_exitproc+0xb8>)
  402932:	4606      	mov	r6, r0
  402934:	6828      	ldr	r0, [r5, #0]
  402936:	4698      	mov	r8, r3
  402938:	460f      	mov	r7, r1
  40293a:	4691      	mov	r9, r2
  40293c:	f7ff fff2 	bl	402924 <__retarget_lock_acquire_recursive>
  402940:	4b29      	ldr	r3, [pc, #164]	; (4029e8 <__register_exitproc+0xbc>)
  402942:	681c      	ldr	r4, [r3, #0]
  402944:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402948:	2b00      	cmp	r3, #0
  40294a:	d03e      	beq.n	4029ca <__register_exitproc+0x9e>
  40294c:	685a      	ldr	r2, [r3, #4]
  40294e:	2a1f      	cmp	r2, #31
  402950:	dc1c      	bgt.n	40298c <__register_exitproc+0x60>
  402952:	f102 0e01 	add.w	lr, r2, #1
  402956:	b176      	cbz	r6, 402976 <__register_exitproc+0x4a>
  402958:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40295c:	2401      	movs	r4, #1
  40295e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402962:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402966:	4094      	lsls	r4, r2
  402968:	4320      	orrs	r0, r4
  40296a:	2e02      	cmp	r6, #2
  40296c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402970:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402974:	d023      	beq.n	4029be <__register_exitproc+0x92>
  402976:	3202      	adds	r2, #2
  402978:	f8c3 e004 	str.w	lr, [r3, #4]
  40297c:	6828      	ldr	r0, [r5, #0]
  40297e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402982:	f7ff ffd1 	bl	402928 <__retarget_lock_release_recursive>
  402986:	2000      	movs	r0, #0
  402988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40298c:	4b17      	ldr	r3, [pc, #92]	; (4029ec <__register_exitproc+0xc0>)
  40298e:	b30b      	cbz	r3, 4029d4 <__register_exitproc+0xa8>
  402990:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402994:	f3af 8000 	nop.w
  402998:	4603      	mov	r3, r0
  40299a:	b1d8      	cbz	r0, 4029d4 <__register_exitproc+0xa8>
  40299c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4029a0:	6002      	str	r2, [r0, #0]
  4029a2:	2100      	movs	r1, #0
  4029a4:	6041      	str	r1, [r0, #4]
  4029a6:	460a      	mov	r2, r1
  4029a8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4029ac:	f04f 0e01 	mov.w	lr, #1
  4029b0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4029b4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4029b8:	2e00      	cmp	r6, #0
  4029ba:	d0dc      	beq.n	402976 <__register_exitproc+0x4a>
  4029bc:	e7cc      	b.n	402958 <__register_exitproc+0x2c>
  4029be:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4029c2:	430c      	orrs	r4, r1
  4029c4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4029c8:	e7d5      	b.n	402976 <__register_exitproc+0x4a>
  4029ca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4029ce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4029d2:	e7bb      	b.n	40294c <__register_exitproc+0x20>
  4029d4:	6828      	ldr	r0, [r5, #0]
  4029d6:	f7ff ffa7 	bl	402928 <__retarget_lock_release_recursive>
  4029da:	f04f 30ff 	mov.w	r0, #4294967295
  4029de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4029e2:	bf00      	nop
  4029e4:	200004d0 	.word	0x200004d0
  4029e8:	004029f0 	.word	0x004029f0
  4029ec:	00000000 	.word	0x00000000

004029f0 <_global_impure_ptr>:
  4029f0:	200000a8                                ... 

004029f4 <_init>:
  4029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4029f6:	bf00      	nop
  4029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4029fa:	bc08      	pop	{r3}
  4029fc:	469e      	mov	lr, r3
  4029fe:	4770      	bx	lr

00402a00 <__init_array_start>:
  402a00:	004028d1 	.word	0x004028d1

00402a04 <__frame_dummy_init_array_entry>:
  402a04:	004000f1                                ..@.

00402a08 <_fini>:
  402a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402a0a:	bf00      	nop
  402a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402a0e:	bc08      	pop	{r3}
  402a10:	469e      	mov	lr, r3
  402a12:	4770      	bx	lr

00402a14 <__fini_array_start>:
  402a14:	004000cd 	.word	0x004000cd
