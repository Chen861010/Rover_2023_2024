
SAM4S-chassis-pantilt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003684  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004ec  20000000  00403684  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006aa8  200004ec  00403b70  000204ec  2**2
                  ALLOC
  3 .stack        00003004  20006f94  0040a618  000204ec  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020516  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d1c1  00000000  00000000  0002056f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003caf  00000000  00000000  0003d730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000b88  00000000  00000000  000413df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000c18  00000000  00000000  00041f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00014fd1  00000000  00000000  00042b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000105be  00000000  00000000  00057b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00052d27  00000000  00000000  0006810e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001cd4  00000000  00000000  000bae38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007d0b  00000000  00000000  000bcb0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 9f 00 20 f1 26 40 00 ed 26 40 00 ed 26 40 00     ... .&@..&@..&@.
  400010:	ed 26 40 00 ed 26 40 00 ed 26 40 00 00 00 00 00     .&@..&@..&@.....
	...
  40002c:	ed 26 40 00 ed 26 40 00 00 00 00 00 ed 26 40 00     .&@..&@......&@.
  40003c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40004c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40005c:	00 00 00 00 b5 2c 40 00 ed 26 40 00 00 00 00 00     .....,@..&@.....
  40006c:	ad 0d 40 00 c1 0d 40 00 00 00 00 00 ed 26 40 00     ..@...@......&@.
	...
  40008c:	ed 26 40 00 ed 26 40 00 ed 26 40 00 ed 26 40 00     .&@..&@..&@..&@.
  40009c:	45 2a 40 00 ed 26 40 00 ed 26 40 00 00 00 00 00     E*@..&@..&@.....
	...
  4000b4:	ed 26 40 00 00 00 00 00 ed 26 40 00 ed 26 40 00     .&@......&@..&@.
  4000c4:	ed 26 40 00 41 17 40 00                             .&@.A.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200004ec 	.word	0x200004ec
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00403684 	.word	0x00403684

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00403684 	.word	0x00403684
  40012c:	200004f0 	.word	0x200004f0
  400130:	00403684 	.word	0x00403684
  400134:	00000000 	.word	0x00000000

00400138 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  400138:	4770      	bx	lr
	...

0040013c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40013c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013e:	480e      	ldr	r0, [pc, #56]	; (400178 <sysclk_init+0x3c>)
  400140:	4b0e      	ldr	r3, [pc, #56]	; (40017c <sysclk_init+0x40>)
  400142:	4798      	blx	r3
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400144:	2020      	movs	r0, #32
  400146:	4b0e      	ldr	r3, [pc, #56]	; (400180 <sysclk_init+0x44>)
  400148:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40014a:	4c0e      	ldr	r4, [pc, #56]	; (400184 <sysclk_init+0x48>)
  40014c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400152:	4b0d      	ldr	r3, [pc, #52]	; (400188 <sysclk_init+0x4c>)
  400154:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400156:	4a0d      	ldr	r2, [pc, #52]	; (40018c <sysclk_init+0x50>)
  400158:	4b0d      	ldr	r3, [pc, #52]	; (400190 <sysclk_init+0x54>)
  40015a:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40015c:	4c0d      	ldr	r4, [pc, #52]	; (400194 <sysclk_init+0x58>)
  40015e:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400160:	2800      	cmp	r0, #0
  400162:	d0fc      	beq.n	40015e <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400164:	2010      	movs	r0, #16
  400166:	4b0c      	ldr	r3, [pc, #48]	; (400198 <sysclk_init+0x5c>)
  400168:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40016a:	4b0c      	ldr	r3, [pc, #48]	; (40019c <sysclk_init+0x60>)
  40016c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40016e:	4802      	ldr	r0, [pc, #8]	; (400178 <sysclk_init+0x3c>)
  400170:	4b02      	ldr	r3, [pc, #8]	; (40017c <sysclk_init+0x40>)
  400172:	4798      	blx	r3
  400174:	bd10      	pop	{r4, pc}
  400176:	bf00      	nop
  400178:	07270e00 	.word	0x07270e00
  40017c:	004028ad 	.word	0x004028ad
  400180:	00400e39 	.word	0x00400e39
  400184:	00400e85 	.word	0x00400e85
  400188:	00400e95 	.word	0x00400e95
  40018c:	20133f01 	.word	0x20133f01
  400190:	400e0400 	.word	0x400e0400
  400194:	00400ea5 	.word	0x00400ea5
  400198:	00400dd5 	.word	0x00400dd5
  40019c:	0040279d 	.word	0x0040279d

004001a0 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  4001a0:	490e      	ldr	r1, [pc, #56]	; (4001dc <udi_cdc_comm_enable+0x3c>)
  4001a2:	2300      	movs	r3, #0
  4001a4:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  4001a6:	4a0e      	ldr	r2, [pc, #56]	; (4001e0 <udi_cdc_comm_enable+0x40>)
  4001a8:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  4001aa:	4a0e      	ldr	r2, [pc, #56]	; (4001e4 <udi_cdc_comm_enable+0x44>)
  4001ac:	20a1      	movs	r0, #161	; 0xa1
  4001ae:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  4001b0:	2020      	movs	r0, #32
  4001b2:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  4001b4:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  4001b6:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  4001b8:	2002      	movs	r0, #2
  4001ba:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  4001bc:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4001be:	4a0a      	ldr	r2, [pc, #40]	; (4001e8 <udi_cdc_comm_enable+0x48>)
  4001c0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  4001c4:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4001c6:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4001c8:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4001ca:	2308      	movs	r3, #8
  4001cc:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  4001ce:	780b      	ldrb	r3, [r1, #0]
  4001d0:	3301      	adds	r3, #1
  4001d2:	b2db      	uxtb	r3, r3
  4001d4:	700b      	strb	r3, [r1, #0]
	return true;
}
  4001d6:	2001      	movs	r0, #1
  4001d8:	4770      	bx	lr
  4001da:	bf00      	nop
  4001dc:	20000513 	.word	0x20000513
  4001e0:	200005a8 	.word	0x200005a8
  4001e4:	20000640 	.word	0x20000640
  4001e8:	2000050c 	.word	0x2000050c

004001ec <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  4001ec:	4a02      	ldr	r2, [pc, #8]	; (4001f8 <udi_cdc_comm_disable+0xc>)
  4001ee:	7813      	ldrb	r3, [r2, #0]
  4001f0:	3b01      	subs	r3, #1
  4001f2:	b2db      	uxtb	r3, r3
  4001f4:	7013      	strb	r3, [r2, #0]
  4001f6:	4770      	bx	lr
  4001f8:	20000513 	.word	0x20000513

004001fc <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4001fc:	4a04      	ldr	r2, [pc, #16]	; (400210 <udi_cdc_data_disable+0x14>)
  4001fe:	7813      	ldrb	r3, [r2, #0]
  400200:	3b01      	subs	r3, #1
  400202:	b2db      	uxtb	r3, r3
  400204:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  400206:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400208:	2200      	movs	r2, #0
  40020a:	4b02      	ldr	r3, [pc, #8]	; (400214 <udi_cdc_data_disable+0x18>)
  40020c:	701a      	strb	r2, [r3, #0]
  40020e:	4770      	bx	lr
  400210:	20000514 	.word	0x20000514
  400214:	2000050a 	.word	0x2000050a

00400218 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  400218:	2000      	movs	r0, #0
  40021a:	4770      	bx	lr

0040021c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  40021c:	2000      	movs	r0, #0
  40021e:	4770      	bx	lr

00400220 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  400220:	4b1d      	ldr	r3, [pc, #116]	; (400298 <udi_cdc_comm_setup+0x78>)
  400222:	781b      	ldrb	r3, [r3, #0]
  400224:	f013 0f80 	tst.w	r3, #128	; 0x80
  400228:	d105      	bne.n	400236 <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40022a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40022e:	2b20      	cmp	r3, #32
  400230:	d018      	beq.n	400264 <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  400232:	2000      	movs	r0, #0
  400234:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400236:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40023a:	2b20      	cmp	r3, #32
  40023c:	d001      	beq.n	400242 <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  40023e:	2000      	movs	r0, #0
  400240:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400242:	4b15      	ldr	r3, [pc, #84]	; (400298 <udi_cdc_comm_setup+0x78>)
  400244:	785b      	ldrb	r3, [r3, #1]
  400246:	2b21      	cmp	r3, #33	; 0x21
  400248:	d124      	bne.n	400294 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  40024a:	4b13      	ldr	r3, [pc, #76]	; (400298 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  40024c:	88db      	ldrh	r3, [r3, #6]
  40024e:	2b07      	cmp	r3, #7
  400250:	d001      	beq.n	400256 <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  400252:	2000      	movs	r0, #0
  400254:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  400256:	4b10      	ldr	r3, [pc, #64]	; (400298 <udi_cdc_comm_setup+0x78>)
  400258:	4a10      	ldr	r2, [pc, #64]	; (40029c <udi_cdc_comm_setup+0x7c>)
  40025a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  40025c:	2207      	movs	r2, #7
  40025e:	819a      	strh	r2, [r3, #12]
				return true;
  400260:	2001      	movs	r0, #1
  400262:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  400264:	4b0c      	ldr	r3, [pc, #48]	; (400298 <udi_cdc_comm_setup+0x78>)
  400266:	7858      	ldrb	r0, [r3, #1]
  400268:	2820      	cmp	r0, #32
  40026a:	d004      	beq.n	400276 <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  40026c:	2822      	cmp	r0, #34	; 0x22
  40026e:	bf14      	ite	ne
  400270:	2000      	movne	r0, #0
  400272:	2001      	moveq	r0, #1
  400274:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  400276:	4b08      	ldr	r3, [pc, #32]	; (400298 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400278:	88db      	ldrh	r3, [r3, #6]
  40027a:	2b07      	cmp	r3, #7
  40027c:	d001      	beq.n	400282 <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  40027e:	2000      	movs	r0, #0
}
  400280:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <udi_cdc_comm_setup+0x78>)
  400284:	4a06      	ldr	r2, [pc, #24]	; (4002a0 <udi_cdc_comm_setup+0x80>)
  400286:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400288:	4a04      	ldr	r2, [pc, #16]	; (40029c <udi_cdc_comm_setup+0x7c>)
  40028a:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  40028c:	2207      	movs	r2, #7
  40028e:	819a      	strh	r2, [r3, #12]
				return true;
  400290:	2001      	movs	r0, #1
  400292:	4770      	bx	lr
	return false;  // request Not supported
  400294:	2000      	movs	r0, #0
  400296:	4770      	bx	lr
  400298:	20002734 	.word	0x20002734
  40029c:	2000050c 	.word	0x2000050c
  4002a0:	004002a5 	.word	0x004002a5

004002a4 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4002a4:	4770      	bx	lr
	...

004002a8 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  4002a8:	4b44      	ldr	r3, [pc, #272]	; (4003bc <udi_cdc_tx_send+0x114>)
  4002aa:	781b      	ldrb	r3, [r3, #0]
  4002ac:	b103      	cbz	r3, 4002b0 <udi_cdc_tx_send+0x8>
  4002ae:	4770      	bx	lr
{
  4002b0:	b570      	push	{r4, r5, r6, lr}
  4002b2:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  4002b4:	4b42      	ldr	r3, [pc, #264]	; (4003c0 <udi_cdc_tx_send+0x118>)
  4002b6:	4798      	blx	r3
  4002b8:	2800      	cmp	r0, #0
  4002ba:	d041      	beq.n	400340 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  4002bc:	4b41      	ldr	r3, [pc, #260]	; (4003c4 <udi_cdc_tx_send+0x11c>)
  4002be:	881c      	ldrh	r4, [r3, #0]
  4002c0:	4b41      	ldr	r3, [pc, #260]	; (4003c8 <udi_cdc_tx_send+0x120>)
  4002c2:	4798      	blx	r3
  4002c4:	4284      	cmp	r4, r0
  4002c6:	d076      	beq.n	4003b6 <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4002c8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4002cc:	fab3 f383 	clz	r3, r3
  4002d0:	095b      	lsrs	r3, r3, #5
  4002d2:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  4002d4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4002d6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4002da:	2200      	movs	r2, #0
  4002dc:	4b3b      	ldr	r3, [pc, #236]	; (4003cc <udi_cdc_tx_send+0x124>)
  4002de:	701a      	strb	r2, [r3, #0]
	return flags;
  4002e0:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  4002e2:	4b3b      	ldr	r3, [pc, #236]	; (4003d0 <udi_cdc_tx_send+0x128>)
  4002e4:	781c      	ldrb	r4, [r3, #0]
  4002e6:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  4002e8:	4b3a      	ldr	r3, [pc, #232]	; (4003d4 <udi_cdc_tx_send+0x12c>)
  4002ea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002ee:	2b00      	cmp	r3, #0
  4002f0:	d02d      	beq.n	40034e <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  4002f2:	2200      	movs	r2, #0
  4002f4:	4b38      	ldr	r3, [pc, #224]	; (4003d8 <udi_cdc_tx_send+0x130>)
  4002f6:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  4002f8:	4b38      	ldr	r3, [pc, #224]	; (4003dc <udi_cdc_tx_send+0x134>)
  4002fa:	781b      	ldrb	r3, [r3, #0]
  4002fc:	2b00      	cmp	r3, #0
  4002fe:	d142      	bne.n	400386 <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400300:	fab4 f384 	clz	r3, r4
  400304:	095b      	lsrs	r3, r3, #5
  400306:	4a32      	ldr	r2, [pc, #200]	; (4003d0 <udi_cdc_tx_send+0x128>)
  400308:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  40030a:	2201      	movs	r2, #1
  40030c:	4b2b      	ldr	r3, [pc, #172]	; (4003bc <udi_cdc_tx_send+0x114>)
  40030e:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400310:	b125      	cbz	r5, 40031c <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  400312:	4b2e      	ldr	r3, [pc, #184]	; (4003cc <udi_cdc_tx_send+0x124>)
  400314:	701a      	strb	r2, [r3, #0]
  400316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40031a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  40031c:	4626      	mov	r6, r4
  40031e:	4b2d      	ldr	r3, [pc, #180]	; (4003d4 <udi_cdc_tx_send+0x12c>)
  400320:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400324:	2b40      	cmp	r3, #64	; 0x40
  400326:	bf14      	ite	ne
  400328:	2501      	movne	r5, #1
  40032a:	2500      	moveq	r5, #0
	if (b_short_packet) {
  40032c:	d034      	beq.n	400398 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  40032e:	4b24      	ldr	r3, [pc, #144]	; (4003c0 <udi_cdc_tx_send+0x118>)
  400330:	4798      	blx	r3
  400332:	2800      	cmp	r0, #0
  400334:	d02b      	beq.n	40038e <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400336:	4b24      	ldr	r3, [pc, #144]	; (4003c8 <udi_cdc_tx_send+0x120>)
  400338:	4798      	blx	r3
  40033a:	4b22      	ldr	r3, [pc, #136]	; (4003c4 <udi_cdc_tx_send+0x11c>)
  40033c:	8018      	strh	r0, [r3, #0]
  40033e:	e02e      	b.n	40039e <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400340:	4b20      	ldr	r3, [pc, #128]	; (4003c4 <udi_cdc_tx_send+0x11c>)
  400342:	881c      	ldrh	r4, [r3, #0]
  400344:	4b26      	ldr	r3, [pc, #152]	; (4003e0 <udi_cdc_tx_send+0x138>)
  400346:	4798      	blx	r3
  400348:	4284      	cmp	r4, r0
  40034a:	d1bd      	bne.n	4002c8 <udi_cdc_tx_send+0x20>
  40034c:	e033      	b.n	4003b6 <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  40034e:	4a22      	ldr	r2, [pc, #136]	; (4003d8 <udi_cdc_tx_send+0x130>)
  400350:	8813      	ldrh	r3, [r2, #0]
  400352:	3301      	adds	r3, #1
  400354:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  400356:	4b1a      	ldr	r3, [pc, #104]	; (4003c0 <udi_cdc_tx_send+0x118>)
  400358:	4798      	blx	r3
  40035a:	b918      	cbnz	r0, 400364 <udi_cdc_tx_send+0xbc>
  40035c:	4b1e      	ldr	r3, [pc, #120]	; (4003d8 <udi_cdc_tx_send+0x130>)
  40035e:	881b      	ldrh	r3, [r3, #0]
  400360:	2b63      	cmp	r3, #99	; 0x63
  400362:	d908      	bls.n	400376 <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400364:	4b16      	ldr	r3, [pc, #88]	; (4003c0 <udi_cdc_tx_send+0x118>)
  400366:	4798      	blx	r3
  400368:	2800      	cmp	r0, #0
  40036a:	d0c2      	beq.n	4002f2 <udi_cdc_tx_send+0x4a>
  40036c:	4b1a      	ldr	r3, [pc, #104]	; (4003d8 <udi_cdc_tx_send+0x130>)
  40036e:	881b      	ldrh	r3, [r3, #0]
  400370:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400374:	d2bd      	bcs.n	4002f2 <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  400376:	b1f5      	cbz	r5, 4003b6 <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  400378:	2201      	movs	r2, #1
  40037a:	4b14      	ldr	r3, [pc, #80]	; (4003cc <udi_cdc_tx_send+0x124>)
  40037c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40037e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400382:	b662      	cpsie	i
  400384:	e017      	b.n	4003b6 <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400386:	fab4 f484 	clz	r4, r4
  40038a:	0964      	lsrs	r4, r4, #5
  40038c:	e7bd      	b.n	40030a <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  40038e:	4b14      	ldr	r3, [pc, #80]	; (4003e0 <udi_cdc_tx_send+0x138>)
  400390:	4798      	blx	r3
  400392:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <udi_cdc_tx_send+0x11c>)
  400394:	8018      	strh	r0, [r3, #0]
  400396:	e002      	b.n	40039e <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400398:	2200      	movs	r2, #0
  40039a:	4b0a      	ldr	r3, [pc, #40]	; (4003c4 <udi_cdc_tx_send+0x11c>)
  40039c:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  40039e:	4b0d      	ldr	r3, [pc, #52]	; (4003d4 <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  4003a0:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  4003a4:	4a0f      	ldr	r2, [pc, #60]	; (4003e4 <udi_cdc_tx_send+0x13c>)
  4003a6:	9200      	str	r2, [sp, #0]
  4003a8:	4a0f      	ldr	r2, [pc, #60]	; (4003e8 <udi_cdc_tx_send+0x140>)
  4003aa:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4003ae:	4629      	mov	r1, r5
  4003b0:	2081      	movs	r0, #129	; 0x81
  4003b2:	4c0e      	ldr	r4, [pc, #56]	; (4003ec <udi_cdc_tx_send+0x144>)
  4003b4:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  4003b6:	b004      	add	sp, #16
  4003b8:	bd70      	pop	{r4, r5, r6, pc}
  4003ba:	bf00      	nop
  4003bc:	2000063c 	.word	0x2000063c
  4003c0:	00402049 	.word	0x00402049
  4003c4:	20000638 	.word	0x20000638
  4003c8:	004020b5 	.word	0x004020b5
  4003cc:	200000a0 	.word	0x200000a0
  4003d0:	20000634 	.word	0x20000634
  4003d4:	20000630 	.word	0x20000630
  4003d8:	20000508 	.word	0x20000508
  4003dc:	200005ac 	.word	0x200005ac
  4003e0:	004020a5 	.word	0x004020a5
  4003e4:	004003f1 	.word	0x004003f1
  4003e8:	200005b0 	.word	0x200005b0
  4003ec:	0040240d 	.word	0x0040240d

004003f0 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  4003f0:	b100      	cbz	r0, 4003f4 <udi_cdc_data_sent+0x4>
  4003f2:	4770      	bx	lr
{
  4003f4:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  4003f6:	4b07      	ldr	r3, [pc, #28]	; (400414 <udi_cdc_data_sent+0x24>)
  4003f8:	781b      	ldrb	r3, [r3, #0]
  4003fa:	fab3 f383 	clz	r3, r3
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	4a05      	ldr	r2, [pc, #20]	; (400418 <udi_cdc_data_sent+0x28>)
  400402:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400406:	4b05      	ldr	r3, [pc, #20]	; (40041c <udi_cdc_data_sent+0x2c>)
  400408:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  40040a:	4b05      	ldr	r3, [pc, #20]	; (400420 <udi_cdc_data_sent+0x30>)
  40040c:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  40040e:	4b05      	ldr	r3, [pc, #20]	; (400424 <udi_cdc_data_sent+0x34>)
  400410:	4798      	blx	r3
  400412:	bd08      	pop	{r3, pc}
  400414:	20000634 	.word	0x20000634
  400418:	20000630 	.word	0x20000630
  40041c:	200005ac 	.word	0x200005ac
  400420:	2000063c 	.word	0x2000063c
  400424:	004002a9 	.word	0x004002a9

00400428 <udi_cdc_data_sof_notify>:
{
  400428:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  40042a:	2000      	movs	r0, #0
  40042c:	4b01      	ldr	r3, [pc, #4]	; (400434 <udi_cdc_data_sof_notify+0xc>)
  40042e:	4798      	blx	r3
  400430:	bd08      	pop	{r3, pc}
  400432:	bf00      	nop
  400434:	004002a9 	.word	0x004002a9

00400438 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  400438:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40043a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40043e:	fab3 f383 	clz	r3, r3
  400442:	095b      	lsrs	r3, r3, #5
  400444:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400446:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400448:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40044c:	2200      	movs	r2, #0
  40044e:	4b0b      	ldr	r3, [pc, #44]	; (40047c <udi_cdc_multi_get_nb_received_data+0x44>)
  400450:	701a      	strb	r2, [r3, #0]
	return flags;
  400452:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400454:	4b0a      	ldr	r3, [pc, #40]	; (400480 <udi_cdc_multi_get_nb_received_data+0x48>)
  400456:	8818      	ldrh	r0, [r3, #0]
  400458:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  40045a:	4a0a      	ldr	r2, [pc, #40]	; (400484 <udi_cdc_multi_get_nb_received_data+0x4c>)
  40045c:	7812      	ldrb	r2, [r2, #0]
  40045e:	b2d2      	uxtb	r2, r2
  400460:	4809      	ldr	r0, [pc, #36]	; (400488 <udi_cdc_multi_get_nb_received_data+0x50>)
  400462:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  400466:	b280      	uxth	r0, r0
  400468:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  40046a:	b129      	cbz	r1, 400478 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  40046c:	2201      	movs	r2, #1
  40046e:	4b03      	ldr	r3, [pc, #12]	; (40047c <udi_cdc_multi_get_nb_received_data+0x44>)
  400470:	701a      	strb	r2, [r3, #0]
  400472:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400476:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400478:	b002      	add	sp, #8
  40047a:	4770      	bx	lr
  40047c:	200000a0 	.word	0x200000a0
  400480:	200005a0 	.word	0x200005a0
  400484:	2000059c 	.word	0x2000059c
  400488:	20000598 	.word	0x20000598

0040048c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  40048c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  40048e:	4b03      	ldr	r3, [pc, #12]	; (40049c <udi_cdc_multi_is_rx_ready+0x10>)
  400490:	4798      	blx	r3
}
  400492:	3000      	adds	r0, #0
  400494:	bf18      	it	ne
  400496:	2001      	movne	r0, #1
  400498:	bd08      	pop	{r3, pc}
  40049a:	bf00      	nop
  40049c:	00400439 	.word	0x00400439

004004a0 <udi_cdc_rx_start>:
{
  4004a0:	b510      	push	{r4, lr}
  4004a2:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4004a4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4004a8:	fab3 f383 	clz	r3, r3
  4004ac:	095b      	lsrs	r3, r3, #5
  4004ae:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  4004b0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4004b2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4004b6:	2200      	movs	r2, #0
  4004b8:	4b1e      	ldr	r3, [pc, #120]	; (400534 <udi_cdc_rx_start+0x94>)
  4004ba:	701a      	strb	r2, [r3, #0]
	return flags;
  4004bc:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4004be:	4a1e      	ldr	r2, [pc, #120]	; (400538 <udi_cdc_rx_start+0x98>)
  4004c0:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  4004c2:	4a1e      	ldr	r2, [pc, #120]	; (40053c <udi_cdc_rx_start+0x9c>)
  4004c4:	7812      	ldrb	r2, [r2, #0]
  4004c6:	b94a      	cbnz	r2, 4004dc <udi_cdc_rx_start+0x3c>
  4004c8:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4004ca:	4a1d      	ldr	r2, [pc, #116]	; (400540 <udi_cdc_rx_start+0xa0>)
  4004cc:	8811      	ldrh	r1, [r2, #0]
  4004ce:	b289      	uxth	r1, r1
  4004d0:	4a1c      	ldr	r2, [pc, #112]	; (400544 <udi_cdc_rx_start+0xa4>)
  4004d2:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  4004d6:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  4004d8:	4291      	cmp	r1, r2
  4004da:	d209      	bcs.n	4004f0 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  4004dc:	b33b      	cbz	r3, 40052e <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  4004de:	2201      	movs	r2, #1
  4004e0:	4b14      	ldr	r3, [pc, #80]	; (400534 <udi_cdc_rx_start+0x94>)
  4004e2:	701a      	strb	r2, [r3, #0]
  4004e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004e8:	b662      	cpsie	i
		return false;
  4004ea:	2000      	movs	r0, #0
}
  4004ec:	b004      	add	sp, #16
  4004ee:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  4004f0:	2100      	movs	r1, #0
  4004f2:	4a13      	ldr	r2, [pc, #76]	; (400540 <udi_cdc_rx_start+0xa0>)
  4004f4:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4004f6:	fab4 f284 	clz	r2, r4
  4004fa:	0952      	lsrs	r2, r2, #5
  4004fc:	490e      	ldr	r1, [pc, #56]	; (400538 <udi_cdc_rx_start+0x98>)
  4004fe:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400500:	2101      	movs	r1, #1
  400502:	4a0e      	ldr	r2, [pc, #56]	; (40053c <udi_cdc_rx_start+0x9c>)
  400504:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  400506:	b123      	cbz	r3, 400512 <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  400508:	4b0a      	ldr	r3, [pc, #40]	; (400534 <udi_cdc_rx_start+0x94>)
  40050a:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40050c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400510:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  400512:	2000      	movs	r0, #0
  400514:	4b0c      	ldr	r3, [pc, #48]	; (400548 <udi_cdc_rx_start+0xa8>)
  400516:	4798      	blx	r3
	return udd_ep_run(ep,
  400518:	4b0c      	ldr	r3, [pc, #48]	; (40054c <udi_cdc_rx_start+0xac>)
  40051a:	9300      	str	r3, [sp, #0]
  40051c:	2340      	movs	r3, #64	; 0x40
  40051e:	4a0c      	ldr	r2, [pc, #48]	; (400550 <udi_cdc_rx_start+0xb0>)
  400520:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400524:	2101      	movs	r1, #1
  400526:	2002      	movs	r0, #2
  400528:	4c0a      	ldr	r4, [pc, #40]	; (400554 <udi_cdc_rx_start+0xb4>)
  40052a:	47a0      	blx	r4
  40052c:	e7de      	b.n	4004ec <udi_cdc_rx_start+0x4c>
		return false;
  40052e:	2000      	movs	r0, #0
  400530:	e7dc      	b.n	4004ec <udi_cdc_rx_start+0x4c>
  400532:	bf00      	nop
  400534:	200000a0 	.word	0x200000a0
  400538:	2000059c 	.word	0x2000059c
  40053c:	200005a4 	.word	0x200005a4
  400540:	200005a0 	.word	0x200005a0
  400544:	20000598 	.word	0x20000598
  400548:	0040048d 	.word	0x0040048d
  40054c:	004005ed 	.word	0x004005ed
  400550:	20000518 	.word	0x20000518
  400554:	0040240d 	.word	0x0040240d

00400558 <udi_cdc_data_enable>:
{
  400558:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  40055a:	2400      	movs	r4, #0
  40055c:	4b16      	ldr	r3, [pc, #88]	; (4005b8 <udi_cdc_data_enable+0x60>)
  40055e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400560:	4b16      	ldr	r3, [pc, #88]	; (4005bc <udi_cdc_data_enable+0x64>)
  400562:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400564:	4b16      	ldr	r3, [pc, #88]	; (4005c0 <udi_cdc_data_enable+0x68>)
  400566:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400568:	4b16      	ldr	r3, [pc, #88]	; (4005c4 <udi_cdc_data_enable+0x6c>)
  40056a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  40056c:	4b16      	ldr	r3, [pc, #88]	; (4005c8 <udi_cdc_data_enable+0x70>)
  40056e:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400570:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400572:	4b16      	ldr	r3, [pc, #88]	; (4005cc <udi_cdc_data_enable+0x74>)
  400574:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  400576:	4620      	mov	r0, r4
  400578:	4b15      	ldr	r3, [pc, #84]	; (4005d0 <udi_cdc_data_enable+0x78>)
  40057a:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  40057c:	4b15      	ldr	r3, [pc, #84]	; (4005d4 <udi_cdc_data_enable+0x7c>)
  40057e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400580:	4b15      	ldr	r3, [pc, #84]	; (4005d8 <udi_cdc_data_enable+0x80>)
  400582:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400584:	4b15      	ldr	r3, [pc, #84]	; (4005dc <udi_cdc_data_enable+0x84>)
  400586:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400588:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  40058a:	4b15      	ldr	r3, [pc, #84]	; (4005e0 <udi_cdc_data_enable+0x88>)
  40058c:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  40058e:	4620      	mov	r0, r4
  400590:	4b14      	ldr	r3, [pc, #80]	; (4005e4 <udi_cdc_data_enable+0x8c>)
  400592:	4798      	blx	r3
  400594:	4601      	mov	r1, r0
  400596:	b140      	cbz	r0, 4005aa <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400598:	4a07      	ldr	r2, [pc, #28]	; (4005b8 <udi_cdc_data_enable+0x60>)
  40059a:	7813      	ldrb	r3, [r2, #0]
  40059c:	3301      	adds	r3, #1
  40059e:	b2db      	uxtb	r3, r3
  4005a0:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4005a2:	7813      	ldrb	r3, [r2, #0]
  4005a4:	b2db      	uxtb	r3, r3
  4005a6:	2b01      	cmp	r3, #1
  4005a8:	d001      	beq.n	4005ae <udi_cdc_data_enable+0x56>
}
  4005aa:	4608      	mov	r0, r1
  4005ac:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  4005ae:	2201      	movs	r2, #1
  4005b0:	4b0d      	ldr	r3, [pc, #52]	; (4005e8 <udi_cdc_data_enable+0x90>)
  4005b2:	701a      	strb	r2, [r3, #0]
  4005b4:	e7f9      	b.n	4005aa <udi_cdc_data_enable+0x52>
  4005b6:	bf00      	nop
  4005b8:	20000514 	.word	0x20000514
  4005bc:	2000063c 	.word	0x2000063c
  4005c0:	200005ac 	.word	0x200005ac
  4005c4:	20000634 	.word	0x20000634
  4005c8:	20000630 	.word	0x20000630
  4005cc:	20000638 	.word	0x20000638
  4005d0:	004002a9 	.word	0x004002a9
  4005d4:	200005a4 	.word	0x200005a4
  4005d8:	2000059c 	.word	0x2000059c
  4005dc:	20000598 	.word	0x20000598
  4005e0:	200005a0 	.word	0x200005a0
  4005e4:	004004a1 	.word	0x004004a1
  4005e8:	2000050a 	.word	0x2000050a

004005ec <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  4005ec:	b9e8      	cbnz	r0, 40062a <udi_cdc_data_received+0x3e>
{
  4005ee:	b510      	push	{r4, lr}
  4005f0:	b082      	sub	sp, #8
  4005f2:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4005f4:	4b0d      	ldr	r3, [pc, #52]	; (40062c <udi_cdc_data_received+0x40>)
  4005f6:	781c      	ldrb	r4, [r3, #0]
  4005f8:	fab4 f484 	clz	r4, r4
  4005fc:	0964      	lsrs	r4, r4, #5
	if (!n) {
  4005fe:	b151      	cbz	r1, 400616 <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400600:	b289      	uxth	r1, r1
  400602:	4b0b      	ldr	r3, [pc, #44]	; (400630 <udi_cdc_data_received+0x44>)
  400604:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  400608:	2000      	movs	r0, #0
  40060a:	4b0a      	ldr	r3, [pc, #40]	; (400634 <udi_cdc_data_received+0x48>)
  40060c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  40060e:	4b0a      	ldr	r3, [pc, #40]	; (400638 <udi_cdc_data_received+0x4c>)
  400610:	4798      	blx	r3
}
  400612:	b002      	add	sp, #8
  400614:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  400616:	4b09      	ldr	r3, [pc, #36]	; (40063c <udi_cdc_data_received+0x50>)
  400618:	9300      	str	r3, [sp, #0]
  40061a:	2340      	movs	r3, #64	; 0x40
  40061c:	4a08      	ldr	r2, [pc, #32]	; (400640 <udi_cdc_data_received+0x54>)
  40061e:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400622:	2101      	movs	r1, #1
  400624:	4c07      	ldr	r4, [pc, #28]	; (400644 <udi_cdc_data_received+0x58>)
  400626:	47a0      	blx	r4
		return;
  400628:	e7f3      	b.n	400612 <udi_cdc_data_received+0x26>
  40062a:	4770      	bx	lr
  40062c:	2000059c 	.word	0x2000059c
  400630:	20000598 	.word	0x20000598
  400634:	200005a4 	.word	0x200005a4
  400638:	004004a1 	.word	0x004004a1
  40063c:	004005ed 	.word	0x004005ed
  400640:	20000518 	.word	0x20000518
  400644:	0040240d 	.word	0x0040240d

00400648 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  400648:	4b10      	ldr	r3, [pc, #64]	; (40068c <udc_next_desc_in_iface+0x44>)
  40064a:	681b      	ldr	r3, [r3, #0]
  40064c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40064e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400650:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400652:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400654:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400656:	4290      	cmp	r0, r2
  400658:	d211      	bcs.n	40067e <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40065a:	7843      	ldrb	r3, [r0, #1]
  40065c:	2b04      	cmp	r3, #4
  40065e:	d010      	beq.n	400682 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400660:	428b      	cmp	r3, r1
  400662:	d009      	beq.n	400678 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400664:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400666:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400668:	4290      	cmp	r0, r2
  40066a:	d206      	bcs.n	40067a <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40066c:	7843      	ldrb	r3, [r0, #1]
  40066e:	2b04      	cmp	r3, #4
  400670:	d009      	beq.n	400686 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400672:	428b      	cmp	r3, r1
  400674:	d1f6      	bne.n	400664 <udc_next_desc_in_iface+0x1c>
  400676:	e007      	b.n	400688 <udc_next_desc_in_iface+0x40>
  400678:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40067a:	2000      	movs	r0, #0
  40067c:	4770      	bx	lr
  40067e:	2000      	movs	r0, #0
  400680:	4770      	bx	lr
  400682:	2000      	movs	r0, #0
  400684:	4770      	bx	lr
  400686:	2000      	movs	r0, #0
}
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	20000658 	.word	0x20000658

00400690 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400690:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400692:	4b03      	ldr	r3, [pc, #12]	; (4006a0 <udc_valid_address+0x10>)
  400694:	7898      	ldrb	r0, [r3, #2]
  400696:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40069a:	4b02      	ldr	r3, [pc, #8]	; (4006a4 <udc_valid_address+0x14>)
  40069c:	4798      	blx	r3
  40069e:	bd08      	pop	{r3, pc}
  4006a0:	20002734 	.word	0x20002734
  4006a4:	0040204d 	.word	0x0040204d

004006a8 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  4006a8:	4b19      	ldr	r3, [pc, #100]	; (400710 <udc_update_iface_desc+0x68>)
  4006aa:	781b      	ldrb	r3, [r3, #0]
  4006ac:	b34b      	cbz	r3, 400702 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4006ae:	4b19      	ldr	r3, [pc, #100]	; (400714 <udc_update_iface_desc+0x6c>)
  4006b0:	681b      	ldr	r3, [r3, #0]
  4006b2:	681b      	ldr	r3, [r3, #0]
  4006b4:	791a      	ldrb	r2, [r3, #4]
  4006b6:	4282      	cmp	r2, r0
  4006b8:	d925      	bls.n	400706 <udc_update_iface_desc+0x5e>
{
  4006ba:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4006bc:	4a16      	ldr	r2, [pc, #88]	; (400718 <udc_update_iface_desc+0x70>)
  4006be:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4006c0:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4006c2:	441c      	add	r4, r3
	while (ptr_end_desc >
  4006c4:	42a3      	cmp	r3, r4
  4006c6:	d220      	bcs.n	40070a <udc_update_iface_desc+0x62>
  4006c8:	2500      	movs	r5, #0
  4006ca:	2601      	movs	r6, #1
  4006cc:	e007      	b.n	4006de <udc_update_iface_desc+0x36>
  4006ce:	4a12      	ldr	r2, [pc, #72]	; (400718 <udc_update_iface_desc+0x70>)
  4006d0:	6013      	str	r3, [r2, #0]
  4006d2:	e00f      	b.n	4006f4 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  4006d4:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4006d6:	4413      	add	r3, r2
  4006d8:	4635      	mov	r5, r6
	while (ptr_end_desc >
  4006da:	42a3      	cmp	r3, r4
  4006dc:	d20c      	bcs.n	4006f8 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4006de:	785a      	ldrb	r2, [r3, #1]
  4006e0:	2a04      	cmp	r2, #4
  4006e2:	d1f7      	bne.n	4006d4 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4006e4:	789a      	ldrb	r2, [r3, #2]
  4006e6:	4282      	cmp	r2, r0
  4006e8:	d1f4      	bne.n	4006d4 <udc_update_iface_desc+0x2c>
  4006ea:	78da      	ldrb	r2, [r3, #3]
  4006ec:	428a      	cmp	r2, r1
  4006ee:	d1f1      	bne.n	4006d4 <udc_update_iface_desc+0x2c>
  4006f0:	2d00      	cmp	r5, #0
  4006f2:	d1ec      	bne.n	4006ce <udc_update_iface_desc+0x26>
				return true; // Interface found
  4006f4:	2001      	movs	r0, #1
  4006f6:	e002      	b.n	4006fe <udc_update_iface_desc+0x56>
  4006f8:	4a07      	ldr	r2, [pc, #28]	; (400718 <udc_update_iface_desc+0x70>)
  4006fa:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  4006fc:	2000      	movs	r0, #0
}
  4006fe:	bc70      	pop	{r4, r5, r6}
  400700:	4770      	bx	lr
		return false;
  400702:	2000      	movs	r0, #0
  400704:	4770      	bx	lr
		return false;
  400706:	2000      	movs	r0, #0
  400708:	4770      	bx	lr
	return false; // Interface not found
  40070a:	2000      	movs	r0, #0
  40070c:	e7f7      	b.n	4006fe <udc_update_iface_desc+0x56>
  40070e:	bf00      	nop
  400710:	20000654 	.word	0x20000654
  400714:	20000658 	.word	0x20000658
  400718:	2000065c 	.word	0x2000065c

0040071c <udc_iface_disable>:
{
  40071c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400720:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  400722:	2100      	movs	r1, #0
  400724:	4b13      	ldr	r3, [pc, #76]	; (400774 <udc_iface_disable+0x58>)
  400726:	4798      	blx	r3
  400728:	4680      	mov	r8, r0
  40072a:	b910      	cbnz	r0, 400732 <udc_iface_disable+0x16>
}
  40072c:	4640      	mov	r0, r8
  40072e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400732:	4b11      	ldr	r3, [pc, #68]	; (400778 <udc_iface_disable+0x5c>)
  400734:	681b      	ldr	r3, [r3, #0]
  400736:	685b      	ldr	r3, [r3, #4]
  400738:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40073c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400740:	4798      	blx	r3
  400742:	4601      	mov	r1, r0
  400744:	4620      	mov	r0, r4
  400746:	4b0b      	ldr	r3, [pc, #44]	; (400774 <udc_iface_disable+0x58>)
  400748:	4798      	blx	r3
  40074a:	4680      	mov	r8, r0
  40074c:	2800      	cmp	r0, #0
  40074e:	d0ed      	beq.n	40072c <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400750:	4b0a      	ldr	r3, [pc, #40]	; (40077c <udc_iface_disable+0x60>)
  400752:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400754:	2605      	movs	r6, #5
  400756:	4d0a      	ldr	r5, [pc, #40]	; (400780 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  400758:	4f0a      	ldr	r7, [pc, #40]	; (400784 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40075a:	4631      	mov	r1, r6
  40075c:	4620      	mov	r0, r4
  40075e:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400760:	4604      	mov	r4, r0
  400762:	b110      	cbz	r0, 40076a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400764:	7880      	ldrb	r0, [r0, #2]
  400766:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400768:	e7f7      	b.n	40075a <udc_iface_disable+0x3e>
	udi_api->disable();
  40076a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40076e:	4798      	blx	r3
	return true;
  400770:	e7dc      	b.n	40072c <udc_iface_disable+0x10>
  400772:	bf00      	nop
  400774:	004006a9 	.word	0x004006a9
  400778:	20000658 	.word	0x20000658
  40077c:	2000065c 	.word	0x2000065c
  400780:	00400649 	.word	0x00400649
  400784:	004021bd 	.word	0x004021bd

00400788 <udc_iface_enable>:
{
  400788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40078c:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40078e:	4b10      	ldr	r3, [pc, #64]	; (4007d0 <udc_iface_enable+0x48>)
  400790:	4798      	blx	r3
  400792:	4603      	mov	r3, r0
  400794:	b1c8      	cbz	r0, 4007ca <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400796:	4b0f      	ldr	r3, [pc, #60]	; (4007d4 <udc_iface_enable+0x4c>)
  400798:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40079a:	2605      	movs	r6, #5
  40079c:	4d0e      	ldr	r5, [pc, #56]	; (4007d8 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40079e:	4f0f      	ldr	r7, [pc, #60]	; (4007dc <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4007a0:	4631      	mov	r1, r6
  4007a2:	4620      	mov	r0, r4
  4007a4:	47a8      	blx	r5
		if (NULL == ep_desc)
  4007a6:	4604      	mov	r4, r0
  4007a8:	b138      	cbz	r0, 4007ba <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4007aa:	8882      	ldrh	r2, [r0, #4]
  4007ac:	78c1      	ldrb	r1, [r0, #3]
  4007ae:	7880      	ldrb	r0, [r0, #2]
  4007b0:	47b8      	blx	r7
  4007b2:	4603      	mov	r3, r0
  4007b4:	2800      	cmp	r0, #0
  4007b6:	d1f3      	bne.n	4007a0 <udc_iface_enable+0x18>
  4007b8:	e007      	b.n	4007ca <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4007ba:	4b09      	ldr	r3, [pc, #36]	; (4007e0 <udc_iface_enable+0x58>)
  4007bc:	681b      	ldr	r3, [r3, #0]
  4007be:	685b      	ldr	r3, [r3, #4]
  4007c0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  4007c4:	681b      	ldr	r3, [r3, #0]
  4007c6:	4798      	blx	r3
  4007c8:	4603      	mov	r3, r0
}
  4007ca:	4618      	mov	r0, r3
  4007cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007d0:	004006a9 	.word	0x004006a9
  4007d4:	2000065c 	.word	0x2000065c
  4007d8:	00400649 	.word	0x00400649
  4007dc:	004020c5 	.word	0x004020c5
  4007e0:	20000658 	.word	0x20000658

004007e4 <udc_reset>:
{
  4007e4:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  4007e6:	4b0d      	ldr	r3, [pc, #52]	; (40081c <udc_reset+0x38>)
  4007e8:	781b      	ldrb	r3, [r3, #0]
  4007ea:	b183      	cbz	r3, 40080e <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007ec:	4b0c      	ldr	r3, [pc, #48]	; (400820 <udc_reset+0x3c>)
  4007ee:	681b      	ldr	r3, [r3, #0]
  4007f0:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4007f2:	791b      	ldrb	r3, [r3, #4]
  4007f4:	b15b      	cbz	r3, 40080e <udc_reset+0x2a>
  4007f6:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4007f8:	4e0a      	ldr	r6, [pc, #40]	; (400824 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007fa:	4d09      	ldr	r5, [pc, #36]	; (400820 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4007fc:	4620      	mov	r0, r4
  4007fe:	47b0      	blx	r6
				iface_num++) {
  400800:	3401      	adds	r4, #1
  400802:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400804:	682b      	ldr	r3, [r5, #0]
  400806:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400808:	791b      	ldrb	r3, [r3, #4]
  40080a:	42a3      	cmp	r3, r4
  40080c:	d8f6      	bhi.n	4007fc <udc_reset+0x18>
	udc_num_configuration = 0;
  40080e:	2200      	movs	r2, #0
  400810:	4b02      	ldr	r3, [pc, #8]	; (40081c <udc_reset+0x38>)
  400812:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  400814:	2201      	movs	r2, #1
  400816:	4b04      	ldr	r3, [pc, #16]	; (400828 <udc_reset+0x44>)
  400818:	801a      	strh	r2, [r3, #0]
  40081a:	bd70      	pop	{r4, r5, r6, pc}
  40081c:	20000654 	.word	0x20000654
  400820:	20000658 	.word	0x20000658
  400824:	0040071d 	.word	0x0040071d
  400828:	2000064a 	.word	0x2000064a

0040082c <udc_sof_notify>:
{
  40082c:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  40082e:	4b0d      	ldr	r3, [pc, #52]	; (400864 <udc_sof_notify+0x38>)
  400830:	781b      	ldrb	r3, [r3, #0]
  400832:	b1b3      	cbz	r3, 400862 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400834:	4b0c      	ldr	r3, [pc, #48]	; (400868 <udc_sof_notify+0x3c>)
  400836:	681b      	ldr	r3, [r3, #0]
  400838:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  40083a:	7912      	ldrb	r2, [r2, #4]
  40083c:	b18a      	cbz	r2, 400862 <udc_sof_notify+0x36>
  40083e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400840:	4d09      	ldr	r5, [pc, #36]	; (400868 <udc_sof_notify+0x3c>)
  400842:	e006      	b.n	400852 <udc_sof_notify+0x26>
				iface_num++) {
  400844:	3401      	adds	r4, #1
  400846:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400848:	682b      	ldr	r3, [r5, #0]
  40084a:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  40084c:	7912      	ldrb	r2, [r2, #4]
  40084e:	42a2      	cmp	r2, r4
  400850:	d907      	bls.n	400862 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400852:	685b      	ldr	r3, [r3, #4]
  400854:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400858:	691b      	ldr	r3, [r3, #16]
  40085a:	2b00      	cmp	r3, #0
  40085c:	d0f2      	beq.n	400844 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  40085e:	4798      	blx	r3
  400860:	e7f0      	b.n	400844 <udc_sof_notify+0x18>
  400862:	bd38      	pop	{r3, r4, r5, pc}
  400864:	20000654 	.word	0x20000654
  400868:	20000658 	.word	0x20000658

0040086c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  40086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  40086e:	4b96      	ldr	r3, [pc, #600]	; (400ac8 <udc_process_setup+0x25c>)
  400870:	2200      	movs	r2, #0
  400872:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400874:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400876:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400878:	781b      	ldrb	r3, [r3, #0]
  40087a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40087e:	d114      	bne.n	4008aa <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400880:	f013 0f60 	tst.w	r3, #96	; 0x60
  400884:	f000 80b8 	beq.w	4009f8 <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400888:	4b8f      	ldr	r3, [pc, #572]	; (400ac8 <udc_process_setup+0x25c>)
  40088a:	781b      	ldrb	r3, [r3, #0]
  40088c:	f003 031f 	and.w	r3, r3, #31
  400890:	2b01      	cmp	r3, #1
  400892:	f000 818b 	beq.w	400bac <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400896:	4b8c      	ldr	r3, [pc, #560]	; (400ac8 <udc_process_setup+0x25c>)
  400898:	781b      	ldrb	r3, [r3, #0]
  40089a:	f003 031f 	and.w	r3, r3, #31
  40089e:	2b02      	cmp	r3, #2
  4008a0:	f000 81ac 	beq.w	400bfc <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  4008a4:	2300      	movs	r3, #0
#endif
}
  4008a6:	4618      	mov	r0, r3
  4008a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  4008aa:	4a87      	ldr	r2, [pc, #540]	; (400ac8 <udc_process_setup+0x25c>)
  4008ac:	88d2      	ldrh	r2, [r2, #6]
  4008ae:	2a00      	cmp	r2, #0
  4008b0:	f000 81cd 	beq.w	400c4e <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  4008b4:	f013 0f60 	tst.w	r3, #96	; 0x60
  4008b8:	d1e6      	bne.n	400888 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4008ba:	f013 031f 	ands.w	r3, r3, #31
  4008be:	d106      	bne.n	4008ce <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  4008c0:	4981      	ldr	r1, [pc, #516]	; (400ac8 <udc_process_setup+0x25c>)
  4008c2:	7849      	ldrb	r1, [r1, #1]
  4008c4:	2906      	cmp	r1, #6
  4008c6:	d013      	beq.n	4008f0 <udc_process_setup+0x84>
  4008c8:	2908      	cmp	r1, #8
  4008ca:	d058      	beq.n	40097e <udc_process_setup+0x112>
  4008cc:	b149      	cbz	r1, 4008e2 <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4008ce:	2b01      	cmp	r3, #1
  4008d0:	d05c      	beq.n	40098c <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4008d2:	2b02      	cmp	r3, #2
  4008d4:	d1d8      	bne.n	400888 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  4008d6:	4b7c      	ldr	r3, [pc, #496]	; (400ac8 <udc_process_setup+0x25c>)
  4008d8:	785b      	ldrb	r3, [r3, #1]
  4008da:	2b00      	cmp	r3, #0
  4008dc:	d07e      	beq.n	4009dc <udc_process_setup+0x170>
	return false;
  4008de:	2300      	movs	r3, #0
  4008e0:	e160      	b.n	400ba4 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4008e2:	2a02      	cmp	r2, #2
  4008e4:	d1d0      	bne.n	400888 <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4008e6:	2102      	movs	r1, #2
  4008e8:	4878      	ldr	r0, [pc, #480]	; (400acc <udc_process_setup+0x260>)
  4008ea:	4b79      	ldr	r3, [pc, #484]	; (400ad0 <udc_process_setup+0x264>)
  4008ec:	4798      	blx	r3
  4008ee:	e09f      	b.n	400a30 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4008f0:	4b75      	ldr	r3, [pc, #468]	; (400ac8 <udc_process_setup+0x25c>)
  4008f2:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4008f4:	0a13      	lsrs	r3, r2, #8
  4008f6:	3b01      	subs	r3, #1
  4008f8:	2b0e      	cmp	r3, #14
  4008fa:	f200 8150 	bhi.w	400b9e <udc_process_setup+0x332>
  4008fe:	e8df f013 	tbh	[pc, r3, lsl #1]
  400902:	000f      	.short	0x000f
  400904:	0036001c 	.word	0x0036001c
  400908:	014e014e 	.word	0x014e014e
  40090c:	014e014e 	.word	0x014e014e
  400910:	014e014e 	.word	0x014e014e
  400914:	014e014e 	.word	0x014e014e
  400918:	014e014e 	.word	0x014e014e
  40091c:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  400920:	4b6c      	ldr	r3, [pc, #432]	; (400ad4 <udc_process_setup+0x268>)
  400922:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  400924:	7801      	ldrb	r1, [r0, #0]
  400926:	4b6a      	ldr	r3, [pc, #424]	; (400ad0 <udc_process_setup+0x264>)
  400928:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  40092a:	4b67      	ldr	r3, [pc, #412]	; (400ac8 <udc_process_setup+0x25c>)
  40092c:	88da      	ldrh	r2, [r3, #6]
  40092e:	899b      	ldrh	r3, [r3, #12]
  400930:	4293      	cmp	r3, r2
  400932:	d97d      	bls.n	400a30 <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400934:	4b64      	ldr	r3, [pc, #400]	; (400ac8 <udc_process_setup+0x25c>)
  400936:	819a      	strh	r2, [r3, #12]
  400938:	e07a      	b.n	400a30 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  40093a:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  40093c:	4b65      	ldr	r3, [pc, #404]	; (400ad4 <udc_process_setup+0x268>)
  40093e:	681b      	ldr	r3, [r3, #0]
  400940:	7c5b      	ldrb	r3, [r3, #17]
  400942:	4293      	cmp	r3, r2
  400944:	d9a0      	bls.n	400888 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  400946:	4b63      	ldr	r3, [pc, #396]	; (400ad4 <udc_process_setup+0x268>)
  400948:	685b      	ldr	r3, [r3, #4]
  40094a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  40094e:	8841      	ldrh	r1, [r0, #2]
  400950:	4b5f      	ldr	r3, [pc, #380]	; (400ad0 <udc_process_setup+0x264>)
  400952:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400954:	4b5c      	ldr	r3, [pc, #368]	; (400ac8 <udc_process_setup+0x25c>)
  400956:	689b      	ldr	r3, [r3, #8]
  400958:	2202      	movs	r2, #2
  40095a:	705a      	strb	r2, [r3, #1]
  40095c:	e7e5      	b.n	40092a <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  40095e:	4b5d      	ldr	r3, [pc, #372]	; (400ad4 <udc_process_setup+0x268>)
  400960:	6898      	ldr	r0, [r3, #8]
  400962:	2800      	cmp	r0, #0
  400964:	d090      	beq.n	400888 <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400966:	8841      	ldrh	r1, [r0, #2]
  400968:	4b59      	ldr	r3, [pc, #356]	; (400ad0 <udc_process_setup+0x264>)
  40096a:	4798      	blx	r3
  40096c:	e7dd      	b.n	40092a <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  40096e:	f012 0fff 	tst.w	r2, #255	; 0xff
  400972:	d189      	bne.n	400888 <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400974:	2104      	movs	r1, #4
  400976:	4858      	ldr	r0, [pc, #352]	; (400ad8 <udc_process_setup+0x26c>)
  400978:	4b55      	ldr	r3, [pc, #340]	; (400ad0 <udc_process_setup+0x264>)
  40097a:	4798      	blx	r3
  40097c:	e7d5      	b.n	40092a <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  40097e:	2a01      	cmp	r2, #1
  400980:	d182      	bne.n	400888 <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400982:	2101      	movs	r1, #1
  400984:	4855      	ldr	r0, [pc, #340]	; (400adc <udc_process_setup+0x270>)
  400986:	4b52      	ldr	r3, [pc, #328]	; (400ad0 <udc_process_setup+0x264>)
  400988:	4798      	blx	r3
  40098a:	e051      	b.n	400a30 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  40098c:	494e      	ldr	r1, [pc, #312]	; (400ac8 <udc_process_setup+0x25c>)
  40098e:	7849      	ldrb	r1, [r1, #1]
  400990:	290a      	cmp	r1, #10
  400992:	d19e      	bne.n	4008d2 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400994:	2a01      	cmp	r2, #1
  400996:	f47f af77 	bne.w	400888 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  40099a:	4b50      	ldr	r3, [pc, #320]	; (400adc <udc_process_setup+0x270>)
  40099c:	781b      	ldrb	r3, [r3, #0]
  40099e:	2b00      	cmp	r3, #0
  4009a0:	f43f af72 	beq.w	400888 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4009a4:	4b48      	ldr	r3, [pc, #288]	; (400ac8 <udc_process_setup+0x25c>)
  4009a6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4009a8:	4b4d      	ldr	r3, [pc, #308]	; (400ae0 <udc_process_setup+0x274>)
  4009aa:	681d      	ldr	r5, [r3, #0]
  4009ac:	682b      	ldr	r3, [r5, #0]
  4009ae:	791b      	ldrb	r3, [r3, #4]
  4009b0:	42a3      	cmp	r3, r4
  4009b2:	f67f af69 	bls.w	400888 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  4009b6:	2100      	movs	r1, #0
  4009b8:	4620      	mov	r0, r4
  4009ba:	4b4a      	ldr	r3, [pc, #296]	; (400ae4 <udc_process_setup+0x278>)
  4009bc:	4798      	blx	r3
  4009be:	2800      	cmp	r0, #0
  4009c0:	f43f af62 	beq.w	400888 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4009c4:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  4009c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4009ca:	68db      	ldr	r3, [r3, #12]
  4009cc:	4798      	blx	r3
  4009ce:	4b46      	ldr	r3, [pc, #280]	; (400ae8 <udc_process_setup+0x27c>)
  4009d0:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  4009d2:	2101      	movs	r1, #1
  4009d4:	4618      	mov	r0, r3
  4009d6:	4b3e      	ldr	r3, [pc, #248]	; (400ad0 <udc_process_setup+0x264>)
  4009d8:	4798      	blx	r3
  4009da:	e029      	b.n	400a30 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4009dc:	2a02      	cmp	r2, #2
  4009de:	f47f af53 	bne.w	400888 <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4009e2:	4b39      	ldr	r3, [pc, #228]	; (400ac8 <udc_process_setup+0x25c>)
  4009e4:	7918      	ldrb	r0, [r3, #4]
  4009e6:	4b41      	ldr	r3, [pc, #260]	; (400aec <udc_process_setup+0x280>)
  4009e8:	4798      	blx	r3
  4009ea:	4b41      	ldr	r3, [pc, #260]	; (400af0 <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  4009ec:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4009ee:	2102      	movs	r1, #2
  4009f0:	4618      	mov	r0, r3
  4009f2:	4b37      	ldr	r3, [pc, #220]	; (400ad0 <udc_process_setup+0x264>)
  4009f4:	4798      	blx	r3
  4009f6:	e01b      	b.n	400a30 <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4009f8:	f013 031f 	ands.w	r3, r3, #31
  4009fc:	f040 8082 	bne.w	400b04 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  400a00:	4a31      	ldr	r2, [pc, #196]	; (400ac8 <udc_process_setup+0x25c>)
  400a02:	7852      	ldrb	r2, [r2, #1]
  400a04:	3a01      	subs	r2, #1
  400a06:	2a08      	cmp	r2, #8
  400a08:	d87c      	bhi.n	400b04 <udc_process_setup+0x298>
  400a0a:	e8df f012 	tbh	[pc, r2, lsl #1]
  400a0e:	0013      	.short	0x0013
  400a10:	00ca007b 	.word	0x00ca007b
  400a14:	0009007b 	.word	0x0009007b
  400a18:	007b007b 	.word	0x007b007b
  400a1c:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  400a20:	4b29      	ldr	r3, [pc, #164]	; (400ac8 <udc_process_setup+0x25c>)
  400a22:	88db      	ldrh	r3, [r3, #6]
  400a24:	2b00      	cmp	r3, #0
  400a26:	f47f af2f 	bne.w	400888 <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  400a2a:	4a32      	ldr	r2, [pc, #200]	; (400af4 <udc_process_setup+0x288>)
  400a2c:	4b26      	ldr	r3, [pc, #152]	; (400ac8 <udc_process_setup+0x25c>)
  400a2e:	611a      	str	r2, [r3, #16]
			return true;
  400a30:	2301      	movs	r3, #1
  400a32:	e738      	b.n	4008a6 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  400a34:	4b24      	ldr	r3, [pc, #144]	; (400ac8 <udc_process_setup+0x25c>)
  400a36:	88db      	ldrh	r3, [r3, #6]
  400a38:	2b00      	cmp	r3, #0
  400a3a:	f47f af25 	bne.w	400888 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400a3e:	4b22      	ldr	r3, [pc, #136]	; (400ac8 <udc_process_setup+0x25c>)
  400a40:	885b      	ldrh	r3, [r3, #2]
  400a42:	2b01      	cmp	r3, #1
  400a44:	f47f af20 	bne.w	400888 <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400a48:	4a20      	ldr	r2, [pc, #128]	; (400acc <udc_process_setup+0x260>)
  400a4a:	8813      	ldrh	r3, [r2, #0]
  400a4c:	f023 0302 	bic.w	r3, r3, #2
  400a50:	8013      	strh	r3, [r2, #0]
  400a52:	e7ed      	b.n	400a30 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  400a54:	4b1c      	ldr	r3, [pc, #112]	; (400ac8 <udc_process_setup+0x25c>)
  400a56:	88db      	ldrh	r3, [r3, #6]
  400a58:	2b00      	cmp	r3, #0
  400a5a:	f47f af15 	bne.w	400888 <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400a5e:	4b26      	ldr	r3, [pc, #152]	; (400af8 <udc_process_setup+0x28c>)
  400a60:	4798      	blx	r3
  400a62:	2800      	cmp	r0, #0
  400a64:	f43f af10 	beq.w	400888 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a68:	4b17      	ldr	r3, [pc, #92]	; (400ac8 <udc_process_setup+0x25c>)
  400a6a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400a6c:	4b19      	ldr	r3, [pc, #100]	; (400ad4 <udc_process_setup+0x268>)
  400a6e:	681b      	ldr	r3, [r3, #0]
  400a70:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a72:	429a      	cmp	r2, r3
  400a74:	f73f af08 	bgt.w	400888 <udc_process_setup+0x1c>
	udc_reset();
  400a78:	4b20      	ldr	r3, [pc, #128]	; (400afc <udc_process_setup+0x290>)
  400a7a:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400a7c:	4b12      	ldr	r3, [pc, #72]	; (400ac8 <udc_process_setup+0x25c>)
  400a7e:	789b      	ldrb	r3, [r3, #2]
  400a80:	4a16      	ldr	r2, [pc, #88]	; (400adc <udc_process_setup+0x270>)
  400a82:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400a84:	2b00      	cmp	r3, #0
  400a86:	d0d3      	beq.n	400a30 <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400a88:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400a8c:	3b01      	subs	r3, #1
  400a8e:	4a11      	ldr	r2, [pc, #68]	; (400ad4 <udc_process_setup+0x268>)
  400a90:	6852      	ldr	r2, [r2, #4]
  400a92:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400a96:	4912      	ldr	r1, [pc, #72]	; (400ae0 <udc_process_setup+0x274>)
  400a98:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400a9e:	791b      	ldrb	r3, [r3, #4]
  400aa0:	2b00      	cmp	r3, #0
  400aa2:	d0c5      	beq.n	400a30 <udc_process_setup+0x1c4>
  400aa4:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400aa6:	4626      	mov	r6, r4
  400aa8:	4d15      	ldr	r5, [pc, #84]	; (400b00 <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400aaa:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400aac:	4631      	mov	r1, r6
  400aae:	4620      	mov	r0, r4
  400ab0:	47a8      	blx	r5
  400ab2:	2800      	cmp	r0, #0
  400ab4:	f43f aee8 	beq.w	400888 <udc_process_setup+0x1c>
			iface_num++) {
  400ab8:	3401      	adds	r4, #1
  400aba:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400abc:	683b      	ldr	r3, [r7, #0]
  400abe:	681b      	ldr	r3, [r3, #0]
  400ac0:	791b      	ldrb	r3, [r3, #4]
  400ac2:	42a3      	cmp	r3, r4
  400ac4:	d8f2      	bhi.n	400aac <udc_process_setup+0x240>
  400ac6:	e7b3      	b.n	400a30 <udc_process_setup+0x1c4>
  400ac8:	20002734 	.word	0x20002734
  400acc:	2000064a 	.word	0x2000064a
  400ad0:	004020b9 	.word	0x004020b9
  400ad4:	20000028 	.word	0x20000028
  400ad8:	2000009c 	.word	0x2000009c
  400adc:	20000654 	.word	0x20000654
  400ae0:	20000658 	.word	0x20000658
  400ae4:	004006a9 	.word	0x004006a9
  400ae8:	20000650 	.word	0x20000650
  400aec:	00402215 	.word	0x00402215
  400af0:	2000064c 	.word	0x2000064c
  400af4:	00400691 	.word	0x00400691
  400af8:	00402089 	.word	0x00402089
  400afc:	004007e5 	.word	0x004007e5
  400b00:	00400789 	.word	0x00400789
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400b04:	2b01      	cmp	r3, #1
  400b06:	d00a      	beq.n	400b1e <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400b08:	2b02      	cmp	r3, #2
  400b0a:	f47f aebd 	bne.w	400888 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400b0e:	4b52      	ldr	r3, [pc, #328]	; (400c58 <udc_process_setup+0x3ec>)
  400b10:	785b      	ldrb	r3, [r3, #1]
  400b12:	2b01      	cmp	r3, #1
  400b14:	d020      	beq.n	400b58 <udc_process_setup+0x2ec>
  400b16:	2b03      	cmp	r3, #3
  400b18:	d02e      	beq.n	400b78 <udc_process_setup+0x30c>
	return false;
  400b1a:	2300      	movs	r3, #0
  400b1c:	e042      	b.n	400ba4 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400b1e:	4a4e      	ldr	r2, [pc, #312]	; (400c58 <udc_process_setup+0x3ec>)
  400b20:	7852      	ldrb	r2, [r2, #1]
  400b22:	2a0b      	cmp	r2, #11
  400b24:	d1f0      	bne.n	400b08 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400b26:	4b4c      	ldr	r3, [pc, #304]	; (400c58 <udc_process_setup+0x3ec>)
  400b28:	88db      	ldrh	r3, [r3, #6]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	f47f aeac 	bne.w	400888 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400b30:	4b4a      	ldr	r3, [pc, #296]	; (400c5c <udc_process_setup+0x3f0>)
  400b32:	781b      	ldrb	r3, [r3, #0]
  400b34:	2b00      	cmp	r3, #0
  400b36:	f43f aea7 	beq.w	400888 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b3a:	4b47      	ldr	r3, [pc, #284]	; (400c58 <udc_process_setup+0x3ec>)
  400b3c:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400b3e:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400b40:	4620      	mov	r0, r4
  400b42:	4b47      	ldr	r3, [pc, #284]	; (400c60 <udc_process_setup+0x3f4>)
  400b44:	4798      	blx	r3
  400b46:	2800      	cmp	r0, #0
  400b48:	f43f ae9e 	beq.w	400888 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400b4c:	b2e9      	uxtb	r1, r5
  400b4e:	4620      	mov	r0, r4
  400b50:	4b44      	ldr	r3, [pc, #272]	; (400c64 <udc_process_setup+0x3f8>)
  400b52:	4798      	blx	r3
  400b54:	4603      	mov	r3, r0
  400b56:	e025      	b.n	400ba4 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400b58:	4b3f      	ldr	r3, [pc, #252]	; (400c58 <udc_process_setup+0x3ec>)
  400b5a:	88db      	ldrh	r3, [r3, #6]
  400b5c:	2b00      	cmp	r3, #0
  400b5e:	f47f ae93 	bne.w	400888 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b62:	4b3d      	ldr	r3, [pc, #244]	; (400c58 <udc_process_setup+0x3ec>)
  400b64:	885b      	ldrh	r3, [r3, #2]
  400b66:	2b00      	cmp	r3, #0
  400b68:	f47f ae8e 	bne.w	400888 <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b6c:	4b3a      	ldr	r3, [pc, #232]	; (400c58 <udc_process_setup+0x3ec>)
  400b6e:	7918      	ldrb	r0, [r3, #4]
  400b70:	4b3d      	ldr	r3, [pc, #244]	; (400c68 <udc_process_setup+0x3fc>)
  400b72:	4798      	blx	r3
  400b74:	4603      	mov	r3, r0
  400b76:	e015      	b.n	400ba4 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400b78:	4b37      	ldr	r3, [pc, #220]	; (400c58 <udc_process_setup+0x3ec>)
  400b7a:	88db      	ldrh	r3, [r3, #6]
  400b7c:	2b00      	cmp	r3, #0
  400b7e:	f47f ae83 	bne.w	400888 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b82:	4b35      	ldr	r3, [pc, #212]	; (400c58 <udc_process_setup+0x3ec>)
  400b84:	885b      	ldrh	r3, [r3, #2]
  400b86:	2b00      	cmp	r3, #0
  400b88:	f47f ae7e 	bne.w	400888 <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b8c:	4c32      	ldr	r4, [pc, #200]	; (400c58 <udc_process_setup+0x3ec>)
  400b8e:	7920      	ldrb	r0, [r4, #4]
  400b90:	4b36      	ldr	r3, [pc, #216]	; (400c6c <udc_process_setup+0x400>)
  400b92:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b94:	7920      	ldrb	r0, [r4, #4]
  400b96:	4b36      	ldr	r3, [pc, #216]	; (400c70 <udc_process_setup+0x404>)
  400b98:	4798      	blx	r3
  400b9a:	4603      	mov	r3, r0
  400b9c:	e002      	b.n	400ba4 <udc_process_setup+0x338>
		return false;
  400b9e:	2300      	movs	r3, #0
  400ba0:	e000      	b.n	400ba4 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400ba2:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400ba4:	2b00      	cmp	r3, #0
  400ba6:	f47f ae7e 	bne.w	4008a6 <udc_process_setup+0x3a>
  400baa:	e66d      	b.n	400888 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400bac:	4b2b      	ldr	r3, [pc, #172]	; (400c5c <udc_process_setup+0x3f0>)
  400bae:	781b      	ldrb	r3, [r3, #0]
  400bb0:	2b00      	cmp	r3, #0
  400bb2:	d04e      	beq.n	400c52 <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400bb4:	4b28      	ldr	r3, [pc, #160]	; (400c58 <udc_process_setup+0x3ec>)
  400bb6:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400bb8:	4b2e      	ldr	r3, [pc, #184]	; (400c74 <udc_process_setup+0x408>)
  400bba:	681d      	ldr	r5, [r3, #0]
  400bbc:	682b      	ldr	r3, [r5, #0]
  400bbe:	791b      	ldrb	r3, [r3, #4]
  400bc0:	42a3      	cmp	r3, r4
  400bc2:	d801      	bhi.n	400bc8 <udc_process_setup+0x35c>
	return false;
  400bc4:	2300      	movs	r3, #0
  400bc6:	e66e      	b.n	4008a6 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400bc8:	2100      	movs	r1, #0
  400bca:	4620      	mov	r0, r4
  400bcc:	4b2a      	ldr	r3, [pc, #168]	; (400c78 <udc_process_setup+0x40c>)
  400bce:	4798      	blx	r3
  400bd0:	2800      	cmp	r0, #0
  400bd2:	f43f ae60 	beq.w	400896 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400bd6:	686b      	ldr	r3, [r5, #4]
  400bd8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bdc:	68eb      	ldr	r3, [r5, #12]
  400bde:	4798      	blx	r3
  400be0:	4601      	mov	r1, r0
  400be2:	4620      	mov	r0, r4
  400be4:	4b24      	ldr	r3, [pc, #144]	; (400c78 <udc_process_setup+0x40c>)
  400be6:	4798      	blx	r3
  400be8:	2800      	cmp	r0, #0
  400bea:	f43f ae54 	beq.w	400896 <udc_process_setup+0x2a>
	return udi_api->setup();
  400bee:	68ab      	ldr	r3, [r5, #8]
  400bf0:	4798      	blx	r3
		if (udc_req_iface()) {
  400bf2:	4603      	mov	r3, r0
  400bf4:	2800      	cmp	r0, #0
  400bf6:	f47f ae56 	bne.w	4008a6 <udc_process_setup+0x3a>
  400bfa:	e64c      	b.n	400896 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400bfc:	4b17      	ldr	r3, [pc, #92]	; (400c5c <udc_process_setup+0x3f0>)
  400bfe:	781b      	ldrb	r3, [r3, #0]
  400c00:	b30b      	cbz	r3, 400c46 <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c02:	4b1c      	ldr	r3, [pc, #112]	; (400c74 <udc_process_setup+0x408>)
  400c04:	681a      	ldr	r2, [r3, #0]
  400c06:	6813      	ldr	r3, [r2, #0]
  400c08:	791b      	ldrb	r3, [r3, #4]
  400c0a:	b1f3      	cbz	r3, 400c4a <udc_process_setup+0x3de>
  400c0c:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400c0e:	4e1a      	ldr	r6, [pc, #104]	; (400c78 <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c10:	4f18      	ldr	r7, [pc, #96]	; (400c74 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400c12:	6853      	ldr	r3, [r2, #4]
  400c14:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400c18:	68eb      	ldr	r3, [r5, #12]
  400c1a:	4798      	blx	r3
  400c1c:	4601      	mov	r1, r0
  400c1e:	4620      	mov	r0, r4
  400c20:	47b0      	blx	r6
  400c22:	4603      	mov	r3, r0
  400c24:	2800      	cmp	r0, #0
  400c26:	f43f ae3e 	beq.w	4008a6 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400c2a:	68ab      	ldr	r3, [r5, #8]
  400c2c:	4798      	blx	r3
  400c2e:	4603      	mov	r3, r0
  400c30:	2800      	cmp	r0, #0
  400c32:	f47f ae38 	bne.w	4008a6 <udc_process_setup+0x3a>
			iface_num++) {
  400c36:	3401      	adds	r4, #1
  400c38:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c3a:	683a      	ldr	r2, [r7, #0]
  400c3c:	6811      	ldr	r1, [r2, #0]
  400c3e:	7909      	ldrb	r1, [r1, #4]
  400c40:	42a1      	cmp	r1, r4
  400c42:	d8e6      	bhi.n	400c12 <udc_process_setup+0x3a6>
  400c44:	e62f      	b.n	4008a6 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400c46:	2300      	movs	r3, #0
  400c48:	e62d      	b.n	4008a6 <udc_process_setup+0x3a>
	return false;
  400c4a:	2300      	movs	r3, #0
  400c4c:	e62b      	b.n	4008a6 <udc_process_setup+0x3a>
			return false; // Error from USB host
  400c4e:	2300      	movs	r3, #0
  400c50:	e629      	b.n	4008a6 <udc_process_setup+0x3a>
	return false;
  400c52:	2300      	movs	r3, #0
  400c54:	e627      	b.n	4008a6 <udc_process_setup+0x3a>
  400c56:	bf00      	nop
  400c58:	20002734 	.word	0x20002734
  400c5c:	20000654 	.word	0x20000654
  400c60:	0040071d 	.word	0x0040071d
  400c64:	00400789 	.word	0x00400789
  400c68:	00402335 	.word	0x00402335
  400c6c:	00402589 	.word	0x00402589
  400c70:	00402255 	.word	0x00402255
  400c74:	20000658 	.word	0x20000658
  400c78:	004006a9 	.word	0x004006a9

00400c7c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400c7c:	6301      	str	r1, [r0, #48]	; 0x30
  400c7e:	4770      	bx	lr

00400c80 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400c80:	6341      	str	r1, [r0, #52]	; 0x34
  400c82:	4770      	bx	lr

00400c84 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c84:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c86:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c8a:	d039      	beq.n	400d00 <pio_set_peripheral+0x7c>
  400c8c:	d813      	bhi.n	400cb6 <pio_set_peripheral+0x32>
  400c8e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c92:	d025      	beq.n	400ce0 <pio_set_peripheral+0x5c>
  400c94:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c98:	d10a      	bne.n	400cb0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c9a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c9c:	4313      	orrs	r3, r2
  400c9e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ca0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ca2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ca4:	400b      	ands	r3, r1
  400ca6:	ea23 0302 	bic.w	r3, r3, r2
  400caa:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400cac:	6042      	str	r2, [r0, #4]
  400cae:	4770      	bx	lr
	switch (ul_type) {
  400cb0:	2900      	cmp	r1, #0
  400cb2:	d1fb      	bne.n	400cac <pio_set_peripheral+0x28>
  400cb4:	4770      	bx	lr
  400cb6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400cba:	d020      	beq.n	400cfe <pio_set_peripheral+0x7a>
  400cbc:	d809      	bhi.n	400cd2 <pio_set_peripheral+0x4e>
  400cbe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400cc2:	d1f3      	bne.n	400cac <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400cc4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400cc6:	4313      	orrs	r3, r2
  400cc8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400cca:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ccc:	4313      	orrs	r3, r2
  400cce:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400cd0:	e7ec      	b.n	400cac <pio_set_peripheral+0x28>
	switch (ul_type) {
  400cd2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400cd6:	d012      	beq.n	400cfe <pio_set_peripheral+0x7a>
  400cd8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400cdc:	d00f      	beq.n	400cfe <pio_set_peripheral+0x7a>
  400cde:	e7e5      	b.n	400cac <pio_set_peripheral+0x28>
{
  400ce0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ce2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ce4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ce6:	43d3      	mvns	r3, r2
  400ce8:	4021      	ands	r1, r4
  400cea:	461c      	mov	r4, r3
  400cec:	4019      	ands	r1, r3
  400cee:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400cf0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400cf2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400cf4:	400b      	ands	r3, r1
  400cf6:	4023      	ands	r3, r4
  400cf8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400cfa:	6042      	str	r2, [r0, #4]
}
  400cfc:	bc10      	pop	{r4}
  400cfe:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d02:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400d04:	400b      	ands	r3, r1
  400d06:	ea23 0302 	bic.w	r3, r3, r2
  400d0a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d0c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d0e:	4313      	orrs	r3, r2
  400d10:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d12:	e7cb      	b.n	400cac <pio_set_peripheral+0x28>

00400d14 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400d14:	b410      	push	{r4}
  400d16:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d18:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d1a:	b944      	cbnz	r4, 400d2e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400d1c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400d1e:	b143      	cbz	r3, 400d32 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  400d20:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400d22:	b942      	cbnz	r2, 400d36 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  400d24:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400d26:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d28:	6001      	str	r1, [r0, #0]
}
  400d2a:	bc10      	pop	{r4}
  400d2c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400d2e:	6641      	str	r1, [r0, #100]	; 0x64
  400d30:	e7f5      	b.n	400d1e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400d32:	6541      	str	r1, [r0, #84]	; 0x54
  400d34:	e7f5      	b.n	400d22 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400d36:	6301      	str	r1, [r0, #48]	; 0x30
  400d38:	e7f5      	b.n	400d26 <pio_set_output+0x12>

00400d3a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400d3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400d3c:	4770      	bx	lr

00400d3e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400d3e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400d40:	4770      	bx	lr
	...

00400d44 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d48:	4681      	mov	r9, r0
  400d4a:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d4c:	4b12      	ldr	r3, [pc, #72]	; (400d98 <pio_handler_process+0x54>)
  400d4e:	4798      	blx	r3
  400d50:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400d52:	4648      	mov	r0, r9
  400d54:	4b11      	ldr	r3, [pc, #68]	; (400d9c <pio_handler_process+0x58>)
  400d56:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400d58:	4005      	ands	r5, r0
  400d5a:	d013      	beq.n	400d84 <pio_handler_process+0x40>
  400d5c:	4c10      	ldr	r4, [pc, #64]	; (400da0 <pio_handler_process+0x5c>)
  400d5e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400d62:	e003      	b.n	400d6c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d64:	42b4      	cmp	r4, r6
  400d66:	d00d      	beq.n	400d84 <pio_handler_process+0x40>
  400d68:	3410      	adds	r4, #16
		while (status != 0) {
  400d6a:	b15d      	cbz	r5, 400d84 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400d6c:	6820      	ldr	r0, [r4, #0]
  400d6e:	42b8      	cmp	r0, r7
  400d70:	d1f8      	bne.n	400d64 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d72:	6861      	ldr	r1, [r4, #4]
  400d74:	4229      	tst	r1, r5
  400d76:	d0f5      	beq.n	400d64 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d78:	68e3      	ldr	r3, [r4, #12]
  400d7a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400d7c:	6863      	ldr	r3, [r4, #4]
  400d7e:	ea25 0503 	bic.w	r5, r5, r3
  400d82:	e7ef      	b.n	400d64 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400d84:	4b07      	ldr	r3, [pc, #28]	; (400da4 <pio_handler_process+0x60>)
  400d86:	681b      	ldr	r3, [r3, #0]
  400d88:	b123      	cbz	r3, 400d94 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400d8a:	4b07      	ldr	r3, [pc, #28]	; (400da8 <pio_handler_process+0x64>)
  400d8c:	681b      	ldr	r3, [r3, #0]
  400d8e:	b10b      	cbz	r3, 400d94 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400d90:	4648      	mov	r0, r9
  400d92:	4798      	blx	r3
  400d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d98:	00400d3b 	.word	0x00400d3b
  400d9c:	00400d3f 	.word	0x00400d3f
  400da0:	20000660 	.word	0x20000660
  400da4:	20002730 	.word	0x20002730
  400da8:	200006d0 	.word	0x200006d0

00400dac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400dac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400dae:	210b      	movs	r1, #11
  400db0:	4801      	ldr	r0, [pc, #4]	; (400db8 <PIOA_Handler+0xc>)
  400db2:	4b02      	ldr	r3, [pc, #8]	; (400dbc <PIOA_Handler+0x10>)
  400db4:	4798      	blx	r3
  400db6:	bd08      	pop	{r3, pc}
  400db8:	400e0e00 	.word	0x400e0e00
  400dbc:	00400d45 	.word	0x00400d45

00400dc0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400dc0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400dc2:	210c      	movs	r1, #12
  400dc4:	4801      	ldr	r0, [pc, #4]	; (400dcc <PIOB_Handler+0xc>)
  400dc6:	4b02      	ldr	r3, [pc, #8]	; (400dd0 <PIOB_Handler+0x10>)
  400dc8:	4798      	blx	r3
  400dca:	bd08      	pop	{r3, pc}
  400dcc:	400e1000 	.word	0x400e1000
  400dd0:	00400d45 	.word	0x00400d45

00400dd4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400dd4:	4a17      	ldr	r2, [pc, #92]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400dd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400ddc:	4318      	orrs	r0, r3
  400dde:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400de0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400de2:	f013 0f08 	tst.w	r3, #8
  400de6:	d10a      	bne.n	400dfe <pmc_switch_mck_to_pllack+0x2a>
  400de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400dec:	4911      	ldr	r1, [pc, #68]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400dee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400df0:	f012 0f08 	tst.w	r2, #8
  400df4:	d103      	bne.n	400dfe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400df6:	3b01      	subs	r3, #1
  400df8:	d1f9      	bne.n	400dee <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400dfa:	2001      	movs	r0, #1
  400dfc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400dfe:	4a0d      	ldr	r2, [pc, #52]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400e00:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e02:	f023 0303 	bic.w	r3, r3, #3
  400e06:	f043 0302 	orr.w	r3, r3, #2
  400e0a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e0c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e0e:	f013 0f08 	tst.w	r3, #8
  400e12:	d10a      	bne.n	400e2a <pmc_switch_mck_to_pllack+0x56>
  400e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e18:	4906      	ldr	r1, [pc, #24]	; (400e34 <pmc_switch_mck_to_pllack+0x60>)
  400e1a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e1c:	f012 0f08 	tst.w	r2, #8
  400e20:	d105      	bne.n	400e2e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e22:	3b01      	subs	r3, #1
  400e24:	d1f9      	bne.n	400e1a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400e26:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e28:	4770      	bx	lr
	return 0;
  400e2a:	2000      	movs	r0, #0
  400e2c:	4770      	bx	lr
  400e2e:	2000      	movs	r0, #0
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	400e0400 	.word	0x400e0400

00400e38 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400e38:	4911      	ldr	r1, [pc, #68]	; (400e80 <pmc_switch_mainck_to_fastrc+0x48>)
  400e3a:	6a0a      	ldr	r2, [r1, #32]
  400e3c:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  400e40:	f042 0208 	orr.w	r2, r2, #8
  400e44:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400e46:	460a      	mov	r2, r1
  400e48:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400e4e:	d0fb      	beq.n	400e48 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400e50:	4a0b      	ldr	r2, [pc, #44]	; (400e80 <pmc_switch_mainck_to_fastrc+0x48>)
  400e52:	6a13      	ldr	r3, [r2, #32]
  400e54:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400e5c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e60:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400e62:	6210      	str	r0, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400e64:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400e6a:	d0fb      	beq.n	400e64 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400e6c:	4a04      	ldr	r2, [pc, #16]	; (400e80 <pmc_switch_mainck_to_fastrc+0x48>)
  400e6e:	6a13      	ldr	r3, [r2, #32]
  400e70:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400e78:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e7c:	6213      	str	r3, [r2, #32]
  400e7e:	4770      	bx	lr
  400e80:	400e0400 	.word	0x400e0400

00400e84 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e84:	4b02      	ldr	r3, [pc, #8]	; (400e90 <pmc_osc_is_ready_mainck+0xc>)
  400e86:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e88:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e8c:	4770      	bx	lr
  400e8e:	bf00      	nop
  400e90:	400e0400 	.word	0x400e0400

00400e94 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e98:	4b01      	ldr	r3, [pc, #4]	; (400ea0 <pmc_disable_pllack+0xc>)
  400e9a:	629a      	str	r2, [r3, #40]	; 0x28
  400e9c:	4770      	bx	lr
  400e9e:	bf00      	nop
  400ea0:	400e0400 	.word	0x400e0400

00400ea4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ea4:	4b02      	ldr	r3, [pc, #8]	; (400eb0 <pmc_is_locked_pllack+0xc>)
  400ea6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ea8:	f000 0002 	and.w	r0, r0, #2
  400eac:	4770      	bx	lr
  400eae:	bf00      	nop
  400eb0:	400e0400 	.word	0x400e0400

00400eb4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400eb4:	2822      	cmp	r0, #34	; 0x22
  400eb6:	d81e      	bhi.n	400ef6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400eb8:	281f      	cmp	r0, #31
  400eba:	d80c      	bhi.n	400ed6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400ebc:	4b11      	ldr	r3, [pc, #68]	; (400f04 <pmc_enable_periph_clk+0x50>)
  400ebe:	699a      	ldr	r2, [r3, #24]
  400ec0:	2301      	movs	r3, #1
  400ec2:	4083      	lsls	r3, r0
  400ec4:	4393      	bics	r3, r2
  400ec6:	d018      	beq.n	400efa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400ec8:	2301      	movs	r3, #1
  400eca:	fa03 f000 	lsl.w	r0, r3, r0
  400ece:	4b0d      	ldr	r3, [pc, #52]	; (400f04 <pmc_enable_periph_clk+0x50>)
  400ed0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ed2:	2000      	movs	r0, #0
  400ed4:	4770      	bx	lr
		ul_id -= 32;
  400ed6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ed8:	4b0a      	ldr	r3, [pc, #40]	; (400f04 <pmc_enable_periph_clk+0x50>)
  400eda:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ede:	2301      	movs	r3, #1
  400ee0:	4083      	lsls	r3, r0
  400ee2:	4393      	bics	r3, r2
  400ee4:	d00b      	beq.n	400efe <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400ee6:	2301      	movs	r3, #1
  400ee8:	fa03 f000 	lsl.w	r0, r3, r0
  400eec:	4b05      	ldr	r3, [pc, #20]	; (400f04 <pmc_enable_periph_clk+0x50>)
  400eee:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400ef2:	2000      	movs	r0, #0
  400ef4:	4770      	bx	lr
		return 1;
  400ef6:	2001      	movs	r0, #1
  400ef8:	4770      	bx	lr
	return 0;
  400efa:	2000      	movs	r0, #0
  400efc:	4770      	bx	lr
  400efe:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400f00:	4770      	bx	lr
  400f02:	bf00      	nop
  400f04:	400e0400 	.word	0x400e0400

00400f08 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400f08:	2822      	cmp	r0, #34	; 0x22
  400f0a:	d822      	bhi.n	400f52 <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  400f0c:	281f      	cmp	r0, #31
  400f0e:	d80e      	bhi.n	400f2e <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  400f10:	4b11      	ldr	r3, [pc, #68]	; (400f58 <pmc_disable_periph_clk+0x50>)
  400f12:	699a      	ldr	r2, [r3, #24]
  400f14:	2301      	movs	r3, #1
  400f16:	4083      	lsls	r3, r0
  400f18:	4393      	bics	r3, r2
  400f1a:	d001      	beq.n	400f20 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  400f1c:	2000      	movs	r0, #0
  400f1e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  400f20:	2301      	movs	r3, #1
  400f22:	fa03 f000 	lsl.w	r0, r3, r0
  400f26:	4b0c      	ldr	r3, [pc, #48]	; (400f58 <pmc_disable_periph_clk+0x50>)
  400f28:	6158      	str	r0, [r3, #20]
	return 0;
  400f2a:	2000      	movs	r0, #0
  400f2c:	4770      	bx	lr
		ul_id -= 32;
  400f2e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  400f30:	4b09      	ldr	r3, [pc, #36]	; (400f58 <pmc_disable_periph_clk+0x50>)
  400f32:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400f36:	2301      	movs	r3, #1
  400f38:	4083      	lsls	r3, r0
  400f3a:	4393      	bics	r3, r2
  400f3c:	d001      	beq.n	400f42 <pmc_disable_periph_clk+0x3a>
	return 0;
  400f3e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400f40:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  400f42:	2301      	movs	r3, #1
  400f44:	fa03 f000 	lsl.w	r0, r3, r0
  400f48:	4b03      	ldr	r3, [pc, #12]	; (400f58 <pmc_disable_periph_clk+0x50>)
  400f4a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  400f4e:	2000      	movs	r0, #0
  400f50:	4770      	bx	lr
		return 1;
  400f52:	2001      	movs	r0, #1
  400f54:	4770      	bx	lr
  400f56:	bf00      	nop
  400f58:	400e0400 	.word	0x400e0400

00400f5c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  400f5c:	4b02      	ldr	r3, [pc, #8]	; (400f68 <pmc_is_wakeup_clocks_restored+0xc>)
  400f5e:	7818      	ldrb	r0, [r3, #0]
}
  400f60:	f080 0001 	eor.w	r0, r0, #1
  400f64:	4770      	bx	lr
  400f66:	bf00      	nop
  400f68:	200006d4 	.word	0x200006d4

00400f6c <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400f6c:	b4f0      	push	{r4, r5, r6, r7}
  400f6e:	b08c      	sub	sp, #48	; 0x30
  400f70:	4607      	mov	r7, r0
  400f72:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400f74:	ac01      	add	r4, sp, #4
  400f76:	4d11      	ldr	r5, [pc, #68]	; (400fbc <pwm_clocks_generate+0x50>)
  400f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400f88:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400f8a:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400f8c:	f852 0b04 	ldr.w	r0, [r2], #4
  400f90:	fbb6 f0f0 	udiv	r0, r6, r0
  400f94:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400f98:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  400f9c:	d907      	bls.n	400fae <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  400f9e:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  400fa0:	2b0b      	cmp	r3, #11
  400fa2:	d1f3      	bne.n	400f8c <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400fa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  400fa8:	b00c      	add	sp, #48	; 0x30
  400faa:	bcf0      	pop	{r4, r5, r6, r7}
  400fac:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  400fae:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  400fb0:	bf94      	ite	ls
  400fb2:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  400fb6:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  400fba:	e7f5      	b.n	400fa8 <pwm_clocks_generate+0x3c>
  400fbc:	00403630 	.word	0x00403630

00400fc0 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400fc0:	b570      	push	{r4, r5, r6, lr}
  400fc2:	4606      	mov	r6, r0
  400fc4:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  400fc6:	680c      	ldr	r4, [r1, #0]
  400fc8:	b144      	cbz	r4, 400fdc <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  400fca:	6889      	ldr	r1, [r1, #8]
  400fcc:	4620      	mov	r0, r4
  400fce:	4b0c      	ldr	r3, [pc, #48]	; (401000 <pwm_init+0x40>)
  400fd0:	4798      	blx	r3
  400fd2:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400fd8:	4298      	cmp	r0, r3
  400fda:	d00c      	beq.n	400ff6 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400fdc:	6868      	ldr	r0, [r5, #4]
  400fde:	b140      	cbz	r0, 400ff2 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400fe0:	68a9      	ldr	r1, [r5, #8]
  400fe2:	4b07      	ldr	r3, [pc, #28]	; (401000 <pwm_init+0x40>)
  400fe4:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400fea:	4298      	cmp	r0, r3
  400fec:	d005      	beq.n	400ffa <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  400fee:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400ff2:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  400ff4:	2400      	movs	r4, #0
}
  400ff6:	4620      	mov	r0, r4
  400ff8:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  400ffa:	4604      	mov	r4, r0
  400ffc:	e7fb      	b.n	400ff6 <pwm_init+0x36>
  400ffe:	bf00      	nop
  401000:	00400f6d 	.word	0x00400f6d

00401004 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  401004:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  401006:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401008:	684b      	ldr	r3, [r1, #4]
  40100a:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  40100e:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401010:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  401012:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401014:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  401016:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401018:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  40101c:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40101e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  401022:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  401024:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  401028:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40102a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40102e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  401032:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  401036:	68cb      	ldr	r3, [r1, #12]
  401038:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  40103c:	690b      	ldr	r3, [r1, #16]
  40103e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  401042:	7d8b      	ldrb	r3, [r1, #22]
  401044:	b13b      	cbz	r3, 401056 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  401046:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  401048:	8b4b      	ldrh	r3, [r1, #26]
  40104a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40104e:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  401052:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  401056:	6c85      	ldr	r5, [r0, #72]	; 0x48
  401058:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  40105c:	4093      	lsls	r3, r2
  40105e:	43db      	mvns	r3, r3
  401060:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  401062:	7fcc      	ldrb	r4, [r1, #31]
  401064:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  401068:	7f8c      	ldrb	r4, [r1, #30]
  40106a:	4094      	lsls	r4, r2
  40106c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  401070:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  401072:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  401074:	6c44      	ldr	r4, [r0, #68]	; 0x44
  401076:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  401078:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  40107c:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  401080:	f891 4020 	ldrb.w	r4, [r1, #32]
  401084:	4094      	lsls	r4, r2
  401086:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40108a:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  40108c:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  40108e:	2301      	movs	r3, #1
  401090:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  401092:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  401096:	b31c      	cbz	r4, 4010e0 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
  401098:	6a04      	ldr	r4, [r0, #32]
  40109a:	431c      	orrs	r4, r3
  40109c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40109e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4010a2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4010a4:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4010a6:	bf0c      	ite	eq
  4010a8:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4010aa:	439c      	bicne	r4, r3
  4010ac:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4010ae:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4010b2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  4010b4:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4010b6:	bf0c      	ite	eq
  4010b8:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  4010bc:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
  4010c0:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4010c2:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4010c4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4010c6:	23ff      	movs	r3, #255	; 0xff
  4010c8:	4093      	lsls	r3, r2
  4010ca:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4010ce:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  4010d2:	fa03 f202 	lsl.w	r2, r3, r2
  4010d6:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  4010d8:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  4010da:	2000      	movs	r0, #0
  4010dc:	bc70      	pop	{r4, r5, r6}
  4010de:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4010e0:	6a04      	ldr	r4, [r0, #32]
  4010e2:	ea24 0403 	bic.w	r4, r4, r3
  4010e6:	6204      	str	r4, [r0, #32]
  4010e8:	e7d9      	b.n	40109e <pwm_channel_init+0x9a>

004010ea <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4010ea:	2301      	movs	r3, #1
  4010ec:	fa03 f101 	lsl.w	r1, r3, r1
  4010f0:	6041      	str	r1, [r0, #4]
  4010f2:	4770      	bx	lr

004010f4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  4010f4:	2301      	movs	r3, #1
  4010f6:	fa03 f101 	lsl.w	r1, r3, r1
  4010fa:	6081      	str	r1, [r0, #8]
  4010fc:	4770      	bx	lr

004010fe <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4010fe:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401100:	23ac      	movs	r3, #172	; 0xac
  401102:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401104:	680b      	ldr	r3, [r1, #0]
  401106:	684a      	ldr	r2, [r1, #4]
  401108:	fbb3 f3f2 	udiv	r3, r3, r2
  40110c:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40110e:	1e5c      	subs	r4, r3, #1
  401110:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401114:	4294      	cmp	r4, r2
  401116:	d80b      	bhi.n	401130 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  401118:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40111a:	688b      	ldr	r3, [r1, #8]
  40111c:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40111e:	f240 2302 	movw	r3, #514	; 0x202
  401122:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401126:	2350      	movs	r3, #80	; 0x50
  401128:	6003      	str	r3, [r0, #0]

	return 0;
  40112a:	2000      	movs	r0, #0
}
  40112c:	bc10      	pop	{r4}
  40112e:	4770      	bx	lr
		return 1;
  401130:	2001      	movs	r0, #1
  401132:	e7fb      	b.n	40112c <uart_init+0x2e>

00401134 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  401134:	2340      	movs	r3, #64	; 0x40
  401136:	6003      	str	r3, [r0, #0]
  401138:	4770      	bx	lr

0040113a <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  40113a:	2310      	movs	r3, #16
  40113c:	6003      	str	r3, [r0, #0]
  40113e:	4770      	bx	lr

00401140 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  401140:	6081      	str	r1, [r0, #8]
  401142:	4770      	bx	lr

00401144 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  401144:	60c1      	str	r1, [r0, #12]
  401146:	4770      	bx	lr

00401148 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  401148:	6940      	ldr	r0, [r0, #20]
}
  40114a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40114e:	4770      	bx	lr

00401150 <uart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  401150:	6940      	ldr	r0, [r0, #20]
}
  401152:	f3c0 2040 	ubfx	r0, r0, #9, #1
  401156:	4770      	bx	lr

00401158 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  401158:	6940      	ldr	r0, [r0, #20]
}
  40115a:	f000 0001 	and.w	r0, r0, #1
  40115e:	4770      	bx	lr

00401160 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401160:	6943      	ldr	r3, [r0, #20]
  401162:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401166:	bf1a      	itte	ne
  401168:	61c1      	strne	r1, [r0, #28]
	return 0;
  40116a:	2000      	movne	r0, #0
		return 1;
  40116c:	2001      	moveq	r0, #1
}
  40116e:	4770      	bx	lr

00401170 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401170:	6943      	ldr	r3, [r0, #20]
  401172:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401176:	bf1d      	ittte	ne
  401178:	6983      	ldrne	r3, [r0, #24]
  40117a:	700b      	strbne	r3, [r1, #0]
	return 0;
  40117c:	2000      	movne	r0, #0
		return 1;
  40117e:	2001      	moveq	r0, #1
}
  401180:	4770      	bx	lr
	...

00401184 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401184:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  401186:	4601      	mov	r1, r0
  401188:	bb28      	cbnz	r0, 4011d6 <udd_sleep_mode+0x52>
  40118a:	4b24      	ldr	r3, [pc, #144]	; (40121c <udd_sleep_mode+0x98>)
  40118c:	781b      	ldrb	r3, [r3, #0]
  40118e:	b91b      	cbnz	r3, 401198 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401190:	4b22      	ldr	r3, [pc, #136]	; (40121c <udd_sleep_mode+0x98>)
  401192:	7019      	strb	r1, [r3, #0]
}
  401194:	b002      	add	sp, #8
  401196:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  401198:	4b21      	ldr	r3, [pc, #132]	; (401220 <udd_sleep_mode+0x9c>)
  40119a:	789b      	ldrb	r3, [r3, #2]
  40119c:	b903      	cbnz	r3, 4011a0 <udd_sleep_mode+0x1c>
  40119e:	e7fe      	b.n	40119e <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4011a0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011a4:	fab3 f383 	clz	r3, r3
  4011a8:	095b      	lsrs	r3, r3, #5
  4011aa:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4011ac:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4011ae:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011b2:	2200      	movs	r2, #0
  4011b4:	4b1b      	ldr	r3, [pc, #108]	; (401224 <udd_sleep_mode+0xa0>)
  4011b6:	701a      	strb	r2, [r3, #0]
	return flags;
  4011b8:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4011ba:	4a19      	ldr	r2, [pc, #100]	; (401220 <udd_sleep_mode+0x9c>)
  4011bc:	7893      	ldrb	r3, [r2, #2]
  4011be:	3b01      	subs	r3, #1
  4011c0:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4011c2:	2800      	cmp	r0, #0
  4011c4:	d0e4      	beq.n	401190 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  4011c6:	2201      	movs	r2, #1
  4011c8:	4b16      	ldr	r3, [pc, #88]	; (401224 <udd_sleep_mode+0xa0>)
  4011ca:	701a      	strb	r2, [r3, #0]
  4011cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4011d0:	b662      	cpsie	i
  4011d2:	e7dd      	b.n	401190 <udd_sleep_mode+0xc>
  4011d4:	e7fe      	b.n	4011d4 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  4011d6:	4b11      	ldr	r3, [pc, #68]	; (40121c <udd_sleep_mode+0x98>)
  4011d8:	781b      	ldrb	r3, [r3, #0]
  4011da:	2b00      	cmp	r3, #0
  4011dc:	d1d8      	bne.n	401190 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  4011de:	4b10      	ldr	r3, [pc, #64]	; (401220 <udd_sleep_mode+0x9c>)
  4011e0:	789b      	ldrb	r3, [r3, #2]
  4011e2:	2bff      	cmp	r3, #255	; 0xff
  4011e4:	d0f6      	beq.n	4011d4 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4011e6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011ea:	fab3 f383 	clz	r3, r3
  4011ee:	095b      	lsrs	r3, r3, #5
  4011f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011f2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4011f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011f8:	2200      	movs	r2, #0
  4011fa:	4b0a      	ldr	r3, [pc, #40]	; (401224 <udd_sleep_mode+0xa0>)
  4011fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4011fe:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  401200:	4a07      	ldr	r2, [pc, #28]	; (401220 <udd_sleep_mode+0x9c>)
  401202:	7893      	ldrb	r3, [r2, #2]
  401204:	3301      	adds	r3, #1
  401206:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401208:	2800      	cmp	r0, #0
  40120a:	d0c1      	beq.n	401190 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  40120c:	2201      	movs	r2, #1
  40120e:	4b05      	ldr	r3, [pc, #20]	; (401224 <udd_sleep_mode+0xa0>)
  401210:	701a      	strb	r2, [r3, #0]
  401212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401216:	b662      	cpsie	i
  401218:	e7ba      	b.n	401190 <udd_sleep_mode+0xc>
  40121a:	bf00      	nop
  40121c:	200006d6 	.word	0x200006d6
  401220:	20002728 	.word	0x20002728
  401224:	200000a0 	.word	0x200000a0

00401228 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401228:	4a03      	ldr	r2, [pc, #12]	; (401238 <udd_ctrl_init+0x10>)
  40122a:	2300      	movs	r3, #0
  40122c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40122e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  401230:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401232:	4a02      	ldr	r2, [pc, #8]	; (40123c <udd_ctrl_init+0x14>)
  401234:	7013      	strb	r3, [r2, #0]
  401236:	4770      	bx	lr
  401238:	20002734 	.word	0x20002734
  40123c:	200006dc 	.word	0x200006dc

00401240 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401240:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401242:	2205      	movs	r2, #5
  401244:	4b0a      	ldr	r3, [pc, #40]	; (401270 <udd_ctrl_stall_data+0x30>)
  401246:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401248:	4a0a      	ldr	r2, [pc, #40]	; (401274 <udd_ctrl_stall_data+0x34>)
  40124a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40124c:	9301      	str	r3, [sp, #4]
  40124e:	9b01      	ldr	r3, [sp, #4]
  401250:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401254:	9301      	str	r3, [sp, #4]
  401256:	9b01      	ldr	r3, [sp, #4]
  401258:	f043 0320 	orr.w	r3, r3, #32
  40125c:	9301      	str	r3, [sp, #4]
  40125e:	9b01      	ldr	r3, [sp, #4]
  401260:	6313      	str	r3, [r2, #48]	; 0x30
  401262:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401264:	f013 0f20 	tst.w	r3, #32
  401268:	d0fb      	beq.n	401262 <udd_ctrl_stall_data+0x22>
}
  40126a:	b002      	add	sp, #8
  40126c:	4770      	bx	lr
  40126e:	bf00      	nop
  401270:	200006dc 	.word	0x200006dc
  401274:	40034000 	.word	0x40034000

00401278 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401278:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40127a:	2203      	movs	r2, #3
  40127c:	4b0a      	ldr	r3, [pc, #40]	; (4012a8 <udd_ctrl_send_zlp_in+0x30>)
  40127e:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401280:	4a0a      	ldr	r2, [pc, #40]	; (4012ac <udd_ctrl_send_zlp_in+0x34>)
  401282:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401284:	9301      	str	r3, [sp, #4]
  401286:	9b01      	ldr	r3, [sp, #4]
  401288:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40128c:	9301      	str	r3, [sp, #4]
  40128e:	9b01      	ldr	r3, [sp, #4]
  401290:	f043 0310 	orr.w	r3, r3, #16
  401294:	9301      	str	r3, [sp, #4]
  401296:	9b01      	ldr	r3, [sp, #4]
  401298:	6313      	str	r3, [r2, #48]	; 0x30
  40129a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40129c:	f013 0f10 	tst.w	r3, #16
  4012a0:	d0fb      	beq.n	40129a <udd_ctrl_send_zlp_in+0x22>
}
  4012a2:	b002      	add	sp, #8
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop
  4012a8:	200006dc 	.word	0x200006dc
  4012ac:	40034000 	.word	0x40034000

004012b0 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  4012b0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4012b2:	4b02      	ldr	r3, [pc, #8]	; (4012bc <udd_ctrl_endofrequest+0xc>)
  4012b4:	691b      	ldr	r3, [r3, #16]
  4012b6:	b103      	cbz	r3, 4012ba <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  4012b8:	4798      	blx	r3
  4012ba:	bd08      	pop	{r3, pc}
  4012bc:	20002734 	.word	0x20002734

004012c0 <udd_ctrl_in_sent>:
{
  4012c0:	b530      	push	{r4, r5, lr}
  4012c2:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  4012c4:	4b63      	ldr	r3, [pc, #396]	; (401454 <udd_ctrl_in_sent+0x194>)
  4012c6:	781b      	ldrb	r3, [r3, #0]
  4012c8:	2b03      	cmp	r3, #3
  4012ca:	d029      	beq.n	401320 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4012cc:	4b62      	ldr	r3, [pc, #392]	; (401458 <udd_ctrl_in_sent+0x198>)
  4012ce:	881b      	ldrh	r3, [r3, #0]
  4012d0:	4a62      	ldr	r2, [pc, #392]	; (40145c <udd_ctrl_in_sent+0x19c>)
  4012d2:	8994      	ldrh	r4, [r2, #12]
  4012d4:	1ae4      	subs	r4, r4, r3
  4012d6:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  4012d8:	2c00      	cmp	r4, #0
  4012da:	d144      	bne.n	401366 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4012dc:	4a60      	ldr	r2, [pc, #384]	; (401460 <udd_ctrl_in_sent+0x1a0>)
  4012de:	8811      	ldrh	r1, [r2, #0]
  4012e0:	440b      	add	r3, r1
  4012e2:	b29b      	uxth	r3, r3
  4012e4:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4012e6:	4a5d      	ldr	r2, [pc, #372]	; (40145c <udd_ctrl_in_sent+0x19c>)
  4012e8:	88d2      	ldrh	r2, [r2, #6]
  4012ea:	429a      	cmp	r2, r3
  4012ec:	d003      	beq.n	4012f6 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  4012ee:	4b5d      	ldr	r3, [pc, #372]	; (401464 <udd_ctrl_in_sent+0x1a4>)
  4012f0:	781b      	ldrb	r3, [r3, #0]
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	d02b      	beq.n	40134e <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4012f6:	2204      	movs	r2, #4
  4012f8:	4b56      	ldr	r3, [pc, #344]	; (401454 <udd_ctrl_in_sent+0x194>)
  4012fa:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  4012fc:	4a5a      	ldr	r2, [pc, #360]	; (401468 <udd_ctrl_in_sent+0x1a8>)
  4012fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401300:	9301      	str	r3, [sp, #4]
  401302:	9b01      	ldr	r3, [sp, #4]
  401304:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401308:	9301      	str	r3, [sp, #4]
  40130a:	9b01      	ldr	r3, [sp, #4]
  40130c:	f023 0301 	bic.w	r3, r3, #1
  401310:	9301      	str	r3, [sp, #4]
  401312:	9b01      	ldr	r3, [sp, #4]
  401314:	6313      	str	r3, [r2, #48]	; 0x30
  401316:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401318:	f013 0f01 	tst.w	r3, #1
  40131c:	d1fb      	bne.n	401316 <udd_ctrl_in_sent+0x56>
  40131e:	e014      	b.n	40134a <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  401320:	4a51      	ldr	r2, [pc, #324]	; (401468 <udd_ctrl_in_sent+0x1a8>)
  401322:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401324:	9300      	str	r3, [sp, #0]
  401326:	9b00      	ldr	r3, [sp, #0]
  401328:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40132c:	9300      	str	r3, [sp, #0]
  40132e:	9b00      	ldr	r3, [sp, #0]
  401330:	f023 0301 	bic.w	r3, r3, #1
  401334:	9300      	str	r3, [sp, #0]
  401336:	9b00      	ldr	r3, [sp, #0]
  401338:	6313      	str	r3, [r2, #48]	; 0x30
  40133a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40133c:	f013 0f01 	tst.w	r3, #1
  401340:	d1fb      	bne.n	40133a <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  401342:	4b4a      	ldr	r3, [pc, #296]	; (40146c <udd_ctrl_in_sent+0x1ac>)
  401344:	4798      	blx	r3
		udd_ctrl_init();
  401346:	4b4a      	ldr	r3, [pc, #296]	; (401470 <udd_ctrl_in_sent+0x1b0>)
  401348:	4798      	blx	r3
}
  40134a:	b007      	add	sp, #28
  40134c:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  40134e:	4b43      	ldr	r3, [pc, #268]	; (40145c <udd_ctrl_in_sent+0x19c>)
  401350:	695b      	ldr	r3, [r3, #20]
  401352:	2b00      	cmp	r3, #0
  401354:	d05d      	beq.n	401412 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401356:	4798      	blx	r3
  401358:	2800      	cmp	r0, #0
  40135a:	d05a      	beq.n	401412 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  40135c:	2200      	movs	r2, #0
  40135e:	4b3e      	ldr	r3, [pc, #248]	; (401458 <udd_ctrl_in_sent+0x198>)
  401360:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401362:	4b3e      	ldr	r3, [pc, #248]	; (40145c <udd_ctrl_in_sent+0x19c>)
  401364:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401366:	2c3f      	cmp	r4, #63	; 0x3f
  401368:	d953      	bls.n	401412 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  40136a:	2200      	movs	r2, #0
  40136c:	4b3d      	ldr	r3, [pc, #244]	; (401464 <udd_ctrl_in_sent+0x1a4>)
  40136e:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401370:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401372:	4b3a      	ldr	r3, [pc, #232]	; (40145c <udd_ctrl_in_sent+0x19c>)
  401374:	6899      	ldr	r1, [r3, #8]
  401376:	4b38      	ldr	r3, [pc, #224]	; (401458 <udd_ctrl_in_sent+0x198>)
  401378:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40137a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40137e:	fab3 f383 	clz	r3, r3
  401382:	095b      	lsrs	r3, r3, #5
  401384:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  401386:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401388:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40138c:	2200      	movs	r2, #0
  40138e:	4b39      	ldr	r3, [pc, #228]	; (401474 <udd_ctrl_in_sent+0x1b4>)
  401390:	701a      	strb	r2, [r3, #0]
	return flags;
  401392:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  401394:	4b34      	ldr	r3, [pc, #208]	; (401468 <udd_ctrl_in_sent+0x1a8>)
  401396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401398:	f013 0f02 	tst.w	r3, #2
  40139c:	d13d      	bne.n	40141a <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  40139e:	b14c      	cbz	r4, 4013b4 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4013a0:	4401      	add	r1, r0
  4013a2:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  4013a4:	4830      	ldr	r0, [pc, #192]	; (401468 <udd_ctrl_in_sent+0x1a8>)
  4013a6:	f812 3b01 	ldrb.w	r3, [r2], #1
  4013aa:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  4013ac:	1a53      	subs	r3, r2, r1
  4013ae:	b2db      	uxtb	r3, r3
  4013b0:	42a3      	cmp	r3, r4
  4013b2:	d3f8      	bcc.n	4013a6 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  4013b4:	4b28      	ldr	r3, [pc, #160]	; (401458 <udd_ctrl_in_sent+0x198>)
  4013b6:	881a      	ldrh	r2, [r3, #0]
  4013b8:	4414      	add	r4, r2
  4013ba:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  4013bc:	4a2a      	ldr	r2, [pc, #168]	; (401468 <udd_ctrl_in_sent+0x1a8>)
  4013be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013c0:	9303      	str	r3, [sp, #12]
  4013c2:	9b03      	ldr	r3, [sp, #12]
  4013c4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013c8:	9303      	str	r3, [sp, #12]
  4013ca:	9b03      	ldr	r3, [sp, #12]
  4013cc:	f043 0310 	orr.w	r3, r3, #16
  4013d0:	9303      	str	r3, [sp, #12]
  4013d2:	9b03      	ldr	r3, [sp, #12]
  4013d4:	6313      	str	r3, [r2, #48]	; 0x30
  4013d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013d8:	f013 0f10 	tst.w	r3, #16
  4013dc:	d0fb      	beq.n	4013d6 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  4013de:	4a22      	ldr	r2, [pc, #136]	; (401468 <udd_ctrl_in_sent+0x1a8>)
  4013e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013e2:	9304      	str	r3, [sp, #16]
  4013e4:	9b04      	ldr	r3, [sp, #16]
  4013e6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013ea:	9304      	str	r3, [sp, #16]
  4013ec:	9b04      	ldr	r3, [sp, #16]
  4013ee:	f023 0301 	bic.w	r3, r3, #1
  4013f2:	9304      	str	r3, [sp, #16]
  4013f4:	9b04      	ldr	r3, [sp, #16]
  4013f6:	6313      	str	r3, [r2, #48]	; 0x30
  4013f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013fa:	f013 0f01 	tst.w	r3, #1
  4013fe:	d1fb      	bne.n	4013f8 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  401400:	2d00      	cmp	r5, #0
  401402:	d0a2      	beq.n	40134a <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  401404:	2201      	movs	r2, #1
  401406:	4b1b      	ldr	r3, [pc, #108]	; (401474 <udd_ctrl_in_sent+0x1b4>)
  401408:	701a      	strb	r2, [r3, #0]
  40140a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40140e:	b662      	cpsie	i
  401410:	e79b      	b.n	40134a <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  401412:	2201      	movs	r2, #1
  401414:	4b13      	ldr	r3, [pc, #76]	; (401464 <udd_ctrl_in_sent+0x1a4>)
  401416:	701a      	strb	r2, [r3, #0]
  401418:	e7ab      	b.n	401372 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  40141a:	b12d      	cbz	r5, 401428 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  40141c:	2201      	movs	r2, #1
  40141e:	4b15      	ldr	r3, [pc, #84]	; (401474 <udd_ctrl_in_sent+0x1b4>)
  401420:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401422:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401426:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401428:	2204      	movs	r2, #4
  40142a:	4b0a      	ldr	r3, [pc, #40]	; (401454 <udd_ctrl_in_sent+0x194>)
  40142c:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  40142e:	4a0e      	ldr	r2, [pc, #56]	; (401468 <udd_ctrl_in_sent+0x1a8>)
  401430:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401432:	9302      	str	r3, [sp, #8]
  401434:	9b02      	ldr	r3, [sp, #8]
  401436:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40143a:	9302      	str	r3, [sp, #8]
  40143c:	9b02      	ldr	r3, [sp, #8]
  40143e:	f023 0301 	bic.w	r3, r3, #1
  401442:	9302      	str	r3, [sp, #8]
  401444:	9b02      	ldr	r3, [sp, #8]
  401446:	6313      	str	r3, [r2, #48]	; 0x30
  401448:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40144a:	f013 0f01 	tst.w	r3, #1
  40144e:	d1fb      	bne.n	401448 <udd_ctrl_in_sent+0x188>
  401450:	e77b      	b.n	40134a <udd_ctrl_in_sent+0x8a>
  401452:	bf00      	nop
  401454:	200006dc 	.word	0x200006dc
  401458:	200006d8 	.word	0x200006d8
  40145c:	20002734 	.word	0x20002734
  401460:	200006da 	.word	0x200006da
  401464:	200006d5 	.word	0x200006d5
  401468:	40034000 	.word	0x40034000
  40146c:	004012b1 	.word	0x004012b1
  401470:	00401229 	.word	0x00401229
  401474:	200000a0 	.word	0x200000a0

00401478 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401478:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  40147a:	7c43      	ldrb	r3, [r0, #17]
  40147c:	f013 0f10 	tst.w	r3, #16
  401480:	d016      	beq.n	4014b0 <udd_ep_finish_job+0x38>
  401482:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  401484:	7c43      	ldrb	r3, [r0, #17]
  401486:	f36f 1304 	bfc	r3, #4, #1
  40148a:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  40148c:	6804      	ldr	r4, [r0, #0]
  40148e:	b17c      	cbz	r4, 4014b0 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401490:	f102 030c 	add.w	r3, r2, #12
  401494:	4907      	ldr	r1, [pc, #28]	; (4014b4 <udd_ep_finish_job+0x3c>)
  401496:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40149a:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  40149e:	bf18      	it	ne
  4014a0:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4014a4:	6881      	ldr	r1, [r0, #8]
  4014a6:	2d01      	cmp	r5, #1
  4014a8:	bf14      	ite	ne
  4014aa:	2000      	movne	r0, #0
  4014ac:	2001      	moveq	r0, #1
  4014ae:	47a0      	blx	r4
  4014b0:	bd38      	pop	{r3, r4, r5, pc}
  4014b2:	bf00      	nop
  4014b4:	40034000 	.word	0x40034000

004014b8 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  4014b8:	b430      	push	{r4, r5}
  4014ba:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4014bc:	1e41      	subs	r1, r0, #1
  4014be:	0083      	lsls	r3, r0, #2
  4014c0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4014c4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  4014c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  4014ca:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  4014cc:	f012 0f02 	tst.w	r2, #2
  4014d0:	d032      	beq.n	401538 <udd_ep_ack_out_received+0x80>
  4014d2:	f014 0f40 	tst.w	r4, #64	; 0x40
  4014d6:	d108      	bne.n	4014ea <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  4014d8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4014dc:	4c2a      	ldr	r4, [pc, #168]	; (401588 <udd_ep_ack_out_received+0xd0>)
  4014de:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4014e2:	7c54      	ldrb	r4, [r2, #17]
  4014e4:	f36f 0483 	bfc	r4, #2, #2
  4014e8:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  4014ea:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4014ee:	4c26      	ldr	r4, [pc, #152]	; (401588 <udd_ep_ack_out_received+0xd0>)
  4014f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4014f4:	7c52      	ldrb	r2, [r2, #17]
  4014f6:	f012 0f0c 	tst.w	r2, #12
  4014fa:	d128      	bne.n	40154e <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  4014fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4014fe:	9200      	str	r2, [sp, #0]
  401500:	9a00      	ldr	r2, [sp, #0]
  401502:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401506:	9200      	str	r2, [sp, #0]
  401508:	9a00      	ldr	r2, [sp, #0]
  40150a:	f022 0202 	bic.w	r2, r2, #2
  40150e:	9200      	str	r2, [sp, #0]
  401510:	9a00      	ldr	r2, [sp, #0]
  401512:	631a      	str	r2, [r3, #48]	; 0x30
  401514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401516:	f012 0f02 	tst.w	r2, #2
  40151a:	d1fb      	bne.n	401514 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  40151c:	b380      	cbz	r0, 401580 <udd_ep_ack_out_received+0xc8>
  40151e:	2803      	cmp	r0, #3
  401520:	d02e      	beq.n	401580 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  401522:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401526:	4b18      	ldr	r3, [pc, #96]	; (401588 <udd_ep_ack_out_received+0xd0>)
  401528:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40152c:	7c5a      	ldrb	r2, [r3, #17]
  40152e:	2101      	movs	r1, #1
  401530:	f361 0283 	bfi	r2, r1, #2, #2
  401534:	745a      	strb	r2, [r3, #17]
  401536:	e023      	b.n	401580 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401538:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40153c:	4c12      	ldr	r4, [pc, #72]	; (401588 <udd_ep_ack_out_received+0xd0>)
  40153e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401542:	7c54      	ldrb	r4, [r2, #17]
  401544:	2501      	movs	r5, #1
  401546:	f365 0483 	bfi	r4, r5, #2, #2
  40154a:	7454      	strb	r4, [r2, #17]
  40154c:	e7cd      	b.n	4014ea <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  40154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401550:	9201      	str	r2, [sp, #4]
  401552:	9a01      	ldr	r2, [sp, #4]
  401554:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401558:	9201      	str	r2, [sp, #4]
  40155a:	9a01      	ldr	r2, [sp, #4]
  40155c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  401560:	9201      	str	r2, [sp, #4]
  401562:	9a01      	ldr	r2, [sp, #4]
  401564:	631a      	str	r2, [r3, #48]	; 0x30
  401566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401568:	f012 0f40 	tst.w	r2, #64	; 0x40
  40156c:	d1fb      	bne.n	401566 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  40156e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401572:	4b05      	ldr	r3, [pc, #20]	; (401588 <udd_ep_ack_out_received+0xd0>)
  401574:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401578:	7c4b      	ldrb	r3, [r1, #17]
  40157a:	f36f 0383 	bfc	r3, #2, #2
  40157e:	744b      	strb	r3, [r1, #17]
	}
}
  401580:	b002      	add	sp, #8
  401582:	bc30      	pop	{r4, r5}
  401584:	4770      	bx	lr
  401586:	bf00      	nop
  401588:	200006e0 	.word	0x200006e0

0040158c <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  40158c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401590:	b083      	sub	sp, #12
  401592:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401594:	4681      	mov	r9, r0
  401596:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401598:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  40159c:	4b66      	ldr	r3, [pc, #408]	; (401738 <udd_ep_in_sent+0x1ac>)
  40159e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4015a2:	f893 c011 	ldrb.w	ip, [r3, #17]
  4015a6:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  4015aa:	2800      	cmp	r0, #0
  4015ac:	f000 80b7 	beq.w	40171e <udd_ep_in_sent+0x192>
  4015b0:	2803      	cmp	r0, #3
  4015b2:	bf0c      	ite	eq
  4015b4:	2301      	moveq	r3, #1
  4015b6:	2302      	movne	r3, #2
  4015b8:	4563      	cmp	r3, ip
  4015ba:	f340 80b2 	ble.w	401722 <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4015be:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4015c2:	4a5d      	ldr	r2, [pc, #372]	; (401738 <udd_ep_in_sent+0x1ac>)
  4015c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4015c8:	68da      	ldr	r2, [r3, #12]
  4015ca:	689b      	ldr	r3, [r3, #8]
  4015cc:	429a      	cmp	r2, r3
  4015ce:	d309      	bcc.n	4015e4 <udd_ep_in_sent+0x58>
  4015d0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  4015d4:	4c58      	ldr	r4, [pc, #352]	; (401738 <udd_ep_in_sent+0x1ac>)
  4015d6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  4015da:	7c49      	ldrb	r1, [r1, #17]
  4015dc:	f011 0f40 	tst.w	r1, #64	; 0x40
  4015e0:	f000 80a3 	beq.w	40172a <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4015e4:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  4015e8:	4953      	ldr	r1, [pc, #332]	; (401738 <udd_ep_in_sent+0x1ac>)
  4015ea:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  4015ee:	686c      	ldr	r4, [r5, #4]
  4015f0:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4015f2:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  4015f4:	8a2b      	ldrh	r3, [r5, #16]
  4015f6:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  4015fa:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  4015fc:	bf3a      	itte	cc
  4015fe:	460f      	movcc	r7, r1
		is_short_pkt = true;
  401600:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  401604:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401608:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40160c:	494a      	ldr	r1, [pc, #296]	; (401738 <udd_ep_in_sent+0x1ac>)
  40160e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  401612:	443a      	add	r2, r7
  401614:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  401616:	2f07      	cmp	r7, #7
  401618:	d92b      	bls.n	401672 <udd_ep_in_sent+0xe6>
  40161a:	f104 0308 	add.w	r3, r4, #8
  40161e:	463d      	mov	r5, r7
  401620:	0082      	lsls	r2, r0, #2
  401622:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401626:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40162a:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  40162e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401630:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  401634:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401636:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  40163a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40163c:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  401640:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401642:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  401646:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401648:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  40164c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40164e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  401652:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401654:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401658:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  40165a:	3d08      	subs	r5, #8
  40165c:	3308      	adds	r3, #8
  40165e:	2d07      	cmp	r5, #7
  401660:	d8e3      	bhi.n	40162a <udd_ep_in_sent+0x9e>
  401662:	f1a7 0308 	sub.w	r3, r7, #8
  401666:	f023 0307 	bic.w	r3, r3, #7
  40166a:	3308      	adds	r3, #8
  40166c:	441c      	add	r4, r3
  40166e:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  401672:	b14f      	cbz	r7, 401688 <udd_ep_in_sent+0xfc>
  401674:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401676:	4931      	ldr	r1, [pc, #196]	; (40173c <udd_ep_in_sent+0x1b0>)
  401678:	f109 0914 	add.w	r9, r9, #20
  40167c:	f814 2b01 	ldrb.w	r2, [r4], #1
  401680:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  401684:	429c      	cmp	r4, r3
  401686:	d1f9      	bne.n	40167c <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  401688:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40168c:	4a2a      	ldr	r2, [pc, #168]	; (401738 <udd_ep_in_sent+0x1ac>)
  40168e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401692:	f10c 0c01 	add.w	ip, ip, #1
  401696:	7c5a      	ldrb	r2, [r3, #17]
  401698:	f36c 0283 	bfi	r2, ip, #2, #2
  40169c:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  40169e:	f1b8 0f00 	cmp.w	r8, #0
  4016a2:	d014      	beq.n	4016ce <udd_ep_in_sent+0x142>
  4016a4:	0080      	lsls	r0, r0, #2
  4016a6:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4016aa:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4016ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016b0:	9301      	str	r3, [sp, #4]
  4016b2:	9b01      	ldr	r3, [sp, #4]
  4016b4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016b8:	9301      	str	r3, [sp, #4]
  4016ba:	9b01      	ldr	r3, [sp, #4]
  4016bc:	f043 0310 	orr.w	r3, r3, #16
  4016c0:	9301      	str	r3, [sp, #4]
  4016c2:	9b01      	ldr	r3, [sp, #4]
  4016c4:	6303      	str	r3, [r0, #48]	; 0x30
  4016c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016c8:	f013 0f10 	tst.w	r3, #16
  4016cc:	d0fb      	beq.n	4016c6 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4016ce:	f1be 0f00 	cmp.w	lr, #0
  4016d2:	d008      	beq.n	4016e6 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  4016d4:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4016d8:	4a17      	ldr	r2, [pc, #92]	; (401738 <udd_ep_in_sent+0x1ac>)
  4016da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4016de:	7c5a      	ldrb	r2, [r3, #17]
  4016e0:	f36f 1286 	bfc	r2, #6, #1
  4016e4:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  4016e6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4016ea:	4a13      	ldr	r2, [pc, #76]	; (401738 <udd_ep_in_sent+0x1ac>)
  4016ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4016f0:	68da      	ldr	r2, [r3, #12]
  4016f2:	689b      	ldr	r3, [r3, #8]
  4016f4:	429a      	cmp	r2, r3
  4016f6:	d31a      	bcc.n	40172e <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  4016f8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4016fc:	4a0e      	ldr	r2, [pc, #56]	; (401738 <udd_ep_in_sent+0x1ac>)
  4016fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401702:	7c5b      	ldrb	r3, [r3, #17]
  401704:	f013 0f40 	tst.w	r3, #64	; 0x40
  401708:	d113      	bne.n	401732 <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  40170a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40170e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  401712:	7c73      	ldrb	r3, [r6, #17]
  401714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401718:	7473      	strb	r3, [r6, #17]
		return false;
  40171a:	2000      	movs	r0, #0
  40171c:	e002      	b.n	401724 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40171e:	2301      	movs	r3, #1
  401720:	e74a      	b.n	4015b8 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  401722:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  401724:	b003      	add	sp, #12
  401726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  40172a:	2000      	movs	r0, #0
  40172c:	e7fa      	b.n	401724 <udd_ep_in_sent+0x198>
	return true; // Pending
  40172e:	2001      	movs	r0, #1
  401730:	e7f8      	b.n	401724 <udd_ep_in_sent+0x198>
  401732:	2001      	movs	r0, #1
  401734:	e7f6      	b.n	401724 <udd_ep_in_sent+0x198>
  401736:	bf00      	nop
  401738:	200006e0 	.word	0x200006e0
  40173c:	40034000 	.word	0x40034000

00401740 <UDP_Handler>:
{
  401740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401744:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401746:	4b86      	ldr	r3, [pc, #536]	; (401960 <UDP_Handler+0x220>)
  401748:	4798      	blx	r3
  40174a:	b920      	cbnz	r0, 401756 <UDP_Handler+0x16>
  40174c:	4b85      	ldr	r3, [pc, #532]	; (401964 <UDP_Handler+0x224>)
  40174e:	69db      	ldr	r3, [r3, #28]
  401750:	f413 7f80 	tst.w	r3, #256	; 0x100
  401754:	d03b      	beq.n	4017ce <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  401756:	2022      	movs	r0, #34	; 0x22
  401758:	4b83      	ldr	r3, [pc, #524]	; (401968 <UDP_Handler+0x228>)
  40175a:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  40175c:	4b81      	ldr	r3, [pc, #516]	; (401964 <UDP_Handler+0x224>)
  40175e:	699b      	ldr	r3, [r3, #24]
  401760:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401764:	d004      	beq.n	401770 <UDP_Handler+0x30>
  401766:	4b7f      	ldr	r3, [pc, #508]	; (401964 <UDP_Handler+0x224>)
  401768:	69db      	ldr	r3, [r3, #28]
  40176a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40176e:	d137      	bne.n	4017e0 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  401770:	4b7c      	ldr	r3, [pc, #496]	; (401964 <UDP_Handler+0x224>)
  401772:	69db      	ldr	r3, [r3, #28]
  401774:	f013 0f01 	tst.w	r3, #1
  401778:	f000 81b6 	beq.w	401ae8 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  40177c:	4b79      	ldr	r3, [pc, #484]	; (401964 <UDP_Handler+0x224>)
  40177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401780:	f013 0f04 	tst.w	r3, #4
  401784:	d133      	bne.n	4017ee <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  401786:	4b77      	ldr	r3, [pc, #476]	; (401964 <UDP_Handler+0x224>)
  401788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40178a:	f013 0f01 	tst.w	r3, #1
  40178e:	f040 80c3 	bne.w	401918 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  401792:	4b74      	ldr	r3, [pc, #464]	; (401964 <UDP_Handler+0x224>)
  401794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401796:	f013 0f02 	tst.w	r3, #2
  40179a:	f040 80c0 	bne.w	40191e <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  40179e:	4b71      	ldr	r3, [pc, #452]	; (401964 <UDP_Handler+0x224>)
  4017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017a2:	f013 0f08 	tst.w	r3, #8
  4017a6:	f000 819f 	beq.w	401ae8 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  4017aa:	4a6e      	ldr	r2, [pc, #440]	; (401964 <UDP_Handler+0x224>)
  4017ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017ae:	9300      	str	r3, [sp, #0]
  4017b0:	9b00      	ldr	r3, [sp, #0]
  4017b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017b6:	9300      	str	r3, [sp, #0]
  4017b8:	9b00      	ldr	r3, [sp, #0]
  4017ba:	f023 0308 	bic.w	r3, r3, #8
  4017be:	9300      	str	r3, [sp, #0]
  4017c0:	9b00      	ldr	r3, [sp, #0]
  4017c2:	6313      	str	r3, [r2, #48]	; 0x30
  4017c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017c6:	f013 0f08 	tst.w	r3, #8
  4017ca:	d1fb      	bne.n	4017c4 <UDP_Handler+0x84>
  4017cc:	e005      	b.n	4017da <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  4017ce:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4017d0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4017d4:	2200      	movs	r2, #0
  4017d6:	4b65      	ldr	r3, [pc, #404]	; (40196c <UDP_Handler+0x22c>)
  4017d8:	701a      	strb	r2, [r3, #0]
}
  4017da:	b01b      	add	sp, #108	; 0x6c
  4017dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  4017e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4017e4:	4b5f      	ldr	r3, [pc, #380]	; (401964 <UDP_Handler+0x224>)
  4017e6:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  4017e8:	4b61      	ldr	r3, [pc, #388]	; (401970 <UDP_Handler+0x230>)
  4017ea:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  4017ec:	e7f5      	b.n	4017da <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  4017ee:	4b61      	ldr	r3, [pc, #388]	; (401974 <UDP_Handler+0x234>)
  4017f0:	781b      	ldrb	r3, [r3, #0]
  4017f2:	b9cb      	cbnz	r3, 401828 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  4017f4:	4b5b      	ldr	r3, [pc, #364]	; (401964 <UDP_Handler+0x224>)
  4017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017f8:	f3c3 430a 	ubfx	r3, r3, #16, #11
  4017fc:	2b08      	cmp	r3, #8
  4017fe:	d018      	beq.n	401832 <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  401800:	4a58      	ldr	r2, [pc, #352]	; (401964 <UDP_Handler+0x224>)
  401802:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401804:	9301      	str	r3, [sp, #4]
  401806:	9b01      	ldr	r3, [sp, #4]
  401808:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40180c:	9301      	str	r3, [sp, #4]
  40180e:	9b01      	ldr	r3, [sp, #4]
  401810:	f023 0304 	bic.w	r3, r3, #4
  401814:	9301      	str	r3, [sp, #4]
  401816:	9b01      	ldr	r3, [sp, #4]
  401818:	6313      	str	r3, [r2, #48]	; 0x30
  40181a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40181c:	f013 0f04 	tst.w	r3, #4
  401820:	d1fb      	bne.n	40181a <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  401822:	4b55      	ldr	r3, [pc, #340]	; (401978 <UDP_Handler+0x238>)
  401824:	4798      	blx	r3
  401826:	e7d8      	b.n	4017da <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401828:	4b54      	ldr	r3, [pc, #336]	; (40197c <UDP_Handler+0x23c>)
  40182a:	4798      	blx	r3
		udd_ctrl_init();
  40182c:	4b54      	ldr	r3, [pc, #336]	; (401980 <UDP_Handler+0x240>)
  40182e:	4798      	blx	r3
  401830:	e7e0      	b.n	4017f4 <UDP_Handler+0xb4>
  401832:	4b54      	ldr	r3, [pc, #336]	; (401984 <UDP_Handler+0x244>)
  401834:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401838:	494a      	ldr	r1, [pc, #296]	; (401964 <UDP_Handler+0x224>)
  40183a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  40183c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  401840:	4283      	cmp	r3, r0
  401842:	d1fa      	bne.n	40183a <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  401844:	4b50      	ldr	r3, [pc, #320]	; (401988 <UDP_Handler+0x248>)
  401846:	4798      	blx	r3
  401848:	b998      	cbnz	r0, 401872 <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  40184a:	4a46      	ldr	r2, [pc, #280]	; (401964 <UDP_Handler+0x224>)
  40184c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40184e:	9302      	str	r3, [sp, #8]
  401850:	9b02      	ldr	r3, [sp, #8]
  401852:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401856:	9302      	str	r3, [sp, #8]
  401858:	9b02      	ldr	r3, [sp, #8]
  40185a:	f023 0304 	bic.w	r3, r3, #4
  40185e:	9302      	str	r3, [sp, #8]
  401860:	9b02      	ldr	r3, [sp, #8]
  401862:	6313      	str	r3, [r2, #48]	; 0x30
  401864:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401866:	f013 0f04 	tst.w	r3, #4
  40186a:	d1fb      	bne.n	401864 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  40186c:	4b42      	ldr	r3, [pc, #264]	; (401978 <UDP_Handler+0x238>)
  40186e:	4798      	blx	r3
  401870:	e7b3      	b.n	4017da <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  401872:	4b46      	ldr	r3, [pc, #280]	; (40198c <UDP_Handler+0x24c>)
  401874:	f993 3000 	ldrsb.w	r3, [r3]
  401878:	2b00      	cmp	r3, #0
  40187a:	db1d      	blt.n	4018b8 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  40187c:	4a39      	ldr	r2, [pc, #228]	; (401964 <UDP_Handler+0x224>)
  40187e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401880:	9305      	str	r3, [sp, #20]
  401882:	9b05      	ldr	r3, [sp, #20]
  401884:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401888:	9305      	str	r3, [sp, #20]
  40188a:	9b05      	ldr	r3, [sp, #20]
  40188c:	f023 0304 	bic.w	r3, r3, #4
  401890:	9305      	str	r3, [sp, #20]
  401892:	9b05      	ldr	r3, [sp, #20]
  401894:	6313      	str	r3, [r2, #48]	; 0x30
  401896:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401898:	f013 0f04 	tst.w	r3, #4
  40189c:	d1fb      	bne.n	401896 <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40189e:	4b3b      	ldr	r3, [pc, #236]	; (40198c <UDP_Handler+0x24c>)
  4018a0:	88db      	ldrh	r3, [r3, #6]
  4018a2:	2b00      	cmp	r3, #0
  4018a4:	d035      	beq.n	401912 <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  4018a6:	2300      	movs	r3, #0
  4018a8:	4a39      	ldr	r2, [pc, #228]	; (401990 <UDP_Handler+0x250>)
  4018aa:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4018ac:	4a39      	ldr	r2, [pc, #228]	; (401994 <UDP_Handler+0x254>)
  4018ae:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4018b0:	2201      	movs	r2, #1
  4018b2:	4b30      	ldr	r3, [pc, #192]	; (401974 <UDP_Handler+0x234>)
  4018b4:	701a      	strb	r2, [r3, #0]
  4018b6:	e790      	b.n	4017da <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  4018b8:	4a2a      	ldr	r2, [pc, #168]	; (401964 <UDP_Handler+0x224>)
  4018ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018bc:	9303      	str	r3, [sp, #12]
  4018be:	9b03      	ldr	r3, [sp, #12]
  4018c0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018c4:	9303      	str	r3, [sp, #12]
  4018c6:	9b03      	ldr	r3, [sp, #12]
  4018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4018cc:	9303      	str	r3, [sp, #12]
  4018ce:	9b03      	ldr	r3, [sp, #12]
  4018d0:	6313      	str	r3, [r2, #48]	; 0x30
  4018d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018d4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4018d8:	d0fb      	beq.n	4018d2 <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  4018da:	4a22      	ldr	r2, [pc, #136]	; (401964 <UDP_Handler+0x224>)
  4018dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018de:	9304      	str	r3, [sp, #16]
  4018e0:	9b04      	ldr	r3, [sp, #16]
  4018e2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018e6:	9304      	str	r3, [sp, #16]
  4018e8:	9b04      	ldr	r3, [sp, #16]
  4018ea:	f023 0304 	bic.w	r3, r3, #4
  4018ee:	9304      	str	r3, [sp, #16]
  4018f0:	9b04      	ldr	r3, [sp, #16]
  4018f2:	6313      	str	r3, [r2, #48]	; 0x30
  4018f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018f6:	f013 0f04 	tst.w	r3, #4
  4018fa:	d1fb      	bne.n	4018f4 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  4018fc:	2300      	movs	r3, #0
  4018fe:	4a24      	ldr	r2, [pc, #144]	; (401990 <UDP_Handler+0x250>)
  401900:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401902:	4a24      	ldr	r2, [pc, #144]	; (401994 <UDP_Handler+0x254>)
  401904:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401906:	2202      	movs	r2, #2
  401908:	4b1a      	ldr	r3, [pc, #104]	; (401974 <UDP_Handler+0x234>)
  40190a:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  40190c:	4b22      	ldr	r3, [pc, #136]	; (401998 <UDP_Handler+0x258>)
  40190e:	4798      	blx	r3
  401910:	e763      	b.n	4017da <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  401912:	4b22      	ldr	r3, [pc, #136]	; (40199c <UDP_Handler+0x25c>)
  401914:	4798      	blx	r3
  401916:	e760      	b.n	4017da <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401918:	4b1f      	ldr	r3, [pc, #124]	; (401998 <UDP_Handler+0x258>)
  40191a:	4798      	blx	r3
  40191c:	e75d      	b.n	4017da <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40191e:	4b15      	ldr	r3, [pc, #84]	; (401974 <UDP_Handler+0x234>)
  401920:	781b      	ldrb	r3, [r3, #0]
  401922:	2b01      	cmp	r3, #1
  401924:	d03c      	beq.n	4019a0 <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401926:	2b02      	cmp	r3, #2
  401928:	d004      	beq.n	401934 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40192a:	2b04      	cmp	r3, #4
  40192c:	d002      	beq.n	401934 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  40192e:	4b12      	ldr	r3, [pc, #72]	; (401978 <UDP_Handler+0x238>)
  401930:	4798      	blx	r3
  401932:	e001      	b.n	401938 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  401934:	4b11      	ldr	r3, [pc, #68]	; (40197c <UDP_Handler+0x23c>)
  401936:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401938:	4a0a      	ldr	r2, [pc, #40]	; (401964 <UDP_Handler+0x224>)
  40193a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40193c:	9306      	str	r3, [sp, #24]
  40193e:	9b06      	ldr	r3, [sp, #24]
  401940:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401944:	9306      	str	r3, [sp, #24]
  401946:	9b06      	ldr	r3, [sp, #24]
  401948:	f023 0302 	bic.w	r3, r3, #2
  40194c:	9306      	str	r3, [sp, #24]
  40194e:	9b06      	ldr	r3, [sp, #24]
  401950:	6313      	str	r3, [r2, #48]	; 0x30
  401952:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401954:	f013 0f02 	tst.w	r3, #2
  401958:	d1fb      	bne.n	401952 <UDP_Handler+0x212>
		udd_ctrl_init();
  40195a:	4b09      	ldr	r3, [pc, #36]	; (401980 <UDP_Handler+0x240>)
  40195c:	4798      	blx	r3
  40195e:	e73c      	b.n	4017da <UDP_Handler+0x9a>
  401960:	00400f5d 	.word	0x00400f5d
  401964:	40034000 	.word	0x40034000
  401968:	00400eb5 	.word	0x00400eb5
  40196c:	200000a0 	.word	0x200000a0
  401970:	0040082d 	.word	0x0040082d
  401974:	200006dc 	.word	0x200006dc
  401978:	00401241 	.word	0x00401241
  40197c:	004012b1 	.word	0x004012b1
  401980:	00401229 	.word	0x00401229
  401984:	20002733 	.word	0x20002733
  401988:	0040086d 	.word	0x0040086d
  40198c:	20002734 	.word	0x20002734
  401990:	200006da 	.word	0x200006da
  401994:	200006d8 	.word	0x200006d8
  401998:	004012c1 	.word	0x004012c1
  40199c:	00401279 	.word	0x00401279
	nb_data = udd_byte_count(0);
  4019a0:	4b93      	ldr	r3, [pc, #588]	; (401bf0 <UDP_Handler+0x4b0>)
  4019a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4019a4:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4019a8:	4b92      	ldr	r3, [pc, #584]	; (401bf4 <UDP_Handler+0x4b4>)
  4019aa:	899b      	ldrh	r3, [r3, #12]
  4019ac:	4a92      	ldr	r2, [pc, #584]	; (401bf8 <UDP_Handler+0x4b8>)
  4019ae:	8815      	ldrh	r5, [r2, #0]
  4019b0:	186a      	adds	r2, r5, r1
  4019b2:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  4019b4:	bfbc      	itt	lt
  4019b6:	1b5b      	sublt	r3, r3, r5
  4019b8:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4019ba:	4b8e      	ldr	r3, [pc, #568]	; (401bf4 <UDP_Handler+0x4b4>)
  4019bc:	6898      	ldr	r0, [r3, #8]
  4019be:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4019c0:	b171      	cbz	r1, 4019e0 <UDP_Handler+0x2a0>
  4019c2:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4019c4:	4c8a      	ldr	r4, [pc, #552]	; (401bf0 <UDP_Handler+0x4b0>)
  4019c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4019c8:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  4019cc:	1a13      	subs	r3, r2, r0
  4019ce:	b2db      	uxtb	r3, r3
  4019d0:	428b      	cmp	r3, r1
  4019d2:	d3f8      	bcc.n	4019c6 <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  4019d4:	440d      	add	r5, r1
  4019d6:	b2ad      	uxth	r5, r5
  4019d8:	4b87      	ldr	r3, [pc, #540]	; (401bf8 <UDP_Handler+0x4b8>)
  4019da:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  4019dc:	2940      	cmp	r1, #64	; 0x40
  4019de:	d01a      	beq.n	401a16 <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  4019e0:	4b84      	ldr	r3, [pc, #528]	; (401bf4 <UDP_Handler+0x4b4>)
  4019e2:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  4019e4:	695b      	ldr	r3, [r3, #20]
  4019e6:	b113      	cbz	r3, 4019ee <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  4019e8:	4798      	blx	r3
  4019ea:	2800      	cmp	r0, #0
  4019ec:	d030      	beq.n	401a50 <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  4019ee:	4a80      	ldr	r2, [pc, #512]	; (401bf0 <UDP_Handler+0x4b0>)
  4019f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019f2:	9308      	str	r3, [sp, #32]
  4019f4:	9b08      	ldr	r3, [sp, #32]
  4019f6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019fa:	9308      	str	r3, [sp, #32]
  4019fc:	9b08      	ldr	r3, [sp, #32]
  4019fe:	f023 0302 	bic.w	r3, r3, #2
  401a02:	9308      	str	r3, [sp, #32]
  401a04:	9b08      	ldr	r3, [sp, #32]
  401a06:	6313      	str	r3, [r2, #48]	; 0x30
  401a08:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a0a:	f013 0f02 	tst.w	r3, #2
  401a0e:	d1fb      	bne.n	401a08 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  401a10:	4b7a      	ldr	r3, [pc, #488]	; (401bfc <UDP_Handler+0x4bc>)
  401a12:	4798      	blx	r3
  401a14:	e6e1      	b.n	4017da <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  401a16:	4b77      	ldr	r3, [pc, #476]	; (401bf4 <UDP_Handler+0x4b4>)
  401a18:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401a1a:	4b79      	ldr	r3, [pc, #484]	; (401c00 <UDP_Handler+0x4c0>)
  401a1c:	881b      	ldrh	r3, [r3, #0]
  401a1e:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  401a20:	429a      	cmp	r2, r3
  401a22:	dddd      	ble.n	4019e0 <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401a24:	4b73      	ldr	r3, [pc, #460]	; (401bf4 <UDP_Handler+0x4b4>)
  401a26:	899b      	ldrh	r3, [r3, #12]
  401a28:	42ab      	cmp	r3, r5
  401a2a:	d025      	beq.n	401a78 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  401a2c:	4a70      	ldr	r2, [pc, #448]	; (401bf0 <UDP_Handler+0x4b0>)
  401a2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a30:	930b      	str	r3, [sp, #44]	; 0x2c
  401a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401a34:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a38:	930b      	str	r3, [sp, #44]	; 0x2c
  401a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401a3c:	f023 0302 	bic.w	r3, r3, #2
  401a40:	930b      	str	r3, [sp, #44]	; 0x2c
  401a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401a44:	6313      	str	r3, [r2, #48]	; 0x30
  401a46:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a48:	f013 0f02 	tst.w	r3, #2
  401a4c:	d1fb      	bne.n	401a46 <UDP_Handler+0x306>
  401a4e:	e6c4      	b.n	4017da <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  401a50:	4b6c      	ldr	r3, [pc, #432]	; (401c04 <UDP_Handler+0x4c4>)
  401a52:	4798      	blx	r3
				udd_ack_bank0_received(0);
  401a54:	4a66      	ldr	r2, [pc, #408]	; (401bf0 <UDP_Handler+0x4b0>)
  401a56:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a58:	9307      	str	r3, [sp, #28]
  401a5a:	9b07      	ldr	r3, [sp, #28]
  401a5c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a60:	9307      	str	r3, [sp, #28]
  401a62:	9b07      	ldr	r3, [sp, #28]
  401a64:	f023 0302 	bic.w	r3, r3, #2
  401a68:	9307      	str	r3, [sp, #28]
  401a6a:	9b07      	ldr	r3, [sp, #28]
  401a6c:	6313      	str	r3, [r2, #48]	; 0x30
  401a6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a70:	f013 0f02 	tst.w	r3, #2
  401a74:	d1fb      	bne.n	401a6e <UDP_Handler+0x32e>
  401a76:	e6b0      	b.n	4017da <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  401a78:	4b5e      	ldr	r3, [pc, #376]	; (401bf4 <UDP_Handler+0x4b4>)
  401a7a:	695b      	ldr	r3, [r3, #20]
  401a7c:	b153      	cbz	r3, 401a94 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  401a7e:	4798      	blx	r3
  401a80:	b1e8      	cbz	r0, 401abe <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401a82:	495f      	ldr	r1, [pc, #380]	; (401c00 <UDP_Handler+0x4c0>)
  401a84:	4a5c      	ldr	r2, [pc, #368]	; (401bf8 <UDP_Handler+0x4b8>)
  401a86:	880b      	ldrh	r3, [r1, #0]
  401a88:	8810      	ldrh	r0, [r2, #0]
  401a8a:	4403      	add	r3, r0
  401a8c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  401a8e:	2300      	movs	r3, #0
  401a90:	8013      	strh	r3, [r2, #0]
  401a92:	e7cb      	b.n	401a2c <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  401a94:	4b5b      	ldr	r3, [pc, #364]	; (401c04 <UDP_Handler+0x4c4>)
  401a96:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401a98:	4a55      	ldr	r2, [pc, #340]	; (401bf0 <UDP_Handler+0x4b0>)
  401a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a9c:	9309      	str	r3, [sp, #36]	; 0x24
  401a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401aa0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401aa4:	9309      	str	r3, [sp, #36]	; 0x24
  401aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401aa8:	f023 0302 	bic.w	r3, r3, #2
  401aac:	9309      	str	r3, [sp, #36]	; 0x24
  401aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ab0:	6313      	str	r3, [r2, #48]	; 0x30
  401ab2:	4613      	mov	r3, r2
  401ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ab6:	f012 0f02 	tst.w	r2, #2
  401aba:	d1fb      	bne.n	401ab4 <UDP_Handler+0x374>
  401abc:	e68d      	b.n	4017da <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  401abe:	4b51      	ldr	r3, [pc, #324]	; (401c04 <UDP_Handler+0x4c4>)
  401ac0:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401ac2:	4a4b      	ldr	r2, [pc, #300]	; (401bf0 <UDP_Handler+0x4b0>)
  401ac4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ac6:	930a      	str	r3, [sp, #40]	; 0x28
  401ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401aca:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ace:	930a      	str	r3, [sp, #40]	; 0x28
  401ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ad2:	f023 0302 	bic.w	r3, r3, #2
  401ad6:	930a      	str	r3, [sp, #40]	; 0x28
  401ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401ada:	6313      	str	r3, [r2, #48]	; 0x30
  401adc:	4613      	mov	r3, r2
  401ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ae0:	f012 0f02 	tst.w	r2, #2
  401ae4:	d1fb      	bne.n	401ade <UDP_Handler+0x39e>
  401ae6:	e678      	b.n	4017da <UDP_Handler+0x9a>
  401ae8:	4a47      	ldr	r2, [pc, #284]	; (401c08 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  401aea:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401aec:	f8df e100 	ldr.w	lr, [pc, #256]	; 401bf0 <UDP_Handler+0x4b0>
  401af0:	4618      	mov	r0, r3
  401af2:	e17f      	b.n	401df4 <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  401af4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401af8:	4b43      	ldr	r3, [pc, #268]	; (401c08 <UDP_Handler+0x4c8>)
  401afa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401afe:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  401b02:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401b06:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b08:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  401b0c:	f1b9 0f00 	cmp.w	r9, #0
  401b10:	f000 81df 	beq.w	401ed2 <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401b14:	4b3c      	ldr	r3, [pc, #240]	; (401c08 <UDP_Handler+0x4c8>)
  401b16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401b1a:	f8d3 e008 	ldr.w	lr, [r3, #8]
  401b1e:	68da      	ldr	r2, [r3, #12]
  401b20:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401b24:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401b26:	4548      	cmp	r0, r9
  401b28:	f240 81c7 	bls.w	401eba <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  401b2c:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  401b30:	4b35      	ldr	r3, [pc, #212]	; (401c08 <UDP_Handler+0x4c8>)
  401b32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401b36:	eb02 0009 	add.w	r0, r2, r9
  401b3a:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  401b3c:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  401b3e:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401b42:	4411      	add	r1, r2
  401b44:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401b46:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401b48:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  401b4c:	1a5a      	subs	r2, r3, r1
  401b4e:	4282      	cmp	r2, r0
  401b50:	d3f9      	bcc.n	401b46 <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  401b52:	4630      	mov	r0, r6
  401b54:	4b2d      	ldr	r3, [pc, #180]	; (401c0c <UDP_Handler+0x4cc>)
  401b56:	4798      	blx	r3
	if ((b_full || b_short) &&
  401b58:	f1bb 0f00 	cmp.w	fp, #0
  401b5c:	f000 81bc 	beq.w	401ed8 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  401b60:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  401b62:	f013 0f20 	tst.w	r3, #32
  401b66:	f47f ae38 	bne.w	4017da <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  401b6a:	4b21      	ldr	r3, [pc, #132]	; (401bf0 <UDP_Handler+0x4b0>)
  401b6c:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401b6e:	4b26      	ldr	r3, [pc, #152]	; (401c08 <UDP_Handler+0x4c8>)
  401b70:	00ba      	lsls	r2, r7, #2
  401b72:	19d1      	adds	r1, r2, r7
  401b74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401b78:	68cb      	ldr	r3, [r1, #12]
  401b7a:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401b7c:	4632      	mov	r2, r6
  401b7e:	2100      	movs	r1, #0
  401b80:	4640      	mov	r0, r8
  401b82:	4b23      	ldr	r3, [pc, #140]	; (401c10 <UDP_Handler+0x4d0>)
  401b84:	4798      	blx	r3
  401b86:	e628      	b.n	4017da <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  401b88:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401b8c:	4b1e      	ldr	r3, [pc, #120]	; (401c08 <UDP_Handler+0x4c8>)
  401b8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401b92:	7c53      	ldrb	r3, [r2, #17]
  401b94:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401b98:	3103      	adds	r1, #3
  401b9a:	f361 0383 	bfi	r3, r1, #2, #2
  401b9e:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401ba0:	7c53      	ldrb	r3, [r2, #17]
  401ba2:	f013 0f20 	tst.w	r3, #32
  401ba6:	d05f      	beq.n	401c68 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  401ba8:	f013 0f0c 	tst.w	r3, #12
  401bac:	d032      	beq.n	401c14 <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  401bae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bb0:	930c      	str	r3, [sp, #48]	; 0x30
  401bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401bb4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bb8:	930c      	str	r3, [sp, #48]	; 0x30
  401bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401bbc:	f043 0310 	orr.w	r3, r3, #16
  401bc0:	930c      	str	r3, [sp, #48]	; 0x30
  401bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401bc4:	6323      	str	r3, [r4, #48]	; 0x30
  401bc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bc8:	f013 0f10 	tst.w	r3, #16
  401bcc:	d0fb      	beq.n	401bc6 <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  401bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bd0:	930d      	str	r3, [sp, #52]	; 0x34
  401bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401bd4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bd8:	930d      	str	r3, [sp, #52]	; 0x34
  401bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401bdc:	f023 0301 	bic.w	r3, r3, #1
  401be0:	930d      	str	r3, [sp, #52]	; 0x34
  401be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401be4:	6323      	str	r3, [r4, #48]	; 0x30
  401be6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401be8:	f013 0f01 	tst.w	r3, #1
  401bec:	d1fb      	bne.n	401be6 <UDP_Handler+0x4a6>
  401bee:	e5f4      	b.n	4017da <UDP_Handler+0x9a>
  401bf0:	40034000 	.word	0x40034000
  401bf4:	20002734 	.word	0x20002734
  401bf8:	200006d8 	.word	0x200006d8
  401bfc:	00401279 	.word	0x00401279
  401c00:	200006da 	.word	0x200006da
  401c04:	00401241 	.word	0x00401241
  401c08:	200006e0 	.word	0x200006e0
  401c0c:	004014b9 	.word	0x004014b9
  401c10:	00401479 	.word	0x00401479
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c16:	930e      	str	r3, [sp, #56]	; 0x38
  401c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c1a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c1e:	930e      	str	r3, [sp, #56]	; 0x38
  401c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c22:	f023 0301 	bic.w	r3, r3, #1
  401c26:	930e      	str	r3, [sp, #56]	; 0x38
  401c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401c2a:	6323      	str	r3, [r4, #48]	; 0x30
  401c2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c2e:	f013 0f01 	tst.w	r3, #1
  401c32:	d1fb      	bne.n	401c2c <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401c34:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c36:	930f      	str	r3, [sp, #60]	; 0x3c
  401c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c3a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c3e:	930f      	str	r3, [sp, #60]	; 0x3c
  401c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c42:	f043 0320 	orr.w	r3, r3, #32
  401c46:	930f      	str	r3, [sp, #60]	; 0x3c
  401c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c4a:	6323      	str	r3, [r4, #48]	; 0x30
  401c4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c4e:	f013 0f20 	tst.w	r3, #32
  401c52:	d0fb      	beq.n	401c4c <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401c54:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401c58:	4ba1      	ldr	r3, [pc, #644]	; (401ee0 <UDP_Handler+0x7a0>)
  401c5a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  401c5e:	7c5a      	ldrb	r2, [r3, #17]
  401c60:	f36f 1245 	bfc	r2, #5, #1
  401c64:	745a      	strb	r2, [r3, #17]
  401c66:	e5b8      	b.n	4017da <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401c68:	f013 0f80 	tst.w	r3, #128	; 0x80
  401c6c:	d138      	bne.n	401ce0 <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401c6e:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401c72:	4b9b      	ldr	r3, [pc, #620]	; (401ee0 <UDP_Handler+0x7a0>)
  401c74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401c78:	68da      	ldr	r2, [r3, #12]
  401c7a:	689b      	ldr	r3, [r3, #8]
  401c7c:	429a      	cmp	r2, r3
  401c7e:	d341      	bcc.n	401d04 <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  401c80:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401c84:	4b96      	ldr	r3, [pc, #600]	; (401ee0 <UDP_Handler+0x7a0>)
  401c86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401c8a:	7c5b      	ldrb	r3, [r3, #17]
  401c8c:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401c90:	d138      	bne.n	401d04 <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401c92:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c96:	fab3 f383 	clz	r3, r3
  401c9a:	095b      	lsrs	r3, r3, #5
  401c9c:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  401c9e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401ca0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ca4:	2200      	movs	r2, #0
  401ca6:	4b8f      	ldr	r3, [pc, #572]	; (401ee4 <UDP_Handler+0x7a4>)
  401ca8:	701a      	strb	r2, [r3, #0]
	return flags;
  401caa:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401cac:	4a8e      	ldr	r2, [pc, #568]	; (401ee8 <UDP_Handler+0x7a8>)
  401cae:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  401cb0:	b12b      	cbz	r3, 401cbe <UDP_Handler+0x57e>
		cpu_irq_enable();
  401cb2:	2201      	movs	r2, #1
  401cb4:	4b8b      	ldr	r3, [pc, #556]	; (401ee4 <UDP_Handler+0x7a4>)
  401cb6:	701a      	strb	r2, [r3, #0]
  401cb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401cbc:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401cbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cc0:	9311      	str	r3, [sp, #68]	; 0x44
  401cc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401cc4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401cc8:	9311      	str	r3, [sp, #68]	; 0x44
  401cca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401ccc:	f023 0301 	bic.w	r3, r3, #1
  401cd0:	9311      	str	r3, [sp, #68]	; 0x44
  401cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401cd4:	6323      	str	r3, [r4, #48]	; 0x30
  401cd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cd8:	f013 0f01 	tst.w	r3, #1
  401cdc:	d1fb      	bne.n	401cd6 <UDP_Handler+0x596>
  401cde:	e57c      	b.n	4017da <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  401ce0:	2314      	movs	r3, #20
  401ce2:	4a7f      	ldr	r2, [pc, #508]	; (401ee0 <UDP_Handler+0x7a0>)
  401ce4:	fb03 2307 	mla	r3, r3, r7, r2
  401ce8:	7c59      	ldrb	r1, [r3, #17]
  401cea:	f36f 11c7 	bfc	r1, #7, #1
  401cee:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401cf0:	68da      	ldr	r2, [r3, #12]
  401cf2:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401cf4:	4b7c      	ldr	r3, [pc, #496]	; (401ee8 <UDP_Handler+0x7a8>)
  401cf6:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401cf8:	4632      	mov	r2, r6
  401cfa:	2100      	movs	r1, #0
  401cfc:	4640      	mov	r0, r8
  401cfe:	4b7b      	ldr	r3, [pc, #492]	; (401eec <UDP_Handler+0x7ac>)
  401d00:	4798      	blx	r3
  401d02:	e7b4      	b.n	401c6e <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401d04:	2e00      	cmp	r6, #0
  401d06:	d05b      	beq.n	401dc0 <UDP_Handler+0x680>
  401d08:	2e03      	cmp	r6, #3
  401d0a:	d059      	beq.n	401dc0 <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401d0c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401d10:	4b73      	ldr	r3, [pc, #460]	; (401ee0 <UDP_Handler+0x7a0>)
  401d12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401d16:	7c5b      	ldrb	r3, [r3, #17]
  401d18:	f013 0f0c 	tst.w	r3, #12
  401d1c:	d024      	beq.n	401d68 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  401d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d20:	9312      	str	r3, [sp, #72]	; 0x48
  401d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401d24:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d28:	9312      	str	r3, [sp, #72]	; 0x48
  401d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401d2c:	f043 0310 	orr.w	r3, r3, #16
  401d30:	9312      	str	r3, [sp, #72]	; 0x48
  401d32:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401d34:	6323      	str	r3, [r4, #48]	; 0x30
  401d36:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d38:	f013 0f10 	tst.w	r3, #16
  401d3c:	d0fb      	beq.n	401d36 <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  401d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d40:	9313      	str	r3, [sp, #76]	; 0x4c
  401d42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401d44:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d48:	9313      	str	r3, [sp, #76]	; 0x4c
  401d4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401d4c:	f023 0301 	bic.w	r3, r3, #1
  401d50:	9313      	str	r3, [sp, #76]	; 0x4c
  401d52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401d54:	6323      	str	r3, [r4, #48]	; 0x30
  401d56:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d58:	f013 0f01 	tst.w	r3, #1
  401d5c:	d1fb      	bne.n	401d56 <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  401d5e:	2100      	movs	r1, #0
  401d60:	4630      	mov	r0, r6
  401d62:	4b63      	ldr	r3, [pc, #396]	; (401ef0 <UDP_Handler+0x7b0>)
  401d64:	4798      	blx	r3
  401d66:	e538      	b.n	4017da <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401d68:	2101      	movs	r1, #1
  401d6a:	4630      	mov	r0, r6
  401d6c:	4b60      	ldr	r3, [pc, #384]	; (401ef0 <UDP_Handler+0x7b0>)
  401d6e:	4798      	blx	r3
  401d70:	b1a0      	cbz	r0, 401d9c <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  401d72:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d74:	9314      	str	r3, [sp, #80]	; 0x50
  401d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401d78:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d7c:	9314      	str	r3, [sp, #80]	; 0x50
  401d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401d80:	f023 0301 	bic.w	r3, r3, #1
  401d84:	9314      	str	r3, [sp, #80]	; 0x50
  401d86:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401d88:	6323      	str	r3, [r4, #48]	; 0x30
  401d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d8c:	f013 0f01 	tst.w	r3, #1
  401d90:	d1fb      	bne.n	401d8a <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  401d92:	2100      	movs	r1, #0
  401d94:	4630      	mov	r0, r6
  401d96:	4b56      	ldr	r3, [pc, #344]	; (401ef0 <UDP_Handler+0x7b0>)
  401d98:	4798      	blx	r3
  401d9a:	e51e      	b.n	4017da <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  401d9c:	2314      	movs	r3, #20
  401d9e:	4a50      	ldr	r2, [pc, #320]	; (401ee0 <UDP_Handler+0x7a0>)
  401da0:	fb03 2707 	mla	r7, r3, r7, r2
  401da4:	7c7a      	ldrb	r2, [r7, #17]
  401da6:	f36f 12c7 	bfc	r2, #7, #1
  401daa:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401dac:	68fb      	ldr	r3, [r7, #12]
  401dae:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  401db0:	4b4d      	ldr	r3, [pc, #308]	; (401ee8 <UDP_Handler+0x7a8>)
  401db2:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401db4:	4632      	mov	r2, r6
  401db6:	2100      	movs	r1, #0
  401db8:	4640      	mov	r0, r8
  401dba:	4b4c      	ldr	r3, [pc, #304]	; (401eec <UDP_Handler+0x7ac>)
  401dbc:	4798      	blx	r3
  401dbe:	e7d8      	b.n	401d72 <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401dc0:	2101      	movs	r1, #1
  401dc2:	4630      	mov	r0, r6
  401dc4:	4b4a      	ldr	r3, [pc, #296]	; (401ef0 <UDP_Handler+0x7b0>)
  401dc6:	4798      	blx	r3
				udd_ack_in_sent(ep);
  401dc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401dca:	9315      	str	r3, [sp, #84]	; 0x54
  401dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401dce:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401dd2:	9315      	str	r3, [sp, #84]	; 0x54
  401dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401dd6:	f023 0301 	bic.w	r3, r3, #1
  401dda:	9315      	str	r3, [sp, #84]	; 0x54
  401ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401dde:	6323      	str	r3, [r4, #48]	; 0x30
  401de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401de2:	f013 0f01 	tst.w	r3, #1
  401de6:	d1fb      	bne.n	401de0 <UDP_Handler+0x6a0>
  401de8:	e4f7      	b.n	4017da <UDP_Handler+0x9a>
  401dea:	3301      	adds	r3, #1
  401dec:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401dee:	2b04      	cmp	r3, #4
  401df0:	f000 8086 	beq.w	401f00 <UDP_Handler+0x7c0>
  401df4:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401df6:	f8de 1018 	ldr.w	r1, [lr, #24]
  401dfa:	fa00 f503 	lsl.w	r5, r0, r3
  401dfe:	4229      	tst	r1, r5
  401e00:	d0f3      	beq.n	401dea <UDP_Handler+0x6aa>
  401e02:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401e04:	4690      	mov	r8, r2
  401e06:	009c      	lsls	r4, r3, #2
  401e08:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401e0c:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  401e10:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401e12:	f011 0f42 	tst.w	r1, #66	; 0x42
  401e16:	f47f ae6d 	bne.w	401af4 <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401e1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401e1c:	f011 0f01 	tst.w	r1, #1
  401e20:	f47f aeb2 	bne.w	401b88 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401e24:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401e26:	f011 0f08 	tst.w	r1, #8
  401e2a:	d0de      	beq.n	401dea <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e2e:	9316      	str	r3, [sp, #88]	; 0x58
  401e30:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401e32:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e36:	9316      	str	r3, [sp, #88]	; 0x58
  401e38:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401e3a:	f023 0308 	bic.w	r3, r3, #8
  401e3e:	9316      	str	r3, [sp, #88]	; 0x58
  401e40:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401e42:	6323      	str	r3, [r4, #48]	; 0x30
  401e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e46:	f013 0f08 	tst.w	r3, #8
  401e4a:	d1fb      	bne.n	401e44 <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401e56:	f43f acc0 	beq.w	4017da <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e5c:	e4bd      	b.n	4017da <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401e5e:	4b22      	ldr	r3, [pc, #136]	; (401ee8 <UDP_Handler+0x7a8>)
  401e60:	69db      	ldr	r3, [r3, #28]
  401e62:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401e66:	d050      	beq.n	401f0a <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401e68:	4c1f      	ldr	r4, [pc, #124]	; (401ee8 <UDP_Handler+0x7a8>)
  401e6a:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  401e6e:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  401e70:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  401e72:	2001      	movs	r0, #1
  401e74:	4b1f      	ldr	r3, [pc, #124]	; (401ef4 <UDP_Handler+0x7b4>)
  401e76:	4798      	blx	r3
		udd_ack_suspend();
  401e78:	f44f 7380 	mov.w	r3, #256	; 0x100
  401e7c:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401e7e:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401e80:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401e84:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401e86:	e4a8      	b.n	4017da <UDP_Handler+0x9a>
		udd_ack_suspend();
  401e88:	4b17      	ldr	r3, [pc, #92]	; (401ee8 <UDP_Handler+0x7a8>)
  401e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
  401e8e:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401e90:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401e96:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401e98:	f44f 7200 	mov.w	r2, #512	; 0x200
  401e9c:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401ea2:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401ea4:	2022      	movs	r0, #34	; 0x22
  401ea6:	4b14      	ldr	r3, [pc, #80]	; (401ef8 <UDP_Handler+0x7b8>)
  401ea8:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  401eaa:	2000      	movs	r0, #0
  401eac:	4b11      	ldr	r3, [pc, #68]	; (401ef4 <UDP_Handler+0x7b4>)
  401eae:	4798      	blx	r3
		goto udd_interrupt_end;
  401eb0:	e493      	b.n	4017da <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  401eb2:	4630      	mov	r0, r6
  401eb4:	4b11      	ldr	r3, [pc, #68]	; (401efc <UDP_Handler+0x7bc>)
  401eb6:	4798      	blx	r3
  401eb8:	e652      	b.n	401b60 <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  401eba:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  401ebe:	4b08      	ldr	r3, [pc, #32]	; (401ee0 <UDP_Handler+0x7a0>)
  401ec0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  401ec4:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  401ec8:	2800      	cmp	r0, #0
  401eca:	d0f2      	beq.n	401eb2 <UDP_Handler+0x772>
			b_full = true;
  401ecc:	f04f 0b01 	mov.w	fp, #1
  401ed0:	e637      	b.n	401b42 <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  401ed2:	4630      	mov	r0, r6
  401ed4:	4b09      	ldr	r3, [pc, #36]	; (401efc <UDP_Handler+0x7bc>)
  401ed6:	4798      	blx	r3
	if ((b_full || b_short) &&
  401ed8:	45ca      	cmp	sl, r9
  401eda:	f63f ae41 	bhi.w	401b60 <UDP_Handler+0x420>
  401ede:	e47c      	b.n	4017da <UDP_Handler+0x9a>
  401ee0:	200006e0 	.word	0x200006e0
  401ee4:	200000a0 	.word	0x200000a0
  401ee8:	40034000 	.word	0x40034000
  401eec:	00401479 	.word	0x00401479
  401ef0:	0040158d 	.word	0x0040158d
  401ef4:	00401185 	.word	0x00401185
  401ef8:	00400f09 	.word	0x00400f09
  401efc:	004014b9 	.word	0x004014b9
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401f00:	4b4b      	ldr	r3, [pc, #300]	; (402030 <UDP_Handler+0x8f0>)
  401f02:	699b      	ldr	r3, [r3, #24]
  401f04:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401f08:	d1a9      	bne.n	401e5e <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401f0a:	4b49      	ldr	r3, [pc, #292]	; (402030 <UDP_Handler+0x8f0>)
  401f0c:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401f0e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401f12:	d004      	beq.n	401f1e <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401f14:	4b46      	ldr	r3, [pc, #280]	; (402030 <UDP_Handler+0x8f0>)
  401f16:	69db      	ldr	r3, [r3, #28]
  401f18:	f413 7f00 	tst.w	r3, #512	; 0x200
  401f1c:	d1a4      	bne.n	401e68 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401f1e:	4b44      	ldr	r3, [pc, #272]	; (402030 <UDP_Handler+0x8f0>)
  401f20:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401f22:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401f26:	d004      	beq.n	401f32 <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401f28:	4b41      	ldr	r3, [pc, #260]	; (402030 <UDP_Handler+0x8f0>)
  401f2a:	69db      	ldr	r3, [r3, #28]
  401f2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401f30:	d19a      	bne.n	401e68 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401f32:	4b3f      	ldr	r3, [pc, #252]	; (402030 <UDP_Handler+0x8f0>)
  401f34:	699b      	ldr	r3, [r3, #24]
  401f36:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f3a:	d004      	beq.n	401f46 <UDP_Handler+0x806>
  401f3c:	4b3c      	ldr	r3, [pc, #240]	; (402030 <UDP_Handler+0x8f0>)
  401f3e:	69db      	ldr	r3, [r3, #28]
  401f40:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f44:	d1a0      	bne.n	401e88 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401f46:	4b3a      	ldr	r3, [pc, #232]	; (402030 <UDP_Handler+0x8f0>)
  401f48:	69db      	ldr	r3, [r3, #28]
  401f4a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401f4e:	f43f ac44 	beq.w	4017da <UDP_Handler+0x9a>
		udd_ack_reset();
  401f52:	4c37      	ldr	r4, [pc, #220]	; (402030 <UDP_Handler+0x8f0>)
  401f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401f58:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401f5a:	4e36      	ldr	r6, [pc, #216]	; (402034 <UDP_Handler+0x8f4>)
  401f5c:	2201      	movs	r2, #1
  401f5e:	4611      	mov	r1, r2
  401f60:	4630      	mov	r0, r6
  401f62:	4d35      	ldr	r5, [pc, #212]	; (402038 <UDP_Handler+0x8f8>)
  401f64:	47a8      	blx	r5
  401f66:	2202      	movs	r2, #2
  401f68:	2101      	movs	r1, #1
  401f6a:	f106 0014 	add.w	r0, r6, #20
  401f6e:	47a8      	blx	r5
  401f70:	2203      	movs	r2, #3
  401f72:	2101      	movs	r1, #1
  401f74:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401f78:	47a8      	blx	r5
		udc_reset();
  401f7a:	4b30      	ldr	r3, [pc, #192]	; (40203c <UDP_Handler+0x8fc>)
  401f7c:	4798      	blx	r3
		udd_disable_address_state();
  401f7e:	6863      	ldr	r3, [r4, #4]
  401f80:	f023 0301 	bic.w	r3, r3, #1
  401f84:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401f86:	6863      	ldr	r3, [r4, #4]
  401f88:	f023 0302 	bic.w	r3, r3, #2
  401f8c:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401f8e:	68a3      	ldr	r3, [r4, #8]
  401f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401f94:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401f96:	68a3      	ldr	r3, [r4, #8]
  401f98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401f9c:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401fa0:	9318      	str	r3, [sp, #96]	; 0x60
  401fa2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401fa4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401fa8:	9318      	str	r3, [sp, #96]	; 0x60
  401faa:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401fac:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401fb4:	9318      	str	r3, [sp, #96]	; 0x60
  401fb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401fbc:	9318      	str	r3, [sp, #96]	; 0x60
  401fbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401fc0:	6323      	str	r3, [r4, #48]	; 0x30
  401fc2:	4622      	mov	r2, r4
  401fc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fc6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401fca:	d0fb      	beq.n	401fc4 <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401fcc:	4a18      	ldr	r2, [pc, #96]	; (402030 <UDP_Handler+0x8f0>)
  401fce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fd0:	9319      	str	r3, [sp, #100]	; 0x64
  401fd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401fd4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401fd8:	9319      	str	r3, [sp, #100]	; 0x64
  401fda:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401fe0:	9319      	str	r3, [sp, #100]	; 0x64
  401fe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401fe4:	6313      	str	r3, [r2, #48]	; 0x30
  401fe6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401fe8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401fec:	d0fb      	beq.n	401fe6 <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401fee:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ff2:	fab3 f383 	clz	r3, r3
  401ff6:	095b      	lsrs	r3, r3, #5
  401ff8:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401ffa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401ffc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402000:	2200      	movs	r2, #0
  402002:	4b0f      	ldr	r3, [pc, #60]	; (402040 <UDP_Handler+0x900>)
  402004:	701a      	strb	r2, [r3, #0]
	return flags;
  402006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  402008:	2101      	movs	r1, #1
  40200a:	4a09      	ldr	r2, [pc, #36]	; (402030 <UDP_Handler+0x8f0>)
  40200c:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40200e:	b123      	cbz	r3, 40201a <UDP_Handler+0x8da>
		cpu_irq_enable();
  402010:	4b0b      	ldr	r3, [pc, #44]	; (402040 <UDP_Handler+0x900>)
  402012:	7019      	strb	r1, [r3, #0]
  402014:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402018:	b662      	cpsie	i
		udd_ctrl_init();
  40201a:	4b0a      	ldr	r3, [pc, #40]	; (402044 <UDP_Handler+0x904>)
  40201c:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  40201e:	4b04      	ldr	r3, [pc, #16]	; (402030 <UDP_Handler+0x8f0>)
  402020:	f44f 7280 	mov.w	r2, #256	; 0x100
  402024:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402026:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40202a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  40202c:	f7ff bbd5 	b.w	4017da <UDP_Handler+0x9a>
  402030:	40034000 	.word	0x40034000
  402034:	200006e0 	.word	0x200006e0
  402038:	00401479 	.word	0x00401479
  40203c:	004007e5 	.word	0x004007e5
  402040:	200000a0 	.word	0x200000a0
  402044:	00401229 	.word	0x00401229

00402048 <udd_is_high_speed>:
}
  402048:	2000      	movs	r0, #0
  40204a:	4770      	bx	lr

0040204c <udd_set_address>:
	udd_disable_address_state();
  40204c:	4b0d      	ldr	r3, [pc, #52]	; (402084 <udd_set_address+0x38>)
  40204e:	685a      	ldr	r2, [r3, #4]
  402050:	f022 0201 	bic.w	r2, r2, #1
  402054:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402056:	689a      	ldr	r2, [r3, #8]
  402058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40205c:	609a      	str	r2, [r3, #8]
	if (address) {
  40205e:	4602      	mov	r2, r0
  402060:	b170      	cbz	r0, 402080 <udd_set_address+0x34>
		udd_configure_address(address);
  402062:	6898      	ldr	r0, [r3, #8]
  402064:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  402068:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  40206c:	4310      	orrs	r0, r2
  40206e:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402070:	689a      	ldr	r2, [r3, #8]
  402072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402076:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402078:	685a      	ldr	r2, [r3, #4]
  40207a:	f042 0201 	orr.w	r2, r2, #1
  40207e:	605a      	str	r2, [r3, #4]
  402080:	4770      	bx	lr
  402082:	bf00      	nop
  402084:	40034000 	.word	0x40034000

00402088 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  402088:	4b05      	ldr	r3, [pc, #20]	; (4020a0 <udd_getaddress+0x18>)
  40208a:	685b      	ldr	r3, [r3, #4]
  40208c:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402090:	bf1d      	ittte	ne
  402092:	4b03      	ldrne	r3, [pc, #12]	; (4020a0 <udd_getaddress+0x18>)
  402094:	6898      	ldrne	r0, [r3, #8]
  402096:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  40209a:	2000      	moveq	r0, #0
}
  40209c:	4770      	bx	lr
  40209e:	bf00      	nop
  4020a0:	40034000 	.word	0x40034000

004020a4 <udd_get_frame_number>:
	return udd_frame_number();
  4020a4:	4b02      	ldr	r3, [pc, #8]	; (4020b0 <udd_get_frame_number+0xc>)
  4020a6:	6818      	ldr	r0, [r3, #0]
}
  4020a8:	f3c0 000a 	ubfx	r0, r0, #0, #11
  4020ac:	4770      	bx	lr
  4020ae:	bf00      	nop
  4020b0:	40034000 	.word	0x40034000

004020b4 <udd_get_micro_frame_number>:
}
  4020b4:	2000      	movs	r0, #0
  4020b6:	4770      	bx	lr

004020b8 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4020b8:	4b01      	ldr	r3, [pc, #4]	; (4020c0 <udd_set_setup_payload+0x8>)
  4020ba:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4020bc:	8199      	strh	r1, [r3, #12]
  4020be:	4770      	bx	lr
  4020c0:	20002734 	.word	0x20002734

004020c4 <udd_ep_alloc>:
{
  4020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4020c6:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  4020c8:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  4020cc:	2c03      	cmp	r4, #3
  4020ce:	d867      	bhi.n	4021a0 <udd_ep_alloc+0xdc>
  4020d0:	00a3      	lsls	r3, r4, #2
  4020d2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4020d6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  4020da:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  4020dc:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4020e0:	d161      	bne.n	4021a6 <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4020e2:	f001 0503 	and.w	r5, r1, #3
  4020e6:	2d01      	cmp	r5, #1
  4020e8:	d050      	beq.n	40218c <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4020ea:	1f25      	subs	r5, r4, #4
  4020ec:	b2ed      	uxtb	r5, r5
  4020ee:	2d02      	cmp	r5, #2
  4020f0:	bf34      	ite	cc
  4020f2:	f44f 7500 	movcc.w	r5, #512	; 0x200
  4020f6:	2540      	movcs	r5, #64	; 0x40
  4020f8:	4295      	cmp	r5, r2
  4020fa:	db58      	blt.n	4021ae <udd_ep_alloc+0xea>
  4020fc:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  4020fe:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  402100:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  402104:	4d2b      	ldr	r5, [pc, #172]	; (4021b4 <udd_ep_alloc+0xf0>)
  402106:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  40210a:	f105 0710 	add.w	r7, r5, #16
  40210e:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  402112:	f362 0e09 	bfi	lr, r2, #0, #10
  402116:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  40211a:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  40211c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402120:	f36f 1245 	bfc	r2, #5, #1
  402124:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402126:	2800      	cmp	r0, #0
  402128:	db35      	blt.n	402196 <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  40212a:	4e23      	ldr	r6, [pc, #140]	; (4021b8 <udd_ep_alloc+0xf4>)
  40212c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  40212e:	2201      	movs	r2, #1
  402130:	fa02 f404 	lsl.w	r4, r2, r4
  402134:	4325      	orrs	r5, r4
  402136:	62b5      	str	r5, [r6, #40]	; 0x28
  402138:	4635      	mov	r5, r6
  40213a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  40213c:	4214      	tst	r4, r2
  40213e:	d0fc      	beq.n	40213a <udd_ep_alloc+0x76>
  402140:	4d1d      	ldr	r5, [pc, #116]	; (4021b8 <udd_ep_alloc+0xf4>)
  402142:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  402144:	ea22 0404 	bic.w	r4, r2, r4
  402148:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  40214a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40214c:	9201      	str	r2, [sp, #4]
  40214e:	9a01      	ldr	r2, [sp, #4]
  402150:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402154:	9201      	str	r2, [sp, #4]
  402156:	9a01      	ldr	r2, [sp, #4]
  402158:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  40215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402160:	9201      	str	r2, [sp, #4]
  402162:	2800      	cmp	r0, #0
  402164:	ea4f 2201 	mov.w	r2, r1, lsl #8
  402168:	f402 7240 	and.w	r2, r2, #768	; 0x300
  40216c:	bfb4      	ite	lt
  40216e:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  402172:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  402176:	9901      	ldr	r1, [sp, #4]
  402178:	4311      	orrs	r1, r2
  40217a:	9101      	str	r1, [sp, #4]
  40217c:	9901      	ldr	r1, [sp, #4]
  40217e:	6319      	str	r1, [r3, #48]	; 0x30
  402180:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402182:	ea32 0101 	bics.w	r1, r2, r1
  402186:	d1fb      	bne.n	402180 <udd_ep_alloc+0xbc>
	return true;
  402188:	2001      	movs	r0, #1
  40218a:	e00a      	b.n	4021a2 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40218c:	b16c      	cbz	r4, 4021aa <udd_ep_alloc+0xe6>
  40218e:	2c03      	cmp	r4, #3
  402190:	d1ab      	bne.n	4020ea <udd_ep_alloc+0x26>
		return false;
  402192:	2000      	movs	r0, #0
  402194:	e005      	b.n	4021a2 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  402196:	787a      	ldrb	r2, [r7, #1]
  402198:	f36f 0283 	bfc	r2, #2, #2
  40219c:	707a      	strb	r2, [r7, #1]
  40219e:	e7c4      	b.n	40212a <udd_ep_alloc+0x66>
		return false;
  4021a0:	2000      	movs	r0, #0
}
  4021a2:	b003      	add	sp, #12
  4021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  4021a6:	2000      	movs	r0, #0
  4021a8:	e7fb      	b.n	4021a2 <udd_ep_alloc+0xde>
		return false;
  4021aa:	2000      	movs	r0, #0
  4021ac:	e7f9      	b.n	4021a2 <udd_ep_alloc+0xde>
		return false;
  4021ae:	2000      	movs	r0, #0
  4021b0:	e7f7      	b.n	4021a2 <udd_ep_alloc+0xde>
  4021b2:	bf00      	nop
  4021b4:	200006e0 	.word	0x200006e0
  4021b8:	40034000 	.word	0x40034000

004021bc <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4021bc:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4021c0:	2a03      	cmp	r2, #3
  4021c2:	d822      	bhi.n	40220a <udd_ep_free+0x4e>
{
  4021c4:	b500      	push	{lr}
  4021c6:	b083      	sub	sp, #12
  4021c8:	0091      	lsls	r1, r2, #2
  4021ca:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  4021ce:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  4021d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4021d4:	9301      	str	r3, [sp, #4]
  4021d6:	9b01      	ldr	r3, [sp, #4]
  4021d8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021dc:	9301      	str	r3, [sp, #4]
  4021de:	9b01      	ldr	r3, [sp, #4]
  4021e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  4021e4:	9301      	str	r3, [sp, #4]
  4021e6:	9b01      	ldr	r3, [sp, #4]
  4021e8:	630b      	str	r3, [r1, #48]	; 0x30
  4021ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4021ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4021f0:	d1fb      	bne.n	4021ea <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4021f2:	1e50      	subs	r0, r2, #1
  4021f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021f8:	2101      	movs	r1, #1
  4021fa:	4b04      	ldr	r3, [pc, #16]	; (40220c <udd_ep_free+0x50>)
  4021fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402200:	4b03      	ldr	r3, [pc, #12]	; (402210 <udd_ep_free+0x54>)
  402202:	4798      	blx	r3
}
  402204:	b003      	add	sp, #12
  402206:	f85d fb04 	ldr.w	pc, [sp], #4
  40220a:	4770      	bx	lr
  40220c:	200006e0 	.word	0x200006e0
  402210:	00401479 	.word	0x00401479

00402214 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402214:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402218:	2803      	cmp	r0, #3
  40221a:	d815      	bhi.n	402248 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  40221c:	1e43      	subs	r3, r0, #1
  40221e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402222:	4a0a      	ldr	r2, [pc, #40]	; (40224c <udd_ep_is_halted+0x38>)
  402224:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402228:	7c5b      	ldrb	r3, [r3, #17]
  40222a:	f013 0f20 	tst.w	r3, #32
  40222e:	d109      	bne.n	402244 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402230:	300c      	adds	r0, #12
  402232:	4b07      	ldr	r3, [pc, #28]	; (402250 <udd_ep_is_halted+0x3c>)
  402234:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  402238:	f013 0f28 	tst.w	r3, #40	; 0x28
  40223c:	bf14      	ite	ne
  40223e:	2001      	movne	r0, #1
  402240:	2000      	moveq	r0, #0
  402242:	4770      	bx	lr
  402244:	2001      	movs	r0, #1
  402246:	4770      	bx	lr
		return false;
  402248:	2000      	movs	r0, #0
}
  40224a:	4770      	bx	lr
  40224c:	200006e0 	.word	0x200006e0
  402250:	40034000 	.word	0x40034000

00402254 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402254:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402258:	2903      	cmp	r1, #3
  40225a:	d85f      	bhi.n	40231c <udd_ep_set_halt+0xc8>
{
  40225c:	b410      	push	{r4}
  40225e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402260:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402264:	fab3 f383 	clz	r3, r3
  402268:	095b      	lsrs	r3, r3, #5
  40226a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40226c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40226e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402272:	2200      	movs	r2, #0
  402274:	4b2c      	ldr	r3, [pc, #176]	; (402328 <udd_ep_set_halt+0xd4>)
  402276:	701a      	strb	r2, [r3, #0]
	return flags;
  402278:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40227a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40227e:	d124      	bne.n	4022ca <udd_ep_set_halt+0x76>
  402280:	008a      	lsls	r2, r1, #2
  402282:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402286:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  40228a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40228c:	9300      	str	r3, [sp, #0]
  40228e:	9b00      	ldr	r3, [sp, #0]
  402290:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402294:	9300      	str	r3, [sp, #0]
  402296:	9b00      	ldr	r3, [sp, #0]
  402298:	f043 0320 	orr.w	r3, r3, #32
  40229c:	9300      	str	r3, [sp, #0]
  40229e:	9b00      	ldr	r3, [sp, #0]
  4022a0:	6313      	str	r3, [r2, #48]	; 0x30
  4022a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4022a4:	f013 0f20 	tst.w	r3, #32
  4022a8:	d0fb      	beq.n	4022a2 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  4022aa:	2301      	movs	r3, #1
  4022ac:	fa03 f101 	lsl.w	r1, r3, r1
  4022b0:	4b1e      	ldr	r3, [pc, #120]	; (40232c <udd_ep_set_halt+0xd8>)
  4022b2:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4022b4:	2c00      	cmp	r4, #0
  4022b6:	d035      	beq.n	402324 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  4022b8:	2001      	movs	r0, #1
  4022ba:	4b1b      	ldr	r3, [pc, #108]	; (402328 <udd_ep_set_halt+0xd4>)
  4022bc:	7018      	strb	r0, [r3, #0]
  4022be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4022c2:	b662      	cpsie	i
}
  4022c4:	b003      	add	sp, #12
  4022c6:	bc10      	pop	{r4}
  4022c8:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4022ca:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4022cc:	f101 020c 	add.w	r2, r1, #12
  4022d0:	4816      	ldr	r0, [pc, #88]	; (40232c <udd_ep_set_halt+0xd8>)
  4022d2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4022d6:	f012 0f10 	tst.w	r2, #16
  4022da:	d109      	bne.n	4022f0 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  4022dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4022e0:	4813      	ldr	r0, [pc, #76]	; (402330 <udd_ep_set_halt+0xdc>)
  4022e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4022e6:	7c52      	ldrb	r2, [r2, #17]
  4022e8:	f3c2 0281 	ubfx	r2, r2, #2, #2
  4022ec:	2a01      	cmp	r2, #1
  4022ee:	ddc7      	ble.n	402280 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  4022f0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4022f4:	4b0e      	ldr	r3, [pc, #56]	; (402330 <udd_ep_set_halt+0xdc>)
  4022f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022fa:	7c5a      	ldrb	r2, [r3, #17]
  4022fc:	f042 0220 	orr.w	r2, r2, #32
  402300:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402302:	2301      	movs	r3, #1
  402304:	fa03 f101 	lsl.w	r1, r3, r1
  402308:	4b08      	ldr	r3, [pc, #32]	; (40232c <udd_ep_set_halt+0xd8>)
  40230a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40230c:	b144      	cbz	r4, 402320 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  40230e:	2001      	movs	r0, #1
  402310:	4b05      	ldr	r3, [pc, #20]	; (402328 <udd_ep_set_halt+0xd4>)
  402312:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  402314:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402318:	b662      	cpsie	i
  40231a:	e7d3      	b.n	4022c4 <udd_ep_set_halt+0x70>
		return false;
  40231c:	2000      	movs	r0, #0
  40231e:	4770      	bx	lr
		return true;
  402320:	2001      	movs	r0, #1
  402322:	e7cf      	b.n	4022c4 <udd_ep_set_halt+0x70>
	return true;
  402324:	2001      	movs	r0, #1
  402326:	e7cd      	b.n	4022c4 <udd_ep_set_halt+0x70>
  402328:	200000a0 	.word	0x200000a0
  40232c:	40034000 	.word	0x40034000
  402330:	200006e0 	.word	0x200006e0

00402334 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  402334:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402338:	2803      	cmp	r0, #3
  40233a:	d85e      	bhi.n	4023fa <udd_ep_clear_halt+0xc6>
{
  40233c:	b530      	push	{r4, r5, lr}
  40233e:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  402340:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  402342:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  402346:	4b2f      	ldr	r3, [pc, #188]	; (402404 <udd_ep_clear_halt+0xd0>)
  402348:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40234c:	7c5a      	ldrb	r2, [r3, #17]
  40234e:	f36f 1245 	bfc	r2, #5, #1
  402352:	745a      	strb	r2, [r3, #17]
  402354:	0083      	lsls	r3, r0, #2
  402356:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40235a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  40235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402360:	f012 0f20 	tst.w	r2, #32
  402364:	d04b      	beq.n	4023fe <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  402366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402368:	9200      	str	r2, [sp, #0]
  40236a:	9a00      	ldr	r2, [sp, #0]
  40236c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402370:	9200      	str	r2, [sp, #0]
  402372:	9a00      	ldr	r2, [sp, #0]
  402374:	f022 0220 	bic.w	r2, r2, #32
  402378:	9200      	str	r2, [sp, #0]
  40237a:	9a00      	ldr	r2, [sp, #0]
  40237c:	631a      	str	r2, [r3, #48]	; 0x30
  40237e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402380:	f012 0f20 	tst.w	r2, #32
  402384:	d1fb      	bne.n	40237e <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  402386:	4d20      	ldr	r5, [pc, #128]	; (402408 <udd_ep_clear_halt+0xd4>)
  402388:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  40238a:	2201      	movs	r2, #1
  40238c:	fa02 f000 	lsl.w	r0, r2, r0
  402390:	4301      	orrs	r1, r0
  402392:	62a9      	str	r1, [r5, #40]	; 0x28
  402394:	4629      	mov	r1, r5
  402396:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402398:	4210      	tst	r0, r2
  40239a:	d0fc      	beq.n	402396 <udd_ep_clear_halt+0x62>
  40239c:	491a      	ldr	r1, [pc, #104]	; (402408 <udd_ep_clear_halt+0xd4>)
  40239e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  4023a0:	ea22 0000 	bic.w	r0, r2, r0
  4023a4:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  4023a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023a8:	9201      	str	r2, [sp, #4]
  4023aa:	9a01      	ldr	r2, [sp, #4]
  4023ac:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4023b0:	9201      	str	r2, [sp, #4]
  4023b2:	9a01      	ldr	r2, [sp, #4]
  4023b4:	f022 0208 	bic.w	r2, r2, #8
  4023b8:	9201      	str	r2, [sp, #4]
  4023ba:	9a01      	ldr	r2, [sp, #4]
  4023bc:	631a      	str	r2, [r3, #48]	; 0x30
  4023be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023c0:	f012 0f08 	tst.w	r2, #8
  4023c4:	d1fb      	bne.n	4023be <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  4023c6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4023ca:	4a0e      	ldr	r2, [pc, #56]	; (402404 <udd_ep_clear_halt+0xd0>)
  4023cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4023d0:	7c5b      	ldrb	r3, [r3, #17]
  4023d2:	f013 0f10 	tst.w	r3, #16
  4023d6:	d101      	bne.n	4023dc <udd_ep_clear_halt+0xa8>
	return true;
  4023d8:	2001      	movs	r0, #1
  4023da:	e011      	b.n	402400 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  4023dc:	4611      	mov	r1, r2
  4023de:	00a2      	lsls	r2, r4, #2
  4023e0:	1913      	adds	r3, r2, r4
  4023e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4023e6:	7c58      	ldrb	r0, [r3, #17]
  4023e8:	f36f 1004 	bfc	r0, #4, #1
  4023ec:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  4023ee:	4414      	add	r4, r2
  4023f0:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  4023f4:	4798      	blx	r3
	return true;
  4023f6:	2001      	movs	r0, #1
  4023f8:	e002      	b.n	402400 <udd_ep_clear_halt+0xcc>
		return false;
  4023fa:	2000      	movs	r0, #0
  4023fc:	4770      	bx	lr
	return true;
  4023fe:	2001      	movs	r0, #1
}
  402400:	b003      	add	sp, #12
  402402:	bd30      	pop	{r4, r5, pc}
  402404:	200006e0 	.word	0x200006e0
  402408:	40034000 	.word	0x40034000

0040240c <udd_ep_run>:
{
  40240c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40240e:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402410:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402414:	2f03      	cmp	r7, #3
  402416:	f200 80a2 	bhi.w	40255e <udd_ep_run+0x152>
  40241a:	00bc      	lsls	r4, r7, #2
  40241c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402420:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  402424:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402426:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  40242a:	f000 809b 	beq.w	402564 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  40242e:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  402430:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402434:	4e50      	ldr	r6, [pc, #320]	; (402578 <udd_ep_run+0x16c>)
  402436:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  40243a:	7c76      	ldrb	r6, [r6, #17]
  40243c:	f016 0f20 	tst.w	r6, #32
  402440:	f040 8092 	bne.w	402568 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402444:	6b26      	ldr	r6, [r4, #48]	; 0x30
  402446:	f016 0f20 	tst.w	r6, #32
  40244a:	f040 808f 	bne.w	40256c <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40244e:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402452:	fab6 f686 	clz	r6, r6
  402456:	0976      	lsrs	r6, r6, #5
  402458:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40245a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40245c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402460:	f04f 0e00 	mov.w	lr, #0
  402464:	4e45      	ldr	r6, [pc, #276]	; (40257c <udd_ep_run+0x170>)
  402466:	f886 e000 	strb.w	lr, [r6]
	return flags;
  40246a:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  40246e:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402472:	4e41      	ldr	r6, [pc, #260]	; (402578 <udd_ep_run+0x16c>)
  402474:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402478:	7c76      	ldrb	r6, [r6, #17]
  40247a:	f016 0f10 	tst.w	r6, #16
  40247e:	d00a      	beq.n	402496 <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402480:	f1bc 0f00 	cmp.w	ip, #0
  402484:	d074      	beq.n	402570 <udd_ep_run+0x164>
		cpu_irq_enable();
  402486:	2201      	movs	r2, #1
  402488:	4b3c      	ldr	r3, [pc, #240]	; (40257c <udd_ep_run+0x170>)
  40248a:	701a      	strb	r2, [r3, #0]
  40248c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402490:	b662      	cpsie	i
		return false; // Job already on going
  402492:	2000      	movs	r0, #0
  402494:	e064      	b.n	402560 <udd_ep_run+0x154>
	ptr_job->busy = true;
  402496:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40249a:	4e37      	ldr	r6, [pc, #220]	; (402578 <udd_ep_run+0x16c>)
  40249c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4024a0:	f896 e011 	ldrb.w	lr, [r6, #17]
  4024a4:	f04e 0e10 	orr.w	lr, lr, #16
  4024a8:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  4024ac:	f1bc 0f00 	cmp.w	ip, #0
  4024b0:	d007      	beq.n	4024c2 <udd_ep_run+0xb6>
		cpu_irq_enable();
  4024b2:	f04f 0e01 	mov.w	lr, #1
  4024b6:	4e31      	ldr	r6, [pc, #196]	; (40257c <udd_ep_run+0x170>)
  4024b8:	f886 e000 	strb.w	lr, [r6]
  __ASM volatile ("dmb 0xF":::"memory");
  4024bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024c0:	b662      	cpsie	i
	ptr_job->buf = buf;
  4024c2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402578 <udd_ep_run+0x16c>
  4024c6:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  4024ca:	00b6      	lsls	r6, r6, #2
  4024cc:	eb0c 0e06 	add.w	lr, ip, r6
  4024d0:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4024d4:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4024d8:	2200      	movs	r2, #0
  4024da:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  4024de:	9a08      	ldr	r2, [sp, #32]
  4024e0:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4024e4:	b911      	cbnz	r1, 4024ec <udd_ep_run+0xe0>
  4024e6:	fab3 f183 	clz	r1, r3
  4024ea:	0949      	lsrs	r1, r1, #5
  4024ec:	4a22      	ldr	r2, [pc, #136]	; (402578 <udd_ep_run+0x16c>)
  4024ee:	00ae      	lsls	r6, r5, #2
  4024f0:	1973      	adds	r3, r6, r5
  4024f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4024f6:	7c5b      	ldrb	r3, [r3, #17]
  4024f8:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  4024fc:	4435      	add	r5, r6
  4024fe:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  402502:	f36f 13c7 	bfc	r3, #7, #1
  402506:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402508:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40250c:	fab3 f383 	clz	r3, r3
  402510:	095b      	lsrs	r3, r3, #5
  402512:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402514:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402516:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40251a:	2200      	movs	r2, #0
  40251c:	4b17      	ldr	r3, [pc, #92]	; (40257c <udd_ep_run+0x170>)
  40251e:	701a      	strb	r2, [r3, #0]
	return flags;
  402520:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  402522:	2301      	movs	r3, #1
  402524:	40bb      	lsls	r3, r7
  402526:	4a16      	ldr	r2, [pc, #88]	; (402580 <udd_ep_run+0x174>)
  402528:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  40252a:	f010 0f80 	tst.w	r0, #128	; 0x80
  40252e:	d107      	bne.n	402540 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  402530:	b305      	cbz	r5, 402574 <udd_ep_run+0x168>
		cpu_irq_enable();
  402532:	2001      	movs	r0, #1
  402534:	4b11      	ldr	r3, [pc, #68]	; (40257c <udd_ep_run+0x170>)
  402536:	7018      	strb	r0, [r3, #0]
  402538:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40253c:	b662      	cpsie	i
  40253e:	e00f      	b.n	402560 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  402540:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402542:	f013 0f11 	tst.w	r3, #17
  402546:	d1f3      	bne.n	402530 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  402548:	2101      	movs	r1, #1
  40254a:	4638      	mov	r0, r7
  40254c:	4b0d      	ldr	r3, [pc, #52]	; (402584 <udd_ep_run+0x178>)
  40254e:	4798      	blx	r3
  402550:	2800      	cmp	r0, #0
  402552:	d0ed      	beq.n	402530 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  402554:	2100      	movs	r1, #0
  402556:	4638      	mov	r0, r7
  402558:	4b0a      	ldr	r3, [pc, #40]	; (402584 <udd_ep_run+0x178>)
  40255a:	4798      	blx	r3
  40255c:	e7e8      	b.n	402530 <udd_ep_run+0x124>
		return false;
  40255e:	2000      	movs	r0, #0
}
  402560:	b003      	add	sp, #12
  402562:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  402564:	2000      	movs	r0, #0
  402566:	e7fb      	b.n	402560 <udd_ep_run+0x154>
  402568:	2000      	movs	r0, #0
  40256a:	e7f9      	b.n	402560 <udd_ep_run+0x154>
  40256c:	2000      	movs	r0, #0
  40256e:	e7f7      	b.n	402560 <udd_ep_run+0x154>
		return false; // Job already on going
  402570:	2000      	movs	r0, #0
  402572:	e7f5      	b.n	402560 <udd_ep_run+0x154>
	return true;
  402574:	2001      	movs	r0, #1
  402576:	e7f3      	b.n	402560 <udd_ep_run+0x154>
  402578:	200006e0 	.word	0x200006e0
  40257c:	200000a0 	.word	0x200000a0
  402580:	40034000 	.word	0x40034000
  402584:	0040158d 	.word	0x0040158d

00402588 <udd_ep_abort>:
{
  402588:	b5f0      	push	{r4, r5, r6, r7, lr}
  40258a:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  40258c:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402590:	2d03      	cmp	r5, #3
  402592:	d840      	bhi.n	402616 <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402594:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402598:	fab3 f383 	clz	r3, r3
  40259c:	095b      	lsrs	r3, r3, #5
  40259e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  4025a0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4025a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4025a6:	2200      	movs	r2, #0
  4025a8:	4b4b      	ldr	r3, [pc, #300]	; (4026d8 <udd_ep_abort+0x150>)
  4025aa:	701a      	strb	r2, [r3, #0]
	return flags;
  4025ac:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  4025ae:	2401      	movs	r4, #1
  4025b0:	40ac      	lsls	r4, r5
  4025b2:	4a4a      	ldr	r2, [pc, #296]	; (4026dc <udd_ep_abort+0x154>)
  4025b4:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4025b6:	b12b      	cbz	r3, 4025c4 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  4025b8:	2201      	movs	r2, #1
  4025ba:	4b47      	ldr	r3, [pc, #284]	; (4026d8 <udd_ep_abort+0x150>)
  4025bc:	701a      	strb	r2, [r3, #0]
  4025be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025c2:	b662      	cpsie	i
	if (b_dir_in) {
  4025c4:	f010 0f80 	tst.w	r0, #128	; 0x80
  4025c8:	d127      	bne.n	40261a <udd_ep_abort+0x92>
  4025ca:	00ae      	lsls	r6, r5, #2
  4025cc:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  4025d0:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  4025d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4025d6:	f013 0f42 	tst.w	r3, #66	; 0x42
  4025da:	d006      	beq.n	4025ea <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  4025dc:	4f40      	ldr	r7, [pc, #256]	; (4026e0 <udd_ep_abort+0x158>)
  4025de:	4628      	mov	r0, r5
  4025e0:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  4025e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4025e4:	f013 0f42 	tst.w	r3, #66	; 0x42
  4025e8:	d1f9      	bne.n	4025de <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  4025ea:	4a3c      	ldr	r2, [pc, #240]	; (4026dc <udd_ep_abort+0x154>)
  4025ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4025ee:	4323      	orrs	r3, r4
  4025f0:	6293      	str	r3, [r2, #40]	; 0x28
  4025f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4025f4:	421c      	tst	r4, r3
  4025f6:	d0fc      	beq.n	4025f2 <udd_ep_abort+0x6a>
  4025f8:	4a38      	ldr	r2, [pc, #224]	; (4026dc <udd_ep_abort+0x154>)
  4025fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4025fc:	ea23 0404 	bic.w	r4, r3, r4
  402600:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402602:	1e68      	subs	r0, r5, #1
  402604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402608:	462a      	mov	r2, r5
  40260a:	2101      	movs	r1, #1
  40260c:	4b35      	ldr	r3, [pc, #212]	; (4026e4 <udd_ep_abort+0x15c>)
  40260e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402612:	4b35      	ldr	r3, [pc, #212]	; (4026e8 <udd_ep_abort+0x160>)
  402614:	4798      	blx	r3
}
  402616:	b007      	add	sp, #28
  402618:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40261a:	00ab      	lsls	r3, r5, #2
  40261c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402620:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  402624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402626:	f012 0f10 	tst.w	r2, #16
  40262a:	d03a      	beq.n	4026a2 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  40262c:	b34d      	cbz	r5, 402682 <udd_ep_abort+0xfa>
  40262e:	2d03      	cmp	r5, #3
  402630:	d027      	beq.n	402682 <udd_ep_abort+0xfa>
  402632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402634:	9201      	str	r2, [sp, #4]
  402636:	9a01      	ldr	r2, [sp, #4]
  402638:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40263c:	9201      	str	r2, [sp, #4]
  40263e:	9a01      	ldr	r2, [sp, #4]
  402640:	f022 0210 	bic.w	r2, r2, #16
  402644:	9201      	str	r2, [sp, #4]
  402646:	9a01      	ldr	r2, [sp, #4]
  402648:	631a      	str	r2, [r3, #48]	; 0x30
  40264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40264c:	f012 0f10 	tst.w	r2, #16
  402650:	d1fb      	bne.n	40264a <udd_ep_abort+0xc2>
  402652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402654:	f012 0f10 	tst.w	r2, #16
  402658:	d1fb      	bne.n	402652 <udd_ep_abort+0xca>
  40265a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40265c:	9202      	str	r2, [sp, #8]
  40265e:	9a02      	ldr	r2, [sp, #8]
  402660:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402664:	9202      	str	r2, [sp, #8]
  402666:	9a02      	ldr	r2, [sp, #8]
  402668:	f042 0210 	orr.w	r2, r2, #16
  40266c:	9202      	str	r2, [sp, #8]
  40266e:	9a02      	ldr	r2, [sp, #8]
  402670:	631a      	str	r2, [r3, #48]	; 0x30
  402672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402674:	f012 0f10 	tst.w	r2, #16
  402678:	d0fb      	beq.n	402672 <udd_ep_abort+0xea>
  40267a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40267c:	f012 0f10 	tst.w	r2, #16
  402680:	d0fb      	beq.n	40267a <udd_ep_abort+0xf2>
  402682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402684:	9203      	str	r2, [sp, #12]
  402686:	9a03      	ldr	r2, [sp, #12]
  402688:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40268c:	9203      	str	r2, [sp, #12]
  40268e:	9a03      	ldr	r2, [sp, #12]
  402690:	f022 0210 	bic.w	r2, r2, #16
  402694:	9203      	str	r2, [sp, #12]
  402696:	9a03      	ldr	r2, [sp, #12]
  402698:	631a      	str	r2, [r3, #48]	; 0x30
  40269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40269c:	f012 0f10 	tst.w	r2, #16
  4026a0:	d1fb      	bne.n	40269a <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  4026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026a4:	9204      	str	r2, [sp, #16]
  4026a6:	9a04      	ldr	r2, [sp, #16]
  4026a8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4026ac:	9204      	str	r2, [sp, #16]
  4026ae:	9a04      	ldr	r2, [sp, #16]
  4026b0:	f022 0201 	bic.w	r2, r2, #1
  4026b4:	9204      	str	r2, [sp, #16]
  4026b6:	9a04      	ldr	r2, [sp, #16]
  4026b8:	631a      	str	r2, [r3, #48]	; 0x30
  4026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026bc:	f012 0f01 	tst.w	r2, #1
  4026c0:	d1fb      	bne.n	4026ba <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  4026c2:	1e6b      	subs	r3, r5, #1
  4026c4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4026c8:	4b06      	ldr	r3, [pc, #24]	; (4026e4 <udd_ep_abort+0x15c>)
  4026ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4026ce:	7c5a      	ldrb	r2, [r3, #17]
  4026d0:	f36f 0283 	bfc	r2, #2, #2
  4026d4:	745a      	strb	r2, [r3, #17]
  4026d6:	e788      	b.n	4025ea <udd_ep_abort+0x62>
  4026d8:	200000a0 	.word	0x200000a0
  4026dc:	40034000 	.word	0x40034000
  4026e0:	004014b9 	.word	0x004014b9
  4026e4:	200006e0 	.word	0x200006e0
  4026e8:	00401479 	.word	0x00401479

004026ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4026ec:	e7fe      	b.n	4026ec <Dummy_Handler>
	...

004026f0 <Reset_Handler>:
{
  4026f0:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4026f2:	4b21      	ldr	r3, [pc, #132]	; (402778 <Reset_Handler+0x88>)
  4026f4:	4a21      	ldr	r2, [pc, #132]	; (40277c <Reset_Handler+0x8c>)
  4026f6:	429a      	cmp	r2, r3
  4026f8:	d928      	bls.n	40274c <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4026fa:	4b21      	ldr	r3, [pc, #132]	; (402780 <Reset_Handler+0x90>)
  4026fc:	4a1e      	ldr	r2, [pc, #120]	; (402778 <Reset_Handler+0x88>)
  4026fe:	429a      	cmp	r2, r3
  402700:	d20c      	bcs.n	40271c <Reset_Handler+0x2c>
  402702:	3b01      	subs	r3, #1
  402704:	1a9b      	subs	r3, r3, r2
  402706:	f023 0303 	bic.w	r3, r3, #3
  40270a:	3304      	adds	r3, #4
  40270c:	4413      	add	r3, r2
  40270e:	491b      	ldr	r1, [pc, #108]	; (40277c <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  402710:	f851 0b04 	ldr.w	r0, [r1], #4
  402714:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  402718:	429a      	cmp	r2, r3
  40271a:	d1f9      	bne.n	402710 <Reset_Handler+0x20>
	__NOP();
  40271c:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40271e:	4b19      	ldr	r3, [pc, #100]	; (402784 <Reset_Handler+0x94>)
  402720:	4a19      	ldr	r2, [pc, #100]	; (402788 <Reset_Handler+0x98>)
  402722:	429a      	cmp	r2, r3
  402724:	d20a      	bcs.n	40273c <Reset_Handler+0x4c>
  402726:	3b01      	subs	r3, #1
  402728:	1a9b      	subs	r3, r3, r2
  40272a:	f023 0303 	bic.w	r3, r3, #3
  40272e:	3304      	adds	r3, #4
  402730:	4413      	add	r3, r2
		*pDest++ = 0;
  402732:	2100      	movs	r1, #0
  402734:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  402738:	429a      	cmp	r2, r3
  40273a:	d1fb      	bne.n	402734 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  40273c:	4b13      	ldr	r3, [pc, #76]	; (40278c <Reset_Handler+0x9c>)
  40273e:	4a14      	ldr	r2, [pc, #80]	; (402790 <Reset_Handler+0xa0>)
  402740:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  402742:	4b14      	ldr	r3, [pc, #80]	; (402794 <Reset_Handler+0xa4>)
  402744:	4798      	blx	r3
	main();
  402746:	4b14      	ldr	r3, [pc, #80]	; (402798 <Reset_Handler+0xa8>)
  402748:	4798      	blx	r3
  40274a:	e7fe      	b.n	40274a <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  40274c:	4b0a      	ldr	r3, [pc, #40]	; (402778 <Reset_Handler+0x88>)
  40274e:	4a0b      	ldr	r2, [pc, #44]	; (40277c <Reset_Handler+0x8c>)
  402750:	429a      	cmp	r2, r3
  402752:	d2e3      	bcs.n	40271c <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  402754:	4b0a      	ldr	r3, [pc, #40]	; (402780 <Reset_Handler+0x90>)
  402756:	4808      	ldr	r0, [pc, #32]	; (402778 <Reset_Handler+0x88>)
  402758:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40275a:	4611      	mov	r1, r2
  40275c:	3a04      	subs	r2, #4
  40275e:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  402760:	2800      	cmp	r0, #0
  402762:	d0db      	beq.n	40271c <Reset_Handler+0x2c>
  402764:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  402768:	f852 0904 	ldr.w	r0, [r2], #-4
  40276c:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  402770:	42ca      	cmn	r2, r1
  402772:	d1f9      	bne.n	402768 <Reset_Handler+0x78>
  402774:	e7d2      	b.n	40271c <Reset_Handler+0x2c>
  402776:	bf00      	nop
  402778:	20000000 	.word	0x20000000
  40277c:	00403684 	.word	0x00403684
  402780:	200004ec 	.word	0x200004ec
  402784:	20006f94 	.word	0x20006f94
  402788:	200004ec 	.word	0x200004ec
  40278c:	e000ed00 	.word	0xe000ed00
  402790:	00400000 	.word	0x00400000
  402794:	00403425 	.word	0x00403425
  402798:	00403315 	.word	0x00403315

0040279c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40279c:	4b3c      	ldr	r3, [pc, #240]	; (402890 <SystemCoreClockUpdate+0xf4>)
  40279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027a0:	f003 0303 	and.w	r3, r3, #3
  4027a4:	2b03      	cmp	r3, #3
  4027a6:	d80e      	bhi.n	4027c6 <SystemCoreClockUpdate+0x2a>
  4027a8:	e8df f003 	tbb	[pc, r3]
  4027ac:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4027b0:	4b38      	ldr	r3, [pc, #224]	; (402894 <SystemCoreClockUpdate+0xf8>)
  4027b2:	695b      	ldr	r3, [r3, #20]
  4027b4:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4027b8:	bf14      	ite	ne
  4027ba:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4027be:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4027c2:	4b35      	ldr	r3, [pc, #212]	; (402898 <SystemCoreClockUpdate+0xfc>)
  4027c4:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4027c6:	4b32      	ldr	r3, [pc, #200]	; (402890 <SystemCoreClockUpdate+0xf4>)
  4027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4027ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027ce:	2b70      	cmp	r3, #112	; 0x70
  4027d0:	d055      	beq.n	40287e <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4027d2:	4b2f      	ldr	r3, [pc, #188]	; (402890 <SystemCoreClockUpdate+0xf4>)
  4027d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  4027d6:	4930      	ldr	r1, [pc, #192]	; (402898 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4027d8:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  4027dc:	680b      	ldr	r3, [r1, #0]
  4027de:	40d3      	lsrs	r3, r2
  4027e0:	600b      	str	r3, [r1, #0]
  4027e2:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4027e4:	4b2a      	ldr	r3, [pc, #168]	; (402890 <SystemCoreClockUpdate+0xf4>)
  4027e6:	6a1b      	ldr	r3, [r3, #32]
  4027e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4027ec:	d003      	beq.n	4027f6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4027ee:	4a2b      	ldr	r2, [pc, #172]	; (40289c <SystemCoreClockUpdate+0x100>)
  4027f0:	4b29      	ldr	r3, [pc, #164]	; (402898 <SystemCoreClockUpdate+0xfc>)
  4027f2:	601a      	str	r2, [r3, #0]
  4027f4:	e7e7      	b.n	4027c6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4027f6:	4a2a      	ldr	r2, [pc, #168]	; (4028a0 <SystemCoreClockUpdate+0x104>)
  4027f8:	4b27      	ldr	r3, [pc, #156]	; (402898 <SystemCoreClockUpdate+0xfc>)
  4027fa:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4027fc:	4b24      	ldr	r3, [pc, #144]	; (402890 <SystemCoreClockUpdate+0xf4>)
  4027fe:	6a1b      	ldr	r3, [r3, #32]
  402800:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402804:	2b10      	cmp	r3, #16
  402806:	d005      	beq.n	402814 <SystemCoreClockUpdate+0x78>
  402808:	2b20      	cmp	r3, #32
  40280a:	d1dc      	bne.n	4027c6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40280c:	4a23      	ldr	r2, [pc, #140]	; (40289c <SystemCoreClockUpdate+0x100>)
  40280e:	4b22      	ldr	r3, [pc, #136]	; (402898 <SystemCoreClockUpdate+0xfc>)
  402810:	601a      	str	r2, [r3, #0]
			break;
  402812:	e7d8      	b.n	4027c6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402814:	4a23      	ldr	r2, [pc, #140]	; (4028a4 <SystemCoreClockUpdate+0x108>)
  402816:	4b20      	ldr	r3, [pc, #128]	; (402898 <SystemCoreClockUpdate+0xfc>)
  402818:	601a      	str	r2, [r3, #0]
			break;
  40281a:	e7d4      	b.n	4027c6 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40281c:	4b1c      	ldr	r3, [pc, #112]	; (402890 <SystemCoreClockUpdate+0xf4>)
  40281e:	6a1b      	ldr	r3, [r3, #32]
  402820:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402824:	d018      	beq.n	402858 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  402826:	4a1d      	ldr	r2, [pc, #116]	; (40289c <SystemCoreClockUpdate+0x100>)
  402828:	4b1b      	ldr	r3, [pc, #108]	; (402898 <SystemCoreClockUpdate+0xfc>)
  40282a:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40282c:	4b18      	ldr	r3, [pc, #96]	; (402890 <SystemCoreClockUpdate+0xf4>)
  40282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402830:	f003 0303 	and.w	r3, r3, #3
  402834:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402836:	4a16      	ldr	r2, [pc, #88]	; (402890 <SystemCoreClockUpdate+0xf4>)
  402838:	bf07      	ittee	eq
  40283a:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40283c:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40283e:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402840:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  402842:	4815      	ldr	r0, [pc, #84]	; (402898 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402844:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  402848:	6803      	ldr	r3, [r0, #0]
  40284a:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40284e:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402850:	fbb3 f3f2 	udiv	r3, r3, r2
  402854:	6003      	str	r3, [r0, #0]
  402856:	e7b6      	b.n	4027c6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402858:	4a11      	ldr	r2, [pc, #68]	; (4028a0 <SystemCoreClockUpdate+0x104>)
  40285a:	4b0f      	ldr	r3, [pc, #60]	; (402898 <SystemCoreClockUpdate+0xfc>)
  40285c:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40285e:	4b0c      	ldr	r3, [pc, #48]	; (402890 <SystemCoreClockUpdate+0xf4>)
  402860:	6a1b      	ldr	r3, [r3, #32]
  402862:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402866:	2b10      	cmp	r3, #16
  402868:	d005      	beq.n	402876 <SystemCoreClockUpdate+0xda>
  40286a:	2b20      	cmp	r3, #32
  40286c:	d1de      	bne.n	40282c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40286e:	4a0b      	ldr	r2, [pc, #44]	; (40289c <SystemCoreClockUpdate+0x100>)
  402870:	4b09      	ldr	r3, [pc, #36]	; (402898 <SystemCoreClockUpdate+0xfc>)
  402872:	601a      	str	r2, [r3, #0]
					break;
  402874:	e7da      	b.n	40282c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402876:	4a0b      	ldr	r2, [pc, #44]	; (4028a4 <SystemCoreClockUpdate+0x108>)
  402878:	4b07      	ldr	r3, [pc, #28]	; (402898 <SystemCoreClockUpdate+0xfc>)
  40287a:	601a      	str	r2, [r3, #0]
					break;
  40287c:	e7d6      	b.n	40282c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40287e:	4a06      	ldr	r2, [pc, #24]	; (402898 <SystemCoreClockUpdate+0xfc>)
  402880:	6813      	ldr	r3, [r2, #0]
  402882:	4909      	ldr	r1, [pc, #36]	; (4028a8 <SystemCoreClockUpdate+0x10c>)
  402884:	fba1 1303 	umull	r1, r3, r1, r3
  402888:	085b      	lsrs	r3, r3, #1
  40288a:	6013      	str	r3, [r2, #0]
  40288c:	4770      	bx	lr
  40288e:	bf00      	nop
  402890:	400e0400 	.word	0x400e0400
  402894:	400e1410 	.word	0x400e1410
  402898:	200000a4 	.word	0x200000a4
  40289c:	00b71b00 	.word	0x00b71b00
  4028a0:	003d0900 	.word	0x003d0900
  4028a4:	007a1200 	.word	0x007a1200
  4028a8:	aaaaaaab 	.word	0xaaaaaaab

004028ac <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4028ac:	4b12      	ldr	r3, [pc, #72]	; (4028f8 <system_init_flash+0x4c>)
  4028ae:	4298      	cmp	r0, r3
  4028b0:	d911      	bls.n	4028d6 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4028b2:	4b12      	ldr	r3, [pc, #72]	; (4028fc <system_init_flash+0x50>)
  4028b4:	4298      	cmp	r0, r3
  4028b6:	d913      	bls.n	4028e0 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4028b8:	4b11      	ldr	r3, [pc, #68]	; (402900 <system_init_flash+0x54>)
  4028ba:	4298      	cmp	r0, r3
  4028bc:	d914      	bls.n	4028e8 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4028be:	4b11      	ldr	r3, [pc, #68]	; (402904 <system_init_flash+0x58>)
  4028c0:	4298      	cmp	r0, r3
  4028c2:	d915      	bls.n	4028f0 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4028c4:	4b10      	ldr	r3, [pc, #64]	; (402908 <system_init_flash+0x5c>)
  4028c6:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4028c8:	bf94      	ite	ls
  4028ca:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4028ce:	4a0f      	ldrhi	r2, [pc, #60]	; (40290c <system_init_flash+0x60>)
  4028d0:	4b0f      	ldr	r3, [pc, #60]	; (402910 <system_init_flash+0x64>)
  4028d2:	601a      	str	r2, [r3, #0]
  4028d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4028d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4028da:	4b0d      	ldr	r3, [pc, #52]	; (402910 <system_init_flash+0x64>)
  4028dc:	601a      	str	r2, [r3, #0]
  4028de:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4028e0:	4a0c      	ldr	r2, [pc, #48]	; (402914 <system_init_flash+0x68>)
  4028e2:	4b0b      	ldr	r3, [pc, #44]	; (402910 <system_init_flash+0x64>)
  4028e4:	601a      	str	r2, [r3, #0]
  4028e6:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4028e8:	4a0b      	ldr	r2, [pc, #44]	; (402918 <system_init_flash+0x6c>)
  4028ea:	4b09      	ldr	r3, [pc, #36]	; (402910 <system_init_flash+0x64>)
  4028ec:	601a      	str	r2, [r3, #0]
  4028ee:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4028f0:	4a0a      	ldr	r2, [pc, #40]	; (40291c <system_init_flash+0x70>)
  4028f2:	4b07      	ldr	r3, [pc, #28]	; (402910 <system_init_flash+0x64>)
  4028f4:	601a      	str	r2, [r3, #0]
  4028f6:	4770      	bx	lr
  4028f8:	01312cff 	.word	0x01312cff
  4028fc:	026259ff 	.word	0x026259ff
  402900:	039386ff 	.word	0x039386ff
  402904:	04c4b3ff 	.word	0x04c4b3ff
  402908:	05f5e0ff 	.word	0x05f5e0ff
  40290c:	04000500 	.word	0x04000500
  402910:	400e0a00 	.word	0x400e0a00
  402914:	04000100 	.word	0x04000100
  402918:	04000200 	.word	0x04000200
  40291c:	04000300 	.word	0x04000300

00402920 <_pwm_set_duty>:
		.ul_mck = sysclk_get_peripheral_bus_hz(PWM)
	};
	pwm_init(PWM, &clock_setting);
}

static void _pwm_set_duty(servo_s *servo, unsigned duty) {
  402920:	b5f0      	push	{r4, r5, r6, r7, lr}
  402922:	b08b      	sub	sp, #44	; 0x2c
  402924:	4606      	mov	r6, r0
  402926:	460c      	mov	r4, r1
	pwm_channel_t pwm_channel_instance = {
  402928:	2228      	movs	r2, #40	; 0x28
  40292a:	2100      	movs	r1, #0
  40292c:	4668      	mov	r0, sp
  40292e:	4b12      	ldr	r3, [pc, #72]	; (402978 <_pwm_set_duty+0x58>)
  402930:	4798      	blx	r3
		.ul_prescaler = PWM_CMR_CPRE_CLKA,
		.ul_period = PWM_PERIOD,
		.ul_duty = PWM_PERIOD - duty,
		.channel = servo->pwm_channel_num
  402932:	4635      	mov	r5, r6
  402934:	f855 7b04 	ldr.w	r7, [r5], #4
	};
	servo->pwm_channel = pwm_channel_instance;
  402938:	9700      	str	r7, [sp, #0]
  40293a:	230b      	movs	r3, #11
  40293c:	9301      	str	r3, [sp, #4]
		.ul_duty = PWM_PERIOD - duty,
  40293e:	f644 6320 	movw	r3, #20000	; 0x4e20
  402942:	1b1c      	subs	r4, r3, r4
	servo->pwm_channel = pwm_channel_instance;
  402944:	9403      	str	r4, [sp, #12]
  402946:	9304      	str	r3, [sp, #16]
  402948:	466c      	mov	r4, sp
  40294a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  40294c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  40294e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402952:	e894 0003 	ldmia.w	r4, {r0, r1}
  402956:	e885 0003 	stmia.w	r5, {r0, r1}
	
	pwm_channel_disable(PWM, servo->pwm_channel_num);
  40295a:	4c08      	ldr	r4, [pc, #32]	; (40297c <_pwm_set_duty+0x5c>)
  40295c:	4639      	mov	r1, r7
  40295e:	4620      	mov	r0, r4
  402960:	4b07      	ldr	r3, [pc, #28]	; (402980 <_pwm_set_duty+0x60>)
  402962:	4798      	blx	r3
	pwm_channel_init(PWM, &servo->pwm_channel);
  402964:	1d31      	adds	r1, r6, #4
  402966:	4620      	mov	r0, r4
  402968:	4b06      	ldr	r3, [pc, #24]	; (402984 <_pwm_set_duty+0x64>)
  40296a:	4798      	blx	r3
	pwm_channel_enable(PWM, servo->pwm_channel_num);
  40296c:	6831      	ldr	r1, [r6, #0]
  40296e:	4620      	mov	r0, r4
  402970:	4b05      	ldr	r3, [pc, #20]	; (402988 <_pwm_set_duty+0x68>)
  402972:	4798      	blx	r3
}
  402974:	b00b      	add	sp, #44	; 0x2c
  402976:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402978:	00403475 	.word	0x00403475
  40297c:	40020000 	.word	0x40020000
  402980:	004010f5 	.word	0x004010f5
  402984:	00401005 	.word	0x00401005
  402988:	004010eb 	.word	0x004010eb

0040298c <servo_setup>:

void servo_setup(servo_s *servo, uint32_t pwm_channel_num, unsigned us_min, unsigned us_max, unsigned us_center) {
  40298c:	b570      	push	{r4, r5, r6, lr}
  40298e:	b084      	sub	sp, #16
  402990:	4604      	mov	r4, r0
  402992:	9d08      	ldr	r5, [sp, #32]
	servo->pwm_channel_num = pwm_channel_num;
  402994:	6001      	str	r1, [r0, #0]
	servo->us_min = us_min;
  402996:	6302      	str	r2, [r0, #48]	; 0x30
	servo->us_max = us_max;
  402998:	6343      	str	r3, [r0, #52]	; 0x34
	servo->us_center = us_center;
  40299a:	6385      	str	r5, [r0, #56]	; 0x38
	
	uint32_t pwm_pin;
	switch (pwm_channel_num) {
  40299c:	2903      	cmp	r1, #3
  40299e:	d805      	bhi.n	4029ac <servo_setup+0x20>
  4029a0:	e8df f001 	tbb	[pc, r1]
  4029a4:	29262302 	.word	0x29262302
		case PWM_CHANNEL_0:
		pwm_pin = PIO_PA11;
  4029a8:	f44f 6600 	mov.w	r6, #2048	; 0x800
		case PWM_CHANNEL_3:
		pwm_pin = PIO_PA7;
		break;
	}
	
	pio_set_peripheral(PIOA, PIO_PERIPH_B, pwm_pin);
  4029ac:	4632      	mov	r2, r6
  4029ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4029b2:	4812      	ldr	r0, [pc, #72]	; (4029fc <servo_setup+0x70>)
  4029b4:	4b12      	ldr	r3, [pc, #72]	; (402a00 <servo_setup+0x74>)
  4029b6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PWM);
  4029b8:	201f      	movs	r0, #31
  4029ba:	4b12      	ldr	r3, [pc, #72]	; (402a04 <servo_setup+0x78>)
  4029bc:	4798      	blx	r3
	pwm_channel_disable(PWM, servo->pwm_channel_num);
  4029be:	4e12      	ldr	r6, [pc, #72]	; (402a08 <servo_setup+0x7c>)
  4029c0:	6821      	ldr	r1, [r4, #0]
  4029c2:	4630      	mov	r0, r6
  4029c4:	4b11      	ldr	r3, [pc, #68]	; (402a0c <servo_setup+0x80>)
  4029c6:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  4029c8:	4b11      	ldr	r3, [pc, #68]	; (402a10 <servo_setup+0x84>)
  4029ca:	9301      	str	r3, [sp, #4]
  4029cc:	2300      	movs	r3, #0
  4029ce:	9302      	str	r3, [sp, #8]
  4029d0:	4b10      	ldr	r3, [pc, #64]	; (402a14 <servo_setup+0x88>)
  4029d2:	9303      	str	r3, [sp, #12]
	pwm_init(PWM, &clock_setting);
  4029d4:	a901      	add	r1, sp, #4
  4029d6:	4630      	mov	r0, r6
  4029d8:	4b0f      	ldr	r3, [pc, #60]	; (402a18 <servo_setup+0x8c>)
  4029da:	4798      	blx	r3
	_init_pwm(servo);
	
	servo->position = us_center;
  4029dc:	62e5      	str	r5, [r4, #44]	; 0x2c
	_pwm_set_duty(servo, (PWM_CLK_SPEED / 1000000.0) * us_center);
  4029de:	4629      	mov	r1, r5
  4029e0:	4620      	mov	r0, r4
  4029e2:	4b0e      	ldr	r3, [pc, #56]	; (402a1c <servo_setup+0x90>)
  4029e4:	4798      	blx	r3
}
  4029e6:	b004      	add	sp, #16
  4029e8:	bd70      	pop	{r4, r5, r6, pc}
		pwm_pin = PIO_PA12;
  4029ea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
		break;
  4029ee:	e7dd      	b.n	4029ac <servo_setup+0x20>
		pwm_pin = PIO_PA13;
  4029f0:	f44f 5600 	mov.w	r6, #8192	; 0x2000
		break;
  4029f4:	e7da      	b.n	4029ac <servo_setup+0x20>
		pwm_pin = PIO_PA7;
  4029f6:	2680      	movs	r6, #128	; 0x80
		break;
  4029f8:	e7d8      	b.n	4029ac <servo_setup+0x20>
  4029fa:	bf00      	nop
  4029fc:	400e0e00 	.word	0x400e0e00
  402a00:	00400c85 	.word	0x00400c85
  402a04:	00400eb5 	.word	0x00400eb5
  402a08:	40020000 	.word	0x40020000
  402a0c:	004010f5 	.word	0x004010f5
  402a10:	000f4240 	.word	0x000f4240
  402a14:	07270e00 	.word	0x07270e00
  402a18:	00400fc1 	.word	0x00400fc1
  402a1c:	00402921 	.word	0x00402921

00402a20 <servo_write_us>:

void servo_write_us(servo_s *servo, unsigned us) {
  402a20:	b538      	push	{r3, r4, r5, lr}
  402a22:	4605      	mov	r5, r0
	if (us > servo->us_max) {
  402a24:	6b44      	ldr	r4, [r0, #52]	; 0x34
  402a26:	428c      	cmp	r4, r1
  402a28:	d303      	bcc.n	402a32 <servo_write_us+0x12>
  402a2a:	6b04      	ldr	r4, [r0, #48]	; 0x30
  402a2c:	428c      	cmp	r4, r1
  402a2e:	bf38      	it	cc
  402a30:	460c      	movcc	r4, r1
		us = servo->us_max;
		} else if (us < servo->us_min) {
		us = servo->us_min;
	}
	
	_pwm_set_duty(servo, (PWM_CLK_SPEED / 1000000.0) * us);
  402a32:	4621      	mov	r1, r4
  402a34:	4628      	mov	r0, r5
  402a36:	4b02      	ldr	r3, [pc, #8]	; (402a40 <servo_write_us+0x20>)
  402a38:	4798      	blx	r3
	servo->position = us;
  402a3a:	62ec      	str	r4, [r5, #44]	; 0x2c
  402a3c:	bd38      	pop	{r3, r4, r5, pc}
  402a3e:	bf00      	nop
  402a40:	00402921 	.word	0x00402921

00402a44 <TC0_Handler>:
void TC0_Handler(void)
{
	// If an overflow occurred, increase elapsed by 2000 ms
	// since this happens every 2 seconds
	// We read the register status to clear overflow flag
	if (REG_TC0_SR0 & TC_SR_COVFS)
  402a44:	4b05      	ldr	r3, [pc, #20]	; (402a5c <TC0_Handler+0x18>)
  402a46:	681b      	ldr	r3, [r3, #0]
  402a48:	f013 0f01 	tst.w	r3, #1
  402a4c:	d004      	beq.n	402a58 <TC0_Handler+0x14>
	{
		elapsed_ms += 2000;
  402a4e:	4a04      	ldr	r2, [pc, #16]	; (402a60 <TC0_Handler+0x1c>)
  402a50:	6813      	ldr	r3, [r2, #0]
  402a52:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
  402a56:	6013      	str	r3, [r2, #0]
  402a58:	4770      	bx	lr
  402a5a:	bf00      	nop
  402a5c:	40010020 	.word	0x40010020
  402a60:	2000071c 	.word	0x2000071c

00402a64 <millis>:

uint32_t millis(void)
{
	// Return elapsed ms plus the current value of the timer
	// Since the timer ticks 32000 times a second, divide by 32 to get ms
	return elapsed_ms + ((REG_TC0_CV0) / 32);
  402a64:	4b03      	ldr	r3, [pc, #12]	; (402a74 <millis+0x10>)
  402a66:	6818      	ldr	r0, [r3, #0]
  402a68:	4b03      	ldr	r3, [pc, #12]	; (402a78 <millis+0x14>)
  402a6a:	681b      	ldr	r3, [r3, #0]
}
  402a6c:	eb03 1050 	add.w	r0, r3, r0, lsr #5
  402a70:	4770      	bx	lr
  402a72:	bf00      	nop
  402a74:	40010010 	.word	0x40010010
  402a78:	2000071c 	.word	0x2000071c

00402a7c <portSetup>:

void portSetup(Uart *port485, const uint32_t baud, Pio *enPinPort, const uint32_t enPin, const uint16_t serialTimeout)
{
  402a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a80:	b086      	sub	sp, #24
  402a82:	460f      	mov	r7, r1
  402a84:	4616      	mov	r6, r2
  402a86:	461d      	mov	r5, r3
	timeout = serialTimeout;
  402a88:	4b3d      	ldr	r3, [pc, #244]	; (402b80 <portSetup+0x104>)
  402a8a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  402a8e:	801a      	strh	r2, [r3, #0]
	RS485Port = port485;
  402a90:	4b3c      	ldr	r3, [pc, #240]	; (402b84 <portSetup+0x108>)
  402a92:	6018      	str	r0, [r3, #0]

	if (RS485Port == UART0)
  402a94:	4b3c      	ldr	r3, [pc, #240]	; (402b88 <portSetup+0x10c>)
  402a96:	4298      	cmp	r0, r3
  402a98:	d046      	beq.n	402b28 <portSetup+0xac>
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA9);  // Sets PA9 to RX
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA10); // Sets PA10 to TX
		NVIC_EnableIRQ(UART0_IRQn);                       // enables interrupts related to this port
	}

	if (RS485Port == UART1)
  402a9a:	4b3a      	ldr	r3, [pc, #232]	; (402b84 <portSetup+0x108>)
  402a9c:	681a      	ldr	r2, [r3, #0]
  402a9e:	4b3b      	ldr	r3, [pc, #236]	; (402b8c <portSetup+0x110>)
  402aa0:	429a      	cmp	r2, r3
  402aa2:	d058      	beq.n	402b56 <portSetup+0xda>
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB2); // Sets PB2 to RX
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB3); // Sets PB3 to TX
		NVIC_EnableIRQ(UART1_IRQn);                      // enables interrupts related to this port
	}

	uint32_t clockSpeed = sysclk_get_peripheral_bus_hz(RS485Port); // gets CPU speed to for baud counter
  402aa4:	4c37      	ldr	r4, [pc, #220]	; (402b84 <portSetup+0x108>)

	sam_uart_opt_t UARTSettings = {
  402aa6:	4b3a      	ldr	r3, [pc, #232]	; (402b90 <portSetup+0x114>)
  402aa8:	9303      	str	r3, [sp, #12]
  402aaa:	9704      	str	r7, [sp, #16]
  402aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402ab0:	9305      	str	r3, [sp, #20]
		.ul_baudrate = baud,                               // sets baudrate
		.ul_mode = UART_MR_CHMODE_NORMAL | UART_MR_PAR_NO, // sets to normal mode
		.ul_mck = clockSpeed                               // sets baud counter clock
	};

	uart_init(RS485Port, &UARTSettings); // init the UART port
  402ab2:	a903      	add	r1, sp, #12
  402ab4:	6820      	ldr	r0, [r4, #0]
  402ab6:	4b37      	ldr	r3, [pc, #220]	; (402b94 <portSetup+0x118>)
  402ab8:	4798      	blx	r3
	uart_enable_rx(RS485Port);
  402aba:	6820      	ldr	r0, [r4, #0]
  402abc:	4b36      	ldr	r3, [pc, #216]	; (402b98 <portSetup+0x11c>)
  402abe:	4798      	blx	r3
	uart_enable_tx(RS485Port);
  402ac0:	6820      	ldr	r0, [r4, #0]
  402ac2:	4b36      	ldr	r3, [pc, #216]	; (402b9c <portSetup+0x120>)
  402ac4:	4798      	blx	r3
	uart_enable_interrupt(RS485Port, UART_IER_RXRDY); // Enable interrupt for incoming data
  402ac6:	2101      	movs	r1, #1
  402ac8:	6820      	ldr	r0, [r4, #0]
  402aca:	4b35      	ldr	r3, [pc, #212]	; (402ba0 <portSetup+0x124>)
  402acc:	4798      	blx	r3

	pio_set_output(enPinPort, enPin, LOW, DISABLE, DISABLE); // init the enable pin
  402ace:	2200      	movs	r2, #0
  402ad0:	9200      	str	r2, [sp, #0]
  402ad2:	4613      	mov	r3, r2
  402ad4:	4629      	mov	r1, r5
  402ad6:	4630      	mov	r0, r6
  402ad8:	4c32      	ldr	r4, [pc, #200]	; (402ba4 <portSetup+0x128>)
  402ada:	47a0      	blx	r4
	globalEnPinPort = enPinPort;
  402adc:	4b32      	ldr	r3, [pc, #200]	; (402ba8 <portSetup+0x12c>)
  402ade:	601e      	str	r6, [r3, #0]
	globalEnPin = enPin;
  402ae0:	4b32      	ldr	r3, [pc, #200]	; (402bac <portSetup+0x130>)
  402ae2:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  402ae4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  402ae8:	4b31      	ldr	r3, [pc, #196]	; (402bb0 <portSetup+0x134>)
  402aea:	601a      	str	r2, [r3, #0]
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  402aec:	4a31      	ldr	r2, [pc, #196]	; (402bb4 <portSetup+0x138>)
  402aee:	6813      	ldr	r3, [r2, #0]
  402af0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  402af4:	6013      	str	r3, [r2, #0]
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK5;
  402af6:	f5a2 2250 	sub.w	r2, r2, #851968	; 0xd0000
  402afa:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
  402afe:	6813      	ldr	r3, [r2, #0]
  402b00:	f043 0304 	orr.w	r3, r3, #4
  402b04:	6013      	str	r3, [r2, #0]
	REG_TC0_IER0 |= TC_IER_COVFS;
  402b06:	3220      	adds	r2, #32
  402b08:	6813      	ldr	r3, [r2, #0]
  402b0a:	f043 0301 	orr.w	r3, r3, #1
  402b0e:	6013      	str	r3, [r2, #0]
	REG_TC0_CCR0 |= TC_CCR_CLKEN;
  402b10:	4b29      	ldr	r3, [pc, #164]	; (402bb8 <portSetup+0x13c>)
  402b12:	681a      	ldr	r2, [r3, #0]
  402b14:	f042 0201 	orr.w	r2, r2, #1
  402b18:	601a      	str	r2, [r3, #0]
	REG_TC0_CCR0 |= TC_CCR_SWTRG;
  402b1a:	681a      	ldr	r2, [r3, #0]
  402b1c:	f042 0204 	orr.w	r2, r2, #4
  402b20:	601a      	str	r2, [r3, #0]

	init_timer(); // Enable timer for timeout purposes
}
  402b22:	b006      	add	sp, #24
  402b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pmc_enable_periph_clk(ID_UART0);                  // Enable the clocks to the UART modules
  402b28:	2008      	movs	r0, #8
  402b2a:	4b24      	ldr	r3, [pc, #144]	; (402bbc <portSetup+0x140>)
  402b2c:	4798      	blx	r3
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA9);  // Sets PA9 to RX
  402b2e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402bc4 <portSetup+0x148>
  402b32:	f44f 7200 	mov.w	r2, #512	; 0x200
  402b36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402b3a:	4640      	mov	r0, r8
  402b3c:	4c20      	ldr	r4, [pc, #128]	; (402bc0 <portSetup+0x144>)
  402b3e:	47a0      	blx	r4
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA10); // Sets PA10 to TX
  402b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402b44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402b48:	4640      	mov	r0, r8
  402b4a:	47a0      	blx	r4
  402b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402b50:	4b17      	ldr	r3, [pc, #92]	; (402bb0 <portSetup+0x134>)
  402b52:	601a      	str	r2, [r3, #0]
  402b54:	e7a1      	b.n	402a9a <portSetup+0x1e>
		pmc_enable_periph_clk(ID_UART1);                 // Enable the clocks to the UART modules
  402b56:	2009      	movs	r0, #9
  402b58:	4b18      	ldr	r3, [pc, #96]	; (402bbc <portSetup+0x140>)
  402b5a:	4798      	blx	r3
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB2); // Sets PB2 to RX
  402b5c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 402bc8 <portSetup+0x14c>
  402b60:	2204      	movs	r2, #4
  402b62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402b66:	4640      	mov	r0, r8
  402b68:	4c15      	ldr	r4, [pc, #84]	; (402bc0 <portSetup+0x144>)
  402b6a:	47a0      	blx	r4
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB3); // Sets PB3 to TX
  402b6c:	2208      	movs	r2, #8
  402b6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402b72:	4640      	mov	r0, r8
  402b74:	47a0      	blx	r4
  402b76:	f44f 7200 	mov.w	r2, #512	; 0x200
  402b7a:	4b0d      	ldr	r3, [pc, #52]	; (402bb0 <portSetup+0x134>)
  402b7c:	601a      	str	r2, [r3, #0]
  402b7e:	e791      	b.n	402aa4 <portSetup+0x28>
  402b80:	2000275c 	.word	0x2000275c
  402b84:	2000274c 	.word	0x2000274c
  402b88:	400e0600 	.word	0x400e0600
  402b8c:	400e0800 	.word	0x400e0800
  402b90:	07270e00 	.word	0x07270e00
  402b94:	004010ff 	.word	0x004010ff
  402b98:	0040113b 	.word	0x0040113b
  402b9c:	00401135 	.word	0x00401135
  402ba0:	00401141 	.word	0x00401141
  402ba4:	00400d15 	.word	0x00400d15
  402ba8:	20002750 	.word	0x20002750
  402bac:	20002758 	.word	0x20002758
  402bb0:	e000e100 	.word	0xe000e100
  402bb4:	400e0410 	.word	0x400e0410
  402bb8:	40010000 	.word	0x40010000
  402bbc:	00400eb5 	.word	0x00400eb5
  402bc0:	00400c85 	.word	0x00400c85
  402bc4:	400e0e00 	.word	0x400e0e00
  402bc8:	400e1000 	.word	0x400e1000

00402bcc <portWrite>:

void portWrite(uint8_t *packet, uint16_t packetSize)
{
  402bcc:	b508      	push	{r3, lr}
	// write out response packet
	pio_set(globalEnPinPort, globalEnPin); // transceiver transmit enable
  402bce:	4b07      	ldr	r3, [pc, #28]	; (402bec <portWrite+0x20>)
  402bd0:	6819      	ldr	r1, [r3, #0]
  402bd2:	4b07      	ldr	r3, [pc, #28]	; (402bf0 <portWrite+0x24>)
  402bd4:	6818      	ldr	r0, [r3, #0]
  402bd6:	4b07      	ldr	r3, [pc, #28]	; (402bf4 <portWrite+0x28>)
  402bd8:	4798      	blx	r3
	transmitIndex = 0;
  402bda:	2200      	movs	r2, #0
  402bdc:	4b06      	ldr	r3, [pc, #24]	; (402bf8 <portWrite+0x2c>)
  402bde:	801a      	strh	r2, [r3, #0]
	uart_enable_interrupt(RS485Port, UART_IMR_TXRDY);
  402be0:	2102      	movs	r1, #2
  402be2:	4b06      	ldr	r3, [pc, #24]	; (402bfc <portWrite+0x30>)
  402be4:	6818      	ldr	r0, [r3, #0]
  402be6:	4b06      	ldr	r3, [pc, #24]	; (402c00 <portWrite+0x34>)
  402be8:	4798      	blx	r3
  402bea:	bd08      	pop	{r3, pc}
  402bec:	20002758 	.word	0x20002758
  402bf0:	20002750 	.word	0x20002750
  402bf4:	00400c7d 	.word	0x00400c7d
  402bf8:	20002754 	.word	0x20002754
  402bfc:	2000274c 	.word	0x2000274c
  402c00:	00401141 	.word	0x00401141

00402c04 <UART_Handler>:
}

// interrupt handler for incoming data
void UART_Handler(void)
{
  402c04:	b510      	push	{r4, lr}
	if (uart_is_rx_ready(RS485Port))
  402c06:	4b1d      	ldr	r3, [pc, #116]	; (402c7c <UART_Handler+0x78>)
  402c08:	6818      	ldr	r0, [r3, #0]
  402c0a:	4b1d      	ldr	r3, [pc, #116]	; (402c80 <UART_Handler+0x7c>)
  402c0c:	4798      	blx	r3
  402c0e:	b980      	cbnz	r0, 402c32 <UART_Handler+0x2e>
	{                                                          // confirm there is data ready to be read
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head])); // move the data into the next index of the rx buffer
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);      // iterate the head through the ring buffer
	}
	else if (uart_is_tx_ready(RS485Port))
  402c10:	4b1a      	ldr	r3, [pc, #104]	; (402c7c <UART_Handler+0x78>)
  402c12:	6818      	ldr	r0, [r3, #0]
  402c14:	4b1b      	ldr	r3, [pc, #108]	; (402c84 <UART_Handler+0x80>)
  402c16:	4798      	blx	r3
  402c18:	b150      	cbz	r0, 402c30 <UART_Handler+0x2c>
	{
		if (transmitIndex < responsePacketSize)
  402c1a:	4b1b      	ldr	r3, [pc, #108]	; (402c88 <UART_Handler+0x84>)
  402c1c:	881b      	ldrh	r3, [r3, #0]
  402c1e:	4a1b      	ldr	r2, [pc, #108]	; (402c8c <UART_Handler+0x88>)
  402c20:	8812      	ldrh	r2, [r2, #0]
  402c22:	429a      	cmp	r2, r3
  402c24:	d813      	bhi.n	402c4e <UART_Handler+0x4a>
		{
			uart_write(RS485Port, responsePacket[transmitIndex]);
			transmitIndex++;
		}
		else if (uart_is_tx_empty(RS485Port))
  402c26:	4b15      	ldr	r3, [pc, #84]	; (402c7c <UART_Handler+0x78>)
  402c28:	6818      	ldr	r0, [r3, #0]
  402c2a:	4b19      	ldr	r3, [pc, #100]	; (402c90 <UART_Handler+0x8c>)
  402c2c:	4798      	blx	r3
  402c2e:	b9c8      	cbnz	r0, 402c64 <UART_Handler+0x60>
  402c30:	bd10      	pop	{r4, pc}
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head])); // move the data into the next index of the rx buffer
  402c32:	4c18      	ldr	r4, [pc, #96]	; (402c94 <UART_Handler+0x90>)
  402c34:	8821      	ldrh	r1, [r4, #0]
  402c36:	3104      	adds	r1, #4
  402c38:	4421      	add	r1, r4
  402c3a:	4b10      	ldr	r3, [pc, #64]	; (402c7c <UART_Handler+0x78>)
  402c3c:	6818      	ldr	r0, [r3, #0]
  402c3e:	4b16      	ldr	r3, [pc, #88]	; (402c98 <UART_Handler+0x94>)
  402c40:	4798      	blx	r3
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);      // iterate the head through the ring buffer
  402c42:	8823      	ldrh	r3, [r4, #0]
  402c44:	3301      	adds	r3, #1
  402c46:	f3c3 030c 	ubfx	r3, r3, #0, #13
  402c4a:	8023      	strh	r3, [r4, #0]
  402c4c:	bd10      	pop	{r4, pc}
			uart_write(RS485Port, responsePacket[transmitIndex]);
  402c4e:	4a13      	ldr	r2, [pc, #76]	; (402c9c <UART_Handler+0x98>)
  402c50:	5cd1      	ldrb	r1, [r2, r3]
  402c52:	4b0a      	ldr	r3, [pc, #40]	; (402c7c <UART_Handler+0x78>)
  402c54:	6818      	ldr	r0, [r3, #0]
  402c56:	4b12      	ldr	r3, [pc, #72]	; (402ca0 <UART_Handler+0x9c>)
  402c58:	4798      	blx	r3
			transmitIndex++;
  402c5a:	4a0b      	ldr	r2, [pc, #44]	; (402c88 <UART_Handler+0x84>)
  402c5c:	8813      	ldrh	r3, [r2, #0]
  402c5e:	3301      	adds	r3, #1
  402c60:	8013      	strh	r3, [r2, #0]
  402c62:	bd10      	pop	{r4, pc}
		{
			pio_clear(globalEnPinPort, globalEnPin);
  402c64:	4b0f      	ldr	r3, [pc, #60]	; (402ca4 <UART_Handler+0xa0>)
  402c66:	6819      	ldr	r1, [r3, #0]
  402c68:	4b0f      	ldr	r3, [pc, #60]	; (402ca8 <UART_Handler+0xa4>)
  402c6a:	6818      	ldr	r0, [r3, #0]
  402c6c:	4b0f      	ldr	r3, [pc, #60]	; (402cac <UART_Handler+0xa8>)
  402c6e:	4798      	blx	r3
			uart_disable_interrupt(RS485Port, UART_IMR_TXRDY);
  402c70:	2102      	movs	r1, #2
  402c72:	4b02      	ldr	r3, [pc, #8]	; (402c7c <UART_Handler+0x78>)
  402c74:	6818      	ldr	r0, [r3, #0]
  402c76:	4b0e      	ldr	r3, [pc, #56]	; (402cb0 <UART_Handler+0xac>)
  402c78:	4798      	blx	r3
		}
	}
}
  402c7a:	e7d9      	b.n	402c30 <UART_Handler+0x2c>
  402c7c:	2000274c 	.word	0x2000274c
  402c80:	00401159 	.word	0x00401159
  402c84:	00401149 	.word	0x00401149
  402c88:	20002754 	.word	0x20002754
  402c8c:	20006f6a 	.word	0x20006f6a
  402c90:	00401151 	.word	0x00401151
  402c94:	20004f64 	.word	0x20004f64
  402c98:	00401171 	.word	0x00401171
  402c9c:	20002960 	.word	0x20002960
  402ca0:	00401161 	.word	0x00401161
  402ca4:	20002758 	.word	0x20002758
  402ca8:	20002750 	.word	0x20002750
  402cac:	00400c81 	.word	0x00400c81
  402cb0:	00401145 	.word	0x00401145

00402cb4 <UART0_Handler>:

// Regardless of what UART port triggers the interrupt, the behavior is the same
void UART0_Handler()
{
  402cb4:	b508      	push	{r3, lr}
	UART_Handler();
  402cb6:	4b01      	ldr	r3, [pc, #4]	; (402cbc <UART0_Handler+0x8>)
  402cb8:	4798      	blx	r3
  402cba:	bd08      	pop	{r3, pc}
  402cbc:	00402c05 	.word	0x00402c05

00402cc0 <readHandler>:
	last_complete = millis();
}
// END PACKET TIMEOUT STUFF //

// modbus functions
void readHandler(uint8_t* responsePacket, uint16_t start_reg, uint16_t end_reg) {
  402cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402cc2:	460c      	mov	r4, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402cc4:	29ff      	cmp	r1, #255	; 0xff
  402cc6:	dc15      	bgt.n	402cf4 <readHandler+0x34>
  402cc8:	4617      	mov	r7, r2
  402cca:	4291      	cmp	r1, r2
  402ccc:	da12      	bge.n	402cf4 <readHandler+0x34>
  402cce:	1c83      	adds	r3, r0, #2
  402cd0:	4d36      	ldr	r5, [pc, #216]	; (402dac <readHandler+0xec>)
  402cd2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
		uint16_t data = intRegisters[i-INT_REG_OFFSET];
  402cd6:	f835 1f02 	ldrh.w	r1, [r5, #2]!
  402cda:	4618      	mov	r0, r3
		responsePacket[0] = (data >> 8) & 0xFF;
  402cdc:	0a0e      	lsrs	r6, r1, #8
  402cde:	f803 6c02 	strb.w	r6, [r3, #-2]
		responsePacket[1] = data & 0xFF;
  402ce2:	f803 1c01 	strb.w	r1, [r3, #-1]
		responsePacket += INT_REG_BYTE_SZ;
		i++;
  402ce6:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402ce8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  402cec:	d005      	beq.n	402cfa <readHandler+0x3a>
  402cee:	3302      	adds	r3, #2
  402cf0:	42bc      	cmp	r4, r7
  402cf2:	dbf0      	blt.n	402cd6 <readHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402cf4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  402cf8:	da3a      	bge.n	402d70 <readHandler+0xb0>
  402cfa:	4694      	mov	ip, r2
  402cfc:	4294      	cmp	r4, r2
  402cfe:	da51      	bge.n	402da4 <readHandler+0xe4>
  402d00:	4b2b      	ldr	r3, [pc, #172]	; (402db0 <readHandler+0xf0>)
  402d02:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  402d06:	4e2b      	ldr	r6, [pc, #172]	; (402db4 <readHandler+0xf4>)
  402d08:	e006      	b.n	402d18 <readHandler+0x58>
		uint8_t* floatConversionBytes = floatToBytes_union(floatRegisters[i-FLOAT_REG_OFFSET]);
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
			responsePacket[j] = floatConversionBytes[j];
		}
		responsePacket += FLOAT_REG_BYTE_SZ;
  402d0a:	3004      	adds	r0, #4
		i++;
  402d0c:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402d0e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  402d12:	d030      	beq.n	402d76 <readHandler+0xb6>
  402d14:	4564      	cmp	r4, ip
  402d16:	d012      	beq.n	402d3e <readHandler+0x7e>
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  402d18:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  402d1c:	0e19      	lsrs	r1, r3, #24
  402d1e:	7031      	strb	r1, [r6, #0]
	floatCoversionBytes[1] = (u.data >> 16) & 0xFF;
  402d20:	0c19      	lsrs	r1, r3, #16
  402d22:	7071      	strb	r1, [r6, #1]
	floatCoversionBytes[2] = (u.data >> 8) & 0xFF;
  402d24:	0a19      	lsrs	r1, r3, #8
  402d26:	70b1      	strb	r1, [r6, #2]
	floatCoversionBytes[3] = u.data & 0xFF;
  402d28:	70f3      	strb	r3, [r6, #3]
  402d2a:	4631      	mov	r1, r6
  402d2c:	1e43      	subs	r3, r0, #1
  402d2e:	1cc7      	adds	r7, r0, #3
			responsePacket[j] = floatConversionBytes[j];
  402d30:	f811 5b01 	ldrb.w	r5, [r1], #1
  402d34:	f803 5f01 	strb.w	r5, [r3, #1]!
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
  402d38:	42bb      	cmp	r3, r7
  402d3a:	d1f9      	bne.n	402d30 <readHandler+0x70>
  402d3c:	e7e5      	b.n	402d0a <readHandler+0x4a>
		responsePacket += FLOAT_REG_BYTE_SZ;
  402d3e:	4603      	mov	r3, r0
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402d40:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  402d44:	db30      	blt.n	402da8 <readHandler+0xe8>
		responsePacket[0] = charRegisters[i-CHAR_REG_OFFSET];
		responsePacket += CHAR_REG_BYTE_SZ;
		i++;
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402d46:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  402d4a:	da2d      	bge.n	402da8 <readHandler+0xe8>
  402d4c:	4294      	cmp	r4, r2
  402d4e:	da2b      	bge.n	402da8 <readHandler+0xe8>
  402d50:	4919      	ldr	r1, [pc, #100]	; (402db8 <readHandler+0xf8>)
  402d52:	4421      	add	r1, r4
  402d54:	f5c4 6580 	rsb	r5, r4, #1024	; 0x400
  402d58:	441d      	add	r5, r3
  402d5a:	1b12      	subs	r2, r2, r4
  402d5c:	441a      	add	r2, r3
		responsePacket[0] = boolRegisters[i-BOOL_REG_OFFSET];
  402d5e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402d62:	f803 0b01 	strb.w	r0, [r3], #1
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402d66:	429d      	cmp	r5, r3
  402d68:	d01e      	beq.n	402da8 <readHandler+0xe8>
  402d6a:	429a      	cmp	r2, r3
  402d6c:	d1f7      	bne.n	402d5e <readHandler+0x9e>
  402d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402d70:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  402d74:	da14      	bge.n	402da0 <readHandler+0xe0>
  402d76:	42a2      	cmp	r2, r4
  402d78:	dd16      	ble.n	402da8 <readHandler+0xe8>
  402d7a:	4910      	ldr	r1, [pc, #64]	; (402dbc <readHandler+0xfc>)
  402d7c:	4421      	add	r1, r4
  402d7e:	f5c4 7540 	rsb	r5, r4, #768	; 0x300
  402d82:	4405      	add	r5, r0
  402d84:	1b16      	subs	r6, r2, r4
  402d86:	4406      	add	r6, r0
  402d88:	4603      	mov	r3, r0
  402d8a:	1a20      	subs	r0, r4, r0
		responsePacket[0] = charRegisters[i-CHAR_REG_OFFSET];
  402d8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  402d90:	f803 4b01 	strb.w	r4, [r3], #1
  402d94:	181c      	adds	r4, r3, r0
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402d96:	42ab      	cmp	r3, r5
  402d98:	d0d5      	beq.n	402d46 <readHandler+0x86>
  402d9a:	42b3      	cmp	r3, r6
  402d9c:	d1f6      	bne.n	402d8c <readHandler+0xcc>
  402d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402da0:	4603      	mov	r3, r0
  402da2:	e7d0      	b.n	402d46 <readHandler+0x86>
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402da4:	4603      	mov	r3, r0
  402da6:	e7cb      	b.n	402d40 <readHandler+0x80>
  402da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402daa:	bf00      	nop
  402dac:	20004d62 	.word	0x20004d62
  402db0:	2000455c 	.word	0x2000455c
  402db4:	20000720 	.word	0x20000720
  402db8:	2000255f 	.word	0x2000255f
  402dbc:	2000255f 	.word	0x2000255f

00402dc0 <writeHandler>:
		responsePacket += BOOL_REG_BYTE_SZ;
		i++;
	}
}

void writeHandler(uint8_t* data_packet, uint16_t start_reg, uint16_t end_reg) {
  402dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402dc2:	460b      	mov	r3, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402dc4:	29ff      	cmp	r1, #255	; 0xff
  402dc6:	dc16      	bgt.n	402df6 <writeHandler+0x36>
  402dc8:	4614      	mov	r4, r2
  402dca:	4291      	cmp	r1, r2
  402dcc:	da13      	bge.n	402df6 <writeHandler+0x36>
  402dce:	1c85      	adds	r5, r0, #2
  402dd0:	4837      	ldr	r0, [pc, #220]	; (402eb0 <writeHandler+0xf0>)
  402dd2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402dd6:	4628      	mov	r0, r5
    return (data[0] << 8) | data[1];
  402dd8:	f815 7c02 	ldrb.w	r7, [r5, #-2]
  402ddc:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  402de0:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
		intRegisters[i-INT_REG_OFFSET] = convertToInt(data_packet);
  402de4:	f821 6f02 	strh.w	r6, [r1, #2]!
		data_packet += INT_REG_BYTE_SZ;
		i++;
  402de8:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402dee:	d005      	beq.n	402dfc <writeHandler+0x3c>
  402df0:	3502      	adds	r5, #2
  402df2:	42a3      	cmp	r3, r4
  402df4:	dbef      	blt.n	402dd6 <writeHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402dfa:	da3c      	bge.n	402e76 <writeHandler+0xb6>
  402dfc:	4696      	mov	lr, r2
  402dfe:	429a      	cmp	r2, r3
  402e00:	dd1b      	ble.n	402e3a <writeHandler+0x7a>
  402e02:	1d04      	adds	r4, r0, #4
  402e04:	4e2b      	ldr	r6, [pc, #172]	; (402eb4 <writeHandler+0xf4>)
  402e06:	eb06 0683 	add.w	r6, r6, r3, lsl #2
  402e0a:	4620      	mov	r0, r4
    u.data = MERGE_FOUR_BYTES(data);
  402e0c:	f814 7c04 	ldrb.w	r7, [r4, #-4]
  402e10:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  402e14:	0409      	lsls	r1, r1, #16
  402e16:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
  402e1a:	f814 7c01 	ldrb.w	r7, [r4, #-1]
  402e1e:	4339      	orrs	r1, r7
  402e20:	f814 7c02 	ldrb.w	r7, [r4, #-2]
		floatRegisters[i-FLOAT_REG_OFFSET] = convertToFloat_union(data_packet);
  402e24:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  402e28:	f846 1f04 	str.w	r1, [r6, #4]!
		data_packet += FLOAT_REG_BYTE_SZ;
		i++;
  402e2c:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e32:	d023      	beq.n	402e7c <writeHandler+0xbc>
  402e34:	3404      	adds	r4, #4
  402e36:	4573      	cmp	r3, lr
  402e38:	d1e7      	bne.n	402e0a <writeHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  402e3e:	db35      	blt.n	402eac <writeHandler+0xec>
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
		data_packet += CHAR_REG_BYTE_SZ;
		i++;
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  402e44:	da32      	bge.n	402eac <writeHandler+0xec>
  402e46:	4293      	cmp	r3, r2
  402e48:	da30      	bge.n	402eac <writeHandler+0xec>
  402e4a:	3801      	subs	r0, #1
  402e4c:	f2a3 3301 	subw	r3, r3, #769	; 0x301
  402e50:	4919      	ldr	r1, [pc, #100]	; (402eb8 <writeHandler+0xf8>)
  402e52:	440b      	add	r3, r1
  402e54:	f101 04ff 	add.w	r4, r1, #255	; 0xff
  402e58:	f2a2 3201 	subw	r2, r2, #769	; 0x301
  402e5c:	4411      	add	r1, r2
    return data[0];
  402e5e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402e62:	3200      	adds	r2, #0
  402e64:	bf18      	it	ne
  402e66:	2201      	movne	r2, #1
  402e68:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402e6c:	42a3      	cmp	r3, r4
  402e6e:	d01d      	beq.n	402eac <writeHandler+0xec>
  402e70:	428b      	cmp	r3, r1
  402e72:	d1f4      	bne.n	402e5e <writeHandler+0x9e>
  402e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  402e7a:	dae1      	bge.n	402e40 <writeHandler+0x80>
  402e7c:	429a      	cmp	r2, r3
  402e7e:	dd15      	ble.n	402eac <writeHandler+0xec>
  402e80:	f2a3 2101 	subw	r1, r3, #513	; 0x201
  402e84:	4d0d      	ldr	r5, [pc, #52]	; (402ebc <writeHandler+0xfc>)
  402e86:	4429      	add	r1, r5
  402e88:	f105 07ff 	add.w	r7, r5, #255	; 0xff
  402e8c:	f2a2 2401 	subw	r4, r2, #513	; 0x201
  402e90:	442c      	add	r4, r5
  402e92:	4606      	mov	r6, r0
  402e94:	1a1d      	subs	r5, r3, r0
    return data[0];
  402e96:	f816 3b01 	ldrb.w	r3, [r6], #1
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
  402e9a:	f801 3f01 	strb.w	r3, [r1, #1]!
		data_packet += CHAR_REG_BYTE_SZ;
  402e9e:	4630      	mov	r0, r6
  402ea0:	19ab      	adds	r3, r5, r6
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402ea2:	42b9      	cmp	r1, r7
  402ea4:	d0cc      	beq.n	402e40 <writeHandler+0x80>
  402ea6:	42a1      	cmp	r1, r4
  402ea8:	d1f5      	bne.n	402e96 <writeHandler+0xd6>
  402eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402eae:	bf00      	nop
  402eb0:	20004d62 	.word	0x20004d62
  402eb4:	2000455c 	.word	0x2000455c
  402eb8:	20002860 	.word	0x20002860
  402ebc:	20002760 	.word	0x20002760

00402ec0 <getReadResponseDataSize>:
}

uint16_t getReadResponseDataSize(uint16_t start_reg, uint16_t end_reg) {
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary

	if(start_reg < REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if starting register is within the data type range
  402ec0:	28ff      	cmp	r0, #255	; 0xff
  402ec2:	d823      	bhi.n	402f0c <getReadResponseDataSize+0x4c>
		if(end_reg > REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if the ending register is past the data type range
  402ec4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  402ec8:	d91c      	bls.n	402f04 <getReadResponseDataSize+0x44>
			size += (REGISTER_AR_SIZE+INT_REG_OFFSET-start_reg)*INT_REG_BYTE_SZ;		//add the register size to the size variable
  402eca:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
  402ece:	0040      	lsls	r0, r0, #1
  402ed0:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+INT_REG_OFFSET;								//set the new start range to the first float register
  402ed2:	f44f 7080 	mov.w	r0, #256	; 0x100
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg > REGISTER_AR_SIZE+FLOAT_REG_OFFSET){								//check if the ending register is past the data type range
  402ed6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  402eda:	d924      	bls.n	402f26 <getReadResponseDataSize+0x66>
			size += (REGISTER_AR_SIZE+FLOAT_REG_OFFSET-start_reg)*FLOAT_REG_BYTE_SZ;	//add the register size to the size variable
  402edc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  402ee0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ee4:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+FLOAT_REG_OFFSET;								//set the new start range to the first float register
  402ee6:	f44f 7000 	mov.w	r0, #512	; 0x200
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg > REGISTER_AR_SIZE+CHAR_REG_OFFSET){								//check if the ending register is past the data type range
  402eea:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
  402eee:	d921      	bls.n	402f34 <getReadResponseDataSize+0x74>
  402ef0:	f503 7340 	add.w	r3, r3, #768	; 0x300
			size += (REGISTER_AR_SIZE+CHAR_REG_OFFSET-start_reg)*CHAR_REG_BYTE_SZ;		//add the register size to the size variable
  402ef4:	1a18      	subs	r0, r3, r0
  402ef6:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+CHAR_REG_OFFSET;								//set the new start range to the first float register
  402ef8:	f44f 7040 	mov.w	r0, #768	; 0x300
  402efc:	4419      	add	r1, r3
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
		size += (end_reg - start_reg)*BOOL_REG_BYTE_SZ;								//return the size including this data type's registers
  402efe:	1a08      	subs	r0, r1, r0
  402f00:	b280      	uxth	r0, r0
		return size;
  402f02:	4770      	bx	lr
			size += (end_reg - start_reg)*INT_REG_BYTE_SZ;							//return the size including this data type's registers
  402f04:	1a08      	subs	r0, r1, r0
  402f06:	0040      	lsls	r0, r0, #1
  402f08:	b280      	uxth	r0, r0
			return size;
  402f0a:	4770      	bx	lr
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
  402f0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  402f10:	d307      	bcc.n	402f22 <getReadResponseDataSize+0x62>
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
  402f12:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  402f16:	d30b      	bcc.n	402f30 <getReadResponseDataSize+0x70>
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
  402f18:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
  402f1c:	d30e      	bcc.n	402f3c <getReadResponseDataSize+0x7c>
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402f1e:	2000      	movs	r0, #0
	}
		
	return size;	
}
  402f20:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402f22:	2300      	movs	r3, #0
  402f24:	e7d7      	b.n	402ed6 <getReadResponseDataSize+0x16>
			size += (end_reg - start_reg)*FLOAT_REG_BYTE_SZ;						//return the size including this data type's registers
  402f26:	1a08      	subs	r0, r1, r0
  402f28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f2c:	b280      	uxth	r0, r0
			return size;
  402f2e:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402f30:	2300      	movs	r3, #0
  402f32:	e7da      	b.n	402eea <getReadResponseDataSize+0x2a>
  402f34:	4419      	add	r1, r3
			size += (end_reg - start_reg)*CHAR_REG_BYTE_SZ;							//return the size including this data type's registers
  402f36:	1a08      	subs	r0, r1, r0
  402f38:	b280      	uxth	r0, r0
			return size;
  402f3a:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402f3c:	2300      	movs	r3, #0
  402f3e:	e7dd      	b.n	402efc <getReadResponseDataSize+0x3c>

00402f40 <modbus_init>:

void modbus_init(const uint8_t slave_id){
	slaveID = slave_id;
  402f40:	4b03      	ldr	r3, [pc, #12]	; (402f50 <modbus_init+0x10>)
  402f42:	7018      	strb	r0, [r3, #0]
	rxBuffer.head = 0;
  402f44:	4b03      	ldr	r3, [pc, #12]	; (402f54 <modbus_init+0x14>)
  402f46:	2200      	movs	r2, #0
  402f48:	801a      	strh	r2, [r3, #0]
	rxBuffer.tail = 0;
  402f4a:	805a      	strh	r2, [r3, #2]
  402f4c:	4770      	bx	lr
  402f4e:	bf00      	nop
  402f50:	20006f6c 	.word	0x20006f6c
  402f54:	20004f64 	.word	0x20004f64

00402f58 <pop_packet>:
	reset_timeout();
}

uint8_t* pop_packet(){
	static uint8_t returnPacket[RX_BUFFER_SIZE];
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402f58:	4b0d      	ldr	r3, [pc, #52]	; (402f90 <pop_packet+0x38>)
  402f5a:	8819      	ldrh	r1, [r3, #0]
  402f5c:	b1a9      	cbz	r1, 402f8a <pop_packet+0x32>
uint8_t* pop_packet(){
  402f5e:	b410      	push	{r4}
  402f60:	4b0c      	ldr	r3, [pc, #48]	; (402f94 <pop_packet+0x3c>)
  402f62:	885b      	ldrh	r3, [r3, #2]
  402f64:	480c      	ldr	r0, [pc, #48]	; (402f98 <pop_packet+0x40>)
  402f66:	1e42      	subs	r2, r0, #1
  402f68:	3901      	subs	r1, #1
  402f6a:	4408      	add	r0, r1
		returnPacket[i] = rxBuffer.data[rxBuffer.tail];
  402f6c:	4c09      	ldr	r4, [pc, #36]	; (402f94 <pop_packet+0x3c>)
  402f6e:	18e1      	adds	r1, r4, r3
  402f70:	7909      	ldrb	r1, [r1, #4]
  402f72:	f802 1f01 	strb.w	r1, [r2, #1]!
		rxBuffer.tail = PKT_WRAP_ARND(rxBuffer.tail + 1);	//iterate the tail
  402f76:	3301      	adds	r3, #1
  402f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402f7c:	4282      	cmp	r2, r0
  402f7e:	d1f6      	bne.n	402f6e <pop_packet+0x16>
  402f80:	4a04      	ldr	r2, [pc, #16]	; (402f94 <pop_packet+0x3c>)
  402f82:	8053      	strh	r3, [r2, #2]
	}
	return returnPacket;									//return
}
  402f84:	4804      	ldr	r0, [pc, #16]	; (402f98 <pop_packet+0x40>)
  402f86:	bc10      	pop	{r4}
  402f88:	4770      	bx	lr
  402f8a:	4803      	ldr	r0, [pc, #12]	; (402f98 <pop_packet+0x40>)
  402f8c:	4770      	bx	lr
  402f8e:	bf00      	nop
  402f90:	20004d60 	.word	0x20004d60
  402f94:	20004f64 	.word	0x20004f64
  402f98:	20000728 	.word	0x20000728

00402f9c <popToFc>:
{
  402f9c:	b510      	push	{r4, lr}
	uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX + 1);
  402f9e:	4a19      	ldr	r2, [pc, #100]	; (403004 <popToFc+0x68>)
  402fa0:	8854      	ldrh	r4, [r2, #2]
  402fa2:	1ca3      	adds	r3, r4, #2
  402fa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
	uint8_t checkFCByte = rxBuffer.data[FCLoc];
  402fa8:	441a      	add	r2, r3
  402faa:	7912      	ldrb	r2, [r2, #4]
	while (checkFCByte != FC_READ_MULT && checkFCByte != FC_WRITE_MULT && FCLoc != rxBuffer.head)
  402fac:	2a03      	cmp	r2, #3
  402fae:	d012      	beq.n	402fd6 <popToFc+0x3a>
  402fb0:	2a10      	cmp	r2, #16
  402fb2:	d010      	beq.n	402fd6 <popToFc+0x3a>
  402fb4:	4a13      	ldr	r2, [pc, #76]	; (403004 <popToFc+0x68>)
  402fb6:	8811      	ldrh	r1, [r2, #0]
  402fb8:	428b      	cmp	r3, r1
  402fba:	d01c      	beq.n	402ff6 <popToFc+0x5a>
		checkFCByte = rxBuffer.data[FCLoc];
  402fbc:	4610      	mov	r0, r2
		FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402fbe:	3301      	adds	r3, #1
  402fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
		checkFCByte = rxBuffer.data[FCLoc];
  402fc4:	18c2      	adds	r2, r0, r3
  402fc6:	7912      	ldrb	r2, [r2, #4]
	while (checkFCByte != FC_READ_MULT && checkFCByte != FC_WRITE_MULT && FCLoc != rxBuffer.head)
  402fc8:	2a03      	cmp	r2, #3
  402fca:	d004      	beq.n	402fd6 <popToFc+0x3a>
  402fcc:	2a10      	cmp	r2, #16
  402fce:	d002      	beq.n	402fd6 <popToFc+0x3a>
  402fd0:	428b      	cmp	r3, r1
  402fd2:	d1f4      	bne.n	402fbe <popToFc+0x22>
		FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402fd4:	460b      	mov	r3, r1
	if (PKT_WRAP_ARND(FCLoc - 1) >= rxBuffer.tail)
  402fd6:	1e5a      	subs	r2, r3, #1
  402fd8:	f3c2 020c 	ubfx	r2, r2, #0, #13
  402fdc:	42a2      	cmp	r2, r4
  402fde:	da0c      	bge.n	402ffa <popToFc+0x5e>
		packetSize = (RX_BUFFER_SIZE - rxBuffer.tail) + PKT_WRAP_ARND(FCLoc - 1);
  402fe0:	3b01      	subs	r3, #1
  402fe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
  402fe6:	f5c4 5400 	rsb	r4, r4, #8192	; 0x2000
  402fea:	4423      	add	r3, r4
  402fec:	4a06      	ldr	r2, [pc, #24]	; (403008 <popToFc+0x6c>)
  402fee:	8013      	strh	r3, [r2, #0]
	pop_packet();
  402ff0:	4b06      	ldr	r3, [pc, #24]	; (40300c <popToFc+0x70>)
  402ff2:	4798      	blx	r3
  402ff4:	bd10      	pop	{r4, pc}
	uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX + 1);
  402ff6:	460b      	mov	r3, r1
  402ff8:	e7ed      	b.n	402fd6 <popToFc+0x3a>
		packetSize = PKT_WRAP_ARND(FCLoc - 1) - rxBuffer.tail;
  402ffa:	1b13      	subs	r3, r2, r4
  402ffc:	4a02      	ldr	r2, [pc, #8]	; (403008 <popToFc+0x6c>)
  402ffe:	8013      	strh	r3, [r2, #0]
  403000:	e7f6      	b.n	402ff0 <popToFc+0x54>
  403002:	bf00      	nop
  403004:	20004f64 	.word	0x20004f64
  403008:	20004d60 	.word	0x20004d60
  40300c:	00402f59 	.word	0x00402f59

00403010 <buffer_get_data_sz>:

uint16_t buffer_get_data_sz(void) {
	if (rxBuffer.head >= rxBuffer.tail) {
  403010:	4b04      	ldr	r3, [pc, #16]	; (403024 <buffer_get_data_sz+0x14>)
  403012:	8818      	ldrh	r0, [r3, #0]
  403014:	885b      	ldrh	r3, [r3, #2]
  403016:	4298      	cmp	r0, r3
		return rxBuffer.head - rxBuffer.tail;
	} else {
		return (RX_BUFFER_SIZE - rxBuffer.tail) + rxBuffer.head;
  403018:	bf38      	it	cc
  40301a:	f500 5000 	addcc.w	r0, r0, #8192	; 0x2000
  40301e:	1ac0      	subs	r0, r0, r3
  403020:	b280      	uxth	r0, r0
	}
}
  403022:	4770      	bx	lr
  403024:	20004f64 	.word	0x20004f64

00403028 <ModRTU_CRC>:

uint16_t ModRTU_CRC(uint8_t* buf, int len)
{
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++) {
  403028:	2900      	cmp	r1, #0
  40302a:	dd16      	ble.n	40305a <ModRTU_CRC+0x32>
{
  40302c:	b410      	push	{r4}
  40302e:	4604      	mov	r4, r0
  403030:	4401      	add	r1, r0
	for (int pos = 0; pos < len; pos++) {
  403032:	f64f 70ff 	movw	r0, #65535	; 0xffff
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc

		for (int i = 8; i != 0; i--) {    // Loop over each bit
			if ((crc & 0x0001) != 0) {      // If the LSB is set
				crc >>= 1;                    // Shift right and XOR 0xA001
				crc ^= 0xA001;
  403036:	f24a 0201 	movw	r2, #40961	; 0xa001
  40303a:	e001      	b.n	403040 <ModRTU_CRC+0x18>
	for (int pos = 0; pos < len; pos++) {
  40303c:	428c      	cmp	r4, r1
  40303e:	d00f      	beq.n	403060 <ModRTU_CRC+0x38>
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc
  403040:	f814 3b01 	ldrb.w	r3, [r4], #1
  403044:	4058      	eors	r0, r3
  403046:	2308      	movs	r3, #8
			if ((crc & 0x0001) != 0) {      // If the LSB is set
  403048:	f010 0f01 	tst.w	r0, #1
				crc ^= 0xA001;
  40304c:	bf14      	ite	ne
  40304e:	ea82 0050 	eorne.w	r0, r2, r0, lsr #1
			}
			else                            // Else LSB is not set
			crc >>= 1;                    // Just shift right
  403052:	0840      	lsreq	r0, r0, #1
		for (int i = 8; i != 0; i--) {    // Loop over each bit
  403054:	3b01      	subs	r3, #1
  403056:	d1f7      	bne.n	403048 <ModRTU_CRC+0x20>
  403058:	e7f0      	b.n	40303c <ModRTU_CRC+0x14>
	uint16_t crc = 0xFFFF;
  40305a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40305e:	4770      	bx	lr
		}
	}
	
	return crc;
  403060:	bc10      	pop	{r4}
  403062:	4770      	bx	lr

00403064 <packet_complete>:
bool packet_complete(){
  403064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403066:	af00      	add	r7, sp, #0
	packetSize = 0;																	// Reset this in case packet is not complete
  403068:	2200      	movs	r2, #0
  40306a:	4b4f      	ldr	r3, [pc, #316]	; (4031a8 <packet_complete+0x144>)
  40306c:	801a      	strh	r2, [r3, #0]
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  40306e:	4b4f      	ldr	r3, [pc, #316]	; (4031ac <packet_complete+0x148>)
  403070:	885c      	ldrh	r4, [r3, #2]
	uint8_t func_code = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + FC_IDX)];
  403072:	1c62      	adds	r2, r4, #1
  403074:	f3c2 020c 	ubfx	r2, r2, #0, #13
  403078:	4413      	add	r3, r2
  40307a:	791b      	ldrb	r3, [r3, #4]
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  40307c:	2b10      	cmp	r3, #16
  40307e:	d006      	beq.n	40308e <packet_complete+0x2a>
  403080:	2b03      	cmp	r3, #3
  403082:	d004      	beq.n	40308e <packet_complete+0x2a>
		popToFc();
  403084:	4b4a      	ldr	r3, [pc, #296]	; (4031b0 <packet_complete+0x14c>)
  403086:	4798      	blx	r3
		return false;
  403088:	2000      	movs	r0, #0
}
  40308a:	46bd      	mov	sp, r7
  40308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t start_reg_hi = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + START_REG_H_IDX)];
  40308e:	1ca2      	adds	r2, r4, #2
  403090:	f3c2 010c 	ubfx	r1, r2, #0, #13
  403094:	4a45      	ldr	r2, [pc, #276]	; (4031ac <packet_complete+0x148>)
  403096:	440a      	add	r2, r1
  403098:	7915      	ldrb	r5, [r2, #4]
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  40309a:	2d03      	cmp	r5, #3
  40309c:	d8f2      	bhi.n	403084 <packet_complete+0x20>
	uint8_t num_reg_hi = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + NUM_REG_H_IDX)];
  40309e:	1d22      	adds	r2, r4, #4
  4030a0:	f3c2 010c 	ubfx	r1, r2, #0, #13
  4030a4:	4a41      	ldr	r2, [pc, #260]	; (4031ac <packet_complete+0x148>)
  4030a6:	440a      	add	r2, r1
  4030a8:	7911      	ldrb	r1, [r2, #4]
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  4030aa:	2903      	cmp	r1, #3
  4030ac:	d8ea      	bhi.n	403084 <packet_complete+0x20>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  4030ae:	f3c4 060c 	ubfx	r6, r4, #0, #13
  4030b2:	4a3e      	ldr	r2, [pc, #248]	; (4031ac <packet_complete+0x148>)
  4030b4:	4432      	add	r2, r6
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  4030b6:	7916      	ldrb	r6, [r2, #4]
  4030b8:	4a3e      	ldr	r2, [pc, #248]	; (4031b4 <packet_complete+0x150>)
  4030ba:	7812      	ldrb	r2, [r2, #0]
  4030bc:	4296      	cmp	r6, r2
  4030be:	d1e1      	bne.n	403084 <packet_complete+0x20>
	if (func_code == 0x10 && num_data_bytes != getReadResponseDataSize(num_bytes_check_start, num_bytes_check_end)) // calc what size should be for write packet here????????????????????????????????????????????????
  4030c0:	2b10      	cmp	r3, #16
  4030c2:	d00a      	beq.n	4030da <packet_complete+0x76>
	else if (func_code == FC_READ_MULT) {
  4030c4:	2b03      	cmp	r3, #3
  4030c6:	d02d      	beq.n	403124 <packet_complete+0xc0>
	num_data_bytes = 0;														// Default 0 for packets with no data bytes
  4030c8:	2600      	movs	r6, #0
	uint16_t full_pkt_sz = num_data_bytes + base_pkt_sz;								//calculate full packet size
  4030ca:	4430      	add	r0, r6
  4030cc:	b285      	uxth	r5, r0
	if (buffer_get_data_sz() < full_pkt_sz) return false;								//make sure we have a full packet
  4030ce:	4b3a      	ldr	r3, [pc, #232]	; (4031b8 <packet_complete+0x154>)
  4030d0:	4798      	blx	r3
  4030d2:	4285      	cmp	r5, r0
  4030d4:	d92d      	bls.n	403132 <packet_complete+0xce>
  4030d6:	2000      	movs	r0, #0
  4030d8:	e7d7      	b.n	40308a <packet_complete+0x26>
	uint8_t num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + WR_DATA_SIZE_IDX)];
  4030da:	4b34      	ldr	r3, [pc, #208]	; (4031ac <packet_complete+0x148>)
  4030dc:	1da2      	adds	r2, r4, #6
  4030de:	f3c2 020c 	ubfx	r2, r2, #0, #13
  4030e2:	441a      	add	r2, r3
  4030e4:	7916      	ldrb	r6, [r2, #4]
	uint8_t start_reg_lo = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + START_REG_L_IDX)];
  4030e6:	1ce2      	adds	r2, r4, #3
  4030e8:	f3c2 020c 	ubfx	r2, r2, #0, #13
  4030ec:	441a      	add	r2, r3
	uint16_t num_bytes_check_start = start_reg_hi << 8 | start_reg_lo;
  4030ee:	7910      	ldrb	r0, [r2, #4]
  4030f0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	uint8_t num_reg_lo = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + NUM_REG_L_IDX)];
  4030f4:	1d62      	adds	r2, r4, #5
  4030f6:	f3c2 020c 	ubfx	r2, r2, #0, #13
  4030fa:	4413      	add	r3, r2
	uint16_t num_bytes_check_end = num_bytes_check_start + (num_reg_hi << 8 | num_reg_lo);
  4030fc:	791b      	ldrb	r3, [r3, #4]
  4030fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  403102:	4401      	add	r1, r0
	if (func_code == 0x10 && num_data_bytes != getReadResponseDataSize(num_bytes_check_start, num_bytes_check_end)) // calc what size should be for write packet here????????????????????????????????????????????????
  403104:	b289      	uxth	r1, r1
  403106:	4b2d      	ldr	r3, [pc, #180]	; (4031bc <packet_complete+0x158>)
  403108:	4798      	blx	r3
  40310a:	b2b3      	uxth	r3, r6
  40310c:	4283      	cmp	r3, r0
  40310e:	d105      	bne.n	40311c <packet_complete+0xb8>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  403110:	4b29      	ldr	r3, [pc, #164]	; (4031b8 <packet_complete+0x154>)
  403112:	4798      	blx	r3
  403114:	2809      	cmp	r0, #9
  403116:	d943      	bls.n	4031a0 <packet_complete+0x13c>
		base_pkt_sz = ABS_MIN_WRITE_PACKET_SIZE - 1;											
  403118:	2009      	movs	r0, #9
  40311a:	e7d6      	b.n	4030ca <packet_complete+0x66>
		popToFc();
  40311c:	4b24      	ldr	r3, [pc, #144]	; (4031b0 <packet_complete+0x14c>)
  40311e:	4798      	blx	r3
		return false;
  403120:	2000      	movs	r0, #0
  403122:	e7b2      	b.n	40308a <packet_complete+0x26>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  403124:	4b24      	ldr	r3, [pc, #144]	; (4031b8 <packet_complete+0x154>)
  403126:	4798      	blx	r3
  403128:	2807      	cmp	r0, #7
  40312a:	d93b      	bls.n	4031a4 <packet_complete+0x140>
		base_pkt_sz = WRITE_RES_PACKET_SIZE;											//we know the final packet size
  40312c:	2008      	movs	r0, #8
	num_data_bytes = 0;														// Default 0 for packets with no data bytes
  40312e:	2600      	movs	r6, #0
  403130:	e7cb      	b.n	4030ca <packet_complete+0x66>
	packetSize = full_pkt_sz;															// Set global packetSize to completed packet size
  403132:	4b1d      	ldr	r3, [pc, #116]	; (4031a8 <packet_complete+0x144>)
  403134:	801d      	strh	r5, [r3, #0]
	uint8_t packetNoCRC[packetSize - CRC_SIZE];											//pull packet into linear buffer for crc check
  403136:	1ea9      	subs	r1, r5, #2
  403138:	1d6b      	adds	r3, r5, #5
  40313a:	f023 0307 	bic.w	r3, r3, #7
  40313e:	ebad 0d03 	sub.w	sp, sp, r3
  403142:	4668      	mov	r0, sp
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  403144:	2900      	cmp	r1, #0
  403146:	dd0e      	ble.n	403166 <packet_complete+0x102>
  403148:	460d      	mov	r5, r1
  40314a:	446d      	add	r5, sp
  40314c:	466a      	mov	r2, sp
		packetNoCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + i)];
  40314e:	f8df e05c 	ldr.w	lr, [pc, #92]	; 4031ac <packet_complete+0x148>
  403152:	1a26      	subs	r6, r4, r0
  403154:	18b3      	adds	r3, r6, r2
  403156:	f3c3 030c 	ubfx	r3, r3, #0, #13
  40315a:	4473      	add	r3, lr
  40315c:	791b      	ldrb	r3, [r3, #4]
  40315e:	f802 3b01 	strb.w	r3, [r2], #1
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  403162:	42aa      	cmp	r2, r5
  403164:	d1f6      	bne.n	403154 <packet_complete+0xf0>
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  403166:	440c      	add	r4, r1
  403168:	4d10      	ldr	r5, [pc, #64]	; (4031ac <packet_complete+0x148>)
  40316a:	f3c4 030c 	ubfx	r3, r4, #0, #13
  40316e:	442b      	add	r3, r5
  403170:	791e      	ldrb	r6, [r3, #4]
	uint16_t expectedCRC = ModRTU_CRC(packetNoCRC, packetSize - CRC_SIZE);				//calculate expected crc
  403172:	4b13      	ldr	r3, [pc, #76]	; (4031c0 <packet_complete+0x15c>)
  403174:	4798      	blx	r3
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  403176:	3401      	adds	r4, #1
  403178:	f3c4 040c 	ubfx	r4, r4, #0, #13
  40317c:	442c      	add	r4, r5
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  40317e:	7922      	ldrb	r2, [r4, #4]
  403180:	f3c0 230f 	ubfx	r3, r0, #8, #16
  403184:	429a      	cmp	r2, r3
  403186:	d006      	beq.n	403196 <packet_complete+0x132>
		packetSize = 1;
  403188:	2201      	movs	r2, #1
  40318a:	4b07      	ldr	r3, [pc, #28]	; (4031a8 <packet_complete+0x144>)
  40318c:	801a      	strh	r2, [r3, #0]
		pop_packet();
  40318e:	4b0d      	ldr	r3, [pc, #52]	; (4031c4 <packet_complete+0x160>)
  403190:	4798      	blx	r3
		return false;
  403192:	2000      	movs	r0, #0
  403194:	e779      	b.n	40308a <packet_complete+0x26>
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  403196:	b2c0      	uxtb	r0, r0
  403198:	42b0      	cmp	r0, r6
  40319a:	d1f5      	bne.n	403188 <packet_complete+0x124>
		return true;																	//packet is complete and passes crc
  40319c:	2001      	movs	r0, #1
  40319e:	e774      	b.n	40308a <packet_complete+0x26>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  4031a0:	2000      	movs	r0, #0
  4031a2:	e772      	b.n	40308a <packet_complete+0x26>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  4031a4:	2000      	movs	r0, #0
  4031a6:	e770      	b.n	40308a <packet_complete+0x26>
  4031a8:	20004d60 	.word	0x20004d60
  4031ac:	20004f64 	.word	0x20004f64
  4031b0:	00402f9d 	.word	0x00402f9d
  4031b4:	20006f6c 	.word	0x20006f6c
  4031b8:	00403011 	.word	0x00403011
  4031bc:	00402ec1 	.word	0x00402ec1
  4031c0:	00403029 	.word	0x00403029
  4031c4:	00402f59 	.word	0x00402f59

004031c8 <modbus_update>:
void modbus_update(void){
  4031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(buffer_get_data_sz() < ABS_MIN_PACKET_SIZE) return;			//if not enough data has been received just break out
  4031ca:	4b30      	ldr	r3, [pc, #192]	; (40328c <modbus_update+0xc4>)
  4031cc:	4798      	blx	r3
  4031ce:	2806      	cmp	r0, #6
  4031d0:	d800      	bhi.n	4031d4 <modbus_update+0xc>
  4031d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( !packet_complete()) return;									//check if an entire packet has been received otherwise return, also resolves overflow errors
  4031d4:	4b2e      	ldr	r3, [pc, #184]	; (403290 <modbus_update+0xc8>)
  4031d6:	4798      	blx	r3
  4031d8:	2800      	cmp	r0, #0
  4031da:	d0fa      	beq.n	4031d2 <modbus_update+0xa>
	uint8_t* packet = pop_packet();									//packet is complete, so pull it out
  4031dc:	4b2d      	ldr	r3, [pc, #180]	; (403294 <modbus_update+0xcc>)
  4031de:	4798      	blx	r3
  4031e0:	4604      	mov	r4, r0
	if(packet[SLAVE_ID_IDX] != slaveID) return;						//disregard if the packet doesn't apply to this slave
  4031e2:	7802      	ldrb	r2, [r0, #0]
  4031e4:	4b2c      	ldr	r3, [pc, #176]	; (403298 <modbus_update+0xd0>)
  4031e6:	781b      	ldrb	r3, [r3, #0]
  4031e8:	429a      	cmp	r2, r3
  4031ea:	d1f2      	bne.n	4031d2 <modbus_update+0xa>
	uint16_t start_reg = packet[START_REG_H_IDX] << 8 | packet[START_REG_L_IDX];
  4031ec:	7887      	ldrb	r7, [r0, #2]
  4031ee:	78c5      	ldrb	r5, [r0, #3]
  4031f0:	ea45 2607 	orr.w	r6, r5, r7, lsl #8
	uint16_t num_registers = packet[NUM_REG_H_IDX] << 8 | packet[NUM_REG_L_IDX];
  4031f4:	7900      	ldrb	r0, [r0, #4]
  4031f6:	7961      	ldrb	r1, [r4, #5]
	int end_reg = start_reg + num_registers;                                    // this register number is exclusive, so all valid register numbers are less than end_reg
  4031f8:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
  4031fc:	4432      	add	r2, r6
	switch(packet[FC_IDX]) {
  4031fe:	7863      	ldrb	r3, [r4, #1]
  403200:	2b03      	cmp	r3, #3
  403202:	d017      	beq.n	403234 <modbus_update+0x6c>
  403204:	2b10      	cmp	r3, #16
  403206:	d029      	beq.n	40325c <modbus_update+0x94>
	uint16_t responceCRC = ModRTU_CRC(responsePacket, responsePacketSize-CRC_SIZE);			//calculate crc
  403208:	4b24      	ldr	r3, [pc, #144]	; (40329c <modbus_update+0xd4>)
  40320a:	881d      	ldrh	r5, [r3, #0]
  40320c:	1eae      	subs	r6, r5, #2
  40320e:	4c24      	ldr	r4, [pc, #144]	; (4032a0 <modbus_update+0xd8>)
  403210:	4631      	mov	r1, r6
  403212:	4620      	mov	r0, r4
  403214:	4b23      	ldr	r3, [pc, #140]	; (4032a4 <modbus_update+0xdc>)
  403216:	4798      	blx	r3
	responsePacket[responsePacketSize-2] = responceCRC & 0xff;								//add CRC
  403218:	55a0      	strb	r0, [r4, r6]
	responsePacket[responsePacketSize-1] = (responceCRC>>8) & 0xff;
  40321a:	1963      	adds	r3, r4, r5
  40321c:	0a00      	lsrs	r0, r0, #8
  40321e:	f803 0c01 	strb.w	r0, [r3, #-1]
	portWrite(responsePacket, responsePacketSize);
  403222:	4629      	mov	r1, r5
  403224:	4620      	mov	r0, r4
  403226:	4b20      	ldr	r3, [pc, #128]	; (4032a8 <modbus_update+0xe0>)
  403228:	4798      	blx	r3
	last_complete = millis();
  40322a:	4b20      	ldr	r3, [pc, #128]	; (4032ac <modbus_update+0xe4>)
  40322c:	4798      	blx	r3
  40322e:	4b20      	ldr	r3, [pc, #128]	; (4032b0 <modbus_update+0xe8>)
  403230:	6018      	str	r0, [r3, #0]
  403232:	e7ce      	b.n	4031d2 <modbus_update+0xa>
			uint16_t read_num_bytes = getReadResponseDataSize(start_reg, end_reg);
  403234:	b295      	uxth	r5, r2
  403236:	4629      	mov	r1, r5
  403238:	4630      	mov	r0, r6
  40323a:	4b1e      	ldr	r3, [pc, #120]	; (4032b4 <modbus_update+0xec>)
  40323c:	4798      	blx	r3
			responsePacketSize = RD_RESP_PACKET_MIN_SIZE + read_num_bytes;
  40323e:	1d42      	adds	r2, r0, #5
  403240:	4b16      	ldr	r3, [pc, #88]	; (40329c <modbus_update+0xd4>)
  403242:	801a      	strh	r2, [r3, #0]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;						//this is how the protocol is now to help identify when the master or slave is speaking
  403244:	4b16      	ldr	r3, [pc, #88]	; (4032a0 <modbus_update+0xd8>)
  403246:	2200      	movs	r2, #0
  403248:	701a      	strb	r2, [r3, #0]
			responsePacket[FC_IDX] = packet[FC_IDX];
  40324a:	7862      	ldrb	r2, [r4, #1]
  40324c:	705a      	strb	r2, [r3, #1]
			responsePacket[RD_DATA_SIZE_IDX] = read_num_bytes;
  40324e:	7098      	strb	r0, [r3, #2]
			readHandler(responsePacket+RD_DATA_BYTE_START, start_reg, end_reg);
  403250:	462a      	mov	r2, r5
  403252:	4631      	mov	r1, r6
  403254:	1cd8      	adds	r0, r3, #3
  403256:	4b18      	ldr	r3, [pc, #96]	; (4032b8 <modbus_update+0xf0>)
  403258:	4798      	blx	r3
			break;
  40325a:	e7d5      	b.n	403208 <modbus_update+0x40>
			responsePacketSize = WR_RESP_PACKET_SIZE;
  40325c:	f04f 0e08 	mov.w	lr, #8
  403260:	4b0e      	ldr	r3, [pc, #56]	; (40329c <modbus_update+0xd4>)
  403262:	f8a3 e000 	strh.w	lr, [r3]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;	
  403266:	4b0e      	ldr	r3, [pc, #56]	; (4032a0 <modbus_update+0xd8>)
  403268:	f04f 0e00 	mov.w	lr, #0
  40326c:	f883 e000 	strb.w	lr, [r3]
			responsePacket[FC_IDX] = packet[FC_IDX];
  403270:	f894 e001 	ldrb.w	lr, [r4, #1]
  403274:	f883 e001 	strb.w	lr, [r3, #1]
			responsePacket[START_REG_H_IDX] = packet[START_REG_H_IDX];
  403278:	709f      	strb	r7, [r3, #2]
			responsePacket[START_REG_L_IDX] = packet[START_REG_L_IDX];
  40327a:	70dd      	strb	r5, [r3, #3]
			responsePacket[NUM_REG_H_IDX] = packet[NUM_REG_H_IDX];
  40327c:	7118      	strb	r0, [r3, #4]
			responsePacket[NUM_REG_L_IDX] = packet[NUM_REG_L_IDX];
  40327e:	7159      	strb	r1, [r3, #5]
			writeHandler(&packet[WR_DATA_BYTE_START], start_reg, end_reg);
  403280:	b292      	uxth	r2, r2
  403282:	4631      	mov	r1, r6
  403284:	1de0      	adds	r0, r4, #7
  403286:	4b0d      	ldr	r3, [pc, #52]	; (4032bc <modbus_update+0xf4>)
  403288:	4798      	blx	r3
			break;
  40328a:	e7bd      	b.n	403208 <modbus_update+0x40>
  40328c:	00403011 	.word	0x00403011
  403290:	00403065 	.word	0x00403065
  403294:	00402f59 	.word	0x00402f59
  403298:	20006f6c 	.word	0x20006f6c
  40329c:	20006f6a 	.word	0x20006f6a
  4032a0:	20002960 	.word	0x20002960
  4032a4:	00403029 	.word	0x00403029
  4032a8:	00402bcd 	.word	0x00402bcd
  4032ac:	00402a65 	.word	0x00402a65
  4032b0:	20000724 	.word	0x20000724
  4032b4:	00402ec1 	.word	0x00402ec1
  4032b8:	00402cc1 	.word	0x00402cc1
  4032bc:	00402dc1 	.word	0x00402dc1

004032c0 <handle_pan_tilt>:
int tilt_min = 620;
int tilt_center = 1670;
int tilt_max = 2380;


void handle_pan_tilt(servo_s *pan_servo, servo_s *tilt_servo) {
  4032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4032c2:	460e      	mov	r6, r1
	if (intRegisters[CENTER_ALL]) {
  4032c4:	4b11      	ldr	r3, [pc, #68]	; (40330c <handle_pan_tilt+0x4c>)
  4032c6:	881b      	ldrh	r3, [r3, #0]
  4032c8:	b9ab      	cbnz	r3, 4032f6 <handle_pan_tilt+0x36>
		servo_write_us(tilt_servo, tilt_servo->us_center);
		
		intRegisters[CENTER_ALL] = 0;
	} else {
		unsigned pan_pos = pan_servo->position + intRegisters[PAN_ADJUST_POSITIVE] - intRegisters[PAN_ADJUST_NEGATIVE];
		unsigned tilt_pos = tilt_servo->position + intRegisters[TILT_ADJUST_POSITIVE] - intRegisters[TILT_ADJUST_NEGATIVE];
  4032ca:	4c10      	ldr	r4, [pc, #64]	; (40330c <handle_pan_tilt+0x4c>)
  4032cc:	88e5      	ldrh	r5, [r4, #6]
  4032ce:	8923      	ldrh	r3, [r4, #8]
  4032d0:	1aed      	subs	r5, r5, r3
  4032d2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  4032d4:	441d      	add	r5, r3
		unsigned pan_pos = pan_servo->position + intRegisters[PAN_ADJUST_POSITIVE] - intRegisters[PAN_ADJUST_NEGATIVE];
  4032d6:	8863      	ldrh	r3, [r4, #2]
  4032d8:	88a1      	ldrh	r1, [r4, #4]
  4032da:	1a5b      	subs	r3, r3, r1
  4032dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
		servo_write_us(pan_servo, pan_pos);
  4032de:	4419      	add	r1, r3
  4032e0:	4f0b      	ldr	r7, [pc, #44]	; (403310 <handle_pan_tilt+0x50>)
  4032e2:	47b8      	blx	r7
		servo_write_us(tilt_servo, tilt_pos);
  4032e4:	4629      	mov	r1, r5
  4032e6:	4630      	mov	r0, r6
  4032e8:	47b8      	blx	r7
		
		intRegisters[PAN_ADJUST_POSITIVE] = 0;
  4032ea:	2300      	movs	r3, #0
  4032ec:	8063      	strh	r3, [r4, #2]
		intRegisters[PAN_ADJUST_NEGATIVE] = 0;
  4032ee:	80a3      	strh	r3, [r4, #4]
		intRegisters[TILT_ADJUST_POSITIVE] = 0;
  4032f0:	80e3      	strh	r3, [r4, #6]
		intRegisters[TILT_ADJUST_NEGATIVE] = 0;
  4032f2:	8123      	strh	r3, [r4, #8]
  4032f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		servo_write_us(pan_servo, pan_servo->us_center);
  4032f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
  4032f8:	4c05      	ldr	r4, [pc, #20]	; (403310 <handle_pan_tilt+0x50>)
  4032fa:	47a0      	blx	r4
		servo_write_us(tilt_servo, tilt_servo->us_center);
  4032fc:	6bb1      	ldr	r1, [r6, #56]	; 0x38
  4032fe:	4630      	mov	r0, r6
  403300:	47a0      	blx	r4
		intRegisters[CENTER_ALL] = 0;
  403302:	2200      	movs	r2, #0
  403304:	4b01      	ldr	r3, [pc, #4]	; (40330c <handle_pan_tilt+0x4c>)
  403306:	801a      	strh	r2, [r3, #0]
  403308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40330a:	bf00      	nop
  40330c:	20004d64 	.word	0x20004d64
  403310:	00402a21 	.word	0x00402a21

00403314 <main>:
	}
}

int main(void) {
  403314:	b500      	push	{lr}
  403316:	b0a5      	sub	sp, #148	; 0x94
	sysclk_init();
  403318:	4b31      	ldr	r3, [pc, #196]	; (4033e0 <main+0xcc>)
  40331a:	4798      	blx	r3
	board_init();
  40331c:	4b31      	ldr	r3, [pc, #196]	; (4033e4 <main+0xd0>)
  40331e:	4798      	blx	r3
	
	portSetup(MODBUS_SER_PORT, MODBUS_BPS, MODBUS_EN_PORT, MODBUS_EN_PIN, MODBUS_TIMEOUT);
  403320:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  403324:	9300      	str	r3, [sp, #0]
  403326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40332a:	4a2f      	ldr	r2, [pc, #188]	; (4033e8 <main+0xd4>)
  40332c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  403330:	482e      	ldr	r0, [pc, #184]	; (4033ec <main+0xd8>)
  403332:	4c2f      	ldr	r4, [pc, #188]	; (4033f0 <main+0xdc>)
  403334:	47a0      	blx	r4
	modbus_init(MODBUS_SLAVE_ID);
  403336:	2002      	movs	r0, #2
  403338:	4b2e      	ldr	r3, [pc, #184]	; (4033f4 <main+0xe0>)
  40333a:	4798      	blx	r3
	
	servo_s pan_servo;
	servo_s tilt_servo;
	//servo_s hitch_servo;
	
	servo_setup(&pan_servo, PWM_CHANNEL_0, pan_min, pan_max, pan_center);
  40333c:	4b2e      	ldr	r3, [pc, #184]	; (4033f8 <main+0xe4>)
  40333e:	681b      	ldr	r3, [r3, #0]
  403340:	4a2e      	ldr	r2, [pc, #184]	; (4033fc <main+0xe8>)
  403342:	6812      	ldr	r2, [r2, #0]
  403344:	492e      	ldr	r1, [pc, #184]	; (403400 <main+0xec>)
  403346:	6809      	ldr	r1, [r1, #0]
  403348:	9100      	str	r1, [sp, #0]
  40334a:	2100      	movs	r1, #0
  40334c:	a815      	add	r0, sp, #84	; 0x54
  40334e:	4d2d      	ldr	r5, [pc, #180]	; (403404 <main+0xf0>)
  403350:	47a8      	blx	r5
	
	// Since the thing can do like 8 revolutions, restrict range to only 1 revolution
	// Not tested, possible the servo needs some physical adjustment
	servo_setup(&tilt_servo, PWM_CHANNEL_1, tilt_min, tilt_max, tilt_center);
  403352:	4b2d      	ldr	r3, [pc, #180]	; (403408 <main+0xf4>)
  403354:	681b      	ldr	r3, [r3, #0]
  403356:	4c2d      	ldr	r4, [pc, #180]	; (40340c <main+0xf8>)
  403358:	4a2d      	ldr	r2, [pc, #180]	; (403410 <main+0xfc>)
  40335a:	6812      	ldr	r2, [r2, #0]
  40335c:	9200      	str	r2, [sp, #0]
  40335e:	6822      	ldr	r2, [r4, #0]
  403360:	2101      	movs	r1, #1
  403362:	a806      	add	r0, sp, #24
  403364:	47a8      	blx	r5
	
	
	servo_write_us(&tilt_servo, tilt_min);
  403366:	6821      	ldr	r1, [r4, #0]
  403368:	a806      	add	r0, sp, #24
  40336a:	4b2a      	ldr	r3, [pc, #168]	; (403414 <main+0x100>)
  40336c:	4798      	blx	r3
	for (volatile uint32_t i = 0; i < (12000000) * 3; i++);
  40336e:	2300      	movs	r3, #0
  403370:	9303      	str	r3, [sp, #12]
  403372:	9a03      	ldr	r2, [sp, #12]
  403374:	4b28      	ldr	r3, [pc, #160]	; (403418 <main+0x104>)
  403376:	429a      	cmp	r2, r3
  403378:	d806      	bhi.n	403388 <main+0x74>
  40337a:	461a      	mov	r2, r3
  40337c:	9b03      	ldr	r3, [sp, #12]
  40337e:	3301      	adds	r3, #1
  403380:	9303      	str	r3, [sp, #12]
  403382:	9b03      	ldr	r3, [sp, #12]
  403384:	4293      	cmp	r3, r2
  403386:	d9f9      	bls.n	40337c <main+0x68>
	servo_write_us(&tilt_servo,tilt_center);
  403388:	4b21      	ldr	r3, [pc, #132]	; (403410 <main+0xfc>)
  40338a:	6819      	ldr	r1, [r3, #0]
  40338c:	a806      	add	r0, sp, #24
  40338e:	4b21      	ldr	r3, [pc, #132]	; (403414 <main+0x100>)
  403390:	4798      	blx	r3
	for (volatile uint32_t i = 0; i < (12000000) * 3; i++);
  403392:	2300      	movs	r3, #0
  403394:	9304      	str	r3, [sp, #16]
  403396:	9a04      	ldr	r2, [sp, #16]
  403398:	4b1f      	ldr	r3, [pc, #124]	; (403418 <main+0x104>)
  40339a:	429a      	cmp	r2, r3
  40339c:	d806      	bhi.n	4033ac <main+0x98>
  40339e:	461a      	mov	r2, r3
  4033a0:	9b04      	ldr	r3, [sp, #16]
  4033a2:	3301      	adds	r3, #1
  4033a4:	9304      	str	r3, [sp, #16]
  4033a6:	9b04      	ldr	r3, [sp, #16]
  4033a8:	4293      	cmp	r3, r2
  4033aa:	d9f9      	bls.n	4033a0 <main+0x8c>
	servo_write_us(&tilt_servo, tilt_max);
  4033ac:	4b16      	ldr	r3, [pc, #88]	; (403408 <main+0xf4>)
  4033ae:	6819      	ldr	r1, [r3, #0]
  4033b0:	a806      	add	r0, sp, #24
  4033b2:	4b18      	ldr	r3, [pc, #96]	; (403414 <main+0x100>)
  4033b4:	4798      	blx	r3
	for (volatile uint32_t i = 0; i < (12000000) * 3; i++);
  4033b6:	2300      	movs	r3, #0
  4033b8:	9305      	str	r3, [sp, #20]
  4033ba:	9a05      	ldr	r2, [sp, #20]
  4033bc:	4b16      	ldr	r3, [pc, #88]	; (403418 <main+0x104>)
  4033be:	429a      	cmp	r2, r3
  4033c0:	d806      	bhi.n	4033d0 <main+0xbc>
  4033c2:	461a      	mov	r2, r3
  4033c4:	9b05      	ldr	r3, [sp, #20]
  4033c6:	3301      	adds	r3, #1
  4033c8:	9305      	str	r3, [sp, #20]
  4033ca:	9b05      	ldr	r3, [sp, #20]
  4033cc:	4293      	cmp	r3, r2
  4033ce:	d9f9      	bls.n	4033c4 <main+0xb0>
	
	while (1) {
		modbus_update();
  4033d0:	4d12      	ldr	r5, [pc, #72]	; (40341c <main+0x108>)
		handle_pan_tilt(&pan_servo, &tilt_servo);
  4033d2:	4c13      	ldr	r4, [pc, #76]	; (403420 <main+0x10c>)
		modbus_update();
  4033d4:	47a8      	blx	r5
		handle_pan_tilt(&pan_servo, &tilt_servo);
  4033d6:	a906      	add	r1, sp, #24
  4033d8:	a815      	add	r0, sp, #84	; 0x54
  4033da:	47a0      	blx	r4
  4033dc:	e7fa      	b.n	4033d4 <main+0xc0>
  4033de:	bf00      	nop
  4033e0:	0040013d 	.word	0x0040013d
  4033e4:	00400139 	.word	0x00400139
  4033e8:	400e0e00 	.word	0x400e0e00
  4033ec:	400e0800 	.word	0x400e0800
  4033f0:	00402a7d 	.word	0x00402a7d
  4033f4:	00402f41 	.word	0x00402f41
  4033f8:	200000ac 	.word	0x200000ac
  4033fc:	200000b0 	.word	0x200000b0
  403400:	200000a8 	.word	0x200000a8
  403404:	0040298d 	.word	0x0040298d
  403408:	200000b8 	.word	0x200000b8
  40340c:	200000bc 	.word	0x200000bc
  403410:	200000b4 	.word	0x200000b4
  403414:	00402a21 	.word	0x00402a21
  403418:	022550ff 	.word	0x022550ff
  40341c:	004031c9 	.word	0x004031c9
  403420:	004032c1 	.word	0x004032c1

00403424 <__libc_init_array>:
  403424:	b570      	push	{r4, r5, r6, lr}
  403426:	4e0f      	ldr	r6, [pc, #60]	; (403464 <__libc_init_array+0x40>)
  403428:	4d0f      	ldr	r5, [pc, #60]	; (403468 <__libc_init_array+0x44>)
  40342a:	1b76      	subs	r6, r6, r5
  40342c:	10b6      	asrs	r6, r6, #2
  40342e:	bf18      	it	ne
  403430:	2400      	movne	r4, #0
  403432:	d005      	beq.n	403440 <__libc_init_array+0x1c>
  403434:	3401      	adds	r4, #1
  403436:	f855 3b04 	ldr.w	r3, [r5], #4
  40343a:	4798      	blx	r3
  40343c:	42a6      	cmp	r6, r4
  40343e:	d1f9      	bne.n	403434 <__libc_init_array+0x10>
  403440:	4e0a      	ldr	r6, [pc, #40]	; (40346c <__libc_init_array+0x48>)
  403442:	4d0b      	ldr	r5, [pc, #44]	; (403470 <__libc_init_array+0x4c>)
  403444:	1b76      	subs	r6, r6, r5
  403446:	f000 f90b 	bl	403660 <_init>
  40344a:	10b6      	asrs	r6, r6, #2
  40344c:	bf18      	it	ne
  40344e:	2400      	movne	r4, #0
  403450:	d006      	beq.n	403460 <__libc_init_array+0x3c>
  403452:	3401      	adds	r4, #1
  403454:	f855 3b04 	ldr.w	r3, [r5], #4
  403458:	4798      	blx	r3
  40345a:	42a6      	cmp	r6, r4
  40345c:	d1f9      	bne.n	403452 <__libc_init_array+0x2e>
  40345e:	bd70      	pop	{r4, r5, r6, pc}
  403460:	bd70      	pop	{r4, r5, r6, pc}
  403462:	bf00      	nop
  403464:	0040366c 	.word	0x0040366c
  403468:	0040366c 	.word	0x0040366c
  40346c:	00403674 	.word	0x00403674
  403470:	0040366c 	.word	0x0040366c

00403474 <memset>:
  403474:	b470      	push	{r4, r5, r6}
  403476:	0786      	lsls	r6, r0, #30
  403478:	d046      	beq.n	403508 <memset+0x94>
  40347a:	1e54      	subs	r4, r2, #1
  40347c:	2a00      	cmp	r2, #0
  40347e:	d041      	beq.n	403504 <memset+0x90>
  403480:	b2ca      	uxtb	r2, r1
  403482:	4603      	mov	r3, r0
  403484:	e002      	b.n	40348c <memset+0x18>
  403486:	f114 34ff 	adds.w	r4, r4, #4294967295
  40348a:	d33b      	bcc.n	403504 <memset+0x90>
  40348c:	f803 2b01 	strb.w	r2, [r3], #1
  403490:	079d      	lsls	r5, r3, #30
  403492:	d1f8      	bne.n	403486 <memset+0x12>
  403494:	2c03      	cmp	r4, #3
  403496:	d92e      	bls.n	4034f6 <memset+0x82>
  403498:	b2cd      	uxtb	r5, r1
  40349a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40349e:	2c0f      	cmp	r4, #15
  4034a0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4034a4:	d919      	bls.n	4034da <memset+0x66>
  4034a6:	f103 0210 	add.w	r2, r3, #16
  4034aa:	4626      	mov	r6, r4
  4034ac:	3e10      	subs	r6, #16
  4034ae:	2e0f      	cmp	r6, #15
  4034b0:	f842 5c10 	str.w	r5, [r2, #-16]
  4034b4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4034b8:	f842 5c08 	str.w	r5, [r2, #-8]
  4034bc:	f842 5c04 	str.w	r5, [r2, #-4]
  4034c0:	f102 0210 	add.w	r2, r2, #16
  4034c4:	d8f2      	bhi.n	4034ac <memset+0x38>
  4034c6:	f1a4 0210 	sub.w	r2, r4, #16
  4034ca:	f022 020f 	bic.w	r2, r2, #15
  4034ce:	f004 040f 	and.w	r4, r4, #15
  4034d2:	3210      	adds	r2, #16
  4034d4:	2c03      	cmp	r4, #3
  4034d6:	4413      	add	r3, r2
  4034d8:	d90d      	bls.n	4034f6 <memset+0x82>
  4034da:	461e      	mov	r6, r3
  4034dc:	4622      	mov	r2, r4
  4034de:	3a04      	subs	r2, #4
  4034e0:	2a03      	cmp	r2, #3
  4034e2:	f846 5b04 	str.w	r5, [r6], #4
  4034e6:	d8fa      	bhi.n	4034de <memset+0x6a>
  4034e8:	1f22      	subs	r2, r4, #4
  4034ea:	f022 0203 	bic.w	r2, r2, #3
  4034ee:	3204      	adds	r2, #4
  4034f0:	4413      	add	r3, r2
  4034f2:	f004 0403 	and.w	r4, r4, #3
  4034f6:	b12c      	cbz	r4, 403504 <memset+0x90>
  4034f8:	b2c9      	uxtb	r1, r1
  4034fa:	441c      	add	r4, r3
  4034fc:	f803 1b01 	strb.w	r1, [r3], #1
  403500:	429c      	cmp	r4, r3
  403502:	d1fb      	bne.n	4034fc <memset+0x88>
  403504:	bc70      	pop	{r4, r5, r6}
  403506:	4770      	bx	lr
  403508:	4614      	mov	r4, r2
  40350a:	4603      	mov	r3, r0
  40350c:	e7c2      	b.n	403494 <memset+0x20>
  40350e:	bf00      	nop

00403510 <register_fini>:
  403510:	4b02      	ldr	r3, [pc, #8]	; (40351c <register_fini+0xc>)
  403512:	b113      	cbz	r3, 40351a <register_fini+0xa>
  403514:	4802      	ldr	r0, [pc, #8]	; (403520 <register_fini+0x10>)
  403516:	f000 b805 	b.w	403524 <atexit>
  40351a:	4770      	bx	lr
  40351c:	00000000 	.word	0x00000000
  403520:	00403531 	.word	0x00403531

00403524 <atexit>:
  403524:	2300      	movs	r3, #0
  403526:	4601      	mov	r1, r0
  403528:	461a      	mov	r2, r3
  40352a:	4618      	mov	r0, r3
  40352c:	f000 b81e 	b.w	40356c <__register_exitproc>

00403530 <__libc_fini_array>:
  403530:	b538      	push	{r3, r4, r5, lr}
  403532:	4c0a      	ldr	r4, [pc, #40]	; (40355c <__libc_fini_array+0x2c>)
  403534:	4d0a      	ldr	r5, [pc, #40]	; (403560 <__libc_fini_array+0x30>)
  403536:	1b64      	subs	r4, r4, r5
  403538:	10a4      	asrs	r4, r4, #2
  40353a:	d00a      	beq.n	403552 <__libc_fini_array+0x22>
  40353c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403540:	3b01      	subs	r3, #1
  403542:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403546:	3c01      	subs	r4, #1
  403548:	f855 3904 	ldr.w	r3, [r5], #-4
  40354c:	4798      	blx	r3
  40354e:	2c00      	cmp	r4, #0
  403550:	d1f9      	bne.n	403546 <__libc_fini_array+0x16>
  403552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403556:	f000 b88d 	b.w	403674 <_fini>
  40355a:	bf00      	nop
  40355c:	00403684 	.word	0x00403684
  403560:	00403680 	.word	0x00403680

00403564 <__retarget_lock_acquire_recursive>:
  403564:	4770      	bx	lr
  403566:	bf00      	nop

00403568 <__retarget_lock_release_recursive>:
  403568:	4770      	bx	lr
  40356a:	bf00      	nop

0040356c <__register_exitproc>:
  40356c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403570:	4d2c      	ldr	r5, [pc, #176]	; (403624 <__register_exitproc+0xb8>)
  403572:	4606      	mov	r6, r0
  403574:	6828      	ldr	r0, [r5, #0]
  403576:	4698      	mov	r8, r3
  403578:	460f      	mov	r7, r1
  40357a:	4691      	mov	r9, r2
  40357c:	f7ff fff2 	bl	403564 <__retarget_lock_acquire_recursive>
  403580:	4b29      	ldr	r3, [pc, #164]	; (403628 <__register_exitproc+0xbc>)
  403582:	681c      	ldr	r4, [r3, #0]
  403584:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403588:	2b00      	cmp	r3, #0
  40358a:	d03e      	beq.n	40360a <__register_exitproc+0x9e>
  40358c:	685a      	ldr	r2, [r3, #4]
  40358e:	2a1f      	cmp	r2, #31
  403590:	dc1c      	bgt.n	4035cc <__register_exitproc+0x60>
  403592:	f102 0e01 	add.w	lr, r2, #1
  403596:	b176      	cbz	r6, 4035b6 <__register_exitproc+0x4a>
  403598:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40359c:	2401      	movs	r4, #1
  40359e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4035a2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4035a6:	4094      	lsls	r4, r2
  4035a8:	4320      	orrs	r0, r4
  4035aa:	2e02      	cmp	r6, #2
  4035ac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4035b0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4035b4:	d023      	beq.n	4035fe <__register_exitproc+0x92>
  4035b6:	3202      	adds	r2, #2
  4035b8:	f8c3 e004 	str.w	lr, [r3, #4]
  4035bc:	6828      	ldr	r0, [r5, #0]
  4035be:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4035c2:	f7ff ffd1 	bl	403568 <__retarget_lock_release_recursive>
  4035c6:	2000      	movs	r0, #0
  4035c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4035cc:	4b17      	ldr	r3, [pc, #92]	; (40362c <__register_exitproc+0xc0>)
  4035ce:	b30b      	cbz	r3, 403614 <__register_exitproc+0xa8>
  4035d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4035d4:	f3af 8000 	nop.w
  4035d8:	4603      	mov	r3, r0
  4035da:	b1d8      	cbz	r0, 403614 <__register_exitproc+0xa8>
  4035dc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4035e0:	6002      	str	r2, [r0, #0]
  4035e2:	2100      	movs	r1, #0
  4035e4:	6041      	str	r1, [r0, #4]
  4035e6:	460a      	mov	r2, r1
  4035e8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4035ec:	f04f 0e01 	mov.w	lr, #1
  4035f0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4035f4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4035f8:	2e00      	cmp	r6, #0
  4035fa:	d0dc      	beq.n	4035b6 <__register_exitproc+0x4a>
  4035fc:	e7cc      	b.n	403598 <__register_exitproc+0x2c>
  4035fe:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  403602:	430c      	orrs	r4, r1
  403604:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  403608:	e7d5      	b.n	4035b6 <__register_exitproc+0x4a>
  40360a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40360e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  403612:	e7bb      	b.n	40358c <__register_exitproc+0x20>
  403614:	6828      	ldr	r0, [r5, #0]
  403616:	f7ff ffa7 	bl	403568 <__retarget_lock_release_recursive>
  40361a:	f04f 30ff 	mov.w	r0, #4294967295
  40361e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403622:	bf00      	nop
  403624:	200004e8 	.word	0x200004e8
  403628:	0040365c 	.word	0x0040365c
  40362c:	00000000 	.word	0x00000000
  403630:	00000001 	.word	0x00000001
  403634:	00000002 	.word	0x00000002
  403638:	00000004 	.word	0x00000004
  40363c:	00000008 	.word	0x00000008
  403640:	00000010 	.word	0x00000010
  403644:	00000020 	.word	0x00000020
  403648:	00000040 	.word	0x00000040
  40364c:	00000080 	.word	0x00000080
  403650:	00000100 	.word	0x00000100
  403654:	00000200 	.word	0x00000200
  403658:	00000400 	.word	0x00000400

0040365c <_global_impure_ptr>:
  40365c:	200000c0                                ... 

00403660 <_init>:
  403660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403662:	bf00      	nop
  403664:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403666:	bc08      	pop	{r3}
  403668:	469e      	mov	lr, r3
  40366a:	4770      	bx	lr

0040366c <__init_array_start>:
  40366c:	00403511 	.word	0x00403511

00403670 <__frame_dummy_init_array_entry>:
  403670:	004000f1                                ..@.

00403674 <_fini>:
  403674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403676:	bf00      	nop
  403678:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40367a:	bc08      	pop	{r3}
  40367c:	469e      	mov	lr, r3
  40367e:	4770      	bx	lr

00403680 <__fini_array_start>:
  403680:	004000cd 	.word	0x004000cd
