
Battery Monitoring System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005070  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004dc  20000000  00405070  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003740  200004dc  0040554c  000204dc  2**2
                  ALLOC
  3 .stack        00003004  20003c1c  00408c8c  000204dc  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000204dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020506  2**0
                  CONTENTS, READONLY
  6 .debug_info   000211a6  00000000  00000000  0002055f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043f1  00000000  00000000  00041705  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000dc8  00000000  00000000  00045af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00016248  00000000  00000000  000468be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000122e3  00000000  00000000  0005cb06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00053c0c  00000000  00000000  0006ede9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007f18  00000000  00000000  000c29f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e70  00000000  00000000  000ca90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002484  00000000  00000000  000cb780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 6c 00 20 b1 32 40 00 ad 32 40 00 ad 32 40 00      l. .2@..2@..2@.
  400010:	ad 32 40 00 ad 32 40 00 ad 32 40 00 00 00 00 00     .2@..2@..2@.....
	...
  40002c:	ad 32 40 00 ad 32 40 00 00 00 00 00 ad 32 40 00     .2@..2@......2@.
  40003c:	ad 32 40 00 ad 32 40 00 ad 32 40 00 ad 32 40 00     .2@..2@..2@..2@.
  40004c:	01 25 40 00 ad 32 40 00 ad 32 40 00 ad 32 40 00     .%@..2@..2@..2@.
  40005c:	00 00 00 00 5d 29 40 00 69 29 40 00 00 00 00 00     ....])@.i)@.....
  40006c:	95 24 40 00 f1 0c 40 00 00 00 00 00 ad 32 40 00     .$@...@......2@.
	...
  40008c:	ad 32 40 00 ad 32 40 00 ad 32 40 00 ad 32 40 00     .2@..2@..2@..2@.
  40009c:	ad 32 40 00 99 3b 40 00 ad 32 40 00 00 00 00 00     .2@..;@..2@.....
	...
  4000b4:	99 3a 40 00 00 00 00 00 ad 32 40 00 ad 32 40 00     .:@......2@..2@.
  4000c4:	ad 32 40 00 91 13 40 00                             .2@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200004dc 	.word	0x200004dc
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00405070 	.word	0x00405070

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00405070 	.word	0x00405070
  40012c:	200004e0 	.word	0x200004e0
  400130:	00405070 	.word	0x00405070
  400134:	00000000 	.word	0x00000000

00400138 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400138:	490e      	ldr	r1, [pc, #56]	; (400174 <udi_cdc_comm_enable+0x3c>)
  40013a:	2300      	movs	r3, #0
  40013c:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40013e:	4a0e      	ldr	r2, [pc, #56]	; (400178 <udi_cdc_comm_enable+0x40>)
  400140:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400142:	4a0e      	ldr	r2, [pc, #56]	; (40017c <udi_cdc_comm_enable+0x44>)
  400144:	20a1      	movs	r0, #161	; 0xa1
  400146:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400148:	2020      	movs	r0, #32
  40014a:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40014c:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40014e:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400150:	2002      	movs	r0, #2
  400152:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400154:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400156:	4a0a      	ldr	r2, [pc, #40]	; (400180 <udi_cdc_comm_enable+0x48>)
  400158:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  40015c:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40015e:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400160:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400162:	2308      	movs	r3, #8
  400164:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400166:	780b      	ldrb	r3, [r1, #0]
  400168:	3301      	adds	r3, #1
  40016a:	b2db      	uxtb	r3, r3
  40016c:	700b      	strb	r3, [r1, #0]
	return true;
}
  40016e:	2001      	movs	r0, #1
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	20000503 	.word	0x20000503
  400178:	20000598 	.word	0x20000598
  40017c:	20000630 	.word	0x20000630
  400180:	200004fc 	.word	0x200004fc

00400184 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400184:	4a02      	ldr	r2, [pc, #8]	; (400190 <udi_cdc_comm_disable+0xc>)
  400186:	7813      	ldrb	r3, [r2, #0]
  400188:	3b01      	subs	r3, #1
  40018a:	b2db      	uxtb	r3, r3
  40018c:	7013      	strb	r3, [r2, #0]
  40018e:	4770      	bx	lr
  400190:	20000503 	.word	0x20000503

00400194 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400194:	4a04      	ldr	r2, [pc, #16]	; (4001a8 <udi_cdc_data_disable+0x14>)
  400196:	7813      	ldrb	r3, [r2, #0]
  400198:	3b01      	subs	r3, #1
  40019a:	b2db      	uxtb	r3, r3
  40019c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  40019e:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001a0:	2200      	movs	r2, #0
  4001a2:	4b02      	ldr	r3, [pc, #8]	; (4001ac <udi_cdc_data_disable+0x18>)
  4001a4:	701a      	strb	r2, [r3, #0]
  4001a6:	4770      	bx	lr
  4001a8:	20000504 	.word	0x20000504
  4001ac:	200004fa 	.word	0x200004fa

004001b0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b0:	2000      	movs	r0, #0
  4001b2:	4770      	bx	lr

004001b4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001b4:	2000      	movs	r0, #0
  4001b6:	4770      	bx	lr

004001b8 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001b8:	4b1d      	ldr	r3, [pc, #116]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001ba:	781b      	ldrb	r3, [r3, #0]
  4001bc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001c0:	d105      	bne.n	4001ce <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001c6:	2b20      	cmp	r3, #32
  4001c8:	d018      	beq.n	4001fc <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001ca:	2000      	movs	r0, #0
  4001cc:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001d2:	2b20      	cmp	r3, #32
  4001d4:	d001      	beq.n	4001da <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  4001d6:	2000      	movs	r0, #0
  4001d8:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001da:	4b15      	ldr	r3, [pc, #84]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001dc:	785b      	ldrb	r3, [r3, #1]
  4001de:	2b21      	cmp	r3, #33	; 0x21
  4001e0:	d124      	bne.n	40022c <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  4001e2:	4b13      	ldr	r3, [pc, #76]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e4:	88db      	ldrh	r3, [r3, #6]
  4001e6:	2b07      	cmp	r3, #7
  4001e8:	d001      	beq.n	4001ee <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  4001ea:	2000      	movs	r0, #0
  4001ec:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <udi_cdc_comm_setup+0x7c>)
  4001f2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4001f4:	2207      	movs	r2, #7
  4001f6:	819a      	strh	r2, [r3, #12]
				return true;
  4001f8:	2001      	movs	r0, #1
  4001fa:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001fc:	4b0c      	ldr	r3, [pc, #48]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001fe:	7858      	ldrb	r0, [r3, #1]
  400200:	2820      	cmp	r0, #32
  400202:	d004      	beq.n	40020e <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400204:	2822      	cmp	r0, #34	; 0x22
  400206:	bf14      	ite	ne
  400208:	2000      	movne	r0, #0
  40020a:	2001      	moveq	r0, #1
  40020c:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  40020e:	4b08      	ldr	r3, [pc, #32]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400210:	88db      	ldrh	r3, [r3, #6]
  400212:	2b07      	cmp	r3, #7
  400214:	d001      	beq.n	40021a <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  400216:	2000      	movs	r0, #0
}
  400218:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <udi_cdc_comm_setup+0x78>)
  40021c:	4a06      	ldr	r2, [pc, #24]	; (400238 <udi_cdc_comm_setup+0x80>)
  40021e:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400220:	4a04      	ldr	r2, [pc, #16]	; (400234 <udi_cdc_comm_setup+0x7c>)
  400222:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400224:	2207      	movs	r2, #7
  400226:	819a      	strh	r2, [r3, #12]
				return true;
  400228:	2001      	movs	r0, #1
  40022a:	4770      	bx	lr
	return false;  // request Not supported
  40022c:	2000      	movs	r0, #0
  40022e:	4770      	bx	lr
  400230:	20000f2c 	.word	0x20000f2c
  400234:	200004fc 	.word	0x200004fc
  400238:	0040023d 	.word	0x0040023d

0040023c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  40023c:	4770      	bx	lr
	...

00400240 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400240:	4b44      	ldr	r3, [pc, #272]	; (400354 <udi_cdc_tx_send+0x114>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b103      	cbz	r3, 400248 <udi_cdc_tx_send+0x8>
  400246:	4770      	bx	lr
{
  400248:	b570      	push	{r4, r5, r6, lr}
  40024a:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40024c:	4b42      	ldr	r3, [pc, #264]	; (400358 <udi_cdc_tx_send+0x118>)
  40024e:	4798      	blx	r3
  400250:	2800      	cmp	r0, #0
  400252:	d041      	beq.n	4002d8 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400254:	4b41      	ldr	r3, [pc, #260]	; (40035c <udi_cdc_tx_send+0x11c>)
  400256:	881c      	ldrh	r4, [r3, #0]
  400258:	4b41      	ldr	r3, [pc, #260]	; (400360 <udi_cdc_tx_send+0x120>)
  40025a:	4798      	blx	r3
  40025c:	4284      	cmp	r4, r0
  40025e:	d076      	beq.n	40034e <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400260:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400264:	fab3 f383 	clz	r3, r3
  400268:	095b      	lsrs	r3, r3, #5
  40026a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40026c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40026e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400272:	2200      	movs	r2, #0
  400274:	4b3b      	ldr	r3, [pc, #236]	; (400364 <udi_cdc_tx_send+0x124>)
  400276:	701a      	strb	r2, [r3, #0]
	return flags;
  400278:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40027a:	4b3b      	ldr	r3, [pc, #236]	; (400368 <udi_cdc_tx_send+0x128>)
  40027c:	781c      	ldrb	r4, [r3, #0]
  40027e:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400280:	4b3a      	ldr	r3, [pc, #232]	; (40036c <udi_cdc_tx_send+0x12c>)
  400282:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400286:	2b00      	cmp	r3, #0
  400288:	d02d      	beq.n	4002e6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40028a:	2200      	movs	r2, #0
  40028c:	4b38      	ldr	r3, [pc, #224]	; (400370 <udi_cdc_tx_send+0x130>)
  40028e:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400290:	4b38      	ldr	r3, [pc, #224]	; (400374 <udi_cdc_tx_send+0x134>)
  400292:	781b      	ldrb	r3, [r3, #0]
  400294:	2b00      	cmp	r3, #0
  400296:	d142      	bne.n	40031e <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400298:	fab4 f384 	clz	r3, r4
  40029c:	095b      	lsrs	r3, r3, #5
  40029e:	4a32      	ldr	r2, [pc, #200]	; (400368 <udi_cdc_tx_send+0x128>)
  4002a0:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002a2:	2201      	movs	r2, #1
  4002a4:	4b2b      	ldr	r3, [pc, #172]	; (400354 <udi_cdc_tx_send+0x114>)
  4002a6:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002a8:	b125      	cbz	r5, 4002b4 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002aa:	4b2e      	ldr	r3, [pc, #184]	; (400364 <udi_cdc_tx_send+0x124>)
  4002ac:	701a      	strb	r2, [r3, #0]
  4002ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002b2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002b4:	4626      	mov	r6, r4
  4002b6:	4b2d      	ldr	r3, [pc, #180]	; (40036c <udi_cdc_tx_send+0x12c>)
  4002b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002bc:	2b40      	cmp	r3, #64	; 0x40
  4002be:	bf14      	ite	ne
  4002c0:	2501      	movne	r5, #1
  4002c2:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002c4:	d034      	beq.n	400330 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4002c6:	4b24      	ldr	r3, [pc, #144]	; (400358 <udi_cdc_tx_send+0x118>)
  4002c8:	4798      	blx	r3
  4002ca:	2800      	cmp	r0, #0
  4002cc:	d02b      	beq.n	400326 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002ce:	4b24      	ldr	r3, [pc, #144]	; (400360 <udi_cdc_tx_send+0x120>)
  4002d0:	4798      	blx	r3
  4002d2:	4b22      	ldr	r3, [pc, #136]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002d4:	8018      	strh	r0, [r3, #0]
  4002d6:	e02e      	b.n	400336 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4002d8:	4b20      	ldr	r3, [pc, #128]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002da:	881c      	ldrh	r4, [r3, #0]
  4002dc:	4b26      	ldr	r3, [pc, #152]	; (400378 <udi_cdc_tx_send+0x138>)
  4002de:	4798      	blx	r3
  4002e0:	4284      	cmp	r4, r0
  4002e2:	d1bd      	bne.n	400260 <udi_cdc_tx_send+0x20>
  4002e4:	e033      	b.n	40034e <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4002e6:	4a22      	ldr	r2, [pc, #136]	; (400370 <udi_cdc_tx_send+0x130>)
  4002e8:	8813      	ldrh	r3, [r2, #0]
  4002ea:	3301      	adds	r3, #1
  4002ec:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002ee:	4b1a      	ldr	r3, [pc, #104]	; (400358 <udi_cdc_tx_send+0x118>)
  4002f0:	4798      	blx	r3
  4002f2:	b918      	cbnz	r0, 4002fc <udi_cdc_tx_send+0xbc>
  4002f4:	4b1e      	ldr	r3, [pc, #120]	; (400370 <udi_cdc_tx_send+0x130>)
  4002f6:	881b      	ldrh	r3, [r3, #0]
  4002f8:	2b63      	cmp	r3, #99	; 0x63
  4002fa:	d908      	bls.n	40030e <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4002fc:	4b16      	ldr	r3, [pc, #88]	; (400358 <udi_cdc_tx_send+0x118>)
  4002fe:	4798      	blx	r3
  400300:	2800      	cmp	r0, #0
  400302:	d0c2      	beq.n	40028a <udi_cdc_tx_send+0x4a>
  400304:	4b1a      	ldr	r3, [pc, #104]	; (400370 <udi_cdc_tx_send+0x130>)
  400306:	881b      	ldrh	r3, [r3, #0]
  400308:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40030c:	d2bd      	bcs.n	40028a <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  40030e:	b1f5      	cbz	r5, 40034e <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  400310:	2201      	movs	r2, #1
  400312:	4b14      	ldr	r3, [pc, #80]	; (400364 <udi_cdc_tx_send+0x124>)
  400314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40031a:	b662      	cpsie	i
  40031c:	e017      	b.n	40034e <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40031e:	fab4 f484 	clz	r4, r4
  400322:	0964      	lsrs	r4, r4, #5
  400324:	e7bd      	b.n	4002a2 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400326:	4b14      	ldr	r3, [pc, #80]	; (400378 <udi_cdc_tx_send+0x138>)
  400328:	4798      	blx	r3
  40032a:	4b0c      	ldr	r3, [pc, #48]	; (40035c <udi_cdc_tx_send+0x11c>)
  40032c:	8018      	strh	r0, [r3, #0]
  40032e:	e002      	b.n	400336 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400330:	2200      	movs	r2, #0
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <udi_cdc_tx_send+0x11c>)
  400334:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400336:	4b0d      	ldr	r3, [pc, #52]	; (40036c <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400338:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  40033c:	4a0f      	ldr	r2, [pc, #60]	; (40037c <udi_cdc_tx_send+0x13c>)
  40033e:	9200      	str	r2, [sp, #0]
  400340:	4a0f      	ldr	r2, [pc, #60]	; (400380 <udi_cdc_tx_send+0x140>)
  400342:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400346:	4629      	mov	r1, r5
  400348:	2081      	movs	r0, #129	; 0x81
  40034a:	4c0e      	ldr	r4, [pc, #56]	; (400384 <udi_cdc_tx_send+0x144>)
  40034c:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40034e:	b004      	add	sp, #16
  400350:	bd70      	pop	{r4, r5, r6, pc}
  400352:	bf00      	nop
  400354:	2000062c 	.word	0x2000062c
  400358:	00401df1 	.word	0x00401df1
  40035c:	20000628 	.word	0x20000628
  400360:	00401e5d 	.word	0x00401e5d
  400364:	200000a0 	.word	0x200000a0
  400368:	20000624 	.word	0x20000624
  40036c:	20000620 	.word	0x20000620
  400370:	200004f8 	.word	0x200004f8
  400374:	2000059c 	.word	0x2000059c
  400378:	00401e4d 	.word	0x00401e4d
  40037c:	00400389 	.word	0x00400389
  400380:	200005a0 	.word	0x200005a0
  400384:	004021b5 	.word	0x004021b5

00400388 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400388:	b100      	cbz	r0, 40038c <udi_cdc_data_sent+0x4>
  40038a:	4770      	bx	lr
{
  40038c:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40038e:	4b07      	ldr	r3, [pc, #28]	; (4003ac <udi_cdc_data_sent+0x24>)
  400390:	781b      	ldrb	r3, [r3, #0]
  400392:	fab3 f383 	clz	r3, r3
  400396:	095b      	lsrs	r3, r3, #5
  400398:	4a05      	ldr	r2, [pc, #20]	; (4003b0 <udi_cdc_data_sent+0x28>)
  40039a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40039e:	4b05      	ldr	r3, [pc, #20]	; (4003b4 <udi_cdc_data_sent+0x2c>)
  4003a0:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003a2:	4b05      	ldr	r3, [pc, #20]	; (4003b8 <udi_cdc_data_sent+0x30>)
  4003a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  4003a6:	4b05      	ldr	r3, [pc, #20]	; (4003bc <udi_cdc_data_sent+0x34>)
  4003a8:	4798      	blx	r3
  4003aa:	bd08      	pop	{r3, pc}
  4003ac:	20000624 	.word	0x20000624
  4003b0:	20000620 	.word	0x20000620
  4003b4:	2000059c 	.word	0x2000059c
  4003b8:	2000062c 	.word	0x2000062c
  4003bc:	00400241 	.word	0x00400241

004003c0 <udi_cdc_data_sof_notify>:
{
  4003c0:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  4003c2:	2000      	movs	r0, #0
  4003c4:	4b01      	ldr	r3, [pc, #4]	; (4003cc <udi_cdc_data_sof_notify+0xc>)
  4003c6:	4798      	blx	r3
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	00400241 	.word	0x00400241

004003d0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003d0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003d2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003d6:	fab3 f383 	clz	r3, r3
  4003da:	095b      	lsrs	r3, r3, #5
  4003dc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4003e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003e4:	2200      	movs	r2, #0
  4003e6:	4b0b      	ldr	r3, [pc, #44]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  4003e8:	701a      	strb	r2, [r3, #0]
	return flags;
  4003ea:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4003ec:	4b0a      	ldr	r3, [pc, #40]	; (400418 <udi_cdc_multi_get_nb_received_data+0x48>)
  4003ee:	8818      	ldrh	r0, [r3, #0]
  4003f0:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4003f2:	4a0a      	ldr	r2, [pc, #40]	; (40041c <udi_cdc_multi_get_nb_received_data+0x4c>)
  4003f4:	7812      	ldrb	r2, [r2, #0]
  4003f6:	b2d2      	uxtb	r2, r2
  4003f8:	4809      	ldr	r0, [pc, #36]	; (400420 <udi_cdc_multi_get_nb_received_data+0x50>)
  4003fa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  4003fe:	b280      	uxth	r0, r0
  400400:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  400402:	b129      	cbz	r1, 400410 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400404:	2201      	movs	r2, #1
  400406:	4b03      	ldr	r3, [pc, #12]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  400408:	701a      	strb	r2, [r3, #0]
  40040a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40040e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400410:	b002      	add	sp, #8
  400412:	4770      	bx	lr
  400414:	200000a0 	.word	0x200000a0
  400418:	20000590 	.word	0x20000590
  40041c:	2000058c 	.word	0x2000058c
  400420:	20000588 	.word	0x20000588

00400424 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400424:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400426:	4b03      	ldr	r3, [pc, #12]	; (400434 <udi_cdc_multi_is_rx_ready+0x10>)
  400428:	4798      	blx	r3
}
  40042a:	3000      	adds	r0, #0
  40042c:	bf18      	it	ne
  40042e:	2001      	movne	r0, #1
  400430:	bd08      	pop	{r3, pc}
  400432:	bf00      	nop
  400434:	004003d1 	.word	0x004003d1

00400438 <udi_cdc_rx_start>:
{
  400438:	b510      	push	{r4, lr}
  40043a:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40043c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400440:	fab3 f383 	clz	r3, r3
  400444:	095b      	lsrs	r3, r3, #5
  400446:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400448:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40044a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40044e:	2200      	movs	r2, #0
  400450:	4b1e      	ldr	r3, [pc, #120]	; (4004cc <udi_cdc_rx_start+0x94>)
  400452:	701a      	strb	r2, [r3, #0]
	return flags;
  400454:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400456:	4a1e      	ldr	r2, [pc, #120]	; (4004d0 <udi_cdc_rx_start+0x98>)
  400458:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  40045a:	4a1e      	ldr	r2, [pc, #120]	; (4004d4 <udi_cdc_rx_start+0x9c>)
  40045c:	7812      	ldrb	r2, [r2, #0]
  40045e:	b94a      	cbnz	r2, 400474 <udi_cdc_rx_start+0x3c>
  400460:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400462:	4a1d      	ldr	r2, [pc, #116]	; (4004d8 <udi_cdc_rx_start+0xa0>)
  400464:	8811      	ldrh	r1, [r2, #0]
  400466:	b289      	uxth	r1, r1
  400468:	4a1c      	ldr	r2, [pc, #112]	; (4004dc <udi_cdc_rx_start+0xa4>)
  40046a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40046e:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400470:	4291      	cmp	r1, r2
  400472:	d209      	bcs.n	400488 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  400474:	b33b      	cbz	r3, 4004c6 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400476:	2201      	movs	r2, #1
  400478:	4b14      	ldr	r3, [pc, #80]	; (4004cc <udi_cdc_rx_start+0x94>)
  40047a:	701a      	strb	r2, [r3, #0]
  40047c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400480:	b662      	cpsie	i
		return false;
  400482:	2000      	movs	r0, #0
}
  400484:	b004      	add	sp, #16
  400486:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  400488:	2100      	movs	r1, #0
  40048a:	4a13      	ldr	r2, [pc, #76]	; (4004d8 <udi_cdc_rx_start+0xa0>)
  40048c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40048e:	fab4 f284 	clz	r2, r4
  400492:	0952      	lsrs	r2, r2, #5
  400494:	490e      	ldr	r1, [pc, #56]	; (4004d0 <udi_cdc_rx_start+0x98>)
  400496:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400498:	2101      	movs	r1, #1
  40049a:	4a0e      	ldr	r2, [pc, #56]	; (4004d4 <udi_cdc_rx_start+0x9c>)
  40049c:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40049e:	b123      	cbz	r3, 4004aa <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004a0:	4b0a      	ldr	r3, [pc, #40]	; (4004cc <udi_cdc_rx_start+0x94>)
  4004a2:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4004a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004a8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004aa:	2000      	movs	r0, #0
  4004ac:	4b0c      	ldr	r3, [pc, #48]	; (4004e0 <udi_cdc_rx_start+0xa8>)
  4004ae:	4798      	blx	r3
	return udd_ep_run(ep,
  4004b0:	4b0c      	ldr	r3, [pc, #48]	; (4004e4 <udi_cdc_rx_start+0xac>)
  4004b2:	9300      	str	r3, [sp, #0]
  4004b4:	2340      	movs	r3, #64	; 0x40
  4004b6:	4a0c      	ldr	r2, [pc, #48]	; (4004e8 <udi_cdc_rx_start+0xb0>)
  4004b8:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004bc:	2101      	movs	r1, #1
  4004be:	2002      	movs	r0, #2
  4004c0:	4c0a      	ldr	r4, [pc, #40]	; (4004ec <udi_cdc_rx_start+0xb4>)
  4004c2:	47a0      	blx	r4
  4004c4:	e7de      	b.n	400484 <udi_cdc_rx_start+0x4c>
		return false;
  4004c6:	2000      	movs	r0, #0
  4004c8:	e7dc      	b.n	400484 <udi_cdc_rx_start+0x4c>
  4004ca:	bf00      	nop
  4004cc:	200000a0 	.word	0x200000a0
  4004d0:	2000058c 	.word	0x2000058c
  4004d4:	20000594 	.word	0x20000594
  4004d8:	20000590 	.word	0x20000590
  4004dc:	20000588 	.word	0x20000588
  4004e0:	00400425 	.word	0x00400425
  4004e4:	00400585 	.word	0x00400585
  4004e8:	20000508 	.word	0x20000508
  4004ec:	004021b5 	.word	0x004021b5

004004f0 <udi_cdc_data_enable>:
{
  4004f0:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  4004f2:	2400      	movs	r4, #0
  4004f4:	4b16      	ldr	r3, [pc, #88]	; (400550 <udi_cdc_data_enable+0x60>)
  4004f6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4004f8:	4b16      	ldr	r3, [pc, #88]	; (400554 <udi_cdc_data_enable+0x64>)
  4004fa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4004fc:	4b16      	ldr	r3, [pc, #88]	; (400558 <udi_cdc_data_enable+0x68>)
  4004fe:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400500:	4b16      	ldr	r3, [pc, #88]	; (40055c <udi_cdc_data_enable+0x6c>)
  400502:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400504:	4b16      	ldr	r3, [pc, #88]	; (400560 <udi_cdc_data_enable+0x70>)
  400506:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400508:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40050a:	4b16      	ldr	r3, [pc, #88]	; (400564 <udi_cdc_data_enable+0x74>)
  40050c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40050e:	4620      	mov	r0, r4
  400510:	4b15      	ldr	r3, [pc, #84]	; (400568 <udi_cdc_data_enable+0x78>)
  400512:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400514:	4b15      	ldr	r3, [pc, #84]	; (40056c <udi_cdc_data_enable+0x7c>)
  400516:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400518:	4b15      	ldr	r3, [pc, #84]	; (400570 <udi_cdc_data_enable+0x80>)
  40051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40051c:	4b15      	ldr	r3, [pc, #84]	; (400574 <udi_cdc_data_enable+0x84>)
  40051e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400520:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  400522:	4b15      	ldr	r3, [pc, #84]	; (400578 <udi_cdc_data_enable+0x88>)
  400524:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400526:	4620      	mov	r0, r4
  400528:	4b14      	ldr	r3, [pc, #80]	; (40057c <udi_cdc_data_enable+0x8c>)
  40052a:	4798      	blx	r3
  40052c:	4601      	mov	r1, r0
  40052e:	b140      	cbz	r0, 400542 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400530:	4a07      	ldr	r2, [pc, #28]	; (400550 <udi_cdc_data_enable+0x60>)
  400532:	7813      	ldrb	r3, [r2, #0]
  400534:	3301      	adds	r3, #1
  400536:	b2db      	uxtb	r3, r3
  400538:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40053a:	7813      	ldrb	r3, [r2, #0]
  40053c:	b2db      	uxtb	r3, r3
  40053e:	2b01      	cmp	r3, #1
  400540:	d001      	beq.n	400546 <udi_cdc_data_enable+0x56>
}
  400542:	4608      	mov	r0, r1
  400544:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  400546:	2201      	movs	r2, #1
  400548:	4b0d      	ldr	r3, [pc, #52]	; (400580 <udi_cdc_data_enable+0x90>)
  40054a:	701a      	strb	r2, [r3, #0]
  40054c:	e7f9      	b.n	400542 <udi_cdc_data_enable+0x52>
  40054e:	bf00      	nop
  400550:	20000504 	.word	0x20000504
  400554:	2000062c 	.word	0x2000062c
  400558:	2000059c 	.word	0x2000059c
  40055c:	20000624 	.word	0x20000624
  400560:	20000620 	.word	0x20000620
  400564:	20000628 	.word	0x20000628
  400568:	00400241 	.word	0x00400241
  40056c:	20000594 	.word	0x20000594
  400570:	2000058c 	.word	0x2000058c
  400574:	20000588 	.word	0x20000588
  400578:	20000590 	.word	0x20000590
  40057c:	00400439 	.word	0x00400439
  400580:	200004fa 	.word	0x200004fa

00400584 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400584:	b9e8      	cbnz	r0, 4005c2 <udi_cdc_data_received+0x3e>
{
  400586:	b510      	push	{r4, lr}
  400588:	b082      	sub	sp, #8
  40058a:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  40058c:	4b0d      	ldr	r3, [pc, #52]	; (4005c4 <udi_cdc_data_received+0x40>)
  40058e:	781c      	ldrb	r4, [r3, #0]
  400590:	fab4 f484 	clz	r4, r4
  400594:	0964      	lsrs	r4, r4, #5
	if (!n) {
  400596:	b151      	cbz	r1, 4005ae <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400598:	b289      	uxth	r1, r1
  40059a:	4b0b      	ldr	r3, [pc, #44]	; (4005c8 <udi_cdc_data_received+0x44>)
  40059c:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005a0:	2000      	movs	r0, #0
  4005a2:	4b0a      	ldr	r3, [pc, #40]	; (4005cc <udi_cdc_data_received+0x48>)
  4005a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005a6:	4b0a      	ldr	r3, [pc, #40]	; (4005d0 <udi_cdc_data_received+0x4c>)
  4005a8:	4798      	blx	r3
}
  4005aa:	b002      	add	sp, #8
  4005ac:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  4005ae:	4b09      	ldr	r3, [pc, #36]	; (4005d4 <udi_cdc_data_received+0x50>)
  4005b0:	9300      	str	r3, [sp, #0]
  4005b2:	2340      	movs	r3, #64	; 0x40
  4005b4:	4a08      	ldr	r2, [pc, #32]	; (4005d8 <udi_cdc_data_received+0x54>)
  4005b6:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4005ba:	2101      	movs	r1, #1
  4005bc:	4c07      	ldr	r4, [pc, #28]	; (4005dc <udi_cdc_data_received+0x58>)
  4005be:	47a0      	blx	r4
		return;
  4005c0:	e7f3      	b.n	4005aa <udi_cdc_data_received+0x26>
  4005c2:	4770      	bx	lr
  4005c4:	2000058c 	.word	0x2000058c
  4005c8:	20000588 	.word	0x20000588
  4005cc:	20000594 	.word	0x20000594
  4005d0:	00400439 	.word	0x00400439
  4005d4:	00400585 	.word	0x00400585
  4005d8:	20000508 	.word	0x20000508
  4005dc:	004021b5 	.word	0x004021b5

004005e0 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  4005e0:	4b10      	ldr	r3, [pc, #64]	; (400624 <udc_next_desc_in_iface+0x44>)
  4005e2:	681b      	ldr	r3, [r3, #0]
  4005e4:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4005e6:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4005e8:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  4005ea:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4005ec:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4005ee:	4290      	cmp	r0, r2
  4005f0:	d211      	bcs.n	400616 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4005f2:	7843      	ldrb	r3, [r0, #1]
  4005f4:	2b04      	cmp	r3, #4
  4005f6:	d010      	beq.n	40061a <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4005f8:	428b      	cmp	r3, r1
  4005fa:	d009      	beq.n	400610 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  4005fc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4005fe:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400600:	4290      	cmp	r0, r2
  400602:	d206      	bcs.n	400612 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400604:	7843      	ldrb	r3, [r0, #1]
  400606:	2b04      	cmp	r3, #4
  400608:	d009      	beq.n	40061e <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  40060a:	428b      	cmp	r3, r1
  40060c:	d1f6      	bne.n	4005fc <udc_next_desc_in_iface+0x1c>
  40060e:	e007      	b.n	400620 <udc_next_desc_in_iface+0x40>
  400610:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  400612:	2000      	movs	r0, #0
  400614:	4770      	bx	lr
  400616:	2000      	movs	r0, #0
  400618:	4770      	bx	lr
  40061a:	2000      	movs	r0, #0
  40061c:	4770      	bx	lr
  40061e:	2000      	movs	r0, #0
}
  400620:	4770      	bx	lr
  400622:	bf00      	nop
  400624:	20000648 	.word	0x20000648

00400628 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400628:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  40062a:	4b03      	ldr	r3, [pc, #12]	; (400638 <udc_valid_address+0x10>)
  40062c:	7898      	ldrb	r0, [r3, #2]
  40062e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400632:	4b02      	ldr	r3, [pc, #8]	; (40063c <udc_valid_address+0x14>)
  400634:	4798      	blx	r3
  400636:	bd08      	pop	{r3, pc}
  400638:	20000f2c 	.word	0x20000f2c
  40063c:	00401df5 	.word	0x00401df5

00400640 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400640:	4b19      	ldr	r3, [pc, #100]	; (4006a8 <udc_update_iface_desc+0x68>)
  400642:	781b      	ldrb	r3, [r3, #0]
  400644:	b34b      	cbz	r3, 40069a <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400646:	4b19      	ldr	r3, [pc, #100]	; (4006ac <udc_update_iface_desc+0x6c>)
  400648:	681b      	ldr	r3, [r3, #0]
  40064a:	681b      	ldr	r3, [r3, #0]
  40064c:	791a      	ldrb	r2, [r3, #4]
  40064e:	4282      	cmp	r2, r0
  400650:	d925      	bls.n	40069e <udc_update_iface_desc+0x5e>
{
  400652:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400654:	4a16      	ldr	r2, [pc, #88]	; (4006b0 <udc_update_iface_desc+0x70>)
  400656:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400658:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40065a:	441c      	add	r4, r3
	while (ptr_end_desc >
  40065c:	42a3      	cmp	r3, r4
  40065e:	d220      	bcs.n	4006a2 <udc_update_iface_desc+0x62>
  400660:	2500      	movs	r5, #0
  400662:	2601      	movs	r6, #1
  400664:	e007      	b.n	400676 <udc_update_iface_desc+0x36>
  400666:	4a12      	ldr	r2, [pc, #72]	; (4006b0 <udc_update_iface_desc+0x70>)
  400668:	6013      	str	r3, [r2, #0]
  40066a:	e00f      	b.n	40068c <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  40066c:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  40066e:	4413      	add	r3, r2
  400670:	4635      	mov	r5, r6
	while (ptr_end_desc >
  400672:	42a3      	cmp	r3, r4
  400674:	d20c      	bcs.n	400690 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400676:	785a      	ldrb	r2, [r3, #1]
  400678:	2a04      	cmp	r2, #4
  40067a:	d1f7      	bne.n	40066c <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40067c:	789a      	ldrb	r2, [r3, #2]
  40067e:	4282      	cmp	r2, r0
  400680:	d1f4      	bne.n	40066c <udc_update_iface_desc+0x2c>
  400682:	78da      	ldrb	r2, [r3, #3]
  400684:	428a      	cmp	r2, r1
  400686:	d1f1      	bne.n	40066c <udc_update_iface_desc+0x2c>
  400688:	2d00      	cmp	r5, #0
  40068a:	d1ec      	bne.n	400666 <udc_update_iface_desc+0x26>
				return true; // Interface found
  40068c:	2001      	movs	r0, #1
  40068e:	e002      	b.n	400696 <udc_update_iface_desc+0x56>
  400690:	4a07      	ldr	r2, [pc, #28]	; (4006b0 <udc_update_iface_desc+0x70>)
  400692:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400694:	2000      	movs	r0, #0
}
  400696:	bc70      	pop	{r4, r5, r6}
  400698:	4770      	bx	lr
		return false;
  40069a:	2000      	movs	r0, #0
  40069c:	4770      	bx	lr
		return false;
  40069e:	2000      	movs	r0, #0
  4006a0:	4770      	bx	lr
	return false; // Interface not found
  4006a2:	2000      	movs	r0, #0
  4006a4:	e7f7      	b.n	400696 <udc_update_iface_desc+0x56>
  4006a6:	bf00      	nop
  4006a8:	20000644 	.word	0x20000644
  4006ac:	20000648 	.word	0x20000648
  4006b0:	2000064c 	.word	0x2000064c

004006b4 <udc_iface_disable>:
{
  4006b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006b8:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4006ba:	2100      	movs	r1, #0
  4006bc:	4b13      	ldr	r3, [pc, #76]	; (40070c <udc_iface_disable+0x58>)
  4006be:	4798      	blx	r3
  4006c0:	4680      	mov	r8, r0
  4006c2:	b910      	cbnz	r0, 4006ca <udc_iface_disable+0x16>
}
  4006c4:	4640      	mov	r0, r8
  4006c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4006ca:	4b11      	ldr	r3, [pc, #68]	; (400710 <udc_iface_disable+0x5c>)
  4006cc:	681b      	ldr	r3, [r3, #0]
  4006ce:	685b      	ldr	r3, [r3, #4]
  4006d0:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4006d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4006d8:	4798      	blx	r3
  4006da:	4601      	mov	r1, r0
  4006dc:	4620      	mov	r0, r4
  4006de:	4b0b      	ldr	r3, [pc, #44]	; (40070c <udc_iface_disable+0x58>)
  4006e0:	4798      	blx	r3
  4006e2:	4680      	mov	r8, r0
  4006e4:	2800      	cmp	r0, #0
  4006e6:	d0ed      	beq.n	4006c4 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4006e8:	4b0a      	ldr	r3, [pc, #40]	; (400714 <udc_iface_disable+0x60>)
  4006ea:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4006ec:	2605      	movs	r6, #5
  4006ee:	4d0a      	ldr	r5, [pc, #40]	; (400718 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  4006f0:	4f0a      	ldr	r7, [pc, #40]	; (40071c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4006f2:	4631      	mov	r1, r6
  4006f4:	4620      	mov	r0, r4
  4006f6:	47a8      	blx	r5
			if (NULL == ep_desc) {
  4006f8:	4604      	mov	r4, r0
  4006fa:	b110      	cbz	r0, 400702 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  4006fc:	7880      	ldrb	r0, [r0, #2]
  4006fe:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400700:	e7f7      	b.n	4006f2 <udc_iface_disable+0x3e>
	udi_api->disable();
  400702:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400706:	4798      	blx	r3
	return true;
  400708:	e7dc      	b.n	4006c4 <udc_iface_disable+0x10>
  40070a:	bf00      	nop
  40070c:	00400641 	.word	0x00400641
  400710:	20000648 	.word	0x20000648
  400714:	2000064c 	.word	0x2000064c
  400718:	004005e1 	.word	0x004005e1
  40071c:	00401f65 	.word	0x00401f65

00400720 <udc_iface_enable>:
{
  400720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400724:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400726:	4b10      	ldr	r3, [pc, #64]	; (400768 <udc_iface_enable+0x48>)
  400728:	4798      	blx	r3
  40072a:	4603      	mov	r3, r0
  40072c:	b1c8      	cbz	r0, 400762 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40072e:	4b0f      	ldr	r3, [pc, #60]	; (40076c <udc_iface_enable+0x4c>)
  400730:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400732:	2605      	movs	r6, #5
  400734:	4d0e      	ldr	r5, [pc, #56]	; (400770 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400736:	4f0f      	ldr	r7, [pc, #60]	; (400774 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400738:	4631      	mov	r1, r6
  40073a:	4620      	mov	r0, r4
  40073c:	47a8      	blx	r5
		if (NULL == ep_desc)
  40073e:	4604      	mov	r4, r0
  400740:	b138      	cbz	r0, 400752 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400742:	8882      	ldrh	r2, [r0, #4]
  400744:	78c1      	ldrb	r1, [r0, #3]
  400746:	7880      	ldrb	r0, [r0, #2]
  400748:	47b8      	blx	r7
  40074a:	4603      	mov	r3, r0
  40074c:	2800      	cmp	r0, #0
  40074e:	d1f3      	bne.n	400738 <udc_iface_enable+0x18>
  400750:	e007      	b.n	400762 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400752:	4b09      	ldr	r3, [pc, #36]	; (400778 <udc_iface_enable+0x58>)
  400754:	681b      	ldr	r3, [r3, #0]
  400756:	685b      	ldr	r3, [r3, #4]
  400758:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	4798      	blx	r3
  400760:	4603      	mov	r3, r0
}
  400762:	4618      	mov	r0, r3
  400764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400768:	00400641 	.word	0x00400641
  40076c:	2000064c 	.word	0x2000064c
  400770:	004005e1 	.word	0x004005e1
  400774:	00401e6d 	.word	0x00401e6d
  400778:	20000648 	.word	0x20000648

0040077c <udc_start>:
{
  40077c:	b508      	push	{r3, lr}
	udd_enable();
  40077e:	4b01      	ldr	r3, [pc, #4]	; (400784 <udc_start+0x8>)
  400780:	4798      	blx	r3
  400782:	bd08      	pop	{r3, pc}
  400784:	00401d15 	.word	0x00401d15

00400788 <udc_reset>:
{
  400788:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  40078a:	4b0d      	ldr	r3, [pc, #52]	; (4007c0 <udc_reset+0x38>)
  40078c:	781b      	ldrb	r3, [r3, #0]
  40078e:	b183      	cbz	r3, 4007b2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400790:	4b0c      	ldr	r3, [pc, #48]	; (4007c4 <udc_reset+0x3c>)
  400792:	681b      	ldr	r3, [r3, #0]
  400794:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400796:	791b      	ldrb	r3, [r3, #4]
  400798:	b15b      	cbz	r3, 4007b2 <udc_reset+0x2a>
  40079a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  40079c:	4e0a      	ldr	r6, [pc, #40]	; (4007c8 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40079e:	4d09      	ldr	r5, [pc, #36]	; (4007c4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4007a0:	4620      	mov	r0, r4
  4007a2:	47b0      	blx	r6
				iface_num++) {
  4007a4:	3401      	adds	r4, #1
  4007a6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007a8:	682b      	ldr	r3, [r5, #0]
  4007aa:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4007ac:	791b      	ldrb	r3, [r3, #4]
  4007ae:	42a3      	cmp	r3, r4
  4007b0:	d8f6      	bhi.n	4007a0 <udc_reset+0x18>
	udc_num_configuration = 0;
  4007b2:	2200      	movs	r2, #0
  4007b4:	4b02      	ldr	r3, [pc, #8]	; (4007c0 <udc_reset+0x38>)
  4007b6:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4007b8:	2201      	movs	r2, #1
  4007ba:	4b04      	ldr	r3, [pc, #16]	; (4007cc <udc_reset+0x44>)
  4007bc:	801a      	strh	r2, [r3, #0]
  4007be:	bd70      	pop	{r4, r5, r6, pc}
  4007c0:	20000644 	.word	0x20000644
  4007c4:	20000648 	.word	0x20000648
  4007c8:	004006b5 	.word	0x004006b5
  4007cc:	2000063a 	.word	0x2000063a

004007d0 <udc_sof_notify>:
{
  4007d0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4007d2:	4b0d      	ldr	r3, [pc, #52]	; (400808 <udc_sof_notify+0x38>)
  4007d4:	781b      	ldrb	r3, [r3, #0]
  4007d6:	b1b3      	cbz	r3, 400806 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007d8:	4b0c      	ldr	r3, [pc, #48]	; (40080c <udc_sof_notify+0x3c>)
  4007da:	681b      	ldr	r3, [r3, #0]
  4007dc:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4007de:	7912      	ldrb	r2, [r2, #4]
  4007e0:	b18a      	cbz	r2, 400806 <udc_sof_notify+0x36>
  4007e2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007e4:	4d09      	ldr	r5, [pc, #36]	; (40080c <udc_sof_notify+0x3c>)
  4007e6:	e006      	b.n	4007f6 <udc_sof_notify+0x26>
				iface_num++) {
  4007e8:	3401      	adds	r4, #1
  4007ea:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007ec:	682b      	ldr	r3, [r5, #0]
  4007ee:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4007f0:	7912      	ldrb	r2, [r2, #4]
  4007f2:	42a2      	cmp	r2, r4
  4007f4:	d907      	bls.n	400806 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4007f6:	685b      	ldr	r3, [r3, #4]
  4007f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4007fc:	691b      	ldr	r3, [r3, #16]
  4007fe:	2b00      	cmp	r3, #0
  400800:	d0f2      	beq.n	4007e8 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400802:	4798      	blx	r3
  400804:	e7f0      	b.n	4007e8 <udc_sof_notify+0x18>
  400806:	bd38      	pop	{r3, r4, r5, pc}
  400808:	20000644 	.word	0x20000644
  40080c:	20000648 	.word	0x20000648

00400810 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400812:	4b96      	ldr	r3, [pc, #600]	; (400a6c <udc_process_setup+0x25c>)
  400814:	2200      	movs	r2, #0
  400816:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400818:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40081a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  40081c:	781b      	ldrb	r3, [r3, #0]
  40081e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400822:	d114      	bne.n	40084e <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400824:	f013 0f60 	tst.w	r3, #96	; 0x60
  400828:	f000 80b8 	beq.w	40099c <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  40082c:	4b8f      	ldr	r3, [pc, #572]	; (400a6c <udc_process_setup+0x25c>)
  40082e:	781b      	ldrb	r3, [r3, #0]
  400830:	f003 031f 	and.w	r3, r3, #31
  400834:	2b01      	cmp	r3, #1
  400836:	f000 818b 	beq.w	400b50 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  40083a:	4b8c      	ldr	r3, [pc, #560]	; (400a6c <udc_process_setup+0x25c>)
  40083c:	781b      	ldrb	r3, [r3, #0]
  40083e:	f003 031f 	and.w	r3, r3, #31
  400842:	2b02      	cmp	r3, #2
  400844:	f000 81ac 	beq.w	400ba0 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400848:	2300      	movs	r3, #0
#endif
}
  40084a:	4618      	mov	r0, r3
  40084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  40084e:	4a87      	ldr	r2, [pc, #540]	; (400a6c <udc_process_setup+0x25c>)
  400850:	88d2      	ldrh	r2, [r2, #6]
  400852:	2a00      	cmp	r2, #0
  400854:	f000 81cd 	beq.w	400bf2 <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400858:	f013 0f60 	tst.w	r3, #96	; 0x60
  40085c:	d1e6      	bne.n	40082c <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40085e:	f013 031f 	ands.w	r3, r3, #31
  400862:	d106      	bne.n	400872 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400864:	4981      	ldr	r1, [pc, #516]	; (400a6c <udc_process_setup+0x25c>)
  400866:	7849      	ldrb	r1, [r1, #1]
  400868:	2906      	cmp	r1, #6
  40086a:	d013      	beq.n	400894 <udc_process_setup+0x84>
  40086c:	2908      	cmp	r1, #8
  40086e:	d058      	beq.n	400922 <udc_process_setup+0x112>
  400870:	b149      	cbz	r1, 400886 <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400872:	2b01      	cmp	r3, #1
  400874:	d05c      	beq.n	400930 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400876:	2b02      	cmp	r3, #2
  400878:	d1d8      	bne.n	40082c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  40087a:	4b7c      	ldr	r3, [pc, #496]	; (400a6c <udc_process_setup+0x25c>)
  40087c:	785b      	ldrb	r3, [r3, #1]
  40087e:	2b00      	cmp	r3, #0
  400880:	d07e      	beq.n	400980 <udc_process_setup+0x170>
	return false;
  400882:	2300      	movs	r3, #0
  400884:	e160      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400886:	2a02      	cmp	r2, #2
  400888:	d1d0      	bne.n	40082c <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  40088a:	2102      	movs	r1, #2
  40088c:	4878      	ldr	r0, [pc, #480]	; (400a70 <udc_process_setup+0x260>)
  40088e:	4b79      	ldr	r3, [pc, #484]	; (400a74 <udc_process_setup+0x264>)
  400890:	4798      	blx	r3
  400892:	e09f      	b.n	4009d4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400894:	4b75      	ldr	r3, [pc, #468]	; (400a6c <udc_process_setup+0x25c>)
  400896:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400898:	0a13      	lsrs	r3, r2, #8
  40089a:	3b01      	subs	r3, #1
  40089c:	2b0e      	cmp	r3, #14
  40089e:	f200 8150 	bhi.w	400b42 <udc_process_setup+0x332>
  4008a2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4008a6:	000f      	.short	0x000f
  4008a8:	0036001c 	.word	0x0036001c
  4008ac:	014e014e 	.word	0x014e014e
  4008b0:	014e014e 	.word	0x014e014e
  4008b4:	014e014e 	.word	0x014e014e
  4008b8:	014e014e 	.word	0x014e014e
  4008bc:	014e014e 	.word	0x014e014e
  4008c0:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  4008c4:	4b6c      	ldr	r3, [pc, #432]	; (400a78 <udc_process_setup+0x268>)
  4008c6:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4008c8:	7801      	ldrb	r1, [r0, #0]
  4008ca:	4b6a      	ldr	r3, [pc, #424]	; (400a74 <udc_process_setup+0x264>)
  4008cc:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4008ce:	4b67      	ldr	r3, [pc, #412]	; (400a6c <udc_process_setup+0x25c>)
  4008d0:	88da      	ldrh	r2, [r3, #6]
  4008d2:	899b      	ldrh	r3, [r3, #12]
  4008d4:	4293      	cmp	r3, r2
  4008d6:	d97d      	bls.n	4009d4 <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4008d8:	4b64      	ldr	r3, [pc, #400]	; (400a6c <udc_process_setup+0x25c>)
  4008da:	819a      	strh	r2, [r3, #12]
  4008dc:	e07a      	b.n	4009d4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4008de:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  4008e0:	4b65      	ldr	r3, [pc, #404]	; (400a78 <udc_process_setup+0x268>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	7c5b      	ldrb	r3, [r3, #17]
  4008e6:	4293      	cmp	r3, r2
  4008e8:	d9a0      	bls.n	40082c <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4008ea:	4b63      	ldr	r3, [pc, #396]	; (400a78 <udc_process_setup+0x268>)
  4008ec:	685b      	ldr	r3, [r3, #4]
  4008ee:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  4008f2:	8841      	ldrh	r1, [r0, #2]
  4008f4:	4b5f      	ldr	r3, [pc, #380]	; (400a74 <udc_process_setup+0x264>)
  4008f6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  4008f8:	4b5c      	ldr	r3, [pc, #368]	; (400a6c <udc_process_setup+0x25c>)
  4008fa:	689b      	ldr	r3, [r3, #8]
  4008fc:	2202      	movs	r2, #2
  4008fe:	705a      	strb	r2, [r3, #1]
  400900:	e7e5      	b.n	4008ce <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400902:	4b5d      	ldr	r3, [pc, #372]	; (400a78 <udc_process_setup+0x268>)
  400904:	6898      	ldr	r0, [r3, #8]
  400906:	2800      	cmp	r0, #0
  400908:	d090      	beq.n	40082c <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40090a:	8841      	ldrh	r1, [r0, #2]
  40090c:	4b59      	ldr	r3, [pc, #356]	; (400a74 <udc_process_setup+0x264>)
  40090e:	4798      	blx	r3
  400910:	e7dd      	b.n	4008ce <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400912:	f012 0fff 	tst.w	r2, #255	; 0xff
  400916:	d189      	bne.n	40082c <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400918:	2104      	movs	r1, #4
  40091a:	4858      	ldr	r0, [pc, #352]	; (400a7c <udc_process_setup+0x26c>)
  40091c:	4b55      	ldr	r3, [pc, #340]	; (400a74 <udc_process_setup+0x264>)
  40091e:	4798      	blx	r3
  400920:	e7d5      	b.n	4008ce <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400922:	2a01      	cmp	r2, #1
  400924:	d182      	bne.n	40082c <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400926:	2101      	movs	r1, #1
  400928:	4855      	ldr	r0, [pc, #340]	; (400a80 <udc_process_setup+0x270>)
  40092a:	4b52      	ldr	r3, [pc, #328]	; (400a74 <udc_process_setup+0x264>)
  40092c:	4798      	blx	r3
  40092e:	e051      	b.n	4009d4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400930:	494e      	ldr	r1, [pc, #312]	; (400a6c <udc_process_setup+0x25c>)
  400932:	7849      	ldrb	r1, [r1, #1]
  400934:	290a      	cmp	r1, #10
  400936:	d19e      	bne.n	400876 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400938:	2a01      	cmp	r2, #1
  40093a:	f47f af77 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  40093e:	4b50      	ldr	r3, [pc, #320]	; (400a80 <udc_process_setup+0x270>)
  400940:	781b      	ldrb	r3, [r3, #0]
  400942:	2b00      	cmp	r3, #0
  400944:	f43f af72 	beq.w	40082c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400948:	4b48      	ldr	r3, [pc, #288]	; (400a6c <udc_process_setup+0x25c>)
  40094a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40094c:	4b4d      	ldr	r3, [pc, #308]	; (400a84 <udc_process_setup+0x274>)
  40094e:	681d      	ldr	r5, [r3, #0]
  400950:	682b      	ldr	r3, [r5, #0]
  400952:	791b      	ldrb	r3, [r3, #4]
  400954:	42a3      	cmp	r3, r4
  400956:	f67f af69 	bls.w	40082c <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  40095a:	2100      	movs	r1, #0
  40095c:	4620      	mov	r0, r4
  40095e:	4b4a      	ldr	r3, [pc, #296]	; (400a88 <udc_process_setup+0x278>)
  400960:	4798      	blx	r3
  400962:	2800      	cmp	r0, #0
  400964:	f43f af62 	beq.w	40082c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400968:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  40096a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  40096e:	68db      	ldr	r3, [r3, #12]
  400970:	4798      	blx	r3
  400972:	4b46      	ldr	r3, [pc, #280]	; (400a8c <udc_process_setup+0x27c>)
  400974:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400976:	2101      	movs	r1, #1
  400978:	4618      	mov	r0, r3
  40097a:	4b3e      	ldr	r3, [pc, #248]	; (400a74 <udc_process_setup+0x264>)
  40097c:	4798      	blx	r3
  40097e:	e029      	b.n	4009d4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400980:	2a02      	cmp	r2, #2
  400982:	f47f af53 	bne.w	40082c <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400986:	4b39      	ldr	r3, [pc, #228]	; (400a6c <udc_process_setup+0x25c>)
  400988:	7918      	ldrb	r0, [r3, #4]
  40098a:	4b41      	ldr	r3, [pc, #260]	; (400a90 <udc_process_setup+0x280>)
  40098c:	4798      	blx	r3
  40098e:	4b41      	ldr	r3, [pc, #260]	; (400a94 <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400990:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400992:	2102      	movs	r1, #2
  400994:	4618      	mov	r0, r3
  400996:	4b37      	ldr	r3, [pc, #220]	; (400a74 <udc_process_setup+0x264>)
  400998:	4798      	blx	r3
  40099a:	e01b      	b.n	4009d4 <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40099c:	f013 031f 	ands.w	r3, r3, #31
  4009a0:	f040 8082 	bne.w	400aa8 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  4009a4:	4a31      	ldr	r2, [pc, #196]	; (400a6c <udc_process_setup+0x25c>)
  4009a6:	7852      	ldrb	r2, [r2, #1]
  4009a8:	3a01      	subs	r2, #1
  4009aa:	2a08      	cmp	r2, #8
  4009ac:	d87c      	bhi.n	400aa8 <udc_process_setup+0x298>
  4009ae:	e8df f012 	tbh	[pc, r2, lsl #1]
  4009b2:	0013      	.short	0x0013
  4009b4:	00ca007b 	.word	0x00ca007b
  4009b8:	0009007b 	.word	0x0009007b
  4009bc:	007b007b 	.word	0x007b007b
  4009c0:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  4009c4:	4b29      	ldr	r3, [pc, #164]	; (400a6c <udc_process_setup+0x25c>)
  4009c6:	88db      	ldrh	r3, [r3, #6]
  4009c8:	2b00      	cmp	r3, #0
  4009ca:	f47f af2f 	bne.w	40082c <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  4009ce:	4a32      	ldr	r2, [pc, #200]	; (400a98 <udc_process_setup+0x288>)
  4009d0:	4b26      	ldr	r3, [pc, #152]	; (400a6c <udc_process_setup+0x25c>)
  4009d2:	611a      	str	r2, [r3, #16]
			return true;
  4009d4:	2301      	movs	r3, #1
  4009d6:	e738      	b.n	40084a <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  4009d8:	4b24      	ldr	r3, [pc, #144]	; (400a6c <udc_process_setup+0x25c>)
  4009da:	88db      	ldrh	r3, [r3, #6]
  4009dc:	2b00      	cmp	r3, #0
  4009de:	f47f af25 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4009e2:	4b22      	ldr	r3, [pc, #136]	; (400a6c <udc_process_setup+0x25c>)
  4009e4:	885b      	ldrh	r3, [r3, #2]
  4009e6:	2b01      	cmp	r3, #1
  4009e8:	f47f af20 	bne.w	40082c <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4009ec:	4a20      	ldr	r2, [pc, #128]	; (400a70 <udc_process_setup+0x260>)
  4009ee:	8813      	ldrh	r3, [r2, #0]
  4009f0:	f023 0302 	bic.w	r3, r3, #2
  4009f4:	8013      	strh	r3, [r2, #0]
  4009f6:	e7ed      	b.n	4009d4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  4009f8:	4b1c      	ldr	r3, [pc, #112]	; (400a6c <udc_process_setup+0x25c>)
  4009fa:	88db      	ldrh	r3, [r3, #6]
  4009fc:	2b00      	cmp	r3, #0
  4009fe:	f47f af15 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400a02:	4b26      	ldr	r3, [pc, #152]	; (400a9c <udc_process_setup+0x28c>)
  400a04:	4798      	blx	r3
  400a06:	2800      	cmp	r0, #0
  400a08:	f43f af10 	beq.w	40082c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a0c:	4b17      	ldr	r3, [pc, #92]	; (400a6c <udc_process_setup+0x25c>)
  400a0e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400a10:	4b19      	ldr	r3, [pc, #100]	; (400a78 <udc_process_setup+0x268>)
  400a12:	681b      	ldr	r3, [r3, #0]
  400a14:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a16:	429a      	cmp	r2, r3
  400a18:	f73f af08 	bgt.w	40082c <udc_process_setup+0x1c>
	udc_reset();
  400a1c:	4b20      	ldr	r3, [pc, #128]	; (400aa0 <udc_process_setup+0x290>)
  400a1e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400a20:	4b12      	ldr	r3, [pc, #72]	; (400a6c <udc_process_setup+0x25c>)
  400a22:	789b      	ldrb	r3, [r3, #2]
  400a24:	4a16      	ldr	r2, [pc, #88]	; (400a80 <udc_process_setup+0x270>)
  400a26:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400a28:	2b00      	cmp	r3, #0
  400a2a:	d0d3      	beq.n	4009d4 <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400a2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400a30:	3b01      	subs	r3, #1
  400a32:	4a11      	ldr	r2, [pc, #68]	; (400a78 <udc_process_setup+0x268>)
  400a34:	6852      	ldr	r2, [r2, #4]
  400a36:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400a3a:	4912      	ldr	r1, [pc, #72]	; (400a84 <udc_process_setup+0x274>)
  400a3c:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400a42:	791b      	ldrb	r3, [r3, #4]
  400a44:	2b00      	cmp	r3, #0
  400a46:	d0c5      	beq.n	4009d4 <udc_process_setup+0x1c4>
  400a48:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400a4a:	4626      	mov	r6, r4
  400a4c:	4d15      	ldr	r5, [pc, #84]	; (400aa4 <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a4e:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400a50:	4631      	mov	r1, r6
  400a52:	4620      	mov	r0, r4
  400a54:	47a8      	blx	r5
  400a56:	2800      	cmp	r0, #0
  400a58:	f43f aee8 	beq.w	40082c <udc_process_setup+0x1c>
			iface_num++) {
  400a5c:	3401      	adds	r4, #1
  400a5e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a60:	683b      	ldr	r3, [r7, #0]
  400a62:	681b      	ldr	r3, [r3, #0]
  400a64:	791b      	ldrb	r3, [r3, #4]
  400a66:	42a3      	cmp	r3, r4
  400a68:	d8f2      	bhi.n	400a50 <udc_process_setup+0x240>
  400a6a:	e7b3      	b.n	4009d4 <udc_process_setup+0x1c4>
  400a6c:	20000f2c 	.word	0x20000f2c
  400a70:	2000063a 	.word	0x2000063a
  400a74:	00401e61 	.word	0x00401e61
  400a78:	2000002c 	.word	0x2000002c
  400a7c:	20000028 	.word	0x20000028
  400a80:	20000644 	.word	0x20000644
  400a84:	20000648 	.word	0x20000648
  400a88:	00400641 	.word	0x00400641
  400a8c:	20000640 	.word	0x20000640
  400a90:	00401fbd 	.word	0x00401fbd
  400a94:	2000063c 	.word	0x2000063c
  400a98:	00400629 	.word	0x00400629
  400a9c:	00401e31 	.word	0x00401e31
  400aa0:	00400789 	.word	0x00400789
  400aa4:	00400721 	.word	0x00400721
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400aa8:	2b01      	cmp	r3, #1
  400aaa:	d00a      	beq.n	400ac2 <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400aac:	2b02      	cmp	r3, #2
  400aae:	f47f aebd 	bne.w	40082c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ab2:	4b52      	ldr	r3, [pc, #328]	; (400bfc <udc_process_setup+0x3ec>)
  400ab4:	785b      	ldrb	r3, [r3, #1]
  400ab6:	2b01      	cmp	r3, #1
  400ab8:	d020      	beq.n	400afc <udc_process_setup+0x2ec>
  400aba:	2b03      	cmp	r3, #3
  400abc:	d02e      	beq.n	400b1c <udc_process_setup+0x30c>
	return false;
  400abe:	2300      	movs	r3, #0
  400ac0:	e042      	b.n	400b48 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ac2:	4a4e      	ldr	r2, [pc, #312]	; (400bfc <udc_process_setup+0x3ec>)
  400ac4:	7852      	ldrb	r2, [r2, #1]
  400ac6:	2a0b      	cmp	r2, #11
  400ac8:	d1f0      	bne.n	400aac <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400aca:	4b4c      	ldr	r3, [pc, #304]	; (400bfc <udc_process_setup+0x3ec>)
  400acc:	88db      	ldrh	r3, [r3, #6]
  400ace:	2b00      	cmp	r3, #0
  400ad0:	f47f aeac 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400ad4:	4b4a      	ldr	r3, [pc, #296]	; (400c00 <udc_process_setup+0x3f0>)
  400ad6:	781b      	ldrb	r3, [r3, #0]
  400ad8:	2b00      	cmp	r3, #0
  400ada:	f43f aea7 	beq.w	40082c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400ade:	4b47      	ldr	r3, [pc, #284]	; (400bfc <udc_process_setup+0x3ec>)
  400ae0:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400ae2:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400ae4:	4620      	mov	r0, r4
  400ae6:	4b47      	ldr	r3, [pc, #284]	; (400c04 <udc_process_setup+0x3f4>)
  400ae8:	4798      	blx	r3
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ae9e 	beq.w	40082c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400af0:	b2e9      	uxtb	r1, r5
  400af2:	4620      	mov	r0, r4
  400af4:	4b44      	ldr	r3, [pc, #272]	; (400c08 <udc_process_setup+0x3f8>)
  400af6:	4798      	blx	r3
  400af8:	4603      	mov	r3, r0
  400afa:	e025      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400afc:	4b3f      	ldr	r3, [pc, #252]	; (400bfc <udc_process_setup+0x3ec>)
  400afe:	88db      	ldrh	r3, [r3, #6]
  400b00:	2b00      	cmp	r3, #0
  400b02:	f47f ae93 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b06:	4b3d      	ldr	r3, [pc, #244]	; (400bfc <udc_process_setup+0x3ec>)
  400b08:	885b      	ldrh	r3, [r3, #2]
  400b0a:	2b00      	cmp	r3, #0
  400b0c:	f47f ae8e 	bne.w	40082c <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b10:	4b3a      	ldr	r3, [pc, #232]	; (400bfc <udc_process_setup+0x3ec>)
  400b12:	7918      	ldrb	r0, [r3, #4]
  400b14:	4b3d      	ldr	r3, [pc, #244]	; (400c0c <udc_process_setup+0x3fc>)
  400b16:	4798      	blx	r3
  400b18:	4603      	mov	r3, r0
  400b1a:	e015      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400b1c:	4b37      	ldr	r3, [pc, #220]	; (400bfc <udc_process_setup+0x3ec>)
  400b1e:	88db      	ldrh	r3, [r3, #6]
  400b20:	2b00      	cmp	r3, #0
  400b22:	f47f ae83 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b26:	4b35      	ldr	r3, [pc, #212]	; (400bfc <udc_process_setup+0x3ec>)
  400b28:	885b      	ldrh	r3, [r3, #2]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	f47f ae7e 	bne.w	40082c <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b30:	4c32      	ldr	r4, [pc, #200]	; (400bfc <udc_process_setup+0x3ec>)
  400b32:	7920      	ldrb	r0, [r4, #4]
  400b34:	4b36      	ldr	r3, [pc, #216]	; (400c10 <udc_process_setup+0x400>)
  400b36:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b38:	7920      	ldrb	r0, [r4, #4]
  400b3a:	4b36      	ldr	r3, [pc, #216]	; (400c14 <udc_process_setup+0x404>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	e002      	b.n	400b48 <udc_process_setup+0x338>
		return false;
  400b42:	2300      	movs	r3, #0
  400b44:	e000      	b.n	400b48 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400b46:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400b48:	2b00      	cmp	r3, #0
  400b4a:	f47f ae7e 	bne.w	40084a <udc_process_setup+0x3a>
  400b4e:	e66d      	b.n	40082c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400b50:	4b2b      	ldr	r3, [pc, #172]	; (400c00 <udc_process_setup+0x3f0>)
  400b52:	781b      	ldrb	r3, [r3, #0]
  400b54:	2b00      	cmp	r3, #0
  400b56:	d04e      	beq.n	400bf6 <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b58:	4b28      	ldr	r3, [pc, #160]	; (400bfc <udc_process_setup+0x3ec>)
  400b5a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b5c:	4b2e      	ldr	r3, [pc, #184]	; (400c18 <udc_process_setup+0x408>)
  400b5e:	681d      	ldr	r5, [r3, #0]
  400b60:	682b      	ldr	r3, [r5, #0]
  400b62:	791b      	ldrb	r3, [r3, #4]
  400b64:	42a3      	cmp	r3, r4
  400b66:	d801      	bhi.n	400b6c <udc_process_setup+0x35c>
	return false;
  400b68:	2300      	movs	r3, #0
  400b6a:	e66e      	b.n	40084a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b6c:	2100      	movs	r1, #0
  400b6e:	4620      	mov	r0, r4
  400b70:	4b2a      	ldr	r3, [pc, #168]	; (400c1c <udc_process_setup+0x40c>)
  400b72:	4798      	blx	r3
  400b74:	2800      	cmp	r0, #0
  400b76:	f43f ae60 	beq.w	40083a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b7a:	686b      	ldr	r3, [r5, #4]
  400b7c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400b80:	68eb      	ldr	r3, [r5, #12]
  400b82:	4798      	blx	r3
  400b84:	4601      	mov	r1, r0
  400b86:	4620      	mov	r0, r4
  400b88:	4b24      	ldr	r3, [pc, #144]	; (400c1c <udc_process_setup+0x40c>)
  400b8a:	4798      	blx	r3
  400b8c:	2800      	cmp	r0, #0
  400b8e:	f43f ae54 	beq.w	40083a <udc_process_setup+0x2a>
	return udi_api->setup();
  400b92:	68ab      	ldr	r3, [r5, #8]
  400b94:	4798      	blx	r3
		if (udc_req_iface()) {
  400b96:	4603      	mov	r3, r0
  400b98:	2800      	cmp	r0, #0
  400b9a:	f47f ae56 	bne.w	40084a <udc_process_setup+0x3a>
  400b9e:	e64c      	b.n	40083a <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400ba0:	4b17      	ldr	r3, [pc, #92]	; (400c00 <udc_process_setup+0x3f0>)
  400ba2:	781b      	ldrb	r3, [r3, #0]
  400ba4:	b30b      	cbz	r3, 400bea <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ba6:	4b1c      	ldr	r3, [pc, #112]	; (400c18 <udc_process_setup+0x408>)
  400ba8:	681a      	ldr	r2, [r3, #0]
  400baa:	6813      	ldr	r3, [r2, #0]
  400bac:	791b      	ldrb	r3, [r3, #4]
  400bae:	b1f3      	cbz	r3, 400bee <udc_process_setup+0x3de>
  400bb0:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bb2:	4e1a      	ldr	r6, [pc, #104]	; (400c1c <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bb4:	4f18      	ldr	r7, [pc, #96]	; (400c18 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400bb6:	6853      	ldr	r3, [r2, #4]
  400bb8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bbc:	68eb      	ldr	r3, [r5, #12]
  400bbe:	4798      	blx	r3
  400bc0:	4601      	mov	r1, r0
  400bc2:	4620      	mov	r0, r4
  400bc4:	47b0      	blx	r6
  400bc6:	4603      	mov	r3, r0
  400bc8:	2800      	cmp	r0, #0
  400bca:	f43f ae3e 	beq.w	40084a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400bce:	68ab      	ldr	r3, [r5, #8]
  400bd0:	4798      	blx	r3
  400bd2:	4603      	mov	r3, r0
  400bd4:	2800      	cmp	r0, #0
  400bd6:	f47f ae38 	bne.w	40084a <udc_process_setup+0x3a>
			iface_num++) {
  400bda:	3401      	adds	r4, #1
  400bdc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bde:	683a      	ldr	r2, [r7, #0]
  400be0:	6811      	ldr	r1, [r2, #0]
  400be2:	7909      	ldrb	r1, [r1, #4]
  400be4:	42a1      	cmp	r1, r4
  400be6:	d8e6      	bhi.n	400bb6 <udc_process_setup+0x3a6>
  400be8:	e62f      	b.n	40084a <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400bea:	2300      	movs	r3, #0
  400bec:	e62d      	b.n	40084a <udc_process_setup+0x3a>
	return false;
  400bee:	2300      	movs	r3, #0
  400bf0:	e62b      	b.n	40084a <udc_process_setup+0x3a>
			return false; // Error from USB host
  400bf2:	2300      	movs	r3, #0
  400bf4:	e629      	b.n	40084a <udc_process_setup+0x3a>
	return false;
  400bf6:	2300      	movs	r3, #0
  400bf8:	e627      	b.n	40084a <udc_process_setup+0x3a>
  400bfa:	bf00      	nop
  400bfc:	20000f2c 	.word	0x20000f2c
  400c00:	20000644 	.word	0x20000644
  400c04:	004006b5 	.word	0x004006b5
  400c08:	00400721 	.word	0x00400721
  400c0c:	004020dd 	.word	0x004020dd
  400c10:	00402331 	.word	0x00402331
  400c14:	00401ffd 	.word	0x00401ffd
  400c18:	20000648 	.word	0x20000648
  400c1c:	00400641 	.word	0x00400641

00400c20 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400c20:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400c22:	2401      	movs	r4, #1
  400c24:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400c26:	2400      	movs	r4, #0
  400c28:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400c2a:	f240 2502 	movw	r5, #514	; 0x202
  400c2e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400c32:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400c36:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400c3a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400c3c:	0052      	lsls	r2, r2, #1
  400c3e:	fbb1 f2f2 	udiv	r2, r1, r2
  400c42:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400c44:	0212      	lsls	r2, r2, #8
  400c46:	b292      	uxth	r2, r2
  400c48:	432b      	orrs	r3, r5
  400c4a:	431a      	orrs	r2, r3
  400c4c:	6042      	str	r2, [r0, #4]
	return 0;
}
  400c4e:	4620      	mov	r0, r4
  400c50:	bc30      	pop	{r4, r5}
  400c52:	4770      	bx	lr

00400c54 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  400c54:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400c56:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  400c58:	0609      	lsls	r1, r1, #24
  400c5a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400c5e:	4321      	orrs	r1, r4
  400c60:	430a      	orrs	r2, r1
  400c62:	0719      	lsls	r1, r3, #28
  400c64:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
  400c68:	4311      	orrs	r1, r2
  400c6a:	6041      	str	r1, [r0, #4]
}
  400c6c:	bc10      	pop	{r4}
  400c6e:	4770      	bx	lr

00400c70 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  400c70:	2302      	movs	r3, #2
  400c72:	6003      	str	r3, [r0, #0]
  400c74:	4770      	bx	lr

00400c76 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400c76:	2301      	movs	r3, #1
  400c78:	fa03 f101 	lsl.w	r1, r3, r1
  400c7c:	6101      	str	r1, [r0, #16]
  400c7e:	4770      	bx	lr

00400c80 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400c80:	6241      	str	r1, [r0, #36]	; 0x24
  400c82:	4770      	bx	lr

00400c84 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  400c84:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  400c86:	4770      	bx	lr

00400c88 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c8c:	4681      	mov	r9, r0
  400c8e:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c90:	4b12      	ldr	r3, [pc, #72]	; (400cdc <pio_handler_process+0x54>)
  400c92:	4798      	blx	r3
  400c94:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c96:	4648      	mov	r0, r9
  400c98:	4b11      	ldr	r3, [pc, #68]	; (400ce0 <pio_handler_process+0x58>)
  400c9a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c9c:	4005      	ands	r5, r0
  400c9e:	d013      	beq.n	400cc8 <pio_handler_process+0x40>
  400ca0:	4c10      	ldr	r4, [pc, #64]	; (400ce4 <pio_handler_process+0x5c>)
  400ca2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400ca6:	e003      	b.n	400cb0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ca8:	42b4      	cmp	r4, r6
  400caa:	d00d      	beq.n	400cc8 <pio_handler_process+0x40>
  400cac:	3410      	adds	r4, #16
		while (status != 0) {
  400cae:	b15d      	cbz	r5, 400cc8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400cb0:	6820      	ldr	r0, [r4, #0]
  400cb2:	42b8      	cmp	r0, r7
  400cb4:	d1f8      	bne.n	400ca8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cb6:	6861      	ldr	r1, [r4, #4]
  400cb8:	4229      	tst	r1, r5
  400cba:	d0f5      	beq.n	400ca8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400cbc:	68e3      	ldr	r3, [r4, #12]
  400cbe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400cc0:	6863      	ldr	r3, [r4, #4]
  400cc2:	ea25 0503 	bic.w	r5, r5, r3
  400cc6:	e7ef      	b.n	400ca8 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400cc8:	4b07      	ldr	r3, [pc, #28]	; (400ce8 <pio_handler_process+0x60>)
  400cca:	681b      	ldr	r3, [r3, #0]
  400ccc:	b123      	cbz	r3, 400cd8 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400cce:	4b07      	ldr	r3, [pc, #28]	; (400cec <pio_handler_process+0x64>)
  400cd0:	681b      	ldr	r3, [r3, #0]
  400cd2:	b10b      	cbz	r3, 400cd8 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400cd4:	4648      	mov	r0, r9
  400cd6:	4798      	blx	r3
  400cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400cdc:	00402e4d 	.word	0x00402e4d
  400ce0:	00402e51 	.word	0x00402e51
  400ce4:	20000650 	.word	0x20000650
  400ce8:	20001b5c 	.word	0x20001b5c
  400cec:	200006c0 	.word	0x200006c0

00400cf0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400cf0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400cf2:	210c      	movs	r1, #12
  400cf4:	4801      	ldr	r0, [pc, #4]	; (400cfc <PIOB_Handler+0xc>)
  400cf6:	4b02      	ldr	r3, [pc, #8]	; (400d00 <PIOB_Handler+0x10>)
  400cf8:	4798      	blx	r3
  400cfa:	bd08      	pop	{r3, pc}
  400cfc:	400e1000 	.word	0x400e1000
  400d00:	00400c89 	.word	0x00400c89

00400d04 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400d04:	4b03      	ldr	r3, [pc, #12]	; (400d14 <rtt_init+0x10>)
  400d06:	681b      	ldr	r3, [r3, #0]
  400d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400d0c:	4319      	orrs	r1, r3
  400d0e:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400d10:	2000      	movs	r0, #0
  400d12:	4770      	bx	lr
  400d14:	200006c4 	.word	0x200006c4

00400d18 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400d18:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400d1a:	4b03      	ldr	r3, [pc, #12]	; (400d28 <rtt_enable_interrupt+0x10>)
  400d1c:	681b      	ldr	r3, [r3, #0]
  400d1e:	4319      	orrs	r1, r3
  400d20:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400d22:	6001      	str	r1, [r0, #0]
  400d24:	4770      	bx	lr
  400d26:	bf00      	nop
  400d28:	200006c4 	.word	0x200006c4

00400d2c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400d2c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400d2e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400d32:	4b02      	ldr	r3, [pc, #8]	; (400d3c <rtt_disable_interrupt+0x10>)
  400d34:	681b      	ldr	r3, [r3, #0]
  400d36:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400d38:	6001      	str	r1, [r0, #0]
  400d3a:	4770      	bx	lr
  400d3c:	200006c4 	.word	0x200006c4

00400d40 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400d40:	b570      	push	{r4, r5, r6, lr}
  400d42:	4606      	mov	r6, r0
  400d44:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400d46:	6804      	ldr	r4, [r0, #0]
  400d48:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400d4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400d50:	4809      	ldr	r0, [pc, #36]	; (400d78 <rtt_write_alarm_time+0x38>)
  400d52:	4b0a      	ldr	r3, [pc, #40]	; (400d7c <rtt_write_alarm_time+0x3c>)
  400d54:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400d56:	b92d      	cbnz	r5, 400d64 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400d58:	f04f 33ff 	mov.w	r3, #4294967295
  400d5c:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400d5e:	b924      	cbnz	r4, 400d6a <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400d60:	2000      	movs	r0, #0
  400d62:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400d64:	3d01      	subs	r5, #1
  400d66:	6075      	str	r5, [r6, #4]
  400d68:	e7f9      	b.n	400d5e <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400d6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400d6e:	4802      	ldr	r0, [pc, #8]	; (400d78 <rtt_write_alarm_time+0x38>)
  400d70:	4b03      	ldr	r3, [pc, #12]	; (400d80 <rtt_write_alarm_time+0x40>)
  400d72:	4798      	blx	r3
  400d74:	e7f4      	b.n	400d60 <rtt_write_alarm_time+0x20>
  400d76:	bf00      	nop
  400d78:	400e1430 	.word	0x400e1430
  400d7c:	00400d2d 	.word	0x00400d2d
  400d80:	00400d19 	.word	0x00400d19

00400d84 <supc_enable_backup_mode>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_enable_backup_mode(Supc *p_supc)
{
	p_supc->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF;
  400d84:	4b03      	ldr	r3, [pc, #12]	; (400d94 <supc_enable_backup_mode+0x10>)
  400d86:	6003      	str	r3, [r0, #0]
	uint32_t ul_dummy = p_supc->SUPC_MR;
  400d88:	6883      	ldr	r3, [r0, #8]
  __ASM volatile ("dsb 0xF":::"memory");
  400d8a:	f3bf 8f4f 	dsb	sy
	__DSB();
	__WFE();
  400d8e:	bf20      	wfe
	__WFI();
  400d90:	bf30      	wfi
  400d92:	4770      	bx	lr
  400d94:	a5000004 	.word	0xa5000004

00400d98 <supc_set_wakeup_mode>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_mode Bitmask of wake up mode (please refer to datasheet for more details).
 */
void supc_set_wakeup_mode(Supc *p_supc, uint32_t ul_mode)
{
	p_supc->SUPC_WUMR = ul_mode;
  400d98:	60c1      	str	r1, [r0, #12]
  400d9a:	4770      	bx	lr

00400d9c <supc_set_wakeup_inputs>:
 * 0 means a low-to-high level transition forces the wake up of core power supply.
 */
void supc_set_wakeup_inputs(Supc *p_supc, uint32_t ul_inputs,
		uint32_t ul_transition)
{
	p_supc->SUPC_WUIR = ul_inputs | ul_transition;
  400d9c:	430a      	orrs	r2, r1
  400d9e:	6102      	str	r2, [r0, #16]
  400da0:	4770      	bx	lr

00400da2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400da2:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400da4:	0189      	lsls	r1, r1, #6
  400da6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400da8:	2402      	movs	r4, #2
  400daa:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400dac:	f04f 31ff 	mov.w	r1, #4294967295
  400db0:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400db2:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400db4:	605a      	str	r2, [r3, #4]
}
  400db6:	bc10      	pop	{r4}
  400db8:	4770      	bx	lr

00400dba <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400dba:	0189      	lsls	r1, r1, #6
  400dbc:	2305      	movs	r3, #5
  400dbe:	5043      	str	r3, [r0, r1]
  400dc0:	4770      	bx	lr

00400dc2 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400dc2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400dc6:	61ca      	str	r2, [r1, #28]
  400dc8:	4770      	bx	lr

00400dca <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400dca:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400dce:	624a      	str	r2, [r1, #36]	; 0x24
  400dd0:	4770      	bx	lr
	...

00400dd4 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  400dd4:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  400dd6:	4601      	mov	r1, r0
  400dd8:	bb28      	cbnz	r0, 400e26 <udd_sleep_mode+0x52>
  400dda:	4b24      	ldr	r3, [pc, #144]	; (400e6c <udd_sleep_mode+0x98>)
  400ddc:	781b      	ldrb	r3, [r3, #0]
  400dde:	b91b      	cbnz	r3, 400de8 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  400de0:	4b22      	ldr	r3, [pc, #136]	; (400e6c <udd_sleep_mode+0x98>)
  400de2:	7019      	strb	r1, [r3, #0]
}
  400de4:	b002      	add	sp, #8
  400de6:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400de8:	4b21      	ldr	r3, [pc, #132]	; (400e70 <udd_sleep_mode+0x9c>)
  400dea:	789b      	ldrb	r3, [r3, #2]
  400dec:	b903      	cbnz	r3, 400df0 <udd_sleep_mode+0x1c>
  400dee:	e7fe      	b.n	400dee <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400df0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400df4:	fab3 f383 	clz	r3, r3
  400df8:	095b      	lsrs	r3, r3, #5
  400dfa:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400dfc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400dfe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e02:	2200      	movs	r2, #0
  400e04:	4b1b      	ldr	r3, [pc, #108]	; (400e74 <udd_sleep_mode+0xa0>)
  400e06:	701a      	strb	r2, [r3, #0]
	return flags;
  400e08:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  400e0a:	4a19      	ldr	r2, [pc, #100]	; (400e70 <udd_sleep_mode+0x9c>)
  400e0c:	7893      	ldrb	r3, [r2, #2]
  400e0e:	3b01      	subs	r3, #1
  400e10:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400e12:	2800      	cmp	r0, #0
  400e14:	d0e4      	beq.n	400de0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400e16:	2201      	movs	r2, #1
  400e18:	4b16      	ldr	r3, [pc, #88]	; (400e74 <udd_sleep_mode+0xa0>)
  400e1a:	701a      	strb	r2, [r3, #0]
  400e1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e20:	b662      	cpsie	i
  400e22:	e7dd      	b.n	400de0 <udd_sleep_mode+0xc>
  400e24:	e7fe      	b.n	400e24 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  400e26:	4b11      	ldr	r3, [pc, #68]	; (400e6c <udd_sleep_mode+0x98>)
  400e28:	781b      	ldrb	r3, [r3, #0]
  400e2a:	2b00      	cmp	r3, #0
  400e2c:	d1d8      	bne.n	400de0 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  400e2e:	4b10      	ldr	r3, [pc, #64]	; (400e70 <udd_sleep_mode+0x9c>)
  400e30:	789b      	ldrb	r3, [r3, #2]
  400e32:	2bff      	cmp	r3, #255	; 0xff
  400e34:	d0f6      	beq.n	400e24 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400e36:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400e3a:	fab3 f383 	clz	r3, r3
  400e3e:	095b      	lsrs	r3, r3, #5
  400e40:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400e42:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400e44:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400e48:	2200      	movs	r2, #0
  400e4a:	4b0a      	ldr	r3, [pc, #40]	; (400e74 <udd_sleep_mode+0xa0>)
  400e4c:	701a      	strb	r2, [r3, #0]
	return flags;
  400e4e:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  400e50:	4a07      	ldr	r2, [pc, #28]	; (400e70 <udd_sleep_mode+0x9c>)
  400e52:	7893      	ldrb	r3, [r2, #2]
  400e54:	3301      	adds	r3, #1
  400e56:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400e58:	2800      	cmp	r0, #0
  400e5a:	d0c1      	beq.n	400de0 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400e5c:	2201      	movs	r2, #1
  400e5e:	4b05      	ldr	r3, [pc, #20]	; (400e74 <udd_sleep_mode+0xa0>)
  400e60:	701a      	strb	r2, [r3, #0]
  400e62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400e66:	b662      	cpsie	i
  400e68:	e7ba      	b.n	400de0 <udd_sleep_mode+0xc>
  400e6a:	bf00      	nop
  400e6c:	200006c9 	.word	0x200006c9
  400e70:	20000f24 	.word	0x20000f24
  400e74:	200000a0 	.word	0x200000a0

00400e78 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  400e78:	4a03      	ldr	r2, [pc, #12]	; (400e88 <udd_ctrl_init+0x10>)
  400e7a:	2300      	movs	r3, #0
  400e7c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400e7e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  400e80:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  400e82:	4a02      	ldr	r2, [pc, #8]	; (400e8c <udd_ctrl_init+0x14>)
  400e84:	7013      	strb	r3, [r2, #0]
  400e86:	4770      	bx	lr
  400e88:	20000f2c 	.word	0x20000f2c
  400e8c:	200006ce 	.word	0x200006ce

00400e90 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  400e90:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  400e92:	2205      	movs	r2, #5
  400e94:	4b0a      	ldr	r3, [pc, #40]	; (400ec0 <udd_ctrl_stall_data+0x30>)
  400e96:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  400e98:	4a0a      	ldr	r2, [pc, #40]	; (400ec4 <udd_ctrl_stall_data+0x34>)
  400e9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e9c:	9301      	str	r3, [sp, #4]
  400e9e:	9b01      	ldr	r3, [sp, #4]
  400ea0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400ea4:	9301      	str	r3, [sp, #4]
  400ea6:	9b01      	ldr	r3, [sp, #4]
  400ea8:	f043 0320 	orr.w	r3, r3, #32
  400eac:	9301      	str	r3, [sp, #4]
  400eae:	9b01      	ldr	r3, [sp, #4]
  400eb0:	6313      	str	r3, [r2, #48]	; 0x30
  400eb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400eb4:	f013 0f20 	tst.w	r3, #32
  400eb8:	d0fb      	beq.n	400eb2 <udd_ctrl_stall_data+0x22>
}
  400eba:	b002      	add	sp, #8
  400ebc:	4770      	bx	lr
  400ebe:	bf00      	nop
  400ec0:	200006ce 	.word	0x200006ce
  400ec4:	40034000 	.word	0x40034000

00400ec8 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  400ec8:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  400eca:	2203      	movs	r2, #3
  400ecc:	4b0a      	ldr	r3, [pc, #40]	; (400ef8 <udd_ctrl_send_zlp_in+0x30>)
  400ece:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  400ed0:	4a0a      	ldr	r2, [pc, #40]	; (400efc <udd_ctrl_send_zlp_in+0x34>)
  400ed2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ed4:	9301      	str	r3, [sp, #4]
  400ed6:	9b01      	ldr	r3, [sp, #4]
  400ed8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400edc:	9301      	str	r3, [sp, #4]
  400ede:	9b01      	ldr	r3, [sp, #4]
  400ee0:	f043 0310 	orr.w	r3, r3, #16
  400ee4:	9301      	str	r3, [sp, #4]
  400ee6:	9b01      	ldr	r3, [sp, #4]
  400ee8:	6313      	str	r3, [r2, #48]	; 0x30
  400eea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400eec:	f013 0f10 	tst.w	r3, #16
  400ef0:	d0fb      	beq.n	400eea <udd_ctrl_send_zlp_in+0x22>
}
  400ef2:	b002      	add	sp, #8
  400ef4:	4770      	bx	lr
  400ef6:	bf00      	nop
  400ef8:	200006ce 	.word	0x200006ce
  400efc:	40034000 	.word	0x40034000

00400f00 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  400f00:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  400f02:	4b02      	ldr	r3, [pc, #8]	; (400f0c <udd_ctrl_endofrequest+0xc>)
  400f04:	691b      	ldr	r3, [r3, #16]
  400f06:	b103      	cbz	r3, 400f0a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  400f08:	4798      	blx	r3
  400f0a:	bd08      	pop	{r3, pc}
  400f0c:	20000f2c 	.word	0x20000f2c

00400f10 <udd_ctrl_in_sent>:
{
  400f10:	b530      	push	{r4, r5, lr}
  400f12:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  400f14:	4b63      	ldr	r3, [pc, #396]	; (4010a4 <udd_ctrl_in_sent+0x194>)
  400f16:	781b      	ldrb	r3, [r3, #0]
  400f18:	2b03      	cmp	r3, #3
  400f1a:	d029      	beq.n	400f70 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  400f1c:	4b62      	ldr	r3, [pc, #392]	; (4010a8 <udd_ctrl_in_sent+0x198>)
  400f1e:	881b      	ldrh	r3, [r3, #0]
  400f20:	4a62      	ldr	r2, [pc, #392]	; (4010ac <udd_ctrl_in_sent+0x19c>)
  400f22:	8994      	ldrh	r4, [r2, #12]
  400f24:	1ae4      	subs	r4, r4, r3
  400f26:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  400f28:	2c00      	cmp	r4, #0
  400f2a:	d144      	bne.n	400fb6 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  400f2c:	4a60      	ldr	r2, [pc, #384]	; (4010b0 <udd_ctrl_in_sent+0x1a0>)
  400f2e:	8811      	ldrh	r1, [r2, #0]
  400f30:	440b      	add	r3, r1
  400f32:	b29b      	uxth	r3, r3
  400f34:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  400f36:	4a5d      	ldr	r2, [pc, #372]	; (4010ac <udd_ctrl_in_sent+0x19c>)
  400f38:	88d2      	ldrh	r2, [r2, #6]
  400f3a:	429a      	cmp	r2, r3
  400f3c:	d003      	beq.n	400f46 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  400f3e:	4b5d      	ldr	r3, [pc, #372]	; (4010b4 <udd_ctrl_in_sent+0x1a4>)
  400f40:	781b      	ldrb	r3, [r3, #0]
  400f42:	2b00      	cmp	r3, #0
  400f44:	d02b      	beq.n	400f9e <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400f46:	2204      	movs	r2, #4
  400f48:	4b56      	ldr	r3, [pc, #344]	; (4010a4 <udd_ctrl_in_sent+0x194>)
  400f4a:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  400f4c:	4a5a      	ldr	r2, [pc, #360]	; (4010b8 <udd_ctrl_in_sent+0x1a8>)
  400f4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f50:	9301      	str	r3, [sp, #4]
  400f52:	9b01      	ldr	r3, [sp, #4]
  400f54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f58:	9301      	str	r3, [sp, #4]
  400f5a:	9b01      	ldr	r3, [sp, #4]
  400f5c:	f023 0301 	bic.w	r3, r3, #1
  400f60:	9301      	str	r3, [sp, #4]
  400f62:	9b01      	ldr	r3, [sp, #4]
  400f64:	6313      	str	r3, [r2, #48]	; 0x30
  400f66:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f68:	f013 0f01 	tst.w	r3, #1
  400f6c:	d1fb      	bne.n	400f66 <udd_ctrl_in_sent+0x56>
  400f6e:	e014      	b.n	400f9a <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  400f70:	4a51      	ldr	r2, [pc, #324]	; (4010b8 <udd_ctrl_in_sent+0x1a8>)
  400f72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f74:	9300      	str	r3, [sp, #0]
  400f76:	9b00      	ldr	r3, [sp, #0]
  400f78:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f7c:	9300      	str	r3, [sp, #0]
  400f7e:	9b00      	ldr	r3, [sp, #0]
  400f80:	f023 0301 	bic.w	r3, r3, #1
  400f84:	9300      	str	r3, [sp, #0]
  400f86:	9b00      	ldr	r3, [sp, #0]
  400f88:	6313      	str	r3, [r2, #48]	; 0x30
  400f8a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f8c:	f013 0f01 	tst.w	r3, #1
  400f90:	d1fb      	bne.n	400f8a <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  400f92:	4b4a      	ldr	r3, [pc, #296]	; (4010bc <udd_ctrl_in_sent+0x1ac>)
  400f94:	4798      	blx	r3
		udd_ctrl_init();
  400f96:	4b4a      	ldr	r3, [pc, #296]	; (4010c0 <udd_ctrl_in_sent+0x1b0>)
  400f98:	4798      	blx	r3
}
  400f9a:	b007      	add	sp, #28
  400f9c:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  400f9e:	4b43      	ldr	r3, [pc, #268]	; (4010ac <udd_ctrl_in_sent+0x19c>)
  400fa0:	695b      	ldr	r3, [r3, #20]
  400fa2:	2b00      	cmp	r3, #0
  400fa4:	d05d      	beq.n	401062 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  400fa6:	4798      	blx	r3
  400fa8:	2800      	cmp	r0, #0
  400faa:	d05a      	beq.n	401062 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  400fac:	2200      	movs	r2, #0
  400fae:	4b3e      	ldr	r3, [pc, #248]	; (4010a8 <udd_ctrl_in_sent+0x198>)
  400fb0:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  400fb2:	4b3e      	ldr	r3, [pc, #248]	; (4010ac <udd_ctrl_in_sent+0x19c>)
  400fb4:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  400fb6:	2c3f      	cmp	r4, #63	; 0x3f
  400fb8:	d953      	bls.n	401062 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  400fba:	2200      	movs	r2, #0
  400fbc:	4b3d      	ldr	r3, [pc, #244]	; (4010b4 <udd_ctrl_in_sent+0x1a4>)
  400fbe:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  400fc0:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400fc2:	4b3a      	ldr	r3, [pc, #232]	; (4010ac <udd_ctrl_in_sent+0x19c>)
  400fc4:	6899      	ldr	r1, [r3, #8]
  400fc6:	4b38      	ldr	r3, [pc, #224]	; (4010a8 <udd_ctrl_in_sent+0x198>)
  400fc8:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400fca:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400fce:	fab3 f383 	clz	r3, r3
  400fd2:	095b      	lsrs	r3, r3, #5
  400fd4:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  400fd6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400fd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400fdc:	2200      	movs	r2, #0
  400fde:	4b39      	ldr	r3, [pc, #228]	; (4010c4 <udd_ctrl_in_sent+0x1b4>)
  400fe0:	701a      	strb	r2, [r3, #0]
	return flags;
  400fe2:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  400fe4:	4b34      	ldr	r3, [pc, #208]	; (4010b8 <udd_ctrl_in_sent+0x1a8>)
  400fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400fe8:	f013 0f02 	tst.w	r3, #2
  400fec:	d13d      	bne.n	40106a <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  400fee:	b14c      	cbz	r4, 401004 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400ff0:	4401      	add	r1, r0
  400ff2:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  400ff4:	4830      	ldr	r0, [pc, #192]	; (4010b8 <udd_ctrl_in_sent+0x1a8>)
  400ff6:	f812 3b01 	ldrb.w	r3, [r2], #1
  400ffa:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  400ffc:	1a53      	subs	r3, r2, r1
  400ffe:	b2db      	uxtb	r3, r3
  401000:	42a3      	cmp	r3, r4
  401002:	d3f8      	bcc.n	400ff6 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  401004:	4b28      	ldr	r3, [pc, #160]	; (4010a8 <udd_ctrl_in_sent+0x198>)
  401006:	881a      	ldrh	r2, [r3, #0]
  401008:	4414      	add	r4, r2
  40100a:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  40100c:	4a2a      	ldr	r2, [pc, #168]	; (4010b8 <udd_ctrl_in_sent+0x1a8>)
  40100e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401010:	9303      	str	r3, [sp, #12]
  401012:	9b03      	ldr	r3, [sp, #12]
  401014:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401018:	9303      	str	r3, [sp, #12]
  40101a:	9b03      	ldr	r3, [sp, #12]
  40101c:	f043 0310 	orr.w	r3, r3, #16
  401020:	9303      	str	r3, [sp, #12]
  401022:	9b03      	ldr	r3, [sp, #12]
  401024:	6313      	str	r3, [r2, #48]	; 0x30
  401026:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401028:	f013 0f10 	tst.w	r3, #16
  40102c:	d0fb      	beq.n	401026 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  40102e:	4a22      	ldr	r2, [pc, #136]	; (4010b8 <udd_ctrl_in_sent+0x1a8>)
  401030:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401032:	9304      	str	r3, [sp, #16]
  401034:	9b04      	ldr	r3, [sp, #16]
  401036:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40103a:	9304      	str	r3, [sp, #16]
  40103c:	9b04      	ldr	r3, [sp, #16]
  40103e:	f023 0301 	bic.w	r3, r3, #1
  401042:	9304      	str	r3, [sp, #16]
  401044:	9b04      	ldr	r3, [sp, #16]
  401046:	6313      	str	r3, [r2, #48]	; 0x30
  401048:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40104a:	f013 0f01 	tst.w	r3, #1
  40104e:	d1fb      	bne.n	401048 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  401050:	2d00      	cmp	r5, #0
  401052:	d0a2      	beq.n	400f9a <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  401054:	2201      	movs	r2, #1
  401056:	4b1b      	ldr	r3, [pc, #108]	; (4010c4 <udd_ctrl_in_sent+0x1b4>)
  401058:	701a      	strb	r2, [r3, #0]
  40105a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40105e:	b662      	cpsie	i
  401060:	e79b      	b.n	400f9a <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  401062:	2201      	movs	r2, #1
  401064:	4b13      	ldr	r3, [pc, #76]	; (4010b4 <udd_ctrl_in_sent+0x1a4>)
  401066:	701a      	strb	r2, [r3, #0]
  401068:	e7ab      	b.n	400fc2 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  40106a:	b12d      	cbz	r5, 401078 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  40106c:	2201      	movs	r2, #1
  40106e:	4b15      	ldr	r3, [pc, #84]	; (4010c4 <udd_ctrl_in_sent+0x1b4>)
  401070:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401072:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401076:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401078:	2204      	movs	r2, #4
  40107a:	4b0a      	ldr	r3, [pc, #40]	; (4010a4 <udd_ctrl_in_sent+0x194>)
  40107c:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  40107e:	4a0e      	ldr	r2, [pc, #56]	; (4010b8 <udd_ctrl_in_sent+0x1a8>)
  401080:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401082:	9302      	str	r3, [sp, #8]
  401084:	9b02      	ldr	r3, [sp, #8]
  401086:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40108a:	9302      	str	r3, [sp, #8]
  40108c:	9b02      	ldr	r3, [sp, #8]
  40108e:	f023 0301 	bic.w	r3, r3, #1
  401092:	9302      	str	r3, [sp, #8]
  401094:	9b02      	ldr	r3, [sp, #8]
  401096:	6313      	str	r3, [r2, #48]	; 0x30
  401098:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40109a:	f013 0f01 	tst.w	r3, #1
  40109e:	d1fb      	bne.n	401098 <udd_ctrl_in_sent+0x188>
  4010a0:	e77b      	b.n	400f9a <udd_ctrl_in_sent+0x8a>
  4010a2:	bf00      	nop
  4010a4:	200006ce 	.word	0x200006ce
  4010a8:	200006ca 	.word	0x200006ca
  4010ac:	20000f2c 	.word	0x20000f2c
  4010b0:	200006cc 	.word	0x200006cc
  4010b4:	200006c8 	.word	0x200006c8
  4010b8:	40034000 	.word	0x40034000
  4010bc:	00400f01 	.word	0x00400f01
  4010c0:	00400e79 	.word	0x00400e79
  4010c4:	200000a0 	.word	0x200000a0

004010c8 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  4010c8:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  4010ca:	7c43      	ldrb	r3, [r0, #17]
  4010cc:	f013 0f10 	tst.w	r3, #16
  4010d0:	d016      	beq.n	401100 <udd_ep_finish_job+0x38>
  4010d2:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  4010d4:	7c43      	ldrb	r3, [r0, #17]
  4010d6:	f36f 1304 	bfc	r3, #4, #1
  4010da:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  4010dc:	6804      	ldr	r4, [r0, #0]
  4010de:	b17c      	cbz	r4, 401100 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4010e0:	f102 030c 	add.w	r3, r2, #12
  4010e4:	4907      	ldr	r1, [pc, #28]	; (401104 <udd_ep_finish_job+0x3c>)
  4010e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4010ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  4010ee:	bf18      	it	ne
  4010f0:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4010f4:	6881      	ldr	r1, [r0, #8]
  4010f6:	2d01      	cmp	r5, #1
  4010f8:	bf14      	ite	ne
  4010fa:	2000      	movne	r0, #0
  4010fc:	2001      	moveq	r0, #1
  4010fe:	47a0      	blx	r4
  401100:	bd38      	pop	{r3, r4, r5, pc}
  401102:	bf00      	nop
  401104:	40034000 	.word	0x40034000

00401108 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401108:	b430      	push	{r4, r5}
  40110a:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40110c:	1e41      	subs	r1, r0, #1
  40110e:	0083      	lsls	r3, r0, #2
  401110:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401114:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  401118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  40111a:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  40111c:	f012 0f02 	tst.w	r2, #2
  401120:	d032      	beq.n	401188 <udd_ep_ack_out_received+0x80>
  401122:	f014 0f40 	tst.w	r4, #64	; 0x40
  401126:	d108      	bne.n	40113a <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401128:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40112c:	4c2a      	ldr	r4, [pc, #168]	; (4011d8 <udd_ep_ack_out_received+0xd0>)
  40112e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401132:	7c54      	ldrb	r4, [r2, #17]
  401134:	f36f 0483 	bfc	r4, #2, #2
  401138:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  40113a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40113e:	4c26      	ldr	r4, [pc, #152]	; (4011d8 <udd_ep_ack_out_received+0xd0>)
  401140:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401144:	7c52      	ldrb	r2, [r2, #17]
  401146:	f012 0f0c 	tst.w	r2, #12
  40114a:	d128      	bne.n	40119e <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  40114c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40114e:	9200      	str	r2, [sp, #0]
  401150:	9a00      	ldr	r2, [sp, #0]
  401152:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401156:	9200      	str	r2, [sp, #0]
  401158:	9a00      	ldr	r2, [sp, #0]
  40115a:	f022 0202 	bic.w	r2, r2, #2
  40115e:	9200      	str	r2, [sp, #0]
  401160:	9a00      	ldr	r2, [sp, #0]
  401162:	631a      	str	r2, [r3, #48]	; 0x30
  401164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401166:	f012 0f02 	tst.w	r2, #2
  40116a:	d1fb      	bne.n	401164 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  40116c:	b380      	cbz	r0, 4011d0 <udd_ep_ack_out_received+0xc8>
  40116e:	2803      	cmp	r0, #3
  401170:	d02e      	beq.n	4011d0 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  401172:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401176:	4b18      	ldr	r3, [pc, #96]	; (4011d8 <udd_ep_ack_out_received+0xd0>)
  401178:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  40117c:	7c5a      	ldrb	r2, [r3, #17]
  40117e:	2101      	movs	r1, #1
  401180:	f361 0283 	bfi	r2, r1, #2, #2
  401184:	745a      	strb	r2, [r3, #17]
  401186:	e023      	b.n	4011d0 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401188:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40118c:	4c12      	ldr	r4, [pc, #72]	; (4011d8 <udd_ep_ack_out_received+0xd0>)
  40118e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401192:	7c54      	ldrb	r4, [r2, #17]
  401194:	2501      	movs	r5, #1
  401196:	f365 0483 	bfi	r4, r5, #2, #2
  40119a:	7454      	strb	r4, [r2, #17]
  40119c:	e7cd      	b.n	40113a <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  40119e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4011a0:	9201      	str	r2, [sp, #4]
  4011a2:	9a01      	ldr	r2, [sp, #4]
  4011a4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4011a8:	9201      	str	r2, [sp, #4]
  4011aa:	9a01      	ldr	r2, [sp, #4]
  4011ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  4011b0:	9201      	str	r2, [sp, #4]
  4011b2:	9a01      	ldr	r2, [sp, #4]
  4011b4:	631a      	str	r2, [r3, #48]	; 0x30
  4011b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4011b8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4011bc:	d1fb      	bne.n	4011b6 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  4011be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4011c2:	4b05      	ldr	r3, [pc, #20]	; (4011d8 <udd_ep_ack_out_received+0xd0>)
  4011c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4011c8:	7c4b      	ldrb	r3, [r1, #17]
  4011ca:	f36f 0383 	bfc	r3, #2, #2
  4011ce:	744b      	strb	r3, [r1, #17]
	}
}
  4011d0:	b002      	add	sp, #8
  4011d2:	bc30      	pop	{r4, r5}
  4011d4:	4770      	bx	lr
  4011d6:	bf00      	nop
  4011d8:	200006d0 	.word	0x200006d0

004011dc <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4011dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4011e0:	b083      	sub	sp, #12
  4011e2:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4011e4:	4681      	mov	r9, r0
  4011e6:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4011e8:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  4011ec:	4b66      	ldr	r3, [pc, #408]	; (401388 <udd_ep_in_sent+0x1ac>)
  4011ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4011f2:	f893 c011 	ldrb.w	ip, [r3, #17]
  4011f6:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  4011fa:	2800      	cmp	r0, #0
  4011fc:	f000 80b7 	beq.w	40136e <udd_ep_in_sent+0x192>
  401200:	2803      	cmp	r0, #3
  401202:	bf0c      	ite	eq
  401204:	2301      	moveq	r3, #1
  401206:	2302      	movne	r3, #2
  401208:	4563      	cmp	r3, ip
  40120a:	f340 80b2 	ble.w	401372 <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  40120e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401212:	4a5d      	ldr	r2, [pc, #372]	; (401388 <udd_ep_in_sent+0x1ac>)
  401214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401218:	68da      	ldr	r2, [r3, #12]
  40121a:	689b      	ldr	r3, [r3, #8]
  40121c:	429a      	cmp	r2, r3
  40121e:	d309      	bcc.n	401234 <udd_ep_in_sent+0x58>
  401220:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  401224:	4c58      	ldr	r4, [pc, #352]	; (401388 <udd_ep_in_sent+0x1ac>)
  401226:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40122a:	7c49      	ldrb	r1, [r1, #17]
  40122c:	f011 0f40 	tst.w	r1, #64	; 0x40
  401230:	f000 80a3 	beq.w	40137a <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401234:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401238:	4953      	ldr	r1, [pc, #332]	; (401388 <udd_ep_in_sent+0x1ac>)
  40123a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  40123e:	686c      	ldr	r4, [r5, #4]
  401240:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401242:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401244:	8a2b      	ldrh	r3, [r5, #16]
  401246:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  40124a:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  40124c:	bf3a      	itte	cc
  40124e:	460f      	movcc	r7, r1
		is_short_pkt = true;
  401250:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  401254:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401258:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40125c:	494a      	ldr	r1, [pc, #296]	; (401388 <udd_ep_in_sent+0x1ac>)
  40125e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  401262:	443a      	add	r2, r7
  401264:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  401266:	2f07      	cmp	r7, #7
  401268:	d92b      	bls.n	4012c2 <udd_ep_in_sent+0xe6>
  40126a:	f104 0308 	add.w	r3, r4, #8
  40126e:	463d      	mov	r5, r7
  401270:	0082      	lsls	r2, r0, #2
  401272:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401276:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40127a:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  40127e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401280:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  401284:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401286:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  40128a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40128c:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  401290:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401292:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  401296:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401298:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  40129c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40129e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  4012a2:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4012a4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  4012a8:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  4012aa:	3d08      	subs	r5, #8
  4012ac:	3308      	adds	r3, #8
  4012ae:	2d07      	cmp	r5, #7
  4012b0:	d8e3      	bhi.n	40127a <udd_ep_in_sent+0x9e>
  4012b2:	f1a7 0308 	sub.w	r3, r7, #8
  4012b6:	f023 0307 	bic.w	r3, r3, #7
  4012ba:	3308      	adds	r3, #8
  4012bc:	441c      	add	r4, r3
  4012be:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  4012c2:	b14f      	cbz	r7, 4012d8 <udd_ep_in_sent+0xfc>
  4012c4:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4012c6:	4931      	ldr	r1, [pc, #196]	; (40138c <udd_ep_in_sent+0x1b0>)
  4012c8:	f109 0914 	add.w	r9, r9, #20
  4012cc:	f814 2b01 	ldrb.w	r2, [r4], #1
  4012d0:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  4012d4:	429c      	cmp	r4, r3
  4012d6:	d1f9      	bne.n	4012cc <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  4012d8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4012dc:	4a2a      	ldr	r2, [pc, #168]	; (401388 <udd_ep_in_sent+0x1ac>)
  4012de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4012e2:	f10c 0c01 	add.w	ip, ip, #1
  4012e6:	7c5a      	ldrb	r2, [r3, #17]
  4012e8:	f36c 0283 	bfi	r2, ip, #2, #2
  4012ec:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  4012ee:	f1b8 0f00 	cmp.w	r8, #0
  4012f2:	d014      	beq.n	40131e <udd_ep_in_sent+0x142>
  4012f4:	0080      	lsls	r0, r0, #2
  4012f6:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4012fa:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4012fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401300:	9301      	str	r3, [sp, #4]
  401302:	9b01      	ldr	r3, [sp, #4]
  401304:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401308:	9301      	str	r3, [sp, #4]
  40130a:	9b01      	ldr	r3, [sp, #4]
  40130c:	f043 0310 	orr.w	r3, r3, #16
  401310:	9301      	str	r3, [sp, #4]
  401312:	9b01      	ldr	r3, [sp, #4]
  401314:	6303      	str	r3, [r0, #48]	; 0x30
  401316:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401318:	f013 0f10 	tst.w	r3, #16
  40131c:	d0fb      	beq.n	401316 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  40131e:	f1be 0f00 	cmp.w	lr, #0
  401322:	d008      	beq.n	401336 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  401324:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401328:	4a17      	ldr	r2, [pc, #92]	; (401388 <udd_ep_in_sent+0x1ac>)
  40132a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40132e:	7c5a      	ldrb	r2, [r3, #17]
  401330:	f36f 1286 	bfc	r2, #6, #1
  401334:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401336:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40133a:	4a13      	ldr	r2, [pc, #76]	; (401388 <udd_ep_in_sent+0x1ac>)
  40133c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401340:	68da      	ldr	r2, [r3, #12]
  401342:	689b      	ldr	r3, [r3, #8]
  401344:	429a      	cmp	r2, r3
  401346:	d31a      	bcc.n	40137e <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401348:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40134c:	4a0e      	ldr	r2, [pc, #56]	; (401388 <udd_ep_in_sent+0x1ac>)
  40134e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401352:	7c5b      	ldrb	r3, [r3, #17]
  401354:	f013 0f40 	tst.w	r3, #64	; 0x40
  401358:	d113      	bne.n	401382 <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  40135a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40135e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  401362:	7c73      	ldrb	r3, [r6, #17]
  401364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401368:	7473      	strb	r3, [r6, #17]
		return false;
  40136a:	2000      	movs	r0, #0
  40136c:	e002      	b.n	401374 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40136e:	2301      	movs	r3, #1
  401370:	e74a      	b.n	401208 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  401372:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  401374:	b003      	add	sp, #12
  401376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  40137a:	2000      	movs	r0, #0
  40137c:	e7fa      	b.n	401374 <udd_ep_in_sent+0x198>
	return true; // Pending
  40137e:	2001      	movs	r0, #1
  401380:	e7f8      	b.n	401374 <udd_ep_in_sent+0x198>
  401382:	2001      	movs	r0, #1
  401384:	e7f6      	b.n	401374 <udd_ep_in_sent+0x198>
  401386:	bf00      	nop
  401388:	200006d0 	.word	0x200006d0
  40138c:	40034000 	.word	0x40034000

00401390 <UDP_Handler>:
{
  401390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401394:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401396:	4b86      	ldr	r3, [pc, #536]	; (4015b0 <UDP_Handler+0x220>)
  401398:	4798      	blx	r3
  40139a:	b920      	cbnz	r0, 4013a6 <UDP_Handler+0x16>
  40139c:	4b85      	ldr	r3, [pc, #532]	; (4015b4 <UDP_Handler+0x224>)
  40139e:	69db      	ldr	r3, [r3, #28]
  4013a0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4013a4:	d03b      	beq.n	40141e <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  4013a6:	2022      	movs	r0, #34	; 0x22
  4013a8:	4b83      	ldr	r3, [pc, #524]	; (4015b8 <UDP_Handler+0x228>)
  4013aa:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  4013ac:	4b81      	ldr	r3, [pc, #516]	; (4015b4 <UDP_Handler+0x224>)
  4013ae:	699b      	ldr	r3, [r3, #24]
  4013b0:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4013b4:	d004      	beq.n	4013c0 <UDP_Handler+0x30>
  4013b6:	4b7f      	ldr	r3, [pc, #508]	; (4015b4 <UDP_Handler+0x224>)
  4013b8:	69db      	ldr	r3, [r3, #28]
  4013ba:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4013be:	d137      	bne.n	401430 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  4013c0:	4b7c      	ldr	r3, [pc, #496]	; (4015b4 <UDP_Handler+0x224>)
  4013c2:	69db      	ldr	r3, [r3, #28]
  4013c4:	f013 0f01 	tst.w	r3, #1
  4013c8:	f000 81b6 	beq.w	401738 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  4013cc:	4b79      	ldr	r3, [pc, #484]	; (4015b4 <UDP_Handler+0x224>)
  4013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013d0:	f013 0f04 	tst.w	r3, #4
  4013d4:	d133      	bne.n	40143e <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  4013d6:	4b77      	ldr	r3, [pc, #476]	; (4015b4 <UDP_Handler+0x224>)
  4013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013da:	f013 0f01 	tst.w	r3, #1
  4013de:	f040 80c3 	bne.w	401568 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  4013e2:	4b74      	ldr	r3, [pc, #464]	; (4015b4 <UDP_Handler+0x224>)
  4013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013e6:	f013 0f02 	tst.w	r3, #2
  4013ea:	f040 80c0 	bne.w	40156e <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  4013ee:	4b71      	ldr	r3, [pc, #452]	; (4015b4 <UDP_Handler+0x224>)
  4013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013f2:	f013 0f08 	tst.w	r3, #8
  4013f6:	f000 819f 	beq.w	401738 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  4013fa:	4a6e      	ldr	r2, [pc, #440]	; (4015b4 <UDP_Handler+0x224>)
  4013fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013fe:	9300      	str	r3, [sp, #0]
  401400:	9b00      	ldr	r3, [sp, #0]
  401402:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401406:	9300      	str	r3, [sp, #0]
  401408:	9b00      	ldr	r3, [sp, #0]
  40140a:	f023 0308 	bic.w	r3, r3, #8
  40140e:	9300      	str	r3, [sp, #0]
  401410:	9b00      	ldr	r3, [sp, #0]
  401412:	6313      	str	r3, [r2, #48]	; 0x30
  401414:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401416:	f013 0f08 	tst.w	r3, #8
  40141a:	d1fb      	bne.n	401414 <UDP_Handler+0x84>
  40141c:	e005      	b.n	40142a <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  40141e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401420:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401424:	2200      	movs	r2, #0
  401426:	4b65      	ldr	r3, [pc, #404]	; (4015bc <UDP_Handler+0x22c>)
  401428:	701a      	strb	r2, [r3, #0]
}
  40142a:	b01b      	add	sp, #108	; 0x6c
  40142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  401430:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401434:	4b5f      	ldr	r3, [pc, #380]	; (4015b4 <UDP_Handler+0x224>)
  401436:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401438:	4b61      	ldr	r3, [pc, #388]	; (4015c0 <UDP_Handler+0x230>)
  40143a:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  40143c:	e7f5      	b.n	40142a <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40143e:	4b61      	ldr	r3, [pc, #388]	; (4015c4 <UDP_Handler+0x234>)
  401440:	781b      	ldrb	r3, [r3, #0]
  401442:	b9cb      	cbnz	r3, 401478 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  401444:	4b5b      	ldr	r3, [pc, #364]	; (4015b4 <UDP_Handler+0x224>)
  401446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401448:	f3c3 430a 	ubfx	r3, r3, #16, #11
  40144c:	2b08      	cmp	r3, #8
  40144e:	d018      	beq.n	401482 <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  401450:	4a58      	ldr	r2, [pc, #352]	; (4015b4 <UDP_Handler+0x224>)
  401452:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401454:	9301      	str	r3, [sp, #4]
  401456:	9b01      	ldr	r3, [sp, #4]
  401458:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40145c:	9301      	str	r3, [sp, #4]
  40145e:	9b01      	ldr	r3, [sp, #4]
  401460:	f023 0304 	bic.w	r3, r3, #4
  401464:	9301      	str	r3, [sp, #4]
  401466:	9b01      	ldr	r3, [sp, #4]
  401468:	6313      	str	r3, [r2, #48]	; 0x30
  40146a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40146c:	f013 0f04 	tst.w	r3, #4
  401470:	d1fb      	bne.n	40146a <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  401472:	4b55      	ldr	r3, [pc, #340]	; (4015c8 <UDP_Handler+0x238>)
  401474:	4798      	blx	r3
  401476:	e7d8      	b.n	40142a <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401478:	4b54      	ldr	r3, [pc, #336]	; (4015cc <UDP_Handler+0x23c>)
  40147a:	4798      	blx	r3
		udd_ctrl_init();
  40147c:	4b54      	ldr	r3, [pc, #336]	; (4015d0 <UDP_Handler+0x240>)
  40147e:	4798      	blx	r3
  401480:	e7e0      	b.n	401444 <UDP_Handler+0xb4>
  401482:	4b54      	ldr	r3, [pc, #336]	; (4015d4 <UDP_Handler+0x244>)
  401484:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401488:	494a      	ldr	r1, [pc, #296]	; (4015b4 <UDP_Handler+0x224>)
  40148a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  40148c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  401490:	4283      	cmp	r3, r0
  401492:	d1fa      	bne.n	40148a <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  401494:	4b50      	ldr	r3, [pc, #320]	; (4015d8 <UDP_Handler+0x248>)
  401496:	4798      	blx	r3
  401498:	b998      	cbnz	r0, 4014c2 <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  40149a:	4a46      	ldr	r2, [pc, #280]	; (4015b4 <UDP_Handler+0x224>)
  40149c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40149e:	9302      	str	r3, [sp, #8]
  4014a0:	9b02      	ldr	r3, [sp, #8]
  4014a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4014a6:	9302      	str	r3, [sp, #8]
  4014a8:	9b02      	ldr	r3, [sp, #8]
  4014aa:	f023 0304 	bic.w	r3, r3, #4
  4014ae:	9302      	str	r3, [sp, #8]
  4014b0:	9b02      	ldr	r3, [sp, #8]
  4014b2:	6313      	str	r3, [r2, #48]	; 0x30
  4014b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4014b6:	f013 0f04 	tst.w	r3, #4
  4014ba:	d1fb      	bne.n	4014b4 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  4014bc:	4b42      	ldr	r3, [pc, #264]	; (4015c8 <UDP_Handler+0x238>)
  4014be:	4798      	blx	r3
  4014c0:	e7b3      	b.n	40142a <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  4014c2:	4b46      	ldr	r3, [pc, #280]	; (4015dc <UDP_Handler+0x24c>)
  4014c4:	f993 3000 	ldrsb.w	r3, [r3]
  4014c8:	2b00      	cmp	r3, #0
  4014ca:	db1d      	blt.n	401508 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  4014cc:	4a39      	ldr	r2, [pc, #228]	; (4015b4 <UDP_Handler+0x224>)
  4014ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4014d0:	9305      	str	r3, [sp, #20]
  4014d2:	9b05      	ldr	r3, [sp, #20]
  4014d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4014d8:	9305      	str	r3, [sp, #20]
  4014da:	9b05      	ldr	r3, [sp, #20]
  4014dc:	f023 0304 	bic.w	r3, r3, #4
  4014e0:	9305      	str	r3, [sp, #20]
  4014e2:	9b05      	ldr	r3, [sp, #20]
  4014e4:	6313      	str	r3, [r2, #48]	; 0x30
  4014e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4014e8:	f013 0f04 	tst.w	r3, #4
  4014ec:	d1fb      	bne.n	4014e6 <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4014ee:	4b3b      	ldr	r3, [pc, #236]	; (4015dc <UDP_Handler+0x24c>)
  4014f0:	88db      	ldrh	r3, [r3, #6]
  4014f2:	2b00      	cmp	r3, #0
  4014f4:	d035      	beq.n	401562 <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  4014f6:	2300      	movs	r3, #0
  4014f8:	4a39      	ldr	r2, [pc, #228]	; (4015e0 <UDP_Handler+0x250>)
  4014fa:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4014fc:	4a39      	ldr	r2, [pc, #228]	; (4015e4 <UDP_Handler+0x254>)
  4014fe:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401500:	2201      	movs	r2, #1
  401502:	4b30      	ldr	r3, [pc, #192]	; (4015c4 <UDP_Handler+0x234>)
  401504:	701a      	strb	r2, [r3, #0]
  401506:	e790      	b.n	40142a <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  401508:	4a2a      	ldr	r2, [pc, #168]	; (4015b4 <UDP_Handler+0x224>)
  40150a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40150c:	9303      	str	r3, [sp, #12]
  40150e:	9b03      	ldr	r3, [sp, #12]
  401510:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401514:	9303      	str	r3, [sp, #12]
  401516:	9b03      	ldr	r3, [sp, #12]
  401518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40151c:	9303      	str	r3, [sp, #12]
  40151e:	9b03      	ldr	r3, [sp, #12]
  401520:	6313      	str	r3, [r2, #48]	; 0x30
  401522:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401524:	f013 0f80 	tst.w	r3, #128	; 0x80
  401528:	d0fb      	beq.n	401522 <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  40152a:	4a22      	ldr	r2, [pc, #136]	; (4015b4 <UDP_Handler+0x224>)
  40152c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40152e:	9304      	str	r3, [sp, #16]
  401530:	9b04      	ldr	r3, [sp, #16]
  401532:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401536:	9304      	str	r3, [sp, #16]
  401538:	9b04      	ldr	r3, [sp, #16]
  40153a:	f023 0304 	bic.w	r3, r3, #4
  40153e:	9304      	str	r3, [sp, #16]
  401540:	9b04      	ldr	r3, [sp, #16]
  401542:	6313      	str	r3, [r2, #48]	; 0x30
  401544:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401546:	f013 0f04 	tst.w	r3, #4
  40154a:	d1fb      	bne.n	401544 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  40154c:	2300      	movs	r3, #0
  40154e:	4a24      	ldr	r2, [pc, #144]	; (4015e0 <UDP_Handler+0x250>)
  401550:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401552:	4a24      	ldr	r2, [pc, #144]	; (4015e4 <UDP_Handler+0x254>)
  401554:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401556:	2202      	movs	r2, #2
  401558:	4b1a      	ldr	r3, [pc, #104]	; (4015c4 <UDP_Handler+0x234>)
  40155a:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  40155c:	4b22      	ldr	r3, [pc, #136]	; (4015e8 <UDP_Handler+0x258>)
  40155e:	4798      	blx	r3
  401560:	e763      	b.n	40142a <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  401562:	4b22      	ldr	r3, [pc, #136]	; (4015ec <UDP_Handler+0x25c>)
  401564:	4798      	blx	r3
  401566:	e760      	b.n	40142a <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401568:	4b1f      	ldr	r3, [pc, #124]	; (4015e8 <UDP_Handler+0x258>)
  40156a:	4798      	blx	r3
  40156c:	e75d      	b.n	40142a <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40156e:	4b15      	ldr	r3, [pc, #84]	; (4015c4 <UDP_Handler+0x234>)
  401570:	781b      	ldrb	r3, [r3, #0]
  401572:	2b01      	cmp	r3, #1
  401574:	d03c      	beq.n	4015f0 <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401576:	2b02      	cmp	r3, #2
  401578:	d004      	beq.n	401584 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40157a:	2b04      	cmp	r3, #4
  40157c:	d002      	beq.n	401584 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  40157e:	4b12      	ldr	r3, [pc, #72]	; (4015c8 <UDP_Handler+0x238>)
  401580:	4798      	blx	r3
  401582:	e001      	b.n	401588 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  401584:	4b11      	ldr	r3, [pc, #68]	; (4015cc <UDP_Handler+0x23c>)
  401586:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401588:	4a0a      	ldr	r2, [pc, #40]	; (4015b4 <UDP_Handler+0x224>)
  40158a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40158c:	9306      	str	r3, [sp, #24]
  40158e:	9b06      	ldr	r3, [sp, #24]
  401590:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401594:	9306      	str	r3, [sp, #24]
  401596:	9b06      	ldr	r3, [sp, #24]
  401598:	f023 0302 	bic.w	r3, r3, #2
  40159c:	9306      	str	r3, [sp, #24]
  40159e:	9b06      	ldr	r3, [sp, #24]
  4015a0:	6313      	str	r3, [r2, #48]	; 0x30
  4015a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015a4:	f013 0f02 	tst.w	r3, #2
  4015a8:	d1fb      	bne.n	4015a2 <UDP_Handler+0x212>
		udd_ctrl_init();
  4015aa:	4b09      	ldr	r3, [pc, #36]	; (4015d0 <UDP_Handler+0x240>)
  4015ac:	4798      	blx	r3
  4015ae:	e73c      	b.n	40142a <UDP_Handler+0x9a>
  4015b0:	00403155 	.word	0x00403155
  4015b4:	40034000 	.word	0x40034000
  4015b8:	00402ff5 	.word	0x00402ff5
  4015bc:	200000a0 	.word	0x200000a0
  4015c0:	004007d1 	.word	0x004007d1
  4015c4:	200006ce 	.word	0x200006ce
  4015c8:	00400e91 	.word	0x00400e91
  4015cc:	00400f01 	.word	0x00400f01
  4015d0:	00400e79 	.word	0x00400e79
  4015d4:	20000f2b 	.word	0x20000f2b
  4015d8:	00400811 	.word	0x00400811
  4015dc:	20000f2c 	.word	0x20000f2c
  4015e0:	200006cc 	.word	0x200006cc
  4015e4:	200006ca 	.word	0x200006ca
  4015e8:	00400f11 	.word	0x00400f11
  4015ec:	00400ec9 	.word	0x00400ec9
	nb_data = udd_byte_count(0);
  4015f0:	4b93      	ldr	r3, [pc, #588]	; (401840 <UDP_Handler+0x4b0>)
  4015f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4015f4:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4015f8:	4b92      	ldr	r3, [pc, #584]	; (401844 <UDP_Handler+0x4b4>)
  4015fa:	899b      	ldrh	r3, [r3, #12]
  4015fc:	4a92      	ldr	r2, [pc, #584]	; (401848 <UDP_Handler+0x4b8>)
  4015fe:	8815      	ldrh	r5, [r2, #0]
  401600:	186a      	adds	r2, r5, r1
  401602:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  401604:	bfbc      	itt	lt
  401606:	1b5b      	sublt	r3, r3, r5
  401608:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40160a:	4b8e      	ldr	r3, [pc, #568]	; (401844 <UDP_Handler+0x4b4>)
  40160c:	6898      	ldr	r0, [r3, #8]
  40160e:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401610:	b171      	cbz	r1, 401630 <UDP_Handler+0x2a0>
  401612:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401614:	4c8a      	ldr	r4, [pc, #552]	; (401840 <UDP_Handler+0x4b0>)
  401616:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401618:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  40161c:	1a13      	subs	r3, r2, r0
  40161e:	b2db      	uxtb	r3, r3
  401620:	428b      	cmp	r3, r1
  401622:	d3f8      	bcc.n	401616 <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  401624:	440d      	add	r5, r1
  401626:	b2ad      	uxth	r5, r5
  401628:	4b87      	ldr	r3, [pc, #540]	; (401848 <UDP_Handler+0x4b8>)
  40162a:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  40162c:	2940      	cmp	r1, #64	; 0x40
  40162e:	d01a      	beq.n	401666 <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401630:	4b84      	ldr	r3, [pc, #528]	; (401844 <UDP_Handler+0x4b4>)
  401632:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401634:	695b      	ldr	r3, [r3, #20]
  401636:	b113      	cbz	r3, 40163e <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  401638:	4798      	blx	r3
  40163a:	2800      	cmp	r0, #0
  40163c:	d030      	beq.n	4016a0 <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  40163e:	4a80      	ldr	r2, [pc, #512]	; (401840 <UDP_Handler+0x4b0>)
  401640:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401642:	9308      	str	r3, [sp, #32]
  401644:	9b08      	ldr	r3, [sp, #32]
  401646:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40164a:	9308      	str	r3, [sp, #32]
  40164c:	9b08      	ldr	r3, [sp, #32]
  40164e:	f023 0302 	bic.w	r3, r3, #2
  401652:	9308      	str	r3, [sp, #32]
  401654:	9b08      	ldr	r3, [sp, #32]
  401656:	6313      	str	r3, [r2, #48]	; 0x30
  401658:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40165a:	f013 0f02 	tst.w	r3, #2
  40165e:	d1fb      	bne.n	401658 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  401660:	4b7a      	ldr	r3, [pc, #488]	; (40184c <UDP_Handler+0x4bc>)
  401662:	4798      	blx	r3
  401664:	e6e1      	b.n	40142a <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  401666:	4b77      	ldr	r3, [pc, #476]	; (401844 <UDP_Handler+0x4b4>)
  401668:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  40166a:	4b79      	ldr	r3, [pc, #484]	; (401850 <UDP_Handler+0x4c0>)
  40166c:	881b      	ldrh	r3, [r3, #0]
  40166e:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  401670:	429a      	cmp	r2, r3
  401672:	dddd      	ble.n	401630 <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401674:	4b73      	ldr	r3, [pc, #460]	; (401844 <UDP_Handler+0x4b4>)
  401676:	899b      	ldrh	r3, [r3, #12]
  401678:	42ab      	cmp	r3, r5
  40167a:	d025      	beq.n	4016c8 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  40167c:	4a70      	ldr	r2, [pc, #448]	; (401840 <UDP_Handler+0x4b0>)
  40167e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401680:	930b      	str	r3, [sp, #44]	; 0x2c
  401682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401684:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401688:	930b      	str	r3, [sp, #44]	; 0x2c
  40168a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40168c:	f023 0302 	bic.w	r3, r3, #2
  401690:	930b      	str	r3, [sp, #44]	; 0x2c
  401692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401694:	6313      	str	r3, [r2, #48]	; 0x30
  401696:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401698:	f013 0f02 	tst.w	r3, #2
  40169c:	d1fb      	bne.n	401696 <UDP_Handler+0x306>
  40169e:	e6c4      	b.n	40142a <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  4016a0:	4b6c      	ldr	r3, [pc, #432]	; (401854 <UDP_Handler+0x4c4>)
  4016a2:	4798      	blx	r3
				udd_ack_bank0_received(0);
  4016a4:	4a66      	ldr	r2, [pc, #408]	; (401840 <UDP_Handler+0x4b0>)
  4016a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016a8:	9307      	str	r3, [sp, #28]
  4016aa:	9b07      	ldr	r3, [sp, #28]
  4016ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016b0:	9307      	str	r3, [sp, #28]
  4016b2:	9b07      	ldr	r3, [sp, #28]
  4016b4:	f023 0302 	bic.w	r3, r3, #2
  4016b8:	9307      	str	r3, [sp, #28]
  4016ba:	9b07      	ldr	r3, [sp, #28]
  4016bc:	6313      	str	r3, [r2, #48]	; 0x30
  4016be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016c0:	f013 0f02 	tst.w	r3, #2
  4016c4:	d1fb      	bne.n	4016be <UDP_Handler+0x32e>
  4016c6:	e6b0      	b.n	40142a <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  4016c8:	4b5e      	ldr	r3, [pc, #376]	; (401844 <UDP_Handler+0x4b4>)
  4016ca:	695b      	ldr	r3, [r3, #20]
  4016cc:	b153      	cbz	r3, 4016e4 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  4016ce:	4798      	blx	r3
  4016d0:	b1e8      	cbz	r0, 40170e <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4016d2:	495f      	ldr	r1, [pc, #380]	; (401850 <UDP_Handler+0x4c0>)
  4016d4:	4a5c      	ldr	r2, [pc, #368]	; (401848 <UDP_Handler+0x4b8>)
  4016d6:	880b      	ldrh	r3, [r1, #0]
  4016d8:	8810      	ldrh	r0, [r2, #0]
  4016da:	4403      	add	r3, r0
  4016dc:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  4016de:	2300      	movs	r3, #0
  4016e0:	8013      	strh	r3, [r2, #0]
  4016e2:	e7cb      	b.n	40167c <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  4016e4:	4b5b      	ldr	r3, [pc, #364]	; (401854 <UDP_Handler+0x4c4>)
  4016e6:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4016e8:	4a55      	ldr	r2, [pc, #340]	; (401840 <UDP_Handler+0x4b0>)
  4016ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016ec:	9309      	str	r3, [sp, #36]	; 0x24
  4016ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4016f0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016f4:	9309      	str	r3, [sp, #36]	; 0x24
  4016f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4016f8:	f023 0302 	bic.w	r3, r3, #2
  4016fc:	9309      	str	r3, [sp, #36]	; 0x24
  4016fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401700:	6313      	str	r3, [r2, #48]	; 0x30
  401702:	4613      	mov	r3, r2
  401704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401706:	f012 0f02 	tst.w	r2, #2
  40170a:	d1fb      	bne.n	401704 <UDP_Handler+0x374>
  40170c:	e68d      	b.n	40142a <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  40170e:	4b51      	ldr	r3, [pc, #324]	; (401854 <UDP_Handler+0x4c4>)
  401710:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401712:	4a4b      	ldr	r2, [pc, #300]	; (401840 <UDP_Handler+0x4b0>)
  401714:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401716:	930a      	str	r3, [sp, #40]	; 0x28
  401718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40171a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40171e:	930a      	str	r3, [sp, #40]	; 0x28
  401720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401722:	f023 0302 	bic.w	r3, r3, #2
  401726:	930a      	str	r3, [sp, #40]	; 0x28
  401728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40172a:	6313      	str	r3, [r2, #48]	; 0x30
  40172c:	4613      	mov	r3, r2
  40172e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401730:	f012 0f02 	tst.w	r2, #2
  401734:	d1fb      	bne.n	40172e <UDP_Handler+0x39e>
  401736:	e678      	b.n	40142a <UDP_Handler+0x9a>
  401738:	4a47      	ldr	r2, [pc, #284]	; (401858 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  40173a:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40173c:	f8df e100 	ldr.w	lr, [pc, #256]	; 401840 <UDP_Handler+0x4b0>
  401740:	4618      	mov	r0, r3
  401742:	e17f      	b.n	401a44 <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  401744:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401748:	4b43      	ldr	r3, [pc, #268]	; (401858 <UDP_Handler+0x4c8>)
  40174a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40174e:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  401752:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401756:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401758:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  40175c:	f1b9 0f00 	cmp.w	r9, #0
  401760:	f000 81df 	beq.w	401b22 <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401764:	4b3c      	ldr	r3, [pc, #240]	; (401858 <UDP_Handler+0x4c8>)
  401766:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40176a:	f8d3 e008 	ldr.w	lr, [r3, #8]
  40176e:	68da      	ldr	r2, [r3, #12]
  401770:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401774:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401776:	4548      	cmp	r0, r9
  401778:	f240 81c7 	bls.w	401b0a <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  40177c:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  401780:	4b35      	ldr	r3, [pc, #212]	; (401858 <UDP_Handler+0x4c8>)
  401782:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401786:	eb02 0009 	add.w	r0, r2, r9
  40178a:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  40178c:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  40178e:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401792:	4411      	add	r1, r2
  401794:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401796:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401798:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  40179c:	1a5a      	subs	r2, r3, r1
  40179e:	4282      	cmp	r2, r0
  4017a0:	d3f9      	bcc.n	401796 <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  4017a2:	4630      	mov	r0, r6
  4017a4:	4b2d      	ldr	r3, [pc, #180]	; (40185c <UDP_Handler+0x4cc>)
  4017a6:	4798      	blx	r3
	if ((b_full || b_short) &&
  4017a8:	f1bb 0f00 	cmp.w	fp, #0
  4017ac:	f000 81bc 	beq.w	401b28 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  4017b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  4017b2:	f013 0f20 	tst.w	r3, #32
  4017b6:	f47f ae38 	bne.w	40142a <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  4017ba:	4b21      	ldr	r3, [pc, #132]	; (401840 <UDP_Handler+0x4b0>)
  4017bc:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4017be:	4b26      	ldr	r3, [pc, #152]	; (401858 <UDP_Handler+0x4c8>)
  4017c0:	00ba      	lsls	r2, r7, #2
  4017c2:	19d1      	adds	r1, r2, r7
  4017c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4017c8:	68cb      	ldr	r3, [r1, #12]
  4017ca:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4017cc:	4632      	mov	r2, r6
  4017ce:	2100      	movs	r1, #0
  4017d0:	4640      	mov	r0, r8
  4017d2:	4b23      	ldr	r3, [pc, #140]	; (401860 <UDP_Handler+0x4d0>)
  4017d4:	4798      	blx	r3
  4017d6:	e628      	b.n	40142a <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  4017d8:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4017dc:	4b1e      	ldr	r3, [pc, #120]	; (401858 <UDP_Handler+0x4c8>)
  4017de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4017e2:	7c53      	ldrb	r3, [r2, #17]
  4017e4:	f3c3 0181 	ubfx	r1, r3, #2, #2
  4017e8:	3103      	adds	r1, #3
  4017ea:	f361 0383 	bfi	r3, r1, #2, #2
  4017ee:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4017f0:	7c53      	ldrb	r3, [r2, #17]
  4017f2:	f013 0f20 	tst.w	r3, #32
  4017f6:	d05f      	beq.n	4018b8 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  4017f8:	f013 0f0c 	tst.w	r3, #12
  4017fc:	d032      	beq.n	401864 <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  4017fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401800:	930c      	str	r3, [sp, #48]	; 0x30
  401802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401804:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401808:	930c      	str	r3, [sp, #48]	; 0x30
  40180a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40180c:	f043 0310 	orr.w	r3, r3, #16
  401810:	930c      	str	r3, [sp, #48]	; 0x30
  401812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401814:	6323      	str	r3, [r4, #48]	; 0x30
  401816:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401818:	f013 0f10 	tst.w	r3, #16
  40181c:	d0fb      	beq.n	401816 <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  40181e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401820:	930d      	str	r3, [sp, #52]	; 0x34
  401822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401824:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401828:	930d      	str	r3, [sp, #52]	; 0x34
  40182a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40182c:	f023 0301 	bic.w	r3, r3, #1
  401830:	930d      	str	r3, [sp, #52]	; 0x34
  401832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401834:	6323      	str	r3, [r4, #48]	; 0x30
  401836:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401838:	f013 0f01 	tst.w	r3, #1
  40183c:	d1fb      	bne.n	401836 <UDP_Handler+0x4a6>
  40183e:	e5f4      	b.n	40142a <UDP_Handler+0x9a>
  401840:	40034000 	.word	0x40034000
  401844:	20000f2c 	.word	0x20000f2c
  401848:	200006ca 	.word	0x200006ca
  40184c:	00400ec9 	.word	0x00400ec9
  401850:	200006cc 	.word	0x200006cc
  401854:	00400e91 	.word	0x00400e91
  401858:	200006d0 	.word	0x200006d0
  40185c:	00401109 	.word	0x00401109
  401860:	004010c9 	.word	0x004010c9
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401864:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401866:	930e      	str	r3, [sp, #56]	; 0x38
  401868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40186a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40186e:	930e      	str	r3, [sp, #56]	; 0x38
  401870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401872:	f023 0301 	bic.w	r3, r3, #1
  401876:	930e      	str	r3, [sp, #56]	; 0x38
  401878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40187a:	6323      	str	r3, [r4, #48]	; 0x30
  40187c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40187e:	f013 0f01 	tst.w	r3, #1
  401882:	d1fb      	bne.n	40187c <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401884:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401886:	930f      	str	r3, [sp, #60]	; 0x3c
  401888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40188a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40188e:	930f      	str	r3, [sp, #60]	; 0x3c
  401890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401892:	f043 0320 	orr.w	r3, r3, #32
  401896:	930f      	str	r3, [sp, #60]	; 0x3c
  401898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40189a:	6323      	str	r3, [r4, #48]	; 0x30
  40189c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40189e:	f013 0f20 	tst.w	r3, #32
  4018a2:	d0fb      	beq.n	40189c <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  4018a4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4018a8:	4ba1      	ldr	r3, [pc, #644]	; (401b30 <UDP_Handler+0x7a0>)
  4018aa:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  4018ae:	7c5a      	ldrb	r2, [r3, #17]
  4018b0:	f36f 1245 	bfc	r2, #5, #1
  4018b4:	745a      	strb	r2, [r3, #17]
  4018b6:	e5b8      	b.n	40142a <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  4018b8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4018bc:	d138      	bne.n	401930 <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4018be:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4018c2:	4b9b      	ldr	r3, [pc, #620]	; (401b30 <UDP_Handler+0x7a0>)
  4018c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4018c8:	68da      	ldr	r2, [r3, #12]
  4018ca:	689b      	ldr	r3, [r3, #8]
  4018cc:	429a      	cmp	r2, r3
  4018ce:	d341      	bcc.n	401954 <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  4018d0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4018d4:	4b96      	ldr	r3, [pc, #600]	; (401b30 <UDP_Handler+0x7a0>)
  4018d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4018da:	7c5b      	ldrb	r3, [r3, #17]
  4018dc:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  4018e0:	d138      	bne.n	401954 <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4018e2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4018e6:	fab3 f383 	clz	r3, r3
  4018ea:	095b      	lsrs	r3, r3, #5
  4018ec:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  4018ee:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4018f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4018f4:	2200      	movs	r2, #0
  4018f6:	4b8f      	ldr	r3, [pc, #572]	; (401b34 <UDP_Handler+0x7a4>)
  4018f8:	701a      	strb	r2, [r3, #0]
	return flags;
  4018fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  4018fc:	4a8e      	ldr	r2, [pc, #568]	; (401b38 <UDP_Handler+0x7a8>)
  4018fe:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  401900:	b12b      	cbz	r3, 40190e <UDP_Handler+0x57e>
		cpu_irq_enable();
  401902:	2201      	movs	r2, #1
  401904:	4b8b      	ldr	r3, [pc, #556]	; (401b34 <UDP_Handler+0x7a4>)
  401906:	701a      	strb	r2, [r3, #0]
  401908:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40190c:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  40190e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401910:	9311      	str	r3, [sp, #68]	; 0x44
  401912:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401914:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401918:	9311      	str	r3, [sp, #68]	; 0x44
  40191a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40191c:	f023 0301 	bic.w	r3, r3, #1
  401920:	9311      	str	r3, [sp, #68]	; 0x44
  401922:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401924:	6323      	str	r3, [r4, #48]	; 0x30
  401926:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401928:	f013 0f01 	tst.w	r3, #1
  40192c:	d1fb      	bne.n	401926 <UDP_Handler+0x596>
  40192e:	e57c      	b.n	40142a <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  401930:	2314      	movs	r3, #20
  401932:	4a7f      	ldr	r2, [pc, #508]	; (401b30 <UDP_Handler+0x7a0>)
  401934:	fb03 2307 	mla	r3, r3, r7, r2
  401938:	7c59      	ldrb	r1, [r3, #17]
  40193a:	f36f 11c7 	bfc	r1, #7, #1
  40193e:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401940:	68da      	ldr	r2, [r3, #12]
  401942:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401944:	4b7c      	ldr	r3, [pc, #496]	; (401b38 <UDP_Handler+0x7a8>)
  401946:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401948:	4632      	mov	r2, r6
  40194a:	2100      	movs	r1, #0
  40194c:	4640      	mov	r0, r8
  40194e:	4b7b      	ldr	r3, [pc, #492]	; (401b3c <UDP_Handler+0x7ac>)
  401950:	4798      	blx	r3
  401952:	e7b4      	b.n	4018be <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401954:	2e00      	cmp	r6, #0
  401956:	d05b      	beq.n	401a10 <UDP_Handler+0x680>
  401958:	2e03      	cmp	r6, #3
  40195a:	d059      	beq.n	401a10 <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  40195c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401960:	4b73      	ldr	r3, [pc, #460]	; (401b30 <UDP_Handler+0x7a0>)
  401962:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401966:	7c5b      	ldrb	r3, [r3, #17]
  401968:	f013 0f0c 	tst.w	r3, #12
  40196c:	d024      	beq.n	4019b8 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  40196e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401970:	9312      	str	r3, [sp, #72]	; 0x48
  401972:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401974:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401978:	9312      	str	r3, [sp, #72]	; 0x48
  40197a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40197c:	f043 0310 	orr.w	r3, r3, #16
  401980:	9312      	str	r3, [sp, #72]	; 0x48
  401982:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401984:	6323      	str	r3, [r4, #48]	; 0x30
  401986:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401988:	f013 0f10 	tst.w	r3, #16
  40198c:	d0fb      	beq.n	401986 <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  40198e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401990:	9313      	str	r3, [sp, #76]	; 0x4c
  401992:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401994:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401998:	9313      	str	r3, [sp, #76]	; 0x4c
  40199a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40199c:	f023 0301 	bic.w	r3, r3, #1
  4019a0:	9313      	str	r3, [sp, #76]	; 0x4c
  4019a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4019a4:	6323      	str	r3, [r4, #48]	; 0x30
  4019a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019a8:	f013 0f01 	tst.w	r3, #1
  4019ac:	d1fb      	bne.n	4019a6 <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  4019ae:	2100      	movs	r1, #0
  4019b0:	4630      	mov	r0, r6
  4019b2:	4b63      	ldr	r3, [pc, #396]	; (401b40 <UDP_Handler+0x7b0>)
  4019b4:	4798      	blx	r3
  4019b6:	e538      	b.n	40142a <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  4019b8:	2101      	movs	r1, #1
  4019ba:	4630      	mov	r0, r6
  4019bc:	4b60      	ldr	r3, [pc, #384]	; (401b40 <UDP_Handler+0x7b0>)
  4019be:	4798      	blx	r3
  4019c0:	b1a0      	cbz	r0, 4019ec <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  4019c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019c4:	9314      	str	r3, [sp, #80]	; 0x50
  4019c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4019c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019cc:	9314      	str	r3, [sp, #80]	; 0x50
  4019ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4019d0:	f023 0301 	bic.w	r3, r3, #1
  4019d4:	9314      	str	r3, [sp, #80]	; 0x50
  4019d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4019d8:	6323      	str	r3, [r4, #48]	; 0x30
  4019da:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019dc:	f013 0f01 	tst.w	r3, #1
  4019e0:	d1fb      	bne.n	4019da <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  4019e2:	2100      	movs	r1, #0
  4019e4:	4630      	mov	r0, r6
  4019e6:	4b56      	ldr	r3, [pc, #344]	; (401b40 <UDP_Handler+0x7b0>)
  4019e8:	4798      	blx	r3
  4019ea:	e51e      	b.n	40142a <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  4019ec:	2314      	movs	r3, #20
  4019ee:	4a50      	ldr	r2, [pc, #320]	; (401b30 <UDP_Handler+0x7a0>)
  4019f0:	fb03 2707 	mla	r7, r3, r7, r2
  4019f4:	7c7a      	ldrb	r2, [r7, #17]
  4019f6:	f36f 12c7 	bfc	r2, #7, #1
  4019fa:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4019fc:	68fb      	ldr	r3, [r7, #12]
  4019fe:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  401a00:	4b4d      	ldr	r3, [pc, #308]	; (401b38 <UDP_Handler+0x7a8>)
  401a02:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401a04:	4632      	mov	r2, r6
  401a06:	2100      	movs	r1, #0
  401a08:	4640      	mov	r0, r8
  401a0a:	4b4c      	ldr	r3, [pc, #304]	; (401b3c <UDP_Handler+0x7ac>)
  401a0c:	4798      	blx	r3
  401a0e:	e7d8      	b.n	4019c2 <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401a10:	2101      	movs	r1, #1
  401a12:	4630      	mov	r0, r6
  401a14:	4b4a      	ldr	r3, [pc, #296]	; (401b40 <UDP_Handler+0x7b0>)
  401a16:	4798      	blx	r3
				udd_ack_in_sent(ep);
  401a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a1a:	9315      	str	r3, [sp, #84]	; 0x54
  401a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401a1e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a22:	9315      	str	r3, [sp, #84]	; 0x54
  401a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401a26:	f023 0301 	bic.w	r3, r3, #1
  401a2a:	9315      	str	r3, [sp, #84]	; 0x54
  401a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401a2e:	6323      	str	r3, [r4, #48]	; 0x30
  401a30:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a32:	f013 0f01 	tst.w	r3, #1
  401a36:	d1fb      	bne.n	401a30 <UDP_Handler+0x6a0>
  401a38:	e4f7      	b.n	40142a <UDP_Handler+0x9a>
  401a3a:	3301      	adds	r3, #1
  401a3c:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401a3e:	2b04      	cmp	r3, #4
  401a40:	f000 8086 	beq.w	401b50 <UDP_Handler+0x7c0>
  401a44:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401a46:	f8de 1018 	ldr.w	r1, [lr, #24]
  401a4a:	fa00 f503 	lsl.w	r5, r0, r3
  401a4e:	4229      	tst	r1, r5
  401a50:	d0f3      	beq.n	401a3a <UDP_Handler+0x6aa>
  401a52:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401a54:	4690      	mov	r8, r2
  401a56:	009c      	lsls	r4, r3, #2
  401a58:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401a5c:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  401a60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401a62:	f011 0f42 	tst.w	r1, #66	; 0x42
  401a66:	f47f ae6d 	bne.w	401744 <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401a6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401a6c:	f011 0f01 	tst.w	r1, #1
  401a70:	f47f aeb2 	bne.w	4017d8 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401a74:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401a76:	f011 0f08 	tst.w	r1, #8
  401a7a:	d0de      	beq.n	401a3a <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401a7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a7e:	9316      	str	r3, [sp, #88]	; 0x58
  401a80:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401a82:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a86:	9316      	str	r3, [sp, #88]	; 0x58
  401a88:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401a8a:	f023 0308 	bic.w	r3, r3, #8
  401a8e:	9316      	str	r3, [sp, #88]	; 0x58
  401a90:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401a92:	6323      	str	r3, [r4, #48]	; 0x30
  401a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a96:	f013 0f08 	tst.w	r3, #8
  401a9a:	d1fb      	bne.n	401a94 <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401aa6:	f43f acc0 	beq.w	40142a <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401aaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401aac:	e4bd      	b.n	40142a <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401aae:	4b22      	ldr	r3, [pc, #136]	; (401b38 <UDP_Handler+0x7a8>)
  401ab0:	69db      	ldr	r3, [r3, #28]
  401ab2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401ab6:	d050      	beq.n	401b5a <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401ab8:	4c1f      	ldr	r4, [pc, #124]	; (401b38 <UDP_Handler+0x7a8>)
  401aba:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  401abe:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  401ac0:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  401ac2:	2001      	movs	r0, #1
  401ac4:	4b1f      	ldr	r3, [pc, #124]	; (401b44 <UDP_Handler+0x7b4>)
  401ac6:	4798      	blx	r3
		udd_ack_suspend();
  401ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
  401acc:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401ace:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401ad4:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401ad6:	e4a8      	b.n	40142a <UDP_Handler+0x9a>
		udd_ack_suspend();
  401ad8:	4b17      	ldr	r3, [pc, #92]	; (401b38 <UDP_Handler+0x7a8>)
  401ada:	f44f 7280 	mov.w	r2, #256	; 0x100
  401ade:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401ae0:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401ae6:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
  401aec:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401af2:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401af4:	2022      	movs	r0, #34	; 0x22
  401af6:	4b14      	ldr	r3, [pc, #80]	; (401b48 <UDP_Handler+0x7b8>)
  401af8:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  401afa:	2000      	movs	r0, #0
  401afc:	4b11      	ldr	r3, [pc, #68]	; (401b44 <UDP_Handler+0x7b4>)
  401afe:	4798      	blx	r3
		goto udd_interrupt_end;
  401b00:	e493      	b.n	40142a <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  401b02:	4630      	mov	r0, r6
  401b04:	4b11      	ldr	r3, [pc, #68]	; (401b4c <UDP_Handler+0x7bc>)
  401b06:	4798      	blx	r3
  401b08:	e652      	b.n	4017b0 <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  401b0a:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  401b0e:	4b08      	ldr	r3, [pc, #32]	; (401b30 <UDP_Handler+0x7a0>)
  401b10:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  401b14:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  401b18:	2800      	cmp	r0, #0
  401b1a:	d0f2      	beq.n	401b02 <UDP_Handler+0x772>
			b_full = true;
  401b1c:	f04f 0b01 	mov.w	fp, #1
  401b20:	e637      	b.n	401792 <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  401b22:	4630      	mov	r0, r6
  401b24:	4b09      	ldr	r3, [pc, #36]	; (401b4c <UDP_Handler+0x7bc>)
  401b26:	4798      	blx	r3
	if ((b_full || b_short) &&
  401b28:	45ca      	cmp	sl, r9
  401b2a:	f63f ae41 	bhi.w	4017b0 <UDP_Handler+0x420>
  401b2e:	e47c      	b.n	40142a <UDP_Handler+0x9a>
  401b30:	200006d0 	.word	0x200006d0
  401b34:	200000a0 	.word	0x200000a0
  401b38:	40034000 	.word	0x40034000
  401b3c:	004010c9 	.word	0x004010c9
  401b40:	004011dd 	.word	0x004011dd
  401b44:	00400dd5 	.word	0x00400dd5
  401b48:	00403049 	.word	0x00403049
  401b4c:	00401109 	.word	0x00401109
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401b50:	4b4b      	ldr	r3, [pc, #300]	; (401c80 <UDP_Handler+0x8f0>)
  401b52:	699b      	ldr	r3, [r3, #24]
  401b54:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401b58:	d1a9      	bne.n	401aae <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401b5a:	4b49      	ldr	r3, [pc, #292]	; (401c80 <UDP_Handler+0x8f0>)
  401b5c:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401b5e:	f413 7f00 	tst.w	r3, #512	; 0x200
  401b62:	d004      	beq.n	401b6e <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401b64:	4b46      	ldr	r3, [pc, #280]	; (401c80 <UDP_Handler+0x8f0>)
  401b66:	69db      	ldr	r3, [r3, #28]
  401b68:	f413 7f00 	tst.w	r3, #512	; 0x200
  401b6c:	d1a4      	bne.n	401ab8 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401b6e:	4b44      	ldr	r3, [pc, #272]	; (401c80 <UDP_Handler+0x8f0>)
  401b70:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401b72:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b76:	d004      	beq.n	401b82 <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401b78:	4b41      	ldr	r3, [pc, #260]	; (401c80 <UDP_Handler+0x8f0>)
  401b7a:	69db      	ldr	r3, [r3, #28]
  401b7c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401b80:	d19a      	bne.n	401ab8 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401b82:	4b3f      	ldr	r3, [pc, #252]	; (401c80 <UDP_Handler+0x8f0>)
  401b84:	699b      	ldr	r3, [r3, #24]
  401b86:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b8a:	d004      	beq.n	401b96 <UDP_Handler+0x806>
  401b8c:	4b3c      	ldr	r3, [pc, #240]	; (401c80 <UDP_Handler+0x8f0>)
  401b8e:	69db      	ldr	r3, [r3, #28]
  401b90:	f413 7f80 	tst.w	r3, #256	; 0x100
  401b94:	d1a0      	bne.n	401ad8 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401b96:	4b3a      	ldr	r3, [pc, #232]	; (401c80 <UDP_Handler+0x8f0>)
  401b98:	69db      	ldr	r3, [r3, #28]
  401b9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401b9e:	f43f ac44 	beq.w	40142a <UDP_Handler+0x9a>
		udd_ack_reset();
  401ba2:	4c37      	ldr	r4, [pc, #220]	; (401c80 <UDP_Handler+0x8f0>)
  401ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401ba8:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401baa:	4e36      	ldr	r6, [pc, #216]	; (401c84 <UDP_Handler+0x8f4>)
  401bac:	2201      	movs	r2, #1
  401bae:	4611      	mov	r1, r2
  401bb0:	4630      	mov	r0, r6
  401bb2:	4d35      	ldr	r5, [pc, #212]	; (401c88 <UDP_Handler+0x8f8>)
  401bb4:	47a8      	blx	r5
  401bb6:	2202      	movs	r2, #2
  401bb8:	2101      	movs	r1, #1
  401bba:	f106 0014 	add.w	r0, r6, #20
  401bbe:	47a8      	blx	r5
  401bc0:	2203      	movs	r2, #3
  401bc2:	2101      	movs	r1, #1
  401bc4:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401bc8:	47a8      	blx	r5
		udc_reset();
  401bca:	4b30      	ldr	r3, [pc, #192]	; (401c8c <UDP_Handler+0x8fc>)
  401bcc:	4798      	blx	r3
		udd_disable_address_state();
  401bce:	6863      	ldr	r3, [r4, #4]
  401bd0:	f023 0301 	bic.w	r3, r3, #1
  401bd4:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401bd6:	6863      	ldr	r3, [r4, #4]
  401bd8:	f023 0302 	bic.w	r3, r3, #2
  401bdc:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401bde:	68a3      	ldr	r3, [r4, #8]
  401be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401be4:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401be6:	68a3      	ldr	r3, [r4, #8]
  401be8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401bec:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bf0:	9318      	str	r3, [sp, #96]	; 0x60
  401bf2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401bf4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bf8:	9318      	str	r3, [sp, #96]	; 0x60
  401bfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401bfc:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401c04:	9318      	str	r3, [sp, #96]	; 0x60
  401c06:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401c0c:	9318      	str	r3, [sp, #96]	; 0x60
  401c0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401c10:	6323      	str	r3, [r4, #48]	; 0x30
  401c12:	4622      	mov	r2, r4
  401c14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401c1a:	d0fb      	beq.n	401c14 <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401c1c:	4a18      	ldr	r2, [pc, #96]	; (401c80 <UDP_Handler+0x8f0>)
  401c1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c20:	9319      	str	r3, [sp, #100]	; 0x64
  401c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401c24:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c28:	9319      	str	r3, [sp, #100]	; 0x64
  401c2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401c30:	9319      	str	r3, [sp, #100]	; 0x64
  401c32:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401c34:	6313      	str	r3, [r2, #48]	; 0x30
  401c36:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c38:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401c3c:	d0fb      	beq.n	401c36 <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401c3e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c42:	fab3 f383 	clz	r3, r3
  401c46:	095b      	lsrs	r3, r3, #5
  401c48:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401c4a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401c4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c50:	2200      	movs	r2, #0
  401c52:	4b0f      	ldr	r3, [pc, #60]	; (401c90 <UDP_Handler+0x900>)
  401c54:	701a      	strb	r2, [r3, #0]
	return flags;
  401c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401c58:	2101      	movs	r1, #1
  401c5a:	4a09      	ldr	r2, [pc, #36]	; (401c80 <UDP_Handler+0x8f0>)
  401c5c:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401c5e:	b123      	cbz	r3, 401c6a <UDP_Handler+0x8da>
		cpu_irq_enable();
  401c60:	4b0b      	ldr	r3, [pc, #44]	; (401c90 <UDP_Handler+0x900>)
  401c62:	7019      	strb	r1, [r3, #0]
  401c64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401c68:	b662      	cpsie	i
		udd_ctrl_init();
  401c6a:	4b0a      	ldr	r3, [pc, #40]	; (401c94 <UDP_Handler+0x904>)
  401c6c:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401c6e:	4b04      	ldr	r3, [pc, #16]	; (401c80 <UDP_Handler+0x8f0>)
  401c70:	f44f 7280 	mov.w	r2, #256	; 0x100
  401c74:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401c7a:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401c7c:	f7ff bbd5 	b.w	40142a <UDP_Handler+0x9a>
  401c80:	40034000 	.word	0x40034000
  401c84:	200006d0 	.word	0x200006d0
  401c88:	004010c9 	.word	0x004010c9
  401c8c:	00400789 	.word	0x00400789
  401c90:	200000a0 	.word	0x200000a0
  401c94:	00400e79 	.word	0x00400e79

00401c98 <udd_attach>:
{
  401c98:	b510      	push	{r4, lr}
  401c9a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401c9c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ca0:	fab3 f383 	clz	r3, r3
  401ca4:	095b      	lsrs	r3, r3, #5
  401ca6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401ca8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401caa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401cae:	2200      	movs	r2, #0
  401cb0:	4b14      	ldr	r3, [pc, #80]	; (401d04 <udd_attach+0x6c>)
  401cb2:	701a      	strb	r2, [r3, #0]
	return flags;
  401cb4:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  401cb6:	2001      	movs	r0, #1
  401cb8:	4b13      	ldr	r3, [pc, #76]	; (401d08 <udd_attach+0x70>)
  401cba:	4798      	blx	r3
	udd_enable_periph_ck();
  401cbc:	2022      	movs	r0, #34	; 0x22
  401cbe:	4b13      	ldr	r3, [pc, #76]	; (401d0c <udd_attach+0x74>)
  401cc0:	4798      	blx	r3
	udd_enable_transceiver();
  401cc2:	4b13      	ldr	r3, [pc, #76]	; (401d10 <udd_attach+0x78>)
  401cc4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401cca:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401ccc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401cd2:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  401cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
  401cd8:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401cde:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
  401ce4:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401cea:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401cf0:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401cf2:	b12c      	cbz	r4, 401d00 <udd_attach+0x68>
		cpu_irq_enable();
  401cf4:	2201      	movs	r2, #1
  401cf6:	4b03      	ldr	r3, [pc, #12]	; (401d04 <udd_attach+0x6c>)
  401cf8:	701a      	strb	r2, [r3, #0]
  401cfa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401cfe:	b662      	cpsie	i
}
  401d00:	b002      	add	sp, #8
  401d02:	bd10      	pop	{r4, pc}
  401d04:	200000a0 	.word	0x200000a0
  401d08:	00400dd5 	.word	0x00400dd5
  401d0c:	00402ff5 	.word	0x00402ff5
  401d10:	40034000 	.word	0x40034000

00401d14 <udd_enable>:
{
  401d14:	b530      	push	{r4, r5, lr}
  401d16:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401d18:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401d1c:	fab3 f383 	clz	r3, r3
  401d20:	095b      	lsrs	r3, r3, #5
  401d22:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401d24:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401d26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401d2a:	2400      	movs	r4, #0
  401d2c:	4b27      	ldr	r3, [pc, #156]	; (401dcc <udd_enable+0xb8>)
  401d2e:	701c      	strb	r4, [r3, #0]
	return flags;
  401d30:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  401d32:	2022      	movs	r0, #34	; 0x22
  401d34:	4b26      	ldr	r3, [pc, #152]	; (401dd0 <udd_enable+0xbc>)
  401d36:	4798      	blx	r3
	sysclk_enable_usb();
  401d38:	4b26      	ldr	r3, [pc, #152]	; (401dd4 <udd_enable+0xc0>)
  401d3a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401d3c:	4b26      	ldr	r3, [pc, #152]	; (401dd8 <udd_enable+0xc4>)
  401d3e:	2250      	movs	r2, #80	; 0x50
  401d40:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401d44:	2204      	movs	r2, #4
  401d46:	605a      	str	r2, [r3, #4]
  401d48:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  401d4a:	4824      	ldr	r0, [pc, #144]	; (401ddc <udd_enable+0xc8>)
  401d4c:	009a      	lsls	r2, r3, #2
  401d4e:	18d1      	adds	r1, r2, r3
  401d50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401d54:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  401d56:	441a      	add	r2, r3
  401d58:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401d5c:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401d60:	f36f 11c7 	bfc	r1, #7, #1
  401d64:	7451      	strb	r1, [r2, #17]
  401d66:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401d68:	2b03      	cmp	r3, #3
  401d6a:	d1ef      	bne.n	401d4c <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401d6c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401d70:	4b1b      	ldr	r3, [pc, #108]	; (401de0 <udd_enable+0xcc>)
  401d72:	4798      	blx	r3
	udd_b_idle = false;
  401d74:	2200      	movs	r2, #0
  401d76:	4b1b      	ldr	r3, [pc, #108]	; (401de4 <udd_enable+0xd0>)
  401d78:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  401d7a:	4b1b      	ldr	r3, [pc, #108]	; (401de8 <udd_enable+0xd4>)
  401d7c:	781b      	ldrb	r3, [r3, #0]
  401d7e:	2bff      	cmp	r3, #255	; 0xff
  401d80:	d022      	beq.n	401dc8 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401d82:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401d86:	fab3 f383 	clz	r3, r3
  401d8a:	095b      	lsrs	r3, r3, #5
  401d8c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401d8e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401d90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401d94:	2200      	movs	r2, #0
  401d96:	4b0d      	ldr	r3, [pc, #52]	; (401dcc <udd_enable+0xb8>)
  401d98:	701a      	strb	r2, [r3, #0]
	return flags;
  401d9a:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  401d9c:	4a12      	ldr	r2, [pc, #72]	; (401de8 <udd_enable+0xd4>)
  401d9e:	7813      	ldrb	r3, [r2, #0]
  401da0:	3301      	adds	r3, #1
  401da2:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401da4:	b129      	cbz	r1, 401db2 <udd_enable+0x9e>
		cpu_irq_enable();
  401da6:	2201      	movs	r2, #1
  401da8:	4b08      	ldr	r3, [pc, #32]	; (401dcc <udd_enable+0xb8>)
  401daa:	701a      	strb	r2, [r3, #0]
  401dac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401db0:	b662      	cpsie	i
	udd_attach();
  401db2:	4b0e      	ldr	r3, [pc, #56]	; (401dec <udd_enable+0xd8>)
  401db4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  401db6:	b12d      	cbz	r5, 401dc4 <udd_enable+0xb0>
		cpu_irq_enable();
  401db8:	2201      	movs	r2, #1
  401dba:	4b04      	ldr	r3, [pc, #16]	; (401dcc <udd_enable+0xb8>)
  401dbc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401dbe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401dc2:	b662      	cpsie	i
}
  401dc4:	b003      	add	sp, #12
  401dc6:	bd30      	pop	{r4, r5, pc}
  401dc8:	e7fe      	b.n	401dc8 <udd_enable+0xb4>
  401dca:	bf00      	nop
  401dcc:	200000a0 	.word	0x200000a0
  401dd0:	00402ff5 	.word	0x00402ff5
  401dd4:	00402c91 	.word	0x00402c91
  401dd8:	e000e100 	.word	0xe000e100
  401ddc:	200006d0 	.word	0x200006d0
  401de0:	004030bd 	.word	0x004030bd
  401de4:	200006c9 	.word	0x200006c9
  401de8:	20000f24 	.word	0x20000f24
  401dec:	00401c99 	.word	0x00401c99

00401df0 <udd_is_high_speed>:
}
  401df0:	2000      	movs	r0, #0
  401df2:	4770      	bx	lr

00401df4 <udd_set_address>:
	udd_disable_address_state();
  401df4:	4b0d      	ldr	r3, [pc, #52]	; (401e2c <udd_set_address+0x38>)
  401df6:	685a      	ldr	r2, [r3, #4]
  401df8:	f022 0201 	bic.w	r2, r2, #1
  401dfc:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401dfe:	689a      	ldr	r2, [r3, #8]
  401e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401e04:	609a      	str	r2, [r3, #8]
	if (address) {
  401e06:	4602      	mov	r2, r0
  401e08:	b170      	cbz	r0, 401e28 <udd_set_address+0x34>
		udd_configure_address(address);
  401e0a:	6898      	ldr	r0, [r3, #8]
  401e0c:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  401e10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401e14:	4310      	orrs	r0, r2
  401e16:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  401e18:	689a      	ldr	r2, [r3, #8]
  401e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401e1e:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  401e20:	685a      	ldr	r2, [r3, #4]
  401e22:	f042 0201 	orr.w	r2, r2, #1
  401e26:	605a      	str	r2, [r3, #4]
  401e28:	4770      	bx	lr
  401e2a:	bf00      	nop
  401e2c:	40034000 	.word	0x40034000

00401e30 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  401e30:	4b05      	ldr	r3, [pc, #20]	; (401e48 <udd_getaddress+0x18>)
  401e32:	685b      	ldr	r3, [r3, #4]
  401e34:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  401e38:	bf1d      	ittte	ne
  401e3a:	4b03      	ldrne	r3, [pc, #12]	; (401e48 <udd_getaddress+0x18>)
  401e3c:	6898      	ldrne	r0, [r3, #8]
  401e3e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  401e42:	2000      	moveq	r0, #0
}
  401e44:	4770      	bx	lr
  401e46:	bf00      	nop
  401e48:	40034000 	.word	0x40034000

00401e4c <udd_get_frame_number>:
	return udd_frame_number();
  401e4c:	4b02      	ldr	r3, [pc, #8]	; (401e58 <udd_get_frame_number+0xc>)
  401e4e:	6818      	ldr	r0, [r3, #0]
}
  401e50:	f3c0 000a 	ubfx	r0, r0, #0, #11
  401e54:	4770      	bx	lr
  401e56:	bf00      	nop
  401e58:	40034000 	.word	0x40034000

00401e5c <udd_get_micro_frame_number>:
}
  401e5c:	2000      	movs	r0, #0
  401e5e:	4770      	bx	lr

00401e60 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  401e60:	4b01      	ldr	r3, [pc, #4]	; (401e68 <udd_set_setup_payload+0x8>)
  401e62:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  401e64:	8199      	strh	r1, [r3, #12]
  401e66:	4770      	bx	lr
  401e68:	20000f2c 	.word	0x20000f2c

00401e6c <udd_ep_alloc>:
{
  401e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e6e:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  401e70:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  401e74:	2c03      	cmp	r4, #3
  401e76:	d867      	bhi.n	401f48 <udd_ep_alloc+0xdc>
  401e78:	00a3      	lsls	r3, r4, #2
  401e7a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401e7e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  401e82:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  401e84:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401e88:	d161      	bne.n	401f4e <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401e8a:	f001 0503 	and.w	r5, r1, #3
  401e8e:	2d01      	cmp	r5, #1
  401e90:	d050      	beq.n	401f34 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  401e92:	1f25      	subs	r5, r4, #4
  401e94:	b2ed      	uxtb	r5, r5
  401e96:	2d02      	cmp	r5, #2
  401e98:	bf34      	ite	cc
  401e9a:	f44f 7500 	movcc.w	r5, #512	; 0x200
  401e9e:	2540      	movcs	r5, #64	; 0x40
  401ea0:	4295      	cmp	r5, r2
  401ea2:	db58      	blt.n	401f56 <udd_ep_alloc+0xea>
  401ea4:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  401ea6:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  401ea8:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  401eac:	4d2b      	ldr	r5, [pc, #172]	; (401f5c <udd_ep_alloc+0xf0>)
  401eae:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  401eb2:	f105 0710 	add.w	r7, r5, #16
  401eb6:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  401eba:	f362 0e09 	bfi	lr, r2, #0, #10
  401ebe:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  401ec2:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  401ec4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401ec8:	f36f 1245 	bfc	r2, #5, #1
  401ecc:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  401ece:	2800      	cmp	r0, #0
  401ed0:	db35      	blt.n	401f3e <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  401ed2:	4e23      	ldr	r6, [pc, #140]	; (401f60 <udd_ep_alloc+0xf4>)
  401ed4:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  401ed6:	2201      	movs	r2, #1
  401ed8:	fa02 f404 	lsl.w	r4, r2, r4
  401edc:	4325      	orrs	r5, r4
  401ede:	62b5      	str	r5, [r6, #40]	; 0x28
  401ee0:	4635      	mov	r5, r6
  401ee2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401ee4:	4214      	tst	r4, r2
  401ee6:	d0fc      	beq.n	401ee2 <udd_ep_alloc+0x76>
  401ee8:	4d1d      	ldr	r5, [pc, #116]	; (401f60 <udd_ep_alloc+0xf4>)
  401eea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401eec:	ea22 0404 	bic.w	r4, r2, r4
  401ef0:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  401ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ef4:	9201      	str	r2, [sp, #4]
  401ef6:	9a01      	ldr	r2, [sp, #4]
  401ef8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401efc:	9201      	str	r2, [sp, #4]
  401efe:	9a01      	ldr	r2, [sp, #4]
  401f00:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401f08:	9201      	str	r2, [sp, #4]
  401f0a:	2800      	cmp	r0, #0
  401f0c:	ea4f 2201 	mov.w	r2, r1, lsl #8
  401f10:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401f14:	bfb4      	ite	lt
  401f16:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  401f1a:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  401f1e:	9901      	ldr	r1, [sp, #4]
  401f20:	4311      	orrs	r1, r2
  401f22:	9101      	str	r1, [sp, #4]
  401f24:	9901      	ldr	r1, [sp, #4]
  401f26:	6319      	str	r1, [r3, #48]	; 0x30
  401f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401f2a:	ea32 0101 	bics.w	r1, r2, r1
  401f2e:	d1fb      	bne.n	401f28 <udd_ep_alloc+0xbc>
	return true;
  401f30:	2001      	movs	r0, #1
  401f32:	e00a      	b.n	401f4a <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401f34:	b16c      	cbz	r4, 401f52 <udd_ep_alloc+0xe6>
  401f36:	2c03      	cmp	r4, #3
  401f38:	d1ab      	bne.n	401e92 <udd_ep_alloc+0x26>
		return false;
  401f3a:	2000      	movs	r0, #0
  401f3c:	e005      	b.n	401f4a <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  401f3e:	787a      	ldrb	r2, [r7, #1]
  401f40:	f36f 0283 	bfc	r2, #2, #2
  401f44:	707a      	strb	r2, [r7, #1]
  401f46:	e7c4      	b.n	401ed2 <udd_ep_alloc+0x66>
		return false;
  401f48:	2000      	movs	r0, #0
}
  401f4a:	b003      	add	sp, #12
  401f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  401f4e:	2000      	movs	r0, #0
  401f50:	e7fb      	b.n	401f4a <udd_ep_alloc+0xde>
		return false;
  401f52:	2000      	movs	r0, #0
  401f54:	e7f9      	b.n	401f4a <udd_ep_alloc+0xde>
		return false;
  401f56:	2000      	movs	r0, #0
  401f58:	e7f7      	b.n	401f4a <udd_ep_alloc+0xde>
  401f5a:	bf00      	nop
  401f5c:	200006d0 	.word	0x200006d0
  401f60:	40034000 	.word	0x40034000

00401f64 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401f64:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401f68:	2a03      	cmp	r2, #3
  401f6a:	d822      	bhi.n	401fb2 <udd_ep_free+0x4e>
{
  401f6c:	b500      	push	{lr}
  401f6e:	b083      	sub	sp, #12
  401f70:	0091      	lsls	r1, r2, #2
  401f72:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  401f76:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  401f7a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f7c:	9301      	str	r3, [sp, #4]
  401f7e:	9b01      	ldr	r3, [sp, #4]
  401f80:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f84:	9301      	str	r3, [sp, #4]
  401f86:	9b01      	ldr	r3, [sp, #4]
  401f88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  401f8c:	9301      	str	r3, [sp, #4]
  401f8e:	9b01      	ldr	r3, [sp, #4]
  401f90:	630b      	str	r3, [r1, #48]	; 0x30
  401f92:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401f94:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401f98:	d1fb      	bne.n	401f92 <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  401f9a:	1e50      	subs	r0, r2, #1
  401f9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401fa0:	2101      	movs	r1, #1
  401fa2:	4b04      	ldr	r3, [pc, #16]	; (401fb4 <udd_ep_free+0x50>)
  401fa4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401fa8:	4b03      	ldr	r3, [pc, #12]	; (401fb8 <udd_ep_free+0x54>)
  401faa:	4798      	blx	r3
}
  401fac:	b003      	add	sp, #12
  401fae:	f85d fb04 	ldr.w	pc, [sp], #4
  401fb2:	4770      	bx	lr
  401fb4:	200006d0 	.word	0x200006d0
  401fb8:	004010c9 	.word	0x004010c9

00401fbc <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401fbc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401fc0:	2803      	cmp	r0, #3
  401fc2:	d815      	bhi.n	401ff0 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  401fc4:	1e43      	subs	r3, r0, #1
  401fc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401fca:	4a0a      	ldr	r2, [pc, #40]	; (401ff4 <udd_ep_is_halted+0x38>)
  401fcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401fd0:	7c5b      	ldrb	r3, [r3, #17]
  401fd2:	f013 0f20 	tst.w	r3, #32
  401fd6:	d109      	bne.n	401fec <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  401fd8:	300c      	adds	r0, #12
  401fda:	4b07      	ldr	r3, [pc, #28]	; (401ff8 <udd_ep_is_halted+0x3c>)
  401fdc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  401fe0:	f013 0f28 	tst.w	r3, #40	; 0x28
  401fe4:	bf14      	ite	ne
  401fe6:	2001      	movne	r0, #1
  401fe8:	2000      	moveq	r0, #0
  401fea:	4770      	bx	lr
  401fec:	2001      	movs	r0, #1
  401fee:	4770      	bx	lr
		return false;
  401ff0:	2000      	movs	r0, #0
}
  401ff2:	4770      	bx	lr
  401ff4:	200006d0 	.word	0x200006d0
  401ff8:	40034000 	.word	0x40034000

00401ffc <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401ffc:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402000:	2903      	cmp	r1, #3
  402002:	d85f      	bhi.n	4020c4 <udd_ep_set_halt+0xc8>
{
  402004:	b410      	push	{r4}
  402006:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402008:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40200c:	fab3 f383 	clz	r3, r3
  402010:	095b      	lsrs	r3, r3, #5
  402012:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402014:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402016:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40201a:	2200      	movs	r2, #0
  40201c:	4b2c      	ldr	r3, [pc, #176]	; (4020d0 <udd_ep_set_halt+0xd4>)
  40201e:	701a      	strb	r2, [r3, #0]
	return flags;
  402020:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402022:	f010 0f80 	tst.w	r0, #128	; 0x80
  402026:	d124      	bne.n	402072 <udd_ep_set_halt+0x76>
  402028:	008a      	lsls	r2, r1, #2
  40202a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40202e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  402032:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402034:	9300      	str	r3, [sp, #0]
  402036:	9b00      	ldr	r3, [sp, #0]
  402038:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40203c:	9300      	str	r3, [sp, #0]
  40203e:	9b00      	ldr	r3, [sp, #0]
  402040:	f043 0320 	orr.w	r3, r3, #32
  402044:	9300      	str	r3, [sp, #0]
  402046:	9b00      	ldr	r3, [sp, #0]
  402048:	6313      	str	r3, [r2, #48]	; 0x30
  40204a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40204c:	f013 0f20 	tst.w	r3, #32
  402050:	d0fb      	beq.n	40204a <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  402052:	2301      	movs	r3, #1
  402054:	fa03 f101 	lsl.w	r1, r3, r1
  402058:	4b1e      	ldr	r3, [pc, #120]	; (4020d4 <udd_ep_set_halt+0xd8>)
  40205a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40205c:	2c00      	cmp	r4, #0
  40205e:	d035      	beq.n	4020cc <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402060:	2001      	movs	r0, #1
  402062:	4b1b      	ldr	r3, [pc, #108]	; (4020d0 <udd_ep_set_halt+0xd4>)
  402064:	7018      	strb	r0, [r3, #0]
  402066:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40206a:	b662      	cpsie	i
}
  40206c:	b003      	add	sp, #12
  40206e:	bc10      	pop	{r4}
  402070:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402072:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402074:	f101 020c 	add.w	r2, r1, #12
  402078:	4816      	ldr	r0, [pc, #88]	; (4020d4 <udd_ep_set_halt+0xd8>)
  40207a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  40207e:	f012 0f10 	tst.w	r2, #16
  402082:	d109      	bne.n	402098 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  402084:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402088:	4813      	ldr	r0, [pc, #76]	; (4020d8 <udd_ep_set_halt+0xdc>)
  40208a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  40208e:	7c52      	ldrb	r2, [r2, #17]
  402090:	f3c2 0281 	ubfx	r2, r2, #2, #2
  402094:	2a01      	cmp	r2, #1
  402096:	ddc7      	ble.n	402028 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  402098:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40209c:	4b0e      	ldr	r3, [pc, #56]	; (4020d8 <udd_ep_set_halt+0xdc>)
  40209e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4020a2:	7c5a      	ldrb	r2, [r3, #17]
  4020a4:	f042 0220 	orr.w	r2, r2, #32
  4020a8:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4020aa:	2301      	movs	r3, #1
  4020ac:	fa03 f101 	lsl.w	r1, r3, r1
  4020b0:	4b08      	ldr	r3, [pc, #32]	; (4020d4 <udd_ep_set_halt+0xd8>)
  4020b2:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4020b4:	b144      	cbz	r4, 4020c8 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  4020b6:	2001      	movs	r0, #1
  4020b8:	4b05      	ldr	r3, [pc, #20]	; (4020d0 <udd_ep_set_halt+0xd4>)
  4020ba:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4020bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4020c0:	b662      	cpsie	i
  4020c2:	e7d3      	b.n	40206c <udd_ep_set_halt+0x70>
		return false;
  4020c4:	2000      	movs	r0, #0
  4020c6:	4770      	bx	lr
		return true;
  4020c8:	2001      	movs	r0, #1
  4020ca:	e7cf      	b.n	40206c <udd_ep_set_halt+0x70>
	return true;
  4020cc:	2001      	movs	r0, #1
  4020ce:	e7cd      	b.n	40206c <udd_ep_set_halt+0x70>
  4020d0:	200000a0 	.word	0x200000a0
  4020d4:	40034000 	.word	0x40034000
  4020d8:	200006d0 	.word	0x200006d0

004020dc <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  4020dc:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4020e0:	2803      	cmp	r0, #3
  4020e2:	d85e      	bhi.n	4021a2 <udd_ep_clear_halt+0xc6>
{
  4020e4:	b530      	push	{r4, r5, lr}
  4020e6:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  4020e8:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  4020ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4020ee:	4b2f      	ldr	r3, [pc, #188]	; (4021ac <udd_ep_clear_halt+0xd0>)
  4020f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4020f4:	7c5a      	ldrb	r2, [r3, #17]
  4020f6:	f36f 1245 	bfc	r2, #5, #1
  4020fa:	745a      	strb	r2, [r3, #17]
  4020fc:	0083      	lsls	r3, r0, #2
  4020fe:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402102:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402108:	f012 0f20 	tst.w	r2, #32
  40210c:	d04b      	beq.n	4021a6 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  40210e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402110:	9200      	str	r2, [sp, #0]
  402112:	9a00      	ldr	r2, [sp, #0]
  402114:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402118:	9200      	str	r2, [sp, #0]
  40211a:	9a00      	ldr	r2, [sp, #0]
  40211c:	f022 0220 	bic.w	r2, r2, #32
  402120:	9200      	str	r2, [sp, #0]
  402122:	9a00      	ldr	r2, [sp, #0]
  402124:	631a      	str	r2, [r3, #48]	; 0x30
  402126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402128:	f012 0f20 	tst.w	r2, #32
  40212c:	d1fb      	bne.n	402126 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40212e:	4d20      	ldr	r5, [pc, #128]	; (4021b0 <udd_ep_clear_halt+0xd4>)
  402130:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  402132:	2201      	movs	r2, #1
  402134:	fa02 f000 	lsl.w	r0, r2, r0
  402138:	4301      	orrs	r1, r0
  40213a:	62a9      	str	r1, [r5, #40]	; 0x28
  40213c:	4629      	mov	r1, r5
  40213e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402140:	4210      	tst	r0, r2
  402142:	d0fc      	beq.n	40213e <udd_ep_clear_halt+0x62>
  402144:	491a      	ldr	r1, [pc, #104]	; (4021b0 <udd_ep_clear_halt+0xd4>)
  402146:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402148:	ea22 0000 	bic.w	r0, r2, r0
  40214c:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402150:	9201      	str	r2, [sp, #4]
  402152:	9a01      	ldr	r2, [sp, #4]
  402154:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402158:	9201      	str	r2, [sp, #4]
  40215a:	9a01      	ldr	r2, [sp, #4]
  40215c:	f022 0208 	bic.w	r2, r2, #8
  402160:	9201      	str	r2, [sp, #4]
  402162:	9a01      	ldr	r2, [sp, #4]
  402164:	631a      	str	r2, [r3, #48]	; 0x30
  402166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402168:	f012 0f08 	tst.w	r2, #8
  40216c:	d1fb      	bne.n	402166 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  40216e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  402172:	4a0e      	ldr	r2, [pc, #56]	; (4021ac <udd_ep_clear_halt+0xd0>)
  402174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402178:	7c5b      	ldrb	r3, [r3, #17]
  40217a:	f013 0f10 	tst.w	r3, #16
  40217e:	d101      	bne.n	402184 <udd_ep_clear_halt+0xa8>
	return true;
  402180:	2001      	movs	r0, #1
  402182:	e011      	b.n	4021a8 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  402184:	4611      	mov	r1, r2
  402186:	00a2      	lsls	r2, r4, #2
  402188:	1913      	adds	r3, r2, r4
  40218a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40218e:	7c58      	ldrb	r0, [r3, #17]
  402190:	f36f 1004 	bfc	r0, #4, #1
  402194:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  402196:	4414      	add	r4, r2
  402198:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  40219c:	4798      	blx	r3
	return true;
  40219e:	2001      	movs	r0, #1
  4021a0:	e002      	b.n	4021a8 <udd_ep_clear_halt+0xcc>
		return false;
  4021a2:	2000      	movs	r0, #0
  4021a4:	4770      	bx	lr
	return true;
  4021a6:	2001      	movs	r0, #1
}
  4021a8:	b003      	add	sp, #12
  4021aa:	bd30      	pop	{r4, r5, pc}
  4021ac:	200006d0 	.word	0x200006d0
  4021b0:	40034000 	.word	0x40034000

004021b4 <udd_ep_run>:
{
  4021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4021b6:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  4021b8:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  4021bc:	2f03      	cmp	r7, #3
  4021be:	f200 80a2 	bhi.w	402306 <udd_ep_run+0x152>
  4021c2:	00bc      	lsls	r4, r7, #2
  4021c4:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4021c8:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  4021cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4021ce:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4021d2:	f000 809b 	beq.w	40230c <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  4021d6:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  4021d8:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4021dc:	4e50      	ldr	r6, [pc, #320]	; (402320 <udd_ep_run+0x16c>)
  4021de:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4021e2:	7c76      	ldrb	r6, [r6, #17]
  4021e4:	f016 0f20 	tst.w	r6, #32
  4021e8:	f040 8092 	bne.w	402310 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4021ec:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4021ee:	f016 0f20 	tst.w	r6, #32
  4021f2:	f040 808f 	bne.w	402314 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4021f6:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4021fa:	fab6 f686 	clz	r6, r6
  4021fe:	0976      	lsrs	r6, r6, #5
  402200:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402202:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402204:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402208:	f04f 0e00 	mov.w	lr, #0
  40220c:	4e45      	ldr	r6, [pc, #276]	; (402324 <udd_ep_run+0x170>)
  40220e:	f886 e000 	strb.w	lr, [r6]
	return flags;
  402212:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  402216:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40221a:	4e41      	ldr	r6, [pc, #260]	; (402320 <udd_ep_run+0x16c>)
  40221c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402220:	7c76      	ldrb	r6, [r6, #17]
  402222:	f016 0f10 	tst.w	r6, #16
  402226:	d00a      	beq.n	40223e <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402228:	f1bc 0f00 	cmp.w	ip, #0
  40222c:	d074      	beq.n	402318 <udd_ep_run+0x164>
		cpu_irq_enable();
  40222e:	2201      	movs	r2, #1
  402230:	4b3c      	ldr	r3, [pc, #240]	; (402324 <udd_ep_run+0x170>)
  402232:	701a      	strb	r2, [r3, #0]
  402234:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402238:	b662      	cpsie	i
		return false; // Job already on going
  40223a:	2000      	movs	r0, #0
  40223c:	e064      	b.n	402308 <udd_ep_run+0x154>
	ptr_job->busy = true;
  40223e:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402242:	4e37      	ldr	r6, [pc, #220]	; (402320 <udd_ep_run+0x16c>)
  402244:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402248:	f896 e011 	ldrb.w	lr, [r6, #17]
  40224c:	f04e 0e10 	orr.w	lr, lr, #16
  402250:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  402254:	f1bc 0f00 	cmp.w	ip, #0
  402258:	d007      	beq.n	40226a <udd_ep_run+0xb6>
		cpu_irq_enable();
  40225a:	f04f 0e01 	mov.w	lr, #1
  40225e:	4e31      	ldr	r6, [pc, #196]	; (402324 <udd_ep_run+0x170>)
  402260:	f886 e000 	strb.w	lr, [r6]
  __ASM volatile ("dmb 0xF":::"memory");
  402264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402268:	b662      	cpsie	i
	ptr_job->buf = buf;
  40226a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402320 <udd_ep_run+0x16c>
  40226e:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  402272:	00b6      	lsls	r6, r6, #2
  402274:	eb0c 0e06 	add.w	lr, ip, r6
  402278:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  40227c:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  402280:	2200      	movs	r2, #0
  402282:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  402286:	9a08      	ldr	r2, [sp, #32]
  402288:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  40228c:	b911      	cbnz	r1, 402294 <udd_ep_run+0xe0>
  40228e:	fab3 f183 	clz	r1, r3
  402292:	0949      	lsrs	r1, r1, #5
  402294:	4a22      	ldr	r2, [pc, #136]	; (402320 <udd_ep_run+0x16c>)
  402296:	00ae      	lsls	r6, r5, #2
  402298:	1973      	adds	r3, r6, r5
  40229a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40229e:	7c5b      	ldrb	r3, [r3, #17]
  4022a0:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  4022a4:	4435      	add	r5, r6
  4022a6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  4022aa:	f36f 13c7 	bfc	r3, #7, #1
  4022ae:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4022b0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4022b4:	fab3 f383 	clz	r3, r3
  4022b8:	095b      	lsrs	r3, r3, #5
  4022ba:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4022bc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4022be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4022c2:	2200      	movs	r2, #0
  4022c4:	4b17      	ldr	r3, [pc, #92]	; (402324 <udd_ep_run+0x170>)
  4022c6:	701a      	strb	r2, [r3, #0]
	return flags;
  4022c8:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  4022ca:	2301      	movs	r3, #1
  4022cc:	40bb      	lsls	r3, r7
  4022ce:	4a16      	ldr	r2, [pc, #88]	; (402328 <udd_ep_run+0x174>)
  4022d0:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  4022d2:	f010 0f80 	tst.w	r0, #128	; 0x80
  4022d6:	d107      	bne.n	4022e8 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  4022d8:	b305      	cbz	r5, 40231c <udd_ep_run+0x168>
		cpu_irq_enable();
  4022da:	2001      	movs	r0, #1
  4022dc:	4b11      	ldr	r3, [pc, #68]	; (402324 <udd_ep_run+0x170>)
  4022de:	7018      	strb	r0, [r3, #0]
  4022e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4022e4:	b662      	cpsie	i
  4022e6:	e00f      	b.n	402308 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  4022e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4022ea:	f013 0f11 	tst.w	r3, #17
  4022ee:	d1f3      	bne.n	4022d8 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  4022f0:	2101      	movs	r1, #1
  4022f2:	4638      	mov	r0, r7
  4022f4:	4b0d      	ldr	r3, [pc, #52]	; (40232c <udd_ep_run+0x178>)
  4022f6:	4798      	blx	r3
  4022f8:	2800      	cmp	r0, #0
  4022fa:	d0ed      	beq.n	4022d8 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  4022fc:	2100      	movs	r1, #0
  4022fe:	4638      	mov	r0, r7
  402300:	4b0a      	ldr	r3, [pc, #40]	; (40232c <udd_ep_run+0x178>)
  402302:	4798      	blx	r3
  402304:	e7e8      	b.n	4022d8 <udd_ep_run+0x124>
		return false;
  402306:	2000      	movs	r0, #0
}
  402308:	b003      	add	sp, #12
  40230a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  40230c:	2000      	movs	r0, #0
  40230e:	e7fb      	b.n	402308 <udd_ep_run+0x154>
  402310:	2000      	movs	r0, #0
  402312:	e7f9      	b.n	402308 <udd_ep_run+0x154>
  402314:	2000      	movs	r0, #0
  402316:	e7f7      	b.n	402308 <udd_ep_run+0x154>
		return false; // Job already on going
  402318:	2000      	movs	r0, #0
  40231a:	e7f5      	b.n	402308 <udd_ep_run+0x154>
	return true;
  40231c:	2001      	movs	r0, #1
  40231e:	e7f3      	b.n	402308 <udd_ep_run+0x154>
  402320:	200006d0 	.word	0x200006d0
  402324:	200000a0 	.word	0x200000a0
  402328:	40034000 	.word	0x40034000
  40232c:	004011dd 	.word	0x004011dd

00402330 <udd_ep_abort>:
{
  402330:	b5f0      	push	{r4, r5, r6, r7, lr}
  402332:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  402334:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402338:	2d03      	cmp	r5, #3
  40233a:	d840      	bhi.n	4023be <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40233c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402340:	fab3 f383 	clz	r3, r3
  402344:	095b      	lsrs	r3, r3, #5
  402346:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402348:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40234a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40234e:	2200      	movs	r2, #0
  402350:	4b4b      	ldr	r3, [pc, #300]	; (402480 <udd_ep_abort+0x150>)
  402352:	701a      	strb	r2, [r3, #0]
	return flags;
  402354:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  402356:	2401      	movs	r4, #1
  402358:	40ac      	lsls	r4, r5
  40235a:	4a4a      	ldr	r2, [pc, #296]	; (402484 <udd_ep_abort+0x154>)
  40235c:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40235e:	b12b      	cbz	r3, 40236c <udd_ep_abort+0x3c>
		cpu_irq_enable();
  402360:	2201      	movs	r2, #1
  402362:	4b47      	ldr	r3, [pc, #284]	; (402480 <udd_ep_abort+0x150>)
  402364:	701a      	strb	r2, [r3, #0]
  402366:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40236a:	b662      	cpsie	i
	if (b_dir_in) {
  40236c:	f010 0f80 	tst.w	r0, #128	; 0x80
  402370:	d127      	bne.n	4023c2 <udd_ep_abort+0x92>
  402372:	00ae      	lsls	r6, r5, #2
  402374:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402378:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  40237c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40237e:	f013 0f42 	tst.w	r3, #66	; 0x42
  402382:	d006      	beq.n	402392 <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  402384:	4f40      	ldr	r7, [pc, #256]	; (402488 <udd_ep_abort+0x158>)
  402386:	4628      	mov	r0, r5
  402388:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  40238a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40238c:	f013 0f42 	tst.w	r3, #66	; 0x42
  402390:	d1f9      	bne.n	402386 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  402392:	4a3c      	ldr	r2, [pc, #240]	; (402484 <udd_ep_abort+0x154>)
  402394:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402396:	4323      	orrs	r3, r4
  402398:	6293      	str	r3, [r2, #40]	; 0x28
  40239a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40239c:	421c      	tst	r4, r3
  40239e:	d0fc      	beq.n	40239a <udd_ep_abort+0x6a>
  4023a0:	4a38      	ldr	r2, [pc, #224]	; (402484 <udd_ep_abort+0x154>)
  4023a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4023a4:	ea23 0404 	bic.w	r4, r3, r4
  4023a8:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4023aa:	1e68      	subs	r0, r5, #1
  4023ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023b0:	462a      	mov	r2, r5
  4023b2:	2101      	movs	r1, #1
  4023b4:	4b35      	ldr	r3, [pc, #212]	; (40248c <udd_ep_abort+0x15c>)
  4023b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023ba:	4b35      	ldr	r3, [pc, #212]	; (402490 <udd_ep_abort+0x160>)
  4023bc:	4798      	blx	r3
}
  4023be:	b007      	add	sp, #28
  4023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4023c2:	00ab      	lsls	r3, r5, #2
  4023c4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4023c8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  4023cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023ce:	f012 0f10 	tst.w	r2, #16
  4023d2:	d03a      	beq.n	40244a <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4023d4:	b34d      	cbz	r5, 40242a <udd_ep_abort+0xfa>
  4023d6:	2d03      	cmp	r5, #3
  4023d8:	d027      	beq.n	40242a <udd_ep_abort+0xfa>
  4023da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023dc:	9201      	str	r2, [sp, #4]
  4023de:	9a01      	ldr	r2, [sp, #4]
  4023e0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4023e4:	9201      	str	r2, [sp, #4]
  4023e6:	9a01      	ldr	r2, [sp, #4]
  4023e8:	f022 0210 	bic.w	r2, r2, #16
  4023ec:	9201      	str	r2, [sp, #4]
  4023ee:	9a01      	ldr	r2, [sp, #4]
  4023f0:	631a      	str	r2, [r3, #48]	; 0x30
  4023f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023f4:	f012 0f10 	tst.w	r2, #16
  4023f8:	d1fb      	bne.n	4023f2 <udd_ep_abort+0xc2>
  4023fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023fc:	f012 0f10 	tst.w	r2, #16
  402400:	d1fb      	bne.n	4023fa <udd_ep_abort+0xca>
  402402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402404:	9202      	str	r2, [sp, #8]
  402406:	9a02      	ldr	r2, [sp, #8]
  402408:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40240c:	9202      	str	r2, [sp, #8]
  40240e:	9a02      	ldr	r2, [sp, #8]
  402410:	f042 0210 	orr.w	r2, r2, #16
  402414:	9202      	str	r2, [sp, #8]
  402416:	9a02      	ldr	r2, [sp, #8]
  402418:	631a      	str	r2, [r3, #48]	; 0x30
  40241a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40241c:	f012 0f10 	tst.w	r2, #16
  402420:	d0fb      	beq.n	40241a <udd_ep_abort+0xea>
  402422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402424:	f012 0f10 	tst.w	r2, #16
  402428:	d0fb      	beq.n	402422 <udd_ep_abort+0xf2>
  40242a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40242c:	9203      	str	r2, [sp, #12]
  40242e:	9a03      	ldr	r2, [sp, #12]
  402430:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402434:	9203      	str	r2, [sp, #12]
  402436:	9a03      	ldr	r2, [sp, #12]
  402438:	f022 0210 	bic.w	r2, r2, #16
  40243c:	9203      	str	r2, [sp, #12]
  40243e:	9a03      	ldr	r2, [sp, #12]
  402440:	631a      	str	r2, [r3, #48]	; 0x30
  402442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402444:	f012 0f10 	tst.w	r2, #16
  402448:	d1fb      	bne.n	402442 <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  40244a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40244c:	9204      	str	r2, [sp, #16]
  40244e:	9a04      	ldr	r2, [sp, #16]
  402450:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402454:	9204      	str	r2, [sp, #16]
  402456:	9a04      	ldr	r2, [sp, #16]
  402458:	f022 0201 	bic.w	r2, r2, #1
  40245c:	9204      	str	r2, [sp, #16]
  40245e:	9a04      	ldr	r2, [sp, #16]
  402460:	631a      	str	r2, [r3, #48]	; 0x30
  402462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402464:	f012 0f01 	tst.w	r2, #1
  402468:	d1fb      	bne.n	402462 <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  40246a:	1e6b      	subs	r3, r5, #1
  40246c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402470:	4b06      	ldr	r3, [pc, #24]	; (40248c <udd_ep_abort+0x15c>)
  402472:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402476:	7c5a      	ldrb	r2, [r3, #17]
  402478:	f36f 0283 	bfc	r2, #2, #2
  40247c:	745a      	strb	r2, [r3, #17]
  40247e:	e788      	b.n	402392 <udd_ep_abort+0x62>
  402480:	200000a0 	.word	0x200000a0
  402484:	40034000 	.word	0x40034000
  402488:	00401109 	.word	0x00401109
  40248c:	200006d0 	.word	0x200006d0
  402490:	004010c9 	.word	0x004010c9

00402494 <PIOA_Handler>:



//This all might be unnecessary

void Wake_Sleep_Handler(){
  402494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t IStatus = pio_get_interrupt_status(PIOA);
  402496:	4c14      	ldr	r4, [pc, #80]	; (4024e8 <PIOA_Handler+0x54>)
  402498:	4620      	mov	r0, r4
  40249a:	4b14      	ldr	r3, [pc, #80]	; (4024ec <PIOA_Handler+0x58>)
  40249c:	4798      	blx	r3
  40249e:	4606      	mov	r6, r0
	bool USBSense = pio_get(USB_SNS_PORT,PIO_TYPE_PIO_INPUT,USB_SNS);
  4024a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4024a4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4024a8:	4620      	mov	r0, r4
  4024aa:	4d11      	ldr	r5, [pc, #68]	; (4024f0 <PIOA_Handler+0x5c>)
  4024ac:	47a8      	blx	r5
  4024ae:	4607      	mov	r7, r0
	bool PWRSwitchSense = pio_get(PWR_SW_PORT,PIO_TYPE_PIO_INPUT,PWR_SW);
  4024b0:	2201      	movs	r2, #1
  4024b2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4024b6:	4620      	mov	r0, r4
  4024b8:	47a8      	blx	r5
	
	switch(IStatus){
  4024ba:	2e01      	cmp	r6, #1
  4024bc:	d00b      	beq.n	4024d6 <PIOA_Handler+0x42>
  4024be:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  4024c2:	d101      	bne.n	4024c8 <PIOA_Handler+0x34>
		case(PIO_ISR_P14):
			if(USBSense){
  4024c4:	b90f      	cbnz	r7, 4024ca <PIOA_Handler+0x36>
				USBWakeUp();
				return;
			}else if(!USBSense && !PWRSwitchSense)
  4024c6:	b118      	cbz	r0, 4024d0 <PIOA_Handler+0x3c>
  4024c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				USBWakeUp();
  4024ca:	4b0a      	ldr	r3, [pc, #40]	; (4024f4 <PIOA_Handler+0x60>)
  4024cc:	4798      	blx	r3
				return;
  4024ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				goToSleep();
  4024d0:	4b09      	ldr	r3, [pc, #36]	; (4024f8 <PIOA_Handler+0x64>)
  4024d2:	4798      	blx	r3
  4024d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return;
		case(PIO_ISR_P0):
			if(PWRSwitchSense){
  4024d6:	b920      	cbnz	r0, 4024e2 <PIOA_Handler+0x4e>
				PWRSwitchWakeUp();
				return;
			}else if(!USBSense && !PWRSwitchSense)
  4024d8:	2f00      	cmp	r7, #0
  4024da:	d1f5      	bne.n	4024c8 <PIOA_Handler+0x34>
				goToSleep();
  4024dc:	4b06      	ldr	r3, [pc, #24]	; (4024f8 <PIOA_Handler+0x64>)
  4024de:	4798      	blx	r3
  4024e0:	e7f2      	b.n	4024c8 <PIOA_Handler+0x34>
				PWRSwitchWakeUp();
  4024e2:	4b06      	ldr	r3, [pc, #24]	; (4024fc <PIOA_Handler+0x68>)
  4024e4:	4798      	blx	r3
				return;
  4024e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024e8:	400e0e00 	.word	0x400e0e00
  4024ec:	00402e4d 	.word	0x00402e4d
  4024f0:	00402d4d 	.word	0x00402d4d
  4024f4:	004034e5 	.word	0x004034e5
  4024f8:	00403555 	.word	0x00403555
  4024fc:	00403521 	.word	0x00403521

00402500 <RTT_Handler>:
		default:
			return;
	};
}

void Wakup_Timer_Handler(){
  402500:	b508      	push	{r3, lr}
	pio_set(BOARD_LED_PORT,BOARD_LED);
  402502:	2108      	movs	r1, #8
  402504:	4802      	ldr	r0, [pc, #8]	; (402510 <RTT_Handler+0x10>)
  402506:	4b03      	ldr	r3, [pc, #12]	; (402514 <RTT_Handler+0x14>)
  402508:	4798      	blx	r3
	goToSleep();
  40250a:	4b03      	ldr	r3, [pc, #12]	; (402518 <RTT_Handler+0x18>)
  40250c:	4798      	blx	r3
  40250e:	bd08      	pop	{r3, pc}
  402510:	400e0e00 	.word	0x400e0e00
  402514:	00402d45 	.word	0x00402d45
  402518:	00403555 	.word	0x00403555

0040251c <readHandler>:
static bool convertToBool(const uint8_t data[1]){
    return data[0];
}


void readHandler(uint8_t* responsePacket, uint16_t start_reg, uint16_t end_reg) {
  40251c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  40251e:	460c      	mov	r4, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i <= end_reg) {
  402520:	29ff      	cmp	r1, #255	; 0xff
  402522:	dc15      	bgt.n	402550 <readHandler+0x34>
  402524:	4617      	mov	r7, r2
  402526:	4291      	cmp	r1, r2
  402528:	dc12      	bgt.n	402550 <readHandler+0x34>
  40252a:	1c83      	adds	r3, r0, #2
  40252c:	4d33      	ldr	r5, [pc, #204]	; (4025fc <readHandler+0xe0>)
  40252e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
		uint16_t data = intRegisters[i-INT_REG_OFFSET];
  402532:	f835 1f02 	ldrh.w	r1, [r5, #2]!
  402536:	4618      	mov	r0, r3
		responsePacket[0] = (data >> 8) & 0xFF;
  402538:	0a0e      	lsrs	r6, r1, #8
  40253a:	f803 6c02 	strb.w	r6, [r3, #-2]
		responsePacket[1] = data & 0xFF;
  40253e:	f803 1c01 	strb.w	r1, [r3, #-1]
		responsePacket += INT_REG_BYTE_SZ;
		i++;
  402542:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i <= end_reg) {
  402544:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  402548:	d005      	beq.n	402556 <readHandler+0x3a>
  40254a:	3302      	adds	r3, #2
  40254c:	42bc      	cmp	r4, r7
  40254e:	ddf0      	ble.n	402532 <readHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i <= end_reg) {
  402550:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  402554:	da21      	bge.n	40259a <readHandler+0x7e>
  402556:	4694      	mov	ip, r2
  402558:	42a2      	cmp	r2, r4
  40255a:	db33      	blt.n	4025c4 <readHandler+0xa8>
  40255c:	4b28      	ldr	r3, [pc, #160]	; (402600 <readHandler+0xe4>)
  40255e:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  402562:	4e28      	ldr	r6, [pc, #160]	; (402604 <readHandler+0xe8>)
  402564:	e006      	b.n	402574 <readHandler+0x58>
		uint8_t* floatConversionBytes = floatToBytes_union(floatRegisters[i-FLOAT_REG_OFFSET]);
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
			responsePacket[j] = floatConversionBytes[j];
		}
		responsePacket += FLOAT_REG_BYTE_SZ;
  402566:	3004      	adds	r0, #4
		i++;
  402568:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i <= end_reg) {
  40256a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  40256e:	d017      	beq.n	4025a0 <readHandler+0x84>
  402570:	4564      	cmp	r4, ip
  402572:	dc27      	bgt.n	4025c4 <readHandler+0xa8>
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  402574:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  402578:	0e19      	lsrs	r1, r3, #24
  40257a:	7031      	strb	r1, [r6, #0]
	floatCoversionBytes[1] = (u.data >> 16) & 0xFF;
  40257c:	0c19      	lsrs	r1, r3, #16
  40257e:	7071      	strb	r1, [r6, #1]
	floatCoversionBytes[2] = (u.data >> 8) & 0xFF;
  402580:	0a19      	lsrs	r1, r3, #8
  402582:	70b1      	strb	r1, [r6, #2]
	floatCoversionBytes[3] = u.data & 0xFF;
  402584:	70f3      	strb	r3, [r6, #3]
  402586:	4631      	mov	r1, r6
  402588:	1e43      	subs	r3, r0, #1
  40258a:	1cc7      	adds	r7, r0, #3
			responsePacket[j] = floatConversionBytes[j];
  40258c:	f811 5b01 	ldrb.w	r5, [r1], #1
  402590:	f803 5f01 	strb.w	r5, [r3, #1]!
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
  402594:	42bb      	cmp	r3, r7
  402596:	d1f9      	bne.n	40258c <readHandler+0x70>
  402598:	e7e5      	b.n	402566 <readHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i <= end_reg) {
  40259a:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  40259e:	da14      	bge.n	4025ca <readHandler+0xae>
  4025a0:	4616      	mov	r6, r2
  4025a2:	4294      	cmp	r4, r2
  4025a4:	dc28      	bgt.n	4025f8 <readHandler+0xdc>
  4025a6:	4b18      	ldr	r3, [pc, #96]	; (402608 <readHandler+0xec>)
  4025a8:	4423      	add	r3, r4
  4025aa:	f5c4 7540 	rsb	r5, r4, #768	; 0x300
  4025ae:	4405      	add	r5, r0
		responsePacket[0] = charRegisters[i-CHAR_REG_OFFSET];
  4025b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4025b4:	f800 1b01 	strb.w	r1, [r0], #1
		responsePacket += CHAR_REG_BYTE_SZ;
		i++;
  4025b8:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i <= end_reg) {
  4025ba:	42a8      	cmp	r0, r5
  4025bc:	d005      	beq.n	4025ca <readHandler+0xae>
  4025be:	42b4      	cmp	r4, r6
  4025c0:	ddf6      	ble.n	4025b0 <readHandler+0x94>
  4025c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025c4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  4025c8:	db16      	blt.n	4025f8 <readHandler+0xdc>
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i <= end_reg) {
  4025ca:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  4025ce:	da13      	bge.n	4025f8 <readHandler+0xdc>
  4025d0:	4616      	mov	r6, r2
  4025d2:	4294      	cmp	r4, r2
  4025d4:	dc10      	bgt.n	4025f8 <readHandler+0xdc>
  4025d6:	4a0d      	ldr	r2, [pc, #52]	; (40260c <readHandler+0xf0>)
  4025d8:	4422      	add	r2, r4
  4025da:	f5c4 6580 	rsb	r5, r4, #1024	; 0x400
  4025de:	4405      	add	r5, r0
  4025e0:	4603      	mov	r3, r0
  4025e2:	1a20      	subs	r0, r4, r0
		responsePacket[0] = boolRegisters[i-BOOL_REG_OFFSET];
  4025e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4025e8:	f803 1b01 	strb.w	r1, [r3], #1
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i <= end_reg) {
  4025ec:	429d      	cmp	r5, r3
  4025ee:	d003      	beq.n	4025f8 <readHandler+0xdc>
  4025f0:	1819      	adds	r1, r3, r0
  4025f2:	42b1      	cmp	r1, r6
  4025f4:	ddf6      	ble.n	4025e4 <readHandler+0xc8>
  4025f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025fa:	bf00      	nop
  4025fc:	20001952 	.word	0x20001952
  402600:	20001144 	.word	0x20001144
  402604:	2000070c 	.word	0x2000070c
  402608:	20000d43 	.word	0x20000d43
  40260c:	20000d47 	.word	0x20000d47

00402610 <writeHandler>:
		responsePacket += BOOL_REG_BYTE_SZ;
		i++;
	}
}

void writeHandler(uint8_t* data_packet, uint16_t start_reg, uint16_t end_reg) {
  402610:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402612:	460b      	mov	r3, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402614:	29ff      	cmp	r1, #255	; 0xff
  402616:	dc16      	bgt.n	402646 <writeHandler+0x36>
  402618:	4614      	mov	r4, r2
  40261a:	4291      	cmp	r1, r2
  40261c:	da13      	bge.n	402646 <writeHandler+0x36>
  40261e:	1c85      	adds	r5, r0, #2
  402620:	4837      	ldr	r0, [pc, #220]	; (402700 <writeHandler+0xf0>)
  402622:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402626:	4628      	mov	r0, r5
    return (data[0] << 8) | data[1];
  402628:	f815 7c02 	ldrb.w	r7, [r5, #-2]
  40262c:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  402630:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
		intRegisters[i-INT_REG_OFFSET] = convertToInt(data_packet);
  402634:	f821 6f02 	strh.w	r6, [r1, #2]!
		data_packet += INT_REG_BYTE_SZ;
		i++;
  402638:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  40263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40263e:	d005      	beq.n	40264c <writeHandler+0x3c>
  402640:	3502      	adds	r5, #2
  402642:	42a3      	cmp	r3, r4
  402644:	dbef      	blt.n	402626 <writeHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40264a:	da3c      	bge.n	4026c6 <writeHandler+0xb6>
  40264c:	4696      	mov	lr, r2
  40264e:	429a      	cmp	r2, r3
  402650:	dd1b      	ble.n	40268a <writeHandler+0x7a>
  402652:	1d04      	adds	r4, r0, #4
  402654:	4e2b      	ldr	r6, [pc, #172]	; (402704 <writeHandler+0xf4>)
  402656:	eb06 0683 	add.w	r6, r6, r3, lsl #2
  40265a:	4620      	mov	r0, r4
    u.data = MERGE_FOUR_BYTES(data);
  40265c:	f814 7c04 	ldrb.w	r7, [r4, #-4]
  402660:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  402664:	0409      	lsls	r1, r1, #16
  402666:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
  40266a:	f814 7c01 	ldrb.w	r7, [r4, #-1]
  40266e:	4339      	orrs	r1, r7
  402670:	f814 7c02 	ldrb.w	r7, [r4, #-2]
		floatRegisters[i-FLOAT_REG_OFFSET] = convertToFloat_union(data_packet);
  402674:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  402678:	f846 1f04 	str.w	r1, [r6, #4]!
		data_packet += FLOAT_REG_BYTE_SZ;
		i++;
  40267c:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  40267e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402682:	d023      	beq.n	4026cc <writeHandler+0xbc>
  402684:	3404      	adds	r4, #4
  402686:	4573      	cmp	r3, lr
  402688:	d1e7      	bne.n	40265a <writeHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  40268a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  40268e:	db35      	blt.n	4026fc <writeHandler+0xec>
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
		data_packet += CHAR_REG_BYTE_SZ;
		i++;
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  402694:	da32      	bge.n	4026fc <writeHandler+0xec>
  402696:	4293      	cmp	r3, r2
  402698:	da30      	bge.n	4026fc <writeHandler+0xec>
  40269a:	3801      	subs	r0, #1
  40269c:	f2a3 3301 	subw	r3, r3, #769	; 0x301
  4026a0:	4919      	ldr	r1, [pc, #100]	; (402708 <writeHandler+0xf8>)
  4026a2:	440b      	add	r3, r1
  4026a4:	f101 04ff 	add.w	r4, r1, #255	; 0xff
  4026a8:	f2a2 3201 	subw	r2, r2, #769	; 0x301
  4026ac:	4411      	add	r1, r2
    return data[0];
  4026ae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4026b2:	3200      	adds	r2, #0
  4026b4:	bf18      	it	ne
  4026b6:	2201      	movne	r2, #1
  4026b8:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  4026bc:	42a3      	cmp	r3, r4
  4026be:	d01d      	beq.n	4026fc <writeHandler+0xec>
  4026c0:	428b      	cmp	r3, r1
  4026c2:	d1f4      	bne.n	4026ae <writeHandler+0x9e>
  4026c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  4026c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  4026ca:	dae1      	bge.n	402690 <writeHandler+0x80>
  4026cc:	429a      	cmp	r2, r3
  4026ce:	dd15      	ble.n	4026fc <writeHandler+0xec>
  4026d0:	f2a3 2101 	subw	r1, r3, #513	; 0x201
  4026d4:	4d0d      	ldr	r5, [pc, #52]	; (40270c <writeHandler+0xfc>)
  4026d6:	4429      	add	r1, r5
  4026d8:	f105 07ff 	add.w	r7, r5, #255	; 0xff
  4026dc:	f2a2 2401 	subw	r4, r2, #513	; 0x201
  4026e0:	442c      	add	r4, r5
  4026e2:	4606      	mov	r6, r0
  4026e4:	1a1d      	subs	r5, r3, r0
    return data[0];
  4026e6:	f816 3b01 	ldrb.w	r3, [r6], #1
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
  4026ea:	f801 3f01 	strb.w	r3, [r1, #1]!
		data_packet += CHAR_REG_BYTE_SZ;
  4026ee:	4630      	mov	r0, r6
  4026f0:	19ab      	adds	r3, r5, r6
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  4026f2:	42b9      	cmp	r1, r7
  4026f4:	d0cc      	beq.n	402690 <writeHandler+0x80>
  4026f6:	42a1      	cmp	r1, r4
  4026f8:	d1f5      	bne.n	4026e6 <writeHandler+0xd6>
  4026fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4026fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4026fe:	bf00      	nop
  402700:	20001952 	.word	0x20001952
  402704:	20001144 	.word	0x20001144
  402708:	20001048 	.word	0x20001048
  40270c:	20000f44 	.word	0x20000f44

00402710 <getReadResponseDataSize>:
}

uint16_t getReadResponseDataSize(uint16_t start_reg, uint16_t end_reg) {
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary

	if(start_reg < REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if starting register is within the data type range
  402710:	28ff      	cmp	r0, #255	; 0xff
  402712:	d824      	bhi.n	40275e <getReadResponseDataSize+0x4e>
		if(end_reg >= REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if the ending register is past the data type range
  402714:	29ff      	cmp	r1, #255	; 0xff
  402716:	d91d      	bls.n	402754 <getReadResponseDataSize+0x44>
			size += (REGISTER_AR_SIZE+INT_REG_OFFSET-start_reg)*INT_REG_BYTE_SZ;		//add the register size to the size variable
  402718:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
  40271c:	0040      	lsls	r0, r0, #1
  40271e:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+INT_REG_OFFSET;								//set the new start range to the first float register
  402720:	f44f 7080 	mov.w	r0, #256	; 0x100
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg >= REGISTER_AR_SIZE+FLOAT_REG_OFFSET){								//check if the ending register is past the data type range
  402724:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  402728:	d325      	bcc.n	402776 <getReadResponseDataSize+0x66>
			size += (REGISTER_AR_SIZE+FLOAT_REG_OFFSET-start_reg)*FLOAT_REG_BYTE_SZ;	//add the register size to the size variable
  40272a:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40272e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402732:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+FLOAT_REG_OFFSET;								//set the new start range to the first float register
  402734:	f44f 7000 	mov.w	r0, #512	; 0x200
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg >= REGISTER_AR_SIZE+CHAR_REG_OFFSET){								//check if the ending register is past the data type range
  402738:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
  40273c:	d323      	bcc.n	402786 <getReadResponseDataSize+0x76>
  40273e:	f503 7340 	add.w	r3, r3, #768	; 0x300
			size += (REGISTER_AR_SIZE+CHAR_REG_OFFSET-start_reg)*CHAR_REG_BYTE_SZ;		//add the register size to the size variable
  402742:	1a18      	subs	r0, r3, r0
  402744:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+CHAR_REG_OFFSET;								//set the new start range to the first float register
  402746:	f44f 7040 	mov.w	r0, #768	; 0x300
  40274a:	3101      	adds	r1, #1
  40274c:	4419      	add	r1, r3
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
		size += ((end_reg+1) - start_reg)*BOOL_REG_BYTE_SZ;								//return the size including this data type's registers
  40274e:	1a08      	subs	r0, r1, r0
  402750:	b280      	uxth	r0, r0
		return size;
  402752:	4770      	bx	lr
			size += ((end_reg+1) - start_reg)*INT_REG_BYTE_SZ;							//return the size including this data type's registers
  402754:	3101      	adds	r1, #1
  402756:	1a08      	subs	r0, r1, r0
  402758:	0040      	lsls	r0, r0, #1
  40275a:	b280      	uxth	r0, r0
			return size;
  40275c:	4770      	bx	lr
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
  40275e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  402762:	d306      	bcc.n	402772 <getReadResponseDataSize+0x62>
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
  402764:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  402768:	d30b      	bcc.n	402782 <getReadResponseDataSize+0x72>
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
  40276a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
  40276e:	d30f      	bcc.n	402790 <getReadResponseDataSize+0x80>
	}
		
}
  402770:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402772:	2300      	movs	r3, #0
  402774:	e7d6      	b.n	402724 <getReadResponseDataSize+0x14>
			size += ((end_reg+1) - start_reg)*FLOAT_REG_BYTE_SZ;						//return the size including this data type's registers
  402776:	3101      	adds	r1, #1
  402778:	1a08      	subs	r0, r1, r0
  40277a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40277e:	b280      	uxth	r0, r0
			return size;
  402780:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402782:	2300      	movs	r3, #0
  402784:	e7d8      	b.n	402738 <getReadResponseDataSize+0x28>
  402786:	3101      	adds	r1, #1
  402788:	440b      	add	r3, r1
			size += ((end_reg+1) - start_reg)*CHAR_REG_BYTE_SZ;							//return the size including this data type's registers
  40278a:	1a18      	subs	r0, r3, r0
  40278c:	b280      	uxth	r0, r0
			return size;
  40278e:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402790:	2300      	movs	r3, #0
  402792:	e7da      	b.n	40274a <getReadResponseDataSize+0x3a>

00402794 <modbus_init>:

void modbus_init(Uart *port485, const uint32_t baud, Pio *enPinPort, const uint32_t enPin, const uint8_t slave_id){
  402794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402798:	b086      	sub	sp, #24
  40279a:	460f      	mov	r7, r1
  40279c:	4616      	mov	r6, r2
  40279e:	461d      	mov	r5, r3
	
	RS485Port = port485;
  4027a0:	4b2e      	ldr	r3, [pc, #184]	; (40285c <modbus_init+0xc8>)
  4027a2:	6018      	str	r0, [r3, #0]
	slaveID = slave_id;
  4027a4:	4b2e      	ldr	r3, [pc, #184]	; (402860 <modbus_init+0xcc>)
  4027a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
  4027aa:	701a      	strb	r2, [r3, #0]
	
	if(RS485Port == UART0){
  4027ac:	4b2d      	ldr	r3, [pc, #180]	; (402864 <modbus_init+0xd0>)
  4027ae:	4298      	cmp	r0, r3
  4027b0:	d027      	beq.n	402802 <modbus_init+0x6e>
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA9);		//Sets PA9 to RX
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA10);		//Sets PA10 to TX
		NVIC_EnableIRQ(UART0_IRQn);							//enables interrupts related to this port
	}
	
	if(RS485Port == UART1){
  4027b2:	4b2a      	ldr	r3, [pc, #168]	; (40285c <modbus_init+0xc8>)
  4027b4:	681a      	ldr	r2, [r3, #0]
  4027b6:	4b2c      	ldr	r3, [pc, #176]	; (402868 <modbus_init+0xd4>)
  4027b8:	429a      	cmp	r2, r3
  4027ba:	d039      	beq.n	402830 <modbus_init+0x9c>
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB2);		//Sets PB2 to RX
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB3);		//Sets PB3 to TX
		NVIC_EnableIRQ(UART1_IRQn);							//enables interrupts related to this port
	}
	
	uint32_t clockSpeed = sysclk_get_peripheral_bus_hz(RS485Port);		//gets CPU speed to for baud counter
  4027bc:	4c27      	ldr	r4, [pc, #156]	; (40285c <modbus_init+0xc8>)
	
	sam_uart_opt_t UARTSettings = {
  4027be:	4b2b      	ldr	r3, [pc, #172]	; (40286c <modbus_init+0xd8>)
  4027c0:	9303      	str	r3, [sp, #12]
  4027c2:	9704      	str	r7, [sp, #16]
  4027c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4027c8:	9305      	str	r3, [sp, #20]
		.ul_baudrate = baud,			//sets baudrate
		.ul_mode = UART_MR_CHMODE_NORMAL | UART_MR_PAR_NO,	//sets to normal mode
		.ul_mck = clockSpeed			//sets baud counter clock
	};
	
	uart_init(RS485Port, &UARTSettings);							//init the UART port
  4027ca:	a903      	add	r1, sp, #12
  4027cc:	6820      	ldr	r0, [r4, #0]
  4027ce:	4b28      	ldr	r3, [pc, #160]	; (402870 <modbus_init+0xdc>)
  4027d0:	4798      	blx	r3
	uart_enable_rx(RS485Port);
  4027d2:	6820      	ldr	r0, [r4, #0]
  4027d4:	4b27      	ldr	r3, [pc, #156]	; (402874 <modbus_init+0xe0>)
  4027d6:	4798      	blx	r3
	uart_enable_tx(RS485Port);
  4027d8:	6820      	ldr	r0, [r4, #0]
  4027da:	4b27      	ldr	r3, [pc, #156]	; (402878 <modbus_init+0xe4>)
  4027dc:	4798      	blx	r3
	uart_enable_interrupt(RS485Port, UART_IER_RXRDY);				//Enable interrupt for incoming data
  4027de:	2101      	movs	r1, #1
  4027e0:	6820      	ldr	r0, [r4, #0]
  4027e2:	4b26      	ldr	r3, [pc, #152]	; (40287c <modbus_init+0xe8>)
  4027e4:	4798      	blx	r3
	
	pio_set_output(enPinPort,enPin,LOW,DISABLE,DISABLE);		//init the enable pin
  4027e6:	2200      	movs	r2, #0
  4027e8:	9200      	str	r2, [sp, #0]
  4027ea:	4613      	mov	r3, r2
  4027ec:	4629      	mov	r1, r5
  4027ee:	4630      	mov	r0, r6
  4027f0:	4c23      	ldr	r4, [pc, #140]	; (402880 <modbus_init+0xec>)
  4027f2:	47a0      	blx	r4
	globalEnPinPort = enPinPort;
  4027f4:	4b23      	ldr	r3, [pc, #140]	; (402884 <modbus_init+0xf0>)
  4027f6:	601e      	str	r6, [r3, #0]
	globalEnPin = enPin;
  4027f8:	4b23      	ldr	r3, [pc, #140]	; (402888 <modbus_init+0xf4>)
  4027fa:	601d      	str	r5, [r3, #0]
	/*																//CRC engine cannot be used in the current configuration because the modbus RTU polynomial (0xA001) does not match any of the supported polynomials
	uint8_t CRCMode = CRCCU_MR_ENABLE | CRCCU_MR_PTYPE_CCITT16;
	pmc_enable_periph_clk(ID_CRCCU);							//init CRC Computation Unit
	crccu_configure_mode(CRCCU, CRCMode)
	*/
}
  4027fc:	b006      	add	sp, #24
  4027fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pmc_enable_periph_clk(ID_UART0);		//Enable the clocks to the UART modules
  402802:	2008      	movs	r0, #8
  402804:	4b21      	ldr	r3, [pc, #132]	; (40288c <modbus_init+0xf8>)
  402806:	4798      	blx	r3
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA9);		//Sets PA9 to RX
  402808:	f8df 808c 	ldr.w	r8, [pc, #140]	; 402898 <modbus_init+0x104>
  40280c:	f44f 7200 	mov.w	r2, #512	; 0x200
  402810:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402814:	4640      	mov	r0, r8
  402816:	4c1e      	ldr	r4, [pc, #120]	; (402890 <modbus_init+0xfc>)
  402818:	47a0      	blx	r4
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA10);		//Sets PA10 to TX
  40281a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40281e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402822:	4640      	mov	r0, r8
  402824:	47a0      	blx	r4
  402826:	f44f 7280 	mov.w	r2, #256	; 0x100
  40282a:	4b1a      	ldr	r3, [pc, #104]	; (402894 <modbus_init+0x100>)
  40282c:	601a      	str	r2, [r3, #0]
  40282e:	e7c0      	b.n	4027b2 <modbus_init+0x1e>
		pmc_enable_periph_clk(ID_UART1);		//Enable the clocks to the UART modules
  402830:	2009      	movs	r0, #9
  402832:	4b16      	ldr	r3, [pc, #88]	; (40288c <modbus_init+0xf8>)
  402834:	4798      	blx	r3
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB2);		//Sets PB2 to RX
  402836:	f8df 8064 	ldr.w	r8, [pc, #100]	; 40289c <modbus_init+0x108>
  40283a:	2204      	movs	r2, #4
  40283c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402840:	4640      	mov	r0, r8
  402842:	4c13      	ldr	r4, [pc, #76]	; (402890 <modbus_init+0xfc>)
  402844:	47a0      	blx	r4
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB3);		//Sets PB3 to TX
  402846:	2208      	movs	r2, #8
  402848:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40284c:	4640      	mov	r0, r8
  40284e:	47a0      	blx	r4
  402850:	f44f 7200 	mov.w	r2, #512	; 0x200
  402854:	4b0f      	ldr	r3, [pc, #60]	; (402894 <modbus_init+0x100>)
  402856:	601a      	str	r2, [r3, #0]
  402858:	e7b0      	b.n	4027bc <modbus_init+0x28>
  40285a:	bf00      	nop
  40285c:	20001044 	.word	0x20001044
  402860:	20001b58 	.word	0x20001b58
  402864:	400e0600 	.word	0x400e0600
  402868:	400e0800 	.word	0x400e0800
  40286c:	07270e00 	.word	0x07270e00
  402870:	004030d1 	.word	0x004030d1
  402874:	0040310d 	.word	0x0040310d
  402878:	00403107 	.word	0x00403107
  40287c:	00403113 	.word	0x00403113
  402880:	00402e27 	.word	0x00402e27
  402884:	20001948 	.word	0x20001948
  402888:	20001950 	.word	0x20001950
  40288c:	00402ff5 	.word	0x00402ff5
  402890:	00402d65 	.word	0x00402d65
  402894:	e000e100 	.word	0xe000e100
  402898:	400e0e00 	.word	0x400e0e00
  40289c:	400e1000 	.word	0x400e1000

004028a0 <UART_Handler>:
	transmitIndex = 0;
	uart_enable_interrupt(RS485Port,UART_IMR_TXRDY);
}

//interrupt handler for incoming data
void UART_Handler(void){
  4028a0:	b510      	push	{r4, lr}
	if(uart_is_rx_ready(RS485Port)){							//confirm there is data ready to be read
  4028a2:	4b1f      	ldr	r3, [pc, #124]	; (402920 <UART_Handler+0x80>)
  4028a4:	6818      	ldr	r0, [r3, #0]
  4028a6:	4b1f      	ldr	r3, [pc, #124]	; (402924 <UART_Handler+0x84>)
  4028a8:	4798      	blx	r3
  4028aa:	b980      	cbnz	r0, 4028ce <UART_Handler+0x2e>
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head]));		//move the data into the next index of the rx buffer
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);		//iterate the head through the ring buffer
	}else if(uart_is_tx_ready(RS485Port)){
  4028ac:	4b1c      	ldr	r3, [pc, #112]	; (402920 <UART_Handler+0x80>)
  4028ae:	6818      	ldr	r0, [r3, #0]
  4028b0:	4b1d      	ldr	r3, [pc, #116]	; (402928 <UART_Handler+0x88>)
  4028b2:	4798      	blx	r3
  4028b4:	b150      	cbz	r0, 4028cc <UART_Handler+0x2c>
		if(transmitIndex < responsePacketSize){
  4028b6:	4b1d      	ldr	r3, [pc, #116]	; (40292c <UART_Handler+0x8c>)
  4028b8:	881b      	ldrh	r3, [r3, #0]
  4028ba:	4a1d      	ldr	r2, [pc, #116]	; (402930 <UART_Handler+0x90>)
  4028bc:	8812      	ldrh	r2, [r2, #0]
  4028be:	429a      	cmp	r2, r3
  4028c0:	d813      	bhi.n	4028ea <UART_Handler+0x4a>
			uart_write(RS485Port, responsePacket[transmitIndex]);
			transmitIndex++;
		}else if(uart_is_tx_empty(RS485Port)){
  4028c2:	4b17      	ldr	r3, [pc, #92]	; (402920 <UART_Handler+0x80>)
  4028c4:	6818      	ldr	r0, [r3, #0]
  4028c6:	4b1b      	ldr	r3, [pc, #108]	; (402934 <UART_Handler+0x94>)
  4028c8:	4798      	blx	r3
  4028ca:	b9c8      	cbnz	r0, 402900 <UART_Handler+0x60>
  4028cc:	bd10      	pop	{r4, pc}
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head]));		//move the data into the next index of the rx buffer
  4028ce:	4c1a      	ldr	r4, [pc, #104]	; (402938 <UART_Handler+0x98>)
  4028d0:	8821      	ldrh	r1, [r4, #0]
  4028d2:	3104      	adds	r1, #4
  4028d4:	4421      	add	r1, r4
  4028d6:	4b12      	ldr	r3, [pc, #72]	; (402920 <UART_Handler+0x80>)
  4028d8:	6818      	ldr	r0, [r3, #0]
  4028da:	4b18      	ldr	r3, [pc, #96]	; (40293c <UART_Handler+0x9c>)
  4028dc:	4798      	blx	r3
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);		//iterate the head through the ring buffer
  4028de:	8823      	ldrh	r3, [r4, #0]
  4028e0:	3301      	adds	r3, #1
  4028e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4028e6:	8023      	strh	r3, [r4, #0]
  4028e8:	bd10      	pop	{r4, pc}
			uart_write(RS485Port, responsePacket[transmitIndex]);
  4028ea:	4a15      	ldr	r2, [pc, #84]	; (402940 <UART_Handler+0xa0>)
  4028ec:	5cd1      	ldrb	r1, [r2, r3]
  4028ee:	4b0c      	ldr	r3, [pc, #48]	; (402920 <UART_Handler+0x80>)
  4028f0:	6818      	ldr	r0, [r3, #0]
  4028f2:	4b14      	ldr	r3, [pc, #80]	; (402944 <UART_Handler+0xa4>)
  4028f4:	4798      	blx	r3
			transmitIndex++;
  4028f6:	4a0d      	ldr	r2, [pc, #52]	; (40292c <UART_Handler+0x8c>)
  4028f8:	8813      	ldrh	r3, [r2, #0]
  4028fa:	3301      	adds	r3, #1
  4028fc:	8013      	strh	r3, [r2, #0]
  4028fe:	bd10      	pop	{r4, pc}
			pio_clear(globalEnPinPort,globalEnPin);
  402900:	4b11      	ldr	r3, [pc, #68]	; (402948 <UART_Handler+0xa8>)
  402902:	6819      	ldr	r1, [r3, #0]
  402904:	4b11      	ldr	r3, [pc, #68]	; (40294c <UART_Handler+0xac>)
  402906:	6818      	ldr	r0, [r3, #0]
  402908:	4c11      	ldr	r4, [pc, #68]	; (402950 <UART_Handler+0xb0>)
  40290a:	47a0      	blx	r4
			pio_clear(RS485_NRE_PORT,RS485_NRE);
  40290c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402910:	4810      	ldr	r0, [pc, #64]	; (402954 <UART_Handler+0xb4>)
  402912:	47a0      	blx	r4
			uart_disable_interrupt(RS485Port,UART_IMR_TXRDY);
  402914:	2102      	movs	r1, #2
  402916:	4b02      	ldr	r3, [pc, #8]	; (402920 <UART_Handler+0x80>)
  402918:	6818      	ldr	r0, [r3, #0]
  40291a:	4b0f      	ldr	r3, [pc, #60]	; (402958 <UART_Handler+0xb8>)
  40291c:	4798      	blx	r3
		}
	}
}
  40291e:	e7d5      	b.n	4028cc <UART_Handler+0x2c>
  402920:	20001044 	.word	0x20001044
  402924:	0040312b 	.word	0x0040312b
  402928:	0040311b 	.word	0x0040311b
  40292c:	2000194e 	.word	0x2000194e
  402930:	20001b56 	.word	0x20001b56
  402934:	00403123 	.word	0x00403123
  402938:	20000b10 	.word	0x20000b10
  40293c:	00403143 	.word	0x00403143
  402940:	20001148 	.word	0x20001148
  402944:	00403133 	.word	0x00403133
  402948:	20001950 	.word	0x20001950
  40294c:	20001948 	.word	0x20001948
  402950:	00402d49 	.word	0x00402d49
  402954:	400e0e00 	.word	0x400e0e00
  402958:	00403117 	.word	0x00403117

0040295c <UART0_Handler>:


//Regardless of what UART port triggers the interrupt, the behavior is the same
void UART0_Handler(){
  40295c:	b508      	push	{r3, lr}
	UART_Handler();
  40295e:	4b01      	ldr	r3, [pc, #4]	; (402964 <UART0_Handler+0x8>)
  402960:	4798      	blx	r3
  402962:	bd08      	pop	{r3, pc}
  402964:	004028a1 	.word	0x004028a1

00402968 <UART1_Handler>:
}

void UART1_Handler(){
  402968:	b508      	push	{r3, lr}
	UART_Handler();
  40296a:	4b01      	ldr	r3, [pc, #4]	; (402970 <UART1_Handler+0x8>)
  40296c:	4798      	blx	r3
  40296e:	bd08      	pop	{r3, pc}
  402970:	004028a1 	.word	0x004028a1

00402974 <pop_packet>:
}

uint8_t* pop_packet(){
	static uint8_t returnPacket[RX_BUFFER_SIZE];
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402974:	4b0d      	ldr	r3, [pc, #52]	; (4029ac <pop_packet+0x38>)
  402976:	8819      	ldrh	r1, [r3, #0]
  402978:	b1a9      	cbz	r1, 4029a6 <pop_packet+0x32>
uint8_t* pop_packet(){
  40297a:	b410      	push	{r4}
  40297c:	4b0c      	ldr	r3, [pc, #48]	; (4029b0 <pop_packet+0x3c>)
  40297e:	885b      	ldrh	r3, [r3, #2]
  402980:	480c      	ldr	r0, [pc, #48]	; (4029b4 <pop_packet+0x40>)
  402982:	1e42      	subs	r2, r0, #1
  402984:	3901      	subs	r1, #1
  402986:	4408      	add	r0, r1
		returnPacket[i] = rxBuffer.data[rxBuffer.tail];
  402988:	4c09      	ldr	r4, [pc, #36]	; (4029b0 <pop_packet+0x3c>)
  40298a:	18e1      	adds	r1, r4, r3
  40298c:	7909      	ldrb	r1, [r1, #4]
  40298e:	f802 1f01 	strb.w	r1, [r2, #1]!
		rxBuffer.tail = PKT_WRAP_ARND(rxBuffer.tail + 1);	//iterate the tail
  402992:	3301      	adds	r3, #1
  402994:	f3c3 0309 	ubfx	r3, r3, #0, #10
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402998:	4282      	cmp	r2, r0
  40299a:	d1f6      	bne.n	40298a <pop_packet+0x16>
  40299c:	4a04      	ldr	r2, [pc, #16]	; (4029b0 <pop_packet+0x3c>)
  40299e:	8053      	strh	r3, [r2, #2]
	}
	return returnPacket;									//return
}
  4029a0:	4804      	ldr	r0, [pc, #16]	; (4029b4 <pop_packet+0x40>)
  4029a2:	bc10      	pop	{r4}
  4029a4:	4770      	bx	lr
  4029a6:	4803      	ldr	r0, [pc, #12]	; (4029b4 <pop_packet+0x40>)
  4029a8:	4770      	bx	lr
  4029aa:	bf00      	nop
  4029ac:	2000194c 	.word	0x2000194c
  4029b0:	20000b10 	.word	0x20000b10
  4029b4:	20000710 	.word	0x20000710

004029b8 <buffer_get_data_sz>:

uint16_t buffer_get_data_sz(void) {
	if (rxBuffer.head >= rxBuffer.tail) {
  4029b8:	4b04      	ldr	r3, [pc, #16]	; (4029cc <buffer_get_data_sz+0x14>)
  4029ba:	8818      	ldrh	r0, [r3, #0]
  4029bc:	885b      	ldrh	r3, [r3, #2]
  4029be:	4298      	cmp	r0, r3
		return rxBuffer.head - rxBuffer.tail;
	} else {
		return (RX_BUFFER_SIZE - rxBuffer.tail) + rxBuffer.head;
  4029c0:	bf38      	it	cc
  4029c2:	f500 6080 	addcc.w	r0, r0, #1024	; 0x400
  4029c6:	1ac0      	subs	r0, r0, r3
  4029c8:	b280      	uxth	r0, r0
	}
}
  4029ca:	4770      	bx	lr
  4029cc:	20000b10 	.word	0x20000b10

004029d0 <ModRTU_CRC>:

uint16_t ModRTU_CRC(uint8_t* buf, int len)
{
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++) {
  4029d0:	2900      	cmp	r1, #0
  4029d2:	dd16      	ble.n	402a02 <ModRTU_CRC+0x32>
{
  4029d4:	b410      	push	{r4}
  4029d6:	4604      	mov	r4, r0
  4029d8:	4401      	add	r1, r0
	for (int pos = 0; pos < len; pos++) {
  4029da:	f64f 70ff 	movw	r0, #65535	; 0xffff
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc

		for (int i = 8; i != 0; i--) {    // Loop over each bit
			if ((crc & 0x0001) != 0) {      // If the LSB is set
				crc >>= 1;                    // Shift right and XOR 0xA001
				crc ^= 0xA001;
  4029de:	f24a 0201 	movw	r2, #40961	; 0xa001
  4029e2:	e001      	b.n	4029e8 <ModRTU_CRC+0x18>
	for (int pos = 0; pos < len; pos++) {
  4029e4:	428c      	cmp	r4, r1
  4029e6:	d00f      	beq.n	402a08 <ModRTU_CRC+0x38>
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc
  4029e8:	f814 3b01 	ldrb.w	r3, [r4], #1
  4029ec:	4058      	eors	r0, r3
  4029ee:	2308      	movs	r3, #8
			if ((crc & 0x0001) != 0) {      // If the LSB is set
  4029f0:	f010 0f01 	tst.w	r0, #1
				crc ^= 0xA001;
  4029f4:	bf14      	ite	ne
  4029f6:	ea82 0050 	eorne.w	r0, r2, r0, lsr #1
			}
			else                            // Else LSB is not set
			crc >>= 1;                    // Just shift right
  4029fa:	0840      	lsreq	r0, r0, #1
		for (int i = 8; i != 0; i--) {    // Loop over each bit
  4029fc:	3b01      	subs	r3, #1
  4029fe:	d1f7      	bne.n	4029f0 <ModRTU_CRC+0x20>
  402a00:	e7f0      	b.n	4029e4 <ModRTU_CRC+0x14>
	uint16_t crc = 0xFFFF;
  402a02:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402a06:	4770      	bx	lr
		}
	}
	
	return crc;
  402a08:	bc10      	pop	{r4}
  402a0a:	4770      	bx	lr

00402a0c <packet_complete>:
bool packet_complete(){
  402a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a10:	af00      	add	r7, sp, #0
	packetSize = 0;																	// Reset this in case packet is not complete
  402a12:	2200      	movs	r2, #0
  402a14:	4b53      	ldr	r3, [pc, #332]	; (402b64 <packet_complete+0x158>)
  402a16:	801a      	strh	r2, [r3, #0]
	uint8_t func_code = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + FC_IDX)];
  402a18:	4b53      	ldr	r3, [pc, #332]	; (402b68 <packet_complete+0x15c>)
  402a1a:	885c      	ldrh	r4, [r3, #2]
  402a1c:	1c62      	adds	r2, r4, #1
  402a1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
  402a22:	4413      	add	r3, r2
  402a24:	791b      	ldrb	r3, [r3, #4]
	if((func_code != FC_WRITE_MULT) && (func_code != FC_READ_MULT)){				//if the function code isn't write or read, we know somethings fucked up
  402a26:	2b10      	cmp	r3, #16
  402a28:	f000 8087 	beq.w	402b3a <packet_complete+0x12e>
  402a2c:	2b03      	cmp	r3, #3
  402a2e:	d076      	beq.n	402b1e <packet_complete+0x112>
		uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX);
  402a30:	4613      	mov	r3, r2
		while(checkByte != FC_READ_MULT && checkByte != FC_WRITE_MULT && FCLoc != rxBuffer.head){
  402a32:	4a4d      	ldr	r2, [pc, #308]	; (402b68 <packet_complete+0x15c>)
  402a34:	8811      	ldrh	r1, [r2, #0]
  402a36:	428b      	cmp	r3, r1
  402a38:	d01a      	beq.n	402a70 <packet_complete+0x64>
			checkByte = rxBuffer.data[FCLoc];
  402a3a:	4610      	mov	r0, r2
			FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402a3c:	3301      	adds	r3, #1
  402a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
			checkByte = rxBuffer.data[FCLoc];
  402a42:	18c2      	adds	r2, r0, r3
  402a44:	7912      	ldrb	r2, [r2, #4]
		while(checkByte != FC_READ_MULT && checkByte != FC_WRITE_MULT && FCLoc != rxBuffer.head){
  402a46:	2a03      	cmp	r2, #3
  402a48:	d004      	beq.n	402a54 <packet_complete+0x48>
  402a4a:	2a10      	cmp	r2, #16
  402a4c:	d002      	beq.n	402a54 <packet_complete+0x48>
  402a4e:	428b      	cmp	r3, r1
  402a50:	d1f4      	bne.n	402a3c <packet_complete+0x30>
			FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402a52:	460b      	mov	r3, r1
		if(PKT_WRAP_ARND(FCLoc-1) >= rxBuffer.tail){
  402a54:	1e5a      	subs	r2, r3, #1
  402a56:	f3c2 0209 	ubfx	r2, r2, #0, #10
  402a5a:	4294      	cmp	r4, r2
  402a5c:	dc0a      	bgt.n	402a74 <packet_complete+0x68>
			packetSize = PKT_WRAP_ARND(FCLoc-1) - rxBuffer.tail;
  402a5e:	1b13      	subs	r3, r2, r4
  402a60:	4a40      	ldr	r2, [pc, #256]	; (402b64 <packet_complete+0x158>)
  402a62:	8013      	strh	r3, [r2, #0]
		pop_packet();
  402a64:	4b41      	ldr	r3, [pc, #260]	; (402b6c <packet_complete+0x160>)
  402a66:	4798      	blx	r3
		return false;																
  402a68:	2000      	movs	r0, #0
}
  402a6a:	46bd      	mov	sp, r7
  402a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX);
  402a70:	460b      	mov	r3, r1
  402a72:	e7ef      	b.n	402a54 <packet_complete+0x48>
			packetSize = (RX_BUFFER_SIZE - rxBuffer.tail) + PKT_WRAP_ARND(FCLoc-1);
  402a74:	3b01      	subs	r3, #1
  402a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402a7a:	f5c4 6480 	rsb	r4, r4, #1024	; 0x400
  402a7e:	4423      	add	r3, r4
  402a80:	4a38      	ldr	r2, [pc, #224]	; (402b64 <packet_complete+0x158>)
  402a82:	8013      	strh	r3, [r2, #0]
  402a84:	e7ee      	b.n	402a64 <packet_complete+0x58>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  402a86:	4b3a      	ldr	r3, [pc, #232]	; (402b70 <packet_complete+0x164>)
  402a88:	4798      	blx	r3
  402a8a:	2809      	cmp	r0, #9
  402a8c:	d943      	bls.n	402b16 <packet_complete+0x10a>
		num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + WR_DATA_SIZE_IDX)];		//get supposed number of data bytes from the packet
  402a8e:	1da3      	adds	r3, r4, #6
  402a90:	f3c3 0209 	ubfx	r2, r3, #0, #10
  402a94:	4b34      	ldr	r3, [pc, #208]	; (402b68 <packet_complete+0x15c>)
  402a96:	4413      	add	r3, r2
  402a98:	791b      	ldrb	r3, [r3, #4]
		base_pkt_sz = ABS_MIN_WRITE_PACKET_SIZE - 1;											
  402a9a:	2509      	movs	r5, #9
  402a9c:	e05a      	b.n	402b54 <packet_complete+0x148>
	packetSize = full_pkt_sz;															// Set global packetSize to completed packet size
  402a9e:	4b31      	ldr	r3, [pc, #196]	; (402b64 <packet_complete+0x158>)
  402aa0:	801d      	strh	r5, [r3, #0]
	uint8_t packetNoCRC[packetSize - CRC_SIZE];											//pull packet into linear buffer for crc check
  402aa2:	1ea9      	subs	r1, r5, #2
  402aa4:	466e      	mov	r6, sp
  402aa6:	1d6b      	adds	r3, r5, #5
  402aa8:	f023 0307 	bic.w	r3, r3, #7
  402aac:	ebad 0d03 	sub.w	sp, sp, r3
  402ab0:	4668      	mov	r0, sp
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  402ab2:	2900      	cmp	r1, #0
  402ab4:	dd10      	ble.n	402ad8 <packet_complete+0xcc>
  402ab6:	460d      	mov	r5, r1
  402ab8:	446d      	add	r5, sp
  402aba:	466a      	mov	r2, sp
		packetNoCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + i)];
  402abc:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 402b68 <packet_complete+0x15c>
  402ac0:	eba4 0e00 	sub.w	lr, r4, r0
  402ac4:	eb0e 0302 	add.w	r3, lr, r2
  402ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402acc:	4463      	add	r3, ip
  402ace:	791b      	ldrb	r3, [r3, #4]
  402ad0:	f802 3b01 	strb.w	r3, [r2], #1
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  402ad4:	42aa      	cmp	r2, r5
  402ad6:	d1f5      	bne.n	402ac4 <packet_complete+0xb8>
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402ad8:	440c      	add	r4, r1
  402ada:	4d23      	ldr	r5, [pc, #140]	; (402b68 <packet_complete+0x15c>)
  402adc:	f3c4 0309 	ubfx	r3, r4, #0, #10
  402ae0:	442b      	add	r3, r5
  402ae2:	f893 8004 	ldrb.w	r8, [r3, #4]
	uint16_t expectedCRC = ModRTU_CRC(packetNoCRC, packetSize - CRC_SIZE);				//calculate expected crc
  402ae6:	4b23      	ldr	r3, [pc, #140]	; (402b74 <packet_complete+0x168>)
  402ae8:	4798      	blx	r3
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402aea:	3401      	adds	r4, #1
  402aec:	f3c4 0409 	ubfx	r4, r4, #0, #10
  402af0:	442c      	add	r4, r5
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  402af2:	7922      	ldrb	r2, [r4, #4]
  402af4:	f3c0 230f 	ubfx	r3, r0, #8, #16
  402af8:	429a      	cmp	r2, r3
  402afa:	d007      	beq.n	402b0c <packet_complete+0x100>
		packetSize = 1;
  402afc:	2201      	movs	r2, #1
  402afe:	4b19      	ldr	r3, [pc, #100]	; (402b64 <packet_complete+0x158>)
  402b00:	801a      	strh	r2, [r3, #0]
		pop_packet();
  402b02:	4b1a      	ldr	r3, [pc, #104]	; (402b6c <packet_complete+0x160>)
  402b04:	4798      	blx	r3
		return false;
  402b06:	2000      	movs	r0, #0
  402b08:	46b5      	mov	sp, r6
  402b0a:	e7ae      	b.n	402a6a <packet_complete+0x5e>
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  402b0c:	b2c0      	uxtb	r0, r0
  402b0e:	4540      	cmp	r0, r8
  402b10:	d1f4      	bne.n	402afc <packet_complete+0xf0>
		return true;																	//packet is complete and passes crc
  402b12:	2001      	movs	r0, #1
  402b14:	e7f8      	b.n	402b08 <packet_complete+0xfc>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  402b16:	2000      	movs	r0, #0
  402b18:	e7a7      	b.n	402a6a <packet_complete+0x5e>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  402b1a:	2000      	movs	r0, #0
  402b1c:	e7a5      	b.n	402a6a <packet_complete+0x5e>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  402b1e:	f3c4 0209 	ubfx	r2, r4, #0, #10
  402b22:	4b11      	ldr	r3, [pc, #68]	; (402b68 <packet_complete+0x15c>)
  402b24:	4413      	add	r3, r2
	((func_code == FC_READ_MULT) && slave_id != 0)) {
  402b26:	791b      	ldrb	r3, [r3, #4]
  402b28:	b973      	cbnz	r3, 402b48 <packet_complete+0x13c>
		num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + RD_DATA_SIZE_IDX)];
  402b2a:	1ca3      	adds	r3, r4, #2
  402b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
  402b30:	4b0d      	ldr	r3, [pc, #52]	; (402b68 <packet_complete+0x15c>)
  402b32:	4413      	add	r3, r2
  402b34:	791b      	ldrb	r3, [r3, #4]
		base_pkt_sz = ABS_MIN_READ_RES_PACKET_SIZE - 1;
  402b36:	2505      	movs	r5, #5
  402b38:	e00c      	b.n	402b54 <packet_complete+0x148>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  402b3a:	f3c4 0209 	ubfx	r2, r4, #0, #10
  402b3e:	4b0a      	ldr	r3, [pc, #40]	; (402b68 <packet_complete+0x15c>)
  402b40:	4413      	add	r3, r2
	if (func_code == FC_WRITE_MULT && slave_id != 0) {
  402b42:	791b      	ldrb	r3, [r3, #4]
  402b44:	2b00      	cmp	r3, #0
  402b46:	d19e      	bne.n	402a86 <packet_complete+0x7a>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  402b48:	4b09      	ldr	r3, [pc, #36]	; (402b70 <packet_complete+0x164>)
  402b4a:	4798      	blx	r3
  402b4c:	2807      	cmp	r0, #7
  402b4e:	d9e4      	bls.n	402b1a <packet_complete+0x10e>
		base_pkt_sz = WRITE_RES_PACKET_SIZE;											//we know the final packet size
  402b50:	2508      	movs	r5, #8
	uint8_t num_data_bytes = 0;														// Default 0 for packets with no data bytes
  402b52:	2300      	movs	r3, #0
	uint16_t full_pkt_sz = num_data_bytes + base_pkt_sz;								//calculate full packet size
  402b54:	441d      	add	r5, r3
	if (buffer_get_data_sz() < full_pkt_sz) return false;								//make sure we have a full packet
  402b56:	4b06      	ldr	r3, [pc, #24]	; (402b70 <packet_complete+0x164>)
  402b58:	4798      	blx	r3
  402b5a:	4285      	cmp	r5, r0
  402b5c:	d99f      	bls.n	402a9e <packet_complete+0x92>
  402b5e:	2000      	movs	r0, #0
  402b60:	e783      	b.n	402a6a <packet_complete+0x5e>
  402b62:	bf00      	nop
  402b64:	2000194c 	.word	0x2000194c
  402b68:	20000b10 	.word	0x20000b10
  402b6c:	00402975 	.word	0x00402975
  402b70:	004029b9 	.word	0x004029b9
  402b74:	004029d1 	.word	0x004029d1

00402b78 <modbus_update>:
void modbus_update(void){
  402b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(buffer_get_data_sz() < ABS_MIN_PACKET_SIZE) return;			//if not enough data has been received just break out
  402b7a:	4b34      	ldr	r3, [pc, #208]	; (402c4c <modbus_update+0xd4>)
  402b7c:	4798      	blx	r3
  402b7e:	2805      	cmp	r0, #5
  402b80:	d800      	bhi.n	402b84 <modbus_update+0xc>
  402b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( !packet_complete()) return;									//check if an entire packet has been received otherwise return, also resolves overflow errors
  402b84:	4b32      	ldr	r3, [pc, #200]	; (402c50 <modbus_update+0xd8>)
  402b86:	4798      	blx	r3
  402b88:	2800      	cmp	r0, #0
  402b8a:	d0fa      	beq.n	402b82 <modbus_update+0xa>
	uint8_t* packet = pop_packet();									//packet is complete, so pull it out
  402b8c:	4b31      	ldr	r3, [pc, #196]	; (402c54 <modbus_update+0xdc>)
  402b8e:	4798      	blx	r3
  402b90:	4604      	mov	r4, r0
	if(packet[SLAVE_ID_IDX] != slaveID) return;						//disregard if the packet doesn't apply to this slave
  402b92:	7802      	ldrb	r2, [r0, #0]
  402b94:	4b30      	ldr	r3, [pc, #192]	; (402c58 <modbus_update+0xe0>)
  402b96:	781b      	ldrb	r3, [r3, #0]
  402b98:	429a      	cmp	r2, r3
  402b9a:	d1f2      	bne.n	402b82 <modbus_update+0xa>
	uint16_t start_reg = packet[START_REG_H_IDX] << 8 | packet[START_REG_L_IDX];
  402b9c:	7885      	ldrb	r5, [r0, #2]
  402b9e:	78c0      	ldrb	r0, [r0, #3]
  402ba0:	ea40 2605 	orr.w	r6, r0, r5, lsl #8
	uint16_t end_reg = packet[END_REG_H_IDX] << 8 | packet[END_REG_L_IDX];
  402ba4:	7921      	ldrb	r1, [r4, #4]
  402ba6:	7962      	ldrb	r2, [r4, #5]
  402ba8:	ea42 2701 	orr.w	r7, r2, r1, lsl #8
	switch(packet[FC_IDX]) {
  402bac:	7863      	ldrb	r3, [r4, #1]
  402bae:	2b03      	cmp	r3, #3
  402bb0:	d021      	beq.n	402bf6 <modbus_update+0x7e>
  402bb2:	2b10      	cmp	r3, #16
  402bb4:	d032      	beq.n	402c1c <modbus_update+0xa4>
	uint16_t responceCRC = ModRTU_CRC(responsePacket, responsePacketSize-CRC_SIZE);			//calculate crc
  402bb6:	4b29      	ldr	r3, [pc, #164]	; (402c5c <modbus_update+0xe4>)
  402bb8:	881d      	ldrh	r5, [r3, #0]
  402bba:	1eae      	subs	r6, r5, #2
  402bbc:	4c28      	ldr	r4, [pc, #160]	; (402c60 <modbus_update+0xe8>)
  402bbe:	4631      	mov	r1, r6
  402bc0:	4620      	mov	r0, r4
  402bc2:	4b28      	ldr	r3, [pc, #160]	; (402c64 <modbus_update+0xec>)
  402bc4:	4798      	blx	r3
	responsePacket[responsePacketSize-2] = responceCRC & 0xff;								//add CRC
  402bc6:	55a0      	strb	r0, [r4, r6]
	responsePacket[responsePacketSize-1] = (responceCRC>>8) & 0xff;
  402bc8:	442c      	add	r4, r5
  402bca:	0a00      	lsrs	r0, r0, #8
  402bcc:	f804 0c01 	strb.w	r0, [r4, #-1]
	pio_set(globalEnPinPort,globalEnPin);				//transceiver transmit enable
  402bd0:	4b25      	ldr	r3, [pc, #148]	; (402c68 <modbus_update+0xf0>)
  402bd2:	6819      	ldr	r1, [r3, #0]
  402bd4:	4b25      	ldr	r3, [pc, #148]	; (402c6c <modbus_update+0xf4>)
  402bd6:	6818      	ldr	r0, [r3, #0]
  402bd8:	4c25      	ldr	r4, [pc, #148]	; (402c70 <modbus_update+0xf8>)
  402bda:	47a0      	blx	r4
	pio_set(RS485_NRE_PORT,RS485_NRE);
  402bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402be0:	4824      	ldr	r0, [pc, #144]	; (402c74 <modbus_update+0xfc>)
  402be2:	47a0      	blx	r4
	transmitIndex = 0;
  402be4:	2200      	movs	r2, #0
  402be6:	4b24      	ldr	r3, [pc, #144]	; (402c78 <modbus_update+0x100>)
  402be8:	801a      	strh	r2, [r3, #0]
	uart_enable_interrupt(RS485Port,UART_IMR_TXRDY);
  402bea:	2102      	movs	r1, #2
  402bec:	4b23      	ldr	r3, [pc, #140]	; (402c7c <modbus_update+0x104>)
  402bee:	6818      	ldr	r0, [r3, #0]
  402bf0:	4b23      	ldr	r3, [pc, #140]	; (402c80 <modbus_update+0x108>)
  402bf2:	4798      	blx	r3
  402bf4:	e7c5      	b.n	402b82 <modbus_update+0xa>
			uint16_t read_num_bytes = getReadResponseDataSize(start_reg, end_reg);
  402bf6:	4639      	mov	r1, r7
  402bf8:	4630      	mov	r0, r6
  402bfa:	4b22      	ldr	r3, [pc, #136]	; (402c84 <modbus_update+0x10c>)
  402bfc:	4798      	blx	r3
			responsePacketSize = RD_RESP_PACKET_MIN_SIZE + read_num_bytes;
  402bfe:	1d42      	adds	r2, r0, #5
  402c00:	4b16      	ldr	r3, [pc, #88]	; (402c5c <modbus_update+0xe4>)
  402c02:	801a      	strh	r2, [r3, #0]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;						//this is how the protocol is now to help identify when the master or slave is speaking
  402c04:	4b16      	ldr	r3, [pc, #88]	; (402c60 <modbus_update+0xe8>)
  402c06:	2200      	movs	r2, #0
  402c08:	701a      	strb	r2, [r3, #0]
			responsePacket[FC_IDX] = packet[FC_IDX];
  402c0a:	7862      	ldrb	r2, [r4, #1]
  402c0c:	705a      	strb	r2, [r3, #1]
			responsePacket[RD_DATA_SIZE_IDX] = read_num_bytes;
  402c0e:	7098      	strb	r0, [r3, #2]
			readHandler(responsePacket+RD_DATA_BYTE_START, start_reg, end_reg);
  402c10:	463a      	mov	r2, r7
  402c12:	4631      	mov	r1, r6
  402c14:	1cd8      	adds	r0, r3, #3
  402c16:	4b1c      	ldr	r3, [pc, #112]	; (402c88 <modbus_update+0x110>)
  402c18:	4798      	blx	r3
			break;
  402c1a:	e7cc      	b.n	402bb6 <modbus_update+0x3e>
			responsePacketSize = WR_RESP_PACKET_SIZE;
  402c1c:	f04f 0e08 	mov.w	lr, #8
  402c20:	4b0e      	ldr	r3, [pc, #56]	; (402c5c <modbus_update+0xe4>)
  402c22:	f8a3 e000 	strh.w	lr, [r3]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;	
  402c26:	4b0e      	ldr	r3, [pc, #56]	; (402c60 <modbus_update+0xe8>)
  402c28:	f04f 0e00 	mov.w	lr, #0
  402c2c:	f883 e000 	strb.w	lr, [r3]
			responsePacket[FC_IDX] = packet[FC_IDX];
  402c30:	f894 e001 	ldrb.w	lr, [r4, #1]
  402c34:	f883 e001 	strb.w	lr, [r3, #1]
			responsePacket[START_REG_H_IDX] = packet[START_REG_H_IDX];
  402c38:	709d      	strb	r5, [r3, #2]
			responsePacket[START_REG_L_IDX] = packet[START_REG_L_IDX];
  402c3a:	70d8      	strb	r0, [r3, #3]
			responsePacket[END_REG_H_IDX] = packet[END_REG_H_IDX];
  402c3c:	7119      	strb	r1, [r3, #4]
			responsePacket[END_REG_L_IDX] = packet[END_REG_L_IDX];
  402c3e:	715a      	strb	r2, [r3, #5]
			writeHandler(&packet[WR_DATA_BYTE_START], start_reg, end_reg);
  402c40:	463a      	mov	r2, r7
  402c42:	4631      	mov	r1, r6
  402c44:	1de0      	adds	r0, r4, #7
  402c46:	4b11      	ldr	r3, [pc, #68]	; (402c8c <modbus_update+0x114>)
  402c48:	4798      	blx	r3
			break;
  402c4a:	e7b4      	b.n	402bb6 <modbus_update+0x3e>
  402c4c:	004029b9 	.word	0x004029b9
  402c50:	00402a0d 	.word	0x00402a0d
  402c54:	00402975 	.word	0x00402975
  402c58:	20001b58 	.word	0x20001b58
  402c5c:	20001b56 	.word	0x20001b56
  402c60:	20001148 	.word	0x20001148
  402c64:	004029d1 	.word	0x004029d1
  402c68:	20001950 	.word	0x20001950
  402c6c:	20001948 	.word	0x20001948
  402c70:	00402d45 	.word	0x00402d45
  402c74:	400e0e00 	.word	0x400e0e00
  402c78:	2000194e 	.word	0x2000194e
  402c7c:	20001044 	.word	0x20001044
  402c80:	00403113 	.word	0x00403113
  402c84:	00402711 	.word	0x00402711
  402c88:	0040251d 	.word	0x0040251d
  402c8c:	00402611 	.word	0x00402611

00402c90 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402c90:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402c92:	213e      	movs	r1, #62	; 0x3e
  402c94:	2000      	movs	r0, #0
  402c96:	4b0a      	ldr	r3, [pc, #40]	; (402cc0 <sysclk_enable_usb+0x30>)
  402c98:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402c9a:	4c0a      	ldr	r4, [pc, #40]	; (402cc4 <sysclk_enable_usb+0x34>)
  402c9c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402c9e:	2800      	cmp	r0, #0
  402ca0:	d0fc      	beq.n	402c9c <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402ca2:	4b09      	ldr	r3, [pc, #36]	; (402cc8 <sysclk_enable_usb+0x38>)
  402ca4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402ca6:	4a09      	ldr	r2, [pc, #36]	; (402ccc <sysclk_enable_usb+0x3c>)
  402ca8:	4b09      	ldr	r3, [pc, #36]	; (402cd0 <sysclk_enable_usb+0x40>)
  402caa:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  402cac:	4c09      	ldr	r4, [pc, #36]	; (402cd4 <sysclk_enable_usb+0x44>)
  402cae:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402cb0:	2800      	cmp	r0, #0
  402cb2:	d0fc      	beq.n	402cae <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402cb4:	2001      	movs	r0, #1
  402cb6:	4b08      	ldr	r3, [pc, #32]	; (402cd8 <sysclk_enable_usb+0x48>)
  402cb8:	4798      	blx	r3
		pmc_enable_udpck();
  402cba:	4b08      	ldr	r3, [pc, #32]	; (402cdc <sysclk_enable_usb+0x4c>)
  402cbc:	4798      	blx	r3
  402cbe:	bd10      	pop	{r4, pc}
  402cc0:	00402f55 	.word	0x00402f55
  402cc4:	00402fa9 	.word	0x00402fa9
  402cc8:	00402fd9 	.word	0x00402fd9
  402ccc:	000b3f02 	.word	0x000b3f02
  402cd0:	400e0400 	.word	0x400e0400
  402cd4:	00402fe5 	.word	0x00402fe5
  402cd8:	0040309d 	.word	0x0040309d
  402cdc:	004030b1 	.word	0x004030b1

00402ce0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402ce0:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402ce2:	480e      	ldr	r0, [pc, #56]	; (402d1c <sysclk_init+0x3c>)
  402ce4:	4b0e      	ldr	r3, [pc, #56]	; (402d20 <sysclk_init+0x40>)
  402ce6:	4798      	blx	r3
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402ce8:	213e      	movs	r1, #62	; 0x3e
  402cea:	2000      	movs	r0, #0
  402cec:	4b0d      	ldr	r3, [pc, #52]	; (402d24 <sysclk_init+0x44>)
  402cee:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  402cf0:	4c0d      	ldr	r4, [pc, #52]	; (402d28 <sysclk_init+0x48>)
  402cf2:	47a0      	blx	r4
  402cf4:	2800      	cmp	r0, #0
  402cf6:	d0fc      	beq.n	402cf2 <sysclk_init+0x12>
		pmc_disable_pllack(); // Always stop PLL first!
  402cf8:	4b0c      	ldr	r3, [pc, #48]	; (402d2c <sysclk_init+0x4c>)
  402cfa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402cfc:	4a0c      	ldr	r2, [pc, #48]	; (402d30 <sysclk_init+0x50>)
  402cfe:	4b0d      	ldr	r3, [pc, #52]	; (402d34 <sysclk_init+0x54>)
  402d00:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  402d02:	4c0d      	ldr	r4, [pc, #52]	; (402d38 <sysclk_init+0x58>)
  402d04:	47a0      	blx	r4
  402d06:	2800      	cmp	r0, #0
  402d08:	d0fc      	beq.n	402d04 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402d0a:	2000      	movs	r0, #0
  402d0c:	4b0b      	ldr	r3, [pc, #44]	; (402d3c <sysclk_init+0x5c>)
  402d0e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402d10:	4b0b      	ldr	r3, [pc, #44]	; (402d40 <sysclk_init+0x60>)
  402d12:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402d14:	4801      	ldr	r0, [pc, #4]	; (402d1c <sysclk_init+0x3c>)
  402d16:	4b02      	ldr	r3, [pc, #8]	; (402d20 <sysclk_init+0x40>)
  402d18:	4798      	blx	r3
  402d1a:	bd10      	pop	{r4, pc}
  402d1c:	07270e00 	.word	0x07270e00
  402d20:	00403471 	.word	0x00403471
  402d24:	00402f55 	.word	0x00402f55
  402d28:	00402fa9 	.word	0x00402fa9
  402d2c:	00402fb9 	.word	0x00402fb9
  402d30:	200e3f02 	.word	0x200e3f02
  402d34:	400e0400 	.word	0x400e0400
  402d38:	00402fc9 	.word	0x00402fc9
  402d3c:	00402ef1 	.word	0x00402ef1
  402d40:	0040335d 	.word	0x0040335d

00402d44 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402d44:	6301      	str	r1, [r0, #48]	; 0x30
  402d46:	4770      	bx	lr

00402d48 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402d48:	6341      	str	r1, [r0, #52]	; 0x34
  402d4a:	4770      	bx	lr

00402d4c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  402d4c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  402d50:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
  402d54:	bf0c      	ite	eq
  402d56:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
  402d58:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
  402d5a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  402d5c:	bf14      	ite	ne
  402d5e:	2001      	movne	r0, #1
  402d60:	2000      	moveq	r0, #0
  402d62:	4770      	bx	lr

00402d64 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402d64:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402d66:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402d6a:	d039      	beq.n	402de0 <pio_set_peripheral+0x7c>
  402d6c:	d813      	bhi.n	402d96 <pio_set_peripheral+0x32>
  402d6e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402d72:	d025      	beq.n	402dc0 <pio_set_peripheral+0x5c>
  402d74:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402d78:	d10a      	bne.n	402d90 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402d7a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402d7c:	4313      	orrs	r3, r2
  402d7e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402d80:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402d82:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402d84:	400b      	ands	r3, r1
  402d86:	ea23 0302 	bic.w	r3, r3, r2
  402d8a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402d8c:	6042      	str	r2, [r0, #4]
  402d8e:	4770      	bx	lr
	switch (ul_type) {
  402d90:	2900      	cmp	r1, #0
  402d92:	d1fb      	bne.n	402d8c <pio_set_peripheral+0x28>
  402d94:	4770      	bx	lr
  402d96:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402d9a:	d020      	beq.n	402dde <pio_set_peripheral+0x7a>
  402d9c:	d809      	bhi.n	402db2 <pio_set_peripheral+0x4e>
  402d9e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402da2:	d1f3      	bne.n	402d8c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402da4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402da6:	4313      	orrs	r3, r2
  402da8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402daa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402dac:	4313      	orrs	r3, r2
  402dae:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402db0:	e7ec      	b.n	402d8c <pio_set_peripheral+0x28>
	switch (ul_type) {
  402db2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402db6:	d012      	beq.n	402dde <pio_set_peripheral+0x7a>
  402db8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402dbc:	d00f      	beq.n	402dde <pio_set_peripheral+0x7a>
  402dbe:	e7e5      	b.n	402d8c <pio_set_peripheral+0x28>
{
  402dc0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402dc2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402dc4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402dc6:	43d3      	mvns	r3, r2
  402dc8:	4021      	ands	r1, r4
  402dca:	461c      	mov	r4, r3
  402dcc:	4019      	ands	r1, r3
  402dce:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402dd0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402dd2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402dd4:	400b      	ands	r3, r1
  402dd6:	4023      	ands	r3, r4
  402dd8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402dda:	6042      	str	r2, [r0, #4]
}
  402ddc:	bc10      	pop	{r4}
  402dde:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402de0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402de2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402de4:	400b      	ands	r3, r1
  402de6:	ea23 0302 	bic.w	r3, r3, r2
  402dea:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402dec:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402dee:	4313      	orrs	r3, r2
  402df0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402df2:	e7cb      	b.n	402d8c <pio_set_peripheral+0x28>

00402df4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402df4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402df6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  402dfa:	bf14      	ite	ne
  402dfc:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402dfe:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402e00:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  402e04:	bf14      	ite	ne
  402e06:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  402e08:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  402e0a:	f012 0f02 	tst.w	r2, #2
  402e0e:	d107      	bne.n	402e20 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402e10:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  402e14:	bf18      	it	ne
  402e16:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  402e1a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402e1c:	6001      	str	r1, [r0, #0]
  402e1e:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  402e20:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402e24:	e7f9      	b.n	402e1a <pio_set_input+0x26>

00402e26 <pio_set_output>:
{
  402e26:	b410      	push	{r4}
  402e28:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402e2a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402e2c:	b944      	cbnz	r4, 402e40 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  402e2e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402e30:	b143      	cbz	r3, 402e44 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  402e32:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402e34:	b942      	cbnz	r2, 402e48 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  402e36:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402e38:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402e3a:	6001      	str	r1, [r0, #0]
}
  402e3c:	bc10      	pop	{r4}
  402e3e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402e40:	6641      	str	r1, [r0, #100]	; 0x64
  402e42:	e7f5      	b.n	402e30 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  402e44:	6541      	str	r1, [r0, #84]	; 0x54
  402e46:	e7f5      	b.n	402e34 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402e48:	6301      	str	r1, [r0, #48]	; 0x30
  402e4a:	e7f5      	b.n	402e38 <pio_set_output+0x12>

00402e4c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402e4c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402e4e:	4770      	bx	lr

00402e50 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402e50:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402e52:	4770      	bx	lr

00402e54 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402e54:	0943      	lsrs	r3, r0, #5
  402e56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402e5a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402e5e:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  402e60:	6b99      	ldr	r1, [r3, #56]	; 0x38
  402e62:	f000 021f 	and.w	r2, r0, #31
  402e66:	2001      	movs	r0, #1
  402e68:	4090      	lsls	r0, r2
  402e6a:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402e6c:	bf14      	ite	ne
  402e6e:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402e70:	6318      	streq	r0, [r3, #48]	; 0x30
  402e72:	4770      	bx	lr

00402e74 <pio_enable_pin_interrupt>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402e74:	0943      	lsrs	r3, r0, #5
  402e76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402e7a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402e7e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_IER = 1 << (ul_pin & 0x1F);
  402e80:	f000 001f 	and.w	r0, r0, #31
  402e84:	2201      	movs	r2, #1
  402e86:	fa02 f000 	lsl.w	r0, r2, r0
  402e8a:	6418      	str	r0, [r3, #64]	; 0x40
  402e8c:	4770      	bx	lr
	...

00402e90 <pmc_switch_mck_to_sclk>:
 */
uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402e90:	4b16      	ldr	r3, [pc, #88]	; (402eec <pmc_switch_mck_to_sclk+0x5c>)
  402e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e94:	f022 0203 	bic.w	r2, r2, #3
  402e98:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402e9c:	f013 0f08 	tst.w	r3, #8
  402ea0:	d10a      	bne.n	402eb8 <pmc_switch_mck_to_sclk+0x28>
  402ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402ea6:	4911      	ldr	r1, [pc, #68]	; (402eec <pmc_switch_mck_to_sclk+0x5c>)
  402ea8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402eaa:	f012 0f08 	tst.w	r2, #8
  402eae:	d103      	bne.n	402eb8 <pmc_switch_mck_to_sclk+0x28>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402eb0:	3b01      	subs	r3, #1
  402eb2:	d1f9      	bne.n	402ea8 <pmc_switch_mck_to_sclk+0x18>
			return 1;
  402eb4:	2001      	movs	r0, #1
  402eb6:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402eb8:	4a0c      	ldr	r2, [pc, #48]	; (402eec <pmc_switch_mck_to_sclk+0x5c>)
  402eba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402ec0:	4318      	orrs	r0, r3
  402ec2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ec4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402ec6:	f013 0f08 	tst.w	r3, #8
  402eca:	d10a      	bne.n	402ee2 <pmc_switch_mck_to_sclk+0x52>
  402ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402ed0:	4906      	ldr	r1, [pc, #24]	; (402eec <pmc_switch_mck_to_sclk+0x5c>)
  402ed2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402ed4:	f012 0f08 	tst.w	r2, #8
  402ed8:	d105      	bne.n	402ee6 <pmc_switch_mck_to_sclk+0x56>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402eda:	3b01      	subs	r3, #1
  402edc:	d1f9      	bne.n	402ed2 <pmc_switch_mck_to_sclk+0x42>
			return 1;
  402ede:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402ee0:	4770      	bx	lr
	return 0;
  402ee2:	2000      	movs	r0, #0
  402ee4:	4770      	bx	lr
  402ee6:	2000      	movs	r0, #0
  402ee8:	4770      	bx	lr
  402eea:	bf00      	nop
  402eec:	400e0400 	.word	0x400e0400

00402ef0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402ef0:	4a17      	ldr	r2, [pc, #92]	; (402f50 <pmc_switch_mck_to_pllack+0x60>)
  402ef2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402ef8:	4318      	orrs	r0, r3
  402efa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402efc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402efe:	f013 0f08 	tst.w	r3, #8
  402f02:	d10a      	bne.n	402f1a <pmc_switch_mck_to_pllack+0x2a>
  402f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402f08:	4911      	ldr	r1, [pc, #68]	; (402f50 <pmc_switch_mck_to_pllack+0x60>)
  402f0a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402f0c:	f012 0f08 	tst.w	r2, #8
  402f10:	d103      	bne.n	402f1a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402f12:	3b01      	subs	r3, #1
  402f14:	d1f9      	bne.n	402f0a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  402f16:	2001      	movs	r0, #1
  402f18:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402f1a:	4a0d      	ldr	r2, [pc, #52]	; (402f50 <pmc_switch_mck_to_pllack+0x60>)
  402f1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402f1e:	f023 0303 	bic.w	r3, r3, #3
  402f22:	f043 0302 	orr.w	r3, r3, #2
  402f26:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402f28:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f2a:	f013 0f08 	tst.w	r3, #8
  402f2e:	d10a      	bne.n	402f46 <pmc_switch_mck_to_pllack+0x56>
  402f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402f34:	4906      	ldr	r1, [pc, #24]	; (402f50 <pmc_switch_mck_to_pllack+0x60>)
  402f36:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402f38:	f012 0f08 	tst.w	r2, #8
  402f3c:	d105      	bne.n	402f4a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402f3e:	3b01      	subs	r3, #1
  402f40:	d1f9      	bne.n	402f36 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402f42:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402f44:	4770      	bx	lr
	return 0;
  402f46:	2000      	movs	r0, #0
  402f48:	4770      	bx	lr
  402f4a:	2000      	movs	r0, #0
  402f4c:	4770      	bx	lr
  402f4e:	bf00      	nop
  402f50:	400e0400 	.word	0x400e0400

00402f54 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402f54:	b9c8      	cbnz	r0, 402f8a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402f56:	4a11      	ldr	r2, [pc, #68]	; (402f9c <pmc_switch_mainck_to_xtal+0x48>)
  402f58:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402f5a:	0209      	lsls	r1, r1, #8
  402f5c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402f5e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402f62:	f023 0303 	bic.w	r3, r3, #3
  402f66:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402f6a:	f043 0301 	orr.w	r3, r3, #1
  402f6e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402f70:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402f72:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f74:	f013 0f01 	tst.w	r3, #1
  402f78:	d0fb      	beq.n	402f72 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402f7a:	4a08      	ldr	r2, [pc, #32]	; (402f9c <pmc_switch_mainck_to_xtal+0x48>)
  402f7c:	6a13      	ldr	r3, [r2, #32]
  402f7e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402f86:	6213      	str	r3, [r2, #32]
  402f88:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402f8a:	4904      	ldr	r1, [pc, #16]	; (402f9c <pmc_switch_mainck_to_xtal+0x48>)
  402f8c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402f8e:	4a04      	ldr	r2, [pc, #16]	; (402fa0 <pmc_switch_mainck_to_xtal+0x4c>)
  402f90:	401a      	ands	r2, r3
  402f92:	4b04      	ldr	r3, [pc, #16]	; (402fa4 <pmc_switch_mainck_to_xtal+0x50>)
  402f94:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402f96:	620b      	str	r3, [r1, #32]
  402f98:	4770      	bx	lr
  402f9a:	bf00      	nop
  402f9c:	400e0400 	.word	0x400e0400
  402fa0:	fec8fffc 	.word	0xfec8fffc
  402fa4:	01370002 	.word	0x01370002

00402fa8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402fa8:	4b02      	ldr	r3, [pc, #8]	; (402fb4 <pmc_osc_is_ready_mainck+0xc>)
  402faa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402fac:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402fb0:	4770      	bx	lr
  402fb2:	bf00      	nop
  402fb4:	400e0400 	.word	0x400e0400

00402fb8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402fb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402fbc:	4b01      	ldr	r3, [pc, #4]	; (402fc4 <pmc_disable_pllack+0xc>)
  402fbe:	629a      	str	r2, [r3, #40]	; 0x28
  402fc0:	4770      	bx	lr
  402fc2:	bf00      	nop
  402fc4:	400e0400 	.word	0x400e0400

00402fc8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402fc8:	4b02      	ldr	r3, [pc, #8]	; (402fd4 <pmc_is_locked_pllack+0xc>)
  402fca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402fcc:	f000 0002 	and.w	r0, r0, #2
  402fd0:	4770      	bx	lr
  402fd2:	bf00      	nop
  402fd4:	400e0400 	.word	0x400e0400

00402fd8 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402fd8:	2200      	movs	r2, #0
  402fda:	4b01      	ldr	r3, [pc, #4]	; (402fe0 <pmc_disable_pllbck+0x8>)
  402fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  402fde:	4770      	bx	lr
  402fe0:	400e0400 	.word	0x400e0400

00402fe4 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402fe4:	4b02      	ldr	r3, [pc, #8]	; (402ff0 <pmc_is_locked_pllbck+0xc>)
  402fe6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402fe8:	f000 0004 	and.w	r0, r0, #4
  402fec:	4770      	bx	lr
  402fee:	bf00      	nop
  402ff0:	400e0400 	.word	0x400e0400

00402ff4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402ff4:	2822      	cmp	r0, #34	; 0x22
  402ff6:	d81e      	bhi.n	403036 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402ff8:	281f      	cmp	r0, #31
  402ffa:	d80c      	bhi.n	403016 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402ffc:	4b11      	ldr	r3, [pc, #68]	; (403044 <pmc_enable_periph_clk+0x50>)
  402ffe:	699a      	ldr	r2, [r3, #24]
  403000:	2301      	movs	r3, #1
  403002:	4083      	lsls	r3, r0
  403004:	4393      	bics	r3, r2
  403006:	d018      	beq.n	40303a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403008:	2301      	movs	r3, #1
  40300a:	fa03 f000 	lsl.w	r0, r3, r0
  40300e:	4b0d      	ldr	r3, [pc, #52]	; (403044 <pmc_enable_periph_clk+0x50>)
  403010:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403012:	2000      	movs	r0, #0
  403014:	4770      	bx	lr
		ul_id -= 32;
  403016:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403018:	4b0a      	ldr	r3, [pc, #40]	; (403044 <pmc_enable_periph_clk+0x50>)
  40301a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40301e:	2301      	movs	r3, #1
  403020:	4083      	lsls	r3, r0
  403022:	4393      	bics	r3, r2
  403024:	d00b      	beq.n	40303e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  403026:	2301      	movs	r3, #1
  403028:	fa03 f000 	lsl.w	r0, r3, r0
  40302c:	4b05      	ldr	r3, [pc, #20]	; (403044 <pmc_enable_periph_clk+0x50>)
  40302e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  403032:	2000      	movs	r0, #0
  403034:	4770      	bx	lr
		return 1;
  403036:	2001      	movs	r0, #1
  403038:	4770      	bx	lr
	return 0;
  40303a:	2000      	movs	r0, #0
  40303c:	4770      	bx	lr
  40303e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403040:	4770      	bx	lr
  403042:	bf00      	nop
  403044:	400e0400 	.word	0x400e0400

00403048 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  403048:	2822      	cmp	r0, #34	; 0x22
  40304a:	d822      	bhi.n	403092 <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  40304c:	281f      	cmp	r0, #31
  40304e:	d80e      	bhi.n	40306e <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  403050:	4b11      	ldr	r3, [pc, #68]	; (403098 <pmc_disable_periph_clk+0x50>)
  403052:	699a      	ldr	r2, [r3, #24]
  403054:	2301      	movs	r3, #1
  403056:	4083      	lsls	r3, r0
  403058:	4393      	bics	r3, r2
  40305a:	d001      	beq.n	403060 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40305c:	2000      	movs	r0, #0
  40305e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  403060:	2301      	movs	r3, #1
  403062:	fa03 f000 	lsl.w	r0, r3, r0
  403066:	4b0c      	ldr	r3, [pc, #48]	; (403098 <pmc_disable_periph_clk+0x50>)
  403068:	6158      	str	r0, [r3, #20]
	return 0;
  40306a:	2000      	movs	r0, #0
  40306c:	4770      	bx	lr
		ul_id -= 32;
  40306e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  403070:	4b09      	ldr	r3, [pc, #36]	; (403098 <pmc_disable_periph_clk+0x50>)
  403072:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403076:	2301      	movs	r3, #1
  403078:	4083      	lsls	r3, r0
  40307a:	4393      	bics	r3, r2
  40307c:	d001      	beq.n	403082 <pmc_disable_periph_clk+0x3a>
	return 0;
  40307e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403080:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  403082:	2301      	movs	r3, #1
  403084:	fa03 f000 	lsl.w	r0, r3, r0
  403088:	4b03      	ldr	r3, [pc, #12]	; (403098 <pmc_disable_periph_clk+0x50>)
  40308a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  40308e:	2000      	movs	r0, #0
  403090:	4770      	bx	lr
		return 1;
  403092:	2001      	movs	r0, #1
  403094:	4770      	bx	lr
  403096:	bf00      	nop
  403098:	400e0400 	.word	0x400e0400

0040309c <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  40309c:	0200      	lsls	r0, r0, #8
  40309e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4030a2:	f040 0001 	orr.w	r0, r0, #1
  4030a6:	4b01      	ldr	r3, [pc, #4]	; (4030ac <pmc_switch_udpck_to_pllbck+0x10>)
  4030a8:	6398      	str	r0, [r3, #56]	; 0x38
  4030aa:	4770      	bx	lr
  4030ac:	400e0400 	.word	0x400e0400

004030b0 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4030b0:	2280      	movs	r2, #128	; 0x80
  4030b2:	4b01      	ldr	r3, [pc, #4]	; (4030b8 <pmc_enable_udpck+0x8>)
  4030b4:	601a      	str	r2, [r3, #0]
  4030b6:	4770      	bx	lr
  4030b8:	400e0400 	.word	0x400e0400

004030bc <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4030bc:	4b03      	ldr	r3, [pc, #12]	; (4030cc <pmc_set_fast_startup_input+0x10>)
  4030be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4030c0:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4030c4:	4310      	orrs	r0, r2
  4030c6:	6718      	str	r0, [r3, #112]	; 0x70
  4030c8:	4770      	bx	lr
  4030ca:	bf00      	nop
  4030cc:	400e0400 	.word	0x400e0400

004030d0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4030d0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4030d2:	23ac      	movs	r3, #172	; 0xac
  4030d4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4030d6:	680b      	ldr	r3, [r1, #0]
  4030d8:	684a      	ldr	r2, [r1, #4]
  4030da:	fbb3 f3f2 	udiv	r3, r3, r2
  4030de:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4030e0:	1e5c      	subs	r4, r3, #1
  4030e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4030e6:	4294      	cmp	r4, r2
  4030e8:	d80b      	bhi.n	403102 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4030ea:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4030ec:	688b      	ldr	r3, [r1, #8]
  4030ee:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4030f0:	f240 2302 	movw	r3, #514	; 0x202
  4030f4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4030f8:	2350      	movs	r3, #80	; 0x50
  4030fa:	6003      	str	r3, [r0, #0]

	return 0;
  4030fc:	2000      	movs	r0, #0
}
  4030fe:	bc10      	pop	{r4}
  403100:	4770      	bx	lr
		return 1;
  403102:	2001      	movs	r0, #1
  403104:	e7fb      	b.n	4030fe <uart_init+0x2e>

00403106 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  403106:	2340      	movs	r3, #64	; 0x40
  403108:	6003      	str	r3, [r0, #0]
  40310a:	4770      	bx	lr

0040310c <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  40310c:	2310      	movs	r3, #16
  40310e:	6003      	str	r3, [r0, #0]
  403110:	4770      	bx	lr

00403112 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  403112:	6081      	str	r1, [r0, #8]
  403114:	4770      	bx	lr

00403116 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  403116:	60c1      	str	r1, [r0, #12]
  403118:	4770      	bx	lr

0040311a <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  40311a:	6940      	ldr	r0, [r0, #20]
}
  40311c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403120:	4770      	bx	lr

00403122 <uart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  403122:	6940      	ldr	r0, [r0, #20]
}
  403124:	f3c0 2040 	ubfx	r0, r0, #9, #1
  403128:	4770      	bx	lr

0040312a <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  40312a:	6940      	ldr	r0, [r0, #20]
}
  40312c:	f000 0001 	and.w	r0, r0, #1
  403130:	4770      	bx	lr

00403132 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  403132:	6943      	ldr	r3, [r0, #20]
  403134:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  403138:	bf1a      	itte	ne
  40313a:	61c1      	strne	r1, [r0, #28]
	return 0;
  40313c:	2000      	movne	r0, #0
		return 1;
  40313e:	2001      	moveq	r0, #1
}
  403140:	4770      	bx	lr

00403142 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  403142:	6943      	ldr	r3, [r0, #20]
  403144:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  403148:	bf1d      	ittte	ne
  40314a:	6983      	ldrne	r3, [r0, #24]
  40314c:	700b      	strbne	r3, [r1, #0]
	return 0;
  40314e:	2000      	movne	r0, #0
		return 1;
  403150:	2001      	moveq	r0, #1
}
  403152:	4770      	bx	lr

00403154 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403154:	4b02      	ldr	r3, [pc, #8]	; (403160 <pmc_is_wakeup_clocks_restored+0xc>)
  403156:	7818      	ldrb	r0, [r3, #0]
}
  403158:	f080 0001 	eor.w	r0, r0, #1
  40315c:	4770      	bx	lr
  40315e:	bf00      	nop
  403160:	20000f14 	.word	0x20000f14

00403164 <board_init>:
#include <conf_board.h>
#include <modbus.h>
#include <registers.h>

void board_init(void)
{
  403164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403168:	b082      	sub	sp, #8
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	WDT->WDT_MR |= WDT_MR_WDDIS; // Disable watchdog timer to prevent uC resetting every 15 seconds :)
  40316a:	4a46      	ldr	r2, [pc, #280]	; (403284 <board_init+0x120>)
  40316c:	6853      	ldr	r3, [r2, #4]
  40316e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  403172:	6053      	str	r3, [r2, #4]
	//Enable USB Comm port so we can send debug data over serial to a computer (could be useful)
	//Configuration for this is in conf_usb.h
	
	//udc_start();
	
	pmc_enable_periph_clk(ID_PIOA);
  403174:	200b      	movs	r0, #11
  403176:	4c44      	ldr	r4, [pc, #272]	; (403288 <board_init+0x124>)
  403178:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40317a:	200c      	movs	r0, #12
  40317c:	47a0      	blx	r4
	
	pio_set_output(RS485_NRE_PORT,RS485_NRE,LOW,DISABLE,DISABLE);			//init modbus receive enable pin		//only necessary for low power mode builds
  40317e:	4d43      	ldr	r5, [pc, #268]	; (40328c <board_init+0x128>)
  403180:	2400      	movs	r4, #0
  403182:	9400      	str	r4, [sp, #0]
  403184:	4623      	mov	r3, r4
  403186:	4622      	mov	r2, r4
  403188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40318c:	4628      	mov	r0, r5
  40318e:	4e40      	ldr	r6, [pc, #256]	; (403290 <board_init+0x12c>)
  403190:	47b0      	blx	r6
	modbus_init(UART1,500000,RS485_DE_PORT,RS485_DE,SLAVEID);					//init modbus      //note this version of modbus has been modified to support sleep mode
  403192:	2701      	movs	r7, #1
  403194:	9700      	str	r7, [sp, #0]
  403196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40319a:	462a      	mov	r2, r5
  40319c:	493d      	ldr	r1, [pc, #244]	; (403294 <board_init+0x130>)
  40319e:	483e      	ldr	r0, [pc, #248]	; (403298 <board_init+0x134>)
  4031a0:	f8df 8104 	ldr.w	r8, [pc, #260]	; 4032a8 <board_init+0x144>
  4031a4:	47c0      	blx	r8
  4031a6:	f44f 6800 	mov.w	r8, #2048	; 0x800
  4031aa:	4b3c      	ldr	r3, [pc, #240]	; (40329c <board_init+0x138>)
  4031ac:	f8c3 8000 	str.w	r8, [r3]
	
	NVIC_EnableIRQ(PIOA_IRQn);
	pio_set_output(TEMP_SEL0_PORT,TEMP_SEL0,LOW,DISABLE,DISABLE);
  4031b0:	9400      	str	r4, [sp, #0]
  4031b2:	4623      	mov	r3, r4
  4031b4:	4622      	mov	r2, r4
  4031b6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4031ba:	4628      	mov	r0, r5
  4031bc:	47b0      	blx	r6
	pio_set_output(TEMP_SEL1_PORT,TEMP_SEL1,LOW,DISABLE,DISABLE);
  4031be:	9400      	str	r4, [sp, #0]
  4031c0:	4623      	mov	r3, r4
  4031c2:	4622      	mov	r2, r4
  4031c4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4031c8:	4628      	mov	r0, r5
  4031ca:	47b0      	blx	r6
	pio_set_output(TEMP_SEL2_PORT,TEMP_SEL2,LOW,DISABLE,DISABLE);
  4031cc:	9400      	str	r4, [sp, #0]
  4031ce:	4623      	mov	r3, r4
  4031d0:	4622      	mov	r2, r4
  4031d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4031d6:	4628      	mov	r0, r5
  4031d8:	47b0      	blx	r6
	
	pio_set_output(CELL_SEL0_PORT,CELL_SEL0,LOW,DISABLE,DISABLE);
  4031da:	9400      	str	r4, [sp, #0]
  4031dc:	4623      	mov	r3, r4
  4031de:	4622      	mov	r2, r4
  4031e0:	2110      	movs	r1, #16
  4031e2:	4628      	mov	r0, r5
  4031e4:	47b0      	blx	r6
	pio_set_output(CELL_SEL1_PORT,CELL_SEL0,LOW,DISABLE,DISABLE);
  4031e6:	9400      	str	r4, [sp, #0]
  4031e8:	4623      	mov	r3, r4
  4031ea:	4622      	mov	r2, r4
  4031ec:	2110      	movs	r1, #16
  4031ee:	4628      	mov	r0, r5
  4031f0:	47b0      	blx	r6
	pio_set_output(CELL_SEL2_PORT,CELL_SEL0,LOW,DISABLE,DISABLE);
  4031f2:	9400      	str	r4, [sp, #0]
  4031f4:	4623      	mov	r3, r4
  4031f6:	4622      	mov	r2, r4
  4031f8:	2110      	movs	r1, #16
  4031fa:	4628      	mov	r0, r5
  4031fc:	47b0      	blx	r6
	
	pio_set_output(AFE_EN_PORT,AFE_EN,HIGH,DISABLE,DISABLE);
  4031fe:	9400      	str	r4, [sp, #0]
  403200:	4623      	mov	r3, r4
  403202:	463a      	mov	r2, r7
  403204:	2180      	movs	r1, #128	; 0x80
  403206:	4628      	mov	r0, r5
  403208:	47b0      	blx	r6
	
	pio_set_output(NBAT_EN_PORT,NBAT_EN,HIGH,DISABLE,DISABLE);
  40320a:	9400      	str	r4, [sp, #0]
  40320c:	4623      	mov	r3, r4
  40320e:	463a      	mov	r2, r7
  403210:	4641      	mov	r1, r8
  403212:	4628      	mov	r0, r5
  403214:	47b0      	blx	r6
	
	pio_set_output(BOARD_LED_PORT,BOARD_LED,HIGH,DISABLE,DISABLE);
  403216:	9400      	str	r4, [sp, #0]
  403218:	4623      	mov	r3, r4
  40321a:	463a      	mov	r2, r7
  40321c:	2108      	movs	r1, #8
  40321e:	4628      	mov	r0, r5
  403220:	47b0      	blx	r6
	
	pio_set_input(PWR_SW_PORT,PWR_SW,PIO_DEBOUNCE);
  403222:	2208      	movs	r2, #8
  403224:	4639      	mov	r1, r7
  403226:	4628      	mov	r0, r5
  403228:	4e1d      	ldr	r6, [pc, #116]	; (4032a0 <board_init+0x13c>)
  40322a:	47b0      	blx	r6
	
	pio_set_input(USB_SNS_PORT,USB_SNS,PIO_DEBOUNCE);
  40322c:	2208      	movs	r2, #8
  40322e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  403232:	4628      	mov	r0, r5
  403234:	47b0      	blx	r6
	
	pio_set_input(CELLV_SNS_PORT,CELLV_SNS,NULL);
  403236:	4622      	mov	r2, r4
  403238:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40323c:	4628      	mov	r0, r5
  40323e:	47b0      	blx	r6
	
	pio_set_input(CURRENT_SNS_PORT,CURRENT_SNS,NULL);
  403240:	4622      	mov	r2, r4
  403242:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  403246:	4628      	mov	r0, r5
  403248:	47b0      	blx	r6
	
	pio_set_input(STACK_SNS_PORT,STACK_SNS,NULL);
  40324a:	4622      	mov	r2, r4
  40324c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403250:	4628      	mov	r0, r5
  403252:	47b0      	blx	r6
	
	pio_set_input(EXT_TEMP_SNS_PORT,EXT_TEMP_SNS,NULL);
  403254:	4622      	mov	r2, r4
  403256:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40325a:	4628      	mov	r0, r5
  40325c:	47b0      	blx	r6
	
	pio_set_input(FETTEMP_SNS_PORT,FETTEMP_SNS,NULL);
  40325e:	f505 7500 	add.w	r5, r5, #512	; 0x200
  403262:	4622      	mov	r2, r4
  403264:	4639      	mov	r1, r7
  403266:	4628      	mov	r0, r5
  403268:	47b0      	blx	r6
	
	pio_set_input(SHUNTTEMP_SNS_PORT,SHUNTTEMP_SNS,NULL);
  40326a:	4622      	mov	r2, r4
  40326c:	2102      	movs	r1, #2
  40326e:	4628      	mov	r0, r5
  403270:	47b0      	blx	r6
	
	pio_enable_pin_interrupt(0);
  403272:	4620      	mov	r0, r4
  403274:	4c0b      	ldr	r4, [pc, #44]	; (4032a4 <board_init+0x140>)
  403276:	47a0      	blx	r4
	pio_enable_pin_interrupt(14);
  403278:	200e      	movs	r0, #14
  40327a:	47a0      	blx	r4
	
  40327c:	b002      	add	sp, #8
  40327e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403282:	bf00      	nop
  403284:	400e1450 	.word	0x400e1450
  403288:	00402ff5 	.word	0x00402ff5
  40328c:	400e0e00 	.word	0x400e0e00
  403290:	00402e27 	.word	0x00402e27
  403294:	0007a120 	.word	0x0007a120
  403298:	400e0800 	.word	0x400e0800
  40329c:	e000e100 	.word	0xe000e100
  4032a0:	00402df5 	.word	0x00402df5
  4032a4:	00402e75 	.word	0x00402e75
  4032a8:	00402795 	.word	0x00402795

004032ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4032ac:	e7fe      	b.n	4032ac <Dummy_Handler>
	...

004032b0 <Reset_Handler>:
{
  4032b0:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4032b2:	4b21      	ldr	r3, [pc, #132]	; (403338 <Reset_Handler+0x88>)
  4032b4:	4a21      	ldr	r2, [pc, #132]	; (40333c <Reset_Handler+0x8c>)
  4032b6:	429a      	cmp	r2, r3
  4032b8:	d928      	bls.n	40330c <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4032ba:	4b21      	ldr	r3, [pc, #132]	; (403340 <Reset_Handler+0x90>)
  4032bc:	4a1e      	ldr	r2, [pc, #120]	; (403338 <Reset_Handler+0x88>)
  4032be:	429a      	cmp	r2, r3
  4032c0:	d20c      	bcs.n	4032dc <Reset_Handler+0x2c>
  4032c2:	3b01      	subs	r3, #1
  4032c4:	1a9b      	subs	r3, r3, r2
  4032c6:	f023 0303 	bic.w	r3, r3, #3
  4032ca:	3304      	adds	r3, #4
  4032cc:	4413      	add	r3, r2
  4032ce:	491b      	ldr	r1, [pc, #108]	; (40333c <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4032d0:	f851 0b04 	ldr.w	r0, [r1], #4
  4032d4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4032d8:	429a      	cmp	r2, r3
  4032da:	d1f9      	bne.n	4032d0 <Reset_Handler+0x20>
	__NOP();
  4032dc:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4032de:	4b19      	ldr	r3, [pc, #100]	; (403344 <Reset_Handler+0x94>)
  4032e0:	4a19      	ldr	r2, [pc, #100]	; (403348 <Reset_Handler+0x98>)
  4032e2:	429a      	cmp	r2, r3
  4032e4:	d20a      	bcs.n	4032fc <Reset_Handler+0x4c>
  4032e6:	3b01      	subs	r3, #1
  4032e8:	1a9b      	subs	r3, r3, r2
  4032ea:	f023 0303 	bic.w	r3, r3, #3
  4032ee:	3304      	adds	r3, #4
  4032f0:	4413      	add	r3, r2
		*pDest++ = 0;
  4032f2:	2100      	movs	r1, #0
  4032f4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4032f8:	429a      	cmp	r2, r3
  4032fa:	d1fb      	bne.n	4032f4 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  4032fc:	4b13      	ldr	r3, [pc, #76]	; (40334c <Reset_Handler+0x9c>)
  4032fe:	4a14      	ldr	r2, [pc, #80]	; (403350 <Reset_Handler+0xa0>)
  403300:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  403302:	4b14      	ldr	r3, [pc, #80]	; (403354 <Reset_Handler+0xa4>)
  403304:	4798      	blx	r3
	main();
  403306:	4b14      	ldr	r3, [pc, #80]	; (403358 <Reset_Handler+0xa8>)
  403308:	4798      	blx	r3
  40330a:	e7fe      	b.n	40330a <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  40330c:	4b0a      	ldr	r3, [pc, #40]	; (403338 <Reset_Handler+0x88>)
  40330e:	4a0b      	ldr	r2, [pc, #44]	; (40333c <Reset_Handler+0x8c>)
  403310:	429a      	cmp	r2, r3
  403312:	d2e3      	bcs.n	4032dc <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403314:	4b0a      	ldr	r3, [pc, #40]	; (403340 <Reset_Handler+0x90>)
  403316:	4808      	ldr	r0, [pc, #32]	; (403338 <Reset_Handler+0x88>)
  403318:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40331a:	4611      	mov	r1, r2
  40331c:	3a04      	subs	r2, #4
  40331e:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  403320:	2800      	cmp	r0, #0
  403322:	d0db      	beq.n	4032dc <Reset_Handler+0x2c>
  403324:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  403328:	f852 0904 	ldr.w	r0, [r2], #-4
  40332c:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  403330:	42ca      	cmn	r2, r1
  403332:	d1f9      	bne.n	403328 <Reset_Handler+0x78>
  403334:	e7d2      	b.n	4032dc <Reset_Handler+0x2c>
  403336:	bf00      	nop
  403338:	20000000 	.word	0x20000000
  40333c:	00405070 	.word	0x00405070
  403340:	200004dc 	.word	0x200004dc
  403344:	20003c1c 	.word	0x20003c1c
  403348:	200004dc 	.word	0x200004dc
  40334c:	e000ed00 	.word	0xe000ed00
  403350:	00400000 	.word	0x00400000
  403354:	00404ed1 	.word	0x00404ed1
  403358:	00403a4d 	.word	0x00403a4d

0040335c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40335c:	4b3c      	ldr	r3, [pc, #240]	; (403450 <SystemCoreClockUpdate+0xf4>)
  40335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403360:	f003 0303 	and.w	r3, r3, #3
  403364:	2b03      	cmp	r3, #3
  403366:	d80e      	bhi.n	403386 <SystemCoreClockUpdate+0x2a>
  403368:	e8df f003 	tbb	[pc, r3]
  40336c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403370:	4b38      	ldr	r3, [pc, #224]	; (403454 <SystemCoreClockUpdate+0xf8>)
  403372:	695b      	ldr	r3, [r3, #20]
  403374:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403378:	bf14      	ite	ne
  40337a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40337e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403382:	4b35      	ldr	r3, [pc, #212]	; (403458 <SystemCoreClockUpdate+0xfc>)
  403384:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403386:	4b32      	ldr	r3, [pc, #200]	; (403450 <SystemCoreClockUpdate+0xf4>)
  403388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40338a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40338e:	2b70      	cmp	r3, #112	; 0x70
  403390:	d055      	beq.n	40343e <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403392:	4b2f      	ldr	r3, [pc, #188]	; (403450 <SystemCoreClockUpdate+0xf4>)
  403394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  403396:	4930      	ldr	r1, [pc, #192]	; (403458 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403398:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  40339c:	680b      	ldr	r3, [r1, #0]
  40339e:	40d3      	lsrs	r3, r2
  4033a0:	600b      	str	r3, [r1, #0]
  4033a2:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4033a4:	4b2a      	ldr	r3, [pc, #168]	; (403450 <SystemCoreClockUpdate+0xf4>)
  4033a6:	6a1b      	ldr	r3, [r3, #32]
  4033a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4033ac:	d003      	beq.n	4033b6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4033ae:	4a2b      	ldr	r2, [pc, #172]	; (40345c <SystemCoreClockUpdate+0x100>)
  4033b0:	4b29      	ldr	r3, [pc, #164]	; (403458 <SystemCoreClockUpdate+0xfc>)
  4033b2:	601a      	str	r2, [r3, #0]
  4033b4:	e7e7      	b.n	403386 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4033b6:	4a2a      	ldr	r2, [pc, #168]	; (403460 <SystemCoreClockUpdate+0x104>)
  4033b8:	4b27      	ldr	r3, [pc, #156]	; (403458 <SystemCoreClockUpdate+0xfc>)
  4033ba:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4033bc:	4b24      	ldr	r3, [pc, #144]	; (403450 <SystemCoreClockUpdate+0xf4>)
  4033be:	6a1b      	ldr	r3, [r3, #32]
  4033c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4033c4:	2b10      	cmp	r3, #16
  4033c6:	d005      	beq.n	4033d4 <SystemCoreClockUpdate+0x78>
  4033c8:	2b20      	cmp	r3, #32
  4033ca:	d1dc      	bne.n	403386 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4033cc:	4a25      	ldr	r2, [pc, #148]	; (403464 <SystemCoreClockUpdate+0x108>)
  4033ce:	4b22      	ldr	r3, [pc, #136]	; (403458 <SystemCoreClockUpdate+0xfc>)
  4033d0:	601a      	str	r2, [r3, #0]
			break;
  4033d2:	e7d8      	b.n	403386 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4033d4:	4a24      	ldr	r2, [pc, #144]	; (403468 <SystemCoreClockUpdate+0x10c>)
  4033d6:	4b20      	ldr	r3, [pc, #128]	; (403458 <SystemCoreClockUpdate+0xfc>)
  4033d8:	601a      	str	r2, [r3, #0]
			break;
  4033da:	e7d4      	b.n	403386 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4033dc:	4b1c      	ldr	r3, [pc, #112]	; (403450 <SystemCoreClockUpdate+0xf4>)
  4033de:	6a1b      	ldr	r3, [r3, #32]
  4033e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4033e4:	d018      	beq.n	403418 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4033e6:	4a1d      	ldr	r2, [pc, #116]	; (40345c <SystemCoreClockUpdate+0x100>)
  4033e8:	4b1b      	ldr	r3, [pc, #108]	; (403458 <SystemCoreClockUpdate+0xfc>)
  4033ea:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4033ec:	4b18      	ldr	r3, [pc, #96]	; (403450 <SystemCoreClockUpdate+0xf4>)
  4033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4033f0:	f003 0303 	and.w	r3, r3, #3
  4033f4:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4033f6:	4a16      	ldr	r2, [pc, #88]	; (403450 <SystemCoreClockUpdate+0xf4>)
  4033f8:	bf07      	ittee	eq
  4033fa:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4033fc:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4033fe:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403400:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  403402:	4815      	ldr	r0, [pc, #84]	; (403458 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403404:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403408:	6803      	ldr	r3, [r0, #0]
  40340a:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40340e:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403410:	fbb3 f3f2 	udiv	r3, r3, r2
  403414:	6003      	str	r3, [r0, #0]
  403416:	e7b6      	b.n	403386 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403418:	4a11      	ldr	r2, [pc, #68]	; (403460 <SystemCoreClockUpdate+0x104>)
  40341a:	4b0f      	ldr	r3, [pc, #60]	; (403458 <SystemCoreClockUpdate+0xfc>)
  40341c:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40341e:	4b0c      	ldr	r3, [pc, #48]	; (403450 <SystemCoreClockUpdate+0xf4>)
  403420:	6a1b      	ldr	r3, [r3, #32]
  403422:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403426:	2b10      	cmp	r3, #16
  403428:	d005      	beq.n	403436 <SystemCoreClockUpdate+0xda>
  40342a:	2b20      	cmp	r3, #32
  40342c:	d1de      	bne.n	4033ec <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40342e:	4a0d      	ldr	r2, [pc, #52]	; (403464 <SystemCoreClockUpdate+0x108>)
  403430:	4b09      	ldr	r3, [pc, #36]	; (403458 <SystemCoreClockUpdate+0xfc>)
  403432:	601a      	str	r2, [r3, #0]
					break;
  403434:	e7da      	b.n	4033ec <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403436:	4a0c      	ldr	r2, [pc, #48]	; (403468 <SystemCoreClockUpdate+0x10c>)
  403438:	4b07      	ldr	r3, [pc, #28]	; (403458 <SystemCoreClockUpdate+0xfc>)
  40343a:	601a      	str	r2, [r3, #0]
					break;
  40343c:	e7d6      	b.n	4033ec <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40343e:	4a06      	ldr	r2, [pc, #24]	; (403458 <SystemCoreClockUpdate+0xfc>)
  403440:	6813      	ldr	r3, [r2, #0]
  403442:	490a      	ldr	r1, [pc, #40]	; (40346c <SystemCoreClockUpdate+0x110>)
  403444:	fba1 1303 	umull	r1, r3, r1, r3
  403448:	085b      	lsrs	r3, r3, #1
  40344a:	6013      	str	r3, [r2, #0]
  40344c:	4770      	bx	lr
  40344e:	bf00      	nop
  403450:	400e0400 	.word	0x400e0400
  403454:	400e1410 	.word	0x400e1410
  403458:	200000a4 	.word	0x200000a4
  40345c:	00f42400 	.word	0x00f42400
  403460:	003d0900 	.word	0x003d0900
  403464:	00b71b00 	.word	0x00b71b00
  403468:	007a1200 	.word	0x007a1200
  40346c:	aaaaaaab 	.word	0xaaaaaaab

00403470 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403470:	4b12      	ldr	r3, [pc, #72]	; (4034bc <system_init_flash+0x4c>)
  403472:	4298      	cmp	r0, r3
  403474:	d911      	bls.n	40349a <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403476:	4b12      	ldr	r3, [pc, #72]	; (4034c0 <system_init_flash+0x50>)
  403478:	4298      	cmp	r0, r3
  40347a:	d913      	bls.n	4034a4 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40347c:	4b11      	ldr	r3, [pc, #68]	; (4034c4 <system_init_flash+0x54>)
  40347e:	4298      	cmp	r0, r3
  403480:	d914      	bls.n	4034ac <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403482:	4b11      	ldr	r3, [pc, #68]	; (4034c8 <system_init_flash+0x58>)
  403484:	4298      	cmp	r0, r3
  403486:	d915      	bls.n	4034b4 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403488:	4b10      	ldr	r3, [pc, #64]	; (4034cc <system_init_flash+0x5c>)
  40348a:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40348c:	bf94      	ite	ls
  40348e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403492:	4a0f      	ldrhi	r2, [pc, #60]	; (4034d0 <system_init_flash+0x60>)
  403494:	4b0f      	ldr	r3, [pc, #60]	; (4034d4 <system_init_flash+0x64>)
  403496:	601a      	str	r2, [r3, #0]
  403498:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40349a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40349e:	4b0d      	ldr	r3, [pc, #52]	; (4034d4 <system_init_flash+0x64>)
  4034a0:	601a      	str	r2, [r3, #0]
  4034a2:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4034a4:	4a0c      	ldr	r2, [pc, #48]	; (4034d8 <system_init_flash+0x68>)
  4034a6:	4b0b      	ldr	r3, [pc, #44]	; (4034d4 <system_init_flash+0x64>)
  4034a8:	601a      	str	r2, [r3, #0]
  4034aa:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4034ac:	4a0b      	ldr	r2, [pc, #44]	; (4034dc <system_init_flash+0x6c>)
  4034ae:	4b09      	ldr	r3, [pc, #36]	; (4034d4 <system_init_flash+0x64>)
  4034b0:	601a      	str	r2, [r3, #0]
  4034b2:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4034b4:	4a0a      	ldr	r2, [pc, #40]	; (4034e0 <system_init_flash+0x70>)
  4034b6:	4b07      	ldr	r3, [pc, #28]	; (4034d4 <system_init_flash+0x64>)
  4034b8:	601a      	str	r2, [r3, #0]
  4034ba:	4770      	bx	lr
  4034bc:	01312cff 	.word	0x01312cff
  4034c0:	026259ff 	.word	0x026259ff
  4034c4:	039386ff 	.word	0x039386ff
  4034c8:	04c4b3ff 	.word	0x04c4b3ff
  4034cc:	05f5e0ff 	.word	0x05f5e0ff
  4034d0:	04000500 	.word	0x04000500
  4034d4:	400e0a00 	.word	0x400e0a00
  4034d8:	04000100 	.word	0x04000100
  4034dc:	04000200 	.word	0x04000200
  4034e0:	04000300 	.word	0x04000300

004034e4 <USBWakeUp>:

#include <asf.h>
#include <board.h>
#include <sleep_modes.h>

void USBWakeUp(){
  4034e4:	b508      	push	{r3, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4034e6:	2208      	movs	r2, #8
  4034e8:	4b08      	ldr	r3, [pc, #32]	; (40350c <USBWakeUp+0x28>)
  4034ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4034ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4034f2:	f3bf 8f6f 	isb	sy
	//Get out of sleep mode
	
	//disable RTT
	NVIC_DisableIRQ(RTT_IRQn);
	rtt_disable_interrupt(RTT,RTT_MR_ALMIEN);
  4034f6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4034fa:	4805      	ldr	r0, [pc, #20]	; (403510 <USBWakeUp+0x2c>)
  4034fc:	4b05      	ldr	r3, [pc, #20]	; (403514 <USBWakeUp+0x30>)
  4034fe:	4798      	blx	r3
	pmc_disable_periph_clk(ID_RTT);
  403500:	2003      	movs	r0, #3
  403502:	4b05      	ldr	r3, [pc, #20]	; (403518 <USBWakeUp+0x34>)
  403504:	4798      	blx	r3
	
	//start shit
	udc_start();
  403506:	4b05      	ldr	r3, [pc, #20]	; (40351c <USBWakeUp+0x38>)
  403508:	4798      	blx	r3
  40350a:	bd08      	pop	{r3, pc}
  40350c:	e000e100 	.word	0xe000e100
  403510:	400e1430 	.word	0x400e1430
  403514:	00400d2d 	.word	0x00400d2d
  403518:	00403049 	.word	0x00403049
  40351c:	0040077d 	.word	0x0040077d

00403520 <PWRSwitchWakeUp>:
	
}

void PWRSwitchWakeUp(){
  403520:	b538      	push	{r3, r4, r5, lr}
	//sysclk_init();
	//turn on everything
	pio_clear(NBAT_EN_PORT,NBAT_EN);
  403522:	4c09      	ldr	r4, [pc, #36]	; (403548 <PWRSwitchWakeUp+0x28>)
  403524:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403528:	4620      	mov	r0, r4
  40352a:	4d08      	ldr	r5, [pc, #32]	; (40354c <PWRSwitchWakeUp+0x2c>)
  40352c:	47a8      	blx	r5
	pio_clear(RS485_NRE_PORT,RS485_NRE);
  40352e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403532:	4620      	mov	r0, r4
  403534:	47a8      	blx	r5
	pio_clear(RS485_DE_PORT,RS485_DE);
  403536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40353a:	4620      	mov	r0, r4
  40353c:	47a8      	blx	r5
	pio_set(AFE_EN_PORT,AFE_EN);
  40353e:	2180      	movs	r1, #128	; 0x80
  403540:	4620      	mov	r0, r4
  403542:	4b03      	ldr	r3, [pc, #12]	; (403550 <PWRSwitchWakeUp+0x30>)
  403544:	4798      	blx	r3
  403546:	bd38      	pop	{r3, r4, r5, pc}
  403548:	400e0e00 	.word	0x400e0e00
  40354c:	00402d49 	.word	0x00402d49
  403550:	00402d45 	.word	0x00402d45

00403554 <goToSleep>:
	
}


void goToSleep(){
  403554:	b538      	push	{r3, r4, r5, lr}
	//turn off everything
	pio_set(NBAT_EN_PORT,NBAT_EN);
  403556:	4c1f      	ldr	r4, [pc, #124]	; (4035d4 <goToSleep+0x80>)
  403558:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40355c:	4620      	mov	r0, r4
  40355e:	4d1e      	ldr	r5, [pc, #120]	; (4035d8 <goToSleep+0x84>)
  403560:	47a8      	blx	r5
	pio_set(RS485_NRE_PORT,RS485_NRE);
  403562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403566:	4620      	mov	r0, r4
  403568:	47a8      	blx	r5
	pio_clear(RS485_DE_PORT,RS485_DE);
  40356a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40356e:	4620      	mov	r0, r4
  403570:	4d1a      	ldr	r5, [pc, #104]	; (4035dc <goToSleep+0x88>)
  403572:	47a8      	blx	r5
	pio_clear(AFE_EN_PORT,AFE_EN);
  403574:	2180      	movs	r1, #128	; 0x80
  403576:	4620      	mov	r0, r4
  403578:	47a8      	blx	r5
	pio_clear(BOARD_LED_PORT,BOARD_LED);
  40357a:	2108      	movs	r1, #8
  40357c:	4620      	mov	r0, r4
  40357e:	47a8      	blx	r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403580:	2208      	movs	r2, #8
  403582:	4b17      	ldr	r3, [pc, #92]	; (4035e0 <goToSleep+0x8c>)
  403584:	601a      	str	r2, [r3, #0]
	
	
	//enable RTT for periodic wakeups
	NVIC_EnableIRQ(RTT_IRQn);
	pmc_enable_periph_clk(ID_RTT);
  403586:	2003      	movs	r0, #3
  403588:	4d16      	ldr	r5, [pc, #88]	; (4035e4 <goToSleep+0x90>)
  40358a:	47a8      	blx	r5
	rtt_write_alarm_time(RTT,PERIODIC_WAKEUP_TIME);
  40358c:	f504 64c6 	add.w	r4, r4, #1584	; 0x630
  403590:	210a      	movs	r1, #10
  403592:	4620      	mov	r0, r4
  403594:	4b14      	ldr	r3, [pc, #80]	; (4035e8 <goToSleep+0x94>)
  403596:	4798      	blx	r3
	rtt_init(RTT,RTT_MR_ALMIEN);
  403598:	2100      	movs	r1, #0
  40359a:	4620      	mov	r0, r4
  40359c:	4b13      	ldr	r3, [pc, #76]	; (4035ec <goToSleep+0x98>)
  40359e:	4798      	blx	r3
	rtt_enable_interrupt(RTT,RTT_MR_ALMIEN);
  4035a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4035a4:	4620      	mov	r0, r4
  4035a6:	4b12      	ldr	r3, [pc, #72]	; (4035f0 <goToSleep+0x9c>)
  4035a8:	4798      	blx	r3
	
	//enter sleep mode
	pmc_enable_periph_clk(ID_SUPC);
  4035aa:	2000      	movs	r0, #0
  4035ac:	47a8      	blx	r5
	supc_set_wakeup_mode(SUPC,SUPC_WUMR_RTTEN_ENABLE | SUPC_WUMR_WKUPDBC_512_SCLK);
  4035ae:	3c20      	subs	r4, #32
  4035b0:	f243 0104 	movw	r1, #12292	; 0x3004
  4035b4:	4620      	mov	r0, r4
  4035b6:	4b0f      	ldr	r3, [pc, #60]	; (4035f4 <goToSleep+0xa0>)
  4035b8:	4798      	blx	r3
	supc_set_wakeup_inputs(SUPC,SUPC_WUIR_WKUPEN0 | SUPC_WUIR_WKUPEN8 , SUPC_WUIR_WKUPT0 | SUPC_WUIR_WKUPT8);
  4035ba:	4a0f      	ldr	r2, [pc, #60]	; (4035f8 <goToSleep+0xa4>)
  4035bc:	f240 1101 	movw	r1, #257	; 0x101
  4035c0:	4620      	mov	r0, r4
  4035c2:	4b0e      	ldr	r3, [pc, #56]	; (4035fc <goToSleep+0xa8>)
  4035c4:	4798      	blx	r3
	pmc_switch_mck_to_sclk(PMC_MCKR_PRES_CLK_1);
  4035c6:	2000      	movs	r0, #0
  4035c8:	4b0d      	ldr	r3, [pc, #52]	; (403600 <goToSleep+0xac>)
  4035ca:	4798      	blx	r3
	supc_enable_backup_mode(SUPC);
  4035cc:	4620      	mov	r0, r4
  4035ce:	4b0d      	ldr	r3, [pc, #52]	; (403604 <goToSleep+0xb0>)
  4035d0:	4798      	blx	r3
  4035d2:	bd38      	pop	{r3, r4, r5, pc}
  4035d4:	400e0e00 	.word	0x400e0e00
  4035d8:	00402d45 	.word	0x00402d45
  4035dc:	00402d49 	.word	0x00402d49
  4035e0:	e000e100 	.word	0xe000e100
  4035e4:	00402ff5 	.word	0x00402ff5
  4035e8:	00400d41 	.word	0x00400d41
  4035ec:	00400d05 	.word	0x00400d05
  4035f0:	00400d19 	.word	0x00400d19
  4035f4:	00400d99 	.word	0x00400d99
  4035f8:	01010000 	.word	0x01010000
  4035fc:	00400d9d 	.word	0x00400d9d
  403600:	00402e91 	.word	0x00402e91
  403604:	00400d85 	.word	0x00400d85

00403608 <adcSetup>:
int currentExternTempSensor = 0;
int currentExternCell		= 0;
float PCBTempLookUpTable[1024];
float ExtTempLookUpTable[1024];

void adcSetup(){
  403608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40360c:	b083      	sub	sp, #12
  40360e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 4037a4 <adcSetup+0x19c>
  403612:	f8df 8194 	ldr.w	r8, [pc, #404]	; 4037a8 <adcSetup+0x1a0>
	//Generate temperature lookup tables.
	float PCBBeta = 4700.0;
	float ExBeta = 3950.0;
	for(int i=0;i<1024;i++){
  403616:	2500      	movs	r5, #0
		float voltage = ((float)(i)/1023)*3.3;
  403618:	4628      	mov	r0, r5
  40361a:	4b4f      	ldr	r3, [pc, #316]	; (403758 <adcSetup+0x150>)
  40361c:	4798      	blx	r3
  40361e:	494f      	ldr	r1, [pc, #316]	; (40375c <adcSetup+0x154>)
  403620:	4b4f      	ldr	r3, [pc, #316]	; (403760 <adcSetup+0x158>)
  403622:	4798      	blx	r3
  403624:	4c4f      	ldr	r4, [pc, #316]	; (403764 <adcSetup+0x15c>)
  403626:	47a0      	blx	r4
  403628:	a341      	add	r3, pc, #260	; (adr r3, 403730 <adcSetup+0x128>)
  40362a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40362e:	4e4e      	ldr	r6, [pc, #312]	; (403768 <adcSetup+0x160>)
  403630:	47b0      	blx	r6
  403632:	4e4e      	ldr	r6, [pc, #312]	; (40376c <adcSetup+0x164>)
  403634:	47b0      	blx	r6
		PCBTempLookUpTable[i] = (1.0/((log(voltage/(3.3-voltage))/PCBBeta)+(1.0/(25.0+273.15))))-273.15;
  403636:	47a0      	blx	r4
  403638:	4682      	mov	sl, r0
  40363a:	468b      	mov	fp, r1
  40363c:	4f4c      	ldr	r7, [pc, #304]	; (403770 <adcSetup+0x168>)
  40363e:	4602      	mov	r2, r0
  403640:	460b      	mov	r3, r1
  403642:	a13b      	add	r1, pc, #236	; (adr r1, 403730 <adcSetup+0x128>)
  403644:	e9d1 0100 	ldrd	r0, r1, [r1]
  403648:	47b8      	blx	r7
  40364a:	4c4a      	ldr	r4, [pc, #296]	; (403774 <adcSetup+0x16c>)
  40364c:	4602      	mov	r2, r0
  40364e:	460b      	mov	r3, r1
  403650:	4650      	mov	r0, sl
  403652:	4659      	mov	r1, fp
  403654:	47a0      	blx	r4
  403656:	e9cd 0100 	strd	r0, r1, [sp]
  40365a:	f8df b150 	ldr.w	fp, [pc, #336]	; 4037ac <adcSetup+0x1a4>
  40365e:	47d8      	blx	fp
  403660:	a335      	add	r3, pc, #212	; (adr r3, 403738 <adcSetup+0x130>)
  403662:	e9d3 2300 	ldrd	r2, r3, [r3]
  403666:	47a0      	blx	r4
  403668:	f8df a144 	ldr.w	sl, [pc, #324]	; 4037b0 <adcSetup+0x1a8>
  40366c:	a334      	add	r3, pc, #208	; (adr r3, 403740 <adcSetup+0x138>)
  40366e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403672:	47d0      	blx	sl
  403674:	4602      	mov	r2, r0
  403676:	460b      	mov	r3, r1
  403678:	2000      	movs	r0, #0
  40367a:	493f      	ldr	r1, [pc, #252]	; (403778 <adcSetup+0x170>)
  40367c:	47a0      	blx	r4
  40367e:	a332      	add	r3, pc, #200	; (adr r3, 403748 <adcSetup+0x140>)
  403680:	e9d3 2300 	ldrd	r2, r3, [r3]
  403684:	47b8      	blx	r7
  403686:	47b0      	blx	r6
  403688:	f849 0f04 	str.w	r0, [r9, #4]!
		ExtTempLookUpTable[i] = (1.0/((log(voltage/(3.3-voltage))/ExBeta)+(1.0/(25.0+273.15))))-273.15;
  40368c:	e9dd 0100 	ldrd	r0, r1, [sp]
  403690:	47d8      	blx	fp
  403692:	a32f      	add	r3, pc, #188	; (adr r3, 403750 <adcSetup+0x148>)
  403694:	e9d3 2300 	ldrd	r2, r3, [r3]
  403698:	47a0      	blx	r4
  40369a:	a329      	add	r3, pc, #164	; (adr r3, 403740 <adcSetup+0x138>)
  40369c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036a0:	47d0      	blx	sl
  4036a2:	4602      	mov	r2, r0
  4036a4:	460b      	mov	r3, r1
  4036a6:	2000      	movs	r0, #0
  4036a8:	4933      	ldr	r1, [pc, #204]	; (403778 <adcSetup+0x170>)
  4036aa:	47a0      	blx	r4
  4036ac:	a326      	add	r3, pc, #152	; (adr r3, 403748 <adcSetup+0x140>)
  4036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
  4036b2:	47b8      	blx	r7
  4036b4:	47b0      	blx	r6
  4036b6:	f848 0f04 	str.w	r0, [r8, #4]!
	for(int i=0;i<1024;i++){
  4036ba:	3501      	adds	r5, #1
  4036bc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
  4036c0:	d1aa      	bne.n	403618 <adcSetup+0x10>
	}
	
	//enable and start adc.
	pmc_enable_periph_clk(ID_ADC);
  4036c2:	201d      	movs	r0, #29
  4036c4:	4b2d      	ldr	r3, [pc, #180]	; (40377c <adcSetup+0x174>)
  4036c6:	4798      	blx	r3
	adc_init(ADC,sysclk_get_peripheral_hz(),ADC_CLK_FREQ,ADC_STARTUP_TIME_4);
  4036c8:	4c2d      	ldr	r4, [pc, #180]	; (403780 <adcSetup+0x178>)
  4036ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4036ce:	4a2d      	ldr	r2, [pc, #180]	; (403784 <adcSetup+0x17c>)
  4036d0:	492d      	ldr	r1, [pc, #180]	; (403788 <adcSetup+0x180>)
  4036d2:	4620      	mov	r0, r4
  4036d4:	4d2d      	ldr	r5, [pc, #180]	; (40378c <adcSetup+0x184>)
  4036d6:	47a8      	blx	r5
	adc_configure_timing(ADC, QTY_TRACKING_PERIODS, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  4036d8:	2302      	movs	r3, #2
  4036da:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  4036de:	2101      	movs	r1, #1
  4036e0:	4620      	mov	r0, r4
  4036e2:	4d2b      	ldr	r5, [pc, #172]	; (403790 <adcSetup+0x188>)
  4036e4:	47a8      	blx	r5
	adc_enable_channel(ADC, CELLV_CHANNEL);
  4036e6:	2100      	movs	r1, #0
  4036e8:	4620      	mov	r0, r4
  4036ea:	4d2a      	ldr	r5, [pc, #168]	; (403794 <adcSetup+0x18c>)
  4036ec:	47a8      	blx	r5
	adc_enable_channel(ADC, CURRENT_CHANNEL);
  4036ee:	2101      	movs	r1, #1
  4036f0:	4620      	mov	r0, r4
  4036f2:	47a8      	blx	r5
	adc_enable_channel(ADC, STACK_CHANNEL);
  4036f4:	2102      	movs	r1, #2
  4036f6:	4620      	mov	r0, r4
  4036f8:	47a8      	blx	r5
	adc_enable_channel(ADC, EXTERN_TEMP_CHANNEL);
  4036fa:	2103      	movs	r1, #3
  4036fc:	4620      	mov	r0, r4
  4036fe:	47a8      	blx	r5
	adc_enable_channel(ADC, FET_TEMP_CHANNEL);
  403700:	2104      	movs	r1, #4
  403702:	4620      	mov	r0, r4
  403704:	47a8      	blx	r5
	adc_enable_channel(ADC, SHUNT_TEMP_CHANNEL);
  403706:	2105      	movs	r1, #5
  403708:	4620      	mov	r0, r4
  40370a:	47a8      	blx	r5
	adc_enable_interrupt(ADC,ADC_IER_DRDY);
  40370c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  403710:	4620      	mov	r0, r4
  403712:	4b21      	ldr	r3, [pc, #132]	; (403798 <adcSetup+0x190>)
  403714:	4798      	blx	r3
  403716:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40371a:	4b20      	ldr	r3, [pc, #128]	; (40379c <adcSetup+0x194>)
  40371c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(ADC_IRQn);
	adc_start(ADC);
  40371e:	4620      	mov	r0, r4
  403720:	4b1f      	ldr	r3, [pc, #124]	; (4037a0 <adcSetup+0x198>)
  403722:	4798      	blx	r3
}
  403724:	b003      	add	sp, #12
  403726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40372a:	bf00      	nop
  40372c:	f3af 8000 	nop.w
  403730:	66666666 	.word	0x66666666
  403734:	400a6666 	.word	0x400a6666
  403738:	00000000 	.word	0x00000000
  40373c:	40b25c00 	.word	0x40b25c00
  403740:	dcb5db83 	.word	0xdcb5db83
  403744:	3f6b79e1 	.word	0x3f6b79e1
  403748:	66666666 	.word	0x66666666
  40374c:	40711266 	.word	0x40711266
  403750:	00000000 	.word	0x00000000
  403754:	40aedc00 	.word	0x40aedc00
  403758:	00404b7d 	.word	0x00404b7d
  40375c:	447fc000 	.word	0x447fc000
  403760:	00404d8d 	.word	0x00404d8d
  403764:	00404361 	.word	0x00404361
  403768:	00404409 	.word	0x00404409
  40376c:	00404969 	.word	0x00404969
  403770:	004040a1 	.word	0x004040a1
  403774:	0040465d 	.word	0x0040465d
  403778:	3ff00000 	.word	0x3ff00000
  40377c:	00402ff5 	.word	0x00402ff5
  403780:	40038000 	.word	0x40038000
  403784:	0007a120 	.word	0x0007a120
  403788:	07270e00 	.word	0x07270e00
  40378c:	00400c21 	.word	0x00400c21
  403790:	00400c55 	.word	0x00400c55
  403794:	00400c77 	.word	0x00400c77
  403798:	00400c81 	.word	0x00400c81
  40379c:	e000e100 	.word	0xe000e100
  4037a0:	00400c71 	.word	0x00400c71
  4037a4:	20001b9c 	.word	0x20001b9c
  4037a8:	20002bf4 	.word	0x20002bf4
  4037ac:	00403ba9 	.word	0x00403ba9
  4037b0:	004040a5 	.word	0x004040a5
  4037b4:	00000000 	.word	0x00000000

004037b8 <analogCalculate>:
		needsProcessing[SHUNTTEMPIDX] = true;
        adc_start(ADC);
	}
}

void analogCalculate(){
  4037b8:	b538      	push	{r3, r4, r5, lr}
	if( needsProcessing[CELL1IDX] || needsProcessing[CELL2IDX] || needsProcessing[CELL3IDX] || needsProcessing[CELL4IDX] || needsProcessing[CELL5IDX] || needsProcessing[CELL6IDX]){
  4037ba:	4b65      	ldr	r3, [pc, #404]	; (403950 <analogCalculate+0x198>)
  4037bc:	781b      	ldrb	r3, [r3, #0]
  4037be:	b92b      	cbnz	r3, 4037cc <analogCalculate+0x14>
  4037c0:	4b63      	ldr	r3, [pc, #396]	; (403950 <analogCalculate+0x198>)
  4037c2:	785b      	ldrb	r3, [r3, #1]
  4037c4:	b913      	cbnz	r3, 4037cc <analogCalculate+0x14>
  4037c6:	4b62      	ldr	r3, [pc, #392]	; (403950 <analogCalculate+0x198>)
  4037c8:	789b      	ldrb	r3, [r3, #2]
  4037ca:	b313      	cbz	r3, 403812 <analogCalculate+0x5a>
  4037cc:	4a60      	ldr	r2, [pc, #384]	; (403950 <analogCalculate+0x198>)
void analogCalculate(){
  4037ce:	2300      	movs	r3, #0
		int processIDX;
		for(int i=CELL1IDX;i<=CELL6IDX;i++) if(needsProcessing[i]) processIDX = i;
  4037d0:	f812 1b01 	ldrb.w	r1, [r2], #1
  4037d4:	2900      	cmp	r1, #0
  4037d6:	bf18      	it	ne
  4037d8:	461c      	movne	r4, r3
  4037da:	3301      	adds	r3, #1
  4037dc:	2b06      	cmp	r3, #6
  4037de:	d1f7      	bne.n	4037d0 <analogCalculate+0x18>
		processedADCData[processIDX] = (3.3*(rawADCData[processIDX]/4095.0)) * (1.0/0.759);
  4037e0:	4b5c      	ldr	r3, [pc, #368]	; (403954 <analogCalculate+0x19c>)
  4037e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4037e6:	4b5c      	ldr	r3, [pc, #368]	; (403958 <analogCalculate+0x1a0>)
  4037e8:	4798      	blx	r3
  4037ea:	a353      	add	r3, pc, #332	; (adr r3, 403938 <analogCalculate+0x180>)
  4037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037f0:	4d5a      	ldr	r5, [pc, #360]	; (40395c <analogCalculate+0x1a4>)
  4037f2:	47a8      	blx	r5
  4037f4:	4d5a      	ldr	r5, [pc, #360]	; (403960 <analogCalculate+0x1a8>)
  4037f6:	a352      	add	r3, pc, #328	; (adr r3, 403940 <analogCalculate+0x188>)
  4037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4037fc:	47a8      	blx	r5
  4037fe:	a352      	add	r3, pc, #328	; (adr r3, 403948 <analogCalculate+0x190>)
  403800:	e9d3 2300 	ldrd	r2, r3, [r3]
  403804:	47a8      	blx	r5
  403806:	4b57      	ldr	r3, [pc, #348]	; (403964 <analogCalculate+0x1ac>)
  403808:	4798      	blx	r3
  40380a:	4b57      	ldr	r3, [pc, #348]	; (403968 <analogCalculate+0x1b0>)
  40380c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	if( needsProcessing[CELL1IDX] || needsProcessing[CELL2IDX] || needsProcessing[CELL3IDX] || needsProcessing[CELL4IDX] || needsProcessing[CELL5IDX] || needsProcessing[CELL6IDX]){
  403810:	bd38      	pop	{r3, r4, r5, pc}
  403812:	4b4f      	ldr	r3, [pc, #316]	; (403950 <analogCalculate+0x198>)
  403814:	78db      	ldrb	r3, [r3, #3]
  403816:	2b00      	cmp	r3, #0
  403818:	d1d8      	bne.n	4037cc <analogCalculate+0x14>
  40381a:	4b4d      	ldr	r3, [pc, #308]	; (403950 <analogCalculate+0x198>)
  40381c:	791b      	ldrb	r3, [r3, #4]
  40381e:	2b00      	cmp	r3, #0
  403820:	d1d4      	bne.n	4037cc <analogCalculate+0x14>
  403822:	4b4b      	ldr	r3, [pc, #300]	; (403950 <analogCalculate+0x198>)
  403824:	795b      	ldrb	r3, [r3, #5]
  403826:	2b00      	cmp	r3, #0
  403828:	d1d0      	bne.n	4037cc <analogCalculate+0x14>
	}
	else if(needsProcessing[TEMP1IDX] || needsProcessing[TEMP2IDX] || needsProcessing[TEMP3IDX] || needsProcessing[TEMP4IDX] || needsProcessing[TEMP5IDX] || needsProcessing[TEMP6IDX]){
  40382a:	4b49      	ldr	r3, [pc, #292]	; (403950 <analogCalculate+0x198>)
  40382c:	799b      	ldrb	r3, [r3, #6]
  40382e:	b92b      	cbnz	r3, 40383c <analogCalculate+0x84>
  403830:	4b47      	ldr	r3, [pc, #284]	; (403950 <analogCalculate+0x198>)
  403832:	79db      	ldrb	r3, [r3, #7]
  403834:	b913      	cbnz	r3, 40383c <analogCalculate+0x84>
  403836:	4b46      	ldr	r3, [pc, #280]	; (403950 <analogCalculate+0x198>)
  403838:	7a1b      	ldrb	r3, [r3, #8]
  40383a:	b1d3      	cbz	r3, 403872 <analogCalculate+0xba>
  40383c:	494b      	ldr	r1, [pc, #300]	; (40396c <analogCalculate+0x1b4>)
		for(int i=CELL1IDX;i<=CELL6IDX;i++) if(needsProcessing[i]) processIDX = i;
  40383e:	2306      	movs	r3, #6
		int processIDX;
		for(int i=TEMP1IDX;i<=TEMP6IDX;i++) if(needsProcessing[i]) processIDX = i;
  403840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  403844:	2800      	cmp	r0, #0
  403846:	bf18      	it	ne
  403848:	461a      	movne	r2, r3
  40384a:	3301      	adds	r3, #1
  40384c:	2b0c      	cmp	r3, #12
  40384e:	d1f7      	bne.n	403840 <analogCalculate+0x88>
		processedADCData[processIDX] = ExtTempLookUpTable[(int)(rawADCData[processIDX]/4)];
  403850:	4b40      	ldr	r3, [pc, #256]	; (403954 <analogCalculate+0x19c>)
  403852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403856:	2b00      	cmp	r3, #0
  403858:	bfb8      	it	lt
  40385a:	3303      	addlt	r3, #3
  40385c:	109b      	asrs	r3, r3, #2
  40385e:	4944      	ldr	r1, [pc, #272]	; (403970 <analogCalculate+0x1b8>)
  403860:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  403864:	4b40      	ldr	r3, [pc, #256]	; (403968 <analogCalculate+0x1b0>)
  403866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		needsProcessing[processIDX] = false;
  40386a:	2100      	movs	r1, #0
  40386c:	4b38      	ldr	r3, [pc, #224]	; (403950 <analogCalculate+0x198>)
  40386e:	5499      	strb	r1, [r3, r2]
	else if(needsProcessing[TEMP1IDX] || needsProcessing[TEMP2IDX] || needsProcessing[TEMP3IDX] || needsProcessing[TEMP4IDX] || needsProcessing[TEMP5IDX] || needsProcessing[TEMP6IDX]){
  403870:	bd38      	pop	{r3, r4, r5, pc}
  403872:	4b37      	ldr	r3, [pc, #220]	; (403950 <analogCalculate+0x198>)
  403874:	7a5b      	ldrb	r3, [r3, #9]
  403876:	2b00      	cmp	r3, #0
  403878:	d1e0      	bne.n	40383c <analogCalculate+0x84>
  40387a:	4b35      	ldr	r3, [pc, #212]	; (403950 <analogCalculate+0x198>)
  40387c:	7a9b      	ldrb	r3, [r3, #10]
  40387e:	2b00      	cmp	r3, #0
  403880:	d1dc      	bne.n	40383c <analogCalculate+0x84>
  403882:	4b33      	ldr	r3, [pc, #204]	; (403950 <analogCalculate+0x198>)
  403884:	7adb      	ldrb	r3, [r3, #11]
  403886:	2b00      	cmp	r3, #0
  403888:	d1d8      	bne.n	40383c <analogCalculate+0x84>
	}
	else if(needsProcessing[CURRENTIDX]){
  40388a:	4b31      	ldr	r3, [pc, #196]	; (403950 <analogCalculate+0x198>)
  40388c:	7b1b      	ldrb	r3, [r3, #12]
  40388e:	b1c3      	cbz	r3, 4038c2 <analogCalculate+0x10a>
		processedADCData[CURRENTIDX] = (3.3*(rawADCData[CURRENTIDX]/4095.0)) * (1000/20);
  403890:	4b30      	ldr	r3, [pc, #192]	; (403954 <analogCalculate+0x19c>)
  403892:	6b18      	ldr	r0, [r3, #48]	; 0x30
  403894:	4b30      	ldr	r3, [pc, #192]	; (403958 <analogCalculate+0x1a0>)
  403896:	4798      	blx	r3
  403898:	a327      	add	r3, pc, #156	; (adr r3, 403938 <analogCalculate+0x180>)
  40389a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40389e:	4c2f      	ldr	r4, [pc, #188]	; (40395c <analogCalculate+0x1a4>)
  4038a0:	47a0      	blx	r4
  4038a2:	4c2f      	ldr	r4, [pc, #188]	; (403960 <analogCalculate+0x1a8>)
  4038a4:	a326      	add	r3, pc, #152	; (adr r3, 403940 <analogCalculate+0x188>)
  4038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038aa:	47a0      	blx	r4
  4038ac:	2200      	movs	r2, #0
  4038ae:	4b31      	ldr	r3, [pc, #196]	; (403974 <analogCalculate+0x1bc>)
  4038b0:	47a0      	blx	r4
  4038b2:	4b2c      	ldr	r3, [pc, #176]	; (403964 <analogCalculate+0x1ac>)
  4038b4:	4798      	blx	r3
  4038b6:	4b2c      	ldr	r3, [pc, #176]	; (403968 <analogCalculate+0x1b0>)
  4038b8:	6318      	str	r0, [r3, #48]	; 0x30
		needsProcessing[CURRENTIDX] = false;
  4038ba:	2200      	movs	r2, #0
  4038bc:	4b24      	ldr	r3, [pc, #144]	; (403950 <analogCalculate+0x198>)
  4038be:	731a      	strb	r2, [r3, #12]
  4038c0:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if(needsProcessing[SHUNTTEMPIDX]){
  4038c2:	4b23      	ldr	r3, [pc, #140]	; (403950 <analogCalculate+0x198>)
  4038c4:	7b5b      	ldrb	r3, [r3, #13]
  4038c6:	b16b      	cbz	r3, 4038e4 <analogCalculate+0x12c>
		processedADCData[SHUNTTEMPIDX] = PCBTempLookUpTable[(int)(rawADCData[SHUNTTEMPIDX]/4)];
  4038c8:	4b22      	ldr	r3, [pc, #136]	; (403954 <analogCalculate+0x19c>)
  4038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4038cc:	2204      	movs	r2, #4
  4038ce:	fb93 f3f2 	sdiv	r3, r3, r2
  4038d2:	4a29      	ldr	r2, [pc, #164]	; (403978 <analogCalculate+0x1c0>)
  4038d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4038d8:	4b23      	ldr	r3, [pc, #140]	; (403968 <analogCalculate+0x1b0>)
  4038da:	635a      	str	r2, [r3, #52]	; 0x34
		needsProcessing[SHUNTTEMPIDX] = false;
  4038dc:	2200      	movs	r2, #0
  4038de:	4b1c      	ldr	r3, [pc, #112]	; (403950 <analogCalculate+0x198>)
  4038e0:	735a      	strb	r2, [r3, #13]
  4038e2:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if(needsProcessing[FETTEMPIDX]){
  4038e4:	4b1a      	ldr	r3, [pc, #104]	; (403950 <analogCalculate+0x198>)
  4038e6:	7b9b      	ldrb	r3, [r3, #14]
  4038e8:	b16b      	cbz	r3, 403906 <analogCalculate+0x14e>
		processedADCData[FETTEMPIDX] = PCBTempLookUpTable[(int)(rawADCData[FETTEMPIDX]/4)];
  4038ea:	4b1a      	ldr	r3, [pc, #104]	; (403954 <analogCalculate+0x19c>)
  4038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4038ee:	2204      	movs	r2, #4
  4038f0:	fb93 f3f2 	sdiv	r3, r3, r2
  4038f4:	4a20      	ldr	r2, [pc, #128]	; (403978 <analogCalculate+0x1c0>)
  4038f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4038fa:	4b1b      	ldr	r3, [pc, #108]	; (403968 <analogCalculate+0x1b0>)
  4038fc:	639a      	str	r2, [r3, #56]	; 0x38
		needsProcessing[FETTEMPIDX] = false;
  4038fe:	2200      	movs	r2, #0
  403900:	4b13      	ldr	r3, [pc, #76]	; (403950 <analogCalculate+0x198>)
  403902:	739a      	strb	r2, [r3, #14]
  403904:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if(needsProcessing[STACKVOLTIDX]){
  403906:	4b12      	ldr	r3, [pc, #72]	; (403950 <analogCalculate+0x198>)
  403908:	7bdb      	ldrb	r3, [r3, #15]
  40390a:	b19b      	cbz	r3, 403934 <analogCalculate+0x17c>
		processedADCData[STACKVOLTIDX] = (rawADCData[STACKVOLTIDX]/4095.0)*33.0;
  40390c:	4b11      	ldr	r3, [pc, #68]	; (403954 <analogCalculate+0x19c>)
  40390e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  403910:	4b11      	ldr	r3, [pc, #68]	; (403958 <analogCalculate+0x1a0>)
  403912:	4798      	blx	r3
  403914:	a308      	add	r3, pc, #32	; (adr r3, 403938 <analogCalculate+0x180>)
  403916:	e9d3 2300 	ldrd	r2, r3, [r3]
  40391a:	4c10      	ldr	r4, [pc, #64]	; (40395c <analogCalculate+0x1a4>)
  40391c:	47a0      	blx	r4
  40391e:	2200      	movs	r2, #0
  403920:	4b16      	ldr	r3, [pc, #88]	; (40397c <analogCalculate+0x1c4>)
  403922:	4c0f      	ldr	r4, [pc, #60]	; (403960 <analogCalculate+0x1a8>)
  403924:	47a0      	blx	r4
  403926:	4b0f      	ldr	r3, [pc, #60]	; (403964 <analogCalculate+0x1ac>)
  403928:	4798      	blx	r3
  40392a:	4b0f      	ldr	r3, [pc, #60]	; (403968 <analogCalculate+0x1b0>)
  40392c:	63d8      	str	r0, [r3, #60]	; 0x3c
		needsProcessing[STACKVOLTIDX] = false;
  40392e:	2200      	movs	r2, #0
  403930:	4b07      	ldr	r3, [pc, #28]	; (403950 <analogCalculate+0x198>)
  403932:	73da      	strb	r2, [r3, #15]
  403934:	bd38      	pop	{r3, r4, r5, pc}
  403936:	bf00      	nop
  403938:	00000000 	.word	0x00000000
  40393c:	40affe00 	.word	0x40affe00
  403940:	66666666 	.word	0x66666666
  403944:	400a6666 	.word	0x400a6666
  403948:	0e80d7dd 	.word	0x0e80d7dd
  40394c:	3ff51493 	.word	0x3ff51493
  403950:	20002be8 	.word	0x20002be8
  403954:	20002ba8 	.word	0x20002ba8
  403958:	0040433d 	.word	0x0040433d
  40395c:	0040465d 	.word	0x0040465d
  403960:	00404409 	.word	0x00404409
  403964:	00404969 	.word	0x00404969
  403968:	20001b60 	.word	0x20001b60
  40396c:	20002bed 	.word	0x20002bed
  403970:	20002bf8 	.word	0x20002bf8
  403974:	40490000 	.word	0x40490000
  403978:	20001ba0 	.word	0x20001ba0
  40397c:	40408000 	.word	0x40408000

00403980 <protec>:
}
bool cellImbalance(){
	
}

void protec(){
  403980:	b510      	push	{r4, lr}
	pio_set(NBAT_EN_PORT, NBAT_EN);
  403982:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403986:	4810      	ldr	r0, [pc, #64]	; (4039c8 <protec+0x48>)
  403988:	4b10      	ldr	r3, [pc, #64]	; (4039cc <protec+0x4c>)
  40398a:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TC1);
  40398c:	2018      	movs	r0, #24
  40398e:	4b10      	ldr	r3, [pc, #64]	; (4039d0 <protec+0x50>)
  403990:	4798      	blx	r3
	tc_init(TC0, TC_CH,
  403992:	4c10      	ldr	r4, [pc, #64]	; (4039d4 <protec+0x54>)
  403994:	f24c 0203 	movw	r2, #49155	; 0xc003
  403998:	2101      	movs	r1, #1
  40399a:	4620      	mov	r0, r4
  40399c:	4b0e      	ldr	r3, [pc, #56]	; (4039d8 <protec+0x58>)
  40399e:	4798      	blx	r3
			TC_CMR_WAVE
			| TC_CMR_WAVSEL_UP_RC
			| TC_CMR_TCCLKS_TIMER_CLOCK4);
	tc_enable_interrupt(TC0, TC_CH, TC_IER_CPCS);
  4039a0:	2210      	movs	r2, #16
  4039a2:	2101      	movs	r1, #1
  4039a4:	4620      	mov	r0, r4
  4039a6:	4b0d      	ldr	r3, [pc, #52]	; (4039dc <protec+0x5c>)
  4039a8:	4798      	blx	r3
  4039aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4039ae:	4b0c      	ldr	r3, [pc, #48]	; (4039e0 <protec+0x60>)
  4039b0:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC1_IRQn);
	tc_write_rc(TC0,TC_CH,468750);				  //causes timer to reset every 500ms (exactly)
  4039b2:	4a0c      	ldr	r2, [pc, #48]	; (4039e4 <protec+0x64>)
  4039b4:	2101      	movs	r1, #1
  4039b6:	4620      	mov	r0, r4
  4039b8:	4b0b      	ldr	r3, [pc, #44]	; (4039e8 <protec+0x68>)
  4039ba:	4798      	blx	r3
	tc_start(TC0,TC_CH);
  4039bc:	2101      	movs	r1, #1
  4039be:	4620      	mov	r0, r4
  4039c0:	4b0a      	ldr	r3, [pc, #40]	; (4039ec <protec+0x6c>)
  4039c2:	4798      	blx	r3
  4039c4:	bd10      	pop	{r4, pc}
  4039c6:	bf00      	nop
  4039c8:	400e0e00 	.word	0x400e0e00
  4039cc:	00402d45 	.word	0x00402d45
  4039d0:	00402ff5 	.word	0x00402ff5
  4039d4:	40010000 	.word	0x40010000
  4039d8:	00400da3 	.word	0x00400da3
  4039dc:	00400dcb 	.word	0x00400dcb
  4039e0:	e000e100 	.word	0xe000e100
  4039e4:	0007270e 	.word	0x0007270e
  4039e8:	00400dc3 	.word	0x00400dc3
  4039ec:	00400dbb 	.word	0x00400dbb

004039f0 <triggerProtections>:
void triggerProtections(){
  4039f0:	b508      	push	{r3, lr}
	batteryStable = !(activeProtections[OVERTEMPIDX] || activeProtections[UNDERTEMPIDX] || activeProtections[OVERVOLTIDX] || activeProtections[UNDERVOLTIDX] || activeProtections[OVERCURRENTIDX] || activeProtections[CELLIMBALANCEIDX]);
  4039f2:	4b12      	ldr	r3, [pc, #72]	; (403a3c <triggerProtections+0x4c>)
  4039f4:	781b      	ldrb	r3, [r3, #0]
  4039f6:	b9c3      	cbnz	r3, 403a2a <triggerProtections+0x3a>
  4039f8:	4b10      	ldr	r3, [pc, #64]	; (403a3c <triggerProtections+0x4c>)
  4039fa:	785b      	ldrb	r3, [r3, #1]
  4039fc:	b9ab      	cbnz	r3, 403a2a <triggerProtections+0x3a>
  4039fe:	4b0f      	ldr	r3, [pc, #60]	; (403a3c <triggerProtections+0x4c>)
  403a00:	789b      	ldrb	r3, [r3, #2]
  403a02:	b993      	cbnz	r3, 403a2a <triggerProtections+0x3a>
  403a04:	4b0d      	ldr	r3, [pc, #52]	; (403a3c <triggerProtections+0x4c>)
  403a06:	78db      	ldrb	r3, [r3, #3]
  403a08:	b97b      	cbnz	r3, 403a2a <triggerProtections+0x3a>
  403a0a:	4b0c      	ldr	r3, [pc, #48]	; (403a3c <triggerProtections+0x4c>)
  403a0c:	791b      	ldrb	r3, [r3, #4]
  403a0e:	b963      	cbnz	r3, 403a2a <triggerProtections+0x3a>
  403a10:	4b0a      	ldr	r3, [pc, #40]	; (403a3c <triggerProtections+0x4c>)
  403a12:	795b      	ldrb	r3, [r3, #5]
  403a14:	b94b      	cbnz	r3, 403a2a <triggerProtections+0x3a>
  403a16:	2201      	movs	r2, #1
  403a18:	4b09      	ldr	r3, [pc, #36]	; (403a40 <triggerProtections+0x50>)
  403a1a:	701a      	strb	r2, [r3, #0]
		ignoreProtections = false;
  403a1c:	2200      	movs	r2, #0
  403a1e:	4b09      	ldr	r3, [pc, #36]	; (403a44 <triggerProtections+0x54>)
  403a20:	701a      	strb	r2, [r3, #0]
  403a22:	e009      	b.n	403a38 <triggerProtections+0x48>
		protec();
  403a24:	4b08      	ldr	r3, [pc, #32]	; (403a48 <triggerProtections+0x58>)
  403a26:	4798      	blx	r3
}
  403a28:	bd08      	pop	{r3, pc}
	batteryStable = !(activeProtections[OVERTEMPIDX] || activeProtections[UNDERTEMPIDX] || activeProtections[OVERVOLTIDX] || activeProtections[UNDERVOLTIDX] || activeProtections[OVERCURRENTIDX] || activeProtections[CELLIMBALANCEIDX]);
  403a2a:	2200      	movs	r2, #0
  403a2c:	4b04      	ldr	r3, [pc, #16]	; (403a40 <triggerProtections+0x50>)
  403a2e:	701a      	strb	r2, [r3, #0]
	if(!batteryStable && !ignoreProtections)
  403a30:	4b04      	ldr	r3, [pc, #16]	; (403a44 <triggerProtections+0x54>)
  403a32:	781b      	ldrb	r3, [r3, #0]
  403a34:	2b00      	cmp	r3, #0
  403a36:	d0f5      	beq.n	403a24 <triggerProtections+0x34>
  403a38:	bd08      	pop	{r3, pc}
  403a3a:	bf00      	nop
  403a3c:	20002ba0 	.word	0x20002ba0
  403a40:	200000a8 	.word	0x200000a8
  403a44:	20000f20 	.word	0x20000f20
  403a48:	00403981 	.word	0x00403981

00403a4c <main>:
{
  403a4c:	b508      	push	{r3, lr}
	sysclk_init();
  403a4e:	4b06      	ldr	r3, [pc, #24]	; (403a68 <main+0x1c>)
  403a50:	4798      	blx	r3
	board_init();
  403a52:	4b06      	ldr	r3, [pc, #24]	; (403a6c <main+0x20>)
  403a54:	4798      	blx	r3
	adcSetup();
  403a56:	4b06      	ldr	r3, [pc, #24]	; (403a70 <main+0x24>)
  403a58:	4798      	blx	r3
		modbus_update();
  403a5a:	4e06      	ldr	r6, [pc, #24]	; (403a74 <main+0x28>)
		analogCalculate();
  403a5c:	4d06      	ldr	r5, [pc, #24]	; (403a78 <main+0x2c>)
		triggerProtections();
  403a5e:	4c07      	ldr	r4, [pc, #28]	; (403a7c <main+0x30>)
		modbus_update();
  403a60:	47b0      	blx	r6
		analogCalculate();
  403a62:	47a8      	blx	r5
		triggerProtections();
  403a64:	47a0      	blx	r4
  403a66:	e7fb      	b.n	403a60 <main+0x14>
  403a68:	00402ce1 	.word	0x00402ce1
  403a6c:	00403165 	.word	0x00403165
  403a70:	00403609 	.word	0x00403609
  403a74:	00402b79 	.word	0x00402b79
  403a78:	004037b9 	.word	0x004037b9
  403a7c:	004039f1 	.word	0x004039f1

00403a80 <pinWrite>:


/****************************
*	MISC
*****************************/
void pinWrite(Pio* port, const uint32_t pin_mask, bool logic){
  403a80:	b508      	push	{r3, lr}
	if(logic) pio_set(port,pin_mask);
  403a82:	b912      	cbnz	r2, 403a8a <pinWrite+0xa>
	else pio_clear(port,pin_mask);
  403a84:	4b02      	ldr	r3, [pc, #8]	; (403a90 <pinWrite+0x10>)
  403a86:	4798      	blx	r3
  403a88:	bd08      	pop	{r3, pc}
	if(logic) pio_set(port,pin_mask);
  403a8a:	4b02      	ldr	r3, [pc, #8]	; (403a94 <pinWrite+0x14>)
  403a8c:	4798      	blx	r3
  403a8e:	bd08      	pop	{r3, pc}
  403a90:	00402d49 	.word	0x00402d49
  403a94:	00402d45 	.word	0x00402d45

00403a98 <ADC_Handler>:
void ADC_Handler(){
  403a98:	b570      	push	{r4, r5, r6, lr}
	if((adc_get_status(ADC) & ADC_ISR_DRDY) == ADC_ISR_DRDY){
  403a9a:	4836      	ldr	r0, [pc, #216]	; (403b74 <ADC_Handler+0xdc>)
  403a9c:	4b36      	ldr	r3, [pc, #216]	; (403b78 <ADC_Handler+0xe0>)
  403a9e:	4798      	blx	r3
  403aa0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  403aa4:	d05d      	beq.n	403b62 <ADC_Handler+0xca>
		rawADCData[CELLVIDXS + currentExternCell] = ADC->ADC_CDR[CELLV_CHANNEL];
  403aa6:	4b35      	ldr	r3, [pc, #212]	; (403b7c <ADC_Handler+0xe4>)
  403aa8:	681b      	ldr	r3, [r3, #0]
  403aaa:	4a32      	ldr	r2, [pc, #200]	; (403b74 <ADC_Handler+0xdc>)
  403aac:	6d11      	ldr	r1, [r2, #80]	; 0x50
  403aae:	4a34      	ldr	r2, [pc, #208]	; (403b80 <ADC_Handler+0xe8>)
  403ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		needsProcessing[CELLVIDXS + currentExternCell] = true;
  403ab4:	2101      	movs	r1, #1
  403ab6:	4a33      	ldr	r2, [pc, #204]	; (403b84 <ADC_Handler+0xec>)
  403ab8:	54d1      	strb	r1, [r2, r3]
		if(currentExternCell == 5) currentExternCell = 0;
  403aba:	2b05      	cmp	r3, #5
  403abc:	d052      	beq.n	403b64 <ADC_Handler+0xcc>
		else currentExternCell++;
  403abe:	3301      	adds	r3, #1
  403ac0:	4a2e      	ldr	r2, [pc, #184]	; (403b7c <ADC_Handler+0xe4>)
  403ac2:	6013      	str	r3, [r2, #0]
		pinWrite(CELL_SEL0_PORT,CELL_SEL0,(bool)(currentExternCell&1));
  403ac4:	4e2d      	ldr	r6, [pc, #180]	; (403b7c <ADC_Handler+0xe4>)
  403ac6:	6832      	ldr	r2, [r6, #0]
  403ac8:	4d2f      	ldr	r5, [pc, #188]	; (403b88 <ADC_Handler+0xf0>)
  403aca:	f002 0201 	and.w	r2, r2, #1
  403ace:	2110      	movs	r1, #16
  403ad0:	4628      	mov	r0, r5
  403ad2:	4c2e      	ldr	r4, [pc, #184]	; (403b8c <ADC_Handler+0xf4>)
  403ad4:	47a0      	blx	r4
		pinWrite(CELL_SEL1_PORT,CELL_SEL1,(bool)(currentExternCell&2));
  403ad6:	6832      	ldr	r2, [r6, #0]
  403ad8:	f3c2 0240 	ubfx	r2, r2, #1, #1
  403adc:	2120      	movs	r1, #32
  403ade:	4628      	mov	r0, r5
  403ae0:	47a0      	blx	r4
		pinWrite(CELL_SEL2_PORT,CELL_SEL2,(bool)(currentExternCell&4));
  403ae2:	6832      	ldr	r2, [r6, #0]
  403ae4:	f3c2 0280 	ubfx	r2, r2, #2, #1
  403ae8:	2140      	movs	r1, #64	; 0x40
  403aea:	4628      	mov	r0, r5
  403aec:	47a0      	blx	r4
		rawADCData[CURRENTIDX] = ADC->ADC_CDR[CURRENT_CHANNEL];
  403aee:	4c21      	ldr	r4, [pc, #132]	; (403b74 <ADC_Handler+0xdc>)
  403af0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  403af2:	4823      	ldr	r0, [pc, #140]	; (403b80 <ADC_Handler+0xe8>)
  403af4:	6303      	str	r3, [r0, #48]	; 0x30
		needsProcessing[CURRENTIDX] = true;
  403af6:	4a23      	ldr	r2, [pc, #140]	; (403b84 <ADC_Handler+0xec>)
  403af8:	2101      	movs	r1, #1
  403afa:	7311      	strb	r1, [r2, #12]
		rawADCData[STACKVOLTIDX] = ADC->ADC_CDR[STACK_CHANNEL];
  403afc:	6da3      	ldr	r3, [r4, #88]	; 0x58
  403afe:	63c3      	str	r3, [r0, #60]	; 0x3c
		needsProcessing[STACKVOLTIDX] = true;
  403b00:	73d1      	strb	r1, [r2, #15]
		rawADCData[TEMPIDXS + currentExternTempSensor] = ADC->ADC_CDR[EXTERN_TEMP_CHANNEL];
  403b02:	4b23      	ldr	r3, [pc, #140]	; (403b90 <ADC_Handler+0xf8>)
  403b04:	681b      	ldr	r3, [r3, #0]
  403b06:	1d9d      	adds	r5, r3, #6
  403b08:	6de4      	ldr	r4, [r4, #92]	; 0x5c
  403b0a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
		needsProcessing[TEMPIDXS + currentExternTempSensor] = true;
  403b0e:	5551      	strb	r1, [r2, r5]
		if(currentExternTempSensor == 5) currentExternTempSensor = 0;
  403b10:	2b05      	cmp	r3, #5
  403b12:	d02b      	beq.n	403b6c <ADC_Handler+0xd4>
		else currentExternTempSensor++;
  403b14:	3301      	adds	r3, #1
  403b16:	4a1e      	ldr	r2, [pc, #120]	; (403b90 <ADC_Handler+0xf8>)
  403b18:	6013      	str	r3, [r2, #0]
		pinWrite(TEMP_SEL0_PORT,TEMP_SEL0,(bool)(currentExternTempSensor&1));
  403b1a:	4e1d      	ldr	r6, [pc, #116]	; (403b90 <ADC_Handler+0xf8>)
  403b1c:	6832      	ldr	r2, [r6, #0]
  403b1e:	4d1a      	ldr	r5, [pc, #104]	; (403b88 <ADC_Handler+0xf0>)
  403b20:	f002 0201 	and.w	r2, r2, #1
  403b24:	f44f 7180 	mov.w	r1, #256	; 0x100
  403b28:	4628      	mov	r0, r5
  403b2a:	4c18      	ldr	r4, [pc, #96]	; (403b8c <ADC_Handler+0xf4>)
  403b2c:	47a0      	blx	r4
		pinWrite(TEMP_SEL1_PORT,TEMP_SEL1,(bool)(currentExternTempSensor&2));
  403b2e:	6832      	ldr	r2, [r6, #0]
  403b30:	f3c2 0240 	ubfx	r2, r2, #1, #1
  403b34:	f44f 7100 	mov.w	r1, #512	; 0x200
  403b38:	4628      	mov	r0, r5
  403b3a:	47a0      	blx	r4
		pinWrite(TEMP_SEL2_PORT,TEMP_SEL2,(bool)(currentExternTempSensor&4));
  403b3c:	6832      	ldr	r2, [r6, #0]
  403b3e:	f3c2 0280 	ubfx	r2, r2, #2, #1
  403b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403b46:	4628      	mov	r0, r5
  403b48:	47a0      	blx	r4
		rawADCData[FETTEMPIDX] = ADC->ADC_CDR[FET_TEMP_CHANNEL];
  403b4a:	480a      	ldr	r0, [pc, #40]	; (403b74 <ADC_Handler+0xdc>)
  403b4c:	6e03      	ldr	r3, [r0, #96]	; 0x60
  403b4e:	490c      	ldr	r1, [pc, #48]	; (403b80 <ADC_Handler+0xe8>)
  403b50:	638b      	str	r3, [r1, #56]	; 0x38
		needsProcessing[FETTEMPIDX] = true;
  403b52:	4b0c      	ldr	r3, [pc, #48]	; (403b84 <ADC_Handler+0xec>)
  403b54:	2201      	movs	r2, #1
  403b56:	739a      	strb	r2, [r3, #14]
		rawADCData[SHUNTTEMPIDX] = ADC->ADC_CDR[SHUNT_TEMP_CHANNEL];
  403b58:	6e44      	ldr	r4, [r0, #100]	; 0x64
  403b5a:	634c      	str	r4, [r1, #52]	; 0x34
		needsProcessing[SHUNTTEMPIDX] = true;
  403b5c:	735a      	strb	r2, [r3, #13]
        adc_start(ADC);
  403b5e:	4b0d      	ldr	r3, [pc, #52]	; (403b94 <ADC_Handler+0xfc>)
  403b60:	4798      	blx	r3
  403b62:	bd70      	pop	{r4, r5, r6, pc}
		if(currentExternCell == 5) currentExternCell = 0;
  403b64:	2200      	movs	r2, #0
  403b66:	4b05      	ldr	r3, [pc, #20]	; (403b7c <ADC_Handler+0xe4>)
  403b68:	601a      	str	r2, [r3, #0]
  403b6a:	e7ab      	b.n	403ac4 <ADC_Handler+0x2c>
		if(currentExternTempSensor == 5) currentExternTempSensor = 0;
  403b6c:	2200      	movs	r2, #0
  403b6e:	4b08      	ldr	r3, [pc, #32]	; (403b90 <ADC_Handler+0xf8>)
  403b70:	601a      	str	r2, [r3, #0]
  403b72:	e7d2      	b.n	403b1a <ADC_Handler+0x82>
  403b74:	40038000 	.word	0x40038000
  403b78:	00400c85 	.word	0x00400c85
  403b7c:	20000f18 	.word	0x20000f18
  403b80:	20002ba8 	.word	0x20002ba8
  403b84:	20002be8 	.word	0x20002be8
  403b88:	400e0e00 	.word	0x400e0e00
  403b8c:	00403a81 	.word	0x00403a81
  403b90:	20000f1c 	.word	0x20000f1c
  403b94:	00400c71 	.word	0x00400c71

00403b98 <TC1_Handler>:
}

void TC1_Handler(){
  403b98:	b508      	push	{r3, lr}
	pio_toggle_pin(BOARD_LED);
  403b9a:	2008      	movs	r0, #8
  403b9c:	4b01      	ldr	r3, [pc, #4]	; (403ba4 <TC1_Handler+0xc>)
  403b9e:	4798      	blx	r3
  403ba0:	bd08      	pop	{r3, pc}
  403ba2:	bf00      	nop
  403ba4:	00402e55 	.word	0x00402e55

00403ba8 <log>:
  403ba8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  403bac:	b08a      	sub	sp, #40	; 0x28
  403bae:	4604      	mov	r4, r0
  403bb0:	460d      	mov	r5, r1
  403bb2:	f000 f875 	bl	403ca0 <__ieee754_log>
  403bb6:	4b35      	ldr	r3, [pc, #212]	; (403c8c <log+0xe4>)
  403bb8:	f993 6000 	ldrsb.w	r6, [r3]
  403bbc:	1c73      	adds	r3, r6, #1
  403bbe:	4680      	mov	r8, r0
  403bc0:	4689      	mov	r9, r1
  403bc2:	d00d      	beq.n	403be0 <log+0x38>
  403bc4:	4622      	mov	r2, r4
  403bc6:	462b      	mov	r3, r5
  403bc8:	4620      	mov	r0, r4
  403bca:	4629      	mov	r1, r5
  403bcc:	f000 feb6 	bl	40493c <__aeabi_dcmpun>
  403bd0:	b930      	cbnz	r0, 403be0 <log+0x38>
  403bd2:	2200      	movs	r2, #0
  403bd4:	2300      	movs	r3, #0
  403bd6:	4620      	mov	r0, r4
  403bd8:	4629      	mov	r1, r5
  403bda:	f000 fea5 	bl	404928 <__aeabi_dcmpgt>
  403bde:	b120      	cbz	r0, 403bea <log+0x42>
  403be0:	4640      	mov	r0, r8
  403be2:	4649      	mov	r1, r9
  403be4:	b00a      	add	sp, #40	; 0x28
  403be6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  403bea:	4b29      	ldr	r3, [pc, #164]	; (403c90 <log+0xe8>)
  403bec:	9008      	str	r0, [sp, #32]
  403bee:	e9cd 4502 	strd	r4, r5, [sp, #8]
  403bf2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  403bf6:	9301      	str	r3, [sp, #4]
  403bf8:	4620      	mov	r0, r4
  403bfa:	4629      	mov	r1, r5
  403bfc:	b9ce      	cbnz	r6, 403c32 <log+0x8a>
  403bfe:	4d25      	ldr	r5, [pc, #148]	; (403c94 <log+0xec>)
  403c00:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
  403c04:	2200      	movs	r2, #0
  403c06:	2300      	movs	r3, #0
  403c08:	e9cd 4506 	strd	r4, r5, [sp, #24]
  403c0c:	f000 fe64 	bl	4048d8 <__aeabi_dcmpeq>
  403c10:	2800      	cmp	r0, #0
  403c12:	d033      	beq.n	403c7c <log+0xd4>
  403c14:	2302      	movs	r3, #2
  403c16:	9300      	str	r3, [sp, #0]
  403c18:	4668      	mov	r0, sp
  403c1a:	f000 fa35 	bl	404088 <matherr>
  403c1e:	b1a8      	cbz	r0, 403c4c <log+0xa4>
  403c20:	9b08      	ldr	r3, [sp, #32]
  403c22:	b9c3      	cbnz	r3, 403c56 <log+0xae>
  403c24:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  403c28:	4640      	mov	r0, r8
  403c2a:	4649      	mov	r1, r9
  403c2c:	b00a      	add	sp, #40	; 0x28
  403c2e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  403c32:	4d19      	ldr	r5, [pc, #100]	; (403c98 <log+0xf0>)
  403c34:	2400      	movs	r4, #0
  403c36:	2200      	movs	r2, #0
  403c38:	2300      	movs	r3, #0
  403c3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
  403c3e:	f000 fe4b 	bl	4048d8 <__aeabi_dcmpeq>
  403c42:	b168      	cbz	r0, 403c60 <log+0xb8>
  403c44:	2302      	movs	r3, #2
  403c46:	429e      	cmp	r6, r3
  403c48:	9300      	str	r3, [sp, #0]
  403c4a:	d1e5      	bne.n	403c18 <log+0x70>
  403c4c:	f001 f93a 	bl	404ec4 <__errno>
  403c50:	2322      	movs	r3, #34	; 0x22
  403c52:	6003      	str	r3, [r0, #0]
  403c54:	e7e4      	b.n	403c20 <log+0x78>
  403c56:	f001 f935 	bl	404ec4 <__errno>
  403c5a:	9b08      	ldr	r3, [sp, #32]
  403c5c:	6003      	str	r3, [r0, #0]
  403c5e:	e7e1      	b.n	403c24 <log+0x7c>
  403c60:	2301      	movs	r3, #1
  403c62:	2e02      	cmp	r6, #2
  403c64:	9300      	str	r3, [sp, #0]
  403c66:	d10b      	bne.n	403c80 <log+0xd8>
  403c68:	f001 f92c 	bl	404ec4 <__errno>
  403c6c:	2321      	movs	r3, #33	; 0x21
  403c6e:	6003      	str	r3, [r0, #0]
  403c70:	480a      	ldr	r0, [pc, #40]	; (403c9c <log+0xf4>)
  403c72:	f000 fa0b 	bl	40408c <nan>
  403c76:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403c7a:	e7d1      	b.n	403c20 <log+0x78>
  403c7c:	2301      	movs	r3, #1
  403c7e:	9300      	str	r3, [sp, #0]
  403c80:	4668      	mov	r0, sp
  403c82:	f000 fa01 	bl	404088 <matherr>
  403c86:	2800      	cmp	r0, #0
  403c88:	d1f2      	bne.n	403c70 <log+0xc8>
  403c8a:	e7ed      	b.n	403c68 <log+0xc0>
  403c8c:	200000a9 	.word	0x200000a9
  403c90:	00405040 	.word	0x00405040
  403c94:	c7efffff 	.word	0xc7efffff
  403c98:	fff00000 	.word	0xfff00000
  403c9c:	00405044 	.word	0x00405044

00403ca0 <__ieee754_log>:
  403ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ca4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403ca8:	b085      	sub	sp, #20
  403caa:	4606      	mov	r6, r0
  403cac:	460f      	mov	r7, r1
  403cae:	460b      	mov	r3, r1
  403cb0:	da5a      	bge.n	403d68 <__ieee754_log+0xc8>
  403cb2:	4602      	mov	r2, r0
  403cb4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  403cb8:	4322      	orrs	r2, r4
  403cba:	f000 80f8 	beq.w	403eae <__ieee754_log+0x20e>
  403cbe:	2900      	cmp	r1, #0
  403cc0:	f2c0 817a 	blt.w	403fb8 <__ieee754_log+0x318>
  403cc4:	2200      	movs	r2, #0
  403cc6:	4bd6      	ldr	r3, [pc, #856]	; (404020 <__ieee754_log+0x380>)
  403cc8:	f000 fb9e 	bl	404408 <__aeabi_dmul>
  403ccc:	4ad5      	ldr	r2, [pc, #852]	; (404024 <__ieee754_log+0x384>)
  403cce:	460b      	mov	r3, r1
  403cd0:	4293      	cmp	r3, r2
  403cd2:	4606      	mov	r6, r0
  403cd4:	460f      	mov	r7, r1
  403cd6:	f06f 0c35 	mvn.w	ip, #53	; 0x35
  403cda:	dc4a      	bgt.n	403d72 <__ieee754_log+0xd2>
  403cdc:	f3c3 0513 	ubfx	r5, r3, #0, #20
  403ce0:	f505 2e15 	add.w	lr, r5, #610304	; 0x95000
  403ce4:	f60e 7e64 	addw	lr, lr, #3940	; 0xf64
  403ce8:	f40e 1e80 	and.w	lr, lr, #1048576	; 0x100000
  403cec:	f08e 527f 	eor.w	r2, lr, #1069547520	; 0x3fc00000
  403cf0:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
  403cf4:	151c      	asrs	r4, r3, #20
  403cf6:	ea42 0705 	orr.w	r7, r2, r5
  403cfa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  403cfe:	4464      	add	r4, ip
  403d00:	2200      	movs	r2, #0
  403d02:	4bc9      	ldr	r3, [pc, #804]	; (404028 <__ieee754_log+0x388>)
  403d04:	4630      	mov	r0, r6
  403d06:	4639      	mov	r1, r7
  403d08:	eb04 541e 	add.w	r4, r4, lr, lsr #20
  403d0c:	f000 f9c8 	bl	4040a0 <__aeabi_dsub>
  403d10:	1cab      	adds	r3, r5, #2
  403d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403d16:	2b02      	cmp	r3, #2
  403d18:	4682      	mov	sl, r0
  403d1a:	468b      	mov	fp, r1
  403d1c:	f04f 0200 	mov.w	r2, #0
  403d20:	dc30      	bgt.n	403d84 <__ieee754_log+0xe4>
  403d22:	2300      	movs	r3, #0
  403d24:	f000 fdd8 	bl	4048d8 <__aeabi_dcmpeq>
  403d28:	2800      	cmp	r0, #0
  403d2a:	f000 80c9 	beq.w	403ec0 <__ieee754_log+0x220>
  403d2e:	2c00      	cmp	r4, #0
  403d30:	f000 814b 	beq.w	403fca <__ieee754_log+0x32a>
  403d34:	4620      	mov	r0, r4
  403d36:	f000 fb01 	bl	40433c <__aeabi_i2d>
  403d3a:	a3a5      	add	r3, pc, #660	; (adr r3, 403fd0 <__ieee754_log+0x330>)
  403d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d40:	4606      	mov	r6, r0
  403d42:	460f      	mov	r7, r1
  403d44:	f000 fb60 	bl	404408 <__aeabi_dmul>
  403d48:	a3a3      	add	r3, pc, #652	; (adr r3, 403fd8 <__ieee754_log+0x338>)
  403d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d4e:	4604      	mov	r4, r0
  403d50:	460d      	mov	r5, r1
  403d52:	4630      	mov	r0, r6
  403d54:	4639      	mov	r1, r7
  403d56:	f000 fb57 	bl	404408 <__aeabi_dmul>
  403d5a:	4602      	mov	r2, r0
  403d5c:	460b      	mov	r3, r1
  403d5e:	4620      	mov	r0, r4
  403d60:	4629      	mov	r1, r5
  403d62:	f000 f99f 	bl	4040a4 <__adddf3>
  403d66:	e00a      	b.n	403d7e <__ieee754_log+0xde>
  403d68:	4aae      	ldr	r2, [pc, #696]	; (404024 <__ieee754_log+0x384>)
  403d6a:	4293      	cmp	r3, r2
  403d6c:	f04f 0c00 	mov.w	ip, #0
  403d70:	ddb4      	ble.n	403cdc <__ieee754_log+0x3c>
  403d72:	4632      	mov	r2, r6
  403d74:	463b      	mov	r3, r7
  403d76:	4630      	mov	r0, r6
  403d78:	4639      	mov	r1, r7
  403d7a:	f000 f993 	bl	4040a4 <__adddf3>
  403d7e:	b005      	add	sp, #20
  403d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  403d88:	f000 f98c 	bl	4040a4 <__adddf3>
  403d8c:	4602      	mov	r2, r0
  403d8e:	460b      	mov	r3, r1
  403d90:	4650      	mov	r0, sl
  403d92:	4659      	mov	r1, fp
  403d94:	f000 fc62 	bl	40465c <__aeabi_ddiv>
  403d98:	4606      	mov	r6, r0
  403d9a:	4620      	mov	r0, r4
  403d9c:	460f      	mov	r7, r1
  403d9e:	f000 facd 	bl	40433c <__aeabi_i2d>
  403da2:	4632      	mov	r2, r6
  403da4:	e9cd 0100 	strd	r0, r1, [sp]
  403da8:	463b      	mov	r3, r7
  403daa:	4630      	mov	r0, r6
  403dac:	4639      	mov	r1, r7
  403dae:	e9cd 6702 	strd	r6, r7, [sp, #8]
  403db2:	f000 fb29 	bl	404408 <__aeabi_dmul>
  403db6:	4602      	mov	r2, r0
  403db8:	460b      	mov	r3, r1
  403dba:	4680      	mov	r8, r0
  403dbc:	4689      	mov	r9, r1
  403dbe:	f000 fb23 	bl	404408 <__aeabi_dmul>
  403dc2:	a387      	add	r3, pc, #540	; (adr r3, 403fe0 <__ieee754_log+0x340>)
  403dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403dc8:	4606      	mov	r6, r0
  403dca:	460f      	mov	r7, r1
  403dcc:	f000 fb1c 	bl	404408 <__aeabi_dmul>
  403dd0:	a385      	add	r3, pc, #532	; (adr r3, 403fe8 <__ieee754_log+0x348>)
  403dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403dd6:	f000 f965 	bl	4040a4 <__adddf3>
  403dda:	4632      	mov	r2, r6
  403ddc:	463b      	mov	r3, r7
  403dde:	f000 fb13 	bl	404408 <__aeabi_dmul>
  403de2:	a383      	add	r3, pc, #524	; (adr r3, 403ff0 <__ieee754_log+0x350>)
  403de4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403de8:	f000 f95c 	bl	4040a4 <__adddf3>
  403dec:	4632      	mov	r2, r6
  403dee:	463b      	mov	r3, r7
  403df0:	f000 fb0a 	bl	404408 <__aeabi_dmul>
  403df4:	a380      	add	r3, pc, #512	; (adr r3, 403ff8 <__ieee754_log+0x358>)
  403df6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403dfa:	f000 f953 	bl	4040a4 <__adddf3>
  403dfe:	4642      	mov	r2, r8
  403e00:	464b      	mov	r3, r9
  403e02:	f000 fb01 	bl	404408 <__aeabi_dmul>
  403e06:	a37e      	add	r3, pc, #504	; (adr r3, 404000 <__ieee754_log+0x360>)
  403e08:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e0c:	4680      	mov	r8, r0
  403e0e:	4689      	mov	r9, r1
  403e10:	4630      	mov	r0, r6
  403e12:	4639      	mov	r1, r7
  403e14:	f000 faf8 	bl	404408 <__aeabi_dmul>
  403e18:	a37b      	add	r3, pc, #492	; (adr r3, 404008 <__ieee754_log+0x368>)
  403e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e1e:	f000 f941 	bl	4040a4 <__adddf3>
  403e22:	4632      	mov	r2, r6
  403e24:	463b      	mov	r3, r7
  403e26:	f000 faef 	bl	404408 <__aeabi_dmul>
  403e2a:	a379      	add	r3, pc, #484	; (adr r3, 404010 <__ieee754_log+0x370>)
  403e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e30:	f000 f938 	bl	4040a4 <__adddf3>
  403e34:	4632      	mov	r2, r6
  403e36:	463b      	mov	r3, r7
  403e38:	f000 fae6 	bl	404408 <__aeabi_dmul>
  403e3c:	460b      	mov	r3, r1
  403e3e:	4602      	mov	r2, r0
  403e40:	4649      	mov	r1, r9
  403e42:	4640      	mov	r0, r8
  403e44:	f000 f92e 	bl	4040a4 <__adddf3>
  403e48:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
  403e4c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
  403e50:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
  403e54:	3551      	adds	r5, #81	; 0x51
  403e56:	431d      	orrs	r5, r3
  403e58:	2d00      	cmp	r5, #0
  403e5a:	4680      	mov	r8, r0
  403e5c:	4689      	mov	r9, r1
  403e5e:	dd56      	ble.n	403f0e <__ieee754_log+0x26e>
  403e60:	2200      	movs	r2, #0
  403e62:	4b72      	ldr	r3, [pc, #456]	; (40402c <__ieee754_log+0x38c>)
  403e64:	4650      	mov	r0, sl
  403e66:	4659      	mov	r1, fp
  403e68:	f000 face 	bl	404408 <__aeabi_dmul>
  403e6c:	4652      	mov	r2, sl
  403e6e:	465b      	mov	r3, fp
  403e70:	f000 faca 	bl	404408 <__aeabi_dmul>
  403e74:	4606      	mov	r6, r0
  403e76:	460f      	mov	r7, r1
  403e78:	2c00      	cmp	r4, #0
  403e7a:	d168      	bne.n	403f4e <__ieee754_log+0x2ae>
  403e7c:	4632      	mov	r2, r6
  403e7e:	463b      	mov	r3, r7
  403e80:	4640      	mov	r0, r8
  403e82:	4649      	mov	r1, r9
  403e84:	f000 f90e 	bl	4040a4 <__adddf3>
  403e88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403e8c:	f000 fabc 	bl	404408 <__aeabi_dmul>
  403e90:	4602      	mov	r2, r0
  403e92:	460b      	mov	r3, r1
  403e94:	4630      	mov	r0, r6
  403e96:	4639      	mov	r1, r7
  403e98:	f000 f902 	bl	4040a0 <__aeabi_dsub>
  403e9c:	4602      	mov	r2, r0
  403e9e:	460b      	mov	r3, r1
  403ea0:	4650      	mov	r0, sl
  403ea2:	4659      	mov	r1, fp
  403ea4:	f000 f8fc 	bl	4040a0 <__aeabi_dsub>
  403ea8:	b005      	add	sp, #20
  403eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403eae:	2200      	movs	r2, #0
  403eb0:	2300      	movs	r3, #0
  403eb2:	2000      	movs	r0, #0
  403eb4:	495e      	ldr	r1, [pc, #376]	; (404030 <__ieee754_log+0x390>)
  403eb6:	f000 fbd1 	bl	40465c <__aeabi_ddiv>
  403eba:	b005      	add	sp, #20
  403ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ec0:	a355      	add	r3, pc, #340	; (adr r3, 404018 <__ieee754_log+0x378>)
  403ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ec6:	4650      	mov	r0, sl
  403ec8:	4659      	mov	r1, fp
  403eca:	f000 fa9d 	bl	404408 <__aeabi_dmul>
  403ece:	4602      	mov	r2, r0
  403ed0:	460b      	mov	r3, r1
  403ed2:	2000      	movs	r0, #0
  403ed4:	4955      	ldr	r1, [pc, #340]	; (40402c <__ieee754_log+0x38c>)
  403ed6:	f000 f8e3 	bl	4040a0 <__aeabi_dsub>
  403eda:	4652      	mov	r2, sl
  403edc:	4606      	mov	r6, r0
  403ede:	460f      	mov	r7, r1
  403ee0:	465b      	mov	r3, fp
  403ee2:	4650      	mov	r0, sl
  403ee4:	4659      	mov	r1, fp
  403ee6:	f000 fa8f 	bl	404408 <__aeabi_dmul>
  403eea:	4602      	mov	r2, r0
  403eec:	460b      	mov	r3, r1
  403eee:	4630      	mov	r0, r6
  403ef0:	4639      	mov	r1, r7
  403ef2:	f000 fa89 	bl	404408 <__aeabi_dmul>
  403ef6:	4606      	mov	r6, r0
  403ef8:	460f      	mov	r7, r1
  403efa:	2c00      	cmp	r4, #0
  403efc:	f040 809a 	bne.w	404034 <__ieee754_log+0x394>
  403f00:	4602      	mov	r2, r0
  403f02:	460b      	mov	r3, r1
  403f04:	4650      	mov	r0, sl
  403f06:	4659      	mov	r1, fp
  403f08:	f000 f8ca 	bl	4040a0 <__aeabi_dsub>
  403f0c:	e737      	b.n	403d7e <__ieee754_log+0xde>
  403f0e:	2c00      	cmp	r4, #0
  403f10:	f000 80a4 	beq.w	40405c <__ieee754_log+0x3bc>
  403f14:	a32e      	add	r3, pc, #184	; (adr r3, 403fd0 <__ieee754_log+0x330>)
  403f16:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
  403f1e:	f000 fa73 	bl	404408 <__aeabi_dmul>
  403f22:	4642      	mov	r2, r8
  403f24:	464b      	mov	r3, r9
  403f26:	4604      	mov	r4, r0
  403f28:	460d      	mov	r5, r1
  403f2a:	4650      	mov	r0, sl
  403f2c:	4659      	mov	r1, fp
  403f2e:	f000 f8b7 	bl	4040a0 <__aeabi_dsub>
  403f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403f36:	f000 fa67 	bl	404408 <__aeabi_dmul>
  403f3a:	a327      	add	r3, pc, #156	; (adr r3, 403fd8 <__ieee754_log+0x338>)
  403f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f40:	4606      	mov	r6, r0
  403f42:	460f      	mov	r7, r1
  403f44:	e9dd 0100 	ldrd	r0, r1, [sp]
  403f48:	f000 fa5e 	bl	404408 <__aeabi_dmul>
  403f4c:	e021      	b.n	403f92 <__ieee754_log+0x2f2>
  403f4e:	a320      	add	r3, pc, #128	; (adr r3, 403fd0 <__ieee754_log+0x330>)
  403f50:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f54:	e9dd 0100 	ldrd	r0, r1, [sp]
  403f58:	f000 fa56 	bl	404408 <__aeabi_dmul>
  403f5c:	4632      	mov	r2, r6
  403f5e:	463b      	mov	r3, r7
  403f60:	4604      	mov	r4, r0
  403f62:	460d      	mov	r5, r1
  403f64:	4640      	mov	r0, r8
  403f66:	4649      	mov	r1, r9
  403f68:	f000 f89c 	bl	4040a4 <__adddf3>
  403f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403f70:	f000 fa4a 	bl	404408 <__aeabi_dmul>
  403f74:	a318      	add	r3, pc, #96	; (adr r3, 403fd8 <__ieee754_log+0x338>)
  403f76:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f7a:	4680      	mov	r8, r0
  403f7c:	4689      	mov	r9, r1
  403f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
  403f82:	f000 fa41 	bl	404408 <__aeabi_dmul>
  403f86:	4602      	mov	r2, r0
  403f88:	460b      	mov	r3, r1
  403f8a:	4640      	mov	r0, r8
  403f8c:	4649      	mov	r1, r9
  403f8e:	f000 f889 	bl	4040a4 <__adddf3>
  403f92:	4602      	mov	r2, r0
  403f94:	460b      	mov	r3, r1
  403f96:	4630      	mov	r0, r6
  403f98:	4639      	mov	r1, r7
  403f9a:	f000 f881 	bl	4040a0 <__aeabi_dsub>
  403f9e:	4652      	mov	r2, sl
  403fa0:	465b      	mov	r3, fp
  403fa2:	f000 f87d 	bl	4040a0 <__aeabi_dsub>
  403fa6:	4602      	mov	r2, r0
  403fa8:	460b      	mov	r3, r1
  403faa:	4620      	mov	r0, r4
  403fac:	4629      	mov	r1, r5
  403fae:	f000 f877 	bl	4040a0 <__aeabi_dsub>
  403fb2:	b005      	add	sp, #20
  403fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fb8:	4602      	mov	r2, r0
  403fba:	460b      	mov	r3, r1
  403fbc:	f000 f870 	bl	4040a0 <__aeabi_dsub>
  403fc0:	2200      	movs	r2, #0
  403fc2:	2300      	movs	r3, #0
  403fc4:	f000 fb4a 	bl	40465c <__aeabi_ddiv>
  403fc8:	e6d9      	b.n	403d7e <__ieee754_log+0xde>
  403fca:	2000      	movs	r0, #0
  403fcc:	2100      	movs	r1, #0
  403fce:	e6d6      	b.n	403d7e <__ieee754_log+0xde>
  403fd0:	fee00000 	.word	0xfee00000
  403fd4:	3fe62e42 	.word	0x3fe62e42
  403fd8:	35793c76 	.word	0x35793c76
  403fdc:	3dea39ef 	.word	0x3dea39ef
  403fe0:	df3e5244 	.word	0xdf3e5244
  403fe4:	3fc2f112 	.word	0x3fc2f112
  403fe8:	96cb03de 	.word	0x96cb03de
  403fec:	3fc74664 	.word	0x3fc74664
  403ff0:	94229359 	.word	0x94229359
  403ff4:	3fd24924 	.word	0x3fd24924
  403ff8:	55555593 	.word	0x55555593
  403ffc:	3fe55555 	.word	0x3fe55555
  404000:	d078c69f 	.word	0xd078c69f
  404004:	3fc39a09 	.word	0x3fc39a09
  404008:	1d8e78af 	.word	0x1d8e78af
  40400c:	3fcc71c5 	.word	0x3fcc71c5
  404010:	9997fa04 	.word	0x9997fa04
  404014:	3fd99999 	.word	0x3fd99999
  404018:	55555555 	.word	0x55555555
  40401c:	3fd55555 	.word	0x3fd55555
  404020:	43500000 	.word	0x43500000
  404024:	7fefffff 	.word	0x7fefffff
  404028:	3ff00000 	.word	0x3ff00000
  40402c:	3fe00000 	.word	0x3fe00000
  404030:	c3500000 	.word	0xc3500000
  404034:	4620      	mov	r0, r4
  404036:	f000 f981 	bl	40433c <__aeabi_i2d>
  40403a:	a30f      	add	r3, pc, #60	; (adr r3, 404078 <__ieee754_log+0x3d8>)
  40403c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404040:	4680      	mov	r8, r0
  404042:	4689      	mov	r9, r1
  404044:	f000 f9e0 	bl	404408 <__aeabi_dmul>
  404048:	a30d      	add	r3, pc, #52	; (adr r3, 404080 <__ieee754_log+0x3e0>)
  40404a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40404e:	4604      	mov	r4, r0
  404050:	460d      	mov	r5, r1
  404052:	4640      	mov	r0, r8
  404054:	4649      	mov	r1, r9
  404056:	f000 f9d7 	bl	404408 <__aeabi_dmul>
  40405a:	e79a      	b.n	403f92 <__ieee754_log+0x2f2>
  40405c:	4602      	mov	r2, r0
  40405e:	460b      	mov	r3, r1
  404060:	4650      	mov	r0, sl
  404062:	4659      	mov	r1, fp
  404064:	f000 f81c 	bl	4040a0 <__aeabi_dsub>
  404068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40406c:	f000 f9cc 	bl	404408 <__aeabi_dmul>
  404070:	e714      	b.n	403e9c <__ieee754_log+0x1fc>
  404072:	bf00      	nop
  404074:	f3af 8000 	nop.w
  404078:	fee00000 	.word	0xfee00000
  40407c:	3fe62e42 	.word	0x3fe62e42
  404080:	35793c76 	.word	0x35793c76
  404084:	3dea39ef 	.word	0x3dea39ef

00404088 <matherr>:
  404088:	2000      	movs	r0, #0
  40408a:	4770      	bx	lr

0040408c <nan>:
  40408c:	2000      	movs	r0, #0
  40408e:	4901      	ldr	r1, [pc, #4]	; (404094 <nan+0x8>)
  404090:	4770      	bx	lr
  404092:	bf00      	nop
  404094:	7ff80000 	.word	0x7ff80000

00404098 <__aeabi_drsub>:
  404098:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40409c:	e002      	b.n	4040a4 <__adddf3>
  40409e:	bf00      	nop

004040a0 <__aeabi_dsub>:
  4040a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004040a4 <__adddf3>:
  4040a4:	b530      	push	{r4, r5, lr}
  4040a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4040aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4040ae:	ea94 0f05 	teq	r4, r5
  4040b2:	bf08      	it	eq
  4040b4:	ea90 0f02 	teqeq	r0, r2
  4040b8:	bf1f      	itttt	ne
  4040ba:	ea54 0c00 	orrsne.w	ip, r4, r0
  4040be:	ea55 0c02 	orrsne.w	ip, r5, r2
  4040c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4040c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4040ca:	f000 80e2 	beq.w	404292 <__adddf3+0x1ee>
  4040ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4040d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4040d6:	bfb8      	it	lt
  4040d8:	426d      	neglt	r5, r5
  4040da:	dd0c      	ble.n	4040f6 <__adddf3+0x52>
  4040dc:	442c      	add	r4, r5
  4040de:	ea80 0202 	eor.w	r2, r0, r2
  4040e2:	ea81 0303 	eor.w	r3, r1, r3
  4040e6:	ea82 0000 	eor.w	r0, r2, r0
  4040ea:	ea83 0101 	eor.w	r1, r3, r1
  4040ee:	ea80 0202 	eor.w	r2, r0, r2
  4040f2:	ea81 0303 	eor.w	r3, r1, r3
  4040f6:	2d36      	cmp	r5, #54	; 0x36
  4040f8:	bf88      	it	hi
  4040fa:	bd30      	pophi	{r4, r5, pc}
  4040fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404100:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404104:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404108:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40410c:	d002      	beq.n	404114 <__adddf3+0x70>
  40410e:	4240      	negs	r0, r0
  404110:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404114:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404118:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40411c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404120:	d002      	beq.n	404128 <__adddf3+0x84>
  404122:	4252      	negs	r2, r2
  404124:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404128:	ea94 0f05 	teq	r4, r5
  40412c:	f000 80a7 	beq.w	40427e <__adddf3+0x1da>
  404130:	f1a4 0401 	sub.w	r4, r4, #1
  404134:	f1d5 0e20 	rsbs	lr, r5, #32
  404138:	db0d      	blt.n	404156 <__adddf3+0xb2>
  40413a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40413e:	fa22 f205 	lsr.w	r2, r2, r5
  404142:	1880      	adds	r0, r0, r2
  404144:	f141 0100 	adc.w	r1, r1, #0
  404148:	fa03 f20e 	lsl.w	r2, r3, lr
  40414c:	1880      	adds	r0, r0, r2
  40414e:	fa43 f305 	asr.w	r3, r3, r5
  404152:	4159      	adcs	r1, r3
  404154:	e00e      	b.n	404174 <__adddf3+0xd0>
  404156:	f1a5 0520 	sub.w	r5, r5, #32
  40415a:	f10e 0e20 	add.w	lr, lr, #32
  40415e:	2a01      	cmp	r2, #1
  404160:	fa03 fc0e 	lsl.w	ip, r3, lr
  404164:	bf28      	it	cs
  404166:	f04c 0c02 	orrcs.w	ip, ip, #2
  40416a:	fa43 f305 	asr.w	r3, r3, r5
  40416e:	18c0      	adds	r0, r0, r3
  404170:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  404174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404178:	d507      	bpl.n	40418a <__adddf3+0xe6>
  40417a:	f04f 0e00 	mov.w	lr, #0
  40417e:	f1dc 0c00 	rsbs	ip, ip, #0
  404182:	eb7e 0000 	sbcs.w	r0, lr, r0
  404186:	eb6e 0101 	sbc.w	r1, lr, r1
  40418a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40418e:	d31b      	bcc.n	4041c8 <__adddf3+0x124>
  404190:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  404194:	d30c      	bcc.n	4041b0 <__adddf3+0x10c>
  404196:	0849      	lsrs	r1, r1, #1
  404198:	ea5f 0030 	movs.w	r0, r0, rrx
  40419c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4041a0:	f104 0401 	add.w	r4, r4, #1
  4041a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4041a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4041ac:	f080 809a 	bcs.w	4042e4 <__adddf3+0x240>
  4041b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4041b4:	bf08      	it	eq
  4041b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4041ba:	f150 0000 	adcs.w	r0, r0, #0
  4041be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4041c2:	ea41 0105 	orr.w	r1, r1, r5
  4041c6:	bd30      	pop	{r4, r5, pc}
  4041c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4041cc:	4140      	adcs	r0, r0
  4041ce:	eb41 0101 	adc.w	r1, r1, r1
  4041d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4041d6:	f1a4 0401 	sub.w	r4, r4, #1
  4041da:	d1e9      	bne.n	4041b0 <__adddf3+0x10c>
  4041dc:	f091 0f00 	teq	r1, #0
  4041e0:	bf04      	itt	eq
  4041e2:	4601      	moveq	r1, r0
  4041e4:	2000      	moveq	r0, #0
  4041e6:	fab1 f381 	clz	r3, r1
  4041ea:	bf08      	it	eq
  4041ec:	3320      	addeq	r3, #32
  4041ee:	f1a3 030b 	sub.w	r3, r3, #11
  4041f2:	f1b3 0220 	subs.w	r2, r3, #32
  4041f6:	da0c      	bge.n	404212 <__adddf3+0x16e>
  4041f8:	320c      	adds	r2, #12
  4041fa:	dd08      	ble.n	40420e <__adddf3+0x16a>
  4041fc:	f102 0c14 	add.w	ip, r2, #20
  404200:	f1c2 020c 	rsb	r2, r2, #12
  404204:	fa01 f00c 	lsl.w	r0, r1, ip
  404208:	fa21 f102 	lsr.w	r1, r1, r2
  40420c:	e00c      	b.n	404228 <__adddf3+0x184>
  40420e:	f102 0214 	add.w	r2, r2, #20
  404212:	bfd8      	it	le
  404214:	f1c2 0c20 	rsble	ip, r2, #32
  404218:	fa01 f102 	lsl.w	r1, r1, r2
  40421c:	fa20 fc0c 	lsr.w	ip, r0, ip
  404220:	bfdc      	itt	le
  404222:	ea41 010c 	orrle.w	r1, r1, ip
  404226:	4090      	lslle	r0, r2
  404228:	1ae4      	subs	r4, r4, r3
  40422a:	bfa2      	ittt	ge
  40422c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404230:	4329      	orrge	r1, r5
  404232:	bd30      	popge	{r4, r5, pc}
  404234:	ea6f 0404 	mvn.w	r4, r4
  404238:	3c1f      	subs	r4, #31
  40423a:	da1c      	bge.n	404276 <__adddf3+0x1d2>
  40423c:	340c      	adds	r4, #12
  40423e:	dc0e      	bgt.n	40425e <__adddf3+0x1ba>
  404240:	f104 0414 	add.w	r4, r4, #20
  404244:	f1c4 0220 	rsb	r2, r4, #32
  404248:	fa20 f004 	lsr.w	r0, r0, r4
  40424c:	fa01 f302 	lsl.w	r3, r1, r2
  404250:	ea40 0003 	orr.w	r0, r0, r3
  404254:	fa21 f304 	lsr.w	r3, r1, r4
  404258:	ea45 0103 	orr.w	r1, r5, r3
  40425c:	bd30      	pop	{r4, r5, pc}
  40425e:	f1c4 040c 	rsb	r4, r4, #12
  404262:	f1c4 0220 	rsb	r2, r4, #32
  404266:	fa20 f002 	lsr.w	r0, r0, r2
  40426a:	fa01 f304 	lsl.w	r3, r1, r4
  40426e:	ea40 0003 	orr.w	r0, r0, r3
  404272:	4629      	mov	r1, r5
  404274:	bd30      	pop	{r4, r5, pc}
  404276:	fa21 f004 	lsr.w	r0, r1, r4
  40427a:	4629      	mov	r1, r5
  40427c:	bd30      	pop	{r4, r5, pc}
  40427e:	f094 0f00 	teq	r4, #0
  404282:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404286:	bf06      	itte	eq
  404288:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40428c:	3401      	addeq	r4, #1
  40428e:	3d01      	subne	r5, #1
  404290:	e74e      	b.n	404130 <__adddf3+0x8c>
  404292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404296:	bf18      	it	ne
  404298:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40429c:	d029      	beq.n	4042f2 <__adddf3+0x24e>
  40429e:	ea94 0f05 	teq	r4, r5
  4042a2:	bf08      	it	eq
  4042a4:	ea90 0f02 	teqeq	r0, r2
  4042a8:	d005      	beq.n	4042b6 <__adddf3+0x212>
  4042aa:	ea54 0c00 	orrs.w	ip, r4, r0
  4042ae:	bf04      	itt	eq
  4042b0:	4619      	moveq	r1, r3
  4042b2:	4610      	moveq	r0, r2
  4042b4:	bd30      	pop	{r4, r5, pc}
  4042b6:	ea91 0f03 	teq	r1, r3
  4042ba:	bf1e      	ittt	ne
  4042bc:	2100      	movne	r1, #0
  4042be:	2000      	movne	r0, #0
  4042c0:	bd30      	popne	{r4, r5, pc}
  4042c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4042c6:	d105      	bne.n	4042d4 <__adddf3+0x230>
  4042c8:	0040      	lsls	r0, r0, #1
  4042ca:	4149      	adcs	r1, r1
  4042cc:	bf28      	it	cs
  4042ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4042d2:	bd30      	pop	{r4, r5, pc}
  4042d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4042d8:	bf3c      	itt	cc
  4042da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4042de:	bd30      	popcc	{r4, r5, pc}
  4042e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4042e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4042e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4042ec:	f04f 0000 	mov.w	r0, #0
  4042f0:	bd30      	pop	{r4, r5, pc}
  4042f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4042f6:	bf1a      	itte	ne
  4042f8:	4619      	movne	r1, r3
  4042fa:	4610      	movne	r0, r2
  4042fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404300:	bf1c      	itt	ne
  404302:	460b      	movne	r3, r1
  404304:	4602      	movne	r2, r0
  404306:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40430a:	bf06      	itte	eq
  40430c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404310:	ea91 0f03 	teqeq	r1, r3
  404314:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404318:	bd30      	pop	{r4, r5, pc}
  40431a:	bf00      	nop

0040431c <__aeabi_ui2d>:
  40431c:	f090 0f00 	teq	r0, #0
  404320:	bf04      	itt	eq
  404322:	2100      	moveq	r1, #0
  404324:	4770      	bxeq	lr
  404326:	b530      	push	{r4, r5, lr}
  404328:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40432c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404330:	f04f 0500 	mov.w	r5, #0
  404334:	f04f 0100 	mov.w	r1, #0
  404338:	e750      	b.n	4041dc <__adddf3+0x138>
  40433a:	bf00      	nop

0040433c <__aeabi_i2d>:
  40433c:	f090 0f00 	teq	r0, #0
  404340:	bf04      	itt	eq
  404342:	2100      	moveq	r1, #0
  404344:	4770      	bxeq	lr
  404346:	b530      	push	{r4, r5, lr}
  404348:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40434c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404350:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404354:	bf48      	it	mi
  404356:	4240      	negmi	r0, r0
  404358:	f04f 0100 	mov.w	r1, #0
  40435c:	e73e      	b.n	4041dc <__adddf3+0x138>
  40435e:	bf00      	nop

00404360 <__aeabi_f2d>:
  404360:	0042      	lsls	r2, r0, #1
  404362:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404366:	ea4f 0131 	mov.w	r1, r1, rrx
  40436a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40436e:	bf1f      	itttt	ne
  404370:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404374:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404378:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40437c:	4770      	bxne	lr
  40437e:	f092 0f00 	teq	r2, #0
  404382:	bf14      	ite	ne
  404384:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404388:	4770      	bxeq	lr
  40438a:	b530      	push	{r4, r5, lr}
  40438c:	f44f 7460 	mov.w	r4, #896	; 0x380
  404390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404394:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404398:	e720      	b.n	4041dc <__adddf3+0x138>
  40439a:	bf00      	nop

0040439c <__aeabi_ul2d>:
  40439c:	ea50 0201 	orrs.w	r2, r0, r1
  4043a0:	bf08      	it	eq
  4043a2:	4770      	bxeq	lr
  4043a4:	b530      	push	{r4, r5, lr}
  4043a6:	f04f 0500 	mov.w	r5, #0
  4043aa:	e00a      	b.n	4043c2 <__aeabi_l2d+0x16>

004043ac <__aeabi_l2d>:
  4043ac:	ea50 0201 	orrs.w	r2, r0, r1
  4043b0:	bf08      	it	eq
  4043b2:	4770      	bxeq	lr
  4043b4:	b530      	push	{r4, r5, lr}
  4043b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4043ba:	d502      	bpl.n	4043c2 <__aeabi_l2d+0x16>
  4043bc:	4240      	negs	r0, r0
  4043be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4043c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4043c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4043ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4043ce:	f43f aedc 	beq.w	40418a <__adddf3+0xe6>
  4043d2:	f04f 0203 	mov.w	r2, #3
  4043d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4043da:	bf18      	it	ne
  4043dc:	3203      	addne	r2, #3
  4043de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4043e2:	bf18      	it	ne
  4043e4:	3203      	addne	r2, #3
  4043e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4043ea:	f1c2 0320 	rsb	r3, r2, #32
  4043ee:	fa00 fc03 	lsl.w	ip, r0, r3
  4043f2:	fa20 f002 	lsr.w	r0, r0, r2
  4043f6:	fa01 fe03 	lsl.w	lr, r1, r3
  4043fa:	ea40 000e 	orr.w	r0, r0, lr
  4043fe:	fa21 f102 	lsr.w	r1, r1, r2
  404402:	4414      	add	r4, r2
  404404:	e6c1      	b.n	40418a <__adddf3+0xe6>
  404406:	bf00      	nop

00404408 <__aeabi_dmul>:
  404408:	b570      	push	{r4, r5, r6, lr}
  40440a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40440e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404412:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404416:	bf1d      	ittte	ne
  404418:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40441c:	ea94 0f0c 	teqne	r4, ip
  404420:	ea95 0f0c 	teqne	r5, ip
  404424:	f000 f8de 	bleq	4045e4 <__aeabi_dmul+0x1dc>
  404428:	442c      	add	r4, r5
  40442a:	ea81 0603 	eor.w	r6, r1, r3
  40442e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404432:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404436:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40443a:	bf18      	it	ne
  40443c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404440:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404448:	d038      	beq.n	4044bc <__aeabi_dmul+0xb4>
  40444a:	fba0 ce02 	umull	ip, lr, r0, r2
  40444e:	f04f 0500 	mov.w	r5, #0
  404452:	fbe1 e502 	umlal	lr, r5, r1, r2
  404456:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40445a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40445e:	f04f 0600 	mov.w	r6, #0
  404462:	fbe1 5603 	umlal	r5, r6, r1, r3
  404466:	f09c 0f00 	teq	ip, #0
  40446a:	bf18      	it	ne
  40446c:	f04e 0e01 	orrne.w	lr, lr, #1
  404470:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404474:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404478:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40447c:	d204      	bcs.n	404488 <__aeabi_dmul+0x80>
  40447e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404482:	416d      	adcs	r5, r5
  404484:	eb46 0606 	adc.w	r6, r6, r6
  404488:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40448c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404490:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404494:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404498:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40449c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4044a0:	bf88      	it	hi
  4044a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4044a6:	d81e      	bhi.n	4044e6 <__aeabi_dmul+0xde>
  4044a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4044ac:	bf08      	it	eq
  4044ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4044b2:	f150 0000 	adcs.w	r0, r0, #0
  4044b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4044ba:	bd70      	pop	{r4, r5, r6, pc}
  4044bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4044c0:	ea46 0101 	orr.w	r1, r6, r1
  4044c4:	ea40 0002 	orr.w	r0, r0, r2
  4044c8:	ea81 0103 	eor.w	r1, r1, r3
  4044cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4044d0:	bfc2      	ittt	gt
  4044d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4044d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4044da:	bd70      	popgt	{r4, r5, r6, pc}
  4044dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4044e0:	f04f 0e00 	mov.w	lr, #0
  4044e4:	3c01      	subs	r4, #1
  4044e6:	f300 80ab 	bgt.w	404640 <__aeabi_dmul+0x238>
  4044ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4044ee:	bfde      	ittt	le
  4044f0:	2000      	movle	r0, #0
  4044f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4044f6:	bd70      	pople	{r4, r5, r6, pc}
  4044f8:	f1c4 0400 	rsb	r4, r4, #0
  4044fc:	3c20      	subs	r4, #32
  4044fe:	da35      	bge.n	40456c <__aeabi_dmul+0x164>
  404500:	340c      	adds	r4, #12
  404502:	dc1b      	bgt.n	40453c <__aeabi_dmul+0x134>
  404504:	f104 0414 	add.w	r4, r4, #20
  404508:	f1c4 0520 	rsb	r5, r4, #32
  40450c:	fa00 f305 	lsl.w	r3, r0, r5
  404510:	fa20 f004 	lsr.w	r0, r0, r4
  404514:	fa01 f205 	lsl.w	r2, r1, r5
  404518:	ea40 0002 	orr.w	r0, r0, r2
  40451c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404524:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404528:	fa21 f604 	lsr.w	r6, r1, r4
  40452c:	eb42 0106 	adc.w	r1, r2, r6
  404530:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404534:	bf08      	it	eq
  404536:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40453a:	bd70      	pop	{r4, r5, r6, pc}
  40453c:	f1c4 040c 	rsb	r4, r4, #12
  404540:	f1c4 0520 	rsb	r5, r4, #32
  404544:	fa00 f304 	lsl.w	r3, r0, r4
  404548:	fa20 f005 	lsr.w	r0, r0, r5
  40454c:	fa01 f204 	lsl.w	r2, r1, r4
  404550:	ea40 0002 	orr.w	r0, r0, r2
  404554:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404558:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40455c:	f141 0100 	adc.w	r1, r1, #0
  404560:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404564:	bf08      	it	eq
  404566:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40456a:	bd70      	pop	{r4, r5, r6, pc}
  40456c:	f1c4 0520 	rsb	r5, r4, #32
  404570:	fa00 f205 	lsl.w	r2, r0, r5
  404574:	ea4e 0e02 	orr.w	lr, lr, r2
  404578:	fa20 f304 	lsr.w	r3, r0, r4
  40457c:	fa01 f205 	lsl.w	r2, r1, r5
  404580:	ea43 0302 	orr.w	r3, r3, r2
  404584:	fa21 f004 	lsr.w	r0, r1, r4
  404588:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40458c:	fa21 f204 	lsr.w	r2, r1, r4
  404590:	ea20 0002 	bic.w	r0, r0, r2
  404594:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404598:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40459c:	bf08      	it	eq
  40459e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4045a2:	bd70      	pop	{r4, r5, r6, pc}
  4045a4:	f094 0f00 	teq	r4, #0
  4045a8:	d10f      	bne.n	4045ca <__aeabi_dmul+0x1c2>
  4045aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4045ae:	0040      	lsls	r0, r0, #1
  4045b0:	eb41 0101 	adc.w	r1, r1, r1
  4045b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4045b8:	bf08      	it	eq
  4045ba:	3c01      	subeq	r4, #1
  4045bc:	d0f7      	beq.n	4045ae <__aeabi_dmul+0x1a6>
  4045be:	ea41 0106 	orr.w	r1, r1, r6
  4045c2:	f095 0f00 	teq	r5, #0
  4045c6:	bf18      	it	ne
  4045c8:	4770      	bxne	lr
  4045ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4045ce:	0052      	lsls	r2, r2, #1
  4045d0:	eb43 0303 	adc.w	r3, r3, r3
  4045d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4045d8:	bf08      	it	eq
  4045da:	3d01      	subeq	r5, #1
  4045dc:	d0f7      	beq.n	4045ce <__aeabi_dmul+0x1c6>
  4045de:	ea43 0306 	orr.w	r3, r3, r6
  4045e2:	4770      	bx	lr
  4045e4:	ea94 0f0c 	teq	r4, ip
  4045e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4045ec:	bf18      	it	ne
  4045ee:	ea95 0f0c 	teqne	r5, ip
  4045f2:	d00c      	beq.n	40460e <__aeabi_dmul+0x206>
  4045f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4045f8:	bf18      	it	ne
  4045fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4045fe:	d1d1      	bne.n	4045a4 <__aeabi_dmul+0x19c>
  404600:	ea81 0103 	eor.w	r1, r1, r3
  404604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404608:	f04f 0000 	mov.w	r0, #0
  40460c:	bd70      	pop	{r4, r5, r6, pc}
  40460e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404612:	bf06      	itte	eq
  404614:	4610      	moveq	r0, r2
  404616:	4619      	moveq	r1, r3
  404618:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40461c:	d019      	beq.n	404652 <__aeabi_dmul+0x24a>
  40461e:	ea94 0f0c 	teq	r4, ip
  404622:	d102      	bne.n	40462a <__aeabi_dmul+0x222>
  404624:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404628:	d113      	bne.n	404652 <__aeabi_dmul+0x24a>
  40462a:	ea95 0f0c 	teq	r5, ip
  40462e:	d105      	bne.n	40463c <__aeabi_dmul+0x234>
  404630:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404634:	bf1c      	itt	ne
  404636:	4610      	movne	r0, r2
  404638:	4619      	movne	r1, r3
  40463a:	d10a      	bne.n	404652 <__aeabi_dmul+0x24a>
  40463c:	ea81 0103 	eor.w	r1, r1, r3
  404640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404644:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40464c:	f04f 0000 	mov.w	r0, #0
  404650:	bd70      	pop	{r4, r5, r6, pc}
  404652:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404656:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40465a:	bd70      	pop	{r4, r5, r6, pc}

0040465c <__aeabi_ddiv>:
  40465c:	b570      	push	{r4, r5, r6, lr}
  40465e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404662:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404666:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40466a:	bf1d      	ittte	ne
  40466c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404670:	ea94 0f0c 	teqne	r4, ip
  404674:	ea95 0f0c 	teqne	r5, ip
  404678:	f000 f8a7 	bleq	4047ca <__aeabi_ddiv+0x16e>
  40467c:	eba4 0405 	sub.w	r4, r4, r5
  404680:	ea81 0e03 	eor.w	lr, r1, r3
  404684:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404688:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40468c:	f000 8088 	beq.w	4047a0 <__aeabi_ddiv+0x144>
  404690:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404694:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404698:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40469c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4046a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4046a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4046a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4046ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4046b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4046b4:	429d      	cmp	r5, r3
  4046b6:	bf08      	it	eq
  4046b8:	4296      	cmpeq	r6, r2
  4046ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4046be:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4046c2:	d202      	bcs.n	4046ca <__aeabi_ddiv+0x6e>
  4046c4:	085b      	lsrs	r3, r3, #1
  4046c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4046ca:	1ab6      	subs	r6, r6, r2
  4046cc:	eb65 0503 	sbc.w	r5, r5, r3
  4046d0:	085b      	lsrs	r3, r3, #1
  4046d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4046d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4046da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4046de:	ebb6 0e02 	subs.w	lr, r6, r2
  4046e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4046e6:	bf22      	ittt	cs
  4046e8:	1ab6      	subcs	r6, r6, r2
  4046ea:	4675      	movcs	r5, lr
  4046ec:	ea40 000c 	orrcs.w	r0, r0, ip
  4046f0:	085b      	lsrs	r3, r3, #1
  4046f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4046f6:	ebb6 0e02 	subs.w	lr, r6, r2
  4046fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4046fe:	bf22      	ittt	cs
  404700:	1ab6      	subcs	r6, r6, r2
  404702:	4675      	movcs	r5, lr
  404704:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404708:	085b      	lsrs	r3, r3, #1
  40470a:	ea4f 0232 	mov.w	r2, r2, rrx
  40470e:	ebb6 0e02 	subs.w	lr, r6, r2
  404712:	eb75 0e03 	sbcs.w	lr, r5, r3
  404716:	bf22      	ittt	cs
  404718:	1ab6      	subcs	r6, r6, r2
  40471a:	4675      	movcs	r5, lr
  40471c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404720:	085b      	lsrs	r3, r3, #1
  404722:	ea4f 0232 	mov.w	r2, r2, rrx
  404726:	ebb6 0e02 	subs.w	lr, r6, r2
  40472a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40472e:	bf22      	ittt	cs
  404730:	1ab6      	subcs	r6, r6, r2
  404732:	4675      	movcs	r5, lr
  404734:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404738:	ea55 0e06 	orrs.w	lr, r5, r6
  40473c:	d018      	beq.n	404770 <__aeabi_ddiv+0x114>
  40473e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404742:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404746:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40474a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40474e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404752:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404756:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40475a:	d1c0      	bne.n	4046de <__aeabi_ddiv+0x82>
  40475c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404760:	d10b      	bne.n	40477a <__aeabi_ddiv+0x11e>
  404762:	ea41 0100 	orr.w	r1, r1, r0
  404766:	f04f 0000 	mov.w	r0, #0
  40476a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40476e:	e7b6      	b.n	4046de <__aeabi_ddiv+0x82>
  404770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404774:	bf04      	itt	eq
  404776:	4301      	orreq	r1, r0
  404778:	2000      	moveq	r0, #0
  40477a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40477e:	bf88      	it	hi
  404780:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404784:	f63f aeaf 	bhi.w	4044e6 <__aeabi_dmul+0xde>
  404788:	ebb5 0c03 	subs.w	ip, r5, r3
  40478c:	bf04      	itt	eq
  40478e:	ebb6 0c02 	subseq.w	ip, r6, r2
  404792:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404796:	f150 0000 	adcs.w	r0, r0, #0
  40479a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40479e:	bd70      	pop	{r4, r5, r6, pc}
  4047a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4047a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4047a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4047ac:	bfc2      	ittt	gt
  4047ae:	ebd4 050c 	rsbsgt	r5, r4, ip
  4047b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4047b6:	bd70      	popgt	{r4, r5, r6, pc}
  4047b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4047bc:	f04f 0e00 	mov.w	lr, #0
  4047c0:	3c01      	subs	r4, #1
  4047c2:	e690      	b.n	4044e6 <__aeabi_dmul+0xde>
  4047c4:	ea45 0e06 	orr.w	lr, r5, r6
  4047c8:	e68d      	b.n	4044e6 <__aeabi_dmul+0xde>
  4047ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4047ce:	ea94 0f0c 	teq	r4, ip
  4047d2:	bf08      	it	eq
  4047d4:	ea95 0f0c 	teqeq	r5, ip
  4047d8:	f43f af3b 	beq.w	404652 <__aeabi_dmul+0x24a>
  4047dc:	ea94 0f0c 	teq	r4, ip
  4047e0:	d10a      	bne.n	4047f8 <__aeabi_ddiv+0x19c>
  4047e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4047e6:	f47f af34 	bne.w	404652 <__aeabi_dmul+0x24a>
  4047ea:	ea95 0f0c 	teq	r5, ip
  4047ee:	f47f af25 	bne.w	40463c <__aeabi_dmul+0x234>
  4047f2:	4610      	mov	r0, r2
  4047f4:	4619      	mov	r1, r3
  4047f6:	e72c      	b.n	404652 <__aeabi_dmul+0x24a>
  4047f8:	ea95 0f0c 	teq	r5, ip
  4047fc:	d106      	bne.n	40480c <__aeabi_ddiv+0x1b0>
  4047fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404802:	f43f aefd 	beq.w	404600 <__aeabi_dmul+0x1f8>
  404806:	4610      	mov	r0, r2
  404808:	4619      	mov	r1, r3
  40480a:	e722      	b.n	404652 <__aeabi_dmul+0x24a>
  40480c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404810:	bf18      	it	ne
  404812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404816:	f47f aec5 	bne.w	4045a4 <__aeabi_dmul+0x19c>
  40481a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40481e:	f47f af0d 	bne.w	40463c <__aeabi_dmul+0x234>
  404822:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  404826:	f47f aeeb 	bne.w	404600 <__aeabi_dmul+0x1f8>
  40482a:	e712      	b.n	404652 <__aeabi_dmul+0x24a>

0040482c <__gedf2>:
  40482c:	f04f 3cff 	mov.w	ip, #4294967295
  404830:	e006      	b.n	404840 <__cmpdf2+0x4>
  404832:	bf00      	nop

00404834 <__ledf2>:
  404834:	f04f 0c01 	mov.w	ip, #1
  404838:	e002      	b.n	404840 <__cmpdf2+0x4>
  40483a:	bf00      	nop

0040483c <__cmpdf2>:
  40483c:	f04f 0c01 	mov.w	ip, #1
  404840:	f84d cd04 	str.w	ip, [sp, #-4]!
  404844:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404848:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40484c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404850:	bf18      	it	ne
  404852:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  404856:	d01b      	beq.n	404890 <__cmpdf2+0x54>
  404858:	b001      	add	sp, #4
  40485a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40485e:	bf0c      	ite	eq
  404860:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  404864:	ea91 0f03 	teqne	r1, r3
  404868:	bf02      	ittt	eq
  40486a:	ea90 0f02 	teqeq	r0, r2
  40486e:	2000      	moveq	r0, #0
  404870:	4770      	bxeq	lr
  404872:	f110 0f00 	cmn.w	r0, #0
  404876:	ea91 0f03 	teq	r1, r3
  40487a:	bf58      	it	pl
  40487c:	4299      	cmppl	r1, r3
  40487e:	bf08      	it	eq
  404880:	4290      	cmpeq	r0, r2
  404882:	bf2c      	ite	cs
  404884:	17d8      	asrcs	r0, r3, #31
  404886:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40488a:	f040 0001 	orr.w	r0, r0, #1
  40488e:	4770      	bx	lr
  404890:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404894:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404898:	d102      	bne.n	4048a0 <__cmpdf2+0x64>
  40489a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40489e:	d107      	bne.n	4048b0 <__cmpdf2+0x74>
  4048a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4048a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4048a8:	d1d6      	bne.n	404858 <__cmpdf2+0x1c>
  4048aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4048ae:	d0d3      	beq.n	404858 <__cmpdf2+0x1c>
  4048b0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4048b4:	4770      	bx	lr
  4048b6:	bf00      	nop

004048b8 <__aeabi_cdrcmple>:
  4048b8:	4684      	mov	ip, r0
  4048ba:	4610      	mov	r0, r2
  4048bc:	4662      	mov	r2, ip
  4048be:	468c      	mov	ip, r1
  4048c0:	4619      	mov	r1, r3
  4048c2:	4663      	mov	r3, ip
  4048c4:	e000      	b.n	4048c8 <__aeabi_cdcmpeq>
  4048c6:	bf00      	nop

004048c8 <__aeabi_cdcmpeq>:
  4048c8:	b501      	push	{r0, lr}
  4048ca:	f7ff ffb7 	bl	40483c <__cmpdf2>
  4048ce:	2800      	cmp	r0, #0
  4048d0:	bf48      	it	mi
  4048d2:	f110 0f00 	cmnmi.w	r0, #0
  4048d6:	bd01      	pop	{r0, pc}

004048d8 <__aeabi_dcmpeq>:
  4048d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4048dc:	f7ff fff4 	bl	4048c8 <__aeabi_cdcmpeq>
  4048e0:	bf0c      	ite	eq
  4048e2:	2001      	moveq	r0, #1
  4048e4:	2000      	movne	r0, #0
  4048e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4048ea:	bf00      	nop

004048ec <__aeabi_dcmplt>:
  4048ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4048f0:	f7ff ffea 	bl	4048c8 <__aeabi_cdcmpeq>
  4048f4:	bf34      	ite	cc
  4048f6:	2001      	movcc	r0, #1
  4048f8:	2000      	movcs	r0, #0
  4048fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4048fe:	bf00      	nop

00404900 <__aeabi_dcmple>:
  404900:	f84d ed08 	str.w	lr, [sp, #-8]!
  404904:	f7ff ffe0 	bl	4048c8 <__aeabi_cdcmpeq>
  404908:	bf94      	ite	ls
  40490a:	2001      	movls	r0, #1
  40490c:	2000      	movhi	r0, #0
  40490e:	f85d fb08 	ldr.w	pc, [sp], #8
  404912:	bf00      	nop

00404914 <__aeabi_dcmpge>:
  404914:	f84d ed08 	str.w	lr, [sp, #-8]!
  404918:	f7ff ffce 	bl	4048b8 <__aeabi_cdrcmple>
  40491c:	bf94      	ite	ls
  40491e:	2001      	movls	r0, #1
  404920:	2000      	movhi	r0, #0
  404922:	f85d fb08 	ldr.w	pc, [sp], #8
  404926:	bf00      	nop

00404928 <__aeabi_dcmpgt>:
  404928:	f84d ed08 	str.w	lr, [sp, #-8]!
  40492c:	f7ff ffc4 	bl	4048b8 <__aeabi_cdrcmple>
  404930:	bf34      	ite	cc
  404932:	2001      	movcc	r0, #1
  404934:	2000      	movcs	r0, #0
  404936:	f85d fb08 	ldr.w	pc, [sp], #8
  40493a:	bf00      	nop

0040493c <__aeabi_dcmpun>:
  40493c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  404940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404944:	d102      	bne.n	40494c <__aeabi_dcmpun+0x10>
  404946:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40494a:	d10a      	bne.n	404962 <__aeabi_dcmpun+0x26>
  40494c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  404950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  404954:	d102      	bne.n	40495c <__aeabi_dcmpun+0x20>
  404956:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40495a:	d102      	bne.n	404962 <__aeabi_dcmpun+0x26>
  40495c:	f04f 0000 	mov.w	r0, #0
  404960:	4770      	bx	lr
  404962:	f04f 0001 	mov.w	r0, #1
  404966:	4770      	bx	lr

00404968 <__aeabi_d2f>:
  404968:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40496c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  404970:	bf24      	itt	cs
  404972:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  404976:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40497a:	d90d      	bls.n	404998 <__aeabi_d2f+0x30>
  40497c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404980:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  404984:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  404988:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40498c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  404990:	bf08      	it	eq
  404992:	f020 0001 	biceq.w	r0, r0, #1
  404996:	4770      	bx	lr
  404998:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40499c:	d121      	bne.n	4049e2 <__aeabi_d2f+0x7a>
  40499e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4049a2:	bfbc      	itt	lt
  4049a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4049a8:	4770      	bxlt	lr
  4049aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4049ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4049b2:	f1c2 0218 	rsb	r2, r2, #24
  4049b6:	f1c2 0c20 	rsb	ip, r2, #32
  4049ba:	fa10 f30c 	lsls.w	r3, r0, ip
  4049be:	fa20 f002 	lsr.w	r0, r0, r2
  4049c2:	bf18      	it	ne
  4049c4:	f040 0001 	orrne.w	r0, r0, #1
  4049c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4049cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4049d0:	fa03 fc0c 	lsl.w	ip, r3, ip
  4049d4:	ea40 000c 	orr.w	r0, r0, ip
  4049d8:	fa23 f302 	lsr.w	r3, r3, r2
  4049dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
  4049e0:	e7cc      	b.n	40497c <__aeabi_d2f+0x14>
  4049e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
  4049e6:	d107      	bne.n	4049f8 <__aeabi_d2f+0x90>
  4049e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  4049ec:	bf1e      	ittt	ne
  4049ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  4049f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  4049f6:	4770      	bxne	lr
  4049f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  4049fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404a04:	4770      	bx	lr
  404a06:	bf00      	nop

00404a08 <__aeabi_frsub>:
  404a08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  404a0c:	e002      	b.n	404a14 <__addsf3>
  404a0e:	bf00      	nop

00404a10 <__aeabi_fsub>:
  404a10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00404a14 <__addsf3>:
  404a14:	0042      	lsls	r2, r0, #1
  404a16:	bf1f      	itttt	ne
  404a18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  404a1c:	ea92 0f03 	teqne	r2, r3
  404a20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  404a24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404a28:	d06a      	beq.n	404b00 <__addsf3+0xec>
  404a2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  404a2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  404a32:	bfc1      	itttt	gt
  404a34:	18d2      	addgt	r2, r2, r3
  404a36:	4041      	eorgt	r1, r0
  404a38:	4048      	eorgt	r0, r1
  404a3a:	4041      	eorgt	r1, r0
  404a3c:	bfb8      	it	lt
  404a3e:	425b      	neglt	r3, r3
  404a40:	2b19      	cmp	r3, #25
  404a42:	bf88      	it	hi
  404a44:	4770      	bxhi	lr
  404a46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  404a4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404a4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  404a52:	bf18      	it	ne
  404a54:	4240      	negne	r0, r0
  404a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404a5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  404a5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  404a62:	bf18      	it	ne
  404a64:	4249      	negne	r1, r1
  404a66:	ea92 0f03 	teq	r2, r3
  404a6a:	d03f      	beq.n	404aec <__addsf3+0xd8>
  404a6c:	f1a2 0201 	sub.w	r2, r2, #1
  404a70:	fa41 fc03 	asr.w	ip, r1, r3
  404a74:	eb10 000c 	adds.w	r0, r0, ip
  404a78:	f1c3 0320 	rsb	r3, r3, #32
  404a7c:	fa01 f103 	lsl.w	r1, r1, r3
  404a80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404a84:	d502      	bpl.n	404a8c <__addsf3+0x78>
  404a86:	4249      	negs	r1, r1
  404a88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  404a8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  404a90:	d313      	bcc.n	404aba <__addsf3+0xa6>
  404a92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  404a96:	d306      	bcc.n	404aa6 <__addsf3+0x92>
  404a98:	0840      	lsrs	r0, r0, #1
  404a9a:	ea4f 0131 	mov.w	r1, r1, rrx
  404a9e:	f102 0201 	add.w	r2, r2, #1
  404aa2:	2afe      	cmp	r2, #254	; 0xfe
  404aa4:	d251      	bcs.n	404b4a <__addsf3+0x136>
  404aa6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  404aaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404aae:	bf08      	it	eq
  404ab0:	f020 0001 	biceq.w	r0, r0, #1
  404ab4:	ea40 0003 	orr.w	r0, r0, r3
  404ab8:	4770      	bx	lr
  404aba:	0049      	lsls	r1, r1, #1
  404abc:	eb40 0000 	adc.w	r0, r0, r0
  404ac0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  404ac4:	f1a2 0201 	sub.w	r2, r2, #1
  404ac8:	d1ed      	bne.n	404aa6 <__addsf3+0x92>
  404aca:	fab0 fc80 	clz	ip, r0
  404ace:	f1ac 0c08 	sub.w	ip, ip, #8
  404ad2:	ebb2 020c 	subs.w	r2, r2, ip
  404ad6:	fa00 f00c 	lsl.w	r0, r0, ip
  404ada:	bfaa      	itet	ge
  404adc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  404ae0:	4252      	neglt	r2, r2
  404ae2:	4318      	orrge	r0, r3
  404ae4:	bfbc      	itt	lt
  404ae6:	40d0      	lsrlt	r0, r2
  404ae8:	4318      	orrlt	r0, r3
  404aea:	4770      	bx	lr
  404aec:	f092 0f00 	teq	r2, #0
  404af0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  404af4:	bf06      	itte	eq
  404af6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  404afa:	3201      	addeq	r2, #1
  404afc:	3b01      	subne	r3, #1
  404afe:	e7b5      	b.n	404a6c <__addsf3+0x58>
  404b00:	ea4f 0341 	mov.w	r3, r1, lsl #1
  404b04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404b08:	bf18      	it	ne
  404b0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404b0e:	d021      	beq.n	404b54 <__addsf3+0x140>
  404b10:	ea92 0f03 	teq	r2, r3
  404b14:	d004      	beq.n	404b20 <__addsf3+0x10c>
  404b16:	f092 0f00 	teq	r2, #0
  404b1a:	bf08      	it	eq
  404b1c:	4608      	moveq	r0, r1
  404b1e:	4770      	bx	lr
  404b20:	ea90 0f01 	teq	r0, r1
  404b24:	bf1c      	itt	ne
  404b26:	2000      	movne	r0, #0
  404b28:	4770      	bxne	lr
  404b2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  404b2e:	d104      	bne.n	404b3a <__addsf3+0x126>
  404b30:	0040      	lsls	r0, r0, #1
  404b32:	bf28      	it	cs
  404b34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  404b38:	4770      	bx	lr
  404b3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  404b3e:	bf3c      	itt	cc
  404b40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  404b44:	4770      	bxcc	lr
  404b46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404b4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  404b4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404b52:	4770      	bx	lr
  404b54:	ea7f 6222 	mvns.w	r2, r2, asr #24
  404b58:	bf16      	itet	ne
  404b5a:	4608      	movne	r0, r1
  404b5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  404b60:	4601      	movne	r1, r0
  404b62:	0242      	lsls	r2, r0, #9
  404b64:	bf06      	itte	eq
  404b66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  404b6a:	ea90 0f01 	teqeq	r0, r1
  404b6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  404b72:	4770      	bx	lr

00404b74 <__aeabi_ui2f>:
  404b74:	f04f 0300 	mov.w	r3, #0
  404b78:	e004      	b.n	404b84 <__aeabi_i2f+0x8>
  404b7a:	bf00      	nop

00404b7c <__aeabi_i2f>:
  404b7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  404b80:	bf48      	it	mi
  404b82:	4240      	negmi	r0, r0
  404b84:	ea5f 0c00 	movs.w	ip, r0
  404b88:	bf08      	it	eq
  404b8a:	4770      	bxeq	lr
  404b8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  404b90:	4601      	mov	r1, r0
  404b92:	f04f 0000 	mov.w	r0, #0
  404b96:	e01c      	b.n	404bd2 <__aeabi_l2f+0x2a>

00404b98 <__aeabi_ul2f>:
  404b98:	ea50 0201 	orrs.w	r2, r0, r1
  404b9c:	bf08      	it	eq
  404b9e:	4770      	bxeq	lr
  404ba0:	f04f 0300 	mov.w	r3, #0
  404ba4:	e00a      	b.n	404bbc <__aeabi_l2f+0x14>
  404ba6:	bf00      	nop

00404ba8 <__aeabi_l2f>:
  404ba8:	ea50 0201 	orrs.w	r2, r0, r1
  404bac:	bf08      	it	eq
  404bae:	4770      	bxeq	lr
  404bb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  404bb4:	d502      	bpl.n	404bbc <__aeabi_l2f+0x14>
  404bb6:	4240      	negs	r0, r0
  404bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404bbc:	ea5f 0c01 	movs.w	ip, r1
  404bc0:	bf02      	ittt	eq
  404bc2:	4684      	moveq	ip, r0
  404bc4:	4601      	moveq	r1, r0
  404bc6:	2000      	moveq	r0, #0
  404bc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  404bcc:	bf08      	it	eq
  404bce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  404bd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  404bd6:	fabc f28c 	clz	r2, ip
  404bda:	3a08      	subs	r2, #8
  404bdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  404be0:	db10      	blt.n	404c04 <__aeabi_l2f+0x5c>
  404be2:	fa01 fc02 	lsl.w	ip, r1, r2
  404be6:	4463      	add	r3, ip
  404be8:	fa00 fc02 	lsl.w	ip, r0, r2
  404bec:	f1c2 0220 	rsb	r2, r2, #32
  404bf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404bf4:	fa20 f202 	lsr.w	r2, r0, r2
  404bf8:	eb43 0002 	adc.w	r0, r3, r2
  404bfc:	bf08      	it	eq
  404bfe:	f020 0001 	biceq.w	r0, r0, #1
  404c02:	4770      	bx	lr
  404c04:	f102 0220 	add.w	r2, r2, #32
  404c08:	fa01 fc02 	lsl.w	ip, r1, r2
  404c0c:	f1c2 0220 	rsb	r2, r2, #32
  404c10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  404c14:	fa21 f202 	lsr.w	r2, r1, r2
  404c18:	eb43 0002 	adc.w	r0, r3, r2
  404c1c:	bf08      	it	eq
  404c1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404c22:	4770      	bx	lr

00404c24 <__aeabi_fmul>:
  404c24:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404c28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  404c2c:	bf1e      	ittt	ne
  404c2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  404c32:	ea92 0f0c 	teqne	r2, ip
  404c36:	ea93 0f0c 	teqne	r3, ip
  404c3a:	d06f      	beq.n	404d1c <__aeabi_fmul+0xf8>
  404c3c:	441a      	add	r2, r3
  404c3e:	ea80 0c01 	eor.w	ip, r0, r1
  404c42:	0240      	lsls	r0, r0, #9
  404c44:	bf18      	it	ne
  404c46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  404c4a:	d01e      	beq.n	404c8a <__aeabi_fmul+0x66>
  404c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  404c50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  404c54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  404c58:	fba0 3101 	umull	r3, r1, r0, r1
  404c5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404c60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  404c64:	bf3e      	ittt	cc
  404c66:	0049      	lslcc	r1, r1, #1
  404c68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  404c6c:	005b      	lslcc	r3, r3, #1
  404c6e:	ea40 0001 	orr.w	r0, r0, r1
  404c72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  404c76:	2afd      	cmp	r2, #253	; 0xfd
  404c78:	d81d      	bhi.n	404cb6 <__aeabi_fmul+0x92>
  404c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  404c7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404c82:	bf08      	it	eq
  404c84:	f020 0001 	biceq.w	r0, r0, #1
  404c88:	4770      	bx	lr
  404c8a:	f090 0f00 	teq	r0, #0
  404c8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404c92:	bf08      	it	eq
  404c94:	0249      	lsleq	r1, r1, #9
  404c96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  404c9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  404c9e:	3a7f      	subs	r2, #127	; 0x7f
  404ca0:	bfc2      	ittt	gt
  404ca2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  404ca6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  404caa:	4770      	bxgt	lr
  404cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404cb0:	f04f 0300 	mov.w	r3, #0
  404cb4:	3a01      	subs	r2, #1
  404cb6:	dc5d      	bgt.n	404d74 <__aeabi_fmul+0x150>
  404cb8:	f112 0f19 	cmn.w	r2, #25
  404cbc:	bfdc      	itt	le
  404cbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  404cc2:	4770      	bxle	lr
  404cc4:	f1c2 0200 	rsb	r2, r2, #0
  404cc8:	0041      	lsls	r1, r0, #1
  404cca:	fa21 f102 	lsr.w	r1, r1, r2
  404cce:	f1c2 0220 	rsb	r2, r2, #32
  404cd2:	fa00 fc02 	lsl.w	ip, r0, r2
  404cd6:	ea5f 0031 	movs.w	r0, r1, rrx
  404cda:	f140 0000 	adc.w	r0, r0, #0
  404cde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  404ce2:	bf08      	it	eq
  404ce4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404ce8:	4770      	bx	lr
  404cea:	f092 0f00 	teq	r2, #0
  404cee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404cf2:	bf02      	ittt	eq
  404cf4:	0040      	lsleq	r0, r0, #1
  404cf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  404cfa:	3a01      	subeq	r2, #1
  404cfc:	d0f9      	beq.n	404cf2 <__aeabi_fmul+0xce>
  404cfe:	ea40 000c 	orr.w	r0, r0, ip
  404d02:	f093 0f00 	teq	r3, #0
  404d06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404d0a:	bf02      	ittt	eq
  404d0c:	0049      	lsleq	r1, r1, #1
  404d0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404d12:	3b01      	subeq	r3, #1
  404d14:	d0f9      	beq.n	404d0a <__aeabi_fmul+0xe6>
  404d16:	ea41 010c 	orr.w	r1, r1, ip
  404d1a:	e78f      	b.n	404c3c <__aeabi_fmul+0x18>
  404d1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404d20:	ea92 0f0c 	teq	r2, ip
  404d24:	bf18      	it	ne
  404d26:	ea93 0f0c 	teqne	r3, ip
  404d2a:	d00a      	beq.n	404d42 <__aeabi_fmul+0x11e>
  404d2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404d30:	bf18      	it	ne
  404d32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404d36:	d1d8      	bne.n	404cea <__aeabi_fmul+0xc6>
  404d38:	ea80 0001 	eor.w	r0, r0, r1
  404d3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  404d40:	4770      	bx	lr
  404d42:	f090 0f00 	teq	r0, #0
  404d46:	bf17      	itett	ne
  404d48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  404d4c:	4608      	moveq	r0, r1
  404d4e:	f091 0f00 	teqne	r1, #0
  404d52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  404d56:	d014      	beq.n	404d82 <__aeabi_fmul+0x15e>
  404d58:	ea92 0f0c 	teq	r2, ip
  404d5c:	d101      	bne.n	404d62 <__aeabi_fmul+0x13e>
  404d5e:	0242      	lsls	r2, r0, #9
  404d60:	d10f      	bne.n	404d82 <__aeabi_fmul+0x15e>
  404d62:	ea93 0f0c 	teq	r3, ip
  404d66:	d103      	bne.n	404d70 <__aeabi_fmul+0x14c>
  404d68:	024b      	lsls	r3, r1, #9
  404d6a:	bf18      	it	ne
  404d6c:	4608      	movne	r0, r1
  404d6e:	d108      	bne.n	404d82 <__aeabi_fmul+0x15e>
  404d70:	ea80 0001 	eor.w	r0, r0, r1
  404d74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  404d78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404d80:	4770      	bx	lr
  404d82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404d86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  404d8a:	4770      	bx	lr

00404d8c <__aeabi_fdiv>:
  404d8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404d90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  404d94:	bf1e      	ittt	ne
  404d96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  404d9a:	ea92 0f0c 	teqne	r2, ip
  404d9e:	ea93 0f0c 	teqne	r3, ip
  404da2:	d069      	beq.n	404e78 <__aeabi_fdiv+0xec>
  404da4:	eba2 0203 	sub.w	r2, r2, r3
  404da8:	ea80 0c01 	eor.w	ip, r0, r1
  404dac:	0249      	lsls	r1, r1, #9
  404dae:	ea4f 2040 	mov.w	r0, r0, lsl #9
  404db2:	d037      	beq.n	404e24 <__aeabi_fdiv+0x98>
  404db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  404db8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  404dbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  404dc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404dc4:	428b      	cmp	r3, r1
  404dc6:	bf38      	it	cc
  404dc8:	005b      	lslcc	r3, r3, #1
  404dca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  404dce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  404dd2:	428b      	cmp	r3, r1
  404dd4:	bf24      	itt	cs
  404dd6:	1a5b      	subcs	r3, r3, r1
  404dd8:	ea40 000c 	orrcs.w	r0, r0, ip
  404ddc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  404de0:	bf24      	itt	cs
  404de2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  404de6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404dea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  404dee:	bf24      	itt	cs
  404df0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  404df4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404df8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  404dfc:	bf24      	itt	cs
  404dfe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  404e02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404e06:	011b      	lsls	r3, r3, #4
  404e08:	bf18      	it	ne
  404e0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  404e0e:	d1e0      	bne.n	404dd2 <__aeabi_fdiv+0x46>
  404e10:	2afd      	cmp	r2, #253	; 0xfd
  404e12:	f63f af50 	bhi.w	404cb6 <__aeabi_fmul+0x92>
  404e16:	428b      	cmp	r3, r1
  404e18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404e1c:	bf08      	it	eq
  404e1e:	f020 0001 	biceq.w	r0, r0, #1
  404e22:	4770      	bx	lr
  404e24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404e28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  404e2c:	327f      	adds	r2, #127	; 0x7f
  404e2e:	bfc2      	ittt	gt
  404e30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  404e34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  404e38:	4770      	bxgt	lr
  404e3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404e3e:	f04f 0300 	mov.w	r3, #0
  404e42:	3a01      	subs	r2, #1
  404e44:	e737      	b.n	404cb6 <__aeabi_fmul+0x92>
  404e46:	f092 0f00 	teq	r2, #0
  404e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404e4e:	bf02      	ittt	eq
  404e50:	0040      	lsleq	r0, r0, #1
  404e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  404e56:	3a01      	subeq	r2, #1
  404e58:	d0f9      	beq.n	404e4e <__aeabi_fdiv+0xc2>
  404e5a:	ea40 000c 	orr.w	r0, r0, ip
  404e5e:	f093 0f00 	teq	r3, #0
  404e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404e66:	bf02      	ittt	eq
  404e68:	0049      	lsleq	r1, r1, #1
  404e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404e6e:	3b01      	subeq	r3, #1
  404e70:	d0f9      	beq.n	404e66 <__aeabi_fdiv+0xda>
  404e72:	ea41 010c 	orr.w	r1, r1, ip
  404e76:	e795      	b.n	404da4 <__aeabi_fdiv+0x18>
  404e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404e7c:	ea92 0f0c 	teq	r2, ip
  404e80:	d108      	bne.n	404e94 <__aeabi_fdiv+0x108>
  404e82:	0242      	lsls	r2, r0, #9
  404e84:	f47f af7d 	bne.w	404d82 <__aeabi_fmul+0x15e>
  404e88:	ea93 0f0c 	teq	r3, ip
  404e8c:	f47f af70 	bne.w	404d70 <__aeabi_fmul+0x14c>
  404e90:	4608      	mov	r0, r1
  404e92:	e776      	b.n	404d82 <__aeabi_fmul+0x15e>
  404e94:	ea93 0f0c 	teq	r3, ip
  404e98:	d104      	bne.n	404ea4 <__aeabi_fdiv+0x118>
  404e9a:	024b      	lsls	r3, r1, #9
  404e9c:	f43f af4c 	beq.w	404d38 <__aeabi_fmul+0x114>
  404ea0:	4608      	mov	r0, r1
  404ea2:	e76e      	b.n	404d82 <__aeabi_fmul+0x15e>
  404ea4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404ea8:	bf18      	it	ne
  404eaa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404eae:	d1ca      	bne.n	404e46 <__aeabi_fdiv+0xba>
  404eb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  404eb4:	f47f af5c 	bne.w	404d70 <__aeabi_fmul+0x14c>
  404eb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  404ebc:	f47f af3c 	bne.w	404d38 <__aeabi_fmul+0x114>
  404ec0:	e75f      	b.n	404d82 <__aeabi_fmul+0x15e>
  404ec2:	bf00      	nop

00404ec4 <__errno>:
  404ec4:	4b01      	ldr	r3, [pc, #4]	; (404ecc <__errno+0x8>)
  404ec6:	6818      	ldr	r0, [r3, #0]
  404ec8:	4770      	bx	lr
  404eca:	bf00      	nop
  404ecc:	200000ac 	.word	0x200000ac

00404ed0 <__libc_init_array>:
  404ed0:	b570      	push	{r4, r5, r6, lr}
  404ed2:	4e0f      	ldr	r6, [pc, #60]	; (404f10 <__libc_init_array+0x40>)
  404ed4:	4d0f      	ldr	r5, [pc, #60]	; (404f14 <__libc_init_array+0x44>)
  404ed6:	1b76      	subs	r6, r6, r5
  404ed8:	10b6      	asrs	r6, r6, #2
  404eda:	bf18      	it	ne
  404edc:	2400      	movne	r4, #0
  404ede:	d005      	beq.n	404eec <__libc_init_array+0x1c>
  404ee0:	3401      	adds	r4, #1
  404ee2:	f855 3b04 	ldr.w	r3, [r5], #4
  404ee6:	4798      	blx	r3
  404ee8:	42a6      	cmp	r6, r4
  404eea:	d1f9      	bne.n	404ee0 <__libc_init_array+0x10>
  404eec:	4e0a      	ldr	r6, [pc, #40]	; (404f18 <__libc_init_array+0x48>)
  404eee:	4d0b      	ldr	r5, [pc, #44]	; (404f1c <__libc_init_array+0x4c>)
  404ef0:	1b76      	subs	r6, r6, r5
  404ef2:	f000 f8ab 	bl	40504c <_init>
  404ef6:	10b6      	asrs	r6, r6, #2
  404ef8:	bf18      	it	ne
  404efa:	2400      	movne	r4, #0
  404efc:	d006      	beq.n	404f0c <__libc_init_array+0x3c>
  404efe:	3401      	adds	r4, #1
  404f00:	f855 3b04 	ldr.w	r3, [r5], #4
  404f04:	4798      	blx	r3
  404f06:	42a6      	cmp	r6, r4
  404f08:	d1f9      	bne.n	404efe <__libc_init_array+0x2e>
  404f0a:	bd70      	pop	{r4, r5, r6, pc}
  404f0c:	bd70      	pop	{r4, r5, r6, pc}
  404f0e:	bf00      	nop
  404f10:	00405058 	.word	0x00405058
  404f14:	00405058 	.word	0x00405058
  404f18:	00405060 	.word	0x00405060
  404f1c:	00405058 	.word	0x00405058

00404f20 <register_fini>:
  404f20:	4b02      	ldr	r3, [pc, #8]	; (404f2c <register_fini+0xc>)
  404f22:	b113      	cbz	r3, 404f2a <register_fini+0xa>
  404f24:	4802      	ldr	r0, [pc, #8]	; (404f30 <register_fini+0x10>)
  404f26:	f000 b805 	b.w	404f34 <atexit>
  404f2a:	4770      	bx	lr
  404f2c:	00000000 	.word	0x00000000
  404f30:	00404f41 	.word	0x00404f41

00404f34 <atexit>:
  404f34:	2300      	movs	r3, #0
  404f36:	4601      	mov	r1, r0
  404f38:	461a      	mov	r2, r3
  404f3a:	4618      	mov	r0, r3
  404f3c:	f000 b81e 	b.w	404f7c <__register_exitproc>

00404f40 <__libc_fini_array>:
  404f40:	b538      	push	{r3, r4, r5, lr}
  404f42:	4c0a      	ldr	r4, [pc, #40]	; (404f6c <__libc_fini_array+0x2c>)
  404f44:	4d0a      	ldr	r5, [pc, #40]	; (404f70 <__libc_fini_array+0x30>)
  404f46:	1b64      	subs	r4, r4, r5
  404f48:	10a4      	asrs	r4, r4, #2
  404f4a:	d00a      	beq.n	404f62 <__libc_fini_array+0x22>
  404f4c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  404f50:	3b01      	subs	r3, #1
  404f52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404f56:	3c01      	subs	r4, #1
  404f58:	f855 3904 	ldr.w	r3, [r5], #-4
  404f5c:	4798      	blx	r3
  404f5e:	2c00      	cmp	r4, #0
  404f60:	d1f9      	bne.n	404f56 <__libc_fini_array+0x16>
  404f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404f66:	f000 b87b 	b.w	405060 <_fini>
  404f6a:	bf00      	nop
  404f6c:	00405070 	.word	0x00405070
  404f70:	0040506c 	.word	0x0040506c

00404f74 <__retarget_lock_acquire_recursive>:
  404f74:	4770      	bx	lr
  404f76:	bf00      	nop

00404f78 <__retarget_lock_release_recursive>:
  404f78:	4770      	bx	lr
  404f7a:	bf00      	nop

00404f7c <__register_exitproc>:
  404f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404f80:	4d2c      	ldr	r5, [pc, #176]	; (405034 <__register_exitproc+0xb8>)
  404f82:	4606      	mov	r6, r0
  404f84:	6828      	ldr	r0, [r5, #0]
  404f86:	4698      	mov	r8, r3
  404f88:	460f      	mov	r7, r1
  404f8a:	4691      	mov	r9, r2
  404f8c:	f7ff fff2 	bl	404f74 <__retarget_lock_acquire_recursive>
  404f90:	4b29      	ldr	r3, [pc, #164]	; (405038 <__register_exitproc+0xbc>)
  404f92:	681c      	ldr	r4, [r3, #0]
  404f94:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404f98:	2b00      	cmp	r3, #0
  404f9a:	d03e      	beq.n	40501a <__register_exitproc+0x9e>
  404f9c:	685a      	ldr	r2, [r3, #4]
  404f9e:	2a1f      	cmp	r2, #31
  404fa0:	dc1c      	bgt.n	404fdc <__register_exitproc+0x60>
  404fa2:	f102 0e01 	add.w	lr, r2, #1
  404fa6:	b176      	cbz	r6, 404fc6 <__register_exitproc+0x4a>
  404fa8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404fac:	2401      	movs	r4, #1
  404fae:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  404fb2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404fb6:	4094      	lsls	r4, r2
  404fb8:	4320      	orrs	r0, r4
  404fba:	2e02      	cmp	r6, #2
  404fbc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  404fc0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404fc4:	d023      	beq.n	40500e <__register_exitproc+0x92>
  404fc6:	3202      	adds	r2, #2
  404fc8:	f8c3 e004 	str.w	lr, [r3, #4]
  404fcc:	6828      	ldr	r0, [r5, #0]
  404fce:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  404fd2:	f7ff ffd1 	bl	404f78 <__retarget_lock_release_recursive>
  404fd6:	2000      	movs	r0, #0
  404fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fdc:	4b17      	ldr	r3, [pc, #92]	; (40503c <__register_exitproc+0xc0>)
  404fde:	b30b      	cbz	r3, 405024 <__register_exitproc+0xa8>
  404fe0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404fe4:	f3af 8000 	nop.w
  404fe8:	4603      	mov	r3, r0
  404fea:	b1d8      	cbz	r0, 405024 <__register_exitproc+0xa8>
  404fec:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404ff0:	6002      	str	r2, [r0, #0]
  404ff2:	2100      	movs	r1, #0
  404ff4:	6041      	str	r1, [r0, #4]
  404ff6:	460a      	mov	r2, r1
  404ff8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404ffc:	f04f 0e01 	mov.w	lr, #1
  405000:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405004:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405008:	2e00      	cmp	r6, #0
  40500a:	d0dc      	beq.n	404fc6 <__register_exitproc+0x4a>
  40500c:	e7cc      	b.n	404fa8 <__register_exitproc+0x2c>
  40500e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  405012:	430c      	orrs	r4, r1
  405014:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405018:	e7d5      	b.n	404fc6 <__register_exitproc+0x4a>
  40501a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40501e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  405022:	e7bb      	b.n	404f9c <__register_exitproc+0x20>
  405024:	6828      	ldr	r0, [r5, #0]
  405026:	f7ff ffa7 	bl	404f78 <__retarget_lock_release_recursive>
  40502a:	f04f 30ff 	mov.w	r0, #4294967295
  40502e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405032:	bf00      	nop
  405034:	200004d8 	.word	0x200004d8
  405038:	00405048 	.word	0x00405048
  40503c:	00000000 	.word	0x00000000
  405040:	00676f6c 	.word	0x00676f6c
  405044:	00000000 	.word	0x00000000

00405048 <_global_impure_ptr>:
  405048:	200000b0                                ... 

0040504c <_init>:
  40504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40504e:	bf00      	nop
  405050:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405052:	bc08      	pop	{r3}
  405054:	469e      	mov	lr, r3
  405056:	4770      	bx	lr

00405058 <__init_array_start>:
  405058:	00404f21 	.word	0x00404f21

0040505c <__frame_dummy_init_array_entry>:
  40505c:	004000f1                                ..@.

00405060 <_fini>:
  405060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405062:	bf00      	nop
  405064:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405066:	bc08      	pop	{r3}
  405068:	469e      	mov	lr, r3
  40506a:	4770      	bx	lr

0040506c <__fini_array_start>:
  40506c:	004000cd 	.word	0x004000cd
