
Battery Monitoring System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aaf4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040aaf4  0040aaf4  0001aaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b38  20000000  0040aafc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003ae8  20000b38  0040b634  00020b38  2**2
                  ALLOC
  4 .stack        00003000  20004620  0040f11c  00020b38  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY
  7 .debug_info   000249f1  00000000  00000000  00020bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004c5d  00000000  00000000  000455ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000fb0  00000000  00000000  0004a209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00017247  00000000  00000000  0004b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013471  00000000  00000000  00062400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005530c  00000000  00000000  00075871  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a1a7  00000000  00000000  000cab7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001098  00000000  00000000  000d4d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000337c  00000000  00000000  000d5dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 76 00 20 cd 36 40 00 c9 36 40 00 c9 36 40 00      v. .6@..6@..6@.
  400010:	c9 36 40 00 c9 36 40 00 c9 36 40 00 00 00 00 00     .6@..6@..6@.....
	...
  40002c:	c9 36 40 00 c9 36 40 00 00 00 00 00 c9 36 40 00     .6@..6@......6@.
  40003c:	c9 36 40 00 c9 36 40 00 c9 36 40 00 c9 36 40 00     .6@..6@..6@..6@.
  40004c:	dd 49 40 00 c9 36 40 00 c9 36 40 00 c9 36 40 00     .I@..6@..6@..6@.
  40005c:	00 00 00 00 5d 2d 40 00 69 2d 40 00 00 00 00 00     ....]-@.i-@.....
  40006c:	dd 28 40 00 b5 0f 40 00 00 00 00 00 c9 36 40 00     .(@...@......6@.
	...
  40008c:	c9 36 40 00 c9 36 40 00 c9 36 40 00 c9 36 40 00     .6@..6@..6@..6@.
  40009c:	2d 49 40 00 7d 49 40 00 a9 49 40 00 00 00 00 00     -I@.}I@..I@.....
	...
  4000b4:	c9 47 40 00 00 00 00 00 c9 36 40 00 c9 36 40 00     .G@......6@..6@.
  4000c4:	c9 36 40 00 69 16 40 00                             .6@.i.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000b38 	.word	0x20000b38
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040aafc 	.word	0x0040aafc

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040aafc 	.word	0x0040aafc
  40012c:	20000b3c 	.word	0x20000b3c
  400130:	0040aafc 	.word	0x0040aafc
  400134:	00000000 	.word	0x00000000

00400138 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400138:	490e      	ldr	r1, [pc, #56]	; (400174 <udi_cdc_comm_enable+0x3c>)
  40013a:	2300      	movs	r3, #0
  40013c:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40013e:	4a0e      	ldr	r2, [pc, #56]	; (400178 <udi_cdc_comm_enable+0x40>)
  400140:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400142:	4a0e      	ldr	r2, [pc, #56]	; (40017c <udi_cdc_comm_enable+0x44>)
  400144:	20a1      	movs	r0, #161	; 0xa1
  400146:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400148:	2020      	movs	r0, #32
  40014a:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40014c:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40014e:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400150:	2002      	movs	r0, #2
  400152:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400154:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400156:	4a0a      	ldr	r2, [pc, #40]	; (400180 <udi_cdc_comm_enable+0x48>)
  400158:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  40015c:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40015e:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400160:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400162:	2308      	movs	r3, #8
  400164:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400166:	780b      	ldrb	r3, [r1, #0]
  400168:	3301      	adds	r3, #1
  40016a:	b2db      	uxtb	r3, r3
  40016c:	700b      	strb	r3, [r1, #0]
	return true;
}
  40016e:	2001      	movs	r0, #1
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	20000b5f 	.word	0x20000b5f
  400178:	20000bf4 	.word	0x20000bf4
  40017c:	20000c8c 	.word	0x20000c8c
  400180:	20000b58 	.word	0x20000b58

00400184 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400184:	4a02      	ldr	r2, [pc, #8]	; (400190 <udi_cdc_comm_disable+0xc>)
  400186:	7813      	ldrb	r3, [r2, #0]
  400188:	3b01      	subs	r3, #1
  40018a:	b2db      	uxtb	r3, r3
  40018c:	7013      	strb	r3, [r2, #0]
  40018e:	4770      	bx	lr
  400190:	20000b5f 	.word	0x20000b5f

00400194 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400194:	4a04      	ldr	r2, [pc, #16]	; (4001a8 <udi_cdc_data_disable+0x14>)
  400196:	7813      	ldrb	r3, [r2, #0]
  400198:	3b01      	subs	r3, #1
  40019a:	b2db      	uxtb	r3, r3
  40019c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  40019e:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001a0:	2200      	movs	r2, #0
  4001a2:	4b02      	ldr	r3, [pc, #8]	; (4001ac <udi_cdc_data_disable+0x18>)
  4001a4:	701a      	strb	r2, [r3, #0]
  4001a6:	4770      	bx	lr
  4001a8:	20000b60 	.word	0x20000b60
  4001ac:	20000b56 	.word	0x20000b56

004001b0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b0:	2000      	movs	r0, #0
  4001b2:	4770      	bx	lr

004001b4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001b4:	2000      	movs	r0, #0
  4001b6:	4770      	bx	lr

004001b8 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001b8:	4b1d      	ldr	r3, [pc, #116]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001ba:	781b      	ldrb	r3, [r3, #0]
  4001bc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001c0:	d105      	bne.n	4001ce <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001c6:	2b20      	cmp	r3, #32
  4001c8:	d018      	beq.n	4001fc <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001ca:	2000      	movs	r0, #0
  4001cc:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001d2:	2b20      	cmp	r3, #32
  4001d4:	d001      	beq.n	4001da <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  4001d6:	2000      	movs	r0, #0
  4001d8:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001da:	4b15      	ldr	r3, [pc, #84]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001dc:	785b      	ldrb	r3, [r3, #1]
  4001de:	2b21      	cmp	r3, #33	; 0x21
  4001e0:	d124      	bne.n	40022c <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  4001e2:	4b13      	ldr	r3, [pc, #76]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e4:	88db      	ldrh	r3, [r3, #6]
  4001e6:	2b07      	cmp	r3, #7
  4001e8:	d001      	beq.n	4001ee <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  4001ea:	2000      	movs	r0, #0
  4001ec:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <udi_cdc_comm_setup+0x7c>)
  4001f2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4001f4:	2207      	movs	r2, #7
  4001f6:	819a      	strh	r2, [r3, #12]
				return true;
  4001f8:	2001      	movs	r0, #1
  4001fa:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001fc:	4b0c      	ldr	r3, [pc, #48]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001fe:	7858      	ldrb	r0, [r3, #1]
  400200:	2820      	cmp	r0, #32
  400202:	d004      	beq.n	40020e <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400204:	2822      	cmp	r0, #34	; 0x22
  400206:	bf14      	ite	ne
  400208:	2000      	movne	r0, #0
  40020a:	2001      	moveq	r0, #1
  40020c:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  40020e:	4b08      	ldr	r3, [pc, #32]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400210:	88db      	ldrh	r3, [r3, #6]
  400212:	2b07      	cmp	r3, #7
  400214:	d001      	beq.n	40021a <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  400216:	2000      	movs	r0, #0
}
  400218:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <udi_cdc_comm_setup+0x78>)
  40021c:	4a06      	ldr	r2, [pc, #24]	; (400238 <udi_cdc_comm_setup+0x80>)
  40021e:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400220:	4a04      	ldr	r2, [pc, #16]	; (400234 <udi_cdc_comm_setup+0x7c>)
  400222:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400224:	2207      	movs	r2, #7
  400226:	819a      	strh	r2, [r3, #12]
				return true;
  400228:	2001      	movs	r0, #1
  40022a:	4770      	bx	lr
	return false;  // request Not supported
  40022c:	2000      	movs	r0, #0
  40022e:	4770      	bx	lr
  400230:	200017c8 	.word	0x200017c8
  400234:	20000b58 	.word	0x20000b58
  400238:	0040023d 	.word	0x0040023d

0040023c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  40023c:	4770      	bx	lr
	...

00400240 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400240:	4b44      	ldr	r3, [pc, #272]	; (400354 <udi_cdc_tx_send+0x114>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b103      	cbz	r3, 400248 <udi_cdc_tx_send+0x8>
  400246:	4770      	bx	lr
{
  400248:	b570      	push	{r4, r5, r6, lr}
  40024a:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40024c:	4b42      	ldr	r3, [pc, #264]	; (400358 <udi_cdc_tx_send+0x118>)
  40024e:	4798      	blx	r3
  400250:	2800      	cmp	r0, #0
  400252:	d041      	beq.n	4002d8 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400254:	4b41      	ldr	r3, [pc, #260]	; (40035c <udi_cdc_tx_send+0x11c>)
  400256:	881c      	ldrh	r4, [r3, #0]
  400258:	4b41      	ldr	r3, [pc, #260]	; (400360 <udi_cdc_tx_send+0x120>)
  40025a:	4798      	blx	r3
  40025c:	4284      	cmp	r4, r0
  40025e:	d076      	beq.n	40034e <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400260:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400264:	fab3 f383 	clz	r3, r3
  400268:	095b      	lsrs	r3, r3, #5
  40026a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40026c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40026e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400272:	2200      	movs	r2, #0
  400274:	4b3b      	ldr	r3, [pc, #236]	; (400364 <udi_cdc_tx_send+0x124>)
  400276:	701a      	strb	r2, [r3, #0]
	return flags;
  400278:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40027a:	4b3b      	ldr	r3, [pc, #236]	; (400368 <udi_cdc_tx_send+0x128>)
  40027c:	781c      	ldrb	r4, [r3, #0]
  40027e:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400280:	4b3a      	ldr	r3, [pc, #232]	; (40036c <udi_cdc_tx_send+0x12c>)
  400282:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400286:	2b00      	cmp	r3, #0
  400288:	d02d      	beq.n	4002e6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40028a:	2200      	movs	r2, #0
  40028c:	4b38      	ldr	r3, [pc, #224]	; (400370 <udi_cdc_tx_send+0x130>)
  40028e:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400290:	4b38      	ldr	r3, [pc, #224]	; (400374 <udi_cdc_tx_send+0x134>)
  400292:	781b      	ldrb	r3, [r3, #0]
  400294:	2b00      	cmp	r3, #0
  400296:	d142      	bne.n	40031e <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400298:	fab4 f384 	clz	r3, r4
  40029c:	095b      	lsrs	r3, r3, #5
  40029e:	4a32      	ldr	r2, [pc, #200]	; (400368 <udi_cdc_tx_send+0x128>)
  4002a0:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002a2:	2201      	movs	r2, #1
  4002a4:	4b2b      	ldr	r3, [pc, #172]	; (400354 <udi_cdc_tx_send+0x114>)
  4002a6:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002a8:	b125      	cbz	r5, 4002b4 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002aa:	4b2e      	ldr	r3, [pc, #184]	; (400364 <udi_cdc_tx_send+0x124>)
  4002ac:	701a      	strb	r2, [r3, #0]
  4002ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002b2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002b4:	4626      	mov	r6, r4
  4002b6:	4b2d      	ldr	r3, [pc, #180]	; (40036c <udi_cdc_tx_send+0x12c>)
  4002b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002bc:	2b40      	cmp	r3, #64	; 0x40
  4002be:	bf14      	ite	ne
  4002c0:	2501      	movne	r5, #1
  4002c2:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002c4:	d034      	beq.n	400330 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4002c6:	4b24      	ldr	r3, [pc, #144]	; (400358 <udi_cdc_tx_send+0x118>)
  4002c8:	4798      	blx	r3
  4002ca:	2800      	cmp	r0, #0
  4002cc:	d02b      	beq.n	400326 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002ce:	4b24      	ldr	r3, [pc, #144]	; (400360 <udi_cdc_tx_send+0x120>)
  4002d0:	4798      	blx	r3
  4002d2:	4b22      	ldr	r3, [pc, #136]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002d4:	8018      	strh	r0, [r3, #0]
  4002d6:	e02e      	b.n	400336 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4002d8:	4b20      	ldr	r3, [pc, #128]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002da:	881c      	ldrh	r4, [r3, #0]
  4002dc:	4b26      	ldr	r3, [pc, #152]	; (400378 <udi_cdc_tx_send+0x138>)
  4002de:	4798      	blx	r3
  4002e0:	4284      	cmp	r4, r0
  4002e2:	d1bd      	bne.n	400260 <udi_cdc_tx_send+0x20>
  4002e4:	e033      	b.n	40034e <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4002e6:	4a22      	ldr	r2, [pc, #136]	; (400370 <udi_cdc_tx_send+0x130>)
  4002e8:	8813      	ldrh	r3, [r2, #0]
  4002ea:	3301      	adds	r3, #1
  4002ec:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002ee:	4b1a      	ldr	r3, [pc, #104]	; (400358 <udi_cdc_tx_send+0x118>)
  4002f0:	4798      	blx	r3
  4002f2:	b918      	cbnz	r0, 4002fc <udi_cdc_tx_send+0xbc>
  4002f4:	4b1e      	ldr	r3, [pc, #120]	; (400370 <udi_cdc_tx_send+0x130>)
  4002f6:	881b      	ldrh	r3, [r3, #0]
  4002f8:	2b63      	cmp	r3, #99	; 0x63
  4002fa:	d908      	bls.n	40030e <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4002fc:	4b16      	ldr	r3, [pc, #88]	; (400358 <udi_cdc_tx_send+0x118>)
  4002fe:	4798      	blx	r3
  400300:	2800      	cmp	r0, #0
  400302:	d0c2      	beq.n	40028a <udi_cdc_tx_send+0x4a>
  400304:	4b1a      	ldr	r3, [pc, #104]	; (400370 <udi_cdc_tx_send+0x130>)
  400306:	881b      	ldrh	r3, [r3, #0]
  400308:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40030c:	d2bd      	bcs.n	40028a <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  40030e:	b1f5      	cbz	r5, 40034e <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  400310:	2201      	movs	r2, #1
  400312:	4b14      	ldr	r3, [pc, #80]	; (400364 <udi_cdc_tx_send+0x124>)
  400314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40031a:	b662      	cpsie	i
  40031c:	e017      	b.n	40034e <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40031e:	fab4 f484 	clz	r4, r4
  400322:	0964      	lsrs	r4, r4, #5
  400324:	e7bd      	b.n	4002a2 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400326:	4b14      	ldr	r3, [pc, #80]	; (400378 <udi_cdc_tx_send+0x138>)
  400328:	4798      	blx	r3
  40032a:	4b0c      	ldr	r3, [pc, #48]	; (40035c <udi_cdc_tx_send+0x11c>)
  40032c:	8018      	strh	r0, [r3, #0]
  40032e:	e002      	b.n	400336 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400330:	2200      	movs	r2, #0
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <udi_cdc_tx_send+0x11c>)
  400334:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400336:	4b0d      	ldr	r3, [pc, #52]	; (40036c <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400338:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  40033c:	4a0f      	ldr	r2, [pc, #60]	; (40037c <udi_cdc_tx_send+0x13c>)
  40033e:	9200      	str	r2, [sp, #0]
  400340:	4a0f      	ldr	r2, [pc, #60]	; (400380 <udi_cdc_tx_send+0x140>)
  400342:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400346:	4629      	mov	r1, r5
  400348:	2081      	movs	r0, #129	; 0x81
  40034a:	4c0e      	ldr	r4, [pc, #56]	; (400384 <udi_cdc_tx_send+0x144>)
  40034c:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40034e:	b004      	add	sp, #16
  400350:	bd70      	pop	{r4, r5, r6, pc}
  400352:	bf00      	nop
  400354:	20000c88 	.word	0x20000c88
  400358:	004020c9 	.word	0x004020c9
  40035c:	20000c84 	.word	0x20000c84
  400360:	00402135 	.word	0x00402135
  400364:	20000128 	.word	0x20000128
  400368:	20000c80 	.word	0x20000c80
  40036c:	20000c7c 	.word	0x20000c7c
  400370:	20000b54 	.word	0x20000b54
  400374:	20000bf8 	.word	0x20000bf8
  400378:	00402125 	.word	0x00402125
  40037c:	00400389 	.word	0x00400389
  400380:	20000bfc 	.word	0x20000bfc
  400384:	0040248d 	.word	0x0040248d

00400388 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400388:	b100      	cbz	r0, 40038c <udi_cdc_data_sent+0x4>
  40038a:	4770      	bx	lr
{
  40038c:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40038e:	4b07      	ldr	r3, [pc, #28]	; (4003ac <udi_cdc_data_sent+0x24>)
  400390:	781b      	ldrb	r3, [r3, #0]
  400392:	fab3 f383 	clz	r3, r3
  400396:	095b      	lsrs	r3, r3, #5
  400398:	4a05      	ldr	r2, [pc, #20]	; (4003b0 <udi_cdc_data_sent+0x28>)
  40039a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40039e:	4b05      	ldr	r3, [pc, #20]	; (4003b4 <udi_cdc_data_sent+0x2c>)
  4003a0:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003a2:	4b05      	ldr	r3, [pc, #20]	; (4003b8 <udi_cdc_data_sent+0x30>)
  4003a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  4003a6:	4b05      	ldr	r3, [pc, #20]	; (4003bc <udi_cdc_data_sent+0x34>)
  4003a8:	4798      	blx	r3
  4003aa:	bd08      	pop	{r3, pc}
  4003ac:	20000c80 	.word	0x20000c80
  4003b0:	20000c7c 	.word	0x20000c7c
  4003b4:	20000bf8 	.word	0x20000bf8
  4003b8:	20000c88 	.word	0x20000c88
  4003bc:	00400241 	.word	0x00400241

004003c0 <udi_cdc_data_sof_notify>:
{
  4003c0:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  4003c2:	2000      	movs	r0, #0
  4003c4:	4b01      	ldr	r3, [pc, #4]	; (4003cc <udi_cdc_data_sof_notify+0xc>)
  4003c6:	4798      	blx	r3
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	00400241 	.word	0x00400241

004003d0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003d0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003d2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003d6:	fab3 f383 	clz	r3, r3
  4003da:	095b      	lsrs	r3, r3, #5
  4003dc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4003e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003e4:	2200      	movs	r2, #0
  4003e6:	4b0b      	ldr	r3, [pc, #44]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  4003e8:	701a      	strb	r2, [r3, #0]
	return flags;
  4003ea:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4003ec:	4b0a      	ldr	r3, [pc, #40]	; (400418 <udi_cdc_multi_get_nb_received_data+0x48>)
  4003ee:	8818      	ldrh	r0, [r3, #0]
  4003f0:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4003f2:	4a0a      	ldr	r2, [pc, #40]	; (40041c <udi_cdc_multi_get_nb_received_data+0x4c>)
  4003f4:	7812      	ldrb	r2, [r2, #0]
  4003f6:	b2d2      	uxtb	r2, r2
  4003f8:	4809      	ldr	r0, [pc, #36]	; (400420 <udi_cdc_multi_get_nb_received_data+0x50>)
  4003fa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  4003fe:	b280      	uxth	r0, r0
  400400:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  400402:	b129      	cbz	r1, 400410 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400404:	2201      	movs	r2, #1
  400406:	4b03      	ldr	r3, [pc, #12]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  400408:	701a      	strb	r2, [r3, #0]
  40040a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40040e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400410:	b002      	add	sp, #8
  400412:	4770      	bx	lr
  400414:	20000128 	.word	0x20000128
  400418:	20000bec 	.word	0x20000bec
  40041c:	20000be8 	.word	0x20000be8
  400420:	20000be4 	.word	0x20000be4

00400424 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
  400424:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
  400426:	2000      	movs	r0, #0
  400428:	4b01      	ldr	r3, [pc, #4]	; (400430 <udi_cdc_get_nb_received_data+0xc>)
  40042a:	4798      	blx	r3
}
  40042c:	bd08      	pop	{r3, pc}
  40042e:	bf00      	nop
  400430:	004003d1 	.word	0x004003d1

00400434 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400434:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400436:	4b03      	ldr	r3, [pc, #12]	; (400444 <udi_cdc_multi_is_rx_ready+0x10>)
  400438:	4798      	blx	r3
}
  40043a:	3000      	adds	r0, #0
  40043c:	bf18      	it	ne
  40043e:	2001      	movne	r0, #1
  400440:	bd08      	pop	{r3, pc}
  400442:	bf00      	nop
  400444:	004003d1 	.word	0x004003d1

00400448 <udi_cdc_rx_start>:
{
  400448:	b510      	push	{r4, lr}
  40044a:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40044c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400450:	fab3 f383 	clz	r3, r3
  400454:	095b      	lsrs	r3, r3, #5
  400456:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400458:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40045a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40045e:	2200      	movs	r2, #0
  400460:	4b1e      	ldr	r3, [pc, #120]	; (4004dc <udi_cdc_rx_start+0x94>)
  400462:	701a      	strb	r2, [r3, #0]
	return flags;
  400464:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400466:	4a1e      	ldr	r2, [pc, #120]	; (4004e0 <udi_cdc_rx_start+0x98>)
  400468:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  40046a:	4a1e      	ldr	r2, [pc, #120]	; (4004e4 <udi_cdc_rx_start+0x9c>)
  40046c:	7812      	ldrb	r2, [r2, #0]
  40046e:	b94a      	cbnz	r2, 400484 <udi_cdc_rx_start+0x3c>
  400470:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400472:	4a1d      	ldr	r2, [pc, #116]	; (4004e8 <udi_cdc_rx_start+0xa0>)
  400474:	8811      	ldrh	r1, [r2, #0]
  400476:	b289      	uxth	r1, r1
  400478:	4a1c      	ldr	r2, [pc, #112]	; (4004ec <udi_cdc_rx_start+0xa4>)
  40047a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40047e:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400480:	4291      	cmp	r1, r2
  400482:	d209      	bcs.n	400498 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b33b      	cbz	r3, 4004d6 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b14      	ldr	r3, [pc, #80]	; (4004dc <udi_cdc_rx_start+0x94>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
		return false;
  400492:	2000      	movs	r0, #0
}
  400494:	b004      	add	sp, #16
  400496:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  400498:	2100      	movs	r1, #0
  40049a:	4a13      	ldr	r2, [pc, #76]	; (4004e8 <udi_cdc_rx_start+0xa0>)
  40049c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40049e:	fab4 f284 	clz	r2, r4
  4004a2:	0952      	lsrs	r2, r2, #5
  4004a4:	490e      	ldr	r1, [pc, #56]	; (4004e0 <udi_cdc_rx_start+0x98>)
  4004a6:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  4004a8:	2101      	movs	r1, #1
  4004aa:	4a0e      	ldr	r2, [pc, #56]	; (4004e4 <udi_cdc_rx_start+0x9c>)
  4004ac:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4004ae:	b123      	cbz	r3, 4004ba <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004b0:	4b0a      	ldr	r3, [pc, #40]	; (4004dc <udi_cdc_rx_start+0x94>)
  4004b2:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4004b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004b8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0c      	ldr	r3, [pc, #48]	; (4004f0 <udi_cdc_rx_start+0xa8>)
  4004be:	4798      	blx	r3
	return udd_ep_run(ep,
  4004c0:	4b0c      	ldr	r3, [pc, #48]	; (4004f4 <udi_cdc_rx_start+0xac>)
  4004c2:	9300      	str	r3, [sp, #0]
  4004c4:	2340      	movs	r3, #64	; 0x40
  4004c6:	4a0c      	ldr	r2, [pc, #48]	; (4004f8 <udi_cdc_rx_start+0xb0>)
  4004c8:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004cc:	2101      	movs	r1, #1
  4004ce:	2002      	movs	r0, #2
  4004d0:	4c0a      	ldr	r4, [pc, #40]	; (4004fc <udi_cdc_rx_start+0xb4>)
  4004d2:	47a0      	blx	r4
  4004d4:	e7de      	b.n	400494 <udi_cdc_rx_start+0x4c>
		return false;
  4004d6:	2000      	movs	r0, #0
  4004d8:	e7dc      	b.n	400494 <udi_cdc_rx_start+0x4c>
  4004da:	bf00      	nop
  4004dc:	20000128 	.word	0x20000128
  4004e0:	20000be8 	.word	0x20000be8
  4004e4:	20000bf0 	.word	0x20000bf0
  4004e8:	20000bec 	.word	0x20000bec
  4004ec:	20000be4 	.word	0x20000be4
  4004f0:	00400435 	.word	0x00400435
  4004f4:	00400595 	.word	0x00400595
  4004f8:	20000b64 	.word	0x20000b64
  4004fc:	0040248d 	.word	0x0040248d

00400500 <udi_cdc_data_enable>:
{
  400500:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  400502:	2400      	movs	r4, #0
  400504:	4b16      	ldr	r3, [pc, #88]	; (400560 <udi_cdc_data_enable+0x60>)
  400506:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400508:	4b16      	ldr	r3, [pc, #88]	; (400564 <udi_cdc_data_enable+0x64>)
  40050a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40050c:	4b16      	ldr	r3, [pc, #88]	; (400568 <udi_cdc_data_enable+0x68>)
  40050e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400510:	4b16      	ldr	r3, [pc, #88]	; (40056c <udi_cdc_data_enable+0x6c>)
  400512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400514:	4b16      	ldr	r3, [pc, #88]	; (400570 <udi_cdc_data_enable+0x70>)
  400516:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400518:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40051a:	4b16      	ldr	r3, [pc, #88]	; (400574 <udi_cdc_data_enable+0x74>)
  40051c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40051e:	4620      	mov	r0, r4
  400520:	4b15      	ldr	r3, [pc, #84]	; (400578 <udi_cdc_data_enable+0x78>)
  400522:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400524:	4b15      	ldr	r3, [pc, #84]	; (40057c <udi_cdc_data_enable+0x7c>)
  400526:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400528:	4b15      	ldr	r3, [pc, #84]	; (400580 <udi_cdc_data_enable+0x80>)
  40052a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40052c:	4b15      	ldr	r3, [pc, #84]	; (400584 <udi_cdc_data_enable+0x84>)
  40052e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400530:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  400532:	4b15      	ldr	r3, [pc, #84]	; (400588 <udi_cdc_data_enable+0x88>)
  400534:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400536:	4620      	mov	r0, r4
  400538:	4b14      	ldr	r3, [pc, #80]	; (40058c <udi_cdc_data_enable+0x8c>)
  40053a:	4798      	blx	r3
  40053c:	4601      	mov	r1, r0
  40053e:	b140      	cbz	r0, 400552 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400540:	4a07      	ldr	r2, [pc, #28]	; (400560 <udi_cdc_data_enable+0x60>)
  400542:	7813      	ldrb	r3, [r2, #0]
  400544:	3301      	adds	r3, #1
  400546:	b2db      	uxtb	r3, r3
  400548:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40054a:	7813      	ldrb	r3, [r2, #0]
  40054c:	b2db      	uxtb	r3, r3
  40054e:	2b01      	cmp	r3, #1
  400550:	d001      	beq.n	400556 <udi_cdc_data_enable+0x56>
}
  400552:	4608      	mov	r0, r1
  400554:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  400556:	2201      	movs	r2, #1
  400558:	4b0d      	ldr	r3, [pc, #52]	; (400590 <udi_cdc_data_enable+0x90>)
  40055a:	701a      	strb	r2, [r3, #0]
  40055c:	e7f9      	b.n	400552 <udi_cdc_data_enable+0x52>
  40055e:	bf00      	nop
  400560:	20000b60 	.word	0x20000b60
  400564:	20000c88 	.word	0x20000c88
  400568:	20000bf8 	.word	0x20000bf8
  40056c:	20000c80 	.word	0x20000c80
  400570:	20000c7c 	.word	0x20000c7c
  400574:	20000c84 	.word	0x20000c84
  400578:	00400241 	.word	0x00400241
  40057c:	20000bf0 	.word	0x20000bf0
  400580:	20000be8 	.word	0x20000be8
  400584:	20000be4 	.word	0x20000be4
  400588:	20000bec 	.word	0x20000bec
  40058c:	00400449 	.word	0x00400449
  400590:	20000b56 	.word	0x20000b56

00400594 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400594:	b9e8      	cbnz	r0, 4005d2 <udi_cdc_data_received+0x3e>
{
  400596:	b510      	push	{r4, lr}
  400598:	b082      	sub	sp, #8
  40059a:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <udi_cdc_data_received+0x40>)
  40059e:	781c      	ldrb	r4, [r3, #0]
  4005a0:	fab4 f484 	clz	r4, r4
  4005a4:	0964      	lsrs	r4, r4, #5
	if (!n) {
  4005a6:	b151      	cbz	r1, 4005be <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4005a8:	b289      	uxth	r1, r1
  4005aa:	4b0b      	ldr	r3, [pc, #44]	; (4005d8 <udi_cdc_data_received+0x44>)
  4005ac:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005b0:	2000      	movs	r0, #0
  4005b2:	4b0a      	ldr	r3, [pc, #40]	; (4005dc <udi_cdc_data_received+0x48>)
  4005b4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005b6:	4b0a      	ldr	r3, [pc, #40]	; (4005e0 <udi_cdc_data_received+0x4c>)
  4005b8:	4798      	blx	r3
}
  4005ba:	b002      	add	sp, #8
  4005bc:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  4005be:	4b09      	ldr	r3, [pc, #36]	; (4005e4 <udi_cdc_data_received+0x50>)
  4005c0:	9300      	str	r3, [sp, #0]
  4005c2:	2340      	movs	r3, #64	; 0x40
  4005c4:	4a08      	ldr	r2, [pc, #32]	; (4005e8 <udi_cdc_data_received+0x54>)
  4005c6:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4005ca:	2101      	movs	r1, #1
  4005cc:	4c07      	ldr	r4, [pc, #28]	; (4005ec <udi_cdc_data_received+0x58>)
  4005ce:	47a0      	blx	r4
		return;
  4005d0:	e7f3      	b.n	4005ba <udi_cdc_data_received+0x26>
  4005d2:	4770      	bx	lr
  4005d4:	20000be8 	.word	0x20000be8
  4005d8:	20000be4 	.word	0x20000be4
  4005dc:	20000bf0 	.word	0x20000bf0
  4005e0:	00400449 	.word	0x00400449
  4005e4:	00400595 	.word	0x00400595
  4005e8:	20000b64 	.word	0x20000b64
  4005ec:	0040248d 	.word	0x0040248d

004005f0 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
  4005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4005f4:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4005f6:	4b25      	ldr	r3, [pc, #148]	; (40068c <udi_cdc_multi_getc+0x9c>)
  4005f8:	f893 8006 	ldrb.w	r8, [r3, #6]
  4005fc:	f1b8 0f09 	cmp.w	r8, #9
  400600:	bf14      	ite	ne
  400602:	f04f 0800 	movne.w	r8, #0
  400606:	f04f 0801 	moveq.w	r8, #1
	int rx_data = 0;
  40060a:	f04f 0a00 	mov.w	sl, #0
	cpu_irq_disable();
  40060e:	4c20      	ldr	r4, [pc, #128]	; (400690 <udi_cdc_multi_getc+0xa0>)
  400610:	46d1      	mov	r9, sl
  400612:	4657      	mov	r7, sl

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400614:	4d1f      	ldr	r5, [pc, #124]	; (400694 <udi_cdc_multi_getc+0xa4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  400616:	4e20      	ldr	r6, [pc, #128]	; (400698 <udi_cdc_multi_getc+0xa8>)
  400618:	e004      	b.n	400624 <udi_cdc_multi_getc+0x34>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
  40061a:	428b      	cmp	r3, r1
  40061c:	d323      	bcc.n	400666 <udi_cdc_multi_getc+0x76>
		if (!udi_cdc_data_running) {
  40061e:	4b1f      	ldr	r3, [pc, #124]	; (40069c <udi_cdc_multi_getc+0xac>)
  400620:	781b      	ldrb	r3, [r3, #0]
  400622:	b1d3      	cbz	r3, 40065a <udi_cdc_multi_getc+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400624:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400628:	fab3 f383 	clz	r3, r3
  40062c:	095b      	lsrs	r3, r3, #5
  40062e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400630:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400632:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400636:	7027      	strb	r7, [r4, #0]
	return flags;
  400638:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  40063a:	882b      	ldrh	r3, [r5, #0]
  40063c:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  40063e:	7832      	ldrb	r2, [r6, #0]
  400640:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  400642:	4917      	ldr	r1, [pc, #92]	; (4006a0 <udi_cdc_multi_getc+0xb0>)
  400644:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400648:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
  40064a:	2800      	cmp	r0, #0
  40064c:	d0e5      	beq.n	40061a <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
  40064e:	2001      	movs	r0, #1
  400650:	7020      	strb	r0, [r4, #0]
  400652:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400656:	b662      	cpsie	i
  400658:	e7df      	b.n	40061a <udi_cdc_multi_getc+0x2a>
			return 0;
  40065a:	f04f 0a00 	mov.w	sl, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  40065e:	4650      	mov	r0, sl
  400660:	b002      	add	sp, #8
  400662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400666:	490f      	ldr	r1, [pc, #60]	; (4006a4 <udi_cdc_multi_getc+0xb4>)
  400668:	eb01 1282 	add.w	r2, r1, r2, lsl #6
  40066c:	5cd2      	ldrb	r2, [r2, r3]
  40066e:	ea42 0a0a 	orr.w	sl, r2, sl
	udi_cdc_rx_pos[port] = pos+1;
  400672:	3301      	adds	r3, #1
  400674:	b29b      	uxth	r3, r3
  400676:	802b      	strh	r3, [r5, #0]
	udi_cdc_rx_start(port);
  400678:	4648      	mov	r0, r9
  40067a:	4b0b      	ldr	r3, [pc, #44]	; (4006a8 <udi_cdc_multi_getc+0xb8>)
  40067c:	4798      	blx	r3
	if (b_databit_9) {
  40067e:	f1b8 0f00 	cmp.w	r8, #0
  400682:	d0ec      	beq.n	40065e <udi_cdc_multi_getc+0x6e>
		rx_data = rx_data << 8;
  400684:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
		b_databit_9 = false;
  400688:	46c8      	mov	r8, r9
		goto udi_cdc_getc_process_one_byte;
  40068a:	e7cb      	b.n	400624 <udi_cdc_multi_getc+0x34>
  40068c:	20000b58 	.word	0x20000b58
  400690:	20000128 	.word	0x20000128
  400694:	20000bec 	.word	0x20000bec
  400698:	20000be8 	.word	0x20000be8
  40069c:	20000b56 	.word	0x20000b56
  4006a0:	20000be4 	.word	0x20000be4
  4006a4:	20000b64 	.word	0x20000b64
  4006a8:	00400449 	.word	0x00400449

004006ac <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  4006ac:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  4006ae:	2000      	movs	r0, #0
  4006b0:	4b01      	ldr	r3, [pc, #4]	; (4006b8 <udi_cdc_getc+0xc>)
  4006b2:	4798      	blx	r3
}
  4006b4:	bd08      	pop	{r3, pc}
  4006b6:	bf00      	nop
  4006b8:	004005f1 	.word	0x004005f1

004006bc <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  4006bc:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4006be:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006c2:	fab3 f383 	clz	r3, r3
  4006c6:	095b      	lsrs	r3, r3, #5
  4006c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4006cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006d0:	2200      	movs	r2, #0
  4006d2:	4b14      	ldr	r3, [pc, #80]	; (400724 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4006d6:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4006d8:	4b13      	ldr	r3, [pc, #76]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  4006da:	781b      	ldrb	r3, [r3, #0]
  4006dc:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  4006de:	4913      	ldr	r1, [pc, #76]	; (40072c <udi_cdc_multi_get_free_tx_buffer+0x70>)
  4006e0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  4006e4:	2840      	cmp	r0, #64	; 0x40
  4006e6:	d00a      	beq.n	4006fe <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  4006e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	if (cpu_irq_is_enabled_flags(flags))
  4006ec:	b12a      	cbz	r2, 4006fa <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
  4006ee:	2201      	movs	r2, #1
  4006f0:	4b0c      	ldr	r3, [pc, #48]	; (400724 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006f2:	701a      	strb	r2, [r3, #0]
  4006f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006f8:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  4006fa:	b002      	add	sp, #8
  4006fc:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  4006fe:	490c      	ldr	r1, [pc, #48]	; (400730 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400700:	7809      	ldrb	r1, [r1, #0]
  400702:	2900      	cmp	r1, #0
  400704:	d1f0      	bne.n	4006e8 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400706:	490b      	ldr	r1, [pc, #44]	; (400734 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400708:	7809      	ldrb	r1, [r1, #0]
  40070a:	2900      	cmp	r1, #0
  40070c:	d1ec      	bne.n	4006e8 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			udi_cdc_tx_both_buf_to_send[port] = true;
  40070e:	2001      	movs	r0, #1
  400710:	4908      	ldr	r1, [pc, #32]	; (400734 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400712:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400714:	fab3 f383 	clz	r3, r3
  400718:	095b      	lsrs	r3, r3, #5
  40071a:	4903      	ldr	r1, [pc, #12]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  40071c:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  40071e:	2000      	movs	r0, #0
  400720:	e7e2      	b.n	4006e8 <udi_cdc_multi_get_free_tx_buffer+0x2c>
  400722:	bf00      	nop
  400724:	20000128 	.word	0x20000128
  400728:	20000c80 	.word	0x20000c80
  40072c:	20000c7c 	.word	0x20000c7c
  400730:	20000c88 	.word	0x20000c88
  400734:	20000bf8 	.word	0x20000bf8

00400738 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400738:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  40073a:	4b03      	ldr	r3, [pc, #12]	; (400748 <udi_cdc_multi_is_tx_ready+0x10>)
  40073c:	4798      	blx	r3
}
  40073e:	3000      	adds	r0, #0
  400740:	bf18      	it	ne
  400742:	2001      	movne	r0, #1
  400744:	bd08      	pop	{r3, pc}
  400746:	bf00      	nop
  400748:	004006bd 	.word	0x004006bd

0040074c <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  40074c:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_tx_ready(0);
  40074e:	2000      	movs	r0, #0
  400750:	4b01      	ldr	r3, [pc, #4]	; (400758 <udi_cdc_is_tx_ready+0xc>)
  400752:	4798      	blx	r3
}
  400754:	bd08      	pop	{r3, pc}
  400756:	bf00      	nop
  400758:	00400739 	.word	0x00400739

0040075c <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  40075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400760:	b082      	sub	sp, #8
  400762:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400764:	4b1d      	ldr	r3, [pc, #116]	; (4007dc <udi_cdc_multi_putc+0x80>)
  400766:	799d      	ldrb	r5, [r3, #6]
  400768:	2d09      	cmp	r5, #9
  40076a:	bf14      	ite	ne
  40076c:	2500      	movne	r5, #0
  40076e:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400770:	4e1b      	ldr	r6, [pc, #108]	; (4007e0 <udi_cdc_multi_putc+0x84>)
	cpu_irq_disable();
  400772:	4f1c      	ldr	r7, [pc, #112]	; (4007e4 <udi_cdc_multi_putc+0x88>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400774:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4007f4 <udi_cdc_multi_putc+0x98>
  400778:	e022      	b.n	4007c0 <udi_cdc_multi_putc+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40077a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40077e:	fab3 f383 	clz	r3, r3
  400782:	095b      	lsrs	r3, r3, #5
  400784:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400786:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400788:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40078c:	2300      	movs	r3, #0
  40078e:	703b      	strb	r3, [r7, #0]
	return flags;
  400790:	9801      	ldr	r0, [sp, #4]
  400792:	f898 3000 	ldrb.w	r3, [r8]
  400796:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400798:	4a13      	ldr	r2, [pc, #76]	; (4007e8 <udi_cdc_multi_putc+0x8c>)
  40079a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  40079e:	f101 0e01 	add.w	lr, r1, #1
  4007a2:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
  4007a6:	4a11      	ldr	r2, [pc, #68]	; (4007ec <udi_cdc_multi_putc+0x90>)
  4007a8:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  4007ac:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
  4007ae:	b120      	cbz	r0, 4007ba <udi_cdc_multi_putc+0x5e>
		cpu_irq_enable();
  4007b0:	2301      	movs	r3, #1
  4007b2:	703b      	strb	r3, [r7, #0]
  4007b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007b8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  4007ba:	b165      	cbz	r5, 4007d6 <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  4007bc:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
  4007be:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
  4007c0:	2000      	movs	r0, #0
  4007c2:	47b0      	blx	r6
  4007c4:	2800      	cmp	r0, #0
  4007c6:	d1d8      	bne.n	40077a <udi_cdc_multi_putc+0x1e>
		if (!udi_cdc_data_running) {
  4007c8:	4b09      	ldr	r3, [pc, #36]	; (4007f0 <udi_cdc_multi_putc+0x94>)
  4007ca:	781b      	ldrb	r3, [r3, #0]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d1f7      	bne.n	4007c0 <udi_cdc_multi_putc+0x64>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
  4007d0:	b002      	add	sp, #8
  4007d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
  4007d6:	2001      	movs	r0, #1
  4007d8:	e7fa      	b.n	4007d0 <udi_cdc_multi_putc+0x74>
  4007da:	bf00      	nop
  4007dc:	20000b58 	.word	0x20000b58
  4007e0:	00400739 	.word	0x00400739
  4007e4:	20000128 	.word	0x20000128
  4007e8:	20000c7c 	.word	0x20000c7c
  4007ec:	20000bfc 	.word	0x20000bfc
  4007f0:	20000b56 	.word	0x20000b56
  4007f4:	20000c80 	.word	0x20000c80

004007f8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  4007f8:	b508      	push	{r3, lr}
	return udi_cdc_multi_putc(0, value);
  4007fa:	4601      	mov	r1, r0
  4007fc:	2000      	movs	r0, #0
  4007fe:	4b01      	ldr	r3, [pc, #4]	; (400804 <udi_cdc_putc+0xc>)
  400800:	4798      	blx	r3
}
  400802:	bd08      	pop	{r3, pc}
  400804:	0040075d 	.word	0x0040075d

00400808 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  400808:	4b10      	ldr	r3, [pc, #64]	; (40084c <udc_next_desc_in_iface+0x44>)
  40080a:	681b      	ldr	r3, [r3, #0]
  40080c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40080e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400810:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400812:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400814:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400816:	4290      	cmp	r0, r2
  400818:	d211      	bcs.n	40083e <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40081a:	7843      	ldrb	r3, [r0, #1]
  40081c:	2b04      	cmp	r3, #4
  40081e:	d010      	beq.n	400842 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400820:	428b      	cmp	r3, r1
  400822:	d009      	beq.n	400838 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400824:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400826:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400828:	4290      	cmp	r0, r2
  40082a:	d206      	bcs.n	40083a <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40082c:	7843      	ldrb	r3, [r0, #1]
  40082e:	2b04      	cmp	r3, #4
  400830:	d009      	beq.n	400846 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400832:	428b      	cmp	r3, r1
  400834:	d1f6      	bne.n	400824 <udc_next_desc_in_iface+0x1c>
  400836:	e007      	b.n	400848 <udc_next_desc_in_iface+0x40>
  400838:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40083a:	2000      	movs	r0, #0
  40083c:	4770      	bx	lr
  40083e:	2000      	movs	r0, #0
  400840:	4770      	bx	lr
  400842:	2000      	movs	r0, #0
  400844:	4770      	bx	lr
  400846:	2000      	movs	r0, #0
}
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	20000ca4 	.word	0x20000ca4

00400850 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400850:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400852:	4b03      	ldr	r3, [pc, #12]	; (400860 <udc_valid_address+0x10>)
  400854:	7898      	ldrb	r0, [r3, #2]
  400856:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40085a:	4b02      	ldr	r3, [pc, #8]	; (400864 <udc_valid_address+0x14>)
  40085c:	4798      	blx	r3
  40085e:	bd08      	pop	{r3, pc}
  400860:	200017c8 	.word	0x200017c8
  400864:	004020cd 	.word	0x004020cd

00400868 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400868:	4b19      	ldr	r3, [pc, #100]	; (4008d0 <udc_update_iface_desc+0x68>)
  40086a:	781b      	ldrb	r3, [r3, #0]
  40086c:	b34b      	cbz	r3, 4008c2 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40086e:	4b19      	ldr	r3, [pc, #100]	; (4008d4 <udc_update_iface_desc+0x6c>)
  400870:	681b      	ldr	r3, [r3, #0]
  400872:	681b      	ldr	r3, [r3, #0]
  400874:	791a      	ldrb	r2, [r3, #4]
  400876:	4282      	cmp	r2, r0
  400878:	d925      	bls.n	4008c6 <udc_update_iface_desc+0x5e>
{
  40087a:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  40087c:	4a16      	ldr	r2, [pc, #88]	; (4008d8 <udc_update_iface_desc+0x70>)
  40087e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400880:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400882:	441c      	add	r4, r3
	while (ptr_end_desc >
  400884:	42a3      	cmp	r3, r4
  400886:	d220      	bcs.n	4008ca <udc_update_iface_desc+0x62>
  400888:	2500      	movs	r5, #0
  40088a:	2601      	movs	r6, #1
  40088c:	e007      	b.n	40089e <udc_update_iface_desc+0x36>
  40088e:	4a12      	ldr	r2, [pc, #72]	; (4008d8 <udc_update_iface_desc+0x70>)
  400890:	6013      	str	r3, [r2, #0]
  400892:	e00f      	b.n	4008b4 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  400894:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400896:	4413      	add	r3, r2
  400898:	4635      	mov	r5, r6
	while (ptr_end_desc >
  40089a:	42a3      	cmp	r3, r4
  40089c:	d20c      	bcs.n	4008b8 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  40089e:	785a      	ldrb	r2, [r3, #1]
  4008a0:	2a04      	cmp	r2, #4
  4008a2:	d1f7      	bne.n	400894 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4008a4:	789a      	ldrb	r2, [r3, #2]
  4008a6:	4282      	cmp	r2, r0
  4008a8:	d1f4      	bne.n	400894 <udc_update_iface_desc+0x2c>
  4008aa:	78da      	ldrb	r2, [r3, #3]
  4008ac:	428a      	cmp	r2, r1
  4008ae:	d1f1      	bne.n	400894 <udc_update_iface_desc+0x2c>
  4008b0:	2d00      	cmp	r5, #0
  4008b2:	d1ec      	bne.n	40088e <udc_update_iface_desc+0x26>
				return true; // Interface found
  4008b4:	2001      	movs	r0, #1
  4008b6:	e002      	b.n	4008be <udc_update_iface_desc+0x56>
  4008b8:	4a07      	ldr	r2, [pc, #28]	; (4008d8 <udc_update_iface_desc+0x70>)
  4008ba:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  4008bc:	2000      	movs	r0, #0
}
  4008be:	bc70      	pop	{r4, r5, r6}
  4008c0:	4770      	bx	lr
		return false;
  4008c2:	2000      	movs	r0, #0
  4008c4:	4770      	bx	lr
		return false;
  4008c6:	2000      	movs	r0, #0
  4008c8:	4770      	bx	lr
	return false; // Interface not found
  4008ca:	2000      	movs	r0, #0
  4008cc:	e7f7      	b.n	4008be <udc_update_iface_desc+0x56>
  4008ce:	bf00      	nop
  4008d0:	20000ca0 	.word	0x20000ca0
  4008d4:	20000ca4 	.word	0x20000ca4
  4008d8:	20000ca8 	.word	0x20000ca8

004008dc <udc_iface_disable>:
{
  4008dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008e0:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4008e2:	2100      	movs	r1, #0
  4008e4:	4b13      	ldr	r3, [pc, #76]	; (400934 <udc_iface_disable+0x58>)
  4008e6:	4798      	blx	r3
  4008e8:	4680      	mov	r8, r0
  4008ea:	b910      	cbnz	r0, 4008f2 <udc_iface_disable+0x16>
}
  4008ec:	4640      	mov	r0, r8
  4008ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4008f2:	4b11      	ldr	r3, [pc, #68]	; (400938 <udc_iface_disable+0x5c>)
  4008f4:	681b      	ldr	r3, [r3, #0]
  4008f6:	685b      	ldr	r3, [r3, #4]
  4008f8:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4008fc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400900:	4798      	blx	r3
  400902:	4601      	mov	r1, r0
  400904:	4620      	mov	r0, r4
  400906:	4b0b      	ldr	r3, [pc, #44]	; (400934 <udc_iface_disable+0x58>)
  400908:	4798      	blx	r3
  40090a:	4680      	mov	r8, r0
  40090c:	2800      	cmp	r0, #0
  40090e:	d0ed      	beq.n	4008ec <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400910:	4b0a      	ldr	r3, [pc, #40]	; (40093c <udc_iface_disable+0x60>)
  400912:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400914:	2605      	movs	r6, #5
  400916:	4d0a      	ldr	r5, [pc, #40]	; (400940 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  400918:	4f0a      	ldr	r7, [pc, #40]	; (400944 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40091a:	4631      	mov	r1, r6
  40091c:	4620      	mov	r0, r4
  40091e:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400920:	4604      	mov	r4, r0
  400922:	b110      	cbz	r0, 40092a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400924:	7880      	ldrb	r0, [r0, #2]
  400926:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400928:	e7f7      	b.n	40091a <udc_iface_disable+0x3e>
	udi_api->disable();
  40092a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40092e:	4798      	blx	r3
	return true;
  400930:	e7dc      	b.n	4008ec <udc_iface_disable+0x10>
  400932:	bf00      	nop
  400934:	00400869 	.word	0x00400869
  400938:	20000ca4 	.word	0x20000ca4
  40093c:	20000ca8 	.word	0x20000ca8
  400940:	00400809 	.word	0x00400809
  400944:	0040223d 	.word	0x0040223d

00400948 <udc_iface_enable>:
{
  400948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40094c:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40094e:	4b10      	ldr	r3, [pc, #64]	; (400990 <udc_iface_enable+0x48>)
  400950:	4798      	blx	r3
  400952:	4603      	mov	r3, r0
  400954:	b1c8      	cbz	r0, 40098a <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400956:	4b0f      	ldr	r3, [pc, #60]	; (400994 <udc_iface_enable+0x4c>)
  400958:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40095a:	2605      	movs	r6, #5
  40095c:	4d0e      	ldr	r5, [pc, #56]	; (400998 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40095e:	4f0f      	ldr	r7, [pc, #60]	; (40099c <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400960:	4631      	mov	r1, r6
  400962:	4620      	mov	r0, r4
  400964:	47a8      	blx	r5
		if (NULL == ep_desc)
  400966:	4604      	mov	r4, r0
  400968:	b138      	cbz	r0, 40097a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40096a:	8882      	ldrh	r2, [r0, #4]
  40096c:	78c1      	ldrb	r1, [r0, #3]
  40096e:	7880      	ldrb	r0, [r0, #2]
  400970:	47b8      	blx	r7
  400972:	4603      	mov	r3, r0
  400974:	2800      	cmp	r0, #0
  400976:	d1f3      	bne.n	400960 <udc_iface_enable+0x18>
  400978:	e007      	b.n	40098a <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40097a:	4b09      	ldr	r3, [pc, #36]	; (4009a0 <udc_iface_enable+0x58>)
  40097c:	681b      	ldr	r3, [r3, #0]
  40097e:	685b      	ldr	r3, [r3, #4]
  400980:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400984:	681b      	ldr	r3, [r3, #0]
  400986:	4798      	blx	r3
  400988:	4603      	mov	r3, r0
}
  40098a:	4618      	mov	r0, r3
  40098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400990:	00400869 	.word	0x00400869
  400994:	20000ca8 	.word	0x20000ca8
  400998:	00400809 	.word	0x00400809
  40099c:	00402145 	.word	0x00402145
  4009a0:	20000ca4 	.word	0x20000ca4

004009a4 <udc_start>:
{
  4009a4:	b508      	push	{r3, lr}
	udd_enable();
  4009a6:	4b01      	ldr	r3, [pc, #4]	; (4009ac <udc_start+0x8>)
  4009a8:	4798      	blx	r3
  4009aa:	bd08      	pop	{r3, pc}
  4009ac:	00401fed 	.word	0x00401fed

004009b0 <udc_reset>:
{
  4009b0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  4009b2:	4b0d      	ldr	r3, [pc, #52]	; (4009e8 <udc_reset+0x38>)
  4009b4:	781b      	ldrb	r3, [r3, #0]
  4009b6:	b183      	cbz	r3, 4009da <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009b8:	4b0c      	ldr	r3, [pc, #48]	; (4009ec <udc_reset+0x3c>)
  4009ba:	681b      	ldr	r3, [r3, #0]
  4009bc:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4009be:	791b      	ldrb	r3, [r3, #4]
  4009c0:	b15b      	cbz	r3, 4009da <udc_reset+0x2a>
  4009c2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4009c4:	4e0a      	ldr	r6, [pc, #40]	; (4009f0 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009c6:	4d09      	ldr	r5, [pc, #36]	; (4009ec <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4009c8:	4620      	mov	r0, r4
  4009ca:	47b0      	blx	r6
				iface_num++) {
  4009cc:	3401      	adds	r4, #1
  4009ce:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009d0:	682b      	ldr	r3, [r5, #0]
  4009d2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4009d4:	791b      	ldrb	r3, [r3, #4]
  4009d6:	42a3      	cmp	r3, r4
  4009d8:	d8f6      	bhi.n	4009c8 <udc_reset+0x18>
	udc_num_configuration = 0;
  4009da:	2200      	movs	r2, #0
  4009dc:	4b02      	ldr	r3, [pc, #8]	; (4009e8 <udc_reset+0x38>)
  4009de:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4009e0:	2201      	movs	r2, #1
  4009e2:	4b04      	ldr	r3, [pc, #16]	; (4009f4 <udc_reset+0x44>)
  4009e4:	801a      	strh	r2, [r3, #0]
  4009e6:	bd70      	pop	{r4, r5, r6, pc}
  4009e8:	20000ca0 	.word	0x20000ca0
  4009ec:	20000ca4 	.word	0x20000ca4
  4009f0:	004008dd 	.word	0x004008dd
  4009f4:	20000c96 	.word	0x20000c96

004009f8 <udc_sof_notify>:
{
  4009f8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4009fa:	4b0d      	ldr	r3, [pc, #52]	; (400a30 <udc_sof_notify+0x38>)
  4009fc:	781b      	ldrb	r3, [r3, #0]
  4009fe:	b1b3      	cbz	r3, 400a2e <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a00:	4b0c      	ldr	r3, [pc, #48]	; (400a34 <udc_sof_notify+0x3c>)
  400a02:	681b      	ldr	r3, [r3, #0]
  400a04:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a06:	7912      	ldrb	r2, [r2, #4]
  400a08:	b18a      	cbz	r2, 400a2e <udc_sof_notify+0x36>
  400a0a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a0c:	4d09      	ldr	r5, [pc, #36]	; (400a34 <udc_sof_notify+0x3c>)
  400a0e:	e006      	b.n	400a1e <udc_sof_notify+0x26>
				iface_num++) {
  400a10:	3401      	adds	r4, #1
  400a12:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a14:	682b      	ldr	r3, [r5, #0]
  400a16:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a18:	7912      	ldrb	r2, [r2, #4]
  400a1a:	42a2      	cmp	r2, r4
  400a1c:	d907      	bls.n	400a2e <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400a1e:	685b      	ldr	r3, [r3, #4]
  400a20:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400a24:	691b      	ldr	r3, [r3, #16]
  400a26:	2b00      	cmp	r3, #0
  400a28:	d0f2      	beq.n	400a10 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400a2a:	4798      	blx	r3
  400a2c:	e7f0      	b.n	400a10 <udc_sof_notify+0x18>
  400a2e:	bd38      	pop	{r3, r4, r5, pc}
  400a30:	20000ca0 	.word	0x20000ca0
  400a34:	20000ca4 	.word	0x20000ca4

00400a38 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400a3a:	4b96      	ldr	r3, [pc, #600]	; (400c94 <udc_process_setup+0x25c>)
  400a3c:	2200      	movs	r2, #0
  400a3e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400a40:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400a42:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400a44:	781b      	ldrb	r3, [r3, #0]
  400a46:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a4a:	d114      	bne.n	400a76 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400a4c:	f013 0f60 	tst.w	r3, #96	; 0x60
  400a50:	f000 80b8 	beq.w	400bc4 <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400a54:	4b8f      	ldr	r3, [pc, #572]	; (400c94 <udc_process_setup+0x25c>)
  400a56:	781b      	ldrb	r3, [r3, #0]
  400a58:	f003 031f 	and.w	r3, r3, #31
  400a5c:	2b01      	cmp	r3, #1
  400a5e:	f000 818b 	beq.w	400d78 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400a62:	4b8c      	ldr	r3, [pc, #560]	; (400c94 <udc_process_setup+0x25c>)
  400a64:	781b      	ldrb	r3, [r3, #0]
  400a66:	f003 031f 	and.w	r3, r3, #31
  400a6a:	2b02      	cmp	r3, #2
  400a6c:	f000 81ac 	beq.w	400dc8 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400a70:	2300      	movs	r3, #0
#endif
}
  400a72:	4618      	mov	r0, r3
  400a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400a76:	4a87      	ldr	r2, [pc, #540]	; (400c94 <udc_process_setup+0x25c>)
  400a78:	88d2      	ldrh	r2, [r2, #6]
  400a7a:	2a00      	cmp	r2, #0
  400a7c:	f000 81cd 	beq.w	400e1a <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400a80:	f013 0f60 	tst.w	r3, #96	; 0x60
  400a84:	d1e6      	bne.n	400a54 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400a86:	f013 031f 	ands.w	r3, r3, #31
  400a8a:	d106      	bne.n	400a9a <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400a8c:	4981      	ldr	r1, [pc, #516]	; (400c94 <udc_process_setup+0x25c>)
  400a8e:	7849      	ldrb	r1, [r1, #1]
  400a90:	2906      	cmp	r1, #6
  400a92:	d013      	beq.n	400abc <udc_process_setup+0x84>
  400a94:	2908      	cmp	r1, #8
  400a96:	d058      	beq.n	400b4a <udc_process_setup+0x112>
  400a98:	b149      	cbz	r1, 400aae <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400a9a:	2b01      	cmp	r3, #1
  400a9c:	d05c      	beq.n	400b58 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400a9e:	2b02      	cmp	r3, #2
  400aa0:	d1d8      	bne.n	400a54 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400aa2:	4b7c      	ldr	r3, [pc, #496]	; (400c94 <udc_process_setup+0x25c>)
  400aa4:	785b      	ldrb	r3, [r3, #1]
  400aa6:	2b00      	cmp	r3, #0
  400aa8:	d07e      	beq.n	400ba8 <udc_process_setup+0x170>
	return false;
  400aaa:	2300      	movs	r3, #0
  400aac:	e160      	b.n	400d70 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400aae:	2a02      	cmp	r2, #2
  400ab0:	d1d0      	bne.n	400a54 <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400ab2:	2102      	movs	r1, #2
  400ab4:	4878      	ldr	r0, [pc, #480]	; (400c98 <udc_process_setup+0x260>)
  400ab6:	4b79      	ldr	r3, [pc, #484]	; (400c9c <udc_process_setup+0x264>)
  400ab8:	4798      	blx	r3
  400aba:	e09f      	b.n	400bfc <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400abc:	4b75      	ldr	r3, [pc, #468]	; (400c94 <udc_process_setup+0x25c>)
  400abe:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400ac0:	0a13      	lsrs	r3, r2, #8
  400ac2:	3b01      	subs	r3, #1
  400ac4:	2b0e      	cmp	r3, #14
  400ac6:	f200 8150 	bhi.w	400d6a <udc_process_setup+0x332>
  400aca:	e8df f013 	tbh	[pc, r3, lsl #1]
  400ace:	000f      	.short	0x000f
  400ad0:	0036001c 	.word	0x0036001c
  400ad4:	014e014e 	.word	0x014e014e
  400ad8:	014e014e 	.word	0x014e014e
  400adc:	014e014e 	.word	0x014e014e
  400ae0:	014e014e 	.word	0x014e014e
  400ae4:	014e014e 	.word	0x014e014e
  400ae8:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  400aec:	4b6c      	ldr	r3, [pc, #432]	; (400ca0 <udc_process_setup+0x268>)
  400aee:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  400af0:	7801      	ldrb	r1, [r0, #0]
  400af2:	4b6a      	ldr	r3, [pc, #424]	; (400c9c <udc_process_setup+0x264>)
  400af4:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400af6:	4b67      	ldr	r3, [pc, #412]	; (400c94 <udc_process_setup+0x25c>)
  400af8:	88da      	ldrh	r2, [r3, #6]
  400afa:	899b      	ldrh	r3, [r3, #12]
  400afc:	4293      	cmp	r3, r2
  400afe:	d97d      	bls.n	400bfc <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400b00:	4b64      	ldr	r3, [pc, #400]	; (400c94 <udc_process_setup+0x25c>)
  400b02:	819a      	strh	r2, [r3, #12]
  400b04:	e07a      	b.n	400bfc <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400b06:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  400b08:	4b65      	ldr	r3, [pc, #404]	; (400ca0 <udc_process_setup+0x268>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	7c5b      	ldrb	r3, [r3, #17]
  400b0e:	4293      	cmp	r3, r2
  400b10:	d9a0      	bls.n	400a54 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  400b12:	4b63      	ldr	r3, [pc, #396]	; (400ca0 <udc_process_setup+0x268>)
  400b14:	685b      	ldr	r3, [r3, #4]
  400b16:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  400b1a:	8841      	ldrh	r1, [r0, #2]
  400b1c:	4b5f      	ldr	r3, [pc, #380]	; (400c9c <udc_process_setup+0x264>)
  400b1e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400b20:	4b5c      	ldr	r3, [pc, #368]	; (400c94 <udc_process_setup+0x25c>)
  400b22:	689b      	ldr	r3, [r3, #8]
  400b24:	2202      	movs	r2, #2
  400b26:	705a      	strb	r2, [r3, #1]
  400b28:	e7e5      	b.n	400af6 <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400b2a:	4b5d      	ldr	r3, [pc, #372]	; (400ca0 <udc_process_setup+0x268>)
  400b2c:	6898      	ldr	r0, [r3, #8]
  400b2e:	2800      	cmp	r0, #0
  400b30:	d090      	beq.n	400a54 <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400b32:	8841      	ldrh	r1, [r0, #2]
  400b34:	4b59      	ldr	r3, [pc, #356]	; (400c9c <udc_process_setup+0x264>)
  400b36:	4798      	blx	r3
  400b38:	e7dd      	b.n	400af6 <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400b3a:	f012 0fff 	tst.w	r2, #255	; 0xff
  400b3e:	d189      	bne.n	400a54 <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400b40:	2104      	movs	r1, #4
  400b42:	4858      	ldr	r0, [pc, #352]	; (400ca4 <udc_process_setup+0x26c>)
  400b44:	4b55      	ldr	r3, [pc, #340]	; (400c9c <udc_process_setup+0x264>)
  400b46:	4798      	blx	r3
  400b48:	e7d5      	b.n	400af6 <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b4a:	2a01      	cmp	r2, #1
  400b4c:	d182      	bne.n	400a54 <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400b4e:	2101      	movs	r1, #1
  400b50:	4855      	ldr	r0, [pc, #340]	; (400ca8 <udc_process_setup+0x270>)
  400b52:	4b52      	ldr	r3, [pc, #328]	; (400c9c <udc_process_setup+0x264>)
  400b54:	4798      	blx	r3
  400b56:	e051      	b.n	400bfc <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400b58:	494e      	ldr	r1, [pc, #312]	; (400c94 <udc_process_setup+0x25c>)
  400b5a:	7849      	ldrb	r1, [r1, #1]
  400b5c:	290a      	cmp	r1, #10
  400b5e:	d19e      	bne.n	400a9e <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b60:	2a01      	cmp	r2, #1
  400b62:	f47f af77 	bne.w	400a54 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400b66:	4b50      	ldr	r3, [pc, #320]	; (400ca8 <udc_process_setup+0x270>)
  400b68:	781b      	ldrb	r3, [r3, #0]
  400b6a:	2b00      	cmp	r3, #0
  400b6c:	f43f af72 	beq.w	400a54 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b70:	4b48      	ldr	r3, [pc, #288]	; (400c94 <udc_process_setup+0x25c>)
  400b72:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b74:	4b4d      	ldr	r3, [pc, #308]	; (400cac <udc_process_setup+0x274>)
  400b76:	681d      	ldr	r5, [r3, #0]
  400b78:	682b      	ldr	r3, [r5, #0]
  400b7a:	791b      	ldrb	r3, [r3, #4]
  400b7c:	42a3      	cmp	r3, r4
  400b7e:	f67f af69 	bls.w	400a54 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b82:	2100      	movs	r1, #0
  400b84:	4620      	mov	r0, r4
  400b86:	4b4a      	ldr	r3, [pc, #296]	; (400cb0 <udc_process_setup+0x278>)
  400b88:	4798      	blx	r3
  400b8a:	2800      	cmp	r0, #0
  400b8c:	f43f af62 	beq.w	400a54 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b90:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400b92:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400b96:	68db      	ldr	r3, [r3, #12]
  400b98:	4798      	blx	r3
  400b9a:	4b46      	ldr	r3, [pc, #280]	; (400cb4 <udc_process_setup+0x27c>)
  400b9c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400b9e:	2101      	movs	r1, #1
  400ba0:	4618      	mov	r0, r3
  400ba2:	4b3e      	ldr	r3, [pc, #248]	; (400c9c <udc_process_setup+0x264>)
  400ba4:	4798      	blx	r3
  400ba6:	e029      	b.n	400bfc <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400ba8:	2a02      	cmp	r2, #2
  400baa:	f47f af53 	bne.w	400a54 <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400bae:	4b39      	ldr	r3, [pc, #228]	; (400c94 <udc_process_setup+0x25c>)
  400bb0:	7918      	ldrb	r0, [r3, #4]
  400bb2:	4b41      	ldr	r3, [pc, #260]	; (400cb8 <udc_process_setup+0x280>)
  400bb4:	4798      	blx	r3
  400bb6:	4b41      	ldr	r3, [pc, #260]	; (400cbc <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400bb8:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400bba:	2102      	movs	r1, #2
  400bbc:	4618      	mov	r0, r3
  400bbe:	4b37      	ldr	r3, [pc, #220]	; (400c9c <udc_process_setup+0x264>)
  400bc0:	4798      	blx	r3
  400bc2:	e01b      	b.n	400bfc <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400bc4:	f013 031f 	ands.w	r3, r3, #31
  400bc8:	f040 8082 	bne.w	400cd0 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  400bcc:	4a31      	ldr	r2, [pc, #196]	; (400c94 <udc_process_setup+0x25c>)
  400bce:	7852      	ldrb	r2, [r2, #1]
  400bd0:	3a01      	subs	r2, #1
  400bd2:	2a08      	cmp	r2, #8
  400bd4:	d87c      	bhi.n	400cd0 <udc_process_setup+0x298>
  400bd6:	e8df f012 	tbh	[pc, r2, lsl #1]
  400bda:	0013      	.short	0x0013
  400bdc:	00ca007b 	.word	0x00ca007b
  400be0:	0009007b 	.word	0x0009007b
  400be4:	007b007b 	.word	0x007b007b
  400be8:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  400bec:	4b29      	ldr	r3, [pc, #164]	; (400c94 <udc_process_setup+0x25c>)
  400bee:	88db      	ldrh	r3, [r3, #6]
  400bf0:	2b00      	cmp	r3, #0
  400bf2:	f47f af2f 	bne.w	400a54 <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  400bf6:	4a32      	ldr	r2, [pc, #200]	; (400cc0 <udc_process_setup+0x288>)
  400bf8:	4b26      	ldr	r3, [pc, #152]	; (400c94 <udc_process_setup+0x25c>)
  400bfa:	611a      	str	r2, [r3, #16]
			return true;
  400bfc:	2301      	movs	r3, #1
  400bfe:	e738      	b.n	400a72 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  400c00:	4b24      	ldr	r3, [pc, #144]	; (400c94 <udc_process_setup+0x25c>)
  400c02:	88db      	ldrh	r3, [r3, #6]
  400c04:	2b00      	cmp	r3, #0
  400c06:	f47f af25 	bne.w	400a54 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400c0a:	4b22      	ldr	r3, [pc, #136]	; (400c94 <udc_process_setup+0x25c>)
  400c0c:	885b      	ldrh	r3, [r3, #2]
  400c0e:	2b01      	cmp	r3, #1
  400c10:	f47f af20 	bne.w	400a54 <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400c14:	4a20      	ldr	r2, [pc, #128]	; (400c98 <udc_process_setup+0x260>)
  400c16:	8813      	ldrh	r3, [r2, #0]
  400c18:	f023 0302 	bic.w	r3, r3, #2
  400c1c:	8013      	strh	r3, [r2, #0]
  400c1e:	e7ed      	b.n	400bfc <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  400c20:	4b1c      	ldr	r3, [pc, #112]	; (400c94 <udc_process_setup+0x25c>)
  400c22:	88db      	ldrh	r3, [r3, #6]
  400c24:	2b00      	cmp	r3, #0
  400c26:	f47f af15 	bne.w	400a54 <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400c2a:	4b26      	ldr	r3, [pc, #152]	; (400cc4 <udc_process_setup+0x28c>)
  400c2c:	4798      	blx	r3
  400c2e:	2800      	cmp	r0, #0
  400c30:	f43f af10 	beq.w	400a54 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c34:	4b17      	ldr	r3, [pc, #92]	; (400c94 <udc_process_setup+0x25c>)
  400c36:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400c38:	4b19      	ldr	r3, [pc, #100]	; (400ca0 <udc_process_setup+0x268>)
  400c3a:	681b      	ldr	r3, [r3, #0]
  400c3c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c3e:	429a      	cmp	r2, r3
  400c40:	f73f af08 	bgt.w	400a54 <udc_process_setup+0x1c>
	udc_reset();
  400c44:	4b20      	ldr	r3, [pc, #128]	; (400cc8 <udc_process_setup+0x290>)
  400c46:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400c48:	4b12      	ldr	r3, [pc, #72]	; (400c94 <udc_process_setup+0x25c>)
  400c4a:	789b      	ldrb	r3, [r3, #2]
  400c4c:	4a16      	ldr	r2, [pc, #88]	; (400ca8 <udc_process_setup+0x270>)
  400c4e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400c50:	2b00      	cmp	r3, #0
  400c52:	d0d3      	beq.n	400bfc <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400c54:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400c58:	3b01      	subs	r3, #1
  400c5a:	4a11      	ldr	r2, [pc, #68]	; (400ca0 <udc_process_setup+0x268>)
  400c5c:	6852      	ldr	r2, [r2, #4]
  400c5e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400c62:	4912      	ldr	r1, [pc, #72]	; (400cac <udc_process_setup+0x274>)
  400c64:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400c6a:	791b      	ldrb	r3, [r3, #4]
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d0c5      	beq.n	400bfc <udc_process_setup+0x1c4>
  400c70:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400c72:	4626      	mov	r6, r4
  400c74:	4d15      	ldr	r5, [pc, #84]	; (400ccc <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c76:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400c78:	4631      	mov	r1, r6
  400c7a:	4620      	mov	r0, r4
  400c7c:	47a8      	blx	r5
  400c7e:	2800      	cmp	r0, #0
  400c80:	f43f aee8 	beq.w	400a54 <udc_process_setup+0x1c>
			iface_num++) {
  400c84:	3401      	adds	r4, #1
  400c86:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c88:	683b      	ldr	r3, [r7, #0]
  400c8a:	681b      	ldr	r3, [r3, #0]
  400c8c:	791b      	ldrb	r3, [r3, #4]
  400c8e:	42a3      	cmp	r3, r4
  400c90:	d8f2      	bhi.n	400c78 <udc_process_setup+0x240>
  400c92:	e7b3      	b.n	400bfc <udc_process_setup+0x1c4>
  400c94:	200017c8 	.word	0x200017c8
  400c98:	20000c96 	.word	0x20000c96
  400c9c:	00402139 	.word	0x00402139
  400ca0:	200000b0 	.word	0x200000b0
  400ca4:	20000124 	.word	0x20000124
  400ca8:	20000ca0 	.word	0x20000ca0
  400cac:	20000ca4 	.word	0x20000ca4
  400cb0:	00400869 	.word	0x00400869
  400cb4:	20000c9c 	.word	0x20000c9c
  400cb8:	00402295 	.word	0x00402295
  400cbc:	20000c98 	.word	0x20000c98
  400cc0:	00400851 	.word	0x00400851
  400cc4:	00402109 	.word	0x00402109
  400cc8:	004009b1 	.word	0x004009b1
  400ccc:	00400949 	.word	0x00400949
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400cd0:	2b01      	cmp	r3, #1
  400cd2:	d00a      	beq.n	400cea <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400cd4:	2b02      	cmp	r3, #2
  400cd6:	f47f aebd 	bne.w	400a54 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400cda:	4b52      	ldr	r3, [pc, #328]	; (400e24 <udc_process_setup+0x3ec>)
  400cdc:	785b      	ldrb	r3, [r3, #1]
  400cde:	2b01      	cmp	r3, #1
  400ce0:	d020      	beq.n	400d24 <udc_process_setup+0x2ec>
  400ce2:	2b03      	cmp	r3, #3
  400ce4:	d02e      	beq.n	400d44 <udc_process_setup+0x30c>
	return false;
  400ce6:	2300      	movs	r3, #0
  400ce8:	e042      	b.n	400d70 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400cea:	4a4e      	ldr	r2, [pc, #312]	; (400e24 <udc_process_setup+0x3ec>)
  400cec:	7852      	ldrb	r2, [r2, #1]
  400cee:	2a0b      	cmp	r2, #11
  400cf0:	d1f0      	bne.n	400cd4 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400cf2:	4b4c      	ldr	r3, [pc, #304]	; (400e24 <udc_process_setup+0x3ec>)
  400cf4:	88db      	ldrh	r3, [r3, #6]
  400cf6:	2b00      	cmp	r3, #0
  400cf8:	f47f aeac 	bne.w	400a54 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400cfc:	4b4a      	ldr	r3, [pc, #296]	; (400e28 <udc_process_setup+0x3f0>)
  400cfe:	781b      	ldrb	r3, [r3, #0]
  400d00:	2b00      	cmp	r3, #0
  400d02:	f43f aea7 	beq.w	400a54 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d06:	4b47      	ldr	r3, [pc, #284]	; (400e24 <udc_process_setup+0x3ec>)
  400d08:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400d0a:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400d0c:	4620      	mov	r0, r4
  400d0e:	4b47      	ldr	r3, [pc, #284]	; (400e2c <udc_process_setup+0x3f4>)
  400d10:	4798      	blx	r3
  400d12:	2800      	cmp	r0, #0
  400d14:	f43f ae9e 	beq.w	400a54 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400d18:	b2e9      	uxtb	r1, r5
  400d1a:	4620      	mov	r0, r4
  400d1c:	4b44      	ldr	r3, [pc, #272]	; (400e30 <udc_process_setup+0x3f8>)
  400d1e:	4798      	blx	r3
  400d20:	4603      	mov	r3, r0
  400d22:	e025      	b.n	400d70 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d24:	4b3f      	ldr	r3, [pc, #252]	; (400e24 <udc_process_setup+0x3ec>)
  400d26:	88db      	ldrh	r3, [r3, #6]
  400d28:	2b00      	cmp	r3, #0
  400d2a:	f47f ae93 	bne.w	400a54 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d2e:	4b3d      	ldr	r3, [pc, #244]	; (400e24 <udc_process_setup+0x3ec>)
  400d30:	885b      	ldrh	r3, [r3, #2]
  400d32:	2b00      	cmp	r3, #0
  400d34:	f47f ae8e 	bne.w	400a54 <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d38:	4b3a      	ldr	r3, [pc, #232]	; (400e24 <udc_process_setup+0x3ec>)
  400d3a:	7918      	ldrb	r0, [r3, #4]
  400d3c:	4b3d      	ldr	r3, [pc, #244]	; (400e34 <udc_process_setup+0x3fc>)
  400d3e:	4798      	blx	r3
  400d40:	4603      	mov	r3, r0
  400d42:	e015      	b.n	400d70 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d44:	4b37      	ldr	r3, [pc, #220]	; (400e24 <udc_process_setup+0x3ec>)
  400d46:	88db      	ldrh	r3, [r3, #6]
  400d48:	2b00      	cmp	r3, #0
  400d4a:	f47f ae83 	bne.w	400a54 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d4e:	4b35      	ldr	r3, [pc, #212]	; (400e24 <udc_process_setup+0x3ec>)
  400d50:	885b      	ldrh	r3, [r3, #2]
  400d52:	2b00      	cmp	r3, #0
  400d54:	f47f ae7e 	bne.w	400a54 <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d58:	4c32      	ldr	r4, [pc, #200]	; (400e24 <udc_process_setup+0x3ec>)
  400d5a:	7920      	ldrb	r0, [r4, #4]
  400d5c:	4b36      	ldr	r3, [pc, #216]	; (400e38 <udc_process_setup+0x400>)
  400d5e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d60:	7920      	ldrb	r0, [r4, #4]
  400d62:	4b36      	ldr	r3, [pc, #216]	; (400e3c <udc_process_setup+0x404>)
  400d64:	4798      	blx	r3
  400d66:	4603      	mov	r3, r0
  400d68:	e002      	b.n	400d70 <udc_process_setup+0x338>
		return false;
  400d6a:	2300      	movs	r3, #0
  400d6c:	e000      	b.n	400d70 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400d6e:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400d70:	2b00      	cmp	r3, #0
  400d72:	f47f ae7e 	bne.w	400a72 <udc_process_setup+0x3a>
  400d76:	e66d      	b.n	400a54 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400d78:	4b2b      	ldr	r3, [pc, #172]	; (400e28 <udc_process_setup+0x3f0>)
  400d7a:	781b      	ldrb	r3, [r3, #0]
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d04e      	beq.n	400e1e <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d80:	4b28      	ldr	r3, [pc, #160]	; (400e24 <udc_process_setup+0x3ec>)
  400d82:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400d84:	4b2e      	ldr	r3, [pc, #184]	; (400e40 <udc_process_setup+0x408>)
  400d86:	681d      	ldr	r5, [r3, #0]
  400d88:	682b      	ldr	r3, [r5, #0]
  400d8a:	791b      	ldrb	r3, [r3, #4]
  400d8c:	42a3      	cmp	r3, r4
  400d8e:	d801      	bhi.n	400d94 <udc_process_setup+0x35c>
	return false;
  400d90:	2300      	movs	r3, #0
  400d92:	e66e      	b.n	400a72 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400d94:	2100      	movs	r1, #0
  400d96:	4620      	mov	r0, r4
  400d98:	4b2a      	ldr	r3, [pc, #168]	; (400e44 <udc_process_setup+0x40c>)
  400d9a:	4798      	blx	r3
  400d9c:	2800      	cmp	r0, #0
  400d9e:	f43f ae60 	beq.w	400a62 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400da2:	686b      	ldr	r3, [r5, #4]
  400da4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400da8:	68eb      	ldr	r3, [r5, #12]
  400daa:	4798      	blx	r3
  400dac:	4601      	mov	r1, r0
  400dae:	4620      	mov	r0, r4
  400db0:	4b24      	ldr	r3, [pc, #144]	; (400e44 <udc_process_setup+0x40c>)
  400db2:	4798      	blx	r3
  400db4:	2800      	cmp	r0, #0
  400db6:	f43f ae54 	beq.w	400a62 <udc_process_setup+0x2a>
	return udi_api->setup();
  400dba:	68ab      	ldr	r3, [r5, #8]
  400dbc:	4798      	blx	r3
		if (udc_req_iface()) {
  400dbe:	4603      	mov	r3, r0
  400dc0:	2800      	cmp	r0, #0
  400dc2:	f47f ae56 	bne.w	400a72 <udc_process_setup+0x3a>
  400dc6:	e64c      	b.n	400a62 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400dc8:	4b17      	ldr	r3, [pc, #92]	; (400e28 <udc_process_setup+0x3f0>)
  400dca:	781b      	ldrb	r3, [r3, #0]
  400dcc:	b30b      	cbz	r3, 400e12 <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400dce:	4b1c      	ldr	r3, [pc, #112]	; (400e40 <udc_process_setup+0x408>)
  400dd0:	681a      	ldr	r2, [r3, #0]
  400dd2:	6813      	ldr	r3, [r2, #0]
  400dd4:	791b      	ldrb	r3, [r3, #4]
  400dd6:	b1f3      	cbz	r3, 400e16 <udc_process_setup+0x3de>
  400dd8:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400dda:	4e1a      	ldr	r6, [pc, #104]	; (400e44 <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ddc:	4f18      	ldr	r7, [pc, #96]	; (400e40 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400dde:	6853      	ldr	r3, [r2, #4]
  400de0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400de4:	68eb      	ldr	r3, [r5, #12]
  400de6:	4798      	blx	r3
  400de8:	4601      	mov	r1, r0
  400dea:	4620      	mov	r0, r4
  400dec:	47b0      	blx	r6
  400dee:	4603      	mov	r3, r0
  400df0:	2800      	cmp	r0, #0
  400df2:	f43f ae3e 	beq.w	400a72 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400df6:	68ab      	ldr	r3, [r5, #8]
  400df8:	4798      	blx	r3
  400dfa:	4603      	mov	r3, r0
  400dfc:	2800      	cmp	r0, #0
  400dfe:	f47f ae38 	bne.w	400a72 <udc_process_setup+0x3a>
			iface_num++) {
  400e02:	3401      	adds	r4, #1
  400e04:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e06:	683a      	ldr	r2, [r7, #0]
  400e08:	6811      	ldr	r1, [r2, #0]
  400e0a:	7909      	ldrb	r1, [r1, #4]
  400e0c:	42a1      	cmp	r1, r4
  400e0e:	d8e6      	bhi.n	400dde <udc_process_setup+0x3a6>
  400e10:	e62f      	b.n	400a72 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400e12:	2300      	movs	r3, #0
  400e14:	e62d      	b.n	400a72 <udc_process_setup+0x3a>
	return false;
  400e16:	2300      	movs	r3, #0
  400e18:	e62b      	b.n	400a72 <udc_process_setup+0x3a>
			return false; // Error from USB host
  400e1a:	2300      	movs	r3, #0
  400e1c:	e629      	b.n	400a72 <udc_process_setup+0x3a>
	return false;
  400e1e:	2300      	movs	r3, #0
  400e20:	e627      	b.n	400a72 <udc_process_setup+0x3a>
  400e22:	bf00      	nop
  400e24:	200017c8 	.word	0x200017c8
  400e28:	20000ca0 	.word	0x20000ca0
  400e2c:	004008dd 	.word	0x004008dd
  400e30:	00400949 	.word	0x00400949
  400e34:	004023b5 	.word	0x004023b5
  400e38:	00402609 	.word	0x00402609
  400e3c:	004022d5 	.word	0x004022d5
  400e40:	20000ca4 	.word	0x20000ca4
  400e44:	00400869 	.word	0x00400869

00400e48 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400e48:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400e4a:	2401      	movs	r4, #1
  400e4c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400e4e:	2400      	movs	r4, #0
  400e50:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400e52:	f240 2502 	movw	r5, #514	; 0x202
  400e56:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400e5a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400e5e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400e62:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400e64:	0052      	lsls	r2, r2, #1
  400e66:	fbb1 f2f2 	udiv	r2, r1, r2
  400e6a:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400e6c:	0212      	lsls	r2, r2, #8
  400e6e:	b292      	uxth	r2, r2
  400e70:	432b      	orrs	r3, r5
  400e72:	431a      	orrs	r2, r3
  400e74:	6042      	str	r2, [r0, #4]
	return 0;
}
  400e76:	4620      	mov	r0, r4
  400e78:	bc30      	pop	{r4, r5}
  400e7a:	4770      	bx	lr

00400e7c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  400e7c:	6843      	ldr	r3, [r0, #4]
  400e7e:	01d2      	lsls	r2, r2, #7
  400e80:	b2d2      	uxtb	r2, r2
  400e82:	4319      	orrs	r1, r3
  400e84:	430a      	orrs	r2, r1
  400e86:	6042      	str	r2, [r0, #4]
  400e88:	4770      	bx	lr

00400e8a <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  400e8a:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400e8c:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  400e8e:	0609      	lsls	r1, r1, #24
  400e90:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400e94:	4321      	orrs	r1, r4
  400e96:	430a      	orrs	r2, r1
  400e98:	0719      	lsls	r1, r3, #28
  400e9a:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
  400e9e:	4311      	orrs	r1, r2
  400ea0:	6041      	str	r1, [r0, #4]
}
  400ea2:	bc10      	pop	{r4}
  400ea4:	4770      	bx	lr

00400ea6 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  400ea6:	2302      	movs	r3, #2
  400ea8:	6003      	str	r3, [r0, #0]
  400eaa:	4770      	bx	lr

00400eac <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400eac:	2301      	movs	r3, #1
  400eae:	fa03 f101 	lsl.w	r1, r3, r1
  400eb2:	6101      	str	r1, [r0, #16]
  400eb4:	4770      	bx	lr

00400eb6 <adc_disable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_disable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHDR = 1 << adc_ch;
  400eb6:	2301      	movs	r3, #1
  400eb8:	fa03 f101 	lsl.w	r1, r3, r1
  400ebc:	6141      	str	r1, [r0, #20]
  400ebe:	4770      	bx	lr

00400ec0 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  400ec0:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  400ec2:	bf9a      	itte	ls
  400ec4:	3050      	addls	r0, #80	; 0x50
  400ec6:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
	uint32_t ul_data = 0;
  400eca:	2000      	movhi	r0, #0
	}

	return ul_data;
}
  400ecc:	4770      	bx	lr

00400ece <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400ece:	6241      	str	r1, [r0, #36]	; 0x24
  400ed0:	4770      	bx	lr
	...

00400ed4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  400ed4:	b508      	push	{r3, lr}
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  400ed6:	0212      	lsls	r2, r2, #8
  400ed8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  400edc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400ee0:	4311      	orrs	r1, r2
  400ee2:	4b02      	ldr	r3, [pc, #8]	; (400eec <efc_init+0x18>)
  400ee4:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
}
  400ee6:	2000      	movs	r0, #0
  400ee8:	bd08      	pop	{r3, pc}
  400eea:	bf00      	nop
  400eec:	20000069 	.word	0x20000069

00400ef0 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  400ef0:	f1a1 030e 	sub.w	r3, r1, #14
  400ef4:	2b01      	cmp	r3, #1
  400ef6:	d802      	bhi.n	400efe <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
  400ef8:	f04f 30ff 	mov.w	r0, #4294967295
  400efc:	4770      	bx	lr
{
  400efe:	b510      	push	{r4, lr}
  400f00:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400f02:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400f06:	fab3 f383 	clz	r3, r3
  400f0a:	095b      	lsrs	r3, r3, #5
  400f0c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400f0e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400f10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f14:	2400      	movs	r4, #0
  400f16:	4b0b      	ldr	r3, [pc, #44]	; (400f44 <efc_perform_command+0x54>)
  400f18:	701c      	strb	r4, [r3, #0]
	return flags;
  400f1a:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  400f1c:	0212      	lsls	r2, r2, #8
  400f1e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  400f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
  400f26:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
  400f2a:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
  400f2c:	4311      	orrs	r1, r2
  400f2e:	4b06      	ldr	r3, [pc, #24]	; (400f48 <efc_perform_command+0x58>)
  400f30:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  400f32:	b12c      	cbz	r4, 400f40 <efc_perform_command+0x50>
		cpu_irq_enable();
  400f34:	2201      	movs	r2, #1
  400f36:	4b03      	ldr	r3, [pc, #12]	; (400f44 <efc_perform_command+0x54>)
  400f38:	701a      	strb	r2, [r3, #0]
  400f3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f3e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
  400f40:	b002      	add	sp, #8
  400f42:	bd10      	pop	{r4, pc}
  400f44:	20000128 	.word	0x20000128
  400f48:	2000006d 	.word	0x2000006d

00400f4c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f50:	4681      	mov	r9, r0
  400f52:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f54:	4b12      	ldr	r3, [pc, #72]	; (400fa0 <pio_handler_process+0x54>)
  400f56:	4798      	blx	r3
  400f58:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f5a:	4648      	mov	r0, r9
  400f5c:	4b11      	ldr	r3, [pc, #68]	; (400fa4 <pio_handler_process+0x58>)
  400f5e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f60:	4005      	ands	r5, r0
  400f62:	d013      	beq.n	400f8c <pio_handler_process+0x40>
  400f64:	4c10      	ldr	r4, [pc, #64]	; (400fa8 <pio_handler_process+0x5c>)
  400f66:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400f6a:	e003      	b.n	400f74 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f6c:	42b4      	cmp	r4, r6
  400f6e:	d00d      	beq.n	400f8c <pio_handler_process+0x40>
  400f70:	3410      	adds	r4, #16
		while (status != 0) {
  400f72:	b15d      	cbz	r5, 400f8c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400f74:	6820      	ldr	r0, [r4, #0]
  400f76:	42b8      	cmp	r0, r7
  400f78:	d1f8      	bne.n	400f6c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f7a:	6861      	ldr	r1, [r4, #4]
  400f7c:	4229      	tst	r1, r5
  400f7e:	d0f5      	beq.n	400f6c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f80:	68e3      	ldr	r3, [r4, #12]
  400f82:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f84:	6863      	ldr	r3, [r4, #4]
  400f86:	ea25 0503 	bic.w	r5, r5, r3
  400f8a:	e7ef      	b.n	400f6c <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400f8c:	4b07      	ldr	r3, [pc, #28]	; (400fac <pio_handler_process+0x60>)
  400f8e:	681b      	ldr	r3, [r3, #0]
  400f90:	b123      	cbz	r3, 400f9c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400f92:	4b07      	ldr	r3, [pc, #28]	; (400fb0 <pio_handler_process+0x64>)
  400f94:	681b      	ldr	r3, [r3, #0]
  400f96:	b10b      	cbz	r3, 400f9c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400f98:	4648      	mov	r0, r9
  400f9a:	4798      	blx	r3
  400f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400fa0:	0040324d 	.word	0x0040324d
  400fa4:	00403251 	.word	0x00403251
  400fa8:	20000cac 	.word	0x20000cac
  400fac:	200023f8 	.word	0x200023f8
  400fb0:	20000d1c 	.word	0x20000d1c

00400fb4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400fb4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400fb6:	210c      	movs	r1, #12
  400fb8:	4801      	ldr	r0, [pc, #4]	; (400fc0 <PIOB_Handler+0xc>)
  400fba:	4b02      	ldr	r3, [pc, #8]	; (400fc4 <PIOB_Handler+0x10>)
  400fbc:	4798      	blx	r3
  400fbe:	bd08      	pop	{r3, pc}
  400fc0:	400e1000 	.word	0x400e1000
  400fc4:	00400f4d 	.word	0x00400f4d

00400fc8 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400fc8:	4b03      	ldr	r3, [pc, #12]	; (400fd8 <rtt_init+0x10>)
  400fca:	681b      	ldr	r3, [r3, #0]
  400fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400fd0:	4319      	orrs	r1, r3
  400fd2:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400fd4:	2000      	movs	r0, #0
  400fd6:	4770      	bx	lr
  400fd8:	20000d20 	.word	0x20000d20

00400fdc <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400fdc:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400fde:	4b03      	ldr	r3, [pc, #12]	; (400fec <rtt_enable_interrupt+0x10>)
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	4319      	orrs	r1, r3
  400fe4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400fe6:	6001      	str	r1, [r0, #0]
  400fe8:	4770      	bx	lr
  400fea:	bf00      	nop
  400fec:	20000d20 	.word	0x20000d20

00400ff0 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400ff0:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400ff2:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400ff6:	4b02      	ldr	r3, [pc, #8]	; (401000 <rtt_disable_interrupt+0x10>)
  400ff8:	681b      	ldr	r3, [r3, #0]
  400ffa:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400ffc:	6001      	str	r1, [r0, #0]
  400ffe:	4770      	bx	lr
  401000:	20000d20 	.word	0x20000d20

00401004 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  401004:	68c0      	ldr	r0, [r0, #12]
}
  401006:	4770      	bx	lr

00401008 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  401008:	b570      	push	{r4, r5, r6, lr}
  40100a:	4606      	mov	r6, r0
  40100c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40100e:	6804      	ldr	r4, [r0, #0]
  401010:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  401014:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401018:	4809      	ldr	r0, [pc, #36]	; (401040 <rtt_write_alarm_time+0x38>)
  40101a:	4b0a      	ldr	r3, [pc, #40]	; (401044 <rtt_write_alarm_time+0x3c>)
  40101c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40101e:	b92d      	cbnz	r5, 40102c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  401020:	f04f 33ff 	mov.w	r3, #4294967295
  401024:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  401026:	b924      	cbnz	r4, 401032 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  401028:	2000      	movs	r0, #0
  40102a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40102c:	3d01      	subs	r5, #1
  40102e:	6075      	str	r5, [r6, #4]
  401030:	e7f9      	b.n	401026 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401032:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401036:	4802      	ldr	r0, [pc, #8]	; (401040 <rtt_write_alarm_time+0x38>)
  401038:	4b03      	ldr	r3, [pc, #12]	; (401048 <rtt_write_alarm_time+0x40>)
  40103a:	4798      	blx	r3
  40103c:	e7f4      	b.n	401028 <rtt_write_alarm_time+0x20>
  40103e:	bf00      	nop
  401040:	400e1430 	.word	0x400e1430
  401044:	00400ff1 	.word	0x00400ff1
  401048:	00400fdd 	.word	0x00400fdd

0040104c <supc_enable_backup_mode>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_enable_backup_mode(Supc *p_supc)
{
	p_supc->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF;
  40104c:	4b03      	ldr	r3, [pc, #12]	; (40105c <supc_enable_backup_mode+0x10>)
  40104e:	6003      	str	r3, [r0, #0]
	uint32_t ul_dummy = p_supc->SUPC_MR;
  401050:	6883      	ldr	r3, [r0, #8]
  __ASM volatile ("dsb 0xF":::"memory");
  401052:	f3bf 8f4f 	dsb	sy
	__DSB();
	__WFE();
  401056:	bf20      	wfe
	__WFI();
  401058:	bf30      	wfi
  40105a:	4770      	bx	lr
  40105c:	a5000004 	.word	0xa5000004

00401060 <supc_set_wakeup_mode>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_mode Bitmask of wake up mode (please refer to datasheet for more details).
 */
void supc_set_wakeup_mode(Supc *p_supc, uint32_t ul_mode)
{
	p_supc->SUPC_WUMR = ul_mode;
  401060:	60c1      	str	r1, [r0, #12]
  401062:	4770      	bx	lr

00401064 <supc_set_wakeup_inputs>:
 * 0 means a low-to-high level transition forces the wake up of core power supply.
 */
void supc_set_wakeup_inputs(Supc *p_supc, uint32_t ul_inputs,
		uint32_t ul_transition)
{
	p_supc->SUPC_WUIR = ul_inputs | ul_transition;
  401064:	430a      	orrs	r2, r1
  401066:	6102      	str	r2, [r0, #16]
  401068:	4770      	bx	lr

0040106a <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40106a:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40106c:	0189      	lsls	r1, r1, #6
  40106e:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401070:	2402      	movs	r4, #2
  401072:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401074:	f04f 31ff 	mov.w	r1, #4294967295
  401078:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  40107a:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40107c:	605a      	str	r2, [r3, #4]
}
  40107e:	bc10      	pop	{r4}
  401080:	4770      	bx	lr

00401082 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401082:	0189      	lsls	r1, r1, #6
  401084:	2305      	movs	r3, #5
  401086:	5043      	str	r3, [r0, r1]
  401088:	4770      	bx	lr

0040108a <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  40108a:	0189      	lsls	r1, r1, #6
  40108c:	2302      	movs	r3, #2
  40108e:	5043      	str	r3, [r0, r1]
  401090:	4770      	bx	lr

00401092 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401092:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401096:	61ca      	str	r2, [r1, #28]
  401098:	4770      	bx	lr

0040109a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40109a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40109e:	624a      	str	r2, [r1, #36]	; 0x24
  4010a0:	4770      	bx	lr

004010a2 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4010a2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4010a6:	6a08      	ldr	r0, [r1, #32]
}
  4010a8:	4770      	bx	lr
	...

004010ac <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  4010ac:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  4010ae:	4601      	mov	r1, r0
  4010b0:	bb28      	cbnz	r0, 4010fe <udd_sleep_mode+0x52>
  4010b2:	4b24      	ldr	r3, [pc, #144]	; (401144 <udd_sleep_mode+0x98>)
  4010b4:	781b      	ldrb	r3, [r3, #0]
  4010b6:	b91b      	cbnz	r3, 4010c0 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4010b8:	4b22      	ldr	r3, [pc, #136]	; (401144 <udd_sleep_mode+0x98>)
  4010ba:	7019      	strb	r1, [r3, #0]
}
  4010bc:	b002      	add	sp, #8
  4010be:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4010c0:	4b21      	ldr	r3, [pc, #132]	; (401148 <udd_sleep_mode+0x9c>)
  4010c2:	789b      	ldrb	r3, [r3, #2]
  4010c4:	b903      	cbnz	r3, 4010c8 <udd_sleep_mode+0x1c>
  4010c6:	e7fe      	b.n	4010c6 <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4010c8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4010cc:	fab3 f383 	clz	r3, r3
  4010d0:	095b      	lsrs	r3, r3, #5
  4010d2:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4010d4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4010d6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010da:	2200      	movs	r2, #0
  4010dc:	4b1b      	ldr	r3, [pc, #108]	; (40114c <udd_sleep_mode+0xa0>)
  4010de:	701a      	strb	r2, [r3, #0]
	return flags;
  4010e0:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4010e2:	4a19      	ldr	r2, [pc, #100]	; (401148 <udd_sleep_mode+0x9c>)
  4010e4:	7893      	ldrb	r3, [r2, #2]
  4010e6:	3b01      	subs	r3, #1
  4010e8:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4010ea:	2800      	cmp	r0, #0
  4010ec:	d0e4      	beq.n	4010b8 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  4010ee:	2201      	movs	r2, #1
  4010f0:	4b16      	ldr	r3, [pc, #88]	; (40114c <udd_sleep_mode+0xa0>)
  4010f2:	701a      	strb	r2, [r3, #0]
  4010f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010f8:	b662      	cpsie	i
  4010fa:	e7dd      	b.n	4010b8 <udd_sleep_mode+0xc>
  4010fc:	e7fe      	b.n	4010fc <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  4010fe:	4b11      	ldr	r3, [pc, #68]	; (401144 <udd_sleep_mode+0x98>)
  401100:	781b      	ldrb	r3, [r3, #0]
  401102:	2b00      	cmp	r3, #0
  401104:	d1d8      	bne.n	4010b8 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  401106:	4b10      	ldr	r3, [pc, #64]	; (401148 <udd_sleep_mode+0x9c>)
  401108:	789b      	ldrb	r3, [r3, #2]
  40110a:	2bff      	cmp	r3, #255	; 0xff
  40110c:	d0f6      	beq.n	4010fc <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40110e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401112:	fab3 f383 	clz	r3, r3
  401116:	095b      	lsrs	r3, r3, #5
  401118:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40111a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40111c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401120:	2200      	movs	r2, #0
  401122:	4b0a      	ldr	r3, [pc, #40]	; (40114c <udd_sleep_mode+0xa0>)
  401124:	701a      	strb	r2, [r3, #0]
	return flags;
  401126:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  401128:	4a07      	ldr	r2, [pc, #28]	; (401148 <udd_sleep_mode+0x9c>)
  40112a:	7893      	ldrb	r3, [r2, #2]
  40112c:	3301      	adds	r3, #1
  40112e:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401130:	2800      	cmp	r0, #0
  401132:	d0c1      	beq.n	4010b8 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401134:	2201      	movs	r2, #1
  401136:	4b05      	ldr	r3, [pc, #20]	; (40114c <udd_sleep_mode+0xa0>)
  401138:	701a      	strb	r2, [r3, #0]
  40113a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40113e:	b662      	cpsie	i
  401140:	e7ba      	b.n	4010b8 <udd_sleep_mode+0xc>
  401142:	bf00      	nop
  401144:	20000d25 	.word	0x20000d25
  401148:	200017c0 	.word	0x200017c0
  40114c:	20000128 	.word	0x20000128

00401150 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401150:	4a03      	ldr	r2, [pc, #12]	; (401160 <udd_ctrl_init+0x10>)
  401152:	2300      	movs	r3, #0
  401154:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401156:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  401158:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40115a:	4a02      	ldr	r2, [pc, #8]	; (401164 <udd_ctrl_init+0x14>)
  40115c:	7013      	strb	r3, [r2, #0]
  40115e:	4770      	bx	lr
  401160:	200017c8 	.word	0x200017c8
  401164:	20000d2a 	.word	0x20000d2a

00401168 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401168:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40116a:	2205      	movs	r2, #5
  40116c:	4b0a      	ldr	r3, [pc, #40]	; (401198 <udd_ctrl_stall_data+0x30>)
  40116e:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401170:	4a0a      	ldr	r2, [pc, #40]	; (40119c <udd_ctrl_stall_data+0x34>)
  401172:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401174:	9301      	str	r3, [sp, #4]
  401176:	9b01      	ldr	r3, [sp, #4]
  401178:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40117c:	9301      	str	r3, [sp, #4]
  40117e:	9b01      	ldr	r3, [sp, #4]
  401180:	f043 0320 	orr.w	r3, r3, #32
  401184:	9301      	str	r3, [sp, #4]
  401186:	9b01      	ldr	r3, [sp, #4]
  401188:	6313      	str	r3, [r2, #48]	; 0x30
  40118a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40118c:	f013 0f20 	tst.w	r3, #32
  401190:	d0fb      	beq.n	40118a <udd_ctrl_stall_data+0x22>
}
  401192:	b002      	add	sp, #8
  401194:	4770      	bx	lr
  401196:	bf00      	nop
  401198:	20000d2a 	.word	0x20000d2a
  40119c:	40034000 	.word	0x40034000

004011a0 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  4011a0:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4011a2:	2203      	movs	r2, #3
  4011a4:	4b0a      	ldr	r3, [pc, #40]	; (4011d0 <udd_ctrl_send_zlp_in+0x30>)
  4011a6:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  4011a8:	4a0a      	ldr	r2, [pc, #40]	; (4011d4 <udd_ctrl_send_zlp_in+0x34>)
  4011aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011ac:	9301      	str	r3, [sp, #4]
  4011ae:	9b01      	ldr	r3, [sp, #4]
  4011b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011b4:	9301      	str	r3, [sp, #4]
  4011b6:	9b01      	ldr	r3, [sp, #4]
  4011b8:	f043 0310 	orr.w	r3, r3, #16
  4011bc:	9301      	str	r3, [sp, #4]
  4011be:	9b01      	ldr	r3, [sp, #4]
  4011c0:	6313      	str	r3, [r2, #48]	; 0x30
  4011c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011c4:	f013 0f10 	tst.w	r3, #16
  4011c8:	d0fb      	beq.n	4011c2 <udd_ctrl_send_zlp_in+0x22>
}
  4011ca:	b002      	add	sp, #8
  4011cc:	4770      	bx	lr
  4011ce:	bf00      	nop
  4011d0:	20000d2a 	.word	0x20000d2a
  4011d4:	40034000 	.word	0x40034000

004011d8 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  4011d8:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  4011da:	4b02      	ldr	r3, [pc, #8]	; (4011e4 <udd_ctrl_endofrequest+0xc>)
  4011dc:	691b      	ldr	r3, [r3, #16]
  4011de:	b103      	cbz	r3, 4011e2 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  4011e0:	4798      	blx	r3
  4011e2:	bd08      	pop	{r3, pc}
  4011e4:	200017c8 	.word	0x200017c8

004011e8 <udd_ctrl_in_sent>:
{
  4011e8:	b530      	push	{r4, r5, lr}
  4011ea:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  4011ec:	4b63      	ldr	r3, [pc, #396]	; (40137c <udd_ctrl_in_sent+0x194>)
  4011ee:	781b      	ldrb	r3, [r3, #0]
  4011f0:	2b03      	cmp	r3, #3
  4011f2:	d029      	beq.n	401248 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4011f4:	4b62      	ldr	r3, [pc, #392]	; (401380 <udd_ctrl_in_sent+0x198>)
  4011f6:	881b      	ldrh	r3, [r3, #0]
  4011f8:	4a62      	ldr	r2, [pc, #392]	; (401384 <udd_ctrl_in_sent+0x19c>)
  4011fa:	8994      	ldrh	r4, [r2, #12]
  4011fc:	1ae4      	subs	r4, r4, r3
  4011fe:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401200:	2c00      	cmp	r4, #0
  401202:	d144      	bne.n	40128e <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401204:	4a60      	ldr	r2, [pc, #384]	; (401388 <udd_ctrl_in_sent+0x1a0>)
  401206:	8811      	ldrh	r1, [r2, #0]
  401208:	440b      	add	r3, r1
  40120a:	b29b      	uxth	r3, r3
  40120c:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  40120e:	4a5d      	ldr	r2, [pc, #372]	; (401384 <udd_ctrl_in_sent+0x19c>)
  401210:	88d2      	ldrh	r2, [r2, #6]
  401212:	429a      	cmp	r2, r3
  401214:	d003      	beq.n	40121e <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  401216:	4b5d      	ldr	r3, [pc, #372]	; (40138c <udd_ctrl_in_sent+0x1a4>)
  401218:	781b      	ldrb	r3, [r3, #0]
  40121a:	2b00      	cmp	r3, #0
  40121c:	d02b      	beq.n	401276 <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40121e:	2204      	movs	r2, #4
  401220:	4b56      	ldr	r3, [pc, #344]	; (40137c <udd_ctrl_in_sent+0x194>)
  401222:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  401224:	4a5a      	ldr	r2, [pc, #360]	; (401390 <udd_ctrl_in_sent+0x1a8>)
  401226:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401228:	9301      	str	r3, [sp, #4]
  40122a:	9b01      	ldr	r3, [sp, #4]
  40122c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401230:	9301      	str	r3, [sp, #4]
  401232:	9b01      	ldr	r3, [sp, #4]
  401234:	f023 0301 	bic.w	r3, r3, #1
  401238:	9301      	str	r3, [sp, #4]
  40123a:	9b01      	ldr	r3, [sp, #4]
  40123c:	6313      	str	r3, [r2, #48]	; 0x30
  40123e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401240:	f013 0f01 	tst.w	r3, #1
  401244:	d1fb      	bne.n	40123e <udd_ctrl_in_sent+0x56>
  401246:	e014      	b.n	401272 <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  401248:	4a51      	ldr	r2, [pc, #324]	; (401390 <udd_ctrl_in_sent+0x1a8>)
  40124a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40124c:	9300      	str	r3, [sp, #0]
  40124e:	9b00      	ldr	r3, [sp, #0]
  401250:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401254:	9300      	str	r3, [sp, #0]
  401256:	9b00      	ldr	r3, [sp, #0]
  401258:	f023 0301 	bic.w	r3, r3, #1
  40125c:	9300      	str	r3, [sp, #0]
  40125e:	9b00      	ldr	r3, [sp, #0]
  401260:	6313      	str	r3, [r2, #48]	; 0x30
  401262:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401264:	f013 0f01 	tst.w	r3, #1
  401268:	d1fb      	bne.n	401262 <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  40126a:	4b4a      	ldr	r3, [pc, #296]	; (401394 <udd_ctrl_in_sent+0x1ac>)
  40126c:	4798      	blx	r3
		udd_ctrl_init();
  40126e:	4b4a      	ldr	r3, [pc, #296]	; (401398 <udd_ctrl_in_sent+0x1b0>)
  401270:	4798      	blx	r3
}
  401272:	b007      	add	sp, #28
  401274:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  401276:	4b43      	ldr	r3, [pc, #268]	; (401384 <udd_ctrl_in_sent+0x19c>)
  401278:	695b      	ldr	r3, [r3, #20]
  40127a:	2b00      	cmp	r3, #0
  40127c:	d05d      	beq.n	40133a <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40127e:	4798      	blx	r3
  401280:	2800      	cmp	r0, #0
  401282:	d05a      	beq.n	40133a <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  401284:	2200      	movs	r2, #0
  401286:	4b3e      	ldr	r3, [pc, #248]	; (401380 <udd_ctrl_in_sent+0x198>)
  401288:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  40128a:	4b3e      	ldr	r3, [pc, #248]	; (401384 <udd_ctrl_in_sent+0x19c>)
  40128c:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  40128e:	2c3f      	cmp	r4, #63	; 0x3f
  401290:	d953      	bls.n	40133a <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  401292:	2200      	movs	r2, #0
  401294:	4b3d      	ldr	r3, [pc, #244]	; (40138c <udd_ctrl_in_sent+0x1a4>)
  401296:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401298:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40129a:	4b3a      	ldr	r3, [pc, #232]	; (401384 <udd_ctrl_in_sent+0x19c>)
  40129c:	6899      	ldr	r1, [r3, #8]
  40129e:	4b38      	ldr	r3, [pc, #224]	; (401380 <udd_ctrl_in_sent+0x198>)
  4012a0:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4012a2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4012a6:	fab3 f383 	clz	r3, r3
  4012aa:	095b      	lsrs	r3, r3, #5
  4012ac:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  4012ae:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4012b0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4012b4:	2200      	movs	r2, #0
  4012b6:	4b39      	ldr	r3, [pc, #228]	; (40139c <udd_ctrl_in_sent+0x1b4>)
  4012b8:	701a      	strb	r2, [r3, #0]
	return flags;
  4012ba:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  4012bc:	4b34      	ldr	r3, [pc, #208]	; (401390 <udd_ctrl_in_sent+0x1a8>)
  4012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012c0:	f013 0f02 	tst.w	r3, #2
  4012c4:	d13d      	bne.n	401342 <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  4012c6:	b14c      	cbz	r4, 4012dc <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4012c8:	4401      	add	r1, r0
  4012ca:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  4012cc:	4830      	ldr	r0, [pc, #192]	; (401390 <udd_ctrl_in_sent+0x1a8>)
  4012ce:	f812 3b01 	ldrb.w	r3, [r2], #1
  4012d2:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  4012d4:	1a53      	subs	r3, r2, r1
  4012d6:	b2db      	uxtb	r3, r3
  4012d8:	42a3      	cmp	r3, r4
  4012da:	d3f8      	bcc.n	4012ce <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  4012dc:	4b28      	ldr	r3, [pc, #160]	; (401380 <udd_ctrl_in_sent+0x198>)
  4012de:	881a      	ldrh	r2, [r3, #0]
  4012e0:	4414      	add	r4, r2
  4012e2:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  4012e4:	4a2a      	ldr	r2, [pc, #168]	; (401390 <udd_ctrl_in_sent+0x1a8>)
  4012e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012e8:	9303      	str	r3, [sp, #12]
  4012ea:	9b03      	ldr	r3, [sp, #12]
  4012ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4012f0:	9303      	str	r3, [sp, #12]
  4012f2:	9b03      	ldr	r3, [sp, #12]
  4012f4:	f043 0310 	orr.w	r3, r3, #16
  4012f8:	9303      	str	r3, [sp, #12]
  4012fa:	9b03      	ldr	r3, [sp, #12]
  4012fc:	6313      	str	r3, [r2, #48]	; 0x30
  4012fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401300:	f013 0f10 	tst.w	r3, #16
  401304:	d0fb      	beq.n	4012fe <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  401306:	4a22      	ldr	r2, [pc, #136]	; (401390 <udd_ctrl_in_sent+0x1a8>)
  401308:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40130a:	9304      	str	r3, [sp, #16]
  40130c:	9b04      	ldr	r3, [sp, #16]
  40130e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401312:	9304      	str	r3, [sp, #16]
  401314:	9b04      	ldr	r3, [sp, #16]
  401316:	f023 0301 	bic.w	r3, r3, #1
  40131a:	9304      	str	r3, [sp, #16]
  40131c:	9b04      	ldr	r3, [sp, #16]
  40131e:	6313      	str	r3, [r2, #48]	; 0x30
  401320:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401322:	f013 0f01 	tst.w	r3, #1
  401326:	d1fb      	bne.n	401320 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  401328:	2d00      	cmp	r5, #0
  40132a:	d0a2      	beq.n	401272 <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  40132c:	2201      	movs	r2, #1
  40132e:	4b1b      	ldr	r3, [pc, #108]	; (40139c <udd_ctrl_in_sent+0x1b4>)
  401330:	701a      	strb	r2, [r3, #0]
  401332:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401336:	b662      	cpsie	i
  401338:	e79b      	b.n	401272 <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  40133a:	2201      	movs	r2, #1
  40133c:	4b13      	ldr	r3, [pc, #76]	; (40138c <udd_ctrl_in_sent+0x1a4>)
  40133e:	701a      	strb	r2, [r3, #0]
  401340:	e7ab      	b.n	40129a <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  401342:	b12d      	cbz	r5, 401350 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  401344:	2201      	movs	r2, #1
  401346:	4b15      	ldr	r3, [pc, #84]	; (40139c <udd_ctrl_in_sent+0x1b4>)
  401348:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40134a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40134e:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401350:	2204      	movs	r2, #4
  401352:	4b0a      	ldr	r3, [pc, #40]	; (40137c <udd_ctrl_in_sent+0x194>)
  401354:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401356:	4a0e      	ldr	r2, [pc, #56]	; (401390 <udd_ctrl_in_sent+0x1a8>)
  401358:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40135a:	9302      	str	r3, [sp, #8]
  40135c:	9b02      	ldr	r3, [sp, #8]
  40135e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401362:	9302      	str	r3, [sp, #8]
  401364:	9b02      	ldr	r3, [sp, #8]
  401366:	f023 0301 	bic.w	r3, r3, #1
  40136a:	9302      	str	r3, [sp, #8]
  40136c:	9b02      	ldr	r3, [sp, #8]
  40136e:	6313      	str	r3, [r2, #48]	; 0x30
  401370:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401372:	f013 0f01 	tst.w	r3, #1
  401376:	d1fb      	bne.n	401370 <udd_ctrl_in_sent+0x188>
  401378:	e77b      	b.n	401272 <udd_ctrl_in_sent+0x8a>
  40137a:	bf00      	nop
  40137c:	20000d2a 	.word	0x20000d2a
  401380:	20000d26 	.word	0x20000d26
  401384:	200017c8 	.word	0x200017c8
  401388:	20000d28 	.word	0x20000d28
  40138c:	20000d24 	.word	0x20000d24
  401390:	40034000 	.word	0x40034000
  401394:	004011d9 	.word	0x004011d9
  401398:	00401151 	.word	0x00401151
  40139c:	20000128 	.word	0x20000128

004013a0 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  4013a0:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  4013a2:	7c43      	ldrb	r3, [r0, #17]
  4013a4:	f013 0f10 	tst.w	r3, #16
  4013a8:	d016      	beq.n	4013d8 <udd_ep_finish_job+0x38>
  4013aa:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  4013ac:	7c43      	ldrb	r3, [r0, #17]
  4013ae:	f36f 1304 	bfc	r3, #4, #1
  4013b2:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  4013b4:	6804      	ldr	r4, [r0, #0]
  4013b6:	b17c      	cbz	r4, 4013d8 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4013b8:	f102 030c 	add.w	r3, r2, #12
  4013bc:	4907      	ldr	r1, [pc, #28]	; (4013dc <udd_ep_finish_job+0x3c>)
  4013be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4013c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  4013c6:	bf18      	it	ne
  4013c8:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4013cc:	6881      	ldr	r1, [r0, #8]
  4013ce:	2d01      	cmp	r5, #1
  4013d0:	bf14      	ite	ne
  4013d2:	2000      	movne	r0, #0
  4013d4:	2001      	moveq	r0, #1
  4013d6:	47a0      	blx	r4
  4013d8:	bd38      	pop	{r3, r4, r5, pc}
  4013da:	bf00      	nop
  4013dc:	40034000 	.word	0x40034000

004013e0 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  4013e0:	b430      	push	{r4, r5}
  4013e2:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4013e4:	1e41      	subs	r1, r0, #1
  4013e6:	0083      	lsls	r3, r0, #2
  4013e8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4013ec:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  4013f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  4013f2:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  4013f4:	f012 0f02 	tst.w	r2, #2
  4013f8:	d032      	beq.n	401460 <udd_ep_ack_out_received+0x80>
  4013fa:	f014 0f40 	tst.w	r4, #64	; 0x40
  4013fe:	d108      	bne.n	401412 <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401400:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401404:	4c2a      	ldr	r4, [pc, #168]	; (4014b0 <udd_ep_ack_out_received+0xd0>)
  401406:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40140a:	7c54      	ldrb	r4, [r2, #17]
  40140c:	f36f 0483 	bfc	r4, #2, #2
  401410:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  401412:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401416:	4c26      	ldr	r4, [pc, #152]	; (4014b0 <udd_ep_ack_out_received+0xd0>)
  401418:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40141c:	7c52      	ldrb	r2, [r2, #17]
  40141e:	f012 0f0c 	tst.w	r2, #12
  401422:	d128      	bne.n	401476 <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  401424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401426:	9200      	str	r2, [sp, #0]
  401428:	9a00      	ldr	r2, [sp, #0]
  40142a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40142e:	9200      	str	r2, [sp, #0]
  401430:	9a00      	ldr	r2, [sp, #0]
  401432:	f022 0202 	bic.w	r2, r2, #2
  401436:	9200      	str	r2, [sp, #0]
  401438:	9a00      	ldr	r2, [sp, #0]
  40143a:	631a      	str	r2, [r3, #48]	; 0x30
  40143c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40143e:	f012 0f02 	tst.w	r2, #2
  401442:	d1fb      	bne.n	40143c <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401444:	b380      	cbz	r0, 4014a8 <udd_ep_ack_out_received+0xc8>
  401446:	2803      	cmp	r0, #3
  401448:	d02e      	beq.n	4014a8 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  40144a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40144e:	4b18      	ldr	r3, [pc, #96]	; (4014b0 <udd_ep_ack_out_received+0xd0>)
  401450:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  401454:	7c5a      	ldrb	r2, [r3, #17]
  401456:	2101      	movs	r1, #1
  401458:	f361 0283 	bfi	r2, r1, #2, #2
  40145c:	745a      	strb	r2, [r3, #17]
  40145e:	e023      	b.n	4014a8 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401460:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401464:	4c12      	ldr	r4, [pc, #72]	; (4014b0 <udd_ep_ack_out_received+0xd0>)
  401466:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40146a:	7c54      	ldrb	r4, [r2, #17]
  40146c:	2501      	movs	r5, #1
  40146e:	f365 0483 	bfi	r4, r5, #2, #2
  401472:	7454      	strb	r4, [r2, #17]
  401474:	e7cd      	b.n	401412 <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  401476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401478:	9201      	str	r2, [sp, #4]
  40147a:	9a01      	ldr	r2, [sp, #4]
  40147c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401480:	9201      	str	r2, [sp, #4]
  401482:	9a01      	ldr	r2, [sp, #4]
  401484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  401488:	9201      	str	r2, [sp, #4]
  40148a:	9a01      	ldr	r2, [sp, #4]
  40148c:	631a      	str	r2, [r3, #48]	; 0x30
  40148e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401490:	f012 0f40 	tst.w	r2, #64	; 0x40
  401494:	d1fb      	bne.n	40148e <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  401496:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40149a:	4b05      	ldr	r3, [pc, #20]	; (4014b0 <udd_ep_ack_out_received+0xd0>)
  40149c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4014a0:	7c4b      	ldrb	r3, [r1, #17]
  4014a2:	f36f 0383 	bfc	r3, #2, #2
  4014a6:	744b      	strb	r3, [r1, #17]
	}
}
  4014a8:	b002      	add	sp, #8
  4014aa:	bc30      	pop	{r4, r5}
  4014ac:	4770      	bx	lr
  4014ae:	bf00      	nop
  4014b0:	20000d2c 	.word	0x20000d2c

004014b4 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4014b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4014b8:	b083      	sub	sp, #12
  4014ba:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4014bc:	4681      	mov	r9, r0
  4014be:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4014c0:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  4014c4:	4b66      	ldr	r3, [pc, #408]	; (401660 <udd_ep_in_sent+0x1ac>)
  4014c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4014ca:	f893 c011 	ldrb.w	ip, [r3, #17]
  4014ce:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  4014d2:	2800      	cmp	r0, #0
  4014d4:	f000 80b7 	beq.w	401646 <udd_ep_in_sent+0x192>
  4014d8:	2803      	cmp	r0, #3
  4014da:	bf0c      	ite	eq
  4014dc:	2301      	moveq	r3, #1
  4014de:	2302      	movne	r3, #2
  4014e0:	4563      	cmp	r3, ip
  4014e2:	f340 80b2 	ble.w	40164a <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4014e6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4014ea:	4a5d      	ldr	r2, [pc, #372]	; (401660 <udd_ep_in_sent+0x1ac>)
  4014ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4014f0:	68da      	ldr	r2, [r3, #12]
  4014f2:	689b      	ldr	r3, [r3, #8]
  4014f4:	429a      	cmp	r2, r3
  4014f6:	d309      	bcc.n	40150c <udd_ep_in_sent+0x58>
  4014f8:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  4014fc:	4c58      	ldr	r4, [pc, #352]	; (401660 <udd_ep_in_sent+0x1ac>)
  4014fe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  401502:	7c49      	ldrb	r1, [r1, #17]
  401504:	f011 0f40 	tst.w	r1, #64	; 0x40
  401508:	f000 80a3 	beq.w	401652 <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40150c:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401510:	4953      	ldr	r1, [pc, #332]	; (401660 <udd_ep_in_sent+0x1ac>)
  401512:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  401516:	686c      	ldr	r4, [r5, #4]
  401518:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40151a:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  40151c:	8a2b      	ldrh	r3, [r5, #16]
  40151e:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  401522:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  401524:	bf3a      	itte	cc
  401526:	460f      	movcc	r7, r1
		is_short_pkt = true;
  401528:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  40152c:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401530:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401534:	494a      	ldr	r1, [pc, #296]	; (401660 <udd_ep_in_sent+0x1ac>)
  401536:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40153a:	443a      	add	r2, r7
  40153c:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  40153e:	2f07      	cmp	r7, #7
  401540:	d92b      	bls.n	40159a <udd_ep_in_sent+0xe6>
  401542:	f104 0308 	add.w	r3, r4, #8
  401546:	463d      	mov	r5, r7
  401548:	0082      	lsls	r2, r0, #2
  40154a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40154e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401552:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  401556:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401558:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  40155c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40155e:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  401562:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401564:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  401568:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40156a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  40156e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401570:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  401574:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401576:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  40157a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40157c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401580:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  401582:	3d08      	subs	r5, #8
  401584:	3308      	adds	r3, #8
  401586:	2d07      	cmp	r5, #7
  401588:	d8e3      	bhi.n	401552 <udd_ep_in_sent+0x9e>
  40158a:	f1a7 0308 	sub.w	r3, r7, #8
  40158e:	f023 0307 	bic.w	r3, r3, #7
  401592:	3308      	adds	r3, #8
  401594:	441c      	add	r4, r3
  401596:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  40159a:	b14f      	cbz	r7, 4015b0 <udd_ep_in_sent+0xfc>
  40159c:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40159e:	4931      	ldr	r1, [pc, #196]	; (401664 <udd_ep_in_sent+0x1b0>)
  4015a0:	f109 0914 	add.w	r9, r9, #20
  4015a4:	f814 2b01 	ldrb.w	r2, [r4], #1
  4015a8:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  4015ac:	429c      	cmp	r4, r3
  4015ae:	d1f9      	bne.n	4015a4 <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  4015b0:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4015b4:	4a2a      	ldr	r2, [pc, #168]	; (401660 <udd_ep_in_sent+0x1ac>)
  4015b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4015ba:	f10c 0c01 	add.w	ip, ip, #1
  4015be:	7c5a      	ldrb	r2, [r3, #17]
  4015c0:	f36c 0283 	bfi	r2, ip, #2, #2
  4015c4:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  4015c6:	f1b8 0f00 	cmp.w	r8, #0
  4015ca:	d014      	beq.n	4015f6 <udd_ep_in_sent+0x142>
  4015cc:	0080      	lsls	r0, r0, #2
  4015ce:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4015d2:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4015d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015d8:	9301      	str	r3, [sp, #4]
  4015da:	9b01      	ldr	r3, [sp, #4]
  4015dc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015e0:	9301      	str	r3, [sp, #4]
  4015e2:	9b01      	ldr	r3, [sp, #4]
  4015e4:	f043 0310 	orr.w	r3, r3, #16
  4015e8:	9301      	str	r3, [sp, #4]
  4015ea:	9b01      	ldr	r3, [sp, #4]
  4015ec:	6303      	str	r3, [r0, #48]	; 0x30
  4015ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015f0:	f013 0f10 	tst.w	r3, #16
  4015f4:	d0fb      	beq.n	4015ee <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4015f6:	f1be 0f00 	cmp.w	lr, #0
  4015fa:	d008      	beq.n	40160e <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  4015fc:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401600:	4a17      	ldr	r2, [pc, #92]	; (401660 <udd_ep_in_sent+0x1ac>)
  401602:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401606:	7c5a      	ldrb	r2, [r3, #17]
  401608:	f36f 1286 	bfc	r2, #6, #1
  40160c:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  40160e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401612:	4a13      	ldr	r2, [pc, #76]	; (401660 <udd_ep_in_sent+0x1ac>)
  401614:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401618:	68da      	ldr	r2, [r3, #12]
  40161a:	689b      	ldr	r3, [r3, #8]
  40161c:	429a      	cmp	r2, r3
  40161e:	d31a      	bcc.n	401656 <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401620:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401624:	4a0e      	ldr	r2, [pc, #56]	; (401660 <udd_ep_in_sent+0x1ac>)
  401626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40162a:	7c5b      	ldrb	r3, [r3, #17]
  40162c:	f013 0f40 	tst.w	r3, #64	; 0x40
  401630:	d113      	bne.n	40165a <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  401632:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401636:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40163a:	7c73      	ldrb	r3, [r6, #17]
  40163c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401640:	7473      	strb	r3, [r6, #17]
		return false;
  401642:	2000      	movs	r0, #0
  401644:	e002      	b.n	40164c <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401646:	2301      	movs	r3, #1
  401648:	e74a      	b.n	4014e0 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  40164a:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  40164c:	b003      	add	sp, #12
  40164e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  401652:	2000      	movs	r0, #0
  401654:	e7fa      	b.n	40164c <udd_ep_in_sent+0x198>
	return true; // Pending
  401656:	2001      	movs	r0, #1
  401658:	e7f8      	b.n	40164c <udd_ep_in_sent+0x198>
  40165a:	2001      	movs	r0, #1
  40165c:	e7f6      	b.n	40164c <udd_ep_in_sent+0x198>
  40165e:	bf00      	nop
  401660:	20000d2c 	.word	0x20000d2c
  401664:	40034000 	.word	0x40034000

00401668 <UDP_Handler>:
{
  401668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40166c:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  40166e:	4b86      	ldr	r3, [pc, #536]	; (401888 <UDP_Handler+0x220>)
  401670:	4798      	blx	r3
  401672:	b920      	cbnz	r0, 40167e <UDP_Handler+0x16>
  401674:	4b85      	ldr	r3, [pc, #532]	; (40188c <UDP_Handler+0x224>)
  401676:	69db      	ldr	r3, [r3, #28]
  401678:	f413 7f80 	tst.w	r3, #256	; 0x100
  40167c:	d03b      	beq.n	4016f6 <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  40167e:	2022      	movs	r0, #34	; 0x22
  401680:	4b83      	ldr	r3, [pc, #524]	; (401890 <UDP_Handler+0x228>)
  401682:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401684:	4b81      	ldr	r3, [pc, #516]	; (40188c <UDP_Handler+0x224>)
  401686:	699b      	ldr	r3, [r3, #24]
  401688:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40168c:	d004      	beq.n	401698 <UDP_Handler+0x30>
  40168e:	4b7f      	ldr	r3, [pc, #508]	; (40188c <UDP_Handler+0x224>)
  401690:	69db      	ldr	r3, [r3, #28]
  401692:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401696:	d137      	bne.n	401708 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  401698:	4b7c      	ldr	r3, [pc, #496]	; (40188c <UDP_Handler+0x224>)
  40169a:	69db      	ldr	r3, [r3, #28]
  40169c:	f013 0f01 	tst.w	r3, #1
  4016a0:	f000 81b6 	beq.w	401a10 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  4016a4:	4b79      	ldr	r3, [pc, #484]	; (40188c <UDP_Handler+0x224>)
  4016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016a8:	f013 0f04 	tst.w	r3, #4
  4016ac:	d133      	bne.n	401716 <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  4016ae:	4b77      	ldr	r3, [pc, #476]	; (40188c <UDP_Handler+0x224>)
  4016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016b2:	f013 0f01 	tst.w	r3, #1
  4016b6:	f040 80c3 	bne.w	401840 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  4016ba:	4b74      	ldr	r3, [pc, #464]	; (40188c <UDP_Handler+0x224>)
  4016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016be:	f013 0f02 	tst.w	r3, #2
  4016c2:	f040 80c0 	bne.w	401846 <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  4016c6:	4b71      	ldr	r3, [pc, #452]	; (40188c <UDP_Handler+0x224>)
  4016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016ca:	f013 0f08 	tst.w	r3, #8
  4016ce:	f000 819f 	beq.w	401a10 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  4016d2:	4a6e      	ldr	r2, [pc, #440]	; (40188c <UDP_Handler+0x224>)
  4016d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016d6:	9300      	str	r3, [sp, #0]
  4016d8:	9b00      	ldr	r3, [sp, #0]
  4016da:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016de:	9300      	str	r3, [sp, #0]
  4016e0:	9b00      	ldr	r3, [sp, #0]
  4016e2:	f023 0308 	bic.w	r3, r3, #8
  4016e6:	9300      	str	r3, [sp, #0]
  4016e8:	9b00      	ldr	r3, [sp, #0]
  4016ea:	6313      	str	r3, [r2, #48]	; 0x30
  4016ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016ee:	f013 0f08 	tst.w	r3, #8
  4016f2:	d1fb      	bne.n	4016ec <UDP_Handler+0x84>
  4016f4:	e005      	b.n	401702 <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  4016f6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4016f8:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4016fc:	2200      	movs	r2, #0
  4016fe:	4b65      	ldr	r3, [pc, #404]	; (401894 <UDP_Handler+0x22c>)
  401700:	701a      	strb	r2, [r3, #0]
}
  401702:	b01b      	add	sp, #108	; 0x6c
  401704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  401708:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40170c:	4b5f      	ldr	r3, [pc, #380]	; (40188c <UDP_Handler+0x224>)
  40170e:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401710:	4b61      	ldr	r3, [pc, #388]	; (401898 <UDP_Handler+0x230>)
  401712:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  401714:	e7f5      	b.n	401702 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401716:	4b61      	ldr	r3, [pc, #388]	; (40189c <UDP_Handler+0x234>)
  401718:	781b      	ldrb	r3, [r3, #0]
  40171a:	b9cb      	cbnz	r3, 401750 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  40171c:	4b5b      	ldr	r3, [pc, #364]	; (40188c <UDP_Handler+0x224>)
  40171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401720:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401724:	2b08      	cmp	r3, #8
  401726:	d018      	beq.n	40175a <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  401728:	4a58      	ldr	r2, [pc, #352]	; (40188c <UDP_Handler+0x224>)
  40172a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40172c:	9301      	str	r3, [sp, #4]
  40172e:	9b01      	ldr	r3, [sp, #4]
  401730:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401734:	9301      	str	r3, [sp, #4]
  401736:	9b01      	ldr	r3, [sp, #4]
  401738:	f023 0304 	bic.w	r3, r3, #4
  40173c:	9301      	str	r3, [sp, #4]
  40173e:	9b01      	ldr	r3, [sp, #4]
  401740:	6313      	str	r3, [r2, #48]	; 0x30
  401742:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401744:	f013 0f04 	tst.w	r3, #4
  401748:	d1fb      	bne.n	401742 <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  40174a:	4b55      	ldr	r3, [pc, #340]	; (4018a0 <UDP_Handler+0x238>)
  40174c:	4798      	blx	r3
  40174e:	e7d8      	b.n	401702 <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401750:	4b54      	ldr	r3, [pc, #336]	; (4018a4 <UDP_Handler+0x23c>)
  401752:	4798      	blx	r3
		udd_ctrl_init();
  401754:	4b54      	ldr	r3, [pc, #336]	; (4018a8 <UDP_Handler+0x240>)
  401756:	4798      	blx	r3
  401758:	e7e0      	b.n	40171c <UDP_Handler+0xb4>
  40175a:	4b54      	ldr	r3, [pc, #336]	; (4018ac <UDP_Handler+0x244>)
  40175c:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401760:	494a      	ldr	r1, [pc, #296]	; (40188c <UDP_Handler+0x224>)
  401762:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401764:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  401768:	4283      	cmp	r3, r0
  40176a:	d1fa      	bne.n	401762 <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  40176c:	4b50      	ldr	r3, [pc, #320]	; (4018b0 <UDP_Handler+0x248>)
  40176e:	4798      	blx	r3
  401770:	b998      	cbnz	r0, 40179a <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  401772:	4a46      	ldr	r2, [pc, #280]	; (40188c <UDP_Handler+0x224>)
  401774:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401776:	9302      	str	r3, [sp, #8]
  401778:	9b02      	ldr	r3, [sp, #8]
  40177a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40177e:	9302      	str	r3, [sp, #8]
  401780:	9b02      	ldr	r3, [sp, #8]
  401782:	f023 0304 	bic.w	r3, r3, #4
  401786:	9302      	str	r3, [sp, #8]
  401788:	9b02      	ldr	r3, [sp, #8]
  40178a:	6313      	str	r3, [r2, #48]	; 0x30
  40178c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40178e:	f013 0f04 	tst.w	r3, #4
  401792:	d1fb      	bne.n	40178c <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  401794:	4b42      	ldr	r3, [pc, #264]	; (4018a0 <UDP_Handler+0x238>)
  401796:	4798      	blx	r3
  401798:	e7b3      	b.n	401702 <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  40179a:	4b46      	ldr	r3, [pc, #280]	; (4018b4 <UDP_Handler+0x24c>)
  40179c:	f993 3000 	ldrsb.w	r3, [r3]
  4017a0:	2b00      	cmp	r3, #0
  4017a2:	db1d      	blt.n	4017e0 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  4017a4:	4a39      	ldr	r2, [pc, #228]	; (40188c <UDP_Handler+0x224>)
  4017a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017a8:	9305      	str	r3, [sp, #20]
  4017aa:	9b05      	ldr	r3, [sp, #20]
  4017ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017b0:	9305      	str	r3, [sp, #20]
  4017b2:	9b05      	ldr	r3, [sp, #20]
  4017b4:	f023 0304 	bic.w	r3, r3, #4
  4017b8:	9305      	str	r3, [sp, #20]
  4017ba:	9b05      	ldr	r3, [sp, #20]
  4017bc:	6313      	str	r3, [r2, #48]	; 0x30
  4017be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017c0:	f013 0f04 	tst.w	r3, #4
  4017c4:	d1fb      	bne.n	4017be <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4017c6:	4b3b      	ldr	r3, [pc, #236]	; (4018b4 <UDP_Handler+0x24c>)
  4017c8:	88db      	ldrh	r3, [r3, #6]
  4017ca:	2b00      	cmp	r3, #0
  4017cc:	d035      	beq.n	40183a <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  4017ce:	2300      	movs	r3, #0
  4017d0:	4a39      	ldr	r2, [pc, #228]	; (4018b8 <UDP_Handler+0x250>)
  4017d2:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4017d4:	4a39      	ldr	r2, [pc, #228]	; (4018bc <UDP_Handler+0x254>)
  4017d6:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4017d8:	2201      	movs	r2, #1
  4017da:	4b30      	ldr	r3, [pc, #192]	; (40189c <UDP_Handler+0x234>)
  4017dc:	701a      	strb	r2, [r3, #0]
  4017de:	e790      	b.n	401702 <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  4017e0:	4a2a      	ldr	r2, [pc, #168]	; (40188c <UDP_Handler+0x224>)
  4017e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017e4:	9303      	str	r3, [sp, #12]
  4017e6:	9b03      	ldr	r3, [sp, #12]
  4017e8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017ec:	9303      	str	r3, [sp, #12]
  4017ee:	9b03      	ldr	r3, [sp, #12]
  4017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4017f4:	9303      	str	r3, [sp, #12]
  4017f6:	9b03      	ldr	r3, [sp, #12]
  4017f8:	6313      	str	r3, [r2, #48]	; 0x30
  4017fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017fc:	f013 0f80 	tst.w	r3, #128	; 0x80
  401800:	d0fb      	beq.n	4017fa <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  401802:	4a22      	ldr	r2, [pc, #136]	; (40188c <UDP_Handler+0x224>)
  401804:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401806:	9304      	str	r3, [sp, #16]
  401808:	9b04      	ldr	r3, [sp, #16]
  40180a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40180e:	9304      	str	r3, [sp, #16]
  401810:	9b04      	ldr	r3, [sp, #16]
  401812:	f023 0304 	bic.w	r3, r3, #4
  401816:	9304      	str	r3, [sp, #16]
  401818:	9b04      	ldr	r3, [sp, #16]
  40181a:	6313      	str	r3, [r2, #48]	; 0x30
  40181c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40181e:	f013 0f04 	tst.w	r3, #4
  401822:	d1fb      	bne.n	40181c <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  401824:	2300      	movs	r3, #0
  401826:	4a24      	ldr	r2, [pc, #144]	; (4018b8 <UDP_Handler+0x250>)
  401828:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40182a:	4a24      	ldr	r2, [pc, #144]	; (4018bc <UDP_Handler+0x254>)
  40182c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  40182e:	2202      	movs	r2, #2
  401830:	4b1a      	ldr	r3, [pc, #104]	; (40189c <UDP_Handler+0x234>)
  401832:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401834:	4b22      	ldr	r3, [pc, #136]	; (4018c0 <UDP_Handler+0x258>)
  401836:	4798      	blx	r3
  401838:	e763      	b.n	401702 <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  40183a:	4b22      	ldr	r3, [pc, #136]	; (4018c4 <UDP_Handler+0x25c>)
  40183c:	4798      	blx	r3
  40183e:	e760      	b.n	401702 <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401840:	4b1f      	ldr	r3, [pc, #124]	; (4018c0 <UDP_Handler+0x258>)
  401842:	4798      	blx	r3
  401844:	e75d      	b.n	401702 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401846:	4b15      	ldr	r3, [pc, #84]	; (40189c <UDP_Handler+0x234>)
  401848:	781b      	ldrb	r3, [r3, #0]
  40184a:	2b01      	cmp	r3, #1
  40184c:	d03c      	beq.n	4018c8 <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  40184e:	2b02      	cmp	r3, #2
  401850:	d004      	beq.n	40185c <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401852:	2b04      	cmp	r3, #4
  401854:	d002      	beq.n	40185c <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  401856:	4b12      	ldr	r3, [pc, #72]	; (4018a0 <UDP_Handler+0x238>)
  401858:	4798      	blx	r3
  40185a:	e001      	b.n	401860 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  40185c:	4b11      	ldr	r3, [pc, #68]	; (4018a4 <UDP_Handler+0x23c>)
  40185e:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401860:	4a0a      	ldr	r2, [pc, #40]	; (40188c <UDP_Handler+0x224>)
  401862:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401864:	9306      	str	r3, [sp, #24]
  401866:	9b06      	ldr	r3, [sp, #24]
  401868:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40186c:	9306      	str	r3, [sp, #24]
  40186e:	9b06      	ldr	r3, [sp, #24]
  401870:	f023 0302 	bic.w	r3, r3, #2
  401874:	9306      	str	r3, [sp, #24]
  401876:	9b06      	ldr	r3, [sp, #24]
  401878:	6313      	str	r3, [r2, #48]	; 0x30
  40187a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40187c:	f013 0f02 	tst.w	r3, #2
  401880:	d1fb      	bne.n	40187a <UDP_Handler+0x212>
		udd_ctrl_init();
  401882:	4b09      	ldr	r3, [pc, #36]	; (4018a8 <UDP_Handler+0x240>)
  401884:	4798      	blx	r3
  401886:	e73c      	b.n	401702 <UDP_Handler+0x9a>
  401888:	00403539 	.word	0x00403539
  40188c:	40034000 	.word	0x40034000
  401890:	004033d9 	.word	0x004033d9
  401894:	20000128 	.word	0x20000128
  401898:	004009f9 	.word	0x004009f9
  40189c:	20000d2a 	.word	0x20000d2a
  4018a0:	00401169 	.word	0x00401169
  4018a4:	004011d9 	.word	0x004011d9
  4018a8:	00401151 	.word	0x00401151
  4018ac:	200017c7 	.word	0x200017c7
  4018b0:	00400a39 	.word	0x00400a39
  4018b4:	200017c8 	.word	0x200017c8
  4018b8:	20000d28 	.word	0x20000d28
  4018bc:	20000d26 	.word	0x20000d26
  4018c0:	004011e9 	.word	0x004011e9
  4018c4:	004011a1 	.word	0x004011a1
	nb_data = udd_byte_count(0);
  4018c8:	4b93      	ldr	r3, [pc, #588]	; (401b18 <UDP_Handler+0x4b0>)
  4018ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4018cc:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4018d0:	4b92      	ldr	r3, [pc, #584]	; (401b1c <UDP_Handler+0x4b4>)
  4018d2:	899b      	ldrh	r3, [r3, #12]
  4018d4:	4a92      	ldr	r2, [pc, #584]	; (401b20 <UDP_Handler+0x4b8>)
  4018d6:	8815      	ldrh	r5, [r2, #0]
  4018d8:	186a      	adds	r2, r5, r1
  4018da:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  4018dc:	bfbc      	itt	lt
  4018de:	1b5b      	sublt	r3, r3, r5
  4018e0:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4018e2:	4b8e      	ldr	r3, [pc, #568]	; (401b1c <UDP_Handler+0x4b4>)
  4018e4:	6898      	ldr	r0, [r3, #8]
  4018e6:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4018e8:	b171      	cbz	r1, 401908 <UDP_Handler+0x2a0>
  4018ea:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4018ec:	4c8a      	ldr	r4, [pc, #552]	; (401b18 <UDP_Handler+0x4b0>)
  4018ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4018f0:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  4018f4:	1a13      	subs	r3, r2, r0
  4018f6:	b2db      	uxtb	r3, r3
  4018f8:	428b      	cmp	r3, r1
  4018fa:	d3f8      	bcc.n	4018ee <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  4018fc:	440d      	add	r5, r1
  4018fe:	b2ad      	uxth	r5, r5
  401900:	4b87      	ldr	r3, [pc, #540]	; (401b20 <UDP_Handler+0x4b8>)
  401902:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401904:	2940      	cmp	r1, #64	; 0x40
  401906:	d01a      	beq.n	40193e <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401908:	4b84      	ldr	r3, [pc, #528]	; (401b1c <UDP_Handler+0x4b4>)
  40190a:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  40190c:	695b      	ldr	r3, [r3, #20]
  40190e:	b113      	cbz	r3, 401916 <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  401910:	4798      	blx	r3
  401912:	2800      	cmp	r0, #0
  401914:	d030      	beq.n	401978 <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  401916:	4a80      	ldr	r2, [pc, #512]	; (401b18 <UDP_Handler+0x4b0>)
  401918:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40191a:	9308      	str	r3, [sp, #32]
  40191c:	9b08      	ldr	r3, [sp, #32]
  40191e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401922:	9308      	str	r3, [sp, #32]
  401924:	9b08      	ldr	r3, [sp, #32]
  401926:	f023 0302 	bic.w	r3, r3, #2
  40192a:	9308      	str	r3, [sp, #32]
  40192c:	9b08      	ldr	r3, [sp, #32]
  40192e:	6313      	str	r3, [r2, #48]	; 0x30
  401930:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401932:	f013 0f02 	tst.w	r3, #2
  401936:	d1fb      	bne.n	401930 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  401938:	4b7a      	ldr	r3, [pc, #488]	; (401b24 <UDP_Handler+0x4bc>)
  40193a:	4798      	blx	r3
  40193c:	e6e1      	b.n	401702 <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  40193e:	4b77      	ldr	r3, [pc, #476]	; (401b1c <UDP_Handler+0x4b4>)
  401940:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401942:	4b79      	ldr	r3, [pc, #484]	; (401b28 <UDP_Handler+0x4c0>)
  401944:	881b      	ldrh	r3, [r3, #0]
  401946:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  401948:	429a      	cmp	r2, r3
  40194a:	dddd      	ble.n	401908 <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  40194c:	4b73      	ldr	r3, [pc, #460]	; (401b1c <UDP_Handler+0x4b4>)
  40194e:	899b      	ldrh	r3, [r3, #12]
  401950:	42ab      	cmp	r3, r5
  401952:	d025      	beq.n	4019a0 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  401954:	4a70      	ldr	r2, [pc, #448]	; (401b18 <UDP_Handler+0x4b0>)
  401956:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401958:	930b      	str	r3, [sp, #44]	; 0x2c
  40195a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40195c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401960:	930b      	str	r3, [sp, #44]	; 0x2c
  401962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401964:	f023 0302 	bic.w	r3, r3, #2
  401968:	930b      	str	r3, [sp, #44]	; 0x2c
  40196a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40196c:	6313      	str	r3, [r2, #48]	; 0x30
  40196e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401970:	f013 0f02 	tst.w	r3, #2
  401974:	d1fb      	bne.n	40196e <UDP_Handler+0x306>
  401976:	e6c4      	b.n	401702 <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  401978:	4b6c      	ldr	r3, [pc, #432]	; (401b2c <UDP_Handler+0x4c4>)
  40197a:	4798      	blx	r3
				udd_ack_bank0_received(0);
  40197c:	4a66      	ldr	r2, [pc, #408]	; (401b18 <UDP_Handler+0x4b0>)
  40197e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401980:	9307      	str	r3, [sp, #28]
  401982:	9b07      	ldr	r3, [sp, #28]
  401984:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401988:	9307      	str	r3, [sp, #28]
  40198a:	9b07      	ldr	r3, [sp, #28]
  40198c:	f023 0302 	bic.w	r3, r3, #2
  401990:	9307      	str	r3, [sp, #28]
  401992:	9b07      	ldr	r3, [sp, #28]
  401994:	6313      	str	r3, [r2, #48]	; 0x30
  401996:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401998:	f013 0f02 	tst.w	r3, #2
  40199c:	d1fb      	bne.n	401996 <UDP_Handler+0x32e>
  40199e:	e6b0      	b.n	401702 <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  4019a0:	4b5e      	ldr	r3, [pc, #376]	; (401b1c <UDP_Handler+0x4b4>)
  4019a2:	695b      	ldr	r3, [r3, #20]
  4019a4:	b153      	cbz	r3, 4019bc <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  4019a6:	4798      	blx	r3
  4019a8:	b1e8      	cbz	r0, 4019e6 <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4019aa:	495f      	ldr	r1, [pc, #380]	; (401b28 <UDP_Handler+0x4c0>)
  4019ac:	4a5c      	ldr	r2, [pc, #368]	; (401b20 <UDP_Handler+0x4b8>)
  4019ae:	880b      	ldrh	r3, [r1, #0]
  4019b0:	8810      	ldrh	r0, [r2, #0]
  4019b2:	4403      	add	r3, r0
  4019b4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  4019b6:	2300      	movs	r3, #0
  4019b8:	8013      	strh	r3, [r2, #0]
  4019ba:	e7cb      	b.n	401954 <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  4019bc:	4b5b      	ldr	r3, [pc, #364]	; (401b2c <UDP_Handler+0x4c4>)
  4019be:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4019c0:	4a55      	ldr	r2, [pc, #340]	; (401b18 <UDP_Handler+0x4b0>)
  4019c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019c4:	9309      	str	r3, [sp, #36]	; 0x24
  4019c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4019c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019cc:	9309      	str	r3, [sp, #36]	; 0x24
  4019ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4019d0:	f023 0302 	bic.w	r3, r3, #2
  4019d4:	9309      	str	r3, [sp, #36]	; 0x24
  4019d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4019d8:	6313      	str	r3, [r2, #48]	; 0x30
  4019da:	4613      	mov	r3, r2
  4019dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019de:	f012 0f02 	tst.w	r2, #2
  4019e2:	d1fb      	bne.n	4019dc <UDP_Handler+0x374>
  4019e4:	e68d      	b.n	401702 <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  4019e6:	4b51      	ldr	r3, [pc, #324]	; (401b2c <UDP_Handler+0x4c4>)
  4019e8:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4019ea:	4a4b      	ldr	r2, [pc, #300]	; (401b18 <UDP_Handler+0x4b0>)
  4019ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019ee:	930a      	str	r3, [sp, #40]	; 0x28
  4019f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4019f2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4019f6:	930a      	str	r3, [sp, #40]	; 0x28
  4019f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4019fa:	f023 0302 	bic.w	r3, r3, #2
  4019fe:	930a      	str	r3, [sp, #40]	; 0x28
  401a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401a02:	6313      	str	r3, [r2, #48]	; 0x30
  401a04:	4613      	mov	r3, r2
  401a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a08:	f012 0f02 	tst.w	r2, #2
  401a0c:	d1fb      	bne.n	401a06 <UDP_Handler+0x39e>
  401a0e:	e678      	b.n	401702 <UDP_Handler+0x9a>
  401a10:	4a47      	ldr	r2, [pc, #284]	; (401b30 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  401a12:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401a14:	f8df e100 	ldr.w	lr, [pc, #256]	; 401b18 <UDP_Handler+0x4b0>
  401a18:	4618      	mov	r0, r3
  401a1a:	e17f      	b.n	401d1c <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  401a1c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401a20:	4b43      	ldr	r3, [pc, #268]	; (401b30 <UDP_Handler+0x4c8>)
  401a22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401a26:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  401a2a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a30:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  401a34:	f1b9 0f00 	cmp.w	r9, #0
  401a38:	f000 81df 	beq.w	401dfa <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401a3c:	4b3c      	ldr	r3, [pc, #240]	; (401b30 <UDP_Handler+0x4c8>)
  401a3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401a42:	f8d3 e008 	ldr.w	lr, [r3, #8]
  401a46:	68da      	ldr	r2, [r3, #12]
  401a48:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401a4c:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401a4e:	4548      	cmp	r0, r9
  401a50:	f240 81c7 	bls.w	401de2 <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  401a54:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  401a58:	4b35      	ldr	r3, [pc, #212]	; (401b30 <UDP_Handler+0x4c8>)
  401a5a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401a5e:	eb02 0009 	add.w	r0, r2, r9
  401a62:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  401a64:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  401a66:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401a6a:	4411      	add	r1, r2
  401a6c:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401a6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401a70:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  401a74:	1a5a      	subs	r2, r3, r1
  401a76:	4282      	cmp	r2, r0
  401a78:	d3f9      	bcc.n	401a6e <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  401a7a:	4630      	mov	r0, r6
  401a7c:	4b2d      	ldr	r3, [pc, #180]	; (401b34 <UDP_Handler+0x4cc>)
  401a7e:	4798      	blx	r3
	if ((b_full || b_short) &&
  401a80:	f1bb 0f00 	cmp.w	fp, #0
  401a84:	f000 81bc 	beq.w	401e00 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  401a88:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  401a8a:	f013 0f20 	tst.w	r3, #32
  401a8e:	f47f ae38 	bne.w	401702 <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  401a92:	4b21      	ldr	r3, [pc, #132]	; (401b18 <UDP_Handler+0x4b0>)
  401a94:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401a96:	4b26      	ldr	r3, [pc, #152]	; (401b30 <UDP_Handler+0x4c8>)
  401a98:	00ba      	lsls	r2, r7, #2
  401a9a:	19d1      	adds	r1, r2, r7
  401a9c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401aa0:	68cb      	ldr	r3, [r1, #12]
  401aa2:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401aa4:	4632      	mov	r2, r6
  401aa6:	2100      	movs	r1, #0
  401aa8:	4640      	mov	r0, r8
  401aaa:	4b23      	ldr	r3, [pc, #140]	; (401b38 <UDP_Handler+0x4d0>)
  401aac:	4798      	blx	r3
  401aae:	e628      	b.n	401702 <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  401ab0:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401ab4:	4b1e      	ldr	r3, [pc, #120]	; (401b30 <UDP_Handler+0x4c8>)
  401ab6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401aba:	7c53      	ldrb	r3, [r2, #17]
  401abc:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401ac0:	3103      	adds	r1, #3
  401ac2:	f361 0383 	bfi	r3, r1, #2, #2
  401ac6:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401ac8:	7c53      	ldrb	r3, [r2, #17]
  401aca:	f013 0f20 	tst.w	r3, #32
  401ace:	d05f      	beq.n	401b90 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  401ad0:	f013 0f0c 	tst.w	r3, #12
  401ad4:	d032      	beq.n	401b3c <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  401ad6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ad8:	930c      	str	r3, [sp, #48]	; 0x30
  401ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401adc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ae0:	930c      	str	r3, [sp, #48]	; 0x30
  401ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401ae4:	f043 0310 	orr.w	r3, r3, #16
  401ae8:	930c      	str	r3, [sp, #48]	; 0x30
  401aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401aec:	6323      	str	r3, [r4, #48]	; 0x30
  401aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401af0:	f013 0f10 	tst.w	r3, #16
  401af4:	d0fb      	beq.n	401aee <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  401af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401af8:	930d      	str	r3, [sp, #52]	; 0x34
  401afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401afc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b00:	930d      	str	r3, [sp, #52]	; 0x34
  401b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401b04:	f023 0301 	bic.w	r3, r3, #1
  401b08:	930d      	str	r3, [sp, #52]	; 0x34
  401b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401b0c:	6323      	str	r3, [r4, #48]	; 0x30
  401b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b10:	f013 0f01 	tst.w	r3, #1
  401b14:	d1fb      	bne.n	401b0e <UDP_Handler+0x4a6>
  401b16:	e5f4      	b.n	401702 <UDP_Handler+0x9a>
  401b18:	40034000 	.word	0x40034000
  401b1c:	200017c8 	.word	0x200017c8
  401b20:	20000d26 	.word	0x20000d26
  401b24:	004011a1 	.word	0x004011a1
  401b28:	20000d28 	.word	0x20000d28
  401b2c:	00401169 	.word	0x00401169
  401b30:	20000d2c 	.word	0x20000d2c
  401b34:	004013e1 	.word	0x004013e1
  401b38:	004013a1 	.word	0x004013a1
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401b3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b3e:	930e      	str	r3, [sp, #56]	; 0x38
  401b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b42:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b46:	930e      	str	r3, [sp, #56]	; 0x38
  401b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b4a:	f023 0301 	bic.w	r3, r3, #1
  401b4e:	930e      	str	r3, [sp, #56]	; 0x38
  401b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401b52:	6323      	str	r3, [r4, #48]	; 0x30
  401b54:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b56:	f013 0f01 	tst.w	r3, #1
  401b5a:	d1fb      	bne.n	401b54 <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401b5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b5e:	930f      	str	r3, [sp, #60]	; 0x3c
  401b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b62:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b66:	930f      	str	r3, [sp, #60]	; 0x3c
  401b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b6a:	f043 0320 	orr.w	r3, r3, #32
  401b6e:	930f      	str	r3, [sp, #60]	; 0x3c
  401b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401b72:	6323      	str	r3, [r4, #48]	; 0x30
  401b74:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b76:	f013 0f20 	tst.w	r3, #32
  401b7a:	d0fb      	beq.n	401b74 <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401b7c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401b80:	4ba1      	ldr	r3, [pc, #644]	; (401e08 <UDP_Handler+0x7a0>)
  401b82:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  401b86:	7c5a      	ldrb	r2, [r3, #17]
  401b88:	f36f 1245 	bfc	r2, #5, #1
  401b8c:	745a      	strb	r2, [r3, #17]
  401b8e:	e5b8      	b.n	401702 <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401b90:	f013 0f80 	tst.w	r3, #128	; 0x80
  401b94:	d138      	bne.n	401c08 <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401b96:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401b9a:	4b9b      	ldr	r3, [pc, #620]	; (401e08 <UDP_Handler+0x7a0>)
  401b9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401ba0:	68da      	ldr	r2, [r3, #12]
  401ba2:	689b      	ldr	r3, [r3, #8]
  401ba4:	429a      	cmp	r2, r3
  401ba6:	d341      	bcc.n	401c2c <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  401ba8:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401bac:	4b96      	ldr	r3, [pc, #600]	; (401e08 <UDP_Handler+0x7a0>)
  401bae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401bb2:	7c5b      	ldrb	r3, [r3, #17]
  401bb4:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401bb8:	d138      	bne.n	401c2c <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401bba:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401bbe:	fab3 f383 	clz	r3, r3
  401bc2:	095b      	lsrs	r3, r3, #5
  401bc4:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  401bc6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401bc8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401bcc:	2200      	movs	r2, #0
  401bce:	4b8f      	ldr	r3, [pc, #572]	; (401e0c <UDP_Handler+0x7a4>)
  401bd0:	701a      	strb	r2, [r3, #0]
	return flags;
  401bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401bd4:	4a8e      	ldr	r2, [pc, #568]	; (401e10 <UDP_Handler+0x7a8>)
  401bd6:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  401bd8:	b12b      	cbz	r3, 401be6 <UDP_Handler+0x57e>
		cpu_irq_enable();
  401bda:	2201      	movs	r2, #1
  401bdc:	4b8b      	ldr	r3, [pc, #556]	; (401e0c <UDP_Handler+0x7a4>)
  401bde:	701a      	strb	r2, [r3, #0]
  401be0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401be4:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401be6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401be8:	9311      	str	r3, [sp, #68]	; 0x44
  401bea:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401bec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bf0:	9311      	str	r3, [sp, #68]	; 0x44
  401bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401bf4:	f023 0301 	bic.w	r3, r3, #1
  401bf8:	9311      	str	r3, [sp, #68]	; 0x44
  401bfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401bfc:	6323      	str	r3, [r4, #48]	; 0x30
  401bfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c00:	f013 0f01 	tst.w	r3, #1
  401c04:	d1fb      	bne.n	401bfe <UDP_Handler+0x596>
  401c06:	e57c      	b.n	401702 <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  401c08:	2314      	movs	r3, #20
  401c0a:	4a7f      	ldr	r2, [pc, #508]	; (401e08 <UDP_Handler+0x7a0>)
  401c0c:	fb03 2307 	mla	r3, r3, r7, r2
  401c10:	7c59      	ldrb	r1, [r3, #17]
  401c12:	f36f 11c7 	bfc	r1, #7, #1
  401c16:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401c18:	68da      	ldr	r2, [r3, #12]
  401c1a:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401c1c:	4b7c      	ldr	r3, [pc, #496]	; (401e10 <UDP_Handler+0x7a8>)
  401c1e:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401c20:	4632      	mov	r2, r6
  401c22:	2100      	movs	r1, #0
  401c24:	4640      	mov	r0, r8
  401c26:	4b7b      	ldr	r3, [pc, #492]	; (401e14 <UDP_Handler+0x7ac>)
  401c28:	4798      	blx	r3
  401c2a:	e7b4      	b.n	401b96 <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401c2c:	2e00      	cmp	r6, #0
  401c2e:	d05b      	beq.n	401ce8 <UDP_Handler+0x680>
  401c30:	2e03      	cmp	r6, #3
  401c32:	d059      	beq.n	401ce8 <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401c34:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401c38:	4b73      	ldr	r3, [pc, #460]	; (401e08 <UDP_Handler+0x7a0>)
  401c3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401c3e:	7c5b      	ldrb	r3, [r3, #17]
  401c40:	f013 0f0c 	tst.w	r3, #12
  401c44:	d024      	beq.n	401c90 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  401c46:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c48:	9312      	str	r3, [sp, #72]	; 0x48
  401c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401c4c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c50:	9312      	str	r3, [sp, #72]	; 0x48
  401c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401c54:	f043 0310 	orr.w	r3, r3, #16
  401c58:	9312      	str	r3, [sp, #72]	; 0x48
  401c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401c5c:	6323      	str	r3, [r4, #48]	; 0x30
  401c5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c60:	f013 0f10 	tst.w	r3, #16
  401c64:	d0fb      	beq.n	401c5e <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  401c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c68:	9313      	str	r3, [sp, #76]	; 0x4c
  401c6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401c6c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c70:	9313      	str	r3, [sp, #76]	; 0x4c
  401c72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401c74:	f023 0301 	bic.w	r3, r3, #1
  401c78:	9313      	str	r3, [sp, #76]	; 0x4c
  401c7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401c7c:	6323      	str	r3, [r4, #48]	; 0x30
  401c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c80:	f013 0f01 	tst.w	r3, #1
  401c84:	d1fb      	bne.n	401c7e <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  401c86:	2100      	movs	r1, #0
  401c88:	4630      	mov	r0, r6
  401c8a:	4b63      	ldr	r3, [pc, #396]	; (401e18 <UDP_Handler+0x7b0>)
  401c8c:	4798      	blx	r3
  401c8e:	e538      	b.n	401702 <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401c90:	2101      	movs	r1, #1
  401c92:	4630      	mov	r0, r6
  401c94:	4b60      	ldr	r3, [pc, #384]	; (401e18 <UDP_Handler+0x7b0>)
  401c96:	4798      	blx	r3
  401c98:	b1a0      	cbz	r0, 401cc4 <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  401c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c9c:	9314      	str	r3, [sp, #80]	; 0x50
  401c9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401ca0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ca4:	9314      	str	r3, [sp, #80]	; 0x50
  401ca6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401ca8:	f023 0301 	bic.w	r3, r3, #1
  401cac:	9314      	str	r3, [sp, #80]	; 0x50
  401cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401cb0:	6323      	str	r3, [r4, #48]	; 0x30
  401cb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cb4:	f013 0f01 	tst.w	r3, #1
  401cb8:	d1fb      	bne.n	401cb2 <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  401cba:	2100      	movs	r1, #0
  401cbc:	4630      	mov	r0, r6
  401cbe:	4b56      	ldr	r3, [pc, #344]	; (401e18 <UDP_Handler+0x7b0>)
  401cc0:	4798      	blx	r3
  401cc2:	e51e      	b.n	401702 <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  401cc4:	2314      	movs	r3, #20
  401cc6:	4a50      	ldr	r2, [pc, #320]	; (401e08 <UDP_Handler+0x7a0>)
  401cc8:	fb03 2707 	mla	r7, r3, r7, r2
  401ccc:	7c7a      	ldrb	r2, [r7, #17]
  401cce:	f36f 12c7 	bfc	r2, #7, #1
  401cd2:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401cd4:	68fb      	ldr	r3, [r7, #12]
  401cd6:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  401cd8:	4b4d      	ldr	r3, [pc, #308]	; (401e10 <UDP_Handler+0x7a8>)
  401cda:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401cdc:	4632      	mov	r2, r6
  401cde:	2100      	movs	r1, #0
  401ce0:	4640      	mov	r0, r8
  401ce2:	4b4c      	ldr	r3, [pc, #304]	; (401e14 <UDP_Handler+0x7ac>)
  401ce4:	4798      	blx	r3
  401ce6:	e7d8      	b.n	401c9a <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401ce8:	2101      	movs	r1, #1
  401cea:	4630      	mov	r0, r6
  401cec:	4b4a      	ldr	r3, [pc, #296]	; (401e18 <UDP_Handler+0x7b0>)
  401cee:	4798      	blx	r3
				udd_ack_in_sent(ep);
  401cf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cf2:	9315      	str	r3, [sp, #84]	; 0x54
  401cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401cf6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401cfa:	9315      	str	r3, [sp, #84]	; 0x54
  401cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401cfe:	f023 0301 	bic.w	r3, r3, #1
  401d02:	9315      	str	r3, [sp, #84]	; 0x54
  401d04:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401d06:	6323      	str	r3, [r4, #48]	; 0x30
  401d08:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d0a:	f013 0f01 	tst.w	r3, #1
  401d0e:	d1fb      	bne.n	401d08 <UDP_Handler+0x6a0>
  401d10:	e4f7      	b.n	401702 <UDP_Handler+0x9a>
  401d12:	3301      	adds	r3, #1
  401d14:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401d16:	2b04      	cmp	r3, #4
  401d18:	f000 8086 	beq.w	401e28 <UDP_Handler+0x7c0>
  401d1c:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401d1e:	f8de 1018 	ldr.w	r1, [lr, #24]
  401d22:	fa00 f503 	lsl.w	r5, r0, r3
  401d26:	4229      	tst	r1, r5
  401d28:	d0f3      	beq.n	401d12 <UDP_Handler+0x6aa>
  401d2a:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401d2c:	4690      	mov	r8, r2
  401d2e:	009c      	lsls	r4, r3, #2
  401d30:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401d34:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  401d38:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d3a:	f011 0f42 	tst.w	r1, #66	; 0x42
  401d3e:	f47f ae6d 	bne.w	401a1c <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401d42:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d44:	f011 0f01 	tst.w	r1, #1
  401d48:	f47f aeb2 	bne.w	401ab0 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401d4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401d4e:	f011 0f08 	tst.w	r1, #8
  401d52:	d0de      	beq.n	401d12 <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401d54:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d56:	9316      	str	r3, [sp, #88]	; 0x58
  401d58:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401d5a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d5e:	9316      	str	r3, [sp, #88]	; 0x58
  401d60:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401d62:	f023 0308 	bic.w	r3, r3, #8
  401d66:	9316      	str	r3, [sp, #88]	; 0x58
  401d68:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401d6a:	6323      	str	r3, [r4, #48]	; 0x30
  401d6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d6e:	f013 0f08 	tst.w	r3, #8
  401d72:	d1fb      	bne.n	401d6c <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401d74:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401d7e:	f43f acc0 	beq.w	401702 <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d84:	e4bd      	b.n	401702 <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401d86:	4b22      	ldr	r3, [pc, #136]	; (401e10 <UDP_Handler+0x7a8>)
  401d88:	69db      	ldr	r3, [r3, #28]
  401d8a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401d8e:	d050      	beq.n	401e32 <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401d90:	4c1f      	ldr	r4, [pc, #124]	; (401e10 <UDP_Handler+0x7a8>)
  401d92:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  401d96:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  401d98:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  401d9a:	2001      	movs	r0, #1
  401d9c:	4b1f      	ldr	r3, [pc, #124]	; (401e1c <UDP_Handler+0x7b4>)
  401d9e:	4798      	blx	r3
		udd_ack_suspend();
  401da0:	f44f 7380 	mov.w	r3, #256	; 0x100
  401da4:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401da6:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401dac:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401dae:	e4a8      	b.n	401702 <UDP_Handler+0x9a>
		udd_ack_suspend();
  401db0:	4b17      	ldr	r3, [pc, #92]	; (401e10 <UDP_Handler+0x7a8>)
  401db2:	f44f 7280 	mov.w	r2, #256	; 0x100
  401db6:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401db8:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401dbe:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
  401dc4:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401dca:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401dcc:	2022      	movs	r0, #34	; 0x22
  401dce:	4b14      	ldr	r3, [pc, #80]	; (401e20 <UDP_Handler+0x7b8>)
  401dd0:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  401dd2:	2000      	movs	r0, #0
  401dd4:	4b11      	ldr	r3, [pc, #68]	; (401e1c <UDP_Handler+0x7b4>)
  401dd6:	4798      	blx	r3
		goto udd_interrupt_end;
  401dd8:	e493      	b.n	401702 <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  401dda:	4630      	mov	r0, r6
  401ddc:	4b11      	ldr	r3, [pc, #68]	; (401e24 <UDP_Handler+0x7bc>)
  401dde:	4798      	blx	r3
  401de0:	e652      	b.n	401a88 <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  401de2:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  401de6:	4b08      	ldr	r3, [pc, #32]	; (401e08 <UDP_Handler+0x7a0>)
  401de8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  401dec:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  401df0:	2800      	cmp	r0, #0
  401df2:	d0f2      	beq.n	401dda <UDP_Handler+0x772>
			b_full = true;
  401df4:	f04f 0b01 	mov.w	fp, #1
  401df8:	e637      	b.n	401a6a <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  401dfa:	4630      	mov	r0, r6
  401dfc:	4b09      	ldr	r3, [pc, #36]	; (401e24 <UDP_Handler+0x7bc>)
  401dfe:	4798      	blx	r3
	if ((b_full || b_short) &&
  401e00:	45ca      	cmp	sl, r9
  401e02:	f63f ae41 	bhi.w	401a88 <UDP_Handler+0x420>
  401e06:	e47c      	b.n	401702 <UDP_Handler+0x9a>
  401e08:	20000d2c 	.word	0x20000d2c
  401e0c:	20000128 	.word	0x20000128
  401e10:	40034000 	.word	0x40034000
  401e14:	004013a1 	.word	0x004013a1
  401e18:	004014b5 	.word	0x004014b5
  401e1c:	004010ad 	.word	0x004010ad
  401e20:	0040342d 	.word	0x0040342d
  401e24:	004013e1 	.word	0x004013e1
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401e28:	4b4b      	ldr	r3, [pc, #300]	; (401f58 <UDP_Handler+0x8f0>)
  401e2a:	699b      	ldr	r3, [r3, #24]
  401e2c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401e30:	d1a9      	bne.n	401d86 <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e32:	4b49      	ldr	r3, [pc, #292]	; (401f58 <UDP_Handler+0x8f0>)
  401e34:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401e36:	f413 7f00 	tst.w	r3, #512	; 0x200
  401e3a:	d004      	beq.n	401e46 <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e3c:	4b46      	ldr	r3, [pc, #280]	; (401f58 <UDP_Handler+0x8f0>)
  401e3e:	69db      	ldr	r3, [r3, #28]
  401e40:	f413 7f00 	tst.w	r3, #512	; 0x200
  401e44:	d1a4      	bne.n	401d90 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401e46:	4b44      	ldr	r3, [pc, #272]	; (401f58 <UDP_Handler+0x8f0>)
  401e48:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401e4a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401e4e:	d004      	beq.n	401e5a <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401e50:	4b41      	ldr	r3, [pc, #260]	; (401f58 <UDP_Handler+0x8f0>)
  401e52:	69db      	ldr	r3, [r3, #28]
  401e54:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401e58:	d19a      	bne.n	401d90 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401e5a:	4b3f      	ldr	r3, [pc, #252]	; (401f58 <UDP_Handler+0x8f0>)
  401e5c:	699b      	ldr	r3, [r3, #24]
  401e5e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e62:	d004      	beq.n	401e6e <UDP_Handler+0x806>
  401e64:	4b3c      	ldr	r3, [pc, #240]	; (401f58 <UDP_Handler+0x8f0>)
  401e66:	69db      	ldr	r3, [r3, #28]
  401e68:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e6c:	d1a0      	bne.n	401db0 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401e6e:	4b3a      	ldr	r3, [pc, #232]	; (401f58 <UDP_Handler+0x8f0>)
  401e70:	69db      	ldr	r3, [r3, #28]
  401e72:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401e76:	f43f ac44 	beq.w	401702 <UDP_Handler+0x9a>
		udd_ack_reset();
  401e7a:	4c37      	ldr	r4, [pc, #220]	; (401f58 <UDP_Handler+0x8f0>)
  401e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e80:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401e82:	4e36      	ldr	r6, [pc, #216]	; (401f5c <UDP_Handler+0x8f4>)
  401e84:	2201      	movs	r2, #1
  401e86:	4611      	mov	r1, r2
  401e88:	4630      	mov	r0, r6
  401e8a:	4d35      	ldr	r5, [pc, #212]	; (401f60 <UDP_Handler+0x8f8>)
  401e8c:	47a8      	blx	r5
  401e8e:	2202      	movs	r2, #2
  401e90:	2101      	movs	r1, #1
  401e92:	f106 0014 	add.w	r0, r6, #20
  401e96:	47a8      	blx	r5
  401e98:	2203      	movs	r2, #3
  401e9a:	2101      	movs	r1, #1
  401e9c:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401ea0:	47a8      	blx	r5
		udc_reset();
  401ea2:	4b30      	ldr	r3, [pc, #192]	; (401f64 <UDP_Handler+0x8fc>)
  401ea4:	4798      	blx	r3
		udd_disable_address_state();
  401ea6:	6863      	ldr	r3, [r4, #4]
  401ea8:	f023 0301 	bic.w	r3, r3, #1
  401eac:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401eae:	6863      	ldr	r3, [r4, #4]
  401eb0:	f023 0302 	bic.w	r3, r3, #2
  401eb4:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401eb6:	68a3      	ldr	r3, [r4, #8]
  401eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401ebc:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401ebe:	68a3      	ldr	r3, [r4, #8]
  401ec0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ec4:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401ec6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ec8:	9318      	str	r3, [sp, #96]	; 0x60
  401eca:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ecc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ed0:	9318      	str	r3, [sp, #96]	; 0x60
  401ed2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ed4:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401edc:	9318      	str	r3, [sp, #96]	; 0x60
  401ede:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401ee4:	9318      	str	r3, [sp, #96]	; 0x60
  401ee6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ee8:	6323      	str	r3, [r4, #48]	; 0x30
  401eea:	4622      	mov	r2, r4
  401eec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401eee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401ef2:	d0fb      	beq.n	401eec <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401ef4:	4a18      	ldr	r2, [pc, #96]	; (401f58 <UDP_Handler+0x8f0>)
  401ef6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ef8:	9319      	str	r3, [sp, #100]	; 0x64
  401efa:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401efc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f00:	9319      	str	r3, [sp, #100]	; 0x64
  401f02:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401f08:	9319      	str	r3, [sp, #100]	; 0x64
  401f0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401f0c:	6313      	str	r3, [r2, #48]	; 0x30
  401f0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f10:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401f14:	d0fb      	beq.n	401f0e <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401f16:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f1a:	fab3 f383 	clz	r3, r3
  401f1e:	095b      	lsrs	r3, r3, #5
  401f20:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401f22:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401f24:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f28:	2200      	movs	r2, #0
  401f2a:	4b0f      	ldr	r3, [pc, #60]	; (401f68 <UDP_Handler+0x900>)
  401f2c:	701a      	strb	r2, [r3, #0]
	return flags;
  401f2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401f30:	2101      	movs	r1, #1
  401f32:	4a09      	ldr	r2, [pc, #36]	; (401f58 <UDP_Handler+0x8f0>)
  401f34:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401f36:	b123      	cbz	r3, 401f42 <UDP_Handler+0x8da>
		cpu_irq_enable();
  401f38:	4b0b      	ldr	r3, [pc, #44]	; (401f68 <UDP_Handler+0x900>)
  401f3a:	7019      	strb	r1, [r3, #0]
  401f3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f40:	b662      	cpsie	i
		udd_ctrl_init();
  401f42:	4b0a      	ldr	r3, [pc, #40]	; (401f6c <UDP_Handler+0x904>)
  401f44:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401f46:	4b04      	ldr	r3, [pc, #16]	; (401f58 <UDP_Handler+0x8f0>)
  401f48:	f44f 7280 	mov.w	r2, #256	; 0x100
  401f4c:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401f52:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401f54:	f7ff bbd5 	b.w	401702 <UDP_Handler+0x9a>
  401f58:	40034000 	.word	0x40034000
  401f5c:	20000d2c 	.word	0x20000d2c
  401f60:	004013a1 	.word	0x004013a1
  401f64:	004009b1 	.word	0x004009b1
  401f68:	20000128 	.word	0x20000128
  401f6c:	00401151 	.word	0x00401151

00401f70 <udd_attach>:
{
  401f70:	b510      	push	{r4, lr}
  401f72:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401f74:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f78:	fab3 f383 	clz	r3, r3
  401f7c:	095b      	lsrs	r3, r3, #5
  401f7e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401f80:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401f82:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f86:	2200      	movs	r2, #0
  401f88:	4b14      	ldr	r3, [pc, #80]	; (401fdc <udd_attach+0x6c>)
  401f8a:	701a      	strb	r2, [r3, #0]
	return flags;
  401f8c:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  401f8e:	2001      	movs	r0, #1
  401f90:	4b13      	ldr	r3, [pc, #76]	; (401fe0 <udd_attach+0x70>)
  401f92:	4798      	blx	r3
	udd_enable_periph_ck();
  401f94:	2022      	movs	r0, #34	; 0x22
  401f96:	4b13      	ldr	r3, [pc, #76]	; (401fe4 <udd_attach+0x74>)
  401f98:	4798      	blx	r3
	udd_enable_transceiver();
  401f9a:	4b13      	ldr	r3, [pc, #76]	; (401fe8 <udd_attach+0x78>)
  401f9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401fa2:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401fa4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401faa:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  401fac:	f44f 7280 	mov.w	r2, #256	; 0x100
  401fb0:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401fb6:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
  401fbc:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401fc2:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401fc8:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401fca:	b12c      	cbz	r4, 401fd8 <udd_attach+0x68>
		cpu_irq_enable();
  401fcc:	2201      	movs	r2, #1
  401fce:	4b03      	ldr	r3, [pc, #12]	; (401fdc <udd_attach+0x6c>)
  401fd0:	701a      	strb	r2, [r3, #0]
  401fd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401fd6:	b662      	cpsie	i
}
  401fd8:	b002      	add	sp, #8
  401fda:	bd10      	pop	{r4, pc}
  401fdc:	20000128 	.word	0x20000128
  401fe0:	004010ad 	.word	0x004010ad
  401fe4:	004033d9 	.word	0x004033d9
  401fe8:	40034000 	.word	0x40034000

00401fec <udd_enable>:
{
  401fec:	b530      	push	{r4, r5, lr}
  401fee:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401ff0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ff4:	fab3 f383 	clz	r3, r3
  401ff8:	095b      	lsrs	r3, r3, #5
  401ffa:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401ffc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401ffe:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402002:	2400      	movs	r4, #0
  402004:	4b27      	ldr	r3, [pc, #156]	; (4020a4 <udd_enable+0xb8>)
  402006:	701c      	strb	r4, [r3, #0]
	return flags;
  402008:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  40200a:	2022      	movs	r0, #34	; 0x22
  40200c:	4b26      	ldr	r3, [pc, #152]	; (4020a8 <udd_enable+0xbc>)
  40200e:	4798      	blx	r3
	sysclk_enable_usb();
  402010:	4b26      	ldr	r3, [pc, #152]	; (4020ac <udd_enable+0xc0>)
  402012:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  402014:	4b26      	ldr	r3, [pc, #152]	; (4020b0 <udd_enable+0xc4>)
  402016:	2250      	movs	r2, #80	; 0x50
  402018:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40201c:	2204      	movs	r2, #4
  40201e:	605a      	str	r2, [r3, #4]
  402020:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  402022:	4824      	ldr	r0, [pc, #144]	; (4020b4 <udd_enable+0xc8>)
  402024:	009a      	lsls	r2, r3, #2
  402026:	18d1      	adds	r1, r2, r3
  402028:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40202c:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  40202e:	441a      	add	r2, r3
  402030:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402034:	f001 0183 	and.w	r1, r1, #131	; 0x83
  402038:	f36f 11c7 	bfc	r1, #7, #1
  40203c:	7451      	strb	r1, [r2, #17]
  40203e:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402040:	2b03      	cmp	r3, #3
  402042:	d1ef      	bne.n	402024 <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  402044:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402048:	4b1b      	ldr	r3, [pc, #108]	; (4020b8 <udd_enable+0xcc>)
  40204a:	4798      	blx	r3
	udd_b_idle = false;
  40204c:	2200      	movs	r2, #0
  40204e:	4b1b      	ldr	r3, [pc, #108]	; (4020bc <udd_enable+0xd0>)
  402050:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  402052:	4b1b      	ldr	r3, [pc, #108]	; (4020c0 <udd_enable+0xd4>)
  402054:	781b      	ldrb	r3, [r3, #0]
  402056:	2bff      	cmp	r3, #255	; 0xff
  402058:	d022      	beq.n	4020a0 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40205a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40205e:	fab3 f383 	clz	r3, r3
  402062:	095b      	lsrs	r3, r3, #5
  402064:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402066:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402068:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40206c:	2200      	movs	r2, #0
  40206e:	4b0d      	ldr	r3, [pc, #52]	; (4020a4 <udd_enable+0xb8>)
  402070:	701a      	strb	r2, [r3, #0]
	return flags;
  402072:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  402074:	4a12      	ldr	r2, [pc, #72]	; (4020c0 <udd_enable+0xd4>)
  402076:	7813      	ldrb	r3, [r2, #0]
  402078:	3301      	adds	r3, #1
  40207a:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40207c:	b129      	cbz	r1, 40208a <udd_enable+0x9e>
		cpu_irq_enable();
  40207e:	2201      	movs	r2, #1
  402080:	4b08      	ldr	r3, [pc, #32]	; (4020a4 <udd_enable+0xb8>)
  402082:	701a      	strb	r2, [r3, #0]
  402084:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402088:	b662      	cpsie	i
	udd_attach();
  40208a:	4b0e      	ldr	r3, [pc, #56]	; (4020c4 <udd_enable+0xd8>)
  40208c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  40208e:	b12d      	cbz	r5, 40209c <udd_enable+0xb0>
		cpu_irq_enable();
  402090:	2201      	movs	r2, #1
  402092:	4b04      	ldr	r3, [pc, #16]	; (4020a4 <udd_enable+0xb8>)
  402094:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  402096:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40209a:	b662      	cpsie	i
}
  40209c:	b003      	add	sp, #12
  40209e:	bd30      	pop	{r4, r5, pc}
  4020a0:	e7fe      	b.n	4020a0 <udd_enable+0xb4>
  4020a2:	bf00      	nop
  4020a4:	20000128 	.word	0x20000128
  4020a8:	004033d9 	.word	0x004033d9
  4020ac:	00403091 	.word	0x00403091
  4020b0:	e000e100 	.word	0xe000e100
  4020b4:	20000d2c 	.word	0x20000d2c
  4020b8:	004034a1 	.word	0x004034a1
  4020bc:	20000d25 	.word	0x20000d25
  4020c0:	200017c0 	.word	0x200017c0
  4020c4:	00401f71 	.word	0x00401f71

004020c8 <udd_is_high_speed>:
}
  4020c8:	2000      	movs	r0, #0
  4020ca:	4770      	bx	lr

004020cc <udd_set_address>:
	udd_disable_address_state();
  4020cc:	4b0d      	ldr	r3, [pc, #52]	; (402104 <udd_set_address+0x38>)
  4020ce:	685a      	ldr	r2, [r3, #4]
  4020d0:	f022 0201 	bic.w	r2, r2, #1
  4020d4:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  4020d6:	689a      	ldr	r2, [r3, #8]
  4020d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4020dc:	609a      	str	r2, [r3, #8]
	if (address) {
  4020de:	4602      	mov	r2, r0
  4020e0:	b170      	cbz	r0, 402100 <udd_set_address+0x34>
		udd_configure_address(address);
  4020e2:	6898      	ldr	r0, [r3, #8]
  4020e4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  4020e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  4020ec:	4310      	orrs	r0, r2
  4020ee:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  4020f0:	689a      	ldr	r2, [r3, #8]
  4020f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4020f6:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  4020f8:	685a      	ldr	r2, [r3, #4]
  4020fa:	f042 0201 	orr.w	r2, r2, #1
  4020fe:	605a      	str	r2, [r3, #4]
  402100:	4770      	bx	lr
  402102:	bf00      	nop
  402104:	40034000 	.word	0x40034000

00402108 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  402108:	4b05      	ldr	r3, [pc, #20]	; (402120 <udd_getaddress+0x18>)
  40210a:	685b      	ldr	r3, [r3, #4]
  40210c:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402110:	bf1d      	ittte	ne
  402112:	4b03      	ldrne	r3, [pc, #12]	; (402120 <udd_getaddress+0x18>)
  402114:	6898      	ldrne	r0, [r3, #8]
  402116:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  40211a:	2000      	moveq	r0, #0
}
  40211c:	4770      	bx	lr
  40211e:	bf00      	nop
  402120:	40034000 	.word	0x40034000

00402124 <udd_get_frame_number>:
	return udd_frame_number();
  402124:	4b02      	ldr	r3, [pc, #8]	; (402130 <udd_get_frame_number+0xc>)
  402126:	6818      	ldr	r0, [r3, #0]
}
  402128:	f3c0 000a 	ubfx	r0, r0, #0, #11
  40212c:	4770      	bx	lr
  40212e:	bf00      	nop
  402130:	40034000 	.word	0x40034000

00402134 <udd_get_micro_frame_number>:
}
  402134:	2000      	movs	r0, #0
  402136:	4770      	bx	lr

00402138 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  402138:	4b01      	ldr	r3, [pc, #4]	; (402140 <udd_set_setup_payload+0x8>)
  40213a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  40213c:	8199      	strh	r1, [r3, #12]
  40213e:	4770      	bx	lr
  402140:	200017c8 	.word	0x200017c8

00402144 <udd_ep_alloc>:
{
  402144:	b5f0      	push	{r4, r5, r6, r7, lr}
  402146:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  402148:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  40214c:	2c03      	cmp	r4, #3
  40214e:	d867      	bhi.n	402220 <udd_ep_alloc+0xdc>
  402150:	00a3      	lsls	r3, r4, #2
  402152:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402156:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  40215a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  40215c:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402160:	d161      	bne.n	402226 <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402162:	f001 0503 	and.w	r5, r1, #3
  402166:	2d01      	cmp	r5, #1
  402168:	d050      	beq.n	40220c <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  40216a:	1f25      	subs	r5, r4, #4
  40216c:	b2ed      	uxtb	r5, r5
  40216e:	2d02      	cmp	r5, #2
  402170:	bf34      	ite	cc
  402172:	f44f 7500 	movcc.w	r5, #512	; 0x200
  402176:	2540      	movcs	r5, #64	; 0x40
  402178:	4295      	cmp	r5, r2
  40217a:	db58      	blt.n	40222e <udd_ep_alloc+0xea>
  40217c:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  40217e:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  402180:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  402184:	4d2b      	ldr	r5, [pc, #172]	; (402234 <udd_ep_alloc+0xf0>)
  402186:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  40218a:	f105 0710 	add.w	r7, r5, #16
  40218e:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  402192:	f362 0e09 	bfi	lr, r2, #0, #10
  402196:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  40219a:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  40219c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  4021a0:	f36f 1245 	bfc	r2, #5, #1
  4021a4:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  4021a6:	2800      	cmp	r0, #0
  4021a8:	db35      	blt.n	402216 <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  4021aa:	4e23      	ldr	r6, [pc, #140]	; (402238 <udd_ep_alloc+0xf4>)
  4021ac:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  4021ae:	2201      	movs	r2, #1
  4021b0:	fa02 f404 	lsl.w	r4, r2, r4
  4021b4:	4325      	orrs	r5, r4
  4021b6:	62b5      	str	r5, [r6, #40]	; 0x28
  4021b8:	4635      	mov	r5, r6
  4021ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4021bc:	4214      	tst	r4, r2
  4021be:	d0fc      	beq.n	4021ba <udd_ep_alloc+0x76>
  4021c0:	4d1d      	ldr	r5, [pc, #116]	; (402238 <udd_ep_alloc+0xf4>)
  4021c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  4021c4:	ea22 0404 	bic.w	r4, r2, r4
  4021c8:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  4021ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021cc:	9201      	str	r2, [sp, #4]
  4021ce:	9a01      	ldr	r2, [sp, #4]
  4021d0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4021d4:	9201      	str	r2, [sp, #4]
  4021d6:	9a01      	ldr	r2, [sp, #4]
  4021d8:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  4021dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4021e0:	9201      	str	r2, [sp, #4]
  4021e2:	2800      	cmp	r0, #0
  4021e4:	ea4f 2201 	mov.w	r2, r1, lsl #8
  4021e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4021ec:	bfb4      	ite	lt
  4021ee:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  4021f2:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  4021f6:	9901      	ldr	r1, [sp, #4]
  4021f8:	4311      	orrs	r1, r2
  4021fa:	9101      	str	r1, [sp, #4]
  4021fc:	9901      	ldr	r1, [sp, #4]
  4021fe:	6319      	str	r1, [r3, #48]	; 0x30
  402200:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402202:	ea32 0101 	bics.w	r1, r2, r1
  402206:	d1fb      	bne.n	402200 <udd_ep_alloc+0xbc>
	return true;
  402208:	2001      	movs	r0, #1
  40220a:	e00a      	b.n	402222 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40220c:	b16c      	cbz	r4, 40222a <udd_ep_alloc+0xe6>
  40220e:	2c03      	cmp	r4, #3
  402210:	d1ab      	bne.n	40216a <udd_ep_alloc+0x26>
		return false;
  402212:	2000      	movs	r0, #0
  402214:	e005      	b.n	402222 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  402216:	787a      	ldrb	r2, [r7, #1]
  402218:	f36f 0283 	bfc	r2, #2, #2
  40221c:	707a      	strb	r2, [r7, #1]
  40221e:	e7c4      	b.n	4021aa <udd_ep_alloc+0x66>
		return false;
  402220:	2000      	movs	r0, #0
}
  402222:	b003      	add	sp, #12
  402224:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  402226:	2000      	movs	r0, #0
  402228:	e7fb      	b.n	402222 <udd_ep_alloc+0xde>
		return false;
  40222a:	2000      	movs	r0, #0
  40222c:	e7f9      	b.n	402222 <udd_ep_alloc+0xde>
		return false;
  40222e:	2000      	movs	r0, #0
  402230:	e7f7      	b.n	402222 <udd_ep_alloc+0xde>
  402232:	bf00      	nop
  402234:	20000d2c 	.word	0x20000d2c
  402238:	40034000 	.word	0x40034000

0040223c <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40223c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402240:	2a03      	cmp	r2, #3
  402242:	d822      	bhi.n	40228a <udd_ep_free+0x4e>
{
  402244:	b500      	push	{lr}
  402246:	b083      	sub	sp, #12
  402248:	0091      	lsls	r1, r2, #2
  40224a:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  40224e:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  402252:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  402254:	9301      	str	r3, [sp, #4]
  402256:	9b01      	ldr	r3, [sp, #4]
  402258:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40225c:	9301      	str	r3, [sp, #4]
  40225e:	9b01      	ldr	r3, [sp, #4]
  402260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  402264:	9301      	str	r3, [sp, #4]
  402266:	9b01      	ldr	r3, [sp, #4]
  402268:	630b      	str	r3, [r1, #48]	; 0x30
  40226a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40226c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  402270:	d1fb      	bne.n	40226a <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402272:	1e50      	subs	r0, r2, #1
  402274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402278:	2101      	movs	r1, #1
  40227a:	4b04      	ldr	r3, [pc, #16]	; (40228c <udd_ep_free+0x50>)
  40227c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402280:	4b03      	ldr	r3, [pc, #12]	; (402290 <udd_ep_free+0x54>)
  402282:	4798      	blx	r3
}
  402284:	b003      	add	sp, #12
  402286:	f85d fb04 	ldr.w	pc, [sp], #4
  40228a:	4770      	bx	lr
  40228c:	20000d2c 	.word	0x20000d2c
  402290:	004013a1 	.word	0x004013a1

00402294 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402294:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402298:	2803      	cmp	r0, #3
  40229a:	d815      	bhi.n	4022c8 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  40229c:	1e43      	subs	r3, r0, #1
  40229e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4022a2:	4a0a      	ldr	r2, [pc, #40]	; (4022cc <udd_ep_is_halted+0x38>)
  4022a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4022a8:	7c5b      	ldrb	r3, [r3, #17]
  4022aa:	f013 0f20 	tst.w	r3, #32
  4022ae:	d109      	bne.n	4022c4 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  4022b0:	300c      	adds	r0, #12
  4022b2:	4b07      	ldr	r3, [pc, #28]	; (4022d0 <udd_ep_is_halted+0x3c>)
  4022b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  4022b8:	f013 0f28 	tst.w	r3, #40	; 0x28
  4022bc:	bf14      	ite	ne
  4022be:	2001      	movne	r0, #1
  4022c0:	2000      	moveq	r0, #0
  4022c2:	4770      	bx	lr
  4022c4:	2001      	movs	r0, #1
  4022c6:	4770      	bx	lr
		return false;
  4022c8:	2000      	movs	r0, #0
}
  4022ca:	4770      	bx	lr
  4022cc:	20000d2c 	.word	0x20000d2c
  4022d0:	40034000 	.word	0x40034000

004022d4 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4022d4:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4022d8:	2903      	cmp	r1, #3
  4022da:	d85f      	bhi.n	40239c <udd_ep_set_halt+0xc8>
{
  4022dc:	b410      	push	{r4}
  4022de:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4022e0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4022e4:	fab3 f383 	clz	r3, r3
  4022e8:	095b      	lsrs	r3, r3, #5
  4022ea:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4022ec:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4022ee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4022f2:	2200      	movs	r2, #0
  4022f4:	4b2c      	ldr	r3, [pc, #176]	; (4023a8 <udd_ep_set_halt+0xd4>)
  4022f6:	701a      	strb	r2, [r3, #0]
	return flags;
  4022f8:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4022fa:	f010 0f80 	tst.w	r0, #128	; 0x80
  4022fe:	d124      	bne.n	40234a <udd_ep_set_halt+0x76>
  402300:	008a      	lsls	r2, r1, #2
  402302:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402306:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  40230a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40230c:	9300      	str	r3, [sp, #0]
  40230e:	9b00      	ldr	r3, [sp, #0]
  402310:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402314:	9300      	str	r3, [sp, #0]
  402316:	9b00      	ldr	r3, [sp, #0]
  402318:	f043 0320 	orr.w	r3, r3, #32
  40231c:	9300      	str	r3, [sp, #0]
  40231e:	9b00      	ldr	r3, [sp, #0]
  402320:	6313      	str	r3, [r2, #48]	; 0x30
  402322:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402324:	f013 0f20 	tst.w	r3, #32
  402328:	d0fb      	beq.n	402322 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  40232a:	2301      	movs	r3, #1
  40232c:	fa03 f101 	lsl.w	r1, r3, r1
  402330:	4b1e      	ldr	r3, [pc, #120]	; (4023ac <udd_ep_set_halt+0xd8>)
  402332:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  402334:	2c00      	cmp	r4, #0
  402336:	d035      	beq.n	4023a4 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402338:	2001      	movs	r0, #1
  40233a:	4b1b      	ldr	r3, [pc, #108]	; (4023a8 <udd_ep_set_halt+0xd4>)
  40233c:	7018      	strb	r0, [r3, #0]
  40233e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402342:	b662      	cpsie	i
}
  402344:	b003      	add	sp, #12
  402346:	bc10      	pop	{r4}
  402348:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40234a:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40234c:	f101 020c 	add.w	r2, r1, #12
  402350:	4816      	ldr	r0, [pc, #88]	; (4023ac <udd_ep_set_halt+0xd8>)
  402352:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  402356:	f012 0f10 	tst.w	r2, #16
  40235a:	d109      	bne.n	402370 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  40235c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402360:	4813      	ldr	r0, [pc, #76]	; (4023b0 <udd_ep_set_halt+0xdc>)
  402362:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402366:	7c52      	ldrb	r2, [r2, #17]
  402368:	f3c2 0281 	ubfx	r2, r2, #2, #2
  40236c:	2a01      	cmp	r2, #1
  40236e:	ddc7      	ble.n	402300 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  402370:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402374:	4b0e      	ldr	r3, [pc, #56]	; (4023b0 <udd_ep_set_halt+0xdc>)
  402376:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40237a:	7c5a      	ldrb	r2, [r3, #17]
  40237c:	f042 0220 	orr.w	r2, r2, #32
  402380:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402382:	2301      	movs	r3, #1
  402384:	fa03 f101 	lsl.w	r1, r3, r1
  402388:	4b08      	ldr	r3, [pc, #32]	; (4023ac <udd_ep_set_halt+0xd8>)
  40238a:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  40238c:	b144      	cbz	r4, 4023a0 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  40238e:	2001      	movs	r0, #1
  402390:	4b05      	ldr	r3, [pc, #20]	; (4023a8 <udd_ep_set_halt+0xd4>)
  402392:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  402394:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402398:	b662      	cpsie	i
  40239a:	e7d3      	b.n	402344 <udd_ep_set_halt+0x70>
		return false;
  40239c:	2000      	movs	r0, #0
  40239e:	4770      	bx	lr
		return true;
  4023a0:	2001      	movs	r0, #1
  4023a2:	e7cf      	b.n	402344 <udd_ep_set_halt+0x70>
	return true;
  4023a4:	2001      	movs	r0, #1
  4023a6:	e7cd      	b.n	402344 <udd_ep_set_halt+0x70>
  4023a8:	20000128 	.word	0x20000128
  4023ac:	40034000 	.word	0x40034000
  4023b0:	20000d2c 	.word	0x20000d2c

004023b4 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  4023b4:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  4023b8:	2803      	cmp	r0, #3
  4023ba:	d85e      	bhi.n	40247a <udd_ep_clear_halt+0xc6>
{
  4023bc:	b530      	push	{r4, r5, lr}
  4023be:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  4023c0:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  4023c2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4023c6:	4b2f      	ldr	r3, [pc, #188]	; (402484 <udd_ep_clear_halt+0xd0>)
  4023c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4023cc:	7c5a      	ldrb	r2, [r3, #17]
  4023ce:	f36f 1245 	bfc	r2, #5, #1
  4023d2:	745a      	strb	r2, [r3, #17]
  4023d4:	0083      	lsls	r3, r0, #2
  4023d6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4023da:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  4023de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023e0:	f012 0f20 	tst.w	r2, #32
  4023e4:	d04b      	beq.n	40247e <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  4023e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023e8:	9200      	str	r2, [sp, #0]
  4023ea:	9a00      	ldr	r2, [sp, #0]
  4023ec:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4023f0:	9200      	str	r2, [sp, #0]
  4023f2:	9a00      	ldr	r2, [sp, #0]
  4023f4:	f022 0220 	bic.w	r2, r2, #32
  4023f8:	9200      	str	r2, [sp, #0]
  4023fa:	9a00      	ldr	r2, [sp, #0]
  4023fc:	631a      	str	r2, [r3, #48]	; 0x30
  4023fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402400:	f012 0f20 	tst.w	r2, #32
  402404:	d1fb      	bne.n	4023fe <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  402406:	4d20      	ldr	r5, [pc, #128]	; (402488 <udd_ep_clear_halt+0xd4>)
  402408:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  40240a:	2201      	movs	r2, #1
  40240c:	fa02 f000 	lsl.w	r0, r2, r0
  402410:	4301      	orrs	r1, r0
  402412:	62a9      	str	r1, [r5, #40]	; 0x28
  402414:	4629      	mov	r1, r5
  402416:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402418:	4210      	tst	r0, r2
  40241a:	d0fc      	beq.n	402416 <udd_ep_clear_halt+0x62>
  40241c:	491a      	ldr	r1, [pc, #104]	; (402488 <udd_ep_clear_halt+0xd4>)
  40241e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402420:	ea22 0000 	bic.w	r0, r2, r0
  402424:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  402426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402428:	9201      	str	r2, [sp, #4]
  40242a:	9a01      	ldr	r2, [sp, #4]
  40242c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402430:	9201      	str	r2, [sp, #4]
  402432:	9a01      	ldr	r2, [sp, #4]
  402434:	f022 0208 	bic.w	r2, r2, #8
  402438:	9201      	str	r2, [sp, #4]
  40243a:	9a01      	ldr	r2, [sp, #4]
  40243c:	631a      	str	r2, [r3, #48]	; 0x30
  40243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402440:	f012 0f08 	tst.w	r2, #8
  402444:	d1fb      	bne.n	40243e <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  402446:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40244a:	4a0e      	ldr	r2, [pc, #56]	; (402484 <udd_ep_clear_halt+0xd0>)
  40244c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402450:	7c5b      	ldrb	r3, [r3, #17]
  402452:	f013 0f10 	tst.w	r3, #16
  402456:	d101      	bne.n	40245c <udd_ep_clear_halt+0xa8>
	return true;
  402458:	2001      	movs	r0, #1
  40245a:	e011      	b.n	402480 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  40245c:	4611      	mov	r1, r2
  40245e:	00a2      	lsls	r2, r4, #2
  402460:	1913      	adds	r3, r2, r4
  402462:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  402466:	7c58      	ldrb	r0, [r3, #17]
  402468:	f36f 1004 	bfc	r0, #4, #1
  40246c:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  40246e:	4414      	add	r4, r2
  402470:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  402474:	4798      	blx	r3
	return true;
  402476:	2001      	movs	r0, #1
  402478:	e002      	b.n	402480 <udd_ep_clear_halt+0xcc>
		return false;
  40247a:	2000      	movs	r0, #0
  40247c:	4770      	bx	lr
	return true;
  40247e:	2001      	movs	r0, #1
}
  402480:	b003      	add	sp, #12
  402482:	bd30      	pop	{r4, r5, pc}
  402484:	20000d2c 	.word	0x20000d2c
  402488:	40034000 	.word	0x40034000

0040248c <udd_ep_run>:
{
  40248c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40248e:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402490:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402494:	2f03      	cmp	r7, #3
  402496:	f200 80a2 	bhi.w	4025de <udd_ep_run+0x152>
  40249a:	00bc      	lsls	r4, r7, #2
  40249c:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4024a0:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  4024a4:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4024a6:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4024aa:	f000 809b 	beq.w	4025e4 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  4024ae:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  4024b0:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4024b4:	4e50      	ldr	r6, [pc, #320]	; (4025f8 <udd_ep_run+0x16c>)
  4024b6:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4024ba:	7c76      	ldrb	r6, [r6, #17]
  4024bc:	f016 0f20 	tst.w	r6, #32
  4024c0:	f040 8092 	bne.w	4025e8 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4024c4:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4024c6:	f016 0f20 	tst.w	r6, #32
  4024ca:	f040 808f 	bne.w	4025ec <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4024ce:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4024d2:	fab6 f686 	clz	r6, r6
  4024d6:	0976      	lsrs	r6, r6, #5
  4024d8:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4024da:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4024dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4024e0:	f04f 0e00 	mov.w	lr, #0
  4024e4:	4e45      	ldr	r6, [pc, #276]	; (4025fc <udd_ep_run+0x170>)
  4024e6:	f886 e000 	strb.w	lr, [r6]
	return flags;
  4024ea:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  4024ee:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4024f2:	4e41      	ldr	r6, [pc, #260]	; (4025f8 <udd_ep_run+0x16c>)
  4024f4:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4024f8:	7c76      	ldrb	r6, [r6, #17]
  4024fa:	f016 0f10 	tst.w	r6, #16
  4024fe:	d00a      	beq.n	402516 <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402500:	f1bc 0f00 	cmp.w	ip, #0
  402504:	d074      	beq.n	4025f0 <udd_ep_run+0x164>
		cpu_irq_enable();
  402506:	2201      	movs	r2, #1
  402508:	4b3c      	ldr	r3, [pc, #240]	; (4025fc <udd_ep_run+0x170>)
  40250a:	701a      	strb	r2, [r3, #0]
  40250c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402510:	b662      	cpsie	i
		return false; // Job already on going
  402512:	2000      	movs	r0, #0
  402514:	e064      	b.n	4025e0 <udd_ep_run+0x154>
	ptr_job->busy = true;
  402516:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40251a:	4e37      	ldr	r6, [pc, #220]	; (4025f8 <udd_ep_run+0x16c>)
  40251c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402520:	f896 e011 	ldrb.w	lr, [r6, #17]
  402524:	f04e 0e10 	orr.w	lr, lr, #16
  402528:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  40252c:	f1bc 0f00 	cmp.w	ip, #0
  402530:	d007      	beq.n	402542 <udd_ep_run+0xb6>
		cpu_irq_enable();
  402532:	f04f 0e01 	mov.w	lr, #1
  402536:	4e31      	ldr	r6, [pc, #196]	; (4025fc <udd_ep_run+0x170>)
  402538:	f886 e000 	strb.w	lr, [r6]
  __ASM volatile ("dmb 0xF":::"memory");
  40253c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402540:	b662      	cpsie	i
	ptr_job->buf = buf;
  402542:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 4025f8 <udd_ep_run+0x16c>
  402546:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  40254a:	00b6      	lsls	r6, r6, #2
  40254c:	eb0c 0e06 	add.w	lr, ip, r6
  402550:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  402554:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  402558:	2200      	movs	r2, #0
  40255a:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  40255e:	9a08      	ldr	r2, [sp, #32]
  402560:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402564:	b911      	cbnz	r1, 40256c <udd_ep_run+0xe0>
  402566:	fab3 f183 	clz	r1, r3
  40256a:	0949      	lsrs	r1, r1, #5
  40256c:	4a22      	ldr	r2, [pc, #136]	; (4025f8 <udd_ep_run+0x16c>)
  40256e:	00ae      	lsls	r6, r5, #2
  402570:	1973      	adds	r3, r6, r5
  402572:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402576:	7c5b      	ldrb	r3, [r3, #17]
  402578:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  40257c:	4435      	add	r5, r6
  40257e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  402582:	f36f 13c7 	bfc	r3, #7, #1
  402586:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402588:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40258c:	fab3 f383 	clz	r3, r3
  402590:	095b      	lsrs	r3, r3, #5
  402592:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402594:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402596:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40259a:	2200      	movs	r2, #0
  40259c:	4b17      	ldr	r3, [pc, #92]	; (4025fc <udd_ep_run+0x170>)
  40259e:	701a      	strb	r2, [r3, #0]
	return flags;
  4025a0:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  4025a2:	2301      	movs	r3, #1
  4025a4:	40bb      	lsls	r3, r7
  4025a6:	4a16      	ldr	r2, [pc, #88]	; (402600 <udd_ep_run+0x174>)
  4025a8:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  4025aa:	f010 0f80 	tst.w	r0, #128	; 0x80
  4025ae:	d107      	bne.n	4025c0 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  4025b0:	b305      	cbz	r5, 4025f4 <udd_ep_run+0x168>
		cpu_irq_enable();
  4025b2:	2001      	movs	r0, #1
  4025b4:	4b11      	ldr	r3, [pc, #68]	; (4025fc <udd_ep_run+0x170>)
  4025b6:	7018      	strb	r0, [r3, #0]
  4025b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025bc:	b662      	cpsie	i
  4025be:	e00f      	b.n	4025e0 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  4025c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4025c2:	f013 0f11 	tst.w	r3, #17
  4025c6:	d1f3      	bne.n	4025b0 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  4025c8:	2101      	movs	r1, #1
  4025ca:	4638      	mov	r0, r7
  4025cc:	4b0d      	ldr	r3, [pc, #52]	; (402604 <udd_ep_run+0x178>)
  4025ce:	4798      	blx	r3
  4025d0:	2800      	cmp	r0, #0
  4025d2:	d0ed      	beq.n	4025b0 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  4025d4:	2100      	movs	r1, #0
  4025d6:	4638      	mov	r0, r7
  4025d8:	4b0a      	ldr	r3, [pc, #40]	; (402604 <udd_ep_run+0x178>)
  4025da:	4798      	blx	r3
  4025dc:	e7e8      	b.n	4025b0 <udd_ep_run+0x124>
		return false;
  4025de:	2000      	movs	r0, #0
}
  4025e0:	b003      	add	sp, #12
  4025e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  4025e4:	2000      	movs	r0, #0
  4025e6:	e7fb      	b.n	4025e0 <udd_ep_run+0x154>
  4025e8:	2000      	movs	r0, #0
  4025ea:	e7f9      	b.n	4025e0 <udd_ep_run+0x154>
  4025ec:	2000      	movs	r0, #0
  4025ee:	e7f7      	b.n	4025e0 <udd_ep_run+0x154>
		return false; // Job already on going
  4025f0:	2000      	movs	r0, #0
  4025f2:	e7f5      	b.n	4025e0 <udd_ep_run+0x154>
	return true;
  4025f4:	2001      	movs	r0, #1
  4025f6:	e7f3      	b.n	4025e0 <udd_ep_run+0x154>
  4025f8:	20000d2c 	.word	0x20000d2c
  4025fc:	20000128 	.word	0x20000128
  402600:	40034000 	.word	0x40034000
  402604:	004014b5 	.word	0x004014b5

00402608 <udd_ep_abort>:
{
  402608:	b5f0      	push	{r4, r5, r6, r7, lr}
  40260a:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  40260c:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402610:	2d03      	cmp	r5, #3
  402612:	d840      	bhi.n	402696 <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402614:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402618:	fab3 f383 	clz	r3, r3
  40261c:	095b      	lsrs	r3, r3, #5
  40261e:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402620:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402622:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402626:	2200      	movs	r2, #0
  402628:	4b4b      	ldr	r3, [pc, #300]	; (402758 <udd_ep_abort+0x150>)
  40262a:	701a      	strb	r2, [r3, #0]
	return flags;
  40262c:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  40262e:	2401      	movs	r4, #1
  402630:	40ac      	lsls	r4, r5
  402632:	4a4a      	ldr	r2, [pc, #296]	; (40275c <udd_ep_abort+0x154>)
  402634:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  402636:	b12b      	cbz	r3, 402644 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  402638:	2201      	movs	r2, #1
  40263a:	4b47      	ldr	r3, [pc, #284]	; (402758 <udd_ep_abort+0x150>)
  40263c:	701a      	strb	r2, [r3, #0]
  40263e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402642:	b662      	cpsie	i
	if (b_dir_in) {
  402644:	f010 0f80 	tst.w	r0, #128	; 0x80
  402648:	d127      	bne.n	40269a <udd_ep_abort+0x92>
  40264a:	00ae      	lsls	r6, r5, #2
  40264c:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402650:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  402654:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402656:	f013 0f42 	tst.w	r3, #66	; 0x42
  40265a:	d006      	beq.n	40266a <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  40265c:	4f40      	ldr	r7, [pc, #256]	; (402760 <udd_ep_abort+0x158>)
  40265e:	4628      	mov	r0, r5
  402660:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  402662:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402664:	f013 0f42 	tst.w	r3, #66	; 0x42
  402668:	d1f9      	bne.n	40265e <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  40266a:	4a3c      	ldr	r2, [pc, #240]	; (40275c <udd_ep_abort+0x154>)
  40266c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40266e:	4323      	orrs	r3, r4
  402670:	6293      	str	r3, [r2, #40]	; 0x28
  402672:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402674:	421c      	tst	r4, r3
  402676:	d0fc      	beq.n	402672 <udd_ep_abort+0x6a>
  402678:	4a38      	ldr	r2, [pc, #224]	; (40275c <udd_ep_abort+0x154>)
  40267a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  40267c:	ea23 0404 	bic.w	r4, r3, r4
  402680:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402682:	1e68      	subs	r0, r5, #1
  402684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402688:	462a      	mov	r2, r5
  40268a:	2101      	movs	r1, #1
  40268c:	4b35      	ldr	r3, [pc, #212]	; (402764 <udd_ep_abort+0x15c>)
  40268e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402692:	4b35      	ldr	r3, [pc, #212]	; (402768 <udd_ep_abort+0x160>)
  402694:	4798      	blx	r3
}
  402696:	b007      	add	sp, #28
  402698:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40269a:	00ab      	lsls	r3, r5, #2
  40269c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4026a0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  4026a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026a6:	f012 0f10 	tst.w	r2, #16
  4026aa:	d03a      	beq.n	402722 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4026ac:	b34d      	cbz	r5, 402702 <udd_ep_abort+0xfa>
  4026ae:	2d03      	cmp	r5, #3
  4026b0:	d027      	beq.n	402702 <udd_ep_abort+0xfa>
  4026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026b4:	9201      	str	r2, [sp, #4]
  4026b6:	9a01      	ldr	r2, [sp, #4]
  4026b8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4026bc:	9201      	str	r2, [sp, #4]
  4026be:	9a01      	ldr	r2, [sp, #4]
  4026c0:	f022 0210 	bic.w	r2, r2, #16
  4026c4:	9201      	str	r2, [sp, #4]
  4026c6:	9a01      	ldr	r2, [sp, #4]
  4026c8:	631a      	str	r2, [r3, #48]	; 0x30
  4026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026cc:	f012 0f10 	tst.w	r2, #16
  4026d0:	d1fb      	bne.n	4026ca <udd_ep_abort+0xc2>
  4026d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026d4:	f012 0f10 	tst.w	r2, #16
  4026d8:	d1fb      	bne.n	4026d2 <udd_ep_abort+0xca>
  4026da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026dc:	9202      	str	r2, [sp, #8]
  4026de:	9a02      	ldr	r2, [sp, #8]
  4026e0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4026e4:	9202      	str	r2, [sp, #8]
  4026e6:	9a02      	ldr	r2, [sp, #8]
  4026e8:	f042 0210 	orr.w	r2, r2, #16
  4026ec:	9202      	str	r2, [sp, #8]
  4026ee:	9a02      	ldr	r2, [sp, #8]
  4026f0:	631a      	str	r2, [r3, #48]	; 0x30
  4026f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026f4:	f012 0f10 	tst.w	r2, #16
  4026f8:	d0fb      	beq.n	4026f2 <udd_ep_abort+0xea>
  4026fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026fc:	f012 0f10 	tst.w	r2, #16
  402700:	d0fb      	beq.n	4026fa <udd_ep_abort+0xf2>
  402702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402704:	9203      	str	r2, [sp, #12]
  402706:	9a03      	ldr	r2, [sp, #12]
  402708:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40270c:	9203      	str	r2, [sp, #12]
  40270e:	9a03      	ldr	r2, [sp, #12]
  402710:	f022 0210 	bic.w	r2, r2, #16
  402714:	9203      	str	r2, [sp, #12]
  402716:	9a03      	ldr	r2, [sp, #12]
  402718:	631a      	str	r2, [r3, #48]	; 0x30
  40271a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40271c:	f012 0f10 	tst.w	r2, #16
  402720:	d1fb      	bne.n	40271a <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  402722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402724:	9204      	str	r2, [sp, #16]
  402726:	9a04      	ldr	r2, [sp, #16]
  402728:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40272c:	9204      	str	r2, [sp, #16]
  40272e:	9a04      	ldr	r2, [sp, #16]
  402730:	f022 0201 	bic.w	r2, r2, #1
  402734:	9204      	str	r2, [sp, #16]
  402736:	9a04      	ldr	r2, [sp, #16]
  402738:	631a      	str	r2, [r3, #48]	; 0x30
  40273a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40273c:	f012 0f01 	tst.w	r2, #1
  402740:	d1fb      	bne.n	40273a <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  402742:	1e6b      	subs	r3, r5, #1
  402744:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402748:	4b06      	ldr	r3, [pc, #24]	; (402764 <udd_ep_abort+0x15c>)
  40274a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40274e:	7c5a      	ldrb	r2, [r3, #17]
  402750:	f36f 0283 	bfc	r2, #2, #2
  402754:	745a      	strb	r2, [r3, #17]
  402756:	e788      	b.n	40266a <udd_ep_abort+0x62>
  402758:	20000128 	.word	0x20000128
  40275c:	40034000 	.word	0x40034000
  402760:	004013e1 	.word	0x004013e1
  402764:	20000d2c 	.word	0x20000d2c
  402768:	004013a1 	.word	0x004013a1

0040276c <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  40276c:	b508      	push	{r3, lr}
	efc_init(EFC, ul_mode, ul_fws);
  40276e:	460a      	mov	r2, r1
  402770:	4601      	mov	r1, r0
  402772:	4802      	ldr	r0, [pc, #8]	; (40277c <flash_init+0x10>)
  402774:	4b02      	ldr	r3, [pc, #8]	; (402780 <flash_init+0x14>)
  402776:	4798      	blx	r3
#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
}
  402778:	2000      	movs	r0, #0
  40277a:	bd08      	pop	{r3, pc}
  40277c:	400e0a00 	.word	0x400e0a00
  402780:	00400ed5 	.word	0x00400ed5

00402784 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  402784:	b508      	push	{r3, lr}
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  402786:	f5a0 0280 	sub.w	r2, r0, #4194304	; 0x400000
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  40278a:	f3c2 224f 	ubfx	r2, r2, #9, #16
  40278e:	2111      	movs	r1, #17
  402790:	4803      	ldr	r0, [pc, #12]	; (4027a0 <flash_erase_sector+0x1c>)
  402792:	4b04      	ldr	r3, [pc, #16]	; (4027a4 <flash_erase_sector+0x20>)
  402794:	4798      	blx	r3
  402796:	2800      	cmp	r0, #0
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  402798:	bf18      	it	ne
  40279a:	2010      	movne	r0, #16
  40279c:	bd08      	pop	{r3, pc}
  40279e:	bf00      	nop
  4027a0:	400e0a00 	.word	0x400e0a00
  4027a4:	00400ef1 	.word	0x00400ef1

004027a8 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  4027a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027ac:	b085      	sub	sp, #20
  4027ae:	9100      	str	r1, [sp, #0]
  4027b0:	9303      	str	r3, [sp, #12]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4027b2:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
  4027b6:	f3c3 2a4f 	ubfx	sl, r3, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  4027ba:	f3c0 0708 	ubfx	r7, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  4027be:	4693      	mov	fp, r2
  4027c0:	2a00      	cmp	r2, #0
  4027c2:	d04d      	beq.n	402860 <flash_write+0xb8>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  4027c4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 402870 <flash_write+0xc8>
  4027c8:	f509 75fe 	add.w	r5, r9, #508	; 0x1fc
  4027cc:	e011      	b.n	4027f2 <flash_write+0x4a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  4027ce:	9a01      	ldr	r2, [sp, #4]
  4027d0:	2101      	movs	r1, #1
  4027d2:	4824      	ldr	r0, [pc, #144]	; (402864 <flash_write+0xbc>)
  4027d4:	4b24      	ldr	r3, [pc, #144]	; (402868 <flash_write+0xc0>)
  4027d6:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  4027d8:	2800      	cmp	r0, #0
  4027da:	d13e      	bne.n	40285a <flash_write+0xb2>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  4027dc:	9b00      	ldr	r3, [sp, #0]
  4027de:	4423      	add	r3, r4
  4027e0:	9300      	str	r3, [sp, #0]
		ul_size -= writeSize;
		us_page++;
  4027e2:	f10a 0a01 	add.w	sl, sl, #1
  4027e6:	fa1f fa8a 	uxth.w	sl, sl
		us_offset = 0;
  4027ea:	2700      	movs	r7, #0
	while (ul_size > 0) {
  4027ec:	ebbb 0b04 	subs.w	fp, fp, r4
  4027f0:	d032      	beq.n	402858 <flash_write+0xb0>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  4027f2:	f5c7 7300 	rsb	r3, r7, #512	; 0x200
  4027f6:	9302      	str	r3, [sp, #8]
  4027f8:	461c      	mov	r4, r3
  4027fa:	455b      	cmp	r3, fp
  4027fc:	bf28      	it	cs
  4027fe:	465c      	movcs	r4, fp
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  402800:	f8cd a004 	str.w	sl, [sp, #4]
  402804:	f50a 5300 	add.w	r3, sl, #8192	; 0x2000
  402808:	ea4f 2843 	mov.w	r8, r3, lsl #9
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  40280c:	463a      	mov	r2, r7
  40280e:	4641      	mov	r1, r8
  402810:	4648      	mov	r0, r9
  402812:	4e16      	ldr	r6, [pc, #88]	; (40286c <flash_write+0xc4>)
  402814:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  402816:	4622      	mov	r2, r4
  402818:	9900      	ldr	r1, [sp, #0]
  40281a:	eb09 0007 	add.w	r0, r9, r7
  40281e:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset + writeSize,
  402820:	1938      	adds	r0, r7, r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  402822:	9a02      	ldr	r2, [sp, #8]
  402824:	1b12      	subs	r2, r2, r4
				(void *)(ul_page_addr + us_offset + writeSize),
  402826:	eb04 0108 	add.w	r1, r4, r8
		memcpy(puc_page_buffer + us_offset + writeSize,
  40282a:	b292      	uxth	r2, r2
  40282c:	4439      	add	r1, r7
  40282e:	4448      	add	r0, r9
  402830:	47b0      	blx	r6
  402832:	f1a9 0304 	sub.w	r3, r9, #4
  402836:	f1a8 0204 	sub.w	r2, r8, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  40283a:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40283e:	f842 1f04 	str.w	r1, [r2, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  402842:	42ab      	cmp	r3, r5
  402844:	d1f9      	bne.n	40283a <flash_write+0x92>
		if (ul_erase_flag) {
  402846:	9b03      	ldr	r3, [sp, #12]
  402848:	2b00      	cmp	r3, #0
  40284a:	d0c0      	beq.n	4027ce <flash_write+0x26>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  40284c:	9a01      	ldr	r2, [sp, #4]
  40284e:	2103      	movs	r1, #3
  402850:	4804      	ldr	r0, [pc, #16]	; (402864 <flash_write+0xbc>)
  402852:	4b05      	ldr	r3, [pc, #20]	; (402868 <flash_write+0xc0>)
  402854:	4798      	blx	r3
  402856:	e7bf      	b.n	4027d8 <flash_write+0x30>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  402858:	4658      	mov	r0, fp
}
  40285a:	b005      	add	sp, #20
  40285c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return FLASH_RC_OK;
  402860:	4610      	mov	r0, r2
  402862:	e7fa      	b.n	40285a <flash_write+0xb2>
  402864:	400e0a00 	.word	0x400e0a00
  402868:	00400ef1 	.word	0x00400ef1
  40286c:	004063e5 	.word	0x004063e5
  402870:	20000d68 	.word	0x20000d68

00402874 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  402874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  402878:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
  40287c:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  402880:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  402884:	f021 011f 	bic.w	r1, r1, #31
  402888:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
  40288c:	341f      	adds	r4, #31
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
  40288e:	b102      	cbz	r2, 402892 <flash_unlock+0x1e>
		*pul_actual_start = ul_actual_start;
  402890:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
  402892:	b103      	cbz	r3, 402896 <flash_unlock+0x22>
		*pul_actual_end = ul_actual_end;
  402894:	601c      	str	r4, [r3, #0]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  402896:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  40289a:	0a64      	lsrs	r4, r4, #9
  40289c:	b2a4      	uxth	r4, r4
  40289e:	4d0c      	ldr	r5, [pc, #48]	; (4028d0 <flash_unlock+0x5c>)
  4028a0:	440d      	add	r5, r1
  4028a2:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  4028a6:	42a5      	cmp	r5, r4
  4028a8:	d910      	bls.n	4028cc <flash_unlock+0x58>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  4028aa:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4028d8 <flash_unlock+0x64>
  4028ae:	2709      	movs	r7, #9
  4028b0:	4e08      	ldr	r6, [pc, #32]	; (4028d4 <flash_unlock+0x60>)
  4028b2:	4622      	mov	r2, r4
  4028b4:	4639      	mov	r1, r7
  4028b6:	4640      	mov	r0, r8
  4028b8:	47b0      	blx	r6
				us_start_page);
		if (ul_error) {
  4028ba:	4603      	mov	r3, r0
  4028bc:	b918      	cbnz	r0, 4028c6 <flash_unlock+0x52>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  4028be:	3410      	adds	r4, #16
  4028c0:	b2a4      	uxth	r4, r4
	while (us_start_page < us_end_page) {
  4028c2:	42ac      	cmp	r4, r5
  4028c4:	d3f5      	bcc.n	4028b2 <flash_unlock+0x3e>
	}

	return FLASH_RC_OK;
}
  4028c6:	4618      	mov	r0, r3
  4028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FLASH_RC_OK;
  4028cc:	2300      	movs	r3, #0
  4028ce:	e7fa      	b.n	4028c6 <flash_unlock+0x52>
  4028d0:	ffc01fff 	.word	0xffc01fff
  4028d4:	00400ef1 	.word	0x00400ef1
  4028d8:	400e0a00 	.word	0x400e0a00

004028dc <PIOA_Handler>:
#include <board.h>
#include <interupt_handlers.h>
#include <sleep_modes.h>


void Wake_Handler(){
  4028dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t IStatus = (pio_get_interrupt_status(PIOA));
  4028de:	4c0b      	ldr	r4, [pc, #44]	; (40290c <PIOA_Handler+0x30>)
  4028e0:	4620      	mov	r0, r4
  4028e2:	4b0b      	ldr	r3, [pc, #44]	; (402910 <PIOA_Handler+0x34>)
  4028e4:	4798      	blx	r3
	bool USBSense = pio_get(USB_SNS_PORT,PIO_TYPE_PIO_INPUT,USB_SNS);
  4028e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4028ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4028ee:	4620      	mov	r0, r4
  4028f0:	4d08      	ldr	r5, [pc, #32]	; (402914 <PIOA_Handler+0x38>)
  4028f2:	47a8      	blx	r5
  4028f4:	4606      	mov	r6, r0
	bool PWRSwitchSense = pio_get(PWR_SW_PORT,PIO_TYPE_PIO_INPUT,PWR_SW);
  4028f6:	2201      	movs	r2, #1
  4028f8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4028fc:	4620      	mov	r0, r4
  4028fe:	47a8      	blx	r5

	if(!USBSense && !PWRSwitchSense)
  402900:	b906      	cbnz	r6, 402904 <PIOA_Handler+0x28>
  402902:	b100      	cbz	r0, 402906 <PIOA_Handler+0x2a>
  402904:	bd70      	pop	{r4, r5, r6, pc}
		goToSleep();
  402906:	4b04      	ldr	r3, [pc, #16]	; (402918 <PIOA_Handler+0x3c>)
  402908:	4798      	blx	r3
}
  40290a:	e7fb      	b.n	402904 <PIOA_Handler+0x28>
  40290c:	400e0e00 	.word	0x400e0e00
  402910:	0040324d 	.word	0x0040324d
  402914:	0040314d 	.word	0x0040314d
  402918:	004045d9 	.word	0x004045d9

0040291c <readHandler>:
static bool convertToBool(const uint8_t data[1]){
    return data[0];
}


void readHandler(uint8_t* responsePacket, uint16_t start_reg, uint16_t end_reg) {
  40291c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  40291e:	460c      	mov	r4, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i <= end_reg) {
  402920:	29ff      	cmp	r1, #255	; 0xff
  402922:	dc15      	bgt.n	402950 <readHandler+0x34>
  402924:	4617      	mov	r7, r2
  402926:	4291      	cmp	r1, r2
  402928:	dc12      	bgt.n	402950 <readHandler+0x34>
  40292a:	1c83      	adds	r3, r0, #2
  40292c:	4d33      	ldr	r5, [pc, #204]	; (4029fc <readHandler+0xe0>)
  40292e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
		uint16_t data = intRegisters[i-INT_REG_OFFSET];
  402932:	f835 1f02 	ldrh.w	r1, [r5, #2]!
  402936:	4618      	mov	r0, r3
		responsePacket[0] = (data >> 8) & 0xFF;
  402938:	0a0e      	lsrs	r6, r1, #8
  40293a:	f803 6c02 	strb.w	r6, [r3, #-2]
		responsePacket[1] = data & 0xFF;
  40293e:	f803 1c01 	strb.w	r1, [r3, #-1]
		responsePacket += INT_REG_BYTE_SZ;
		i++;
  402942:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i <= end_reg) {
  402944:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  402948:	d005      	beq.n	402956 <readHandler+0x3a>
  40294a:	3302      	adds	r3, #2
  40294c:	42bc      	cmp	r4, r7
  40294e:	ddf0      	ble.n	402932 <readHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i <= end_reg) {
  402950:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  402954:	da21      	bge.n	40299a <readHandler+0x7e>
  402956:	4694      	mov	ip, r2
  402958:	42a2      	cmp	r2, r4
  40295a:	db33      	blt.n	4029c4 <readHandler+0xa8>
  40295c:	4b28      	ldr	r3, [pc, #160]	; (402a00 <readHandler+0xe4>)
  40295e:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  402962:	4e28      	ldr	r6, [pc, #160]	; (402a04 <readHandler+0xe8>)
  402964:	e006      	b.n	402974 <readHandler+0x58>
		uint8_t* floatConversionBytes = floatToBytes_union(floatRegisters[i-FLOAT_REG_OFFSET]);
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
			responsePacket[j] = floatConversionBytes[j];
		}
		responsePacket += FLOAT_REG_BYTE_SZ;
  402966:	3004      	adds	r0, #4
		i++;
  402968:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i <= end_reg) {
  40296a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  40296e:	d017      	beq.n	4029a0 <readHandler+0x84>
  402970:	4564      	cmp	r4, ip
  402972:	dc27      	bgt.n	4029c4 <readHandler+0xa8>
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  402974:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  402978:	0e19      	lsrs	r1, r3, #24
  40297a:	7031      	strb	r1, [r6, #0]
	floatCoversionBytes[1] = (u.data >> 16) & 0xFF;
  40297c:	0c19      	lsrs	r1, r3, #16
  40297e:	7071      	strb	r1, [r6, #1]
	floatCoversionBytes[2] = (u.data >> 8) & 0xFF;
  402980:	0a19      	lsrs	r1, r3, #8
  402982:	70b1      	strb	r1, [r6, #2]
	floatCoversionBytes[3] = u.data & 0xFF;
  402984:	70f3      	strb	r3, [r6, #3]
  402986:	4631      	mov	r1, r6
  402988:	1e43      	subs	r3, r0, #1
  40298a:	1cc7      	adds	r7, r0, #3
			responsePacket[j] = floatConversionBytes[j];
  40298c:	f811 5b01 	ldrb.w	r5, [r1], #1
  402990:	f803 5f01 	strb.w	r5, [r3, #1]!
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
  402994:	42bb      	cmp	r3, r7
  402996:	d1f9      	bne.n	40298c <readHandler+0x70>
  402998:	e7e5      	b.n	402966 <readHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i <= end_reg) {
  40299a:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  40299e:	da14      	bge.n	4029ca <readHandler+0xae>
  4029a0:	4616      	mov	r6, r2
  4029a2:	4294      	cmp	r4, r2
  4029a4:	dc28      	bgt.n	4029f8 <readHandler+0xdc>
  4029a6:	4b18      	ldr	r3, [pc, #96]	; (402a08 <readHandler+0xec>)
  4029a8:	4423      	add	r3, r4
  4029aa:	f5c4 7540 	rsb	r5, r4, #768	; 0x300
  4029ae:	4405      	add	r5, r0
		responsePacket[0] = charRegisters[i-CHAR_REG_OFFSET];
  4029b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4029b4:	f800 1b01 	strb.w	r1, [r0], #1
		responsePacket += CHAR_REG_BYTE_SZ;
		i++;
  4029b8:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i <= end_reg) {
  4029ba:	42a8      	cmp	r0, r5
  4029bc:	d005      	beq.n	4029ca <readHandler+0xae>
  4029be:	42b4      	cmp	r4, r6
  4029c0:	ddf6      	ble.n	4029b0 <readHandler+0x94>
  4029c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029c4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  4029c8:	db16      	blt.n	4029f8 <readHandler+0xdc>
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i <= end_reg) {
  4029ca:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  4029ce:	da13      	bge.n	4029f8 <readHandler+0xdc>
  4029d0:	4616      	mov	r6, r2
  4029d2:	4294      	cmp	r4, r2
  4029d4:	dc10      	bgt.n	4029f8 <readHandler+0xdc>
  4029d6:	4a0d      	ldr	r2, [pc, #52]	; (402a0c <readHandler+0xf0>)
  4029d8:	4422      	add	r2, r4
  4029da:	f5c4 6580 	rsb	r5, r4, #1024	; 0x400
  4029de:	4405      	add	r5, r0
  4029e0:	4603      	mov	r3, r0
  4029e2:	1a20      	subs	r0, r4, r0
		responsePacket[0] = boolRegisters[i-BOOL_REG_OFFSET];
  4029e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4029e8:	f803 1b01 	strb.w	r1, [r3], #1
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i <= end_reg) {
  4029ec:	429d      	cmp	r5, r3
  4029ee:	d003      	beq.n	4029f8 <readHandler+0xdc>
  4029f0:	1819      	adds	r1, r3, r0
  4029f2:	42b1      	cmp	r1, r6
  4029f4:	ddf6      	ble.n	4029e4 <readHandler+0xc8>
  4029f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029fa:	bf00      	nop
  4029fc:	200021ee 	.word	0x200021ee
  402a00:	200019e0 	.word	0x200019e0
  402a04:	20000f68 	.word	0x20000f68
  402a08:	200015df 	.word	0x200015df
  402a0c:	200015e3 	.word	0x200015e3

00402a10 <writeHandler>:
		responsePacket += BOOL_REG_BYTE_SZ;
		i++;
	}
}

void writeHandler(uint8_t* data_packet, uint16_t start_reg, uint16_t end_reg) {
  402a10:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402a12:	460b      	mov	r3, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402a14:	29ff      	cmp	r1, #255	; 0xff
  402a16:	dc16      	bgt.n	402a46 <writeHandler+0x36>
  402a18:	4614      	mov	r4, r2
  402a1a:	4291      	cmp	r1, r2
  402a1c:	da13      	bge.n	402a46 <writeHandler+0x36>
  402a1e:	1c85      	adds	r5, r0, #2
  402a20:	4837      	ldr	r0, [pc, #220]	; (402b00 <writeHandler+0xf0>)
  402a22:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402a26:	4628      	mov	r0, r5
    return (data[0] << 8) | data[1];
  402a28:	f815 7c02 	ldrb.w	r7, [r5, #-2]
  402a2c:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  402a30:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
		intRegisters[i-INT_REG_OFFSET] = convertToInt(data_packet);
  402a34:	f821 6f02 	strh.w	r6, [r1, #2]!
		data_packet += INT_REG_BYTE_SZ;
		i++;
  402a38:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402a3e:	d005      	beq.n	402a4c <writeHandler+0x3c>
  402a40:	3502      	adds	r5, #2
  402a42:	42a3      	cmp	r3, r4
  402a44:	dbef      	blt.n	402a26 <writeHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402a4a:	da3c      	bge.n	402ac6 <writeHandler+0xb6>
  402a4c:	4696      	mov	lr, r2
  402a4e:	429a      	cmp	r2, r3
  402a50:	dd1b      	ble.n	402a8a <writeHandler+0x7a>
  402a52:	1d04      	adds	r4, r0, #4
  402a54:	4e2b      	ldr	r6, [pc, #172]	; (402b04 <writeHandler+0xf4>)
  402a56:	eb06 0683 	add.w	r6, r6, r3, lsl #2
  402a5a:	4620      	mov	r0, r4
    u.data = MERGE_FOUR_BYTES(data);
  402a5c:	f814 7c04 	ldrb.w	r7, [r4, #-4]
  402a60:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  402a64:	0409      	lsls	r1, r1, #16
  402a66:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
  402a6a:	f814 7c01 	ldrb.w	r7, [r4, #-1]
  402a6e:	4339      	orrs	r1, r7
  402a70:	f814 7c02 	ldrb.w	r7, [r4, #-2]
		floatRegisters[i-FLOAT_REG_OFFSET] = convertToFloat_union(data_packet);
  402a74:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  402a78:	f846 1f04 	str.w	r1, [r6, #4]!
		data_packet += FLOAT_REG_BYTE_SZ;
		i++;
  402a7c:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402a82:	d023      	beq.n	402acc <writeHandler+0xbc>
  402a84:	3404      	adds	r4, #4
  402a86:	4573      	cmp	r3, lr
  402a88:	d1e7      	bne.n	402a5a <writeHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  402a8e:	db35      	blt.n	402afc <writeHandler+0xec>
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
		data_packet += CHAR_REG_BYTE_SZ;
		i++;
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  402a94:	da32      	bge.n	402afc <writeHandler+0xec>
  402a96:	4293      	cmp	r3, r2
  402a98:	da30      	bge.n	402afc <writeHandler+0xec>
  402a9a:	3801      	subs	r0, #1
  402a9c:	f2a3 3301 	subw	r3, r3, #769	; 0x301
  402aa0:	4919      	ldr	r1, [pc, #100]	; (402b08 <writeHandler+0xf8>)
  402aa2:	440b      	add	r3, r1
  402aa4:	f101 04ff 	add.w	r4, r1, #255	; 0xff
  402aa8:	f2a2 3201 	subw	r2, r2, #769	; 0x301
  402aac:	4411      	add	r1, r2
    return data[0];
  402aae:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402ab2:	3200      	adds	r2, #0
  402ab4:	bf18      	it	ne
  402ab6:	2201      	movne	r2, #1
  402ab8:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402abc:	42a3      	cmp	r3, r4
  402abe:	d01d      	beq.n	402afc <writeHandler+0xec>
  402ac0:	428b      	cmp	r3, r1
  402ac2:	d1f4      	bne.n	402aae <writeHandler+0x9e>
  402ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  402aca:	dae1      	bge.n	402a90 <writeHandler+0x80>
  402acc:	429a      	cmp	r2, r3
  402ace:	dd15      	ble.n	402afc <writeHandler+0xec>
  402ad0:	f2a3 2101 	subw	r1, r3, #513	; 0x201
  402ad4:	4d0d      	ldr	r5, [pc, #52]	; (402b0c <writeHandler+0xfc>)
  402ad6:	4429      	add	r1, r5
  402ad8:	f105 07ff 	add.w	r7, r5, #255	; 0xff
  402adc:	f2a2 2401 	subw	r4, r2, #513	; 0x201
  402ae0:	442c      	add	r4, r5
  402ae2:	4606      	mov	r6, r0
  402ae4:	1a1d      	subs	r5, r3, r0
    return data[0];
  402ae6:	f816 3b01 	ldrb.w	r3, [r6], #1
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
  402aea:	f801 3f01 	strb.w	r3, [r1, #1]!
		data_packet += CHAR_REG_BYTE_SZ;
  402aee:	4630      	mov	r0, r6
  402af0:	19ab      	adds	r3, r5, r6
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402af2:	42b9      	cmp	r1, r7
  402af4:	d0cc      	beq.n	402a90 <writeHandler+0x80>
  402af6:	42a1      	cmp	r1, r4
  402af8:	d1f5      	bne.n	402ae6 <writeHandler+0xd6>
  402afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402afe:	bf00      	nop
  402b00:	200021ee 	.word	0x200021ee
  402b04:	200019e0 	.word	0x200019e0
  402b08:	200018e4 	.word	0x200018e4
  402b0c:	200017e0 	.word	0x200017e0

00402b10 <getReadResponseDataSize>:
}

uint16_t getReadResponseDataSize(uint16_t start_reg, uint16_t end_reg) {
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary

	if(start_reg < REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if starting register is within the data type range
  402b10:	28ff      	cmp	r0, #255	; 0xff
  402b12:	d824      	bhi.n	402b5e <getReadResponseDataSize+0x4e>
		if(end_reg >= REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if the ending register is past the data type range
  402b14:	29ff      	cmp	r1, #255	; 0xff
  402b16:	d91d      	bls.n	402b54 <getReadResponseDataSize+0x44>
			size += (REGISTER_AR_SIZE+INT_REG_OFFSET-start_reg)*INT_REG_BYTE_SZ;		//add the register size to the size variable
  402b18:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
  402b1c:	0040      	lsls	r0, r0, #1
  402b1e:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+INT_REG_OFFSET;								//set the new start range to the first float register
  402b20:	f44f 7080 	mov.w	r0, #256	; 0x100
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg >= REGISTER_AR_SIZE+FLOAT_REG_OFFSET){								//check if the ending register is past the data type range
  402b24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  402b28:	d325      	bcc.n	402b76 <getReadResponseDataSize+0x66>
			size += (REGISTER_AR_SIZE+FLOAT_REG_OFFSET-start_reg)*FLOAT_REG_BYTE_SZ;	//add the register size to the size variable
  402b2a:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  402b2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402b32:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+FLOAT_REG_OFFSET;								//set the new start range to the first float register
  402b34:	f44f 7000 	mov.w	r0, #512	; 0x200
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg >= REGISTER_AR_SIZE+CHAR_REG_OFFSET){								//check if the ending register is past the data type range
  402b38:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
  402b3c:	d323      	bcc.n	402b86 <getReadResponseDataSize+0x76>
  402b3e:	f503 7340 	add.w	r3, r3, #768	; 0x300
			size += (REGISTER_AR_SIZE+CHAR_REG_OFFSET-start_reg)*CHAR_REG_BYTE_SZ;		//add the register size to the size variable
  402b42:	1a18      	subs	r0, r3, r0
  402b44:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+CHAR_REG_OFFSET;								//set the new start range to the first float register
  402b46:	f44f 7040 	mov.w	r0, #768	; 0x300
  402b4a:	3101      	adds	r1, #1
  402b4c:	4419      	add	r1, r3
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
		size += ((end_reg+1) - start_reg)*BOOL_REG_BYTE_SZ;								//return the size including this data type's registers
  402b4e:	1a08      	subs	r0, r1, r0
  402b50:	b280      	uxth	r0, r0
		return size;
  402b52:	4770      	bx	lr
			size += ((end_reg+1) - start_reg)*INT_REG_BYTE_SZ;							//return the size including this data type's registers
  402b54:	3101      	adds	r1, #1
  402b56:	1a08      	subs	r0, r1, r0
  402b58:	0040      	lsls	r0, r0, #1
  402b5a:	b280      	uxth	r0, r0
			return size;
  402b5c:	4770      	bx	lr
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
  402b5e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  402b62:	d306      	bcc.n	402b72 <getReadResponseDataSize+0x62>
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
  402b64:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  402b68:	d30b      	bcc.n	402b82 <getReadResponseDataSize+0x72>
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
  402b6a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
  402b6e:	d30f      	bcc.n	402b90 <getReadResponseDataSize+0x80>
	}
		
}
  402b70:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402b72:	2300      	movs	r3, #0
  402b74:	e7d6      	b.n	402b24 <getReadResponseDataSize+0x14>
			size += ((end_reg+1) - start_reg)*FLOAT_REG_BYTE_SZ;						//return the size including this data type's registers
  402b76:	3101      	adds	r1, #1
  402b78:	1a08      	subs	r0, r1, r0
  402b7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402b7e:	b280      	uxth	r0, r0
			return size;
  402b80:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402b82:	2300      	movs	r3, #0
  402b84:	e7d8      	b.n	402b38 <getReadResponseDataSize+0x28>
  402b86:	3101      	adds	r1, #1
  402b88:	440b      	add	r3, r1
			size += ((end_reg+1) - start_reg)*CHAR_REG_BYTE_SZ;							//return the size including this data type's registers
  402b8a:	1a18      	subs	r0, r3, r0
  402b8c:	b280      	uxth	r0, r0
			return size;
  402b8e:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  402b90:	2300      	movs	r3, #0
  402b92:	e7da      	b.n	402b4a <getReadResponseDataSize+0x3a>

00402b94 <modbus_init>:

void modbus_init(Uart *port485, const uint32_t baud, Pio *enPinPort, const uint32_t enPin, const uint8_t slave_id){
  402b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402b98:	b086      	sub	sp, #24
  402b9a:	460f      	mov	r7, r1
  402b9c:	4616      	mov	r6, r2
  402b9e:	461d      	mov	r5, r3
	
	RS485Port = port485;
  402ba0:	4b2e      	ldr	r3, [pc, #184]	; (402c5c <modbus_init+0xc8>)
  402ba2:	6018      	str	r0, [r3, #0]
	slaveID = slave_id;
  402ba4:	4b2e      	ldr	r3, [pc, #184]	; (402c60 <modbus_init+0xcc>)
  402ba6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
  402baa:	701a      	strb	r2, [r3, #0]
	
	if(RS485Port == UART0){
  402bac:	4b2d      	ldr	r3, [pc, #180]	; (402c64 <modbus_init+0xd0>)
  402bae:	4298      	cmp	r0, r3
  402bb0:	d027      	beq.n	402c02 <modbus_init+0x6e>
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA9);		//Sets PA9 to RX
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA10);		//Sets PA10 to TX
		NVIC_EnableIRQ(UART0_IRQn);							//enables interrupts related to this port
	}
	
	if(RS485Port == UART1){
  402bb2:	4b2a      	ldr	r3, [pc, #168]	; (402c5c <modbus_init+0xc8>)
  402bb4:	681a      	ldr	r2, [r3, #0]
  402bb6:	4b2c      	ldr	r3, [pc, #176]	; (402c68 <modbus_init+0xd4>)
  402bb8:	429a      	cmp	r2, r3
  402bba:	d039      	beq.n	402c30 <modbus_init+0x9c>
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB2);		//Sets PB2 to RX
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB3);		//Sets PB3 to TX
		NVIC_EnableIRQ(UART1_IRQn);							//enables interrupts related to this port
	}
	
	uint32_t clockSpeed = sysclk_get_peripheral_bus_hz(RS485Port);		//gets CPU speed to for baud counter
  402bbc:	4c27      	ldr	r4, [pc, #156]	; (402c5c <modbus_init+0xc8>)
	
	sam_uart_opt_t UARTSettings = {
  402bbe:	4b2b      	ldr	r3, [pc, #172]	; (402c6c <modbus_init+0xd8>)
  402bc0:	9303      	str	r3, [sp, #12]
  402bc2:	9704      	str	r7, [sp, #16]
  402bc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402bc8:	9305      	str	r3, [sp, #20]
		.ul_baudrate = baud,			//sets baudrate
		.ul_mode = UART_MR_CHMODE_NORMAL | UART_MR_PAR_NO,	//sets to normal mode
		.ul_mck = clockSpeed			//sets baud counter clock
	};
	
	uart_init(RS485Port, &UARTSettings);							//init the UART port
  402bca:	a903      	add	r1, sp, #12
  402bcc:	6820      	ldr	r0, [r4, #0]
  402bce:	4b28      	ldr	r3, [pc, #160]	; (402c70 <modbus_init+0xdc>)
  402bd0:	4798      	blx	r3
	uart_enable_rx(RS485Port);
  402bd2:	6820      	ldr	r0, [r4, #0]
  402bd4:	4b27      	ldr	r3, [pc, #156]	; (402c74 <modbus_init+0xe0>)
  402bd6:	4798      	blx	r3
	uart_enable_tx(RS485Port);
  402bd8:	6820      	ldr	r0, [r4, #0]
  402bda:	4b27      	ldr	r3, [pc, #156]	; (402c78 <modbus_init+0xe4>)
  402bdc:	4798      	blx	r3
	uart_enable_interrupt(RS485Port, UART_IER_RXRDY);				//Enable interrupt for incoming data
  402bde:	2101      	movs	r1, #1
  402be0:	6820      	ldr	r0, [r4, #0]
  402be2:	4b26      	ldr	r3, [pc, #152]	; (402c7c <modbus_init+0xe8>)
  402be4:	4798      	blx	r3
	
	pio_set_output(enPinPort,enPin,LOW,DISABLE,DISABLE);		//init the enable pin
  402be6:	2200      	movs	r2, #0
  402be8:	9200      	str	r2, [sp, #0]
  402bea:	4613      	mov	r3, r2
  402bec:	4629      	mov	r1, r5
  402bee:	4630      	mov	r0, r6
  402bf0:	4c23      	ldr	r4, [pc, #140]	; (402c80 <modbus_init+0xec>)
  402bf2:	47a0      	blx	r4
	globalEnPinPort = enPinPort;
  402bf4:	4b23      	ldr	r3, [pc, #140]	; (402c84 <modbus_init+0xf0>)
  402bf6:	601e      	str	r6, [r3, #0]
	globalEnPin = enPin;
  402bf8:	4b23      	ldr	r3, [pc, #140]	; (402c88 <modbus_init+0xf4>)
  402bfa:	601d      	str	r5, [r3, #0]
	/*																//CRC engine cannot be used in the current configuration because the modbus RTU polynomial (0xA001) does not match any of the supported polynomials
	uint8_t CRCMode = CRCCU_MR_ENABLE | CRCCU_MR_PTYPE_CCITT16;
	pmc_enable_periph_clk(ID_CRCCU);							//init CRC Computation Unit
	crccu_configure_mode(CRCCU, CRCMode)
	*/
}
  402bfc:	b006      	add	sp, #24
  402bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pmc_enable_periph_clk(ID_UART0);		//Enable the clocks to the UART modules
  402c02:	2008      	movs	r0, #8
  402c04:	4b21      	ldr	r3, [pc, #132]	; (402c8c <modbus_init+0xf8>)
  402c06:	4798      	blx	r3
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA9);		//Sets PA9 to RX
  402c08:	f8df 808c 	ldr.w	r8, [pc, #140]	; 402c98 <modbus_init+0x104>
  402c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
  402c10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c14:	4640      	mov	r0, r8
  402c16:	4c1e      	ldr	r4, [pc, #120]	; (402c90 <modbus_init+0xfc>)
  402c18:	47a0      	blx	r4
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA10);		//Sets PA10 to TX
  402c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402c1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c22:	4640      	mov	r0, r8
  402c24:	47a0      	blx	r4
  402c26:	f44f 7280 	mov.w	r2, #256	; 0x100
  402c2a:	4b1a      	ldr	r3, [pc, #104]	; (402c94 <modbus_init+0x100>)
  402c2c:	601a      	str	r2, [r3, #0]
  402c2e:	e7c0      	b.n	402bb2 <modbus_init+0x1e>
		pmc_enable_periph_clk(ID_UART1);		//Enable the clocks to the UART modules
  402c30:	2009      	movs	r0, #9
  402c32:	4b16      	ldr	r3, [pc, #88]	; (402c8c <modbus_init+0xf8>)
  402c34:	4798      	blx	r3
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB2);		//Sets PB2 to RX
  402c36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 402c9c <modbus_init+0x108>
  402c3a:	2204      	movs	r2, #4
  402c3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c40:	4640      	mov	r0, r8
  402c42:	4c13      	ldr	r4, [pc, #76]	; (402c90 <modbus_init+0xfc>)
  402c44:	47a0      	blx	r4
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB3);		//Sets PB3 to TX
  402c46:	2208      	movs	r2, #8
  402c48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402c4c:	4640      	mov	r0, r8
  402c4e:	47a0      	blx	r4
  402c50:	f44f 7200 	mov.w	r2, #512	; 0x200
  402c54:	4b0f      	ldr	r3, [pc, #60]	; (402c94 <modbus_init+0x100>)
  402c56:	601a      	str	r2, [r3, #0]
  402c58:	e7b0      	b.n	402bbc <modbus_init+0x28>
  402c5a:	bf00      	nop
  402c5c:	200018e0 	.word	0x200018e0
  402c60:	200023f4 	.word	0x200023f4
  402c64:	400e0600 	.word	0x400e0600
  402c68:	400e0800 	.word	0x400e0800
  402c6c:	07270e00 	.word	0x07270e00
  402c70:	004034b5 	.word	0x004034b5
  402c74:	004034f1 	.word	0x004034f1
  402c78:	004034eb 	.word	0x004034eb
  402c7c:	004034f7 	.word	0x004034f7
  402c80:	00403227 	.word	0x00403227
  402c84:	200021e4 	.word	0x200021e4
  402c88:	200021ec 	.word	0x200021ec
  402c8c:	004033d9 	.word	0x004033d9
  402c90:	00403165 	.word	0x00403165
  402c94:	e000e100 	.word	0xe000e100
  402c98:	400e0e00 	.word	0x400e0e00
  402c9c:	400e1000 	.word	0x400e1000

00402ca0 <UART_Handler>:
	transmitIndex = 0;
	uart_enable_interrupt(RS485Port,UART_IMR_TXRDY);
}

//interrupt handler for incoming data
void UART_Handler(void){
  402ca0:	b510      	push	{r4, lr}
	if(uart_is_rx_ready(RS485Port)){							//confirm there is data ready to be read
  402ca2:	4b1f      	ldr	r3, [pc, #124]	; (402d20 <UART_Handler+0x80>)
  402ca4:	6818      	ldr	r0, [r3, #0]
  402ca6:	4b1f      	ldr	r3, [pc, #124]	; (402d24 <UART_Handler+0x84>)
  402ca8:	4798      	blx	r3
  402caa:	b980      	cbnz	r0, 402cce <UART_Handler+0x2e>
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head]));		//move the data into the next index of the rx buffer
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);		//iterate the head through the ring buffer
	}else if(uart_is_tx_ready(RS485Port)){
  402cac:	4b1c      	ldr	r3, [pc, #112]	; (402d20 <UART_Handler+0x80>)
  402cae:	6818      	ldr	r0, [r3, #0]
  402cb0:	4b1d      	ldr	r3, [pc, #116]	; (402d28 <UART_Handler+0x88>)
  402cb2:	4798      	blx	r3
  402cb4:	b150      	cbz	r0, 402ccc <UART_Handler+0x2c>
		if(transmitIndex < responsePacketSize){
  402cb6:	4b1d      	ldr	r3, [pc, #116]	; (402d2c <UART_Handler+0x8c>)
  402cb8:	881b      	ldrh	r3, [r3, #0]
  402cba:	4a1d      	ldr	r2, [pc, #116]	; (402d30 <UART_Handler+0x90>)
  402cbc:	8812      	ldrh	r2, [r2, #0]
  402cbe:	429a      	cmp	r2, r3
  402cc0:	d813      	bhi.n	402cea <UART_Handler+0x4a>
			uart_write(RS485Port, responsePacket[transmitIndex]);
			transmitIndex++;
		}else if(uart_is_tx_empty(RS485Port)){
  402cc2:	4b17      	ldr	r3, [pc, #92]	; (402d20 <UART_Handler+0x80>)
  402cc4:	6818      	ldr	r0, [r3, #0]
  402cc6:	4b1b      	ldr	r3, [pc, #108]	; (402d34 <UART_Handler+0x94>)
  402cc8:	4798      	blx	r3
  402cca:	b9c8      	cbnz	r0, 402d00 <UART_Handler+0x60>
  402ccc:	bd10      	pop	{r4, pc}
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head]));		//move the data into the next index of the rx buffer
  402cce:	4c1a      	ldr	r4, [pc, #104]	; (402d38 <UART_Handler+0x98>)
  402cd0:	8821      	ldrh	r1, [r4, #0]
  402cd2:	3104      	adds	r1, #4
  402cd4:	4421      	add	r1, r4
  402cd6:	4b12      	ldr	r3, [pc, #72]	; (402d20 <UART_Handler+0x80>)
  402cd8:	6818      	ldr	r0, [r3, #0]
  402cda:	4b18      	ldr	r3, [pc, #96]	; (402d3c <UART_Handler+0x9c>)
  402cdc:	4798      	blx	r3
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);		//iterate the head through the ring buffer
  402cde:	8823      	ldrh	r3, [r4, #0]
  402ce0:	3301      	adds	r3, #1
  402ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402ce6:	8023      	strh	r3, [r4, #0]
  402ce8:	bd10      	pop	{r4, pc}
			uart_write(RS485Port, responsePacket[transmitIndex]);
  402cea:	4a15      	ldr	r2, [pc, #84]	; (402d40 <UART_Handler+0xa0>)
  402cec:	5cd1      	ldrb	r1, [r2, r3]
  402cee:	4b0c      	ldr	r3, [pc, #48]	; (402d20 <UART_Handler+0x80>)
  402cf0:	6818      	ldr	r0, [r3, #0]
  402cf2:	4b14      	ldr	r3, [pc, #80]	; (402d44 <UART_Handler+0xa4>)
  402cf4:	4798      	blx	r3
			transmitIndex++;
  402cf6:	4a0d      	ldr	r2, [pc, #52]	; (402d2c <UART_Handler+0x8c>)
  402cf8:	8813      	ldrh	r3, [r2, #0]
  402cfa:	3301      	adds	r3, #1
  402cfc:	8013      	strh	r3, [r2, #0]
  402cfe:	bd10      	pop	{r4, pc}
			pio_clear(globalEnPinPort,globalEnPin);
  402d00:	4b11      	ldr	r3, [pc, #68]	; (402d48 <UART_Handler+0xa8>)
  402d02:	6819      	ldr	r1, [r3, #0]
  402d04:	4b11      	ldr	r3, [pc, #68]	; (402d4c <UART_Handler+0xac>)
  402d06:	6818      	ldr	r0, [r3, #0]
  402d08:	4c11      	ldr	r4, [pc, #68]	; (402d50 <UART_Handler+0xb0>)
  402d0a:	47a0      	blx	r4
			pio_clear(RS485_NRE_PORT,RS485_NRE);
  402d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402d10:	4810      	ldr	r0, [pc, #64]	; (402d54 <UART_Handler+0xb4>)
  402d12:	47a0      	blx	r4
			uart_disable_interrupt(RS485Port,UART_IMR_TXRDY);
  402d14:	2102      	movs	r1, #2
  402d16:	4b02      	ldr	r3, [pc, #8]	; (402d20 <UART_Handler+0x80>)
  402d18:	6818      	ldr	r0, [r3, #0]
  402d1a:	4b0f      	ldr	r3, [pc, #60]	; (402d58 <UART_Handler+0xb8>)
  402d1c:	4798      	blx	r3
		}
	}
}
  402d1e:	e7d5      	b.n	402ccc <UART_Handler+0x2c>
  402d20:	200018e0 	.word	0x200018e0
  402d24:	0040350f 	.word	0x0040350f
  402d28:	004034ff 	.word	0x004034ff
  402d2c:	200021ea 	.word	0x200021ea
  402d30:	200023f2 	.word	0x200023f2
  402d34:	00403507 	.word	0x00403507
  402d38:	2000136c 	.word	0x2000136c
  402d3c:	00403527 	.word	0x00403527
  402d40:	200019e4 	.word	0x200019e4
  402d44:	00403517 	.word	0x00403517
  402d48:	200021ec 	.word	0x200021ec
  402d4c:	200021e4 	.word	0x200021e4
  402d50:	00403149 	.word	0x00403149
  402d54:	400e0e00 	.word	0x400e0e00
  402d58:	004034fb 	.word	0x004034fb

00402d5c <UART0_Handler>:


//Regardless of what UART port triggers the interrupt, the behavior is the same
void UART0_Handler(){
  402d5c:	b508      	push	{r3, lr}
	UART_Handler();
  402d5e:	4b01      	ldr	r3, [pc, #4]	; (402d64 <UART0_Handler+0x8>)
  402d60:	4798      	blx	r3
  402d62:	bd08      	pop	{r3, pc}
  402d64:	00402ca1 	.word	0x00402ca1

00402d68 <UART1_Handler>:
}

void UART1_Handler(){
  402d68:	b508      	push	{r3, lr}
	UART_Handler();
  402d6a:	4b01      	ldr	r3, [pc, #4]	; (402d70 <UART1_Handler+0x8>)
  402d6c:	4798      	blx	r3
  402d6e:	bd08      	pop	{r3, pc}
  402d70:	00402ca1 	.word	0x00402ca1

00402d74 <pop_packet>:
}

uint8_t* pop_packet(){
	static uint8_t returnPacket[RX_BUFFER_SIZE];
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402d74:	4b0d      	ldr	r3, [pc, #52]	; (402dac <pop_packet+0x38>)
  402d76:	8819      	ldrh	r1, [r3, #0]
  402d78:	b1a9      	cbz	r1, 402da6 <pop_packet+0x32>
uint8_t* pop_packet(){
  402d7a:	b410      	push	{r4}
  402d7c:	4b0c      	ldr	r3, [pc, #48]	; (402db0 <pop_packet+0x3c>)
  402d7e:	885b      	ldrh	r3, [r3, #2]
  402d80:	480c      	ldr	r0, [pc, #48]	; (402db4 <pop_packet+0x40>)
  402d82:	1e42      	subs	r2, r0, #1
  402d84:	3901      	subs	r1, #1
  402d86:	4408      	add	r0, r1
		returnPacket[i] = rxBuffer.data[rxBuffer.tail];
  402d88:	4c09      	ldr	r4, [pc, #36]	; (402db0 <pop_packet+0x3c>)
  402d8a:	18e1      	adds	r1, r4, r3
  402d8c:	7909      	ldrb	r1, [r1, #4]
  402d8e:	f802 1f01 	strb.w	r1, [r2, #1]!
		rxBuffer.tail = PKT_WRAP_ARND(rxBuffer.tail + 1);	//iterate the tail
  402d92:	3301      	adds	r3, #1
  402d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402d98:	4282      	cmp	r2, r0
  402d9a:	d1f6      	bne.n	402d8a <pop_packet+0x16>
  402d9c:	4a04      	ldr	r2, [pc, #16]	; (402db0 <pop_packet+0x3c>)
  402d9e:	8053      	strh	r3, [r2, #2]
	}
	return returnPacket;									//return
}
  402da0:	4804      	ldr	r0, [pc, #16]	; (402db4 <pop_packet+0x40>)
  402da2:	bc10      	pop	{r4}
  402da4:	4770      	bx	lr
  402da6:	4803      	ldr	r0, [pc, #12]	; (402db4 <pop_packet+0x40>)
  402da8:	4770      	bx	lr
  402daa:	bf00      	nop
  402dac:	200021e8 	.word	0x200021e8
  402db0:	2000136c 	.word	0x2000136c
  402db4:	20000f6c 	.word	0x20000f6c

00402db8 <buffer_get_data_sz>:

uint16_t buffer_get_data_sz(void) {
	if (rxBuffer.head >= rxBuffer.tail) {
  402db8:	4b04      	ldr	r3, [pc, #16]	; (402dcc <buffer_get_data_sz+0x14>)
  402dba:	8818      	ldrh	r0, [r3, #0]
  402dbc:	885b      	ldrh	r3, [r3, #2]
  402dbe:	4298      	cmp	r0, r3
		return rxBuffer.head - rxBuffer.tail;
	} else {
		return (RX_BUFFER_SIZE - rxBuffer.tail) + rxBuffer.head;
  402dc0:	bf38      	it	cc
  402dc2:	f500 6080 	addcc.w	r0, r0, #1024	; 0x400
  402dc6:	1ac0      	subs	r0, r0, r3
  402dc8:	b280      	uxth	r0, r0
	}
}
  402dca:	4770      	bx	lr
  402dcc:	2000136c 	.word	0x2000136c

00402dd0 <ModRTU_CRC>:

uint16_t ModRTU_CRC(uint8_t* buf, int len)
{
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++) {
  402dd0:	2900      	cmp	r1, #0
  402dd2:	dd16      	ble.n	402e02 <ModRTU_CRC+0x32>
{
  402dd4:	b410      	push	{r4}
  402dd6:	4604      	mov	r4, r0
  402dd8:	4401      	add	r1, r0
	for (int pos = 0; pos < len; pos++) {
  402dda:	f64f 70ff 	movw	r0, #65535	; 0xffff
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc

		for (int i = 8; i != 0; i--) {    // Loop over each bit
			if ((crc & 0x0001) != 0) {      // If the LSB is set
				crc >>= 1;                    // Shift right and XOR 0xA001
				crc ^= 0xA001;
  402dde:	f24a 0201 	movw	r2, #40961	; 0xa001
  402de2:	e001      	b.n	402de8 <ModRTU_CRC+0x18>
	for (int pos = 0; pos < len; pos++) {
  402de4:	428c      	cmp	r4, r1
  402de6:	d00f      	beq.n	402e08 <ModRTU_CRC+0x38>
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc
  402de8:	f814 3b01 	ldrb.w	r3, [r4], #1
  402dec:	4058      	eors	r0, r3
  402dee:	2308      	movs	r3, #8
			if ((crc & 0x0001) != 0) {      // If the LSB is set
  402df0:	f010 0f01 	tst.w	r0, #1
				crc ^= 0xA001;
  402df4:	bf14      	ite	ne
  402df6:	ea82 0050 	eorne.w	r0, r2, r0, lsr #1
			}
			else                            // Else LSB is not set
			crc >>= 1;                    // Just shift right
  402dfa:	0840      	lsreq	r0, r0, #1
		for (int i = 8; i != 0; i--) {    // Loop over each bit
  402dfc:	3b01      	subs	r3, #1
  402dfe:	d1f7      	bne.n	402df0 <ModRTU_CRC+0x20>
  402e00:	e7f0      	b.n	402de4 <ModRTU_CRC+0x14>
	uint16_t crc = 0xFFFF;
  402e02:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402e06:	4770      	bx	lr
		}
	}
	
	return crc;
  402e08:	bc10      	pop	{r4}
  402e0a:	4770      	bx	lr

00402e0c <packet_complete>:
bool packet_complete(){
  402e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e10:	af00      	add	r7, sp, #0
	packetSize = 0;																	// Reset this in case packet is not complete
  402e12:	2200      	movs	r2, #0
  402e14:	4b53      	ldr	r3, [pc, #332]	; (402f64 <packet_complete+0x158>)
  402e16:	801a      	strh	r2, [r3, #0]
	uint8_t func_code = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + FC_IDX)];
  402e18:	4b53      	ldr	r3, [pc, #332]	; (402f68 <packet_complete+0x15c>)
  402e1a:	885c      	ldrh	r4, [r3, #2]
  402e1c:	1c62      	adds	r2, r4, #1
  402e1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
  402e22:	4413      	add	r3, r2
  402e24:	791b      	ldrb	r3, [r3, #4]
	if((func_code != FC_WRITE_MULT) && (func_code != FC_READ_MULT)){				//if the function code isn't write or read, we know somethings fucked up
  402e26:	2b10      	cmp	r3, #16
  402e28:	f000 8087 	beq.w	402f3a <packet_complete+0x12e>
  402e2c:	2b03      	cmp	r3, #3
  402e2e:	d076      	beq.n	402f1e <packet_complete+0x112>
		uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX);
  402e30:	4613      	mov	r3, r2
		while(checkByte != FC_READ_MULT && checkByte != FC_WRITE_MULT && FCLoc != rxBuffer.head){
  402e32:	4a4d      	ldr	r2, [pc, #308]	; (402f68 <packet_complete+0x15c>)
  402e34:	8811      	ldrh	r1, [r2, #0]
  402e36:	428b      	cmp	r3, r1
  402e38:	d01a      	beq.n	402e70 <packet_complete+0x64>
			checkByte = rxBuffer.data[FCLoc];
  402e3a:	4610      	mov	r0, r2
			FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402e3c:	3301      	adds	r3, #1
  402e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
			checkByte = rxBuffer.data[FCLoc];
  402e42:	18c2      	adds	r2, r0, r3
  402e44:	7912      	ldrb	r2, [r2, #4]
		while(checkByte != FC_READ_MULT && checkByte != FC_WRITE_MULT && FCLoc != rxBuffer.head){
  402e46:	2a03      	cmp	r2, #3
  402e48:	d004      	beq.n	402e54 <packet_complete+0x48>
  402e4a:	2a10      	cmp	r2, #16
  402e4c:	d002      	beq.n	402e54 <packet_complete+0x48>
  402e4e:	428b      	cmp	r3, r1
  402e50:	d1f4      	bne.n	402e3c <packet_complete+0x30>
			FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402e52:	460b      	mov	r3, r1
		if(PKT_WRAP_ARND(FCLoc-1) >= rxBuffer.tail){
  402e54:	1e5a      	subs	r2, r3, #1
  402e56:	f3c2 0209 	ubfx	r2, r2, #0, #10
  402e5a:	4294      	cmp	r4, r2
  402e5c:	dc0a      	bgt.n	402e74 <packet_complete+0x68>
			packetSize = PKT_WRAP_ARND(FCLoc-1) - rxBuffer.tail;
  402e5e:	1b13      	subs	r3, r2, r4
  402e60:	4a40      	ldr	r2, [pc, #256]	; (402f64 <packet_complete+0x158>)
  402e62:	8013      	strh	r3, [r2, #0]
		pop_packet();
  402e64:	4b41      	ldr	r3, [pc, #260]	; (402f6c <packet_complete+0x160>)
  402e66:	4798      	blx	r3
		return false;																
  402e68:	2000      	movs	r0, #0
}
  402e6a:	46bd      	mov	sp, r7
  402e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX);
  402e70:	460b      	mov	r3, r1
  402e72:	e7ef      	b.n	402e54 <packet_complete+0x48>
			packetSize = (RX_BUFFER_SIZE - rxBuffer.tail) + PKT_WRAP_ARND(FCLoc-1);
  402e74:	3b01      	subs	r3, #1
  402e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402e7a:	f5c4 6480 	rsb	r4, r4, #1024	; 0x400
  402e7e:	4423      	add	r3, r4
  402e80:	4a38      	ldr	r2, [pc, #224]	; (402f64 <packet_complete+0x158>)
  402e82:	8013      	strh	r3, [r2, #0]
  402e84:	e7ee      	b.n	402e64 <packet_complete+0x58>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  402e86:	4b3a      	ldr	r3, [pc, #232]	; (402f70 <packet_complete+0x164>)
  402e88:	4798      	blx	r3
  402e8a:	2809      	cmp	r0, #9
  402e8c:	d943      	bls.n	402f16 <packet_complete+0x10a>
		num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + WR_DATA_SIZE_IDX)];		//get supposed number of data bytes from the packet
  402e8e:	1da3      	adds	r3, r4, #6
  402e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
  402e94:	4b34      	ldr	r3, [pc, #208]	; (402f68 <packet_complete+0x15c>)
  402e96:	4413      	add	r3, r2
  402e98:	791b      	ldrb	r3, [r3, #4]
		base_pkt_sz = ABS_MIN_WRITE_PACKET_SIZE - 1;											
  402e9a:	2509      	movs	r5, #9
  402e9c:	e05a      	b.n	402f54 <packet_complete+0x148>
	packetSize = full_pkt_sz;															// Set global packetSize to completed packet size
  402e9e:	4b31      	ldr	r3, [pc, #196]	; (402f64 <packet_complete+0x158>)
  402ea0:	801d      	strh	r5, [r3, #0]
	uint8_t packetNoCRC[packetSize - CRC_SIZE];											//pull packet into linear buffer for crc check
  402ea2:	1ea9      	subs	r1, r5, #2
  402ea4:	466e      	mov	r6, sp
  402ea6:	1d6b      	adds	r3, r5, #5
  402ea8:	f023 0307 	bic.w	r3, r3, #7
  402eac:	ebad 0d03 	sub.w	sp, sp, r3
  402eb0:	4668      	mov	r0, sp
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  402eb2:	2900      	cmp	r1, #0
  402eb4:	dd10      	ble.n	402ed8 <packet_complete+0xcc>
  402eb6:	460d      	mov	r5, r1
  402eb8:	446d      	add	r5, sp
  402eba:	466a      	mov	r2, sp
		packetNoCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + i)];
  402ebc:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 402f68 <packet_complete+0x15c>
  402ec0:	eba4 0e00 	sub.w	lr, r4, r0
  402ec4:	eb0e 0302 	add.w	r3, lr, r2
  402ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402ecc:	4463      	add	r3, ip
  402ece:	791b      	ldrb	r3, [r3, #4]
  402ed0:	f802 3b01 	strb.w	r3, [r2], #1
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  402ed4:	42aa      	cmp	r2, r5
  402ed6:	d1f5      	bne.n	402ec4 <packet_complete+0xb8>
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402ed8:	440c      	add	r4, r1
  402eda:	4d23      	ldr	r5, [pc, #140]	; (402f68 <packet_complete+0x15c>)
  402edc:	f3c4 0309 	ubfx	r3, r4, #0, #10
  402ee0:	442b      	add	r3, r5
  402ee2:	f893 8004 	ldrb.w	r8, [r3, #4]
	uint16_t expectedCRC = ModRTU_CRC(packetNoCRC, packetSize - CRC_SIZE);				//calculate expected crc
  402ee6:	4b23      	ldr	r3, [pc, #140]	; (402f74 <packet_complete+0x168>)
  402ee8:	4798      	blx	r3
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402eea:	3401      	adds	r4, #1
  402eec:	f3c4 0409 	ubfx	r4, r4, #0, #10
  402ef0:	442c      	add	r4, r5
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  402ef2:	7922      	ldrb	r2, [r4, #4]
  402ef4:	f3c0 230f 	ubfx	r3, r0, #8, #16
  402ef8:	429a      	cmp	r2, r3
  402efa:	d007      	beq.n	402f0c <packet_complete+0x100>
		packetSize = 1;
  402efc:	2201      	movs	r2, #1
  402efe:	4b19      	ldr	r3, [pc, #100]	; (402f64 <packet_complete+0x158>)
  402f00:	801a      	strh	r2, [r3, #0]
		pop_packet();
  402f02:	4b1a      	ldr	r3, [pc, #104]	; (402f6c <packet_complete+0x160>)
  402f04:	4798      	blx	r3
		return false;
  402f06:	2000      	movs	r0, #0
  402f08:	46b5      	mov	sp, r6
  402f0a:	e7ae      	b.n	402e6a <packet_complete+0x5e>
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  402f0c:	b2c0      	uxtb	r0, r0
  402f0e:	4540      	cmp	r0, r8
  402f10:	d1f4      	bne.n	402efc <packet_complete+0xf0>
		return true;																	//packet is complete and passes crc
  402f12:	2001      	movs	r0, #1
  402f14:	e7f8      	b.n	402f08 <packet_complete+0xfc>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  402f16:	2000      	movs	r0, #0
  402f18:	e7a7      	b.n	402e6a <packet_complete+0x5e>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  402f1a:	2000      	movs	r0, #0
  402f1c:	e7a5      	b.n	402e6a <packet_complete+0x5e>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  402f1e:	f3c4 0209 	ubfx	r2, r4, #0, #10
  402f22:	4b11      	ldr	r3, [pc, #68]	; (402f68 <packet_complete+0x15c>)
  402f24:	4413      	add	r3, r2
	((func_code == FC_READ_MULT) && slave_id != 0)) {
  402f26:	791b      	ldrb	r3, [r3, #4]
  402f28:	b973      	cbnz	r3, 402f48 <packet_complete+0x13c>
		num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + RD_DATA_SIZE_IDX)];
  402f2a:	1ca3      	adds	r3, r4, #2
  402f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
  402f30:	4b0d      	ldr	r3, [pc, #52]	; (402f68 <packet_complete+0x15c>)
  402f32:	4413      	add	r3, r2
  402f34:	791b      	ldrb	r3, [r3, #4]
		base_pkt_sz = ABS_MIN_READ_RES_PACKET_SIZE - 1;
  402f36:	2505      	movs	r5, #5
  402f38:	e00c      	b.n	402f54 <packet_complete+0x148>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  402f3a:	f3c4 0209 	ubfx	r2, r4, #0, #10
  402f3e:	4b0a      	ldr	r3, [pc, #40]	; (402f68 <packet_complete+0x15c>)
  402f40:	4413      	add	r3, r2
	if (func_code == FC_WRITE_MULT && slave_id != 0) {
  402f42:	791b      	ldrb	r3, [r3, #4]
  402f44:	2b00      	cmp	r3, #0
  402f46:	d19e      	bne.n	402e86 <packet_complete+0x7a>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  402f48:	4b09      	ldr	r3, [pc, #36]	; (402f70 <packet_complete+0x164>)
  402f4a:	4798      	blx	r3
  402f4c:	2807      	cmp	r0, #7
  402f4e:	d9e4      	bls.n	402f1a <packet_complete+0x10e>
		base_pkt_sz = WRITE_RES_PACKET_SIZE;											//we know the final packet size
  402f50:	2508      	movs	r5, #8
	uint8_t num_data_bytes = 0;														// Default 0 for packets with no data bytes
  402f52:	2300      	movs	r3, #0
	uint16_t full_pkt_sz = num_data_bytes + base_pkt_sz;								//calculate full packet size
  402f54:	441d      	add	r5, r3
	if (buffer_get_data_sz() < full_pkt_sz) return false;								//make sure we have a full packet
  402f56:	4b06      	ldr	r3, [pc, #24]	; (402f70 <packet_complete+0x164>)
  402f58:	4798      	blx	r3
  402f5a:	4285      	cmp	r5, r0
  402f5c:	d99f      	bls.n	402e9e <packet_complete+0x92>
  402f5e:	2000      	movs	r0, #0
  402f60:	e783      	b.n	402e6a <packet_complete+0x5e>
  402f62:	bf00      	nop
  402f64:	200021e8 	.word	0x200021e8
  402f68:	2000136c 	.word	0x2000136c
  402f6c:	00402d75 	.word	0x00402d75
  402f70:	00402db9 	.word	0x00402db9
  402f74:	00402dd1 	.word	0x00402dd1

00402f78 <modbus_update>:
void modbus_update(void){
  402f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(buffer_get_data_sz() < ABS_MIN_PACKET_SIZE) return;			//if not enough data has been received just break out
  402f7a:	4b34      	ldr	r3, [pc, #208]	; (40304c <modbus_update+0xd4>)
  402f7c:	4798      	blx	r3
  402f7e:	2805      	cmp	r0, #5
  402f80:	d800      	bhi.n	402f84 <modbus_update+0xc>
  402f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( !packet_complete()) return;									//check if an entire packet has been received otherwise return, also resolves overflow errors
  402f84:	4b32      	ldr	r3, [pc, #200]	; (403050 <modbus_update+0xd8>)
  402f86:	4798      	blx	r3
  402f88:	2800      	cmp	r0, #0
  402f8a:	d0fa      	beq.n	402f82 <modbus_update+0xa>
	uint8_t* packet = pop_packet();									//packet is complete, so pull it out
  402f8c:	4b31      	ldr	r3, [pc, #196]	; (403054 <modbus_update+0xdc>)
  402f8e:	4798      	blx	r3
  402f90:	4604      	mov	r4, r0
	if(packet[SLAVE_ID_IDX] != slaveID) return;						//disregard if the packet doesn't apply to this slave
  402f92:	7802      	ldrb	r2, [r0, #0]
  402f94:	4b30      	ldr	r3, [pc, #192]	; (403058 <modbus_update+0xe0>)
  402f96:	781b      	ldrb	r3, [r3, #0]
  402f98:	429a      	cmp	r2, r3
  402f9a:	d1f2      	bne.n	402f82 <modbus_update+0xa>
	uint16_t start_reg = packet[START_REG_H_IDX] << 8 | packet[START_REG_L_IDX];
  402f9c:	7885      	ldrb	r5, [r0, #2]
  402f9e:	78c0      	ldrb	r0, [r0, #3]
  402fa0:	ea40 2605 	orr.w	r6, r0, r5, lsl #8
	uint16_t end_reg = packet[END_REG_H_IDX] << 8 | packet[END_REG_L_IDX];
  402fa4:	7921      	ldrb	r1, [r4, #4]
  402fa6:	7962      	ldrb	r2, [r4, #5]
  402fa8:	ea42 2701 	orr.w	r7, r2, r1, lsl #8
	switch(packet[FC_IDX]) {
  402fac:	7863      	ldrb	r3, [r4, #1]
  402fae:	2b03      	cmp	r3, #3
  402fb0:	d021      	beq.n	402ff6 <modbus_update+0x7e>
  402fb2:	2b10      	cmp	r3, #16
  402fb4:	d032      	beq.n	40301c <modbus_update+0xa4>
	uint16_t responceCRC = ModRTU_CRC(responsePacket, responsePacketSize-CRC_SIZE);			//calculate crc
  402fb6:	4b29      	ldr	r3, [pc, #164]	; (40305c <modbus_update+0xe4>)
  402fb8:	881d      	ldrh	r5, [r3, #0]
  402fba:	1eae      	subs	r6, r5, #2
  402fbc:	4c28      	ldr	r4, [pc, #160]	; (403060 <modbus_update+0xe8>)
  402fbe:	4631      	mov	r1, r6
  402fc0:	4620      	mov	r0, r4
  402fc2:	4b28      	ldr	r3, [pc, #160]	; (403064 <modbus_update+0xec>)
  402fc4:	4798      	blx	r3
	responsePacket[responsePacketSize-2] = responceCRC & 0xff;								//add CRC
  402fc6:	55a0      	strb	r0, [r4, r6]
	responsePacket[responsePacketSize-1] = (responceCRC>>8) & 0xff;
  402fc8:	442c      	add	r4, r5
  402fca:	0a00      	lsrs	r0, r0, #8
  402fcc:	f804 0c01 	strb.w	r0, [r4, #-1]
	pio_set(globalEnPinPort,globalEnPin);				//transceiver transmit enable
  402fd0:	4b25      	ldr	r3, [pc, #148]	; (403068 <modbus_update+0xf0>)
  402fd2:	6819      	ldr	r1, [r3, #0]
  402fd4:	4b25      	ldr	r3, [pc, #148]	; (40306c <modbus_update+0xf4>)
  402fd6:	6818      	ldr	r0, [r3, #0]
  402fd8:	4c25      	ldr	r4, [pc, #148]	; (403070 <modbus_update+0xf8>)
  402fda:	47a0      	blx	r4
	pio_set(RS485_NRE_PORT,RS485_NRE);
  402fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402fe0:	4824      	ldr	r0, [pc, #144]	; (403074 <modbus_update+0xfc>)
  402fe2:	47a0      	blx	r4
	transmitIndex = 0;
  402fe4:	2200      	movs	r2, #0
  402fe6:	4b24      	ldr	r3, [pc, #144]	; (403078 <modbus_update+0x100>)
  402fe8:	801a      	strh	r2, [r3, #0]
	uart_enable_interrupt(RS485Port,UART_IMR_TXRDY);
  402fea:	2102      	movs	r1, #2
  402fec:	4b23      	ldr	r3, [pc, #140]	; (40307c <modbus_update+0x104>)
  402fee:	6818      	ldr	r0, [r3, #0]
  402ff0:	4b23      	ldr	r3, [pc, #140]	; (403080 <modbus_update+0x108>)
  402ff2:	4798      	blx	r3
  402ff4:	e7c5      	b.n	402f82 <modbus_update+0xa>
			uint16_t read_num_bytes = getReadResponseDataSize(start_reg, end_reg);
  402ff6:	4639      	mov	r1, r7
  402ff8:	4630      	mov	r0, r6
  402ffa:	4b22      	ldr	r3, [pc, #136]	; (403084 <modbus_update+0x10c>)
  402ffc:	4798      	blx	r3
			responsePacketSize = RD_RESP_PACKET_MIN_SIZE + read_num_bytes;
  402ffe:	1d42      	adds	r2, r0, #5
  403000:	4b16      	ldr	r3, [pc, #88]	; (40305c <modbus_update+0xe4>)
  403002:	801a      	strh	r2, [r3, #0]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;						//this is how the protocol is now to help identify when the master or slave is speaking
  403004:	4b16      	ldr	r3, [pc, #88]	; (403060 <modbus_update+0xe8>)
  403006:	2200      	movs	r2, #0
  403008:	701a      	strb	r2, [r3, #0]
			responsePacket[FC_IDX] = packet[FC_IDX];
  40300a:	7862      	ldrb	r2, [r4, #1]
  40300c:	705a      	strb	r2, [r3, #1]
			responsePacket[RD_DATA_SIZE_IDX] = read_num_bytes;
  40300e:	7098      	strb	r0, [r3, #2]
			readHandler(responsePacket+RD_DATA_BYTE_START, start_reg, end_reg);
  403010:	463a      	mov	r2, r7
  403012:	4631      	mov	r1, r6
  403014:	1cd8      	adds	r0, r3, #3
  403016:	4b1c      	ldr	r3, [pc, #112]	; (403088 <modbus_update+0x110>)
  403018:	4798      	blx	r3
			break;
  40301a:	e7cc      	b.n	402fb6 <modbus_update+0x3e>
			responsePacketSize = WR_RESP_PACKET_SIZE;
  40301c:	f04f 0e08 	mov.w	lr, #8
  403020:	4b0e      	ldr	r3, [pc, #56]	; (40305c <modbus_update+0xe4>)
  403022:	f8a3 e000 	strh.w	lr, [r3]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;	
  403026:	4b0e      	ldr	r3, [pc, #56]	; (403060 <modbus_update+0xe8>)
  403028:	f04f 0e00 	mov.w	lr, #0
  40302c:	f883 e000 	strb.w	lr, [r3]
			responsePacket[FC_IDX] = packet[FC_IDX];
  403030:	f894 e001 	ldrb.w	lr, [r4, #1]
  403034:	f883 e001 	strb.w	lr, [r3, #1]
			responsePacket[START_REG_H_IDX] = packet[START_REG_H_IDX];
  403038:	709d      	strb	r5, [r3, #2]
			responsePacket[START_REG_L_IDX] = packet[START_REG_L_IDX];
  40303a:	70d8      	strb	r0, [r3, #3]
			responsePacket[END_REG_H_IDX] = packet[END_REG_H_IDX];
  40303c:	7119      	strb	r1, [r3, #4]
			responsePacket[END_REG_L_IDX] = packet[END_REG_L_IDX];
  40303e:	715a      	strb	r2, [r3, #5]
			writeHandler(&packet[WR_DATA_BYTE_START], start_reg, end_reg);
  403040:	463a      	mov	r2, r7
  403042:	4631      	mov	r1, r6
  403044:	1de0      	adds	r0, r4, #7
  403046:	4b11      	ldr	r3, [pc, #68]	; (40308c <modbus_update+0x114>)
  403048:	4798      	blx	r3
			break;
  40304a:	e7b4      	b.n	402fb6 <modbus_update+0x3e>
  40304c:	00402db9 	.word	0x00402db9
  403050:	00402e0d 	.word	0x00402e0d
  403054:	00402d75 	.word	0x00402d75
  403058:	200023f4 	.word	0x200023f4
  40305c:	200023f2 	.word	0x200023f2
  403060:	200019e4 	.word	0x200019e4
  403064:	00402dd1 	.word	0x00402dd1
  403068:	200021ec 	.word	0x200021ec
  40306c:	200021e4 	.word	0x200021e4
  403070:	00403145 	.word	0x00403145
  403074:	400e0e00 	.word	0x400e0e00
  403078:	200021ea 	.word	0x200021ea
  40307c:	200018e0 	.word	0x200018e0
  403080:	004034f7 	.word	0x004034f7
  403084:	00402b11 	.word	0x00402b11
  403088:	0040291d 	.word	0x0040291d
  40308c:	00402a11 	.word	0x00402a11

00403090 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  403090:	b510      	push	{r4, lr}
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  403092:	2020      	movs	r0, #32
  403094:	4b0a      	ldr	r3, [pc, #40]	; (4030c0 <sysclk_enable_usb+0x30>)
  403096:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403098:	4c0a      	ldr	r4, [pc, #40]	; (4030c4 <sysclk_enable_usb+0x34>)
  40309a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40309c:	2800      	cmp	r0, #0
  40309e:	d0fc      	beq.n	40309a <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4030a0:	4b09      	ldr	r3, [pc, #36]	; (4030c8 <sysclk_enable_usb+0x38>)
  4030a2:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4030a4:	4a09      	ldr	r2, [pc, #36]	; (4030cc <sysclk_enable_usb+0x3c>)
  4030a6:	4b0a      	ldr	r3, [pc, #40]	; (4030d0 <sysclk_enable_usb+0x40>)
  4030a8:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  4030aa:	4c0a      	ldr	r4, [pc, #40]	; (4030d4 <sysclk_enable_usb+0x44>)
  4030ac:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4030ae:	2800      	cmp	r0, #0
  4030b0:	d0fc      	beq.n	4030ac <sysclk_enable_usb+0x1c>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4030b2:	2001      	movs	r0, #1
  4030b4:	4b08      	ldr	r3, [pc, #32]	; (4030d8 <sysclk_enable_usb+0x48>)
  4030b6:	4798      	blx	r3
		pmc_enable_udpck();
  4030b8:	4b08      	ldr	r3, [pc, #32]	; (4030dc <sysclk_enable_usb+0x4c>)
  4030ba:	4798      	blx	r3
  4030bc:	bd10      	pop	{r4, pc}
  4030be:	bf00      	nop
  4030c0:	00403341 	.word	0x00403341
  4030c4:	0040338d 	.word	0x0040338d
  4030c8:	004033bd 	.word	0x004033bd
  4030cc:	000f3f02 	.word	0x000f3f02
  4030d0:	400e0400 	.word	0x400e0400
  4030d4:	004033c9 	.word	0x004033c9
  4030d8:	00403481 	.word	0x00403481
  4030dc:	00403495 	.word	0x00403495

004030e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4030e0:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4030e2:	480e      	ldr	r0, [pc, #56]	; (40311c <sysclk_init+0x3c>)
  4030e4:	4b0e      	ldr	r3, [pc, #56]	; (403120 <sysclk_init+0x40>)
  4030e6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4030e8:	2020      	movs	r0, #32
  4030ea:	4b0e      	ldr	r3, [pc, #56]	; (403124 <sysclk_init+0x44>)
  4030ec:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  4030ee:	4c0e      	ldr	r4, [pc, #56]	; (403128 <sysclk_init+0x48>)
  4030f0:	47a0      	blx	r4
  4030f2:	2800      	cmp	r0, #0
  4030f4:	d0fc      	beq.n	4030f0 <sysclk_init+0x10>
		pmc_disable_pllack(); // Always stop PLL first!
  4030f6:	4b0d      	ldr	r3, [pc, #52]	; (40312c <sysclk_init+0x4c>)
  4030f8:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4030fa:	4a0d      	ldr	r2, [pc, #52]	; (403130 <sysclk_init+0x50>)
  4030fc:	4b0d      	ldr	r3, [pc, #52]	; (403134 <sysclk_init+0x54>)
  4030fe:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  403100:	4c0d      	ldr	r4, [pc, #52]	; (403138 <sysclk_init+0x58>)
  403102:	47a0      	blx	r4
  403104:	2800      	cmp	r0, #0
  403106:	d0fc      	beq.n	403102 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403108:	2010      	movs	r0, #16
  40310a:	4b0c      	ldr	r3, [pc, #48]	; (40313c <sysclk_init+0x5c>)
  40310c:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40310e:	4b0c      	ldr	r3, [pc, #48]	; (403140 <sysclk_init+0x60>)
  403110:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());									//Might need to add back in
  403112:	4802      	ldr	r0, [pc, #8]	; (40311c <sysclk_init+0x3c>)
  403114:	4b02      	ldr	r3, [pc, #8]	; (403120 <sysclk_init+0x40>)
  403116:	4798      	blx	r3
  403118:	bd10      	pop	{r4, pc}
  40311a:	bf00      	nop
  40311c:	07270e00 	.word	0x07270e00
  403120:	0040388d 	.word	0x0040388d
  403124:	00403341 	.word	0x00403341
  403128:	0040338d 	.word	0x0040338d
  40312c:	0040339d 	.word	0x0040339d
  403130:	20133f01 	.word	0x20133f01
  403134:	400e0400 	.word	0x400e0400
  403138:	004033ad 	.word	0x004033ad
  40313c:	004032dd 	.word	0x004032dd
  403140:	00403779 	.word	0x00403779

00403144 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  403144:	6301      	str	r1, [r0, #48]	; 0x30
  403146:	4770      	bx	lr

00403148 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  403148:	6341      	str	r1, [r0, #52]	; 0x34
  40314a:	4770      	bx	lr

0040314c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40314c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  403150:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
  403154:	bf0c      	ite	eq
  403156:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
  403158:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
  40315a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40315c:	bf14      	ite	ne
  40315e:	2001      	movne	r0, #1
  403160:	2000      	moveq	r0, #0
  403162:	4770      	bx	lr

00403164 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403164:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  403166:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40316a:	d039      	beq.n	4031e0 <pio_set_peripheral+0x7c>
  40316c:	d813      	bhi.n	403196 <pio_set_peripheral+0x32>
  40316e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  403172:	d025      	beq.n	4031c0 <pio_set_peripheral+0x5c>
  403174:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  403178:	d10a      	bne.n	403190 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40317a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40317c:	4313      	orrs	r3, r2
  40317e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  403180:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403182:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403184:	400b      	ands	r3, r1
  403186:	ea23 0302 	bic.w	r3, r3, r2
  40318a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40318c:	6042      	str	r2, [r0, #4]
  40318e:	4770      	bx	lr
	switch (ul_type) {
  403190:	2900      	cmp	r1, #0
  403192:	d1fb      	bne.n	40318c <pio_set_peripheral+0x28>
  403194:	4770      	bx	lr
  403196:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40319a:	d020      	beq.n	4031de <pio_set_peripheral+0x7a>
  40319c:	d809      	bhi.n	4031b2 <pio_set_peripheral+0x4e>
  40319e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4031a2:	d1f3      	bne.n	40318c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4031a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4031a6:	4313      	orrs	r3, r2
  4031a8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031aa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4031ac:	4313      	orrs	r3, r2
  4031ae:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4031b0:	e7ec      	b.n	40318c <pio_set_peripheral+0x28>
	switch (ul_type) {
  4031b2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4031b6:	d012      	beq.n	4031de <pio_set_peripheral+0x7a>
  4031b8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4031bc:	d00f      	beq.n	4031de <pio_set_peripheral+0x7a>
  4031be:	e7e5      	b.n	40318c <pio_set_peripheral+0x28>
{
  4031c0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4031c2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4031c4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4031c6:	43d3      	mvns	r3, r2
  4031c8:	4021      	ands	r1, r4
  4031ca:	461c      	mov	r4, r3
  4031cc:	4019      	ands	r1, r3
  4031ce:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4031d2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4031d4:	400b      	ands	r3, r1
  4031d6:	4023      	ands	r3, r4
  4031d8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4031da:	6042      	str	r2, [r0, #4]
}
  4031dc:	bc10      	pop	{r4}
  4031de:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4031e0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4031e2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4031e4:	400b      	ands	r3, r1
  4031e6:	ea23 0302 	bic.w	r3, r3, r2
  4031ea:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4031ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4031ee:	4313      	orrs	r3, r2
  4031f0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4031f2:	e7cb      	b.n	40318c <pio_set_peripheral+0x28>

004031f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4031f4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4031f6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4031fa:	bf14      	ite	ne
  4031fc:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4031fe:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403200:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  403204:	bf14      	ite	ne
  403206:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  403208:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40320a:	f012 0f02 	tst.w	r2, #2
  40320e:	d107      	bne.n	403220 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  403210:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  403214:	bf18      	it	ne
  403216:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40321a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40321c:	6001      	str	r1, [r0, #0]
  40321e:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  403220:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  403224:	e7f9      	b.n	40321a <pio_set_input+0x26>

00403226 <pio_set_output>:
{
  403226:	b410      	push	{r4}
  403228:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40322a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40322c:	b944      	cbnz	r4, 403240 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  40322e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  403230:	b143      	cbz	r3, 403244 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  403232:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  403234:	b942      	cbnz	r2, 403248 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  403236:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  403238:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40323a:	6001      	str	r1, [r0, #0]
}
  40323c:	bc10      	pop	{r4}
  40323e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403240:	6641      	str	r1, [r0, #100]	; 0x64
  403242:	e7f5      	b.n	403230 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403244:	6541      	str	r1, [r0, #84]	; 0x54
  403246:	e7f5      	b.n	403234 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  403248:	6301      	str	r1, [r0, #48]	; 0x30
  40324a:	e7f5      	b.n	403238 <pio_set_output+0x12>

0040324c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40324c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40324e:	4770      	bx	lr

00403250 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403250:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403252:	4770      	bx	lr

00403254 <pio_toggle_pin_group>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_toggle_pin_group(Pio *p_pio, uint32_t ul_mask)
{
	if (p_pio->PIO_ODSR & ul_mask) {
  403254:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403256:	420b      	tst	r3, r1
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = ul_mask;
  403258:	bf14      	ite	ne
  40325a:	6341      	strne	r1, [r0, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = ul_mask;
  40325c:	6301      	streq	r1, [r0, #48]	; 0x30
  40325e:	4770      	bx	lr

00403260 <pio_enable_pin_interrupt>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403260:	0943      	lsrs	r3, r0, #5
  403262:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  403266:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40326a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_IER = 1 << (ul_pin & 0x1F);
  40326c:	f000 001f 	and.w	r0, r0, #31
  403270:	2201      	movs	r2, #1
  403272:	fa02 f000 	lsl.w	r0, r2, r0
  403276:	6418      	str	r0, [r3, #64]	; 0x40
  403278:	4770      	bx	lr
	...

0040327c <pmc_switch_mck_to_sclk>:
 */
uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40327c:	4b16      	ldr	r3, [pc, #88]	; (4032d8 <pmc_switch_mck_to_sclk+0x5c>)
  40327e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403280:	f022 0203 	bic.w	r2, r2, #3
  403284:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403288:	f013 0f08 	tst.w	r3, #8
  40328c:	d10a      	bne.n	4032a4 <pmc_switch_mck_to_sclk+0x28>
  40328e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403292:	4911      	ldr	r1, [pc, #68]	; (4032d8 <pmc_switch_mck_to_sclk+0x5c>)
  403294:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403296:	f012 0f08 	tst.w	r2, #8
  40329a:	d103      	bne.n	4032a4 <pmc_switch_mck_to_sclk+0x28>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40329c:	3b01      	subs	r3, #1
  40329e:	d1f9      	bne.n	403294 <pmc_switch_mck_to_sclk+0x18>
			return 1;
  4032a0:	2001      	movs	r0, #1
  4032a2:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4032a4:	4a0c      	ldr	r2, [pc, #48]	; (4032d8 <pmc_switch_mck_to_sclk+0x5c>)
  4032a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4032a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4032ac:	4318      	orrs	r0, r3
  4032ae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4032b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4032b2:	f013 0f08 	tst.w	r3, #8
  4032b6:	d10a      	bne.n	4032ce <pmc_switch_mck_to_sclk+0x52>
  4032b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4032bc:	4906      	ldr	r1, [pc, #24]	; (4032d8 <pmc_switch_mck_to_sclk+0x5c>)
  4032be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4032c0:	f012 0f08 	tst.w	r2, #8
  4032c4:	d105      	bne.n	4032d2 <pmc_switch_mck_to_sclk+0x56>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4032c6:	3b01      	subs	r3, #1
  4032c8:	d1f9      	bne.n	4032be <pmc_switch_mck_to_sclk+0x42>
			return 1;
  4032ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4032cc:	4770      	bx	lr
	return 0;
  4032ce:	2000      	movs	r0, #0
  4032d0:	4770      	bx	lr
  4032d2:	2000      	movs	r0, #0
  4032d4:	4770      	bx	lr
  4032d6:	bf00      	nop
  4032d8:	400e0400 	.word	0x400e0400

004032dc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4032dc:	4a17      	ldr	r2, [pc, #92]	; (40333c <pmc_switch_mck_to_pllack+0x60>)
  4032de:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4032e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4032e4:	4318      	orrs	r0, r3
  4032e6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4032e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4032ea:	f013 0f08 	tst.w	r3, #8
  4032ee:	d10a      	bne.n	403306 <pmc_switch_mck_to_pllack+0x2a>
  4032f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4032f4:	4911      	ldr	r1, [pc, #68]	; (40333c <pmc_switch_mck_to_pllack+0x60>)
  4032f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4032f8:	f012 0f08 	tst.w	r2, #8
  4032fc:	d103      	bne.n	403306 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4032fe:	3b01      	subs	r3, #1
  403300:	d1f9      	bne.n	4032f6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  403302:	2001      	movs	r0, #1
  403304:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403306:	4a0d      	ldr	r2, [pc, #52]	; (40333c <pmc_switch_mck_to_pllack+0x60>)
  403308:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40330a:	f023 0303 	bic.w	r3, r3, #3
  40330e:	f043 0302 	orr.w	r3, r3, #2
  403312:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403314:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403316:	f013 0f08 	tst.w	r3, #8
  40331a:	d10a      	bne.n	403332 <pmc_switch_mck_to_pllack+0x56>
  40331c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403320:	4906      	ldr	r1, [pc, #24]	; (40333c <pmc_switch_mck_to_pllack+0x60>)
  403322:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403324:	f012 0f08 	tst.w	r2, #8
  403328:	d105      	bne.n	403336 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40332a:	3b01      	subs	r3, #1
  40332c:	d1f9      	bne.n	403322 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40332e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403330:	4770      	bx	lr
	return 0;
  403332:	2000      	movs	r0, #0
  403334:	4770      	bx	lr
  403336:	2000      	movs	r0, #0
  403338:	4770      	bx	lr
  40333a:	bf00      	nop
  40333c:	400e0400 	.word	0x400e0400

00403340 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  403340:	4911      	ldr	r1, [pc, #68]	; (403388 <pmc_switch_mainck_to_fastrc+0x48>)
  403342:	6a0a      	ldr	r2, [r1, #32]
  403344:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  403348:	f042 0208 	orr.w	r2, r2, #8
  40334c:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40334e:	460a      	mov	r2, r1
  403350:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403352:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  403356:	d0fb      	beq.n	403350 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  403358:	4a0b      	ldr	r2, [pc, #44]	; (403388 <pmc_switch_mainck_to_fastrc+0x48>)
  40335a:	6a13      	ldr	r3, [r2, #32]
  40335c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  403360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  403364:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403368:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40336a:	6210      	str	r0, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40336c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40336e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  403372:	d0fb      	beq.n	40336c <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  403374:	4a04      	ldr	r2, [pc, #16]	; (403388 <pmc_switch_mainck_to_fastrc+0x48>)
  403376:	6a13      	ldr	r3, [r2, #32]
  403378:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40337c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  403380:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403384:	6213      	str	r3, [r2, #32]
  403386:	4770      	bx	lr
  403388:	400e0400 	.word	0x400e0400

0040338c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40338c:	4b02      	ldr	r3, [pc, #8]	; (403398 <pmc_osc_is_ready_mainck+0xc>)
  40338e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403390:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403394:	4770      	bx	lr
  403396:	bf00      	nop
  403398:	400e0400 	.word	0x400e0400

0040339c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40339c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4033a0:	4b01      	ldr	r3, [pc, #4]	; (4033a8 <pmc_disable_pllack+0xc>)
  4033a2:	629a      	str	r2, [r3, #40]	; 0x28
  4033a4:	4770      	bx	lr
  4033a6:	bf00      	nop
  4033a8:	400e0400 	.word	0x400e0400

004033ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4033ac:	4b02      	ldr	r3, [pc, #8]	; (4033b8 <pmc_is_locked_pllack+0xc>)
  4033ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4033b0:	f000 0002 	and.w	r0, r0, #2
  4033b4:	4770      	bx	lr
  4033b6:	bf00      	nop
  4033b8:	400e0400 	.word	0x400e0400

004033bc <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4033bc:	2200      	movs	r2, #0
  4033be:	4b01      	ldr	r3, [pc, #4]	; (4033c4 <pmc_disable_pllbck+0x8>)
  4033c0:	62da      	str	r2, [r3, #44]	; 0x2c
  4033c2:	4770      	bx	lr
  4033c4:	400e0400 	.word	0x400e0400

004033c8 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4033c8:	4b02      	ldr	r3, [pc, #8]	; (4033d4 <pmc_is_locked_pllbck+0xc>)
  4033ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4033cc:	f000 0004 	and.w	r0, r0, #4
  4033d0:	4770      	bx	lr
  4033d2:	bf00      	nop
  4033d4:	400e0400 	.word	0x400e0400

004033d8 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4033d8:	2822      	cmp	r0, #34	; 0x22
  4033da:	d81e      	bhi.n	40341a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4033dc:	281f      	cmp	r0, #31
  4033de:	d80c      	bhi.n	4033fa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4033e0:	4b11      	ldr	r3, [pc, #68]	; (403428 <pmc_enable_periph_clk+0x50>)
  4033e2:	699a      	ldr	r2, [r3, #24]
  4033e4:	2301      	movs	r3, #1
  4033e6:	4083      	lsls	r3, r0
  4033e8:	4393      	bics	r3, r2
  4033ea:	d018      	beq.n	40341e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4033ec:	2301      	movs	r3, #1
  4033ee:	fa03 f000 	lsl.w	r0, r3, r0
  4033f2:	4b0d      	ldr	r3, [pc, #52]	; (403428 <pmc_enable_periph_clk+0x50>)
  4033f4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4033f6:	2000      	movs	r0, #0
  4033f8:	4770      	bx	lr
		ul_id -= 32;
  4033fa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4033fc:	4b0a      	ldr	r3, [pc, #40]	; (403428 <pmc_enable_periph_clk+0x50>)
  4033fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403402:	2301      	movs	r3, #1
  403404:	4083      	lsls	r3, r0
  403406:	4393      	bics	r3, r2
  403408:	d00b      	beq.n	403422 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40340a:	2301      	movs	r3, #1
  40340c:	fa03 f000 	lsl.w	r0, r3, r0
  403410:	4b05      	ldr	r3, [pc, #20]	; (403428 <pmc_enable_periph_clk+0x50>)
  403412:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  403416:	2000      	movs	r0, #0
  403418:	4770      	bx	lr
		return 1;
  40341a:	2001      	movs	r0, #1
  40341c:	4770      	bx	lr
	return 0;
  40341e:	2000      	movs	r0, #0
  403420:	4770      	bx	lr
  403422:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403424:	4770      	bx	lr
  403426:	bf00      	nop
  403428:	400e0400 	.word	0x400e0400

0040342c <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40342c:	2822      	cmp	r0, #34	; 0x22
  40342e:	d822      	bhi.n	403476 <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  403430:	281f      	cmp	r0, #31
  403432:	d80e      	bhi.n	403452 <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  403434:	4b11      	ldr	r3, [pc, #68]	; (40347c <pmc_disable_periph_clk+0x50>)
  403436:	699a      	ldr	r2, [r3, #24]
  403438:	2301      	movs	r3, #1
  40343a:	4083      	lsls	r3, r0
  40343c:	4393      	bics	r3, r2
  40343e:	d001      	beq.n	403444 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  403440:	2000      	movs	r0, #0
  403442:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  403444:	2301      	movs	r3, #1
  403446:	fa03 f000 	lsl.w	r0, r3, r0
  40344a:	4b0c      	ldr	r3, [pc, #48]	; (40347c <pmc_disable_periph_clk+0x50>)
  40344c:	6158      	str	r0, [r3, #20]
	return 0;
  40344e:	2000      	movs	r0, #0
  403450:	4770      	bx	lr
		ul_id -= 32;
  403452:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  403454:	4b09      	ldr	r3, [pc, #36]	; (40347c <pmc_disable_periph_clk+0x50>)
  403456:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40345a:	2301      	movs	r3, #1
  40345c:	4083      	lsls	r3, r0
  40345e:	4393      	bics	r3, r2
  403460:	d001      	beq.n	403466 <pmc_disable_periph_clk+0x3a>
	return 0;
  403462:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403464:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  403466:	2301      	movs	r3, #1
  403468:	fa03 f000 	lsl.w	r0, r3, r0
  40346c:	4b03      	ldr	r3, [pc, #12]	; (40347c <pmc_disable_periph_clk+0x50>)
  40346e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  403472:	2000      	movs	r0, #0
  403474:	4770      	bx	lr
		return 1;
  403476:	2001      	movs	r0, #1
  403478:	4770      	bx	lr
  40347a:	bf00      	nop
  40347c:	400e0400 	.word	0x400e0400

00403480 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  403480:	0200      	lsls	r0, r0, #8
  403482:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  403486:	f040 0001 	orr.w	r0, r0, #1
  40348a:	4b01      	ldr	r3, [pc, #4]	; (403490 <pmc_switch_udpck_to_pllbck+0x10>)
  40348c:	6398      	str	r0, [r3, #56]	; 0x38
  40348e:	4770      	bx	lr
  403490:	400e0400 	.word	0x400e0400

00403494 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  403494:	2280      	movs	r2, #128	; 0x80
  403496:	4b01      	ldr	r3, [pc, #4]	; (40349c <pmc_enable_udpck+0x8>)
  403498:	601a      	str	r2, [r3, #0]
  40349a:	4770      	bx	lr
  40349c:	400e0400 	.word	0x400e0400

004034a0 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4034a0:	4b03      	ldr	r3, [pc, #12]	; (4034b0 <pmc_set_fast_startup_input+0x10>)
  4034a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4034a4:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4034a8:	4310      	orrs	r0, r2
  4034aa:	6718      	str	r0, [r3, #112]	; 0x70
  4034ac:	4770      	bx	lr
  4034ae:	bf00      	nop
  4034b0:	400e0400 	.word	0x400e0400

004034b4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4034b4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4034b6:	23ac      	movs	r3, #172	; 0xac
  4034b8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4034ba:	680b      	ldr	r3, [r1, #0]
  4034bc:	684a      	ldr	r2, [r1, #4]
  4034be:	fbb3 f3f2 	udiv	r3, r3, r2
  4034c2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4034c4:	1e5c      	subs	r4, r3, #1
  4034c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4034ca:	4294      	cmp	r4, r2
  4034cc:	d80b      	bhi.n	4034e6 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  4034ce:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4034d0:	688b      	ldr	r3, [r1, #8]
  4034d2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4034d4:	f240 2302 	movw	r3, #514	; 0x202
  4034d8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4034dc:	2350      	movs	r3, #80	; 0x50
  4034de:	6003      	str	r3, [r0, #0]

	return 0;
  4034e0:	2000      	movs	r0, #0
}
  4034e2:	bc10      	pop	{r4}
  4034e4:	4770      	bx	lr
		return 1;
  4034e6:	2001      	movs	r0, #1
  4034e8:	e7fb      	b.n	4034e2 <uart_init+0x2e>

004034ea <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  4034ea:	2340      	movs	r3, #64	; 0x40
  4034ec:	6003      	str	r3, [r0, #0]
  4034ee:	4770      	bx	lr

004034f0 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  4034f0:	2310      	movs	r3, #16
  4034f2:	6003      	str	r3, [r0, #0]
  4034f4:	4770      	bx	lr

004034f6 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  4034f6:	6081      	str	r1, [r0, #8]
  4034f8:	4770      	bx	lr

004034fa <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  4034fa:	60c1      	str	r1, [r0, #12]
  4034fc:	4770      	bx	lr

004034fe <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  4034fe:	6940      	ldr	r0, [r0, #20]
}
  403500:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403504:	4770      	bx	lr

00403506 <uart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  403506:	6940      	ldr	r0, [r0, #20]
}
  403508:	f3c0 2040 	ubfx	r0, r0, #9, #1
  40350c:	4770      	bx	lr

0040350e <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  40350e:	6940      	ldr	r0, [r0, #20]
}
  403510:	f000 0001 	and.w	r0, r0, #1
  403514:	4770      	bx	lr

00403516 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  403516:	6943      	ldr	r3, [r0, #20]
  403518:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40351c:	bf1a      	itte	ne
  40351e:	61c1      	strne	r1, [r0, #28]
	return 0;
  403520:	2000      	movne	r0, #0
		return 1;
  403522:	2001      	moveq	r0, #1
}
  403524:	4770      	bx	lr

00403526 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  403526:	6943      	ldr	r3, [r0, #20]
  403528:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40352c:	bf1d      	ittte	ne
  40352e:	6983      	ldrne	r3, [r0, #24]
  403530:	700b      	strbne	r3, [r1, #0]
	return 0;
  403532:	2000      	movne	r0, #0
		return 1;
  403534:	2001      	moveq	r0, #1
}
  403536:	4770      	bx	lr

00403538 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403538:	4b02      	ldr	r3, [pc, #8]	; (403544 <pmc_is_wakeup_clocks_restored+0xc>)
  40353a:	7818      	ldrb	r0, [r3, #0]
}
  40353c:	f080 0001 	eor.w	r0, r0, #1
  403540:	4770      	bx	lr
  403542:	bf00      	nop
  403544:	20001770 	.word	0x20001770

00403548 <board_init>:
#include <conf_board.h>
#include <modbus.h>
#include <registers.h>

void board_init(void)
{
  403548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40354c:	b083      	sub	sp, #12
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	WDT->WDT_MR |= WDT_MR_WDDIS; // Disable watchdog timer to prevent uC resetting every 15 seconds :)
  40354e:	4a4f      	ldr	r2, [pc, #316]	; (40368c <board_init+0x144>)
  403550:	6853      	ldr	r3, [r2, #4]
  403552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  403556:	6053      	str	r3, [r2, #4]
	
	//Enable USB Comm port so we can send debug data over serial to a computer (could be useful)
	//Configuration for this is in conf_usb.h
	
	udc_start();
  403558:	4b4d      	ldr	r3, [pc, #308]	; (403690 <board_init+0x148>)
  40355a:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
  40355c:	200b      	movs	r0, #11
  40355e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4036c0 <board_init+0x178>
  403562:	47c0      	blx	r8
	pmc_enable_periph_clk(ID_PIOB);
  403564:	200c      	movs	r0, #12
  403566:	47c0      	blx	r8
	
	pio_set_output(RS485_NRE_PORT,RS485_NRE,LOW,DISABLE,DISABLE);			//init modbus receive enable pin		//only necessary for low power mode builds
  403568:	4d4a      	ldr	r5, [pc, #296]	; (403694 <board_init+0x14c>)
  40356a:	2400      	movs	r4, #0
  40356c:	9400      	str	r4, [sp, #0]
  40356e:	4623      	mov	r3, r4
  403570:	4622      	mov	r2, r4
  403572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403576:	4628      	mov	r0, r5
  403578:	4e47      	ldr	r6, [pc, #284]	; (403698 <board_init+0x150>)
  40357a:	47b0      	blx	r6
	modbus_init(UART1,500000,RS485_DE_PORT,RS485_DE,SLAVEID);					//init modbus      //note this version of modbus has been modified to support sleep mode
  40357c:	2701      	movs	r7, #1
  40357e:	9700      	str	r7, [sp, #0]
  403580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403584:	462a      	mov	r2, r5
  403586:	4945      	ldr	r1, [pc, #276]	; (40369c <board_init+0x154>)
  403588:	4845      	ldr	r0, [pc, #276]	; (4036a0 <board_init+0x158>)
  40358a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 4036c4 <board_init+0x17c>
  40358e:	47c8      	blx	r9
	
	pio_set_output(TEMP_SEL0_PORT,TEMP_SEL0,LOW,DISABLE,DISABLE);
  403590:	9400      	str	r4, [sp, #0]
  403592:	4623      	mov	r3, r4
  403594:	4622      	mov	r2, r4
  403596:	f44f 7180 	mov.w	r1, #256	; 0x100
  40359a:	4628      	mov	r0, r5
  40359c:	47b0      	blx	r6
	pio_set_output(TEMP_SEL1_PORT,TEMP_SEL1,LOW,DISABLE,DISABLE);
  40359e:	9400      	str	r4, [sp, #0]
  4035a0:	4623      	mov	r3, r4
  4035a2:	4622      	mov	r2, r4
  4035a4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4035a8:	4628      	mov	r0, r5
  4035aa:	47b0      	blx	r6
	pio_set_output(TEMP_SEL2_PORT,TEMP_SEL2,LOW,DISABLE,DISABLE);
  4035ac:	9400      	str	r4, [sp, #0]
  4035ae:	4623      	mov	r3, r4
  4035b0:	4622      	mov	r2, r4
  4035b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4035b6:	4628      	mov	r0, r5
  4035b8:	47b0      	blx	r6
	
	pio_set_output(CELL_SEL0_PORT,CELL_SEL0,LOW,DISABLE,DISABLE);
  4035ba:	9400      	str	r4, [sp, #0]
  4035bc:	4623      	mov	r3, r4
  4035be:	4622      	mov	r2, r4
  4035c0:	2110      	movs	r1, #16
  4035c2:	4628      	mov	r0, r5
  4035c4:	47b0      	blx	r6
	pio_set_output(CELL_SEL1_PORT,CELL_SEL1,LOW,DISABLE,DISABLE);
  4035c6:	9400      	str	r4, [sp, #0]
  4035c8:	4623      	mov	r3, r4
  4035ca:	4622      	mov	r2, r4
  4035cc:	2120      	movs	r1, #32
  4035ce:	4628      	mov	r0, r5
  4035d0:	47b0      	blx	r6
	pio_set_output(CELL_SEL2_PORT,CELL_SEL2,LOW,DISABLE,DISABLE);
  4035d2:	9400      	str	r4, [sp, #0]
  4035d4:	4623      	mov	r3, r4
  4035d6:	4622      	mov	r2, r4
  4035d8:	2140      	movs	r1, #64	; 0x40
  4035da:	4628      	mov	r0, r5
  4035dc:	47b0      	blx	r6
	
	pio_set_output(AFE_EN_PORT,AFE_EN,HIGH,DISABLE,DISABLE);
  4035de:	9400      	str	r4, [sp, #0]
  4035e0:	4623      	mov	r3, r4
  4035e2:	463a      	mov	r2, r7
  4035e4:	2180      	movs	r1, #128	; 0x80
  4035e6:	4628      	mov	r0, r5
  4035e8:	47b0      	blx	r6
	
	pio_set_output(NBAT_EN_PORT,NBAT_EN,HIGH,DISABLE,DISABLE);
  4035ea:	9400      	str	r4, [sp, #0]
  4035ec:	4623      	mov	r3, r4
  4035ee:	463a      	mov	r2, r7
  4035f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4035f4:	4628      	mov	r0, r5
  4035f6:	47b0      	blx	r6
	
	pio_set_output(BOARD_LED_PORT,BOARD_LED,LOW,DISABLE,DISABLE);
  4035f8:	9400      	str	r4, [sp, #0]
  4035fa:	4623      	mov	r3, r4
  4035fc:	4622      	mov	r2, r4
  4035fe:	2108      	movs	r1, #8
  403600:	4628      	mov	r0, r5
  403602:	47b0      	blx	r6
	
	pio_set_input(PWR_SW_PORT,PWR_SW,PIO_DEBOUNCE);
  403604:	2208      	movs	r2, #8
  403606:	4639      	mov	r1, r7
  403608:	4628      	mov	r0, r5
  40360a:	4e26      	ldr	r6, [pc, #152]	; (4036a4 <board_init+0x15c>)
  40360c:	47b0      	blx	r6
	
	pio_set_input(USB_SNS_PORT,USB_SNS,PIO_DEBOUNCE);
  40360e:	2208      	movs	r2, #8
  403610:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  403614:	4628      	mov	r0, r5
  403616:	47b0      	blx	r6
	
	pio_set_input(CELLV_SNS_PORT,CELLV_SNS,NULL);
  403618:	4622      	mov	r2, r4
  40361a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40361e:	4628      	mov	r0, r5
  403620:	47b0      	blx	r6
	
	pio_set_input(CURRENT_SNS_PORT,CURRENT_SNS,NULL);
  403622:	4622      	mov	r2, r4
  403624:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  403628:	4628      	mov	r0, r5
  40362a:	47b0      	blx	r6
	
	pio_set_input(STACK_SNS_PORT,STACK_SNS,NULL);
  40362c:	4622      	mov	r2, r4
  40362e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403632:	4628      	mov	r0, r5
  403634:	47b0      	blx	r6
	
	pio_set_input(EXT_TEMP_SNS_PORT,EXT_TEMP_SNS,NULL);
  403636:	4622      	mov	r2, r4
  403638:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40363c:	4628      	mov	r0, r5
  40363e:	47b0      	blx	r6
	
	pio_set_input(FETTEMP_SNS_PORT,FETTEMP_SNS,NULL);
  403640:	f505 7500 	add.w	r5, r5, #512	; 0x200
  403644:	4622      	mov	r2, r4
  403646:	4639      	mov	r1, r7
  403648:	4628      	mov	r0, r5
  40364a:	47b0      	blx	r6
	
	pio_set_input(SHUNTTEMP_SNS_PORT,SHUNTTEMP_SNS,NULL);
  40364c:	4622      	mov	r2, r4
  40364e:	2102      	movs	r1, #2
  403650:	4628      	mov	r0, r5
  403652:	47b0      	blx	r6
	
	pio_enable_pin_interrupt(0);
  403654:	4620      	mov	r0, r4
  403656:	4d14      	ldr	r5, [pc, #80]	; (4036a8 <board_init+0x160>)
  403658:	47a8      	blx	r5
	pio_enable_pin_interrupt(14);
  40365a:	200e      	movs	r0, #14
  40365c:	47a8      	blx	r5
  40365e:	2208      	movs	r2, #8
  403660:	4b12      	ldr	r3, [pc, #72]	; (4036ac <board_init+0x164>)
  403662:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(RTT_IRQn);
	pmc_enable_periph_clk(ID_RTT);
  403664:	2003      	movs	r0, #3
  403666:	47c0      	blx	r8
	rtt_init(RTT,0);
  403668:	4d11      	ldr	r5, [pc, #68]	; (4036b0 <board_init+0x168>)
  40366a:	4621      	mov	r1, r4
  40366c:	4628      	mov	r0, r5
  40366e:	4b11      	ldr	r3, [pc, #68]	; (4036b4 <board_init+0x16c>)
  403670:	4798      	blx	r3
	rtt_write_alarm_time(RTT,PERIODIC_WAKEUP_TIME * 60/2);
  403672:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
  403676:	4628      	mov	r0, r5
  403678:	4b0f      	ldr	r3, [pc, #60]	; (4036b8 <board_init+0x170>)
  40367a:	4798      	blx	r3
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40367c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403680:	4628      	mov	r0, r5
  403682:	4b0e      	ldr	r3, [pc, #56]	; (4036bc <board_init+0x174>)
  403684:	4798      	blx	r3
  403686:	b003      	add	sp, #12
  403688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40368c:	400e1450 	.word	0x400e1450
  403690:	004009a5 	.word	0x004009a5
  403694:	400e0e00 	.word	0x400e0e00
  403698:	00403227 	.word	0x00403227
  40369c:	0007a120 	.word	0x0007a120
  4036a0:	400e0800 	.word	0x400e0800
  4036a4:	004031f5 	.word	0x004031f5
  4036a8:	00403261 	.word	0x00403261
  4036ac:	e000e100 	.word	0xe000e100
  4036b0:	400e1430 	.word	0x400e1430
  4036b4:	00400fc9 	.word	0x00400fc9
  4036b8:	00401009 	.word	0x00401009
  4036bc:	00400fdd 	.word	0x00400fdd
  4036c0:	004033d9 	.word	0x004033d9
  4036c4:	00402b95 	.word	0x00402b95

004036c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4036c8:	e7fe      	b.n	4036c8 <Dummy_Handler>
	...

004036cc <Reset_Handler>:
{
  4036cc:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4036ce:	4b21      	ldr	r3, [pc, #132]	; (403754 <Reset_Handler+0x88>)
  4036d0:	4a21      	ldr	r2, [pc, #132]	; (403758 <Reset_Handler+0x8c>)
  4036d2:	429a      	cmp	r2, r3
  4036d4:	d928      	bls.n	403728 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4036d6:	4b21      	ldr	r3, [pc, #132]	; (40375c <Reset_Handler+0x90>)
  4036d8:	4a1e      	ldr	r2, [pc, #120]	; (403754 <Reset_Handler+0x88>)
  4036da:	429a      	cmp	r2, r3
  4036dc:	d20c      	bcs.n	4036f8 <Reset_Handler+0x2c>
  4036de:	3b01      	subs	r3, #1
  4036e0:	1a9b      	subs	r3, r3, r2
  4036e2:	f023 0303 	bic.w	r3, r3, #3
  4036e6:	3304      	adds	r3, #4
  4036e8:	4413      	add	r3, r2
  4036ea:	491b      	ldr	r1, [pc, #108]	; (403758 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4036ec:	f851 0b04 	ldr.w	r0, [r1], #4
  4036f0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4036f4:	429a      	cmp	r2, r3
  4036f6:	d1f9      	bne.n	4036ec <Reset_Handler+0x20>
	__NOP();
  4036f8:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4036fa:	4b19      	ldr	r3, [pc, #100]	; (403760 <Reset_Handler+0x94>)
  4036fc:	4a19      	ldr	r2, [pc, #100]	; (403764 <Reset_Handler+0x98>)
  4036fe:	429a      	cmp	r2, r3
  403700:	d20a      	bcs.n	403718 <Reset_Handler+0x4c>
  403702:	3b01      	subs	r3, #1
  403704:	1a9b      	subs	r3, r3, r2
  403706:	f023 0303 	bic.w	r3, r3, #3
  40370a:	3304      	adds	r3, #4
  40370c:	4413      	add	r3, r2
		*pDest++ = 0;
  40370e:	2100      	movs	r1, #0
  403710:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  403714:	429a      	cmp	r2, r3
  403716:	d1fb      	bne.n	403710 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  403718:	4b13      	ldr	r3, [pc, #76]	; (403768 <Reset_Handler+0x9c>)
  40371a:	4a14      	ldr	r2, [pc, #80]	; (40376c <Reset_Handler+0xa0>)
  40371c:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  40371e:	4b14      	ldr	r3, [pc, #80]	; (403770 <Reset_Handler+0xa4>)
  403720:	4798      	blx	r3
	main();
  403722:	4b14      	ldr	r3, [pc, #80]	; (403774 <Reset_Handler+0xa8>)
  403724:	4798      	blx	r3
  403726:	e7fe      	b.n	403726 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  403728:	4b0a      	ldr	r3, [pc, #40]	; (403754 <Reset_Handler+0x88>)
  40372a:	4a0b      	ldr	r2, [pc, #44]	; (403758 <Reset_Handler+0x8c>)
  40372c:	429a      	cmp	r2, r3
  40372e:	d2e3      	bcs.n	4036f8 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403730:	4b0a      	ldr	r3, [pc, #40]	; (40375c <Reset_Handler+0x90>)
  403732:	4808      	ldr	r0, [pc, #32]	; (403754 <Reset_Handler+0x88>)
  403734:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  403736:	4611      	mov	r1, r2
  403738:	3a04      	subs	r2, #4
  40373a:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  40373c:	2800      	cmp	r0, #0
  40373e:	d0db      	beq.n	4036f8 <Reset_Handler+0x2c>
  403740:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  403744:	f852 0904 	ldr.w	r0, [r2], #-4
  403748:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  40374c:	42ca      	cmn	r2, r1
  40374e:	d1f9      	bne.n	403744 <Reset_Handler+0x78>
  403750:	e7d2      	b.n	4036f8 <Reset_Handler+0x2c>
  403752:	bf00      	nop
  403754:	20000000 	.word	0x20000000
  403758:	0040aafc 	.word	0x0040aafc
  40375c:	20000b38 	.word	0x20000b38
  403760:	20004620 	.word	0x20004620
  403764:	20000b38 	.word	0x20000b38
  403768:	e000ed00 	.word	0xe000ed00
  40376c:	00400000 	.word	0x00400000
  403770:	00406395 	.word	0x00406395
  403774:	00404f29 	.word	0x00404f29

00403778 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403778:	4b3c      	ldr	r3, [pc, #240]	; (40386c <SystemCoreClockUpdate+0xf4>)
  40377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40377c:	f003 0303 	and.w	r3, r3, #3
  403780:	2b03      	cmp	r3, #3
  403782:	d80e      	bhi.n	4037a2 <SystemCoreClockUpdate+0x2a>
  403784:	e8df f003 	tbb	[pc, r3]
  403788:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40378c:	4b38      	ldr	r3, [pc, #224]	; (403870 <SystemCoreClockUpdate+0xf8>)
  40378e:	695b      	ldr	r3, [r3, #20]
  403790:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403794:	bf14      	ite	ne
  403796:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40379a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40379e:	4b35      	ldr	r3, [pc, #212]	; (403874 <SystemCoreClockUpdate+0xfc>)
  4037a0:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4037a2:	4b32      	ldr	r3, [pc, #200]	; (40386c <SystemCoreClockUpdate+0xf4>)
  4037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4037a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4037aa:	2b70      	cmp	r3, #112	; 0x70
  4037ac:	d055      	beq.n	40385a <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4037ae:	4b2f      	ldr	r3, [pc, #188]	; (40386c <SystemCoreClockUpdate+0xf4>)
  4037b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  4037b2:	4930      	ldr	r1, [pc, #192]	; (403874 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4037b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  4037b8:	680b      	ldr	r3, [r1, #0]
  4037ba:	40d3      	lsrs	r3, r2
  4037bc:	600b      	str	r3, [r1, #0]
  4037be:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4037c0:	4b2a      	ldr	r3, [pc, #168]	; (40386c <SystemCoreClockUpdate+0xf4>)
  4037c2:	6a1b      	ldr	r3, [r3, #32]
  4037c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4037c8:	d003      	beq.n	4037d2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4037ca:	4a2b      	ldr	r2, [pc, #172]	; (403878 <SystemCoreClockUpdate+0x100>)
  4037cc:	4b29      	ldr	r3, [pc, #164]	; (403874 <SystemCoreClockUpdate+0xfc>)
  4037ce:	601a      	str	r2, [r3, #0]
  4037d0:	e7e7      	b.n	4037a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4037d2:	4a2a      	ldr	r2, [pc, #168]	; (40387c <SystemCoreClockUpdate+0x104>)
  4037d4:	4b27      	ldr	r3, [pc, #156]	; (403874 <SystemCoreClockUpdate+0xfc>)
  4037d6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4037d8:	4b24      	ldr	r3, [pc, #144]	; (40386c <SystemCoreClockUpdate+0xf4>)
  4037da:	6a1b      	ldr	r3, [r3, #32]
  4037dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4037e0:	2b10      	cmp	r3, #16
  4037e2:	d005      	beq.n	4037f0 <SystemCoreClockUpdate+0x78>
  4037e4:	2b20      	cmp	r3, #32
  4037e6:	d1dc      	bne.n	4037a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4037e8:	4a25      	ldr	r2, [pc, #148]	; (403880 <SystemCoreClockUpdate+0x108>)
  4037ea:	4b22      	ldr	r3, [pc, #136]	; (403874 <SystemCoreClockUpdate+0xfc>)
  4037ec:	601a      	str	r2, [r3, #0]
			break;
  4037ee:	e7d8      	b.n	4037a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4037f0:	4a24      	ldr	r2, [pc, #144]	; (403884 <SystemCoreClockUpdate+0x10c>)
  4037f2:	4b20      	ldr	r3, [pc, #128]	; (403874 <SystemCoreClockUpdate+0xfc>)
  4037f4:	601a      	str	r2, [r3, #0]
			break;
  4037f6:	e7d4      	b.n	4037a2 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4037f8:	4b1c      	ldr	r3, [pc, #112]	; (40386c <SystemCoreClockUpdate+0xf4>)
  4037fa:	6a1b      	ldr	r3, [r3, #32]
  4037fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403800:	d018      	beq.n	403834 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403802:	4a1d      	ldr	r2, [pc, #116]	; (403878 <SystemCoreClockUpdate+0x100>)
  403804:	4b1b      	ldr	r3, [pc, #108]	; (403874 <SystemCoreClockUpdate+0xfc>)
  403806:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  403808:	4b18      	ldr	r3, [pc, #96]	; (40386c <SystemCoreClockUpdate+0xf4>)
  40380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40380c:	f003 0303 	and.w	r3, r3, #3
  403810:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403812:	4a16      	ldr	r2, [pc, #88]	; (40386c <SystemCoreClockUpdate+0xf4>)
  403814:	bf07      	ittee	eq
  403816:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403818:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40381a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40381c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40381e:	4815      	ldr	r0, [pc, #84]	; (403874 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403820:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403824:	6803      	ldr	r3, [r0, #0]
  403826:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40382a:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40382c:	fbb3 f3f2 	udiv	r3, r3, r2
  403830:	6003      	str	r3, [r0, #0]
  403832:	e7b6      	b.n	4037a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403834:	4a11      	ldr	r2, [pc, #68]	; (40387c <SystemCoreClockUpdate+0x104>)
  403836:	4b0f      	ldr	r3, [pc, #60]	; (403874 <SystemCoreClockUpdate+0xfc>)
  403838:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40383a:	4b0c      	ldr	r3, [pc, #48]	; (40386c <SystemCoreClockUpdate+0xf4>)
  40383c:	6a1b      	ldr	r3, [r3, #32]
  40383e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403842:	2b10      	cmp	r3, #16
  403844:	d005      	beq.n	403852 <SystemCoreClockUpdate+0xda>
  403846:	2b20      	cmp	r3, #32
  403848:	d1de      	bne.n	403808 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40384a:	4a0d      	ldr	r2, [pc, #52]	; (403880 <SystemCoreClockUpdate+0x108>)
  40384c:	4b09      	ldr	r3, [pc, #36]	; (403874 <SystemCoreClockUpdate+0xfc>)
  40384e:	601a      	str	r2, [r3, #0]
					break;
  403850:	e7da      	b.n	403808 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403852:	4a0c      	ldr	r2, [pc, #48]	; (403884 <SystemCoreClockUpdate+0x10c>)
  403854:	4b07      	ldr	r3, [pc, #28]	; (403874 <SystemCoreClockUpdate+0xfc>)
  403856:	601a      	str	r2, [r3, #0]
					break;
  403858:	e7d6      	b.n	403808 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40385a:	4a06      	ldr	r2, [pc, #24]	; (403874 <SystemCoreClockUpdate+0xfc>)
  40385c:	6813      	ldr	r3, [r2, #0]
  40385e:	490a      	ldr	r1, [pc, #40]	; (403888 <SystemCoreClockUpdate+0x110>)
  403860:	fba1 1303 	umull	r1, r3, r1, r3
  403864:	085b      	lsrs	r3, r3, #1
  403866:	6013      	str	r3, [r2, #0]
  403868:	4770      	bx	lr
  40386a:	bf00      	nop
  40386c:	400e0400 	.word	0x400e0400
  403870:	400e1410 	.word	0x400e1410
  403874:	2000012c 	.word	0x2000012c
  403878:	00f42400 	.word	0x00f42400
  40387c:	003d0900 	.word	0x003d0900
  403880:	00b71b00 	.word	0x00b71b00
  403884:	007a1200 	.word	0x007a1200
  403888:	aaaaaaab 	.word	0xaaaaaaab

0040388c <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40388c:	4b12      	ldr	r3, [pc, #72]	; (4038d8 <system_init_flash+0x4c>)
  40388e:	4298      	cmp	r0, r3
  403890:	d911      	bls.n	4038b6 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403892:	4b12      	ldr	r3, [pc, #72]	; (4038dc <system_init_flash+0x50>)
  403894:	4298      	cmp	r0, r3
  403896:	d913      	bls.n	4038c0 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403898:	4b11      	ldr	r3, [pc, #68]	; (4038e0 <system_init_flash+0x54>)
  40389a:	4298      	cmp	r0, r3
  40389c:	d914      	bls.n	4038c8 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40389e:	4b11      	ldr	r3, [pc, #68]	; (4038e4 <system_init_flash+0x58>)
  4038a0:	4298      	cmp	r0, r3
  4038a2:	d915      	bls.n	4038d0 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4038a4:	4b10      	ldr	r3, [pc, #64]	; (4038e8 <system_init_flash+0x5c>)
  4038a6:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4038a8:	bf94      	ite	ls
  4038aa:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4038ae:	4a0f      	ldrhi	r2, [pc, #60]	; (4038ec <system_init_flash+0x60>)
  4038b0:	4b0f      	ldr	r3, [pc, #60]	; (4038f0 <system_init_flash+0x64>)
  4038b2:	601a      	str	r2, [r3, #0]
  4038b4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4038b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4038ba:	4b0d      	ldr	r3, [pc, #52]	; (4038f0 <system_init_flash+0x64>)
  4038bc:	601a      	str	r2, [r3, #0]
  4038be:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4038c0:	4a0c      	ldr	r2, [pc, #48]	; (4038f4 <system_init_flash+0x68>)
  4038c2:	4b0b      	ldr	r3, [pc, #44]	; (4038f0 <system_init_flash+0x64>)
  4038c4:	601a      	str	r2, [r3, #0]
  4038c6:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4038c8:	4a0b      	ldr	r2, [pc, #44]	; (4038f8 <system_init_flash+0x6c>)
  4038ca:	4b09      	ldr	r3, [pc, #36]	; (4038f0 <system_init_flash+0x64>)
  4038cc:	601a      	str	r2, [r3, #0]
  4038ce:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4038d0:	4a0a      	ldr	r2, [pc, #40]	; (4038fc <system_init_flash+0x70>)
  4038d2:	4b07      	ldr	r3, [pc, #28]	; (4038f0 <system_init_flash+0x64>)
  4038d4:	601a      	str	r2, [r3, #0]
  4038d6:	4770      	bx	lr
  4038d8:	01312cff 	.word	0x01312cff
  4038dc:	026259ff 	.word	0x026259ff
  4038e0:	039386ff 	.word	0x039386ff
  4038e4:	04c4b3ff 	.word	0x04c4b3ff
  4038e8:	05f5e0ff 	.word	0x05f5e0ff
  4038ec:	04000500 	.word	0x04000500
  4038f0:	400e0a00 	.word	0x400e0a00
  4038f4:	04000100 	.word	0x04000100
  4038f8:	04000200 	.word	0x04000200
  4038fc:	04000300 	.word	0x04000300

00403900 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403900:	4b0a      	ldr	r3, [pc, #40]	; (40392c <_sbrk+0x2c>)
  403902:	681b      	ldr	r3, [r3, #0]
  403904:	b153      	cbz	r3, 40391c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  403906:	4b09      	ldr	r3, [pc, #36]	; (40392c <_sbrk+0x2c>)
  403908:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40390a:	181a      	adds	r2, r3, r0
  40390c:	4908      	ldr	r1, [pc, #32]	; (403930 <_sbrk+0x30>)
  40390e:	4291      	cmp	r1, r2
  403910:	db08      	blt.n	403924 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403912:	4610      	mov	r0, r2
  403914:	4a05      	ldr	r2, [pc, #20]	; (40392c <_sbrk+0x2c>)
  403916:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403918:	4618      	mov	r0, r3
  40391a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40391c:	4a05      	ldr	r2, [pc, #20]	; (403934 <_sbrk+0x34>)
  40391e:	4b03      	ldr	r3, [pc, #12]	; (40392c <_sbrk+0x2c>)
  403920:	601a      	str	r2, [r3, #0]
  403922:	e7f0      	b.n	403906 <_sbrk+0x6>
		return (caddr_t) -1;	
  403924:	f04f 30ff 	mov.w	r0, #4294967295
}
  403928:	4770      	bx	lr
  40392a:	bf00      	nop
  40392c:	20001774 	.word	0x20001774
  403930:	2000fffc 	.word	0x2000fffc
  403934:	20007620 	.word	0x20007620

00403938 <adcSetup>:
int currentExternCell		= 0;
float PCBTempLookUpTable[1024];
float ExtTempLookUpTable[1024];
int CellVcounter			= 0;

void adcSetup(){
  403938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40393c:	b083      	sub	sp, #12
  40393e:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 403b24 <adcSetup+0x1ec>
  403942:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 403b28 <adcSetup+0x1f0>
	//Generate temperature lookup tables.
	float PCBBeta = 4700.0;
	float ExBeta = 3950.0;
	for(int i=0;i<1024;i++){
  403946:	2500      	movs	r5, #0
		float voltage = ((float)(i)/1023)*3.3;
  403948:	4628      	mov	r0, r5
  40394a:	4b5f      	ldr	r3, [pc, #380]	; (403ac8 <adcSetup+0x190>)
  40394c:	4798      	blx	r3
  40394e:	495f      	ldr	r1, [pc, #380]	; (403acc <adcSetup+0x194>)
  403950:	4b5f      	ldr	r3, [pc, #380]	; (403ad0 <adcSetup+0x198>)
  403952:	4798      	blx	r3
  403954:	4c5f      	ldr	r4, [pc, #380]	; (403ad4 <adcSetup+0x19c>)
  403956:	47a0      	blx	r4
  403958:	a351      	add	r3, pc, #324	; (adr r3, 403aa0 <adcSetup+0x168>)
  40395a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40395e:	4e5e      	ldr	r6, [pc, #376]	; (403ad8 <adcSetup+0x1a0>)
  403960:	47b0      	blx	r6
  403962:	4e5e      	ldr	r6, [pc, #376]	; (403adc <adcSetup+0x1a4>)
  403964:	47b0      	blx	r6
		PCBTempLookUpTable[i] = (1.0/((log(voltage/(3.3-voltage))/PCBBeta)+(1.0/(25.0+273.15))))-273.15;
  403966:	47a0      	blx	r4
  403968:	4682      	mov	sl, r0
  40396a:	468b      	mov	fp, r1
  40396c:	4f5c      	ldr	r7, [pc, #368]	; (403ae0 <adcSetup+0x1a8>)
  40396e:	4602      	mov	r2, r0
  403970:	460b      	mov	r3, r1
  403972:	a14b      	add	r1, pc, #300	; (adr r1, 403aa0 <adcSetup+0x168>)
  403974:	e9d1 0100 	ldrd	r0, r1, [r1]
  403978:	47b8      	blx	r7
  40397a:	4c5a      	ldr	r4, [pc, #360]	; (403ae4 <adcSetup+0x1ac>)
  40397c:	4602      	mov	r2, r0
  40397e:	460b      	mov	r3, r1
  403980:	4650      	mov	r0, sl
  403982:	4659      	mov	r1, fp
  403984:	47a0      	blx	r4
  403986:	e9cd 0100 	strd	r0, r1, [sp]
  40398a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 403b2c <adcSetup+0x1f4>
  40398e:	47d8      	blx	fp
  403990:	a345      	add	r3, pc, #276	; (adr r3, 403aa8 <adcSetup+0x170>)
  403992:	e9d3 2300 	ldrd	r2, r3, [r3]
  403996:	47a0      	blx	r4
  403998:	f8df a194 	ldr.w	sl, [pc, #404]	; 403b30 <adcSetup+0x1f8>
  40399c:	a344      	add	r3, pc, #272	; (adr r3, 403ab0 <adcSetup+0x178>)
  40399e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039a2:	47d0      	blx	sl
  4039a4:	4602      	mov	r2, r0
  4039a6:	460b      	mov	r3, r1
  4039a8:	2000      	movs	r0, #0
  4039aa:	494f      	ldr	r1, [pc, #316]	; (403ae8 <adcSetup+0x1b0>)
  4039ac:	47a0      	blx	r4
  4039ae:	a342      	add	r3, pc, #264	; (adr r3, 403ab8 <adcSetup+0x180>)
  4039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039b4:	47b8      	blx	r7
  4039b6:	47b0      	blx	r6
  4039b8:	f849 0f04 	str.w	r0, [r9, #4]!
		ExtTempLookUpTable[i] = (1.0/((log(voltage/(3.3-voltage))/ExBeta)+(1.0/(25.0+273.15))))-273.15;
  4039bc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4039c0:	47d8      	blx	fp
  4039c2:	a33f      	add	r3, pc, #252	; (adr r3, 403ac0 <adcSetup+0x188>)
  4039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039c8:	47a0      	blx	r4
  4039ca:	a339      	add	r3, pc, #228	; (adr r3, 403ab0 <adcSetup+0x178>)
  4039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039d0:	47d0      	blx	sl
  4039d2:	4602      	mov	r2, r0
  4039d4:	460b      	mov	r3, r1
  4039d6:	2000      	movs	r0, #0
  4039d8:	4943      	ldr	r1, [pc, #268]	; (403ae8 <adcSetup+0x1b0>)
  4039da:	47a0      	blx	r4
  4039dc:	a336      	add	r3, pc, #216	; (adr r3, 403ab8 <adcSetup+0x180>)
  4039de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4039e2:	47b8      	blx	r7
  4039e4:	47b0      	blx	r6
  4039e6:	f848 0f04 	str.w	r0, [r8, #4]!
	for(int i=0;i<1024;i++){
  4039ea:	3501      	adds	r5, #1
  4039ec:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
  4039f0:	d1aa      	bne.n	403948 <adcSetup+0x10>
	}
	
	//enable and start adc.
	pmc_enable_periph_clk(ID_ADC);
  4039f2:	201d      	movs	r0, #29
  4039f4:	4e3d      	ldr	r6, [pc, #244]	; (403aec <adcSetup+0x1b4>)
  4039f6:	47b0      	blx	r6
	adc_init(ADC,sysclk_get_peripheral_hz(),ADC_CLK_FREQ,ADC_STARTUP_TIME_4);
  4039f8:	4c3d      	ldr	r4, [pc, #244]	; (403af0 <adcSetup+0x1b8>)
  4039fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4039fe:	4a3d      	ldr	r2, [pc, #244]	; (403af4 <adcSetup+0x1bc>)
  403a00:	493d      	ldr	r1, [pc, #244]	; (403af8 <adcSetup+0x1c0>)
  403a02:	4620      	mov	r0, r4
  403a04:	4d3d      	ldr	r5, [pc, #244]	; (403afc <adcSetup+0x1c4>)
  403a06:	47a8      	blx	r5
	adc_configure_timing(ADC, QTY_TRACKING_PERIODS, ADC_SETTLING_TIME_2, TRANSFER_PERIOD);
  403a08:	2302      	movs	r3, #2
  403a0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  403a0e:	2103      	movs	r1, #3
  403a10:	4620      	mov	r0, r4
  403a12:	4d3b      	ldr	r5, [pc, #236]	; (403b00 <adcSetup+0x1c8>)
  403a14:	47a8      	blx	r5
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);		//Software Trigger, no freerun (I think this is defauilt)
  403a16:	2200      	movs	r2, #0
  403a18:	4611      	mov	r1, r2
  403a1a:	4620      	mov	r0, r4
  403a1c:	4b39      	ldr	r3, [pc, #228]	; (403b04 <adcSetup+0x1cc>)
  403a1e:	4798      	blx	r3
	ADC->ADC_EMR |= ADC_EMR_TAG;					//appends channel tag to last converted data
  403a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  403a26:	6423      	str	r3, [r4, #64]	; 0x40
	adc_enable_channel(ADC, CELLV_CHANNEL);
  403a28:	2100      	movs	r1, #0
  403a2a:	4620      	mov	r0, r4
  403a2c:	4d36      	ldr	r5, [pc, #216]	; (403b08 <adcSetup+0x1d0>)
  403a2e:	47a8      	blx	r5
	adc_enable_channel(ADC, CURRENT_CHANNEL);
  403a30:	2101      	movs	r1, #1
  403a32:	4620      	mov	r0, r4
  403a34:	47a8      	blx	r5
	adc_enable_channel(ADC, STACK_CHANNEL);
  403a36:	2102      	movs	r1, #2
  403a38:	4620      	mov	r0, r4
  403a3a:	47a8      	blx	r5
	adc_enable_channel(ADC, EXTERN_TEMP_CHANNEL);
  403a3c:	2103      	movs	r1, #3
  403a3e:	4620      	mov	r0, r4
  403a40:	47a8      	blx	r5
	adc_enable_channel(ADC, FET_TEMP_CHANNEL);
  403a42:	2104      	movs	r1, #4
  403a44:	4620      	mov	r0, r4
  403a46:	47a8      	blx	r5
	adc_enable_channel(ADC, SHUNT_TEMP_CHANNEL);
  403a48:	2105      	movs	r1, #5
  403a4a:	4620      	mov	r0, r4
  403a4c:	47a8      	blx	r5
	adc_enable_interrupt(ADC,ADC_IER_DRDY);
  403a4e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  403a52:	4620      	mov	r0, r4
  403a54:	4b2d      	ldr	r3, [pc, #180]	; (403b0c <adcSetup+0x1d4>)
  403a56:	4798      	blx	r3
  403a58:	4d2d      	ldr	r5, [pc, #180]	; (403b10 <adcSetup+0x1d8>)
  403a5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  403a5e:	602b      	str	r3, [r5, #0]
	NVIC_EnableIRQ(ADC_IRQn);
	
	pmc_enable_periph_clk(ID_TC0);
  403a60:	2017      	movs	r0, #23
  403a62:	47b0      	blx	r6
	tc_init(TC0, ADC_TC,
  403a64:	f5a4 3420 	sub.w	r4, r4, #163840	; 0x28000
  403a68:	f24c 0203 	movw	r2, #49155	; 0xc003
  403a6c:	2100      	movs	r1, #0
  403a6e:	4620      	mov	r0, r4
  403a70:	4b28      	ldr	r3, [pc, #160]	; (403b14 <adcSetup+0x1dc>)
  403a72:	4798      	blx	r3
			TC_CMR_WAVSEL_UP_RC
			|TC_CMR_WAVE
			| TC_CMR_TCCLKS_TIMER_CLOCK4);
	tc_write_rc(TC0,ADC_TC,187);				  //causes timer to reset every Sets everything to 5000Hz sampling (except cells are at 50Hz)
  403a74:	22bb      	movs	r2, #187	; 0xbb
  403a76:	2100      	movs	r1, #0
  403a78:	4620      	mov	r0, r4
  403a7a:	4b27      	ldr	r3, [pc, #156]	; (403b18 <adcSetup+0x1e0>)
  403a7c:	4798      	blx	r3
	tc_enable_interrupt(TC0, ADC_TC, TC_IER_CPCS);
  403a7e:	2210      	movs	r2, #16
  403a80:	2100      	movs	r1, #0
  403a82:	4620      	mov	r0, r4
  403a84:	4b25      	ldr	r3, [pc, #148]	; (403b1c <adcSetup+0x1e4>)
  403a86:	4798      	blx	r3
  403a88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  403a8c:	602b      	str	r3, [r5, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	tc_start(TC0,ADC_TC);
  403a8e:	2100      	movs	r1, #0
  403a90:	4620      	mov	r0, r4
  403a92:	4b23      	ldr	r3, [pc, #140]	; (403b20 <adcSetup+0x1e8>)
  403a94:	4798      	blx	r3
}
  403a96:	b003      	add	sp, #12
  403a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a9c:	f3af 8000 	nop.w
  403aa0:	66666666 	.word	0x66666666
  403aa4:	400a6666 	.word	0x400a6666
  403aa8:	00000000 	.word	0x00000000
  403aac:	40b25c00 	.word	0x40b25c00
  403ab0:	dcb5db83 	.word	0xdcb5db83
  403ab4:	3f6b79e1 	.word	0x3f6b79e1
  403ab8:	66666666 	.word	0x66666666
  403abc:	40711266 	.word	0x40711266
  403ac0:	00000000 	.word	0x00000000
  403ac4:	40aedc00 	.word	0x40aedc00
  403ac8:	00405f55 	.word	0x00405f55
  403acc:	447fc000 	.word	0x447fc000
  403ad0:	00406165 	.word	0x00406165
  403ad4:	00405739 	.word	0x00405739
  403ad8:	004057e1 	.word	0x004057e1
  403adc:	00405d41 	.word	0x00405d41
  403ae0:	00405479 	.word	0x00405479
  403ae4:	00405a35 	.word	0x00405a35
  403ae8:	3ff00000 	.word	0x3ff00000
  403aec:	004033d9 	.word	0x004033d9
  403af0:	40038000 	.word	0x40038000
  403af4:	0003d090 	.word	0x0003d090
  403af8:	07270e00 	.word	0x07270e00
  403afc:	00400e49 	.word	0x00400e49
  403b00:	00400e8b 	.word	0x00400e8b
  403b04:	00400e7d 	.word	0x00400e7d
  403b08:	00400ead 	.word	0x00400ead
  403b0c:	00400ecf 	.word	0x00400ecf
  403b10:	e000e100 	.word	0xe000e100
  403b14:	0040106b 	.word	0x0040106b
  403b18:	00401093 	.word	0x00401093
  403b1c:	0040109b 	.word	0x0040109b
  403b20:	00401083 	.word	0x00401083
  403b24:	2000255c 	.word	0x2000255c
  403b28:	200035f4 	.word	0x200035f4
  403b2c:	00404f7d 	.word	0x00404f7d
  403b30:	0040547d 	.word	0x0040547d
  403b34:	00000000 	.word	0x00000000

00403b38 <analogCalculate>:
float tempMovingAverageCoef = 0.005;					//This number was chosen to give good 0.1s response for 5000Hz sampling.
float ctsCurrentMovingAverageCoef = 0.0002;				//This number was chosen to give good 5s response for 5000Hz sampling. this will monitor cts current.
float istCurrentMovingAverageCoef =	0.55;				//This number was chosen to give good 0.001s response for 5000Hz sampling. this will monitor ist current
float stackMovingAverageCoef = 0.55;					//This number was chosen to give good 0.001s response for 5000Hz sampling.

void analogCalculate(){
  403b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403b3c:	b087      	sub	sp, #28
	if( needsProcessing[CELL1IDX] || needsProcessing[CELL2IDX] || needsProcessing[CELL3IDX] || needsProcessing[CELL4IDX] || needsProcessing[CELL5IDX] || needsProcessing[CELL6IDX]){
  403b3e:	4ba2      	ldr	r3, [pc, #648]	; (403dc8 <analogCalculate+0x290>)
  403b40:	781b      	ldrb	r3, [r3, #0]
  403b42:	b93b      	cbnz	r3, 403b54 <analogCalculate+0x1c>
  403b44:	4ba0      	ldr	r3, [pc, #640]	; (403dc8 <analogCalculate+0x290>)
  403b46:	785b      	ldrb	r3, [r3, #1]
  403b48:	b923      	cbnz	r3, 403b54 <analogCalculate+0x1c>
  403b4a:	4b9f      	ldr	r3, [pc, #636]	; (403dc8 <analogCalculate+0x290>)
  403b4c:	789b      	ldrb	r3, [r3, #2]
  403b4e:	2b00      	cmp	r3, #0
  403b50:	f000 82c6 	beq.w	4040e0 <analogCalculate+0x5a8>
  403b54:	4a9c      	ldr	r2, [pc, #624]	; (403dc8 <analogCalculate+0x290>)
void analogCalculate(){
  403b56:	2300      	movs	r3, #0
		int processIDX;
		for(int i=CELL1IDX;i<=CELL6IDX;i++) if(needsProcessing[i]) processIDX = i;
  403b58:	f812 1b01 	ldrb.w	r1, [r2], #1
  403b5c:	2900      	cmp	r1, #0
  403b5e:	bf18      	it	ne
  403b60:	461d      	movne	r5, r3
  403b62:	3301      	adds	r3, #1
  403b64:	2b06      	cmp	r3, #6
  403b66:	d1f7      	bne.n	403b58 <analogCalculate+0x20>
		processedADCData[processIDX] = (3.3*(rawADCData[processIDX]/4095.0)) * (1.0/0.759);
  403b68:	4b98      	ldr	r3, [pc, #608]	; (403dcc <analogCalculate+0x294>)
  403b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
  403b6e:	4b98      	ldr	r3, [pc, #608]	; (403dd0 <analogCalculate+0x298>)
  403b70:	4798      	blx	r3
  403b72:	a38f      	add	r3, pc, #572	; (adr r3, 403db0 <analogCalculate+0x278>)
  403b74:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b78:	4e96      	ldr	r6, [pc, #600]	; (403dd4 <analogCalculate+0x29c>)
  403b7a:	47b0      	blx	r6
  403b7c:	f8df 8294 	ldr.w	r8, [pc, #660]	; 403e14 <analogCalculate+0x2dc>
  403b80:	a38d      	add	r3, pc, #564	; (adr r3, 403db8 <analogCalculate+0x280>)
  403b82:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b86:	47c0      	blx	r8
  403b88:	a38d      	add	r3, pc, #564	; (adr r3, 403dc0 <analogCalculate+0x288>)
  403b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b8e:	47c0      	blx	r8
  403b90:	f8df a27c 	ldr.w	sl, [pc, #636]	; 403e10 <analogCalculate+0x2d8>
  403b94:	47d0      	blx	sl
  403b96:	4683      	mov	fp, r0
  403b98:	4b8f      	ldr	r3, [pc, #572]	; (403dd8 <analogCalculate+0x2a0>)
  403b9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
		MovingAverageADCData[processIDX] = (processedADCData[processIDX]*cellMovingAverageCoef) + (MovingAverageADCData[processIDX]*(1.0-cellMovingAverageCoef));
  403b9e:	4b8f      	ldr	r3, [pc, #572]	; (403ddc <analogCalculate+0x2a4>)
  403ba0:	681b      	ldr	r3, [r3, #0]
  403ba2:	4699      	mov	r9, r3
  403ba4:	4f8e      	ldr	r7, [pc, #568]	; (403de0 <analogCalculate+0x2a8>)
  403ba6:	4e8f      	ldr	r6, [pc, #572]	; (403de4 <analogCalculate+0x2ac>)
  403ba8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  403bac:	47b0      	blx	r6
  403bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403bb2:	f8cd 9000 	str.w	r9, [sp]
  403bb6:	4648      	mov	r0, r9
  403bb8:	47b0      	blx	r6
  403bba:	4602      	mov	r2, r0
  403bbc:	460b      	mov	r3, r1
  403bbe:	2000      	movs	r0, #0
  403bc0:	4989      	ldr	r1, [pc, #548]	; (403de8 <analogCalculate+0x2b0>)
  403bc2:	f8df 9260 	ldr.w	r9, [pc, #608]	; 403e24 <analogCalculate+0x2ec>
  403bc6:	47c8      	blx	r9
  403bc8:	4602      	mov	r2, r0
  403bca:	460b      	mov	r3, r1
  403bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403bd0:	47c0      	blx	r8
  403bd2:	4680      	mov	r8, r0
  403bd4:	4689      	mov	r9, r1
  403bd6:	9900      	ldr	r1, [sp, #0]
  403bd8:	4658      	mov	r0, fp
  403bda:	4b84      	ldr	r3, [pc, #528]	; (403dec <analogCalculate+0x2b4>)
  403bdc:	4798      	blx	r3
  403bde:	47b0      	blx	r6
  403be0:	4602      	mov	r2, r0
  403be2:	460b      	mov	r3, r1
  403be4:	4640      	mov	r0, r8
  403be6:	4649      	mov	r1, r9
  403be8:	4e81      	ldr	r6, [pc, #516]	; (403df0 <analogCalculate+0x2b8>)
  403bea:	47b0      	blx	r6
  403bec:	47d0      	blx	sl
  403bee:	4606      	mov	r6, r0
  403bf0:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
		maximumValues[processIDX] = (MovingAverageADCData[processIDX] > maximumValues[processIDX]) ? MovingAverageADCData[processIDX] : maximumValues[processIDX];
  403bf4:	4b7f      	ldr	r3, [pc, #508]	; (403df4 <analogCalculate+0x2bc>)
  403bf6:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
  403bfa:	4639      	mov	r1, r7
  403bfc:	4b7e      	ldr	r3, [pc, #504]	; (403df8 <analogCalculate+0x2c0>)
  403bfe:	4798      	blx	r3
  403c00:	b100      	cbz	r0, 403c04 <analogCalculate+0xcc>
  403c02:	4637      	mov	r7, r6
  403c04:	4b7b      	ldr	r3, [pc, #492]	; (403df4 <analogCalculate+0x2bc>)
  403c06:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
		minimumValues[processIDX] = (MovingAverageADCData[processIDX] < minimumValues[processIDX]) ? MovingAverageADCData[processIDX] : minimumValues[processIDX];
  403c0a:	4b7c      	ldr	r3, [pc, #496]	; (403dfc <analogCalculate+0x2c4>)
  403c0c:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
  403c10:	4639      	mov	r1, r7
  403c12:	4630      	mov	r0, r6
  403c14:	4b7a      	ldr	r3, [pc, #488]	; (403e00 <analogCalculate+0x2c8>)
  403c16:	4798      	blx	r3
  403c18:	b900      	cbnz	r0, 403c1c <analogCalculate+0xe4>
  403c1a:	463e      	mov	r6, r7
  403c1c:	4b77      	ldr	r3, [pc, #476]	; (403dfc <analogCalculate+0x2c4>)
  403c1e:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
		needsProcessing[processIDX] = false;
  403c22:	2200      	movs	r2, #0
  403c24:	4b68      	ldr	r3, [pc, #416]	; (403dc8 <analogCalculate+0x290>)
  403c26:	555a      	strb	r2, [r3, r5]
	}
	if(needsProcessing[TEMP1IDX] || needsProcessing[TEMP2IDX] || needsProcessing[TEMP3IDX] || needsProcessing[TEMP4IDX] || needsProcessing[TEMP5IDX] || needsProcessing[TEMP6IDX]){
  403c28:	4b67      	ldr	r3, [pc, #412]	; (403dc8 <analogCalculate+0x290>)
  403c2a:	799b      	ldrb	r3, [r3, #6]
  403c2c:	b93b      	cbnz	r3, 403c3e <analogCalculate+0x106>
  403c2e:	4b66      	ldr	r3, [pc, #408]	; (403dc8 <analogCalculate+0x290>)
  403c30:	79db      	ldrb	r3, [r3, #7]
  403c32:	b923      	cbnz	r3, 403c3e <analogCalculate+0x106>
  403c34:	4b64      	ldr	r3, [pc, #400]	; (403dc8 <analogCalculate+0x290>)
  403c36:	7a1b      	ldrb	r3, [r3, #8]
  403c38:	2b00      	cmp	r3, #0
  403c3a:	f000 8261 	beq.w	404100 <analogCalculate+0x5c8>
  403c3e:	4a71      	ldr	r2, [pc, #452]	; (403e04 <analogCalculate+0x2cc>)
		minimumValues[processIDX] = (MovingAverageADCData[processIDX] < minimumValues[processIDX]) ? MovingAverageADCData[processIDX] : minimumValues[processIDX];
  403c40:	2306      	movs	r3, #6
		int processIDX;
		for(int i=TEMP1IDX;i<=TEMP6IDX;i++) if(needsProcessing[i]) processIDX = i;
  403c42:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403c46:	2900      	cmp	r1, #0
  403c48:	bf18      	it	ne
  403c4a:	461c      	movne	r4, r3
  403c4c:	3301      	adds	r3, #1
  403c4e:	2b0c      	cmp	r3, #12
  403c50:	d1f7      	bne.n	403c42 <analogCalculate+0x10a>
		processedADCData[processIDX] = ExtTempLookUpTable[(int)(rawADCData[processIDX]/4)];
  403c52:	4b5e      	ldr	r3, [pc, #376]	; (403dcc <analogCalculate+0x294>)
  403c54:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  403c58:	2b00      	cmp	r3, #0
  403c5a:	bfb8      	it	lt
  403c5c:	3303      	addlt	r3, #3
  403c5e:	109b      	asrs	r3, r3, #2
  403c60:	4a69      	ldr	r2, [pc, #420]	; (403e08 <analogCalculate+0x2d0>)
  403c62:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
  403c66:	4b5c      	ldr	r3, [pc, #368]	; (403dd8 <analogCalculate+0x2a0>)
  403c68:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
		MovingAverageADCData[processIDX] = processedADCData[processIDX]*tempMovingAverageCoef + MovingAverageADCData[processIDX]*(1.0 - tempMovingAverageCoef);
  403c6c:	4b67      	ldr	r3, [pc, #412]	; (403e0c <analogCalculate+0x2d4>)
  403c6e:	f8d3 a000 	ldr.w	sl, [r3]
  403c72:	4e5b      	ldr	r6, [pc, #364]	; (403de0 <analogCalculate+0x2a8>)
  403c74:	4d5b      	ldr	r5, [pc, #364]	; (403de4 <analogCalculate+0x2ac>)
  403c76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  403c7a:	47a8      	blx	r5
  403c7c:	4680      	mov	r8, r0
  403c7e:	4689      	mov	r9, r1
  403c80:	4650      	mov	r0, sl
  403c82:	47a8      	blx	r5
  403c84:	4602      	mov	r2, r0
  403c86:	460b      	mov	r3, r1
  403c88:	2000      	movs	r0, #0
  403c8a:	4957      	ldr	r1, [pc, #348]	; (403de8 <analogCalculate+0x2b0>)
  403c8c:	f8df b194 	ldr.w	fp, [pc, #404]	; 403e24 <analogCalculate+0x2ec>
  403c90:	47d8      	blx	fp
  403c92:	4602      	mov	r2, r0
  403c94:	460b      	mov	r3, r1
  403c96:	4640      	mov	r0, r8
  403c98:	4649      	mov	r1, r9
  403c9a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 403e14 <analogCalculate+0x2dc>
  403c9e:	47c0      	blx	r8
  403ca0:	4680      	mov	r8, r0
  403ca2:	4689      	mov	r9, r1
  403ca4:	4651      	mov	r1, sl
  403ca6:	4638      	mov	r0, r7
  403ca8:	4b50      	ldr	r3, [pc, #320]	; (403dec <analogCalculate+0x2b4>)
  403caa:	4798      	blx	r3
  403cac:	47a8      	blx	r5
  403cae:	4602      	mov	r2, r0
  403cb0:	460b      	mov	r3, r1
  403cb2:	4640      	mov	r0, r8
  403cb4:	4649      	mov	r1, r9
  403cb6:	4d4e      	ldr	r5, [pc, #312]	; (403df0 <analogCalculate+0x2b8>)
  403cb8:	47a8      	blx	r5
  403cba:	4b55      	ldr	r3, [pc, #340]	; (403e10 <analogCalculate+0x2d8>)
  403cbc:	4798      	blx	r3
  403cbe:	4605      	mov	r5, r0
  403cc0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
		maximumValues[processIDX] = (MovingAverageADCData[processIDX] > maximumValues[processIDX]) ? MovingAverageADCData[processIDX] : maximumValues[processIDX];
  403cc4:	4b4b      	ldr	r3, [pc, #300]	; (403df4 <analogCalculate+0x2bc>)
  403cc6:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  403cca:	4631      	mov	r1, r6
  403ccc:	4b4a      	ldr	r3, [pc, #296]	; (403df8 <analogCalculate+0x2c0>)
  403cce:	4798      	blx	r3
  403cd0:	b100      	cbz	r0, 403cd4 <analogCalculate+0x19c>
  403cd2:	462e      	mov	r6, r5
  403cd4:	4b47      	ldr	r3, [pc, #284]	; (403df4 <analogCalculate+0x2bc>)
  403cd6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
		minimumValues[processIDX] = (MovingAverageADCData[processIDX] < minimumValues[processIDX]) ? MovingAverageADCData[processIDX] : minimumValues[processIDX];
  403cda:	4b48      	ldr	r3, [pc, #288]	; (403dfc <analogCalculate+0x2c4>)
  403cdc:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
  403ce0:	4631      	mov	r1, r6
  403ce2:	4628      	mov	r0, r5
  403ce4:	4b46      	ldr	r3, [pc, #280]	; (403e00 <analogCalculate+0x2c8>)
  403ce6:	4798      	blx	r3
  403ce8:	b900      	cbnz	r0, 403cec <analogCalculate+0x1b4>
  403cea:	4635      	mov	r5, r6
  403cec:	4b43      	ldr	r3, [pc, #268]	; (403dfc <analogCalculate+0x2c4>)
  403cee:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
		needsProcessing[processIDX] = false;
  403cf2:	2200      	movs	r2, #0
  403cf4:	4b34      	ldr	r3, [pc, #208]	; (403dc8 <analogCalculate+0x290>)
  403cf6:	551a      	strb	r2, [r3, r4]
	}
	if(needsProcessing[CURRENTIDX]){
  403cf8:	4b33      	ldr	r3, [pc, #204]	; (403dc8 <analogCalculate+0x290>)
  403cfa:	7b1b      	ldrb	r3, [r3, #12]
  403cfc:	2b00      	cmp	r3, #0
  403cfe:	f000 80bd 	beq.w	403e7c <analogCalculate+0x344>
		processedADCData[CURRENTIDX] = (3.3*(rawADCData[CURRENTIDX]/4095.0)) * (1000/20);
  403d02:	4b32      	ldr	r3, [pc, #200]	; (403dcc <analogCalculate+0x294>)
  403d04:	6b18      	ldr	r0, [r3, #48]	; 0x30
  403d06:	4b32      	ldr	r3, [pc, #200]	; (403dd0 <analogCalculate+0x298>)
  403d08:	4798      	blx	r3
  403d0a:	a329      	add	r3, pc, #164	; (adr r3, 403db0 <analogCalculate+0x278>)
  403d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d10:	4c30      	ldr	r4, [pc, #192]	; (403dd4 <analogCalculate+0x29c>)
  403d12:	47a0      	blx	r4
  403d14:	4e3f      	ldr	r6, [pc, #252]	; (403e14 <analogCalculate+0x2dc>)
  403d16:	a328      	add	r3, pc, #160	; (adr r3, 403db8 <analogCalculate+0x280>)
  403d18:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d1c:	47b0      	blx	r6
  403d1e:	2200      	movs	r2, #0
  403d20:	4b3d      	ldr	r3, [pc, #244]	; (403e18 <analogCalculate+0x2e0>)
  403d22:	47b0      	blx	r6
  403d24:	4f3a      	ldr	r7, [pc, #232]	; (403e10 <analogCalculate+0x2d8>)
  403d26:	47b8      	blx	r7
  403d28:	4b2b      	ldr	r3, [pc, #172]	; (403dd8 <analogCalculate+0x2a0>)
  403d2a:	9000      	str	r0, [sp, #0]
  403d2c:	6318      	str	r0, [r3, #48]	; 0x30
		MovingAverageADCData[CURRENTIDX] = processedADCData[CURRENTIDX]*istCurrentMovingAverageCoef + MovingAverageADCData[CURRENTIDX]*(1.0-istCurrentMovingAverageCoef);
  403d2e:	4b3b      	ldr	r3, [pc, #236]	; (403e1c <analogCalculate+0x2e4>)
  403d30:	681d      	ldr	r5, [r3, #0]
  403d32:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 403de0 <analogCalculate+0x2a8>
  403d36:	4c2b      	ldr	r4, [pc, #172]	; (403de4 <analogCalculate+0x2ac>)
  403d38:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
  403d3c:	47a0      	blx	r4
  403d3e:	4680      	mov	r8, r0
  403d40:	4689      	mov	r9, r1
  403d42:	4628      	mov	r0, r5
  403d44:	47a0      	blx	r4
  403d46:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 403e24 <analogCalculate+0x2ec>
  403d4a:	4602      	mov	r2, r0
  403d4c:	460b      	mov	r3, r1
  403d4e:	2000      	movs	r0, #0
  403d50:	4925      	ldr	r1, [pc, #148]	; (403de8 <analogCalculate+0x2b0>)
  403d52:	47d0      	blx	sl
  403d54:	4602      	mov	r2, r0
  403d56:	460b      	mov	r3, r1
  403d58:	4640      	mov	r0, r8
  403d5a:	4649      	mov	r1, r9
  403d5c:	47b0      	blx	r6
  403d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403d62:	f8df 9088 	ldr.w	r9, [pc, #136]	; 403dec <analogCalculate+0x2b4>
  403d66:	4629      	mov	r1, r5
  403d68:	9800      	ldr	r0, [sp, #0]
  403d6a:	47c8      	blx	r9
  403d6c:	47a0      	blx	r4
  403d6e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 403df0 <analogCalculate+0x2b8>
  403d72:	4602      	mov	r2, r0
  403d74:	460b      	mov	r3, r1
  403d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d7a:	47c0      	blx	r8
  403d7c:	47b8      	blx	r7
  403d7e:	4605      	mov	r5, r0
  403d80:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
		ctsAverageCurrent = processedADCData[CURRENTIDX]*ctsCurrentMovingAverageCoef + ctsAverageCurrent*(1.0-ctsCurrentMovingAverageCoef);
  403d84:	4b26      	ldr	r3, [pc, #152]	; (403e20 <analogCalculate+0x2e8>)
  403d86:	681b      	ldr	r3, [r3, #0]
  403d88:	9302      	str	r3, [sp, #8]
  403d8a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 403e28 <analogCalculate+0x2f0>
  403d8e:	f8db 0000 	ldr.w	r0, [fp]
  403d92:	47a0      	blx	r4
  403d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403d98:	9802      	ldr	r0, [sp, #8]
  403d9a:	47a0      	blx	r4
  403d9c:	4602      	mov	r2, r0
  403d9e:	460b      	mov	r3, r1
  403da0:	2000      	movs	r0, #0
  403da2:	4911      	ldr	r1, [pc, #68]	; (403de8 <analogCalculate+0x2b0>)
  403da4:	47d0      	blx	sl
  403da6:	4602      	mov	r2, r0
  403da8:	460b      	mov	r3, r1
  403daa:	e03f      	b.n	403e2c <analogCalculate+0x2f4>
  403dac:	f3af 8000 	nop.w
  403db0:	00000000 	.word	0x00000000
  403db4:	40affe00 	.word	0x40affe00
  403db8:	66666666 	.word	0x66666666
  403dbc:	400a6666 	.word	0x400a6666
  403dc0:	0e80d7dd 	.word	0x0e80d7dd
  403dc4:	3ff51493 	.word	0x3ff51493
  403dc8:	200035e8 	.word	0x200035e8
  403dcc:	200035a8 	.word	0x200035a8
  403dd0:	00405715 	.word	0x00405715
  403dd4:	00405a35 	.word	0x00405a35
  403dd8:	20002520 	.word	0x20002520
  403ddc:	20000174 	.word	0x20000174
  403de0:	20000130 	.word	0x20000130
  403de4:	00405739 	.word	0x00405739
  403de8:	3ff00000 	.word	0x3ff00000
  403dec:	00405ffd 	.word	0x00405ffd
  403df0:	0040547d 	.word	0x0040547d
  403df4:	200023fc 	.word	0x200023fc
  403df8:	00406375 	.word	0x00406375
  403dfc:	20003568 	.word	0x20003568
  403e00:	00406339 	.word	0x00406339
  403e04:	200035ed 	.word	0x200035ed
  403e08:	200035f8 	.word	0x200035f8
  403e0c:	20000184 	.word	0x20000184
  403e10:	00405d41 	.word	0x00405d41
  403e14:	004057e1 	.word	0x004057e1
  403e18:	40490000 	.word	0x40490000
  403e1c:	2000017c 	.word	0x2000017c
  403e20:	20000178 	.word	0x20000178
  403e24:	00405479 	.word	0x00405479
  403e28:	2000177c 	.word	0x2000177c
  403e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403e30:	47b0      	blx	r6
  403e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403e36:	9902      	ldr	r1, [sp, #8]
  403e38:	9800      	ldr	r0, [sp, #0]
  403e3a:	47c8      	blx	r9
  403e3c:	47a0      	blx	r4
  403e3e:	4602      	mov	r2, r0
  403e40:	460b      	mov	r3, r1
  403e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403e46:	47c0      	blx	r8
  403e48:	47b8      	blx	r7
  403e4a:	f8cb 0000 	str.w	r0, [fp]
		maximumValues[CURRENTIDX] = (MovingAverageADCData[CURRENTIDX] > maximumValues[CURRENTIDX]) ? MovingAverageADCData[CURRENTIDX] : maximumValues[CURRENTIDX];
  403e4e:	4b8e      	ldr	r3, [pc, #568]	; (404088 <analogCalculate+0x550>)
  403e50:	6b1c      	ldr	r4, [r3, #48]	; 0x30
  403e52:	4621      	mov	r1, r4
  403e54:	4628      	mov	r0, r5
  403e56:	4b8d      	ldr	r3, [pc, #564]	; (40408c <analogCalculate+0x554>)
  403e58:	4798      	blx	r3
  403e5a:	b100      	cbz	r0, 403e5e <analogCalculate+0x326>
  403e5c:	462c      	mov	r4, r5
  403e5e:	4b8a      	ldr	r3, [pc, #552]	; (404088 <analogCalculate+0x550>)
  403e60:	631c      	str	r4, [r3, #48]	; 0x30
		minimumValues[CURRENTIDX] = (MovingAverageADCData[CURRENTIDX] < minimumValues[CURRENTIDX]) ? MovingAverageADCData[CURRENTIDX] : minimumValues[CURRENTIDX];
  403e62:	4b8b      	ldr	r3, [pc, #556]	; (404090 <analogCalculate+0x558>)
  403e64:	6b1c      	ldr	r4, [r3, #48]	; 0x30
  403e66:	4621      	mov	r1, r4
  403e68:	4628      	mov	r0, r5
  403e6a:	4b8a      	ldr	r3, [pc, #552]	; (404094 <analogCalculate+0x55c>)
  403e6c:	4798      	blx	r3
  403e6e:	b900      	cbnz	r0, 403e72 <analogCalculate+0x33a>
  403e70:	4625      	mov	r5, r4
  403e72:	4b87      	ldr	r3, [pc, #540]	; (404090 <analogCalculate+0x558>)
  403e74:	631d      	str	r5, [r3, #48]	; 0x30
		needsProcessing[CURRENTIDX] = false;
  403e76:	2200      	movs	r2, #0
  403e78:	4b87      	ldr	r3, [pc, #540]	; (404098 <analogCalculate+0x560>)
  403e7a:	731a      	strb	r2, [r3, #12]
	}
	if(needsProcessing[SHUNTTEMPIDX]){
  403e7c:	4b86      	ldr	r3, [pc, #536]	; (404098 <analogCalculate+0x560>)
  403e7e:	7b5b      	ldrb	r3, [r3, #13]
  403e80:	2b00      	cmp	r3, #0
  403e82:	d049      	beq.n	403f18 <analogCalculate+0x3e0>
		processedADCData[SHUNTTEMPIDX] = PCBTempLookUpTable[(int)(rawADCData[SHUNTTEMPIDX]/4)];
  403e84:	4b85      	ldr	r3, [pc, #532]	; (40409c <analogCalculate+0x564>)
  403e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403e88:	2b00      	cmp	r3, #0
  403e8a:	bfb8      	it	lt
  403e8c:	3303      	addlt	r3, #3
  403e8e:	109b      	asrs	r3, r3, #2
  403e90:	4a83      	ldr	r2, [pc, #524]	; (4040a0 <analogCalculate+0x568>)
  403e92:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  403e96:	4b83      	ldr	r3, [pc, #524]	; (4040a4 <analogCalculate+0x56c>)
  403e98:	635e      	str	r6, [r3, #52]	; 0x34
		MovingAverageADCData[SHUNTTEMPIDX] = processedADCData[SHUNTTEMPIDX]*tempMovingAverageCoef + MovingAverageADCData[SHUNTTEMPIDX]*(1.0-tempMovingAverageCoef);
  403e9a:	4b83      	ldr	r3, [pc, #524]	; (4040a8 <analogCalculate+0x570>)
  403e9c:	681f      	ldr	r7, [r3, #0]
  403e9e:	4d83      	ldr	r5, [pc, #524]	; (4040ac <analogCalculate+0x574>)
  403ea0:	4c83      	ldr	r4, [pc, #524]	; (4040b0 <analogCalculate+0x578>)
  403ea2:	6b68      	ldr	r0, [r5, #52]	; 0x34
  403ea4:	47a0      	blx	r4
  403ea6:	4680      	mov	r8, r0
  403ea8:	4689      	mov	r9, r1
  403eaa:	4638      	mov	r0, r7
  403eac:	47a0      	blx	r4
  403eae:	4602      	mov	r2, r0
  403eb0:	460b      	mov	r3, r1
  403eb2:	2000      	movs	r0, #0
  403eb4:	497f      	ldr	r1, [pc, #508]	; (4040b4 <analogCalculate+0x57c>)
  403eb6:	f8df a224 	ldr.w	sl, [pc, #548]	; 4040dc <analogCalculate+0x5a4>
  403eba:	47d0      	blx	sl
  403ebc:	4602      	mov	r2, r0
  403ebe:	460b      	mov	r3, r1
  403ec0:	4640      	mov	r0, r8
  403ec2:	4649      	mov	r1, r9
  403ec4:	f8df 8204 	ldr.w	r8, [pc, #516]	; 4040cc <analogCalculate+0x594>
  403ec8:	47c0      	blx	r8
  403eca:	4680      	mov	r8, r0
  403ecc:	4689      	mov	r9, r1
  403ece:	4639      	mov	r1, r7
  403ed0:	4630      	mov	r0, r6
  403ed2:	4b79      	ldr	r3, [pc, #484]	; (4040b8 <analogCalculate+0x580>)
  403ed4:	4798      	blx	r3
  403ed6:	47a0      	blx	r4
  403ed8:	4602      	mov	r2, r0
  403eda:	460b      	mov	r3, r1
  403edc:	4640      	mov	r0, r8
  403ede:	4649      	mov	r1, r9
  403ee0:	4c76      	ldr	r4, [pc, #472]	; (4040bc <analogCalculate+0x584>)
  403ee2:	47a0      	blx	r4
  403ee4:	4b76      	ldr	r3, [pc, #472]	; (4040c0 <analogCalculate+0x588>)
  403ee6:	4798      	blx	r3
  403ee8:	4604      	mov	r4, r0
  403eea:	6368      	str	r0, [r5, #52]	; 0x34
		maximumValues[SHUNTTEMPIDX] = (MovingAverageADCData[SHUNTTEMPIDX] > maximumValues[SHUNTTEMPIDX]) ? MovingAverageADCData[SHUNTTEMPIDX] : maximumValues[SHUNTTEMPIDX];
  403eec:	4b66      	ldr	r3, [pc, #408]	; (404088 <analogCalculate+0x550>)
  403eee:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  403ef0:	4629      	mov	r1, r5
  403ef2:	4b66      	ldr	r3, [pc, #408]	; (40408c <analogCalculate+0x554>)
  403ef4:	4798      	blx	r3
  403ef6:	b100      	cbz	r0, 403efa <analogCalculate+0x3c2>
  403ef8:	4625      	mov	r5, r4
  403efa:	4b63      	ldr	r3, [pc, #396]	; (404088 <analogCalculate+0x550>)
  403efc:	635d      	str	r5, [r3, #52]	; 0x34
		minimumValues[SHUNTTEMPIDX] = (MovingAverageADCData[SHUNTTEMPIDX] < minimumValues[SHUNTTEMPIDX]) ? MovingAverageADCData[SHUNTTEMPIDX] : minimumValues[SHUNTTEMPIDX];
  403efe:	4b64      	ldr	r3, [pc, #400]	; (404090 <analogCalculate+0x558>)
  403f00:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  403f02:	4629      	mov	r1, r5
  403f04:	4620      	mov	r0, r4
  403f06:	4b63      	ldr	r3, [pc, #396]	; (404094 <analogCalculate+0x55c>)
  403f08:	4798      	blx	r3
  403f0a:	b900      	cbnz	r0, 403f0e <analogCalculate+0x3d6>
  403f0c:	462c      	mov	r4, r5
  403f0e:	4b60      	ldr	r3, [pc, #384]	; (404090 <analogCalculate+0x558>)
  403f10:	635c      	str	r4, [r3, #52]	; 0x34
		needsProcessing[SHUNTTEMPIDX] = false;
  403f12:	2200      	movs	r2, #0
  403f14:	4b60      	ldr	r3, [pc, #384]	; (404098 <analogCalculate+0x560>)
  403f16:	735a      	strb	r2, [r3, #13]
	}
	if(needsProcessing[FETTEMPIDX]){
  403f18:	4b5f      	ldr	r3, [pc, #380]	; (404098 <analogCalculate+0x560>)
  403f1a:	7b9b      	ldrb	r3, [r3, #14]
  403f1c:	2b00      	cmp	r3, #0
  403f1e:	d049      	beq.n	403fb4 <analogCalculate+0x47c>
		processedADCData[FETTEMPIDX] = PCBTempLookUpTable[(int)(rawADCData[FETTEMPIDX]/4)];
  403f20:	4b5e      	ldr	r3, [pc, #376]	; (40409c <analogCalculate+0x564>)
  403f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  403f24:	2b00      	cmp	r3, #0
  403f26:	bfb8      	it	lt
  403f28:	3303      	addlt	r3, #3
  403f2a:	109b      	asrs	r3, r3, #2
  403f2c:	4a5c      	ldr	r2, [pc, #368]	; (4040a0 <analogCalculate+0x568>)
  403f2e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  403f32:	4b5c      	ldr	r3, [pc, #368]	; (4040a4 <analogCalculate+0x56c>)
  403f34:	639e      	str	r6, [r3, #56]	; 0x38
		MovingAverageADCData[FETTEMPIDX] = processedADCData[FETTEMPIDX]*tempMovingAverageCoef + MovingAverageADCData[FETTEMPIDX]*(1.0-tempMovingAverageCoef);
  403f36:	4b5c      	ldr	r3, [pc, #368]	; (4040a8 <analogCalculate+0x570>)
  403f38:	681f      	ldr	r7, [r3, #0]
  403f3a:	4d5c      	ldr	r5, [pc, #368]	; (4040ac <analogCalculate+0x574>)
  403f3c:	4c5c      	ldr	r4, [pc, #368]	; (4040b0 <analogCalculate+0x578>)
  403f3e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  403f40:	47a0      	blx	r4
  403f42:	4680      	mov	r8, r0
  403f44:	4689      	mov	r9, r1
  403f46:	4638      	mov	r0, r7
  403f48:	47a0      	blx	r4
  403f4a:	4602      	mov	r2, r0
  403f4c:	460b      	mov	r3, r1
  403f4e:	2000      	movs	r0, #0
  403f50:	4958      	ldr	r1, [pc, #352]	; (4040b4 <analogCalculate+0x57c>)
  403f52:	f8df a188 	ldr.w	sl, [pc, #392]	; 4040dc <analogCalculate+0x5a4>
  403f56:	47d0      	blx	sl
  403f58:	4602      	mov	r2, r0
  403f5a:	460b      	mov	r3, r1
  403f5c:	4640      	mov	r0, r8
  403f5e:	4649      	mov	r1, r9
  403f60:	f8df 8168 	ldr.w	r8, [pc, #360]	; 4040cc <analogCalculate+0x594>
  403f64:	47c0      	blx	r8
  403f66:	4680      	mov	r8, r0
  403f68:	4689      	mov	r9, r1
  403f6a:	4639      	mov	r1, r7
  403f6c:	4630      	mov	r0, r6
  403f6e:	4b52      	ldr	r3, [pc, #328]	; (4040b8 <analogCalculate+0x580>)
  403f70:	4798      	blx	r3
  403f72:	47a0      	blx	r4
  403f74:	4602      	mov	r2, r0
  403f76:	460b      	mov	r3, r1
  403f78:	4640      	mov	r0, r8
  403f7a:	4649      	mov	r1, r9
  403f7c:	4c4f      	ldr	r4, [pc, #316]	; (4040bc <analogCalculate+0x584>)
  403f7e:	47a0      	blx	r4
  403f80:	4b4f      	ldr	r3, [pc, #316]	; (4040c0 <analogCalculate+0x588>)
  403f82:	4798      	blx	r3
  403f84:	4604      	mov	r4, r0
  403f86:	63a8      	str	r0, [r5, #56]	; 0x38
		maximumValues[FETTEMPIDX] = (MovingAverageADCData[FETTEMPIDX] > maximumValues[FETTEMPIDX]) ? MovingAverageADCData[FETTEMPIDX] : maximumValues[FETTEMPIDX];
  403f88:	4b3f      	ldr	r3, [pc, #252]	; (404088 <analogCalculate+0x550>)
  403f8a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  403f8c:	4629      	mov	r1, r5
  403f8e:	4b3f      	ldr	r3, [pc, #252]	; (40408c <analogCalculate+0x554>)
  403f90:	4798      	blx	r3
  403f92:	b100      	cbz	r0, 403f96 <analogCalculate+0x45e>
  403f94:	4625      	mov	r5, r4
  403f96:	4b3c      	ldr	r3, [pc, #240]	; (404088 <analogCalculate+0x550>)
  403f98:	639d      	str	r5, [r3, #56]	; 0x38
		minimumValues[FETTEMPIDX] = (MovingAverageADCData[FETTEMPIDX] < minimumValues[FETTEMPIDX]) ? MovingAverageADCData[FETTEMPIDX] : minimumValues[FETTEMPIDX];
  403f9a:	4b3d      	ldr	r3, [pc, #244]	; (404090 <analogCalculate+0x558>)
  403f9c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  403f9e:	4629      	mov	r1, r5
  403fa0:	4620      	mov	r0, r4
  403fa2:	4b3c      	ldr	r3, [pc, #240]	; (404094 <analogCalculate+0x55c>)
  403fa4:	4798      	blx	r3
  403fa6:	b900      	cbnz	r0, 403faa <analogCalculate+0x472>
  403fa8:	462c      	mov	r4, r5
  403faa:	4b39      	ldr	r3, [pc, #228]	; (404090 <analogCalculate+0x558>)
  403fac:	639c      	str	r4, [r3, #56]	; 0x38
		needsProcessing[FETTEMPIDX] = false;
  403fae:	2200      	movs	r2, #0
  403fb0:	4b39      	ldr	r3, [pc, #228]	; (404098 <analogCalculate+0x560>)
  403fb2:	739a      	strb	r2, [r3, #14]
	}
	if(needsProcessing[STACKVOLTIDX]){
  403fb4:	4b38      	ldr	r3, [pc, #224]	; (404098 <analogCalculate+0x560>)
  403fb6:	7bdb      	ldrb	r3, [r3, #15]
  403fb8:	2b00      	cmp	r3, #0
  403fba:	d057      	beq.n	40406c <analogCalculate+0x534>
		processedADCData[STACKVOLTIDX] = (rawADCData[STACKVOLTIDX]/4095.0)*3.30*11;
  403fbc:	4b37      	ldr	r3, [pc, #220]	; (40409c <analogCalculate+0x564>)
  403fbe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  403fc0:	4b40      	ldr	r3, [pc, #256]	; (4040c4 <analogCalculate+0x58c>)
  403fc2:	4798      	blx	r3
  403fc4:	a32c      	add	r3, pc, #176	; (adr r3, 404078 <analogCalculate+0x540>)
  403fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fca:	4c3f      	ldr	r4, [pc, #252]	; (4040c8 <analogCalculate+0x590>)
  403fcc:	47a0      	blx	r4
  403fce:	4d3f      	ldr	r5, [pc, #252]	; (4040cc <analogCalculate+0x594>)
  403fd0:	a32b      	add	r3, pc, #172	; (adr r3, 404080 <analogCalculate+0x548>)
  403fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fd6:	47a8      	blx	r5
  403fd8:	2200      	movs	r2, #0
  403fda:	4b3d      	ldr	r3, [pc, #244]	; (4040d0 <analogCalculate+0x598>)
  403fdc:	47a8      	blx	r5
  403fde:	4f38      	ldr	r7, [pc, #224]	; (4040c0 <analogCalculate+0x588>)
  403fe0:	47b8      	blx	r7
  403fe2:	4682      	mov	sl, r0
  403fe4:	4b2f      	ldr	r3, [pc, #188]	; (4040a4 <analogCalculate+0x56c>)
  403fe6:	63d8      	str	r0, [r3, #60]	; 0x3c
		MovingAverageADCData[STACKVOLTIDX] = processedADCData[STACKVOLTIDX]*stackMovingAverageCoef + MovingAverageADCData[STACKVOLTIDX]*(1.0-stackMovingAverageCoef);
  403fe8:	4b3a      	ldr	r3, [pc, #232]	; (4040d4 <analogCalculate+0x59c>)
  403fea:	f8d3 b000 	ldr.w	fp, [r3]
  403fee:	4e2f      	ldr	r6, [pc, #188]	; (4040ac <analogCalculate+0x574>)
  403ff0:	4c2f      	ldr	r4, [pc, #188]	; (4040b0 <analogCalculate+0x578>)
  403ff2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
  403ff4:	47a0      	blx	r4
  403ff6:	e9cd 0100 	strd	r0, r1, [sp]
  403ffa:	4658      	mov	r0, fp
  403ffc:	47a0      	blx	r4
  403ffe:	4602      	mov	r2, r0
  404000:	460b      	mov	r3, r1
  404002:	2000      	movs	r0, #0
  404004:	492b      	ldr	r1, [pc, #172]	; (4040b4 <analogCalculate+0x57c>)
  404006:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 4040dc <analogCalculate+0x5a4>
  40400a:	47c0      	blx	r8
  40400c:	4602      	mov	r2, r0
  40400e:	460b      	mov	r3, r1
  404010:	e9dd 0100 	ldrd	r0, r1, [sp]
  404014:	47a8      	blx	r5
  404016:	4680      	mov	r8, r0
  404018:	4689      	mov	r9, r1
  40401a:	4659      	mov	r1, fp
  40401c:	4650      	mov	r0, sl
  40401e:	4b26      	ldr	r3, [pc, #152]	; (4040b8 <analogCalculate+0x580>)
  404020:	4798      	blx	r3
  404022:	47a0      	blx	r4
  404024:	4602      	mov	r2, r0
  404026:	460b      	mov	r3, r1
  404028:	4640      	mov	r0, r8
  40402a:	4649      	mov	r1, r9
  40402c:	4c23      	ldr	r4, [pc, #140]	; (4040bc <analogCalculate+0x584>)
  40402e:	47a0      	blx	r4
  404030:	47b8      	blx	r7
  404032:	4604      	mov	r4, r0
  404034:	63f0      	str	r0, [r6, #60]	; 0x3c
		maximumValues[STACKVOLTIDX] = (MovingAverageADCData[STACKVOLTIDX] > maximumValues[STACKVOLTIDX]) ? MovingAverageADCData[STACKVOLTIDX] : maximumValues[STACKVOLTIDX];
  404036:	4b14      	ldr	r3, [pc, #80]	; (404088 <analogCalculate+0x550>)
  404038:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  40403a:	4629      	mov	r1, r5
  40403c:	4b13      	ldr	r3, [pc, #76]	; (40408c <analogCalculate+0x554>)
  40403e:	4798      	blx	r3
  404040:	b100      	cbz	r0, 404044 <analogCalculate+0x50c>
  404042:	4625      	mov	r5, r4
  404044:	4b10      	ldr	r3, [pc, #64]	; (404088 <analogCalculate+0x550>)
  404046:	63dd      	str	r5, [r3, #60]	; 0x3c
		minimumValues[STACKVOLTIDX] = (MovingAverageADCData[STACKVOLTIDX] < minimumValues[STACKVOLTIDX]) && !(PIOA->PIO_ODSR & NBAT_EN) ? MovingAverageADCData[STACKVOLTIDX] : minimumValues[STACKVOLTIDX];
  404048:	4b11      	ldr	r3, [pc, #68]	; (404090 <analogCalculate+0x558>)
  40404a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  40404c:	4629      	mov	r1, r5
  40404e:	4620      	mov	r0, r4
  404050:	4b10      	ldr	r3, [pc, #64]	; (404094 <analogCalculate+0x55c>)
  404052:	4798      	blx	r3
  404054:	b128      	cbz	r0, 404062 <analogCalculate+0x52a>
  404056:	4b20      	ldr	r3, [pc, #128]	; (4040d8 <analogCalculate+0x5a0>)
  404058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40405a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40405e:	bf08      	it	eq
  404060:	4625      	moveq	r5, r4
  404062:	4b0b      	ldr	r3, [pc, #44]	; (404090 <analogCalculate+0x558>)
  404064:	63dd      	str	r5, [r3, #60]	; 0x3c
		needsProcessing[STACKVOLTIDX] = false;
  404066:	2200      	movs	r2, #0
  404068:	4b0b      	ldr	r3, [pc, #44]	; (404098 <analogCalculate+0x560>)
  40406a:	73da      	strb	r2, [r3, #15]
	}
}
  40406c:	b007      	add	sp, #28
  40406e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404072:	bf00      	nop
  404074:	f3af 8000 	nop.w
  404078:	00000000 	.word	0x00000000
  40407c:	40affe00 	.word	0x40affe00
  404080:	66666666 	.word	0x66666666
  404084:	400a6666 	.word	0x400a6666
  404088:	200023fc 	.word	0x200023fc
  40408c:	00406375 	.word	0x00406375
  404090:	20003568 	.word	0x20003568
  404094:	00406339 	.word	0x00406339
  404098:	200035e8 	.word	0x200035e8
  40409c:	200035a8 	.word	0x200035a8
  4040a0:	20002560 	.word	0x20002560
  4040a4:	20002520 	.word	0x20002520
  4040a8:	20000184 	.word	0x20000184
  4040ac:	20000130 	.word	0x20000130
  4040b0:	00405739 	.word	0x00405739
  4040b4:	3ff00000 	.word	0x3ff00000
  4040b8:	00405ffd 	.word	0x00405ffd
  4040bc:	0040547d 	.word	0x0040547d
  4040c0:	00405d41 	.word	0x00405d41
  4040c4:	00405715 	.word	0x00405715
  4040c8:	00405a35 	.word	0x00405a35
  4040cc:	004057e1 	.word	0x004057e1
  4040d0:	40260000 	.word	0x40260000
  4040d4:	20000180 	.word	0x20000180
  4040d8:	400e0e00 	.word	0x400e0e00
  4040dc:	00405479 	.word	0x00405479
	if( needsProcessing[CELL1IDX] || needsProcessing[CELL2IDX] || needsProcessing[CELL3IDX] || needsProcessing[CELL4IDX] || needsProcessing[CELL5IDX] || needsProcessing[CELL6IDX]){
  4040e0:	4b0f      	ldr	r3, [pc, #60]	; (404120 <analogCalculate+0x5e8>)
  4040e2:	78db      	ldrb	r3, [r3, #3]
  4040e4:	2b00      	cmp	r3, #0
  4040e6:	f47f ad35 	bne.w	403b54 <analogCalculate+0x1c>
  4040ea:	4b0d      	ldr	r3, [pc, #52]	; (404120 <analogCalculate+0x5e8>)
  4040ec:	791b      	ldrb	r3, [r3, #4]
  4040ee:	2b00      	cmp	r3, #0
  4040f0:	f47f ad30 	bne.w	403b54 <analogCalculate+0x1c>
  4040f4:	4b0a      	ldr	r3, [pc, #40]	; (404120 <analogCalculate+0x5e8>)
  4040f6:	795b      	ldrb	r3, [r3, #5]
  4040f8:	2b00      	cmp	r3, #0
  4040fa:	f47f ad2b 	bne.w	403b54 <analogCalculate+0x1c>
  4040fe:	e593      	b.n	403c28 <analogCalculate+0xf0>
	if(needsProcessing[TEMP1IDX] || needsProcessing[TEMP2IDX] || needsProcessing[TEMP3IDX] || needsProcessing[TEMP4IDX] || needsProcessing[TEMP5IDX] || needsProcessing[TEMP6IDX]){
  404100:	4b07      	ldr	r3, [pc, #28]	; (404120 <analogCalculate+0x5e8>)
  404102:	7a5b      	ldrb	r3, [r3, #9]
  404104:	2b00      	cmp	r3, #0
  404106:	f47f ad9a 	bne.w	403c3e <analogCalculate+0x106>
  40410a:	4b05      	ldr	r3, [pc, #20]	; (404120 <analogCalculate+0x5e8>)
  40410c:	7a9b      	ldrb	r3, [r3, #10]
  40410e:	2b00      	cmp	r3, #0
  404110:	f47f ad95 	bne.w	403c3e <analogCalculate+0x106>
  404114:	4b02      	ldr	r3, [pc, #8]	; (404120 <analogCalculate+0x5e8>)
  404116:	7adb      	ldrb	r3, [r3, #11]
  404118:	2b00      	cmp	r3, #0
  40411a:	f47f ad90 	bne.w	403c3e <analogCalculate+0x106>
  40411e:	e5eb      	b.n	403cf8 <analogCalculate+0x1c0>
  404120:	200035e8 	.word	0x200035e8

00404124 <overTemp>:
		pio_clear(BOARD_LED_PORT,BOARD_LED);
		pio_clear(NBAT_EN_PORT,NBAT_EN);
	}
}

bool overTemp(){
  404124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
		if(MovingAverageADCData[i] >= CELL_OVER_TEMP_THRESHOLD)
  404126:	4915      	ldr	r1, [pc, #84]	; (40417c <overTemp+0x58>)
  404128:	4b15      	ldr	r3, [pc, #84]	; (404180 <overTemp+0x5c>)
  40412a:	6998      	ldr	r0, [r3, #24]
  40412c:	4b15      	ldr	r3, [pc, #84]	; (404184 <overTemp+0x60>)
  40412e:	4798      	blx	r3
  404130:	b9f0      	cbnz	r0, 404170 <overTemp+0x4c>
  404132:	4d13      	ldr	r5, [pc, #76]	; (404180 <overTemp+0x5c>)
  404134:	f105 041c 	add.w	r4, r5, #28
  404138:	3530      	adds	r5, #48	; 0x30
  40413a:	4f10      	ldr	r7, [pc, #64]	; (40417c <overTemp+0x58>)
  40413c:	4e11      	ldr	r6, [pc, #68]	; (404184 <overTemp+0x60>)
  40413e:	4639      	mov	r1, r7
  404140:	f854 0b04 	ldr.w	r0, [r4], #4
  404144:	47b0      	blx	r6
  404146:	b9a8      	cbnz	r0, 404174 <overTemp+0x50>
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
  404148:	42ac      	cmp	r4, r5
  40414a:	d1f8      	bne.n	40413e <overTemp+0x1a>
			return true;
	if((MovingAverageADCData[SHUNTTEMPIDX] >= PCB_OVER_TEMP_THRESHOLD) || (MovingAverageADCData[FETTEMPIDX] >= PCB_OVER_TEMP_THRESHOLD))
  40414c:	490e      	ldr	r1, [pc, #56]	; (404188 <overTemp+0x64>)
  40414e:	4b0c      	ldr	r3, [pc, #48]	; (404180 <overTemp+0x5c>)
  404150:	6b58      	ldr	r0, [r3, #52]	; 0x34
  404152:	4b0c      	ldr	r3, [pc, #48]	; (404184 <overTemp+0x60>)
  404154:	4798      	blx	r3
  404156:	b978      	cbnz	r0, 404178 <overTemp+0x54>
  404158:	f04f 0401 	mov.w	r4, #1
  40415c:	490a      	ldr	r1, [pc, #40]	; (404188 <overTemp+0x64>)
  40415e:	4b08      	ldr	r3, [pc, #32]	; (404180 <overTemp+0x5c>)
  404160:	6b98      	ldr	r0, [r3, #56]	; 0x38
  404162:	4b08      	ldr	r3, [pc, #32]	; (404184 <overTemp+0x60>)
  404164:	4798      	blx	r3
  404166:	b908      	cbnz	r0, 40416c <overTemp+0x48>
  404168:	f04f 0400 	mov.w	r4, #0
  40416c:	b2e0      	uxtb	r0, r4
  40416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
  404170:	2001      	movs	r0, #1
  404172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404174:	2001      	movs	r0, #1
  404176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
  404178:	2001      	movs	r0, #1
	return false;
}
  40417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40417c:	42700000 	.word	0x42700000
  404180:	20000130 	.word	0x20000130
  404184:	00406361 	.word	0x00406361
  404188:	42a00000 	.word	0x42a00000

0040418c <underTemp>:
bool underTemp(){
  40418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
		if(MovingAverageADCData[i] <= UNDER_TEMP_THRESHOLD)
  40418e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404192:	4b0c      	ldr	r3, [pc, #48]	; (4041c4 <underTemp+0x38>)
  404194:	6998      	ldr	r0, [r3, #24]
  404196:	4b0c      	ldr	r3, [pc, #48]	; (4041c8 <underTemp+0x3c>)
  404198:	4798      	blx	r3
  40419a:	b970      	cbnz	r0, 4041ba <underTemp+0x2e>
  40419c:	4d09      	ldr	r5, [pc, #36]	; (4041c4 <underTemp+0x38>)
  40419e:	f105 041c 	add.w	r4, r5, #28
  4041a2:	3530      	adds	r5, #48	; 0x30
  4041a4:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
  4041a8:	4e07      	ldr	r6, [pc, #28]	; (4041c8 <underTemp+0x3c>)
  4041aa:	4639      	mov	r1, r7
  4041ac:	f854 0b04 	ldr.w	r0, [r4], #4
  4041b0:	47b0      	blx	r6
  4041b2:	b920      	cbnz	r0, 4041be <underTemp+0x32>
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
  4041b4:	42ac      	cmp	r4, r5
  4041b6:	d1f8      	bne.n	4041aa <underTemp+0x1e>
  4041b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
  4041ba:	2001      	movs	r0, #1
  4041bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041be:	2001      	movs	r0, #1
	return false;
}
  4041c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4041c2:	bf00      	nop
  4041c4:	20000130 	.word	0x20000130
  4041c8:	0040634d 	.word	0x0040634d
  4041cc:	00000000 	.word	0x00000000

004041d0 <overVolt>:
bool overVolt(){
  4041d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
		if(MovingAverageADCData[i] >= OVER_VOLTAGE_THRESHOLD)
  4041d4:	4b14      	ldr	r3, [pc, #80]	; (404228 <overVolt+0x58>)
  4041d6:	6818      	ldr	r0, [r3, #0]
  4041d8:	4b14      	ldr	r3, [pc, #80]	; (40422c <overVolt+0x5c>)
  4041da:	4798      	blx	r3
  4041dc:	a310      	add	r3, pc, #64	; (adr r3, 404220 <overVolt+0x50>)
  4041de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041e2:	4c13      	ldr	r4, [pc, #76]	; (404230 <overVolt+0x60>)
  4041e4:	47a0      	blx	r4
  4041e6:	b998      	cbnz	r0, 404210 <overVolt+0x40>
  4041e8:	4d0f      	ldr	r5, [pc, #60]	; (404228 <overVolt+0x58>)
  4041ea:	1d2c      	adds	r4, r5, #4
  4041ec:	3518      	adds	r5, #24
  4041ee:	4f0f      	ldr	r7, [pc, #60]	; (40422c <overVolt+0x5c>)
  4041f0:	f20f 092c 	addw	r9, pc, #44	; 0x2c
  4041f4:	e9d9 8900 	ldrd	r8, r9, [r9]
  4041f8:	4e0d      	ldr	r6, [pc, #52]	; (404230 <overVolt+0x60>)
  4041fa:	f854 0b04 	ldr.w	r0, [r4], #4
  4041fe:	47b8      	blx	r7
  404200:	4642      	mov	r2, r8
  404202:	464b      	mov	r3, r9
  404204:	47b0      	blx	r6
  404206:	b930      	cbnz	r0, 404216 <overVolt+0x46>
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
  404208:	42ac      	cmp	r4, r5
  40420a:	d1f6      	bne.n	4041fa <overVolt+0x2a>
  40420c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return true;
  404210:	2001      	movs	r0, #1
  404212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404216:	2001      	movs	r0, #1
	return false;
}
  404218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40421c:	f3af 8000 	nop.w
  404220:	9999999a 	.word	0x9999999a
  404224:	40119999 	.word	0x40119999
  404228:	20000130 	.word	0x20000130
  40422c:	00405739 	.word	0x00405739
  404230:	00405ced 	.word	0x00405ced
  404234:	00000000 	.word	0x00000000

00404238 <underVolt>:
bool underVolt(){
  404238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
		if(MovingAverageADCData[i] <= UNDER_VOLTAGE_THRESHOLD)
  40423c:	4b22      	ldr	r3, [pc, #136]	; (4042c8 <underVolt+0x90>)
  40423e:	6818      	ldr	r0, [r3, #0]
  404240:	4b22      	ldr	r3, [pc, #136]	; (4042cc <underVolt+0x94>)
  404242:	4798      	blx	r3
  404244:	a31c      	add	r3, pc, #112	; (adr r3, 4042b8 <underVolt+0x80>)
  404246:	e9d3 2300 	ldrd	r2, r3, [r3]
  40424a:	4c21      	ldr	r4, [pc, #132]	; (4042d0 <underVolt+0x98>)
  40424c:	47a0      	blx	r4
  40424e:	bb38      	cbnz	r0, 4042a0 <underVolt+0x68>
  404250:	4d1d      	ldr	r5, [pc, #116]	; (4042c8 <underVolt+0x90>)
  404252:	1d2c      	adds	r4, r5, #4
  404254:	3518      	adds	r5, #24
  404256:	4f1d      	ldr	r7, [pc, #116]	; (4042cc <underVolt+0x94>)
  404258:	f20f 095c 	addw	r9, pc, #92	; 0x5c
  40425c:	e9d9 8900 	ldrd	r8, r9, [r9]
  404260:	4e1b      	ldr	r6, [pc, #108]	; (4042d0 <underVolt+0x98>)
  404262:	f854 0b04 	ldr.w	r0, [r4], #4
  404266:	47b8      	blx	r7
  404268:	4642      	mov	r2, r8
  40426a:	464b      	mov	r3, r9
  40426c:	47b0      	blx	r6
  40426e:	b9d0      	cbnz	r0, 4042a6 <underVolt+0x6e>
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
  404270:	42ac      	cmp	r4, r5
  404272:	d1f6      	bne.n	404262 <underVolt+0x2a>
			return true;
	if(!(PIOA->PIO_ODSR & NBAT_EN) && (MovingAverageADCData[STACKVOLTIDX] <= 6*UNDER_VOLTAGE_THRESHOLD))		//checks the overall output stack voltage if the output is enabled
  404274:	4b17      	ldr	r3, [pc, #92]	; (4042d4 <underVolt+0x9c>)
  404276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  404278:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40427c:	d116      	bne.n	4042ac <underVolt+0x74>
  40427e:	4b12      	ldr	r3, [pc, #72]	; (4042c8 <underVolt+0x90>)
  404280:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  404282:	4b12      	ldr	r3, [pc, #72]	; (4042cc <underVolt+0x94>)
  404284:	4798      	blx	r3
  404286:	f04f 0401 	mov.w	r4, #1
  40428a:	a30d      	add	r3, pc, #52	; (adr r3, 4042c0 <underVolt+0x88>)
  40428c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404290:	4d0f      	ldr	r5, [pc, #60]	; (4042d0 <underVolt+0x98>)
  404292:	47a8      	blx	r5
  404294:	b908      	cbnz	r0, 40429a <underVolt+0x62>
  404296:	f04f 0400 	mov.w	r4, #0
  40429a:	b2e0      	uxtb	r0, r4
  40429c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return true;
  4042a0:	2001      	movs	r0, #1
  4042a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4042a6:	2001      	movs	r0, #1
  4042a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
	return false;
  4042ac:	2000      	movs	r0, #0
}
  4042ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4042b2:	bf00      	nop
  4042b4:	f3af 8000 	nop.w
  4042b8:	66666666 	.word	0x66666666
  4042bc:	400a6666 	.word	0x400a6666
  4042c0:	cccccccc 	.word	0xcccccccc
  4042c4:	4033cccc 	.word	0x4033cccc
  4042c8:	20000130 	.word	0x20000130
  4042cc:	00405739 	.word	0x00405739
  4042d0:	00405cd9 	.word	0x00405cd9
  4042d4:	400e0e00 	.word	0x400e0e00

004042d8 <overCurrent>:
bool overCurrent(){
  4042d8:	b510      	push	{r4, lr}
	if(MovingAverageADCData[CURRENTIDX] >= IST_OVER_CURRENT_THRESHOLD)
  4042da:	490a      	ldr	r1, [pc, #40]	; (404304 <overCurrent+0x2c>)
  4042dc:	4b0a      	ldr	r3, [pc, #40]	; (404308 <overCurrent+0x30>)
  4042de:	6b18      	ldr	r0, [r3, #48]	; 0x30
  4042e0:	4b0a      	ldr	r3, [pc, #40]	; (40430c <overCurrent+0x34>)
  4042e2:	4798      	blx	r3
  4042e4:	b958      	cbnz	r0, 4042fe <overCurrent+0x26>
		return true;
	if(ctsAverageCurrent >= CTS_OVER_CURRENT_THRESHOLD)
  4042e6:	f04f 0401 	mov.w	r4, #1
  4042ea:	4906      	ldr	r1, [pc, #24]	; (404304 <overCurrent+0x2c>)
  4042ec:	4b08      	ldr	r3, [pc, #32]	; (404310 <overCurrent+0x38>)
  4042ee:	6818      	ldr	r0, [r3, #0]
  4042f0:	4b06      	ldr	r3, [pc, #24]	; (40430c <overCurrent+0x34>)
  4042f2:	4798      	blx	r3
  4042f4:	b908      	cbnz	r0, 4042fa <overCurrent+0x22>
  4042f6:	f04f 0400 	mov.w	r4, #0
  4042fa:	b2e0      	uxtb	r0, r4
  4042fc:	bd10      	pop	{r4, pc}
		return true;
  4042fe:	2001      	movs	r0, #1
		return true;
	return false;
}
  404300:	bd10      	pop	{r4, pc}
  404302:	bf00      	nop
  404304:	43fa0000 	.word	0x43fa0000
  404308:	20000130 	.word	0x20000130
  40430c:	00406361 	.word	0x00406361
  404310:	2000177c 	.word	0x2000177c
  404314:	00000000 	.word	0x00000000

00404318 <cellImbalance>:
bool cellImbalance(){
  404318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40431c:	4d18      	ldr	r5, [pc, #96]	; (404380 <cellImbalance+0x68>)
  40431e:	f105 0a18 	add.w	sl, r5, #24
	float minCell = 5.0, maxCell = 0;
  404322:	2600      	movs	r6, #0
  404324:	4f17      	ldr	r7, [pc, #92]	; (404384 <cellImbalance+0x6c>)
	for(int i=CELL1IDX;i<=CELL6IDX;i++){
		if(MovingAverageADCData[i] < minCell) minCell = MovingAverageADCData[i];
  404326:	f8df 906c 	ldr.w	r9, [pc, #108]	; 404394 <cellImbalance+0x7c>
		if(MovingAverageADCData[i] > maxCell) maxCell = MovingAverageADCData[i];
  40432a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 404398 <cellImbalance+0x80>
  40432e:	e001      	b.n	404334 <cellImbalance+0x1c>
	for(int i=CELL1IDX;i<=CELL6IDX;i++){
  404330:	4555      	cmp	r5, sl
  404332:	d00d      	beq.n	404350 <cellImbalance+0x38>
		if(MovingAverageADCData[i] < minCell) minCell = MovingAverageADCData[i];
  404334:	f855 4b04 	ldr.w	r4, [r5], #4
  404338:	4639      	mov	r1, r7
  40433a:	4620      	mov	r0, r4
  40433c:	47c8      	blx	r9
  40433e:	b100      	cbz	r0, 404342 <cellImbalance+0x2a>
  404340:	4627      	mov	r7, r4
		if(MovingAverageADCData[i] > maxCell) maxCell = MovingAverageADCData[i];
  404342:	4631      	mov	r1, r6
  404344:	4620      	mov	r0, r4
  404346:	47c0      	blx	r8
  404348:	2800      	cmp	r0, #0
  40434a:	d0f1      	beq.n	404330 <cellImbalance+0x18>
  40434c:	4626      	mov	r6, r4
  40434e:	e7ef      	b.n	404330 <cellImbalance+0x18>
	}
	if((maxCell - minCell) > CELL_IMBALANCE_THRESHOLD)
  404350:	4639      	mov	r1, r7
  404352:	4630      	mov	r0, r6
  404354:	4b0c      	ldr	r3, [pc, #48]	; (404388 <cellImbalance+0x70>)
  404356:	4798      	blx	r3
  404358:	4b0c      	ldr	r3, [pc, #48]	; (40438c <cellImbalance+0x74>)
  40435a:	4798      	blx	r3
  40435c:	f04f 0401 	mov.w	r4, #1
  404360:	a305      	add	r3, pc, #20	; (adr r3, 404378 <cellImbalance+0x60>)
  404362:	e9d3 2300 	ldrd	r2, r3, [r3]
  404366:	4d0a      	ldr	r5, [pc, #40]	; (404390 <cellImbalance+0x78>)
  404368:	47a8      	blx	r5
  40436a:	b908      	cbnz	r0, 404370 <cellImbalance+0x58>
  40436c:	f04f 0400 	mov.w	r4, #0
		return true;
	return false;
}
  404370:	f004 0001 	and.w	r0, r4, #1
  404374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404378:	9999999a 	.word	0x9999999a
  40437c:	3fd99999 	.word	0x3fd99999
  404380:	20000130 	.word	0x20000130
  404384:	40a00000 	.word	0x40a00000
  404388:	00405de9 	.word	0x00405de9
  40438c:	00405739 	.word	0x00405739
  404390:	00405d01 	.word	0x00405d01
  404394:	00406339 	.word	0x00406339
  404398:	00406375 	.word	0x00406375

0040439c <protec>:

void protec(){
  40439c:	b510      	push	{r4, lr}
	
	pio_set(NBAT_EN_PORT, NBAT_EN);
  40439e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4043a2:	4810      	ldr	r0, [pc, #64]	; (4043e4 <protec+0x48>)
  4043a4:	4b10      	ldr	r3, [pc, #64]	; (4043e8 <protec+0x4c>)
  4043a6:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TC1);
  4043a8:	2018      	movs	r0, #24
  4043aa:	4b10      	ldr	r3, [pc, #64]	; (4043ec <protec+0x50>)
  4043ac:	4798      	blx	r3
	tc_init(TC0, BLINK_TC,
  4043ae:	4c10      	ldr	r4, [pc, #64]	; (4043f0 <protec+0x54>)
  4043b0:	f24c 0204 	movw	r2, #49156	; 0xc004
  4043b4:	2101      	movs	r1, #1
  4043b6:	4620      	mov	r0, r4
  4043b8:	4b0e      	ldr	r3, [pc, #56]	; (4043f4 <protec+0x58>)
  4043ba:	4798      	blx	r3
			TC_CMR_WAVSEL_UP_RC
			|TC_CMR_WAVE
			| TC_CMR_TCCLKS_TIMER_CLOCK5);
	tc_write_rc(TC0,BLINK_TC,16000);
  4043bc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
  4043c0:	2101      	movs	r1, #1
  4043c2:	4620      	mov	r0, r4
  4043c4:	4b0c      	ldr	r3, [pc, #48]	; (4043f8 <protec+0x5c>)
  4043c6:	4798      	blx	r3
	tc_enable_interrupt(TC0, BLINK_TC, TC_IER_CPCS);
  4043c8:	2210      	movs	r2, #16
  4043ca:	2101      	movs	r1, #1
  4043cc:	4620      	mov	r0, r4
  4043ce:	4b0b      	ldr	r3, [pc, #44]	; (4043fc <protec+0x60>)
  4043d0:	4798      	blx	r3
	tc_start(TC0,BLINK_TC);
  4043d2:	2101      	movs	r1, #1
  4043d4:	4620      	mov	r0, r4
  4043d6:	4b0a      	ldr	r3, [pc, #40]	; (404400 <protec+0x64>)
  4043d8:	4798      	blx	r3
  4043da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4043de:	4b09      	ldr	r3, [pc, #36]	; (404404 <protec+0x68>)
  4043e0:	601a      	str	r2, [r3, #0]
  4043e2:	bd10      	pop	{r4, pc}
  4043e4:	400e0e00 	.word	0x400e0e00
  4043e8:	00403145 	.word	0x00403145
  4043ec:	004033d9 	.word	0x004033d9
  4043f0:	40010000 	.word	0x40010000
  4043f4:	0040106b 	.word	0x0040106b
  4043f8:	00401093 	.word	0x00401093
  4043fc:	0040109b 	.word	0x0040109b
  404400:	00401083 	.word	0x00401083
  404404:	e000e100 	.word	0xe000e100

00404408 <triggerProtections>:
void triggerProtections(){
  404408:	b538      	push	{r3, r4, r5, lr}
	if(overTemp())
  40440a:	4b56      	ldr	r3, [pc, #344]	; (404564 <triggerProtections+0x15c>)
  40440c:	4798      	blx	r3
  40440e:	2800      	cmp	r0, #0
  404410:	d02f      	beq.n	404472 <triggerProtections+0x6a>
		activeProtections[OVERTEMPIDX] = true;
  404412:	2201      	movs	r2, #1
  404414:	4b54      	ldr	r3, [pc, #336]	; (404568 <triggerProtections+0x160>)
  404416:	701a      	strb	r2, [r3, #0]
	if(underTemp())
  404418:	4b54      	ldr	r3, [pc, #336]	; (40456c <triggerProtections+0x164>)
  40441a:	4798      	blx	r3
  40441c:	2800      	cmp	r0, #0
  40441e:	d133      	bne.n	404488 <triggerProtections+0x80>
	else if(ignoreProtections)
  404420:	4b53      	ldr	r3, [pc, #332]	; (404570 <triggerProtections+0x168>)
  404422:	781b      	ldrb	r3, [r3, #0]
  404424:	2b00      	cmp	r3, #0
  404426:	f000 8096 	beq.w	404556 <triggerProtections+0x14e>
		activeProtections[UNDERTEMPIDX] = false;
  40442a:	2200      	movs	r2, #0
  40442c:	4b4e      	ldr	r3, [pc, #312]	; (404568 <triggerProtections+0x160>)
  40442e:	705a      	strb	r2, [r3, #1]
	if(overVolt())
  404430:	4b50      	ldr	r3, [pc, #320]	; (404574 <triggerProtections+0x16c>)
  404432:	4798      	blx	r3
  404434:	2800      	cmp	r0, #0
  404436:	d032      	beq.n	40449e <triggerProtections+0x96>
		activeProtections[OVERVOLTIDX] = true;
  404438:	2201      	movs	r2, #1
  40443a:	4b4b      	ldr	r3, [pc, #300]	; (404568 <triggerProtections+0x160>)
  40443c:	709a      	strb	r2, [r3, #2]
	if(underVolt())
  40443e:	4b4e      	ldr	r3, [pc, #312]	; (404578 <triggerProtections+0x170>)
  404440:	4798      	blx	r3
  404442:	2800      	cmp	r0, #0
  404444:	d02f      	beq.n	4044a6 <triggerProtections+0x9e>
		activeProtections[UNDERVOLTIDX] = true;
  404446:	2201      	movs	r2, #1
  404448:	4b47      	ldr	r3, [pc, #284]	; (404568 <triggerProtections+0x160>)
  40444a:	70da      	strb	r2, [r3, #3]
	if(overCurrent())
  40444c:	4b4b      	ldr	r3, [pc, #300]	; (40457c <triggerProtections+0x174>)
  40444e:	4798      	blx	r3
  404450:	2800      	cmp	r0, #0
  404452:	d062      	beq.n	40451a <triggerProtections+0x112>
		activeProtections[OVERCURRENTIDX] = true;
  404454:	2201      	movs	r2, #1
  404456:	4b44      	ldr	r3, [pc, #272]	; (404568 <triggerProtections+0x160>)
  404458:	711a      	strb	r2, [r3, #4]
	if(cellImbalance())
  40445a:	4b49      	ldr	r3, [pc, #292]	; (404580 <triggerProtections+0x178>)
  40445c:	4798      	blx	r3
  40445e:	2800      	cmp	r0, #0
  404460:	d133      	bne.n	4044ca <triggerProtections+0xc2>
	else if(ignoreProtections)
  404462:	4b43      	ldr	r3, [pc, #268]	; (404570 <triggerProtections+0x168>)
  404464:	781b      	ldrb	r3, [r3, #0]
  404466:	2b00      	cmp	r3, #0
  404468:	d032      	beq.n	4044d0 <triggerProtections+0xc8>
		activeProtections[CELLIMBALANCEIDX] = false;
  40446a:	2200      	movs	r2, #0
  40446c:	4b3e      	ldr	r3, [pc, #248]	; (404568 <triggerProtections+0x160>)
  40446e:	715a      	strb	r2, [r3, #5]
  404470:	e02e      	b.n	4044d0 <triggerProtections+0xc8>
	else if(ignoreProtections)
  404472:	4b3f      	ldr	r3, [pc, #252]	; (404570 <triggerProtections+0x168>)
  404474:	781b      	ldrb	r3, [r3, #0]
  404476:	2b00      	cmp	r3, #0
  404478:	d069      	beq.n	40454e <triggerProtections+0x146>
		activeProtections[OVERTEMPIDX] = false;
  40447a:	2200      	movs	r2, #0
  40447c:	4b3a      	ldr	r3, [pc, #232]	; (404568 <triggerProtections+0x160>)
  40447e:	701a      	strb	r2, [r3, #0]
	if(underTemp())
  404480:	4b3a      	ldr	r3, [pc, #232]	; (40456c <triggerProtections+0x164>)
  404482:	4798      	blx	r3
  404484:	2800      	cmp	r0, #0
  404486:	d0d0      	beq.n	40442a <triggerProtections+0x22>
		activeProtections[UNDERTEMPIDX] = true;
  404488:	2201      	movs	r2, #1
  40448a:	4b37      	ldr	r3, [pc, #220]	; (404568 <triggerProtections+0x160>)
  40448c:	705a      	strb	r2, [r3, #1]
	if(overVolt())
  40448e:	4b39      	ldr	r3, [pc, #228]	; (404574 <triggerProtections+0x16c>)
  404490:	4798      	blx	r3
  404492:	2800      	cmp	r0, #0
  404494:	d1d0      	bne.n	404438 <triggerProtections+0x30>
	else if(ignoreProtections)
  404496:	4b36      	ldr	r3, [pc, #216]	; (404570 <triggerProtections+0x168>)
  404498:	781b      	ldrb	r3, [r3, #0]
  40449a:	2b00      	cmp	r3, #0
  40449c:	d0cf      	beq.n	40443e <triggerProtections+0x36>
		activeProtections[OVERVOLTIDX] = false;
  40449e:	2200      	movs	r2, #0
  4044a0:	4b31      	ldr	r3, [pc, #196]	; (404568 <triggerProtections+0x160>)
  4044a2:	709a      	strb	r2, [r3, #2]
  4044a4:	e7cb      	b.n	40443e <triggerProtections+0x36>
	else if(ignoreProtections)
  4044a6:	4b32      	ldr	r3, [pc, #200]	; (404570 <triggerProtections+0x168>)
  4044a8:	781b      	ldrb	r3, [r3, #0]
  4044aa:	2b00      	cmp	r3, #0
  4044ac:	d0ce      	beq.n	40444c <triggerProtections+0x44>
		activeProtections[UNDERVOLTIDX] = false;
  4044ae:	2200      	movs	r2, #0
  4044b0:	4b2d      	ldr	r3, [pc, #180]	; (404568 <triggerProtections+0x160>)
  4044b2:	70da      	strb	r2, [r3, #3]
	if(overCurrent())
  4044b4:	4b31      	ldr	r3, [pc, #196]	; (40457c <triggerProtections+0x174>)
  4044b6:	4798      	blx	r3
  4044b8:	2800      	cmp	r0, #0
  4044ba:	d1cb      	bne.n	404454 <triggerProtections+0x4c>
		activeProtections[OVERCURRENTIDX] = false;
  4044bc:	2200      	movs	r2, #0
  4044be:	4b2a      	ldr	r3, [pc, #168]	; (404568 <triggerProtections+0x160>)
  4044c0:	711a      	strb	r2, [r3, #4]
	if(cellImbalance())
  4044c2:	4b2f      	ldr	r3, [pc, #188]	; (404580 <triggerProtections+0x178>)
  4044c4:	4798      	blx	r3
  4044c6:	2800      	cmp	r0, #0
  4044c8:	d0cf      	beq.n	40446a <triggerProtections+0x62>
		activeProtections[CELLIMBALANCEIDX] = true;
  4044ca:	2201      	movs	r2, #1
  4044cc:	4b26      	ldr	r3, [pc, #152]	; (404568 <triggerProtections+0x160>)
  4044ce:	715a      	strb	r2, [r3, #5]
	batteryStable = !(activeProtections[OVERTEMPIDX] || activeProtections[UNDERTEMPIDX] || activeProtections[OVERVOLTIDX] || activeProtections[UNDERVOLTIDX] || activeProtections[OVERCURRENTIDX] || activeProtections[CELLIMBALANCEIDX]);
  4044d0:	4b25      	ldr	r3, [pc, #148]	; (404568 <triggerProtections+0x160>)
  4044d2:	781b      	ldrb	r3, [r3, #0]
  4044d4:	2b00      	cmp	r3, #0
  4044d6:	d12f      	bne.n	404538 <triggerProtections+0x130>
  4044d8:	4b23      	ldr	r3, [pc, #140]	; (404568 <triggerProtections+0x160>)
  4044da:	785b      	ldrb	r3, [r3, #1]
  4044dc:	2b00      	cmp	r3, #0
  4044de:	d12b      	bne.n	404538 <triggerProtections+0x130>
  4044e0:	4b21      	ldr	r3, [pc, #132]	; (404568 <triggerProtections+0x160>)
  4044e2:	789b      	ldrb	r3, [r3, #2]
  4044e4:	2b00      	cmp	r3, #0
  4044e6:	d127      	bne.n	404538 <triggerProtections+0x130>
  4044e8:	4b1f      	ldr	r3, [pc, #124]	; (404568 <triggerProtections+0x160>)
  4044ea:	78db      	ldrb	r3, [r3, #3]
  4044ec:	bb23      	cbnz	r3, 404538 <triggerProtections+0x130>
  4044ee:	4b1e      	ldr	r3, [pc, #120]	; (404568 <triggerProtections+0x160>)
  4044f0:	791b      	ldrb	r3, [r3, #4]
  4044f2:	bb0b      	cbnz	r3, 404538 <triggerProtections+0x130>
  4044f4:	4b1c      	ldr	r3, [pc, #112]	; (404568 <triggerProtections+0x160>)
  4044f6:	795b      	ldrb	r3, [r3, #5]
  4044f8:	b9f3      	cbnz	r3, 404538 <triggerProtections+0x130>
  4044fa:	2201      	movs	r2, #1
  4044fc:	4b21      	ldr	r3, [pc, #132]	; (404584 <triggerProtections+0x17c>)
  4044fe:	701a      	strb	r2, [r3, #0]
		ignoreProtections = false;
  404500:	2200      	movs	r2, #0
  404502:	4b1b      	ldr	r3, [pc, #108]	; (404570 <triggerProtections+0x168>)
  404504:	701a      	strb	r2, [r3, #0]
		pio_clear(BOARD_LED_PORT,BOARD_LED);
  404506:	4d20      	ldr	r5, [pc, #128]	; (404588 <triggerProtections+0x180>)
  404508:	2108      	movs	r1, #8
  40450a:	4628      	mov	r0, r5
  40450c:	4c1f      	ldr	r4, [pc, #124]	; (40458c <triggerProtections+0x184>)
  40450e:	47a0      	blx	r4
		pio_clear(NBAT_EN_PORT,NBAT_EN);
  404510:	f44f 6100 	mov.w	r1, #2048	; 0x800
  404514:	4628      	mov	r0, r5
  404516:	47a0      	blx	r4
  404518:	bd38      	pop	{r3, r4, r5, pc}
	else if(ignoreProtections)
  40451a:	4b15      	ldr	r3, [pc, #84]	; (404570 <triggerProtections+0x168>)
  40451c:	781b      	ldrb	r3, [r3, #0]
  40451e:	2b00      	cmp	r3, #0
  404520:	d1cc      	bne.n	4044bc <triggerProtections+0xb4>
	if(cellImbalance())
  404522:	4b17      	ldr	r3, [pc, #92]	; (404580 <triggerProtections+0x178>)
  404524:	4798      	blx	r3
  404526:	2800      	cmp	r0, #0
  404528:	d0d2      	beq.n	4044d0 <triggerProtections+0xc8>
  40452a:	e7ce      	b.n	4044ca <triggerProtections+0xc2>
		protec();
  40452c:	4b18      	ldr	r3, [pc, #96]	; (404590 <triggerProtections+0x188>)
  40452e:	4798      	blx	r3
		protectionActive = true;
  404530:	2201      	movs	r2, #1
  404532:	4b18      	ldr	r3, [pc, #96]	; (404594 <triggerProtections+0x18c>)
  404534:	701a      	strb	r2, [r3, #0]
}
  404536:	bd38      	pop	{r3, r4, r5, pc}
	batteryStable = !(activeProtections[OVERTEMPIDX] || activeProtections[UNDERTEMPIDX] || activeProtections[OVERVOLTIDX] || activeProtections[UNDERVOLTIDX] || activeProtections[OVERCURRENTIDX] || activeProtections[CELLIMBALANCEIDX]);
  404538:	2200      	movs	r2, #0
  40453a:	4b12      	ldr	r3, [pc, #72]	; (404584 <triggerProtections+0x17c>)
  40453c:	701a      	strb	r2, [r3, #0]
	if(!batteryStable && !ignoreProtections && !protectionActive){
  40453e:	4b0c      	ldr	r3, [pc, #48]	; (404570 <triggerProtections+0x168>)
  404540:	781b      	ldrb	r3, [r3, #0]
  404542:	b91b      	cbnz	r3, 40454c <triggerProtections+0x144>
  404544:	4b13      	ldr	r3, [pc, #76]	; (404594 <triggerProtections+0x18c>)
  404546:	781b      	ldrb	r3, [r3, #0]
  404548:	2b00      	cmp	r3, #0
  40454a:	d0ef      	beq.n	40452c <triggerProtections+0x124>
  40454c:	bd38      	pop	{r3, r4, r5, pc}
	if(underTemp())
  40454e:	4b07      	ldr	r3, [pc, #28]	; (40456c <triggerProtections+0x164>)
  404550:	4798      	blx	r3
  404552:	2800      	cmp	r0, #0
  404554:	d198      	bne.n	404488 <triggerProtections+0x80>
	if(overVolt())
  404556:	4b07      	ldr	r3, [pc, #28]	; (404574 <triggerProtections+0x16c>)
  404558:	4798      	blx	r3
  40455a:	2800      	cmp	r0, #0
  40455c:	f43f af6f 	beq.w	40443e <triggerProtections+0x36>
  404560:	e76a      	b.n	404438 <triggerProtections+0x30>
  404562:	bf00      	nop
  404564:	00404125 	.word	0x00404125
  404568:	20003560 	.word	0x20003560
  40456c:	0040418d 	.word	0x0040418d
  404570:	20001788 	.word	0x20001788
  404574:	004041d1 	.word	0x004041d1
  404578:	00404239 	.word	0x00404239
  40457c:	004042d9 	.word	0x004042d9
  404580:	00404319 	.word	0x00404319
  404584:	20000170 	.word	0x20000170
  404588:	400e0e00 	.word	0x400e0e00
  40458c:	00403149 	.word	0x00403149
  404590:	0040439d 	.word	0x0040439d
  404594:	20001789 	.word	0x20001789

00404598 <clearProtections>:
void printInstructions(){
	char * instructions = "\n\rPlease Type\"s\" to get the current status of the battery\n\rAfter determining the best action type \"c\" to temporarily clear all protections\n\r[WARNING] when the protections are cleared, the BMS will ignore all protections till the battery is stable once again\n\r This is indicated by the red LED turning off.\n\r";
	printString(instructions);
}

void clearProtections(){
  404598:	b538      	push	{r3, r4, r5, lr}
	ignoreProtections = true;
  40459a:	2501      	movs	r5, #1
  40459c:	4b08      	ldr	r3, [pc, #32]	; (4045c0 <clearProtections+0x28>)
  40459e:	701d      	strb	r5, [r3, #0]
	pio_clear(NBAT_EN_PORT, NBAT_EN);
  4045a0:	4c08      	ldr	r4, [pc, #32]	; (4045c4 <clearProtections+0x2c>)
  4045a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4045a6:	4620      	mov	r0, r4
  4045a8:	4b07      	ldr	r3, [pc, #28]	; (4045c8 <clearProtections+0x30>)
  4045aa:	4798      	blx	r3
	tc_stop(TC0,BLINK_TC);
  4045ac:	4629      	mov	r1, r5
  4045ae:	4807      	ldr	r0, [pc, #28]	; (4045cc <clearProtections+0x34>)
  4045b0:	4b07      	ldr	r3, [pc, #28]	; (4045d0 <clearProtections+0x38>)
  4045b2:	4798      	blx	r3
	pio_set(BOARD_LED_PORT,BOARD_LED);
  4045b4:	2108      	movs	r1, #8
  4045b6:	4620      	mov	r0, r4
  4045b8:	4b06      	ldr	r3, [pc, #24]	; (4045d4 <clearProtections+0x3c>)
  4045ba:	4798      	blx	r3
  4045bc:	bd38      	pop	{r3, r4, r5, pc}
  4045be:	bf00      	nop
  4045c0:	20001788 	.word	0x20001788
  4045c4:	400e0e00 	.word	0x400e0e00
  4045c8:	00403149 	.word	0x00403149
  4045cc:	40010000 	.word	0x40010000
  4045d0:	0040108b 	.word	0x0040108b
  4045d4:	00403145 	.word	0x00403145

004045d8 <goToSleep>:
/****************************
*	Sleep
*****************************/

uint32_t flashPageBuffer[SIZE_OF_DATA_FLASH];
void goToSleep(){
  4045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//turn off everything
	pio_set(NBAT_EN_PORT,NBAT_EN);
  4045da:	4c5c      	ldr	r4, [pc, #368]	; (40474c <goToSleep+0x174>)
  4045dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4045e0:	4620      	mov	r0, r4
  4045e2:	4d5b      	ldr	r5, [pc, #364]	; (404750 <goToSleep+0x178>)
  4045e4:	47a8      	blx	r5
	pio_set(RS485_NRE_PORT,RS485_NRE);
  4045e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4045ea:	4620      	mov	r0, r4
  4045ec:	47a8      	blx	r5
	pio_clear(RS485_DE_PORT,RS485_DE);
  4045ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4045f2:	4620      	mov	r0, r4
  4045f4:	4d57      	ldr	r5, [pc, #348]	; (404754 <goToSleep+0x17c>)
  4045f6:	47a8      	blx	r5
	pio_clear(AFE_EN_PORT,AFE_EN);
  4045f8:	2180      	movs	r1, #128	; 0x80
  4045fa:	4620      	mov	r0, r4
  4045fc:	47a8      	blx	r5
	pio_clear(BOARD_LED_PORT,BOARD_LED);
  4045fe:	2108      	movs	r1, #8
  404600:	4620      	mov	r0, r4
  404602:	47a8      	blx	r5
	pio_clear(TEMP_SEL0_PORT,TEMP_SEL0);
  404604:	f44f 7180 	mov.w	r1, #256	; 0x100
  404608:	4620      	mov	r0, r4
  40460a:	47a8      	blx	r5
	pio_clear(TEMP_SEL1_PORT,TEMP_SEL1);
  40460c:	f44f 7100 	mov.w	r1, #512	; 0x200
  404610:	4620      	mov	r0, r4
  404612:	47a8      	blx	r5
	pio_clear(TEMP_SEL2_PORT,TEMP_SEL2);
  404614:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404618:	4620      	mov	r0, r4
  40461a:	47a8      	blx	r5
	pio_clear(CELL_SEL0_PORT,CELL_SEL0);
  40461c:	2110      	movs	r1, #16
  40461e:	4620      	mov	r0, r4
  404620:	47a8      	blx	r5
	pio_clear(CELL_SEL1_PORT,CELL_SEL1);
  404622:	2120      	movs	r1, #32
  404624:	4620      	mov	r0, r4
  404626:	47a8      	blx	r5
	pio_clear(CELL_SEL2_PORT,CELL_SEL2);
  404628:	2140      	movs	r1, #64	; 0x40
  40462a:	4620      	mov	r0, r4
  40462c:	47a8      	blx	r5
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40462e:	4b4a      	ldr	r3, [pc, #296]	; (404758 <goToSleep+0x180>)
  404630:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  404634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  404638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40463c:	f3bf 8f6f 	isb	sy
  404640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  404648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40464c:	f3bf 8f6f 	isb	sy
  404650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  404654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  404658:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40465c:	f3bf 8f6f 	isb	sy
  404660:	f44f 7280 	mov.w	r2, #256	; 0x100
  404664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  404668:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40466c:	f3bf 8f6f 	isb	sy
  404670:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  404678:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40467c:	f3bf 8f6f 	isb	sy
  404680:	4a36      	ldr	r2, [pc, #216]	; (40475c <goToSleep+0x184>)
  404682:	4937      	ldr	r1, [pc, #220]	; (404760 <goToSleep+0x188>)
  404684:	1d90      	adds	r0, r2, #6
	
	//Store to flash
	int buffIDX = 0;
	int i=0;
	for(int i=0; i < QTY_PROTECTIONS; i++){
		flashPageBuffer[i] = !activeProtections[i-buffIDX];
  404686:	f812 3b01 	ldrb.w	r3, [r2], #1
  40468a:	f083 0301 	eor.w	r3, r3, #1
  40468e:	f841 3b04 	str.w	r3, [r1], #4
	for(int i=0; i < QTY_PROTECTIONS; i++){
  404692:	4282      	cmp	r2, r0
  404694:	d1f7      	bne.n	404686 <goToSleep+0xae>
	}
	buffIDX = QTY_PROTECTIONS;
	
	flashPageBuffer[buffIDX++] = !batteryStable;
  404696:	4b32      	ldr	r3, [pc, #200]	; (404760 <goToSleep+0x188>)
  404698:	4a32      	ldr	r2, [pc, #200]	; (404764 <goToSleep+0x18c>)
  40469a:	7812      	ldrb	r2, [r2, #0]
  40469c:	f082 0201 	eor.w	r2, r2, #1
  4046a0:	619a      	str	r2, [r3, #24]
	
	flashPageBuffer[buffIDX++] = !ignoreProtections;
  4046a2:	4a31      	ldr	r2, [pc, #196]	; (404768 <goToSleep+0x190>)
  4046a4:	7812      	ldrb	r2, [r2, #0]
  4046a6:	f082 0201 	eor.w	r2, r2, #1
  4046aa:	61da      	str	r2, [r3, #28]
	
	flashPageBuffer[buffIDX++] = !protectionActive;
  4046ac:	4a2f      	ldr	r2, [pc, #188]	; (40476c <goToSleep+0x194>)
  4046ae:	7812      	ldrb	r2, [r2, #0]
  4046b0:	f082 0201 	eor.w	r2, r2, #1
  4046b4:	621a      	str	r2, [r3, #32]
  4046b6:	4d2e      	ldr	r5, [pc, #184]	; (404770 <goToSleep+0x198>)
  4046b8:	1f2a      	subs	r2, r5, #4
  4046ba:	3324      	adds	r3, #36	; 0x24
  4046bc:	482d      	ldr	r0, [pc, #180]	; (404774 <goToSleep+0x19c>)
  4046be:	492e      	ldr	r1, [pc, #184]	; (404778 <goToSleep+0x1a0>)
  4046c0:	353c      	adds	r5, #60	; 0x3c
	
	for (int i=0;i<QTY_ANALOG_SOURCES;i++){
		flashPageBuffer[i+buffIDX] = convertToInt32(MovingAverageADCData[i]);
  4046c2:	f852 4f04 	ldr.w	r4, [r2, #4]!
  4046c6:	f843 4b04 	str.w	r4, [r3], #4
		flashPageBuffer[i+buffIDX + QTY_ANALOG_SOURCES] = convertToInt32(minimumValues[i]);
  4046ca:	f850 4f04 	ldr.w	r4, [r0, #4]!
  4046ce:	63dc      	str	r4, [r3, #60]	; 0x3c
		flashPageBuffer[i+buffIDX + (QTY_ANALOG_SOURCES * 2)] = convertToInt32(maximumValues[i]);
  4046d0:	f851 4f04 	ldr.w	r4, [r1, #4]!
  4046d4:	67dc      	str	r4, [r3, #124]	; 0x7c
	for (int i=0;i<QTY_ANALOG_SOURCES;i++){
  4046d6:	42aa      	cmp	r2, r5
  4046d8:	d1f3      	bne.n	4046c2 <goToSleep+0xea>
	}
	
	uint32_t flashOK = flash_unlock(FLASH_DATA_PAGE_ADDRESS, SIZE_OF_DATA_FLASH * sizeof(uint32_t),0,0);
  4046da:	2300      	movs	r3, #0
  4046dc:	461a      	mov	r2, r3
  4046de:	2142      	movs	r1, #66	; 0x42
  4046e0:	4826      	ldr	r0, [pc, #152]	; (40477c <goToSleep+0x1a4>)
  4046e2:	4c27      	ldr	r4, [pc, #156]	; (404780 <goToSleep+0x1a8>)
  4046e4:	47a0      	blx	r4
	if(flashOK != FLASH_RC_OK) return;
  4046e6:	b100      	cbz	r0, 4046ea <goToSleep+0x112>
  4046e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flashOK = flash_erase_sector(FLASH_DATA_PAGE_ADDRESS);
  4046ea:	4824      	ldr	r0, [pc, #144]	; (40477c <goToSleep+0x1a4>)
  4046ec:	4b25      	ldr	r3, [pc, #148]	; (404784 <goToSleep+0x1ac>)
  4046ee:	4798      	blx	r3
	if(flashOK != FLASH_RC_OK) return;
  4046f0:	2800      	cmp	r0, #0
  4046f2:	d1f9      	bne.n	4046e8 <goToSleep+0x110>
  4046f4:	4c21      	ldr	r4, [pc, #132]	; (40477c <goToSleep+0x1a4>)
	
	for(int i=0; i< 4;i++){
		uint32_t addr = FLASH_DATA_PAGE_ADDRESS + (i*0x40);
		flashOK = flash_write(addr, (&flashPageBuffer[i*16]), 16 * sizeof(uint32_t), 0);
  4046f6:	4e1a      	ldr	r6, [pc, #104]	; (404760 <goToSleep+0x188>)
  4046f8:	4d23      	ldr	r5, [pc, #140]	; (404788 <goToSleep+0x1b0>)
	for(int i=0; i< 4;i++){
  4046fa:	4f24      	ldr	r7, [pc, #144]	; (40478c <goToSleep+0x1b4>)
		flashOK = flash_write(addr, (&flashPageBuffer[i*16]), 16 * sizeof(uint32_t), 0);
  4046fc:	f5a4 0187 	sub.w	r1, r4, #4423680	; 0x438000
  404700:	f5a1 41e0 	sub.w	r1, r1, #28672	; 0x7000
  404704:	2300      	movs	r3, #0
  404706:	2240      	movs	r2, #64	; 0x40
  404708:	4431      	add	r1, r6
  40470a:	4620      	mov	r0, r4
  40470c:	47a8      	blx	r5
		if(flashOK != FLASH_RC_OK) return;
  40470e:	2800      	cmp	r0, #0
  404710:	d1ea      	bne.n	4046e8 <goToSleep+0x110>
  404712:	3440      	adds	r4, #64	; 0x40
	for(int i=0; i< 4;i++){
  404714:	42bc      	cmp	r4, r7
  404716:	d1f1      	bne.n	4046fc <goToSleep+0x124>
	}
	
	//reset RTT for periodic wakeups
	RTT->RTT_MR |= RTT_MR_RTTRST;
  404718:	4a1d      	ldr	r2, [pc, #116]	; (404790 <goToSleep+0x1b8>)
  40471a:	6813      	ldr	r3, [r2, #0]
  40471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  404720:	6013      	str	r3, [r2, #0]
	
	//enter sleep mode
	pmc_enable_periph_clk(ID_SUPC);
  404722:	4b1c      	ldr	r3, [pc, #112]	; (404794 <goToSleep+0x1bc>)
  404724:	4798      	blx	r3
	supc_set_wakeup_mode(SUPC,SUPC_WUMR_RTTEN_ENABLE | SUPC_WUMR_WKUPDBC_512_SCLK);
  404726:	4c1c      	ldr	r4, [pc, #112]	; (404798 <goToSleep+0x1c0>)
  404728:	f243 0104 	movw	r1, #12292	; 0x3004
  40472c:	4620      	mov	r0, r4
  40472e:	4b1b      	ldr	r3, [pc, #108]	; (40479c <goToSleep+0x1c4>)
  404730:	4798      	blx	r3
	supc_set_wakeup_inputs(SUPC,SUPC_WUIR_WKUPEN0 | SUPC_WUIR_WKUPEN8 , SUPC_WUIR_WKUPT0 | SUPC_WUIR_WKUPT8);
  404732:	4a1b      	ldr	r2, [pc, #108]	; (4047a0 <goToSleep+0x1c8>)
  404734:	f240 1101 	movw	r1, #257	; 0x101
  404738:	4620      	mov	r0, r4
  40473a:	4b1a      	ldr	r3, [pc, #104]	; (4047a4 <goToSleep+0x1cc>)
  40473c:	4798      	blx	r3
	pmc_switch_mck_to_sclk(PMC_MCKR_PRES_CLK_1);
  40473e:	2000      	movs	r0, #0
  404740:	4b19      	ldr	r3, [pc, #100]	; (4047a8 <goToSleep+0x1d0>)
  404742:	4798      	blx	r3
	supc_enable_backup_mode(SUPC);
  404744:	4620      	mov	r0, r4
  404746:	4b19      	ldr	r3, [pc, #100]	; (4047ac <goToSleep+0x1d4>)
  404748:	4798      	blx	r3
  40474a:	e7cd      	b.n	4046e8 <goToSleep+0x110>
  40474c:	400e0e00 	.word	0x400e0e00
  404750:	00403145 	.word	0x00403145
  404754:	00403149 	.word	0x00403149
  404758:	e000e100 	.word	0xe000e100
  40475c:	20003560 	.word	0x20003560
  404760:	2000243c 	.word	0x2000243c
  404764:	20000170 	.word	0x20000170
  404768:	20001788 	.word	0x20001788
  40476c:	20001789 	.word	0x20001789
  404770:	20000130 	.word	0x20000130
  404774:	20003564 	.word	0x20003564
  404778:	200023f8 	.word	0x200023f8
  40477c:	0043f000 	.word	0x0043f000
  404780:	00402875 	.word	0x00402875
  404784:	00402785 	.word	0x00402785
  404788:	004027a9 	.word	0x004027a9
  40478c:	0043f100 	.word	0x0043f100
  404790:	400e1430 	.word	0x400e1430
  404794:	004033d9 	.word	0x004033d9
  404798:	400e1410 	.word	0x400e1410
  40479c:	00401061 	.word	0x00401061
  4047a0:	01010000 	.word	0x01010000
  4047a4:	00401065 	.word	0x00401065
  4047a8:	0040327d 	.word	0x0040327d
  4047ac:	0040104d 	.word	0x0040104d

004047b0 <pinWrite>:


/****************************
*	MISC
*****************************/
void pinWrite(Pio* port, const uint32_t pin_mask, bool logic){
  4047b0:	b508      	push	{r3, lr}
	if(logic) pio_set(port,pin_mask);
  4047b2:	b912      	cbnz	r2, 4047ba <pinWrite+0xa>
	else pio_clear(port,pin_mask);
  4047b4:	4b02      	ldr	r3, [pc, #8]	; (4047c0 <pinWrite+0x10>)
  4047b6:	4798      	blx	r3
  4047b8:	bd08      	pop	{r3, pc}
	if(logic) pio_set(port,pin_mask);
  4047ba:	4b02      	ldr	r3, [pc, #8]	; (4047c4 <pinWrite+0x14>)
  4047bc:	4798      	blx	r3
  4047be:	bd08      	pop	{r3, pc}
  4047c0:	00403149 	.word	0x00403149
  4047c4:	00403145 	.word	0x00403145

004047c8 <ADC_Handler>:
	uint32_t ADCState = ADC->ADC_ISR;
  4047c8:	4b4e      	ldr	r3, [pc, #312]	; (404904 <ADC_Handler+0x13c>)
  4047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if((ADCState & ADC_ISR_DRDY) == ADC_ISR_DRDY){
  4047cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4047d0:	f000 8097 	beq.w	404902 <ADC_Handler+0x13a>
		int lastConvertedRaw = ADC->ADC_LCDR;
  4047d4:	4b4b      	ldr	r3, [pc, #300]	; (404904 <ADC_Handler+0x13c>)
  4047d6:	6a1b      	ldr	r3, [r3, #32]
		int lastConvertedChannel = (lastConvertedRaw & ADC_LCDR_CHNB_Msk) >> ADC_LCDR_CHNB_Pos;
  4047d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
		int lastConvertedData = lastConvertedRaw & ADC_LCDR_LDATA_Msk;
  4047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
		if(lastConvertedData == 4095) return;											//throw out bad data
  4047e0:	f640 71ff 	movw	r1, #4095	; 0xfff
  4047e4:	428b      	cmp	r3, r1
  4047e6:	f000 808c 	beq.w	404902 <ADC_Handler+0x13a>
void ADC_Handler(){
  4047ea:	b570      	push	{r4, r5, r6, lr}
		switch(lastConvertedChannel){
  4047ec:	2a05      	cmp	r2, #5
  4047ee:	f200 8087 	bhi.w	404900 <ADC_Handler+0x138>
  4047f2:	e8df f002 	tbb	[pc, r2]
  4047f6:	2e03      	.short	0x2e03
  4047f8:	7c724238 	.word	0x7c724238
				rawADCData[CELLVIDXS + currentExternCell] = lastConvertedData;
  4047fc:	4a42      	ldr	r2, [pc, #264]	; (404908 <ADC_Handler+0x140>)
  4047fe:	6812      	ldr	r2, [r2, #0]
  404800:	4942      	ldr	r1, [pc, #264]	; (40490c <ADC_Handler+0x144>)
  404802:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
				needsProcessing[CELLVIDXS + currentExternCell] = true;
  404806:	2101      	movs	r1, #1
  404808:	4b41      	ldr	r3, [pc, #260]	; (404910 <ADC_Handler+0x148>)
  40480a:	5499      	strb	r1, [r3, r2]
				if(currentExternCell == 5) currentExternCell = 0;
  40480c:	2a05      	cmp	r2, #5
  40480e:	bf0c      	ite	eq
  404810:	2200      	moveq	r2, #0
				else currentExternCell++;
  404812:	3201      	addne	r2, #1
  404814:	4b3c      	ldr	r3, [pc, #240]	; (404908 <ADC_Handler+0x140>)
  404816:	601a      	str	r2, [r3, #0]
				pinWrite(CELL_SEL0_PORT,CELL_SEL0,(bool)(currentExternCell&1));
  404818:	4e3b      	ldr	r6, [pc, #236]	; (404908 <ADC_Handler+0x140>)
  40481a:	6832      	ldr	r2, [r6, #0]
  40481c:	4d3d      	ldr	r5, [pc, #244]	; (404914 <ADC_Handler+0x14c>)
  40481e:	f002 0201 	and.w	r2, r2, #1
  404822:	2110      	movs	r1, #16
  404824:	4628      	mov	r0, r5
  404826:	4c3c      	ldr	r4, [pc, #240]	; (404918 <ADC_Handler+0x150>)
  404828:	47a0      	blx	r4
				pinWrite(CELL_SEL1_PORT,CELL_SEL1,(bool)(currentExternCell&2));
  40482a:	6832      	ldr	r2, [r6, #0]
  40482c:	f3c2 0240 	ubfx	r2, r2, #1, #1
  404830:	2120      	movs	r1, #32
  404832:	4628      	mov	r0, r5
  404834:	47a0      	blx	r4
				pinWrite(CELL_SEL2_PORT,CELL_SEL2,(bool)(currentExternCell&4));
  404836:	6832      	ldr	r2, [r6, #0]
  404838:	f3c2 0280 	ubfx	r2, r2, #2, #1
  40483c:	2140      	movs	r1, #64	; 0x40
  40483e:	4628      	mov	r0, r5
  404840:	47a0      	blx	r4
				adc_disable_channel(ADC,CELLV_CHANNEL);
  404842:	2100      	movs	r1, #0
  404844:	482f      	ldr	r0, [pc, #188]	; (404904 <ADC_Handler+0x13c>)
  404846:	4b35      	ldr	r3, [pc, #212]	; (40491c <ADC_Handler+0x154>)
  404848:	4798      	blx	r3
				CellVcounter = 0;
  40484a:	2200      	movs	r2, #0
  40484c:	4b34      	ldr	r3, [pc, #208]	; (404920 <ADC_Handler+0x158>)
  40484e:	601a      	str	r2, [r3, #0]
				break;
  404850:	bd70      	pop	{r4, r5, r6, pc}
				rawADCData[CURRENTIDX] = adc_get_channel_value(ADC,CURRENT_CHANNEL);
  404852:	2101      	movs	r1, #1
  404854:	482b      	ldr	r0, [pc, #172]	; (404904 <ADC_Handler+0x13c>)
  404856:	4b33      	ldr	r3, [pc, #204]	; (404924 <ADC_Handler+0x15c>)
  404858:	4798      	blx	r3
  40485a:	4b2c      	ldr	r3, [pc, #176]	; (40490c <ADC_Handler+0x144>)
  40485c:	6318      	str	r0, [r3, #48]	; 0x30
				needsProcessing[CURRENTIDX] = true;
  40485e:	2201      	movs	r2, #1
  404860:	4b2b      	ldr	r3, [pc, #172]	; (404910 <ADC_Handler+0x148>)
  404862:	731a      	strb	r2, [r3, #12]
				break;
  404864:	bd70      	pop	{r4, r5, r6, pc}
				rawADCData[STACKVOLTIDX] = adc_get_channel_value(ADC,STACK_CHANNEL);
  404866:	2102      	movs	r1, #2
  404868:	4826      	ldr	r0, [pc, #152]	; (404904 <ADC_Handler+0x13c>)
  40486a:	4b2e      	ldr	r3, [pc, #184]	; (404924 <ADC_Handler+0x15c>)
  40486c:	4798      	blx	r3
  40486e:	4b27      	ldr	r3, [pc, #156]	; (40490c <ADC_Handler+0x144>)
  404870:	63d8      	str	r0, [r3, #60]	; 0x3c
				needsProcessing[STACKVOLTIDX] = true;
  404872:	2201      	movs	r2, #1
  404874:	4b26      	ldr	r3, [pc, #152]	; (404910 <ADC_Handler+0x148>)
  404876:	73da      	strb	r2, [r3, #15]
				break;
  404878:	bd70      	pop	{r4, r5, r6, pc}
				rawADCData[TEMPIDXS + currentExternTempSensor] = adc_get_channel_value(ADC,EXTERN_TEMP_CHANNEL);
  40487a:	4d2b      	ldr	r5, [pc, #172]	; (404928 <ADC_Handler+0x160>)
  40487c:	682c      	ldr	r4, [r5, #0]
  40487e:	3406      	adds	r4, #6
  404880:	2103      	movs	r1, #3
  404882:	4820      	ldr	r0, [pc, #128]	; (404904 <ADC_Handler+0x13c>)
  404884:	4b27      	ldr	r3, [pc, #156]	; (404924 <ADC_Handler+0x15c>)
  404886:	4798      	blx	r3
  404888:	4b20      	ldr	r3, [pc, #128]	; (40490c <ADC_Handler+0x144>)
  40488a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
				needsProcessing[TEMPIDXS + currentExternTempSensor] = true;
  40488e:	682b      	ldr	r3, [r5, #0]
  404890:	4a1f      	ldr	r2, [pc, #124]	; (404910 <ADC_Handler+0x148>)
  404892:	441a      	add	r2, r3
  404894:	2101      	movs	r1, #1
  404896:	7191      	strb	r1, [r2, #6]
				if(currentExternTempSensor == 5) currentExternTempSensor = 0;
  404898:	2b05      	cmp	r3, #5
  40489a:	d01b      	beq.n	4048d4 <ADC_Handler+0x10c>
				else currentExternTempSensor++;
  40489c:	3301      	adds	r3, #1
  40489e:	4a22      	ldr	r2, [pc, #136]	; (404928 <ADC_Handler+0x160>)
  4048a0:	6013      	str	r3, [r2, #0]
				pinWrite(TEMP_SEL0_PORT,TEMP_SEL0,(bool)(currentExternTempSensor&1));
  4048a2:	4e21      	ldr	r6, [pc, #132]	; (404928 <ADC_Handler+0x160>)
  4048a4:	6832      	ldr	r2, [r6, #0]
  4048a6:	4d1b      	ldr	r5, [pc, #108]	; (404914 <ADC_Handler+0x14c>)
  4048a8:	f002 0201 	and.w	r2, r2, #1
  4048ac:	f44f 7180 	mov.w	r1, #256	; 0x100
  4048b0:	4628      	mov	r0, r5
  4048b2:	4c19      	ldr	r4, [pc, #100]	; (404918 <ADC_Handler+0x150>)
  4048b4:	47a0      	blx	r4
				pinWrite(TEMP_SEL1_PORT,TEMP_SEL1,(bool)(currentExternTempSensor&2));
  4048b6:	6832      	ldr	r2, [r6, #0]
  4048b8:	f3c2 0240 	ubfx	r2, r2, #1, #1
  4048bc:	f44f 7100 	mov.w	r1, #512	; 0x200
  4048c0:	4628      	mov	r0, r5
  4048c2:	47a0      	blx	r4
				pinWrite(TEMP_SEL2_PORT,TEMP_SEL2,(bool)(currentExternTempSensor&4));
  4048c4:	6832      	ldr	r2, [r6, #0]
  4048c6:	f3c2 0280 	ubfx	r2, r2, #2, #1
  4048ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4048ce:	4628      	mov	r0, r5
  4048d0:	47a0      	blx	r4
				break;
  4048d2:	bd70      	pop	{r4, r5, r6, pc}
				if(currentExternTempSensor == 5) currentExternTempSensor = 0;
  4048d4:	2200      	movs	r2, #0
  4048d6:	602a      	str	r2, [r5, #0]
  4048d8:	e7e3      	b.n	4048a2 <ADC_Handler+0xda>
				rawADCData[FETTEMPIDX] = adc_get_channel_value(ADC,FET_TEMP_CHANNEL);
  4048da:	2104      	movs	r1, #4
  4048dc:	4809      	ldr	r0, [pc, #36]	; (404904 <ADC_Handler+0x13c>)
  4048de:	4b11      	ldr	r3, [pc, #68]	; (404924 <ADC_Handler+0x15c>)
  4048e0:	4798      	blx	r3
  4048e2:	4b0a      	ldr	r3, [pc, #40]	; (40490c <ADC_Handler+0x144>)
  4048e4:	6398      	str	r0, [r3, #56]	; 0x38
				needsProcessing[FETTEMPIDX] = true;
  4048e6:	2201      	movs	r2, #1
  4048e8:	4b09      	ldr	r3, [pc, #36]	; (404910 <ADC_Handler+0x148>)
  4048ea:	739a      	strb	r2, [r3, #14]
				break;
  4048ec:	bd70      	pop	{r4, r5, r6, pc}
				rawADCData[SHUNTTEMPIDX] = adc_get_channel_value(ADC,SHUNT_TEMP_CHANNEL);
  4048ee:	2105      	movs	r1, #5
  4048f0:	4804      	ldr	r0, [pc, #16]	; (404904 <ADC_Handler+0x13c>)
  4048f2:	4b0c      	ldr	r3, [pc, #48]	; (404924 <ADC_Handler+0x15c>)
  4048f4:	4798      	blx	r3
  4048f6:	4b05      	ldr	r3, [pc, #20]	; (40490c <ADC_Handler+0x144>)
  4048f8:	6358      	str	r0, [r3, #52]	; 0x34
				needsProcessing[SHUNTTEMPIDX] = true;
  4048fa:	2201      	movs	r2, #1
  4048fc:	4b04      	ldr	r3, [pc, #16]	; (404910 <ADC_Handler+0x148>)
  4048fe:	735a      	strb	r2, [r3, #13]
  404900:	bd70      	pop	{r4, r5, r6, pc}
  404902:	4770      	bx	lr
  404904:	40038000 	.word	0x40038000
  404908:	20001780 	.word	0x20001780
  40490c:	200035a8 	.word	0x200035a8
  404910:	200035e8 	.word	0x200035e8
  404914:	400e0e00 	.word	0x400e0e00
  404918:	004047b1 	.word	0x004047b1
  40491c:	00400eb7 	.word	0x00400eb7
  404920:	20001778 	.word	0x20001778
  404924:	00400ec1 	.word	0x00400ec1
  404928:	20001784 	.word	0x20001784

0040492c <TC0_Handler>:
}


void TC0_Handler(){
  40492c:	b508      	push	{r3, lr}
	if( (tc_get_status(TC0,ADC_TC) & TC_SR_CPCS) == TC_SR_CPCS)
  40492e:	2100      	movs	r1, #0
  404930:	480c      	ldr	r0, [pc, #48]	; (404964 <TC0_Handler+0x38>)
  404932:	4b0d      	ldr	r3, [pc, #52]	; (404968 <TC0_Handler+0x3c>)
  404934:	4798      	blx	r3
  404936:	f010 0f10 	tst.w	r0, #16
  40493a:	d003      	beq.n	404944 <TC0_Handler+0x18>
		CellVcounter++;
  40493c:	4a0b      	ldr	r2, [pc, #44]	; (40496c <TC0_Handler+0x40>)
  40493e:	6813      	ldr	r3, [r2, #0]
  404940:	3301      	adds	r3, #1
  404942:	6013      	str	r3, [r2, #0]
		if(CellVcounter > 100){
  404944:	4b09      	ldr	r3, [pc, #36]	; (40496c <TC0_Handler+0x40>)
  404946:	681b      	ldr	r3, [r3, #0]
  404948:	2b64      	cmp	r3, #100	; 0x64
  40494a:	dc03      	bgt.n	404954 <TC0_Handler+0x28>
			adc_enable_channel(ADC,CELLV_CHANNEL);
			CellVcounter = 0;
		}
		adc_start(ADC);
  40494c:	4808      	ldr	r0, [pc, #32]	; (404970 <TC0_Handler+0x44>)
  40494e:	4b09      	ldr	r3, [pc, #36]	; (404974 <TC0_Handler+0x48>)
  404950:	4798      	blx	r3
  404952:	bd08      	pop	{r3, pc}
			adc_enable_channel(ADC,CELLV_CHANNEL);
  404954:	2100      	movs	r1, #0
  404956:	4806      	ldr	r0, [pc, #24]	; (404970 <TC0_Handler+0x44>)
  404958:	4b07      	ldr	r3, [pc, #28]	; (404978 <TC0_Handler+0x4c>)
  40495a:	4798      	blx	r3
			CellVcounter = 0;
  40495c:	2200      	movs	r2, #0
  40495e:	4b03      	ldr	r3, [pc, #12]	; (40496c <TC0_Handler+0x40>)
  404960:	601a      	str	r2, [r3, #0]
  404962:	e7f3      	b.n	40494c <TC0_Handler+0x20>
  404964:	40010000 	.word	0x40010000
  404968:	004010a3 	.word	0x004010a3
  40496c:	20001778 	.word	0x20001778
  404970:	40038000 	.word	0x40038000
  404974:	00400ea7 	.word	0x00400ea7
  404978:	00400ead 	.word	0x00400ead

0040497c <TC1_Handler>:
}

void TC1_Handler(){
  40497c:	b508      	push	{r3, lr}
	if( (tc_get_status(TC0,BLINK_TC) & TC_SR_CPCS) == TC_SR_CPCS)
  40497e:	2101      	movs	r1, #1
  404980:	4805      	ldr	r0, [pc, #20]	; (404998 <TC1_Handler+0x1c>)
  404982:	4b06      	ldr	r3, [pc, #24]	; (40499c <TC1_Handler+0x20>)
  404984:	4798      	blx	r3
  404986:	f010 0f10 	tst.w	r0, #16
  40498a:	d100      	bne.n	40498e <TC1_Handler+0x12>
  40498c:	bd08      	pop	{r3, pc}
		pio_toggle_pin_group(BOARD_LED_PORT,BOARD_LED);
  40498e:	2108      	movs	r1, #8
  404990:	4803      	ldr	r0, [pc, #12]	; (4049a0 <TC1_Handler+0x24>)
  404992:	4b04      	ldr	r3, [pc, #16]	; (4049a4 <TC1_Handler+0x28>)
  404994:	4798      	blx	r3
}
  404996:	e7f9      	b.n	40498c <TC1_Handler+0x10>
  404998:	40010000 	.word	0x40010000
  40499c:	004010a3 	.word	0x004010a3
  4049a0:	400e0e00 	.word	0x400e0e00
  4049a4:	00403255 	.word	0x00403255

004049a8 <TC2_Handler>:

void TC2_Handler(){
  4049a8:	b508      	push	{r3, lr}
	if( (tc_get_status(TC0,WAKEUP_TC) & TC_SR_CPCS) == TC_SR_CPCS){
  4049aa:	2102      	movs	r1, #2
  4049ac:	4806      	ldr	r0, [pc, #24]	; (4049c8 <TC2_Handler+0x20>)
  4049ae:	4b07      	ldr	r3, [pc, #28]	; (4049cc <TC2_Handler+0x24>)
  4049b0:	4798      	blx	r3
  4049b2:	f010 0f10 	tst.w	r0, #16
  4049b6:	d100      	bne.n	4049ba <TC2_Handler+0x12>
  4049b8:	bd08      	pop	{r3, pc}
		goToSleep();
  4049ba:	4b05      	ldr	r3, [pc, #20]	; (4049d0 <TC2_Handler+0x28>)
  4049bc:	4798      	blx	r3
		pio_set(BOARD_LED_PORT,BOARD_LED);
  4049be:	2108      	movs	r1, #8
  4049c0:	4804      	ldr	r0, [pc, #16]	; (4049d4 <TC2_Handler+0x2c>)
  4049c2:	4b05      	ldr	r3, [pc, #20]	; (4049d8 <TC2_Handler+0x30>)
  4049c4:	4798      	blx	r3
	}
}
  4049c6:	e7f7      	b.n	4049b8 <TC2_Handler+0x10>
  4049c8:	40010000 	.word	0x40010000
  4049cc:	004010a3 	.word	0x004010a3
  4049d0:	004045d9 	.word	0x004045d9
  4049d4:	400e0e00 	.word	0x400e0e00
  4049d8:	00403145 	.word	0x00403145

004049dc <RTT_Handler>:


void RTT_Handler(){
  4049dc:	b508      	push	{r3, lr}
	if((rtt_get_status(RTT) & RTT_SR_ALMS) == RTT_SR_ALMS){
  4049de:	4806      	ldr	r0, [pc, #24]	; (4049f8 <RTT_Handler+0x1c>)
  4049e0:	4b06      	ldr	r3, [pc, #24]	; (4049fc <RTT_Handler+0x20>)
  4049e2:	4798      	blx	r3
  4049e4:	f010 0f01 	tst.w	r0, #1
  4049e8:	d004      	beq.n	4049f4 <RTT_Handler+0x18>
		RTT->RTT_MR |= RTT_MR_RTTRST;
  4049ea:	4a03      	ldr	r2, [pc, #12]	; (4049f8 <RTT_Handler+0x1c>)
  4049ec:	6813      	ldr	r3, [r2, #0]
  4049ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4049f2:	6013      	str	r3, [r2, #0]
  4049f4:	bd08      	pop	{r3, pc}
  4049f6:	bf00      	nop
  4049f8:	400e1430 	.word	0x400e1430
  4049fc:	00401005 	.word	0x00401005

00404a00 <printString>:
	}
}

void printString(char* str){
  404a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404a04:	4681      	mov	r9, r0
  404a06:	1e46      	subs	r6, r0, #1
	for(int i=0;i<strlen(str);i++){
  404a08:	2500      	movs	r5, #0
  404a0a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 404a38 <printString+0x38>
		while(!udi_cdc_is_tx_ready()){}					//this is quick and easy but can be blocking for very long messages. Normally OK.
  404a0e:	4c08      	ldr	r4, [pc, #32]	; (404a30 <printString+0x30>)
		udi_cdc_putc(str[i]);
  404a10:	4f08      	ldr	r7, [pc, #32]	; (404a34 <printString+0x34>)
	for(int i=0;i<strlen(str);i++){
  404a12:	e006      	b.n	404a22 <printString+0x22>
		while(!udi_cdc_is_tx_ready()){}					//this is quick and easy but can be blocking for very long messages. Normally OK.
  404a14:	47a0      	blx	r4
  404a16:	2800      	cmp	r0, #0
  404a18:	d0fc      	beq.n	404a14 <printString+0x14>
		udi_cdc_putc(str[i]);
  404a1a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
  404a1e:	47b8      	blx	r7
	for(int i=0;i<strlen(str);i++){
  404a20:	3501      	adds	r5, #1
  404a22:	4648      	mov	r0, r9
  404a24:	47c0      	blx	r8
  404a26:	42a8      	cmp	r0, r5
  404a28:	d8f4      	bhi.n	404a14 <printString+0x14>
	}
}
  404a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404a2e:	bf00      	nop
  404a30:	0040074d 	.word	0x0040074d
  404a34:	004007f9 	.word	0x004007f9
  404a38:	00406601 	.word	0x00406601

00404a3c <printStatus>:
void printStatus(){
  404a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404a40:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
	char str[256] = "\n\r\n\rCurrent Active Protections:\n\r";
  404a44:	f8df 821c 	ldr.w	r8, [pc, #540]	; 404c64 <printStatus+0x228>
  404a48:	ac46      	add	r4, sp, #280	; 0x118
  404a4a:	4645      	mov	r5, r8
  404a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  404a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  404a54:	682b      	ldr	r3, [r5, #0]
  404a56:	8023      	strh	r3, [r4, #0]
  404a58:	22de      	movs	r2, #222	; 0xde
  404a5a:	2100      	movs	r1, #0
  404a5c:	f50d 709d 	add.w	r0, sp, #314	; 0x13a
  404a60:	4f6a      	ldr	r7, [pc, #424]	; (404c0c <printStatus+0x1d0>)
  404a62:	47b8      	blx	r7
	printString(str);
  404a64:	a846      	add	r0, sp, #280	; 0x118
  404a66:	4c6a      	ldr	r4, [pc, #424]	; (404c10 <printStatus+0x1d4>)
  404a68:	47a0      	blx	r4
	sprintf(str,"Over Temperature:	%i\n\r", (int)(activeProtections[OVERTEMPIDX]));
  404a6a:	4e6a      	ldr	r6, [pc, #424]	; (404c14 <printStatus+0x1d8>)
  404a6c:	7832      	ldrb	r2, [r6, #0]
  404a6e:	496a      	ldr	r1, [pc, #424]	; (404c18 <printStatus+0x1dc>)
  404a70:	a846      	add	r0, sp, #280	; 0x118
  404a72:	4d6a      	ldr	r5, [pc, #424]	; (404c1c <printStatus+0x1e0>)
  404a74:	47a8      	blx	r5
	printString(str);
  404a76:	a846      	add	r0, sp, #280	; 0x118
  404a78:	47a0      	blx	r4
	sprintf(str,"Under Temperature:	%i\n\r", (int)(activeProtections[UNDERTEMPIDX]));
  404a7a:	7872      	ldrb	r2, [r6, #1]
  404a7c:	4968      	ldr	r1, [pc, #416]	; (404c20 <printStatus+0x1e4>)
  404a7e:	a846      	add	r0, sp, #280	; 0x118
  404a80:	47a8      	blx	r5
	printString(str);
  404a82:	a846      	add	r0, sp, #280	; 0x118
  404a84:	47a0      	blx	r4
	sprintf(str, "Over Voltage:		%i\n\r", (int)(activeProtections[OVERVOLTIDX]));
  404a86:	78b2      	ldrb	r2, [r6, #2]
  404a88:	4966      	ldr	r1, [pc, #408]	; (404c24 <printStatus+0x1e8>)
  404a8a:	a846      	add	r0, sp, #280	; 0x118
  404a8c:	47a8      	blx	r5
	printString(str);
  404a8e:	a846      	add	r0, sp, #280	; 0x118
  404a90:	47a0      	blx	r4
	sprintf(str, "Under Voltage:		%i\n\r", (int)(activeProtections[UNDERVOLTIDX]));
  404a92:	78f2      	ldrb	r2, [r6, #3]
  404a94:	4964      	ldr	r1, [pc, #400]	; (404c28 <printStatus+0x1ec>)
  404a96:	a846      	add	r0, sp, #280	; 0x118
  404a98:	47a8      	blx	r5
	printString(str);
  404a9a:	a846      	add	r0, sp, #280	; 0x118
  404a9c:	47a0      	blx	r4
	sprintf(str, "Over Current:		%i\n\r", (int)(activeProtections[OVERCURRENTIDX]));
  404a9e:	7932      	ldrb	r2, [r6, #4]
  404aa0:	4962      	ldr	r1, [pc, #392]	; (404c2c <printStatus+0x1f0>)
  404aa2:	a846      	add	r0, sp, #280	; 0x118
  404aa4:	47a8      	blx	r5
	printString(str);
  404aa6:	a846      	add	r0, sp, #280	; 0x118
  404aa8:	47a0      	blx	r4
	sprintf(str, "Cell Imbalance:		%i\n\r", (int)(activeProtections[CELLIMBALANCEIDX]));
  404aaa:	7972      	ldrb	r2, [r6, #5]
  404aac:	4960      	ldr	r1, [pc, #384]	; (404c30 <printStatus+0x1f4>)
  404aae:	a846      	add	r0, sp, #280	; 0x118
  404ab0:	47a8      	blx	r5
	printString(str);
  404ab2:	a846      	add	r0, sp, #280	; 0x118
  404ab4:	47a0      	blx	r4
	char strink[256] = "\n\rName, Current Value, Smallest lifetime value, largest lifetime value\n\r";
  404ab6:	2249      	movs	r2, #73	; 0x49
  404ab8:	f508 7180 	add.w	r1, r8, #256	; 0x100
  404abc:	a806      	add	r0, sp, #24
  404abe:	4b5d      	ldr	r3, [pc, #372]	; (404c34 <printStatus+0x1f8>)
  404ac0:	4798      	blx	r3
  404ac2:	22b7      	movs	r2, #183	; 0xb7
  404ac4:	2100      	movs	r1, #0
  404ac6:	f10d 0061 	add.w	r0, sp, #97	; 0x61
  404aca:	47b8      	blx	r7
	printString(strink);
  404acc:	a806      	add	r0, sp, #24
  404ace:	47a0      	blx	r4
  404ad0:	f8df 817c 	ldr.w	r8, [pc, #380]	; 404c50 <printStatus+0x214>
  404ad4:	4f58      	ldr	r7, [pc, #352]	; (404c38 <printStatus+0x1fc>)
  404ad6:	4e59      	ldr	r6, [pc, #356]	; (404c3c <printStatus+0x200>)
	for (int i=0;i<6;i++){
  404ad8:	2400      	movs	r4, #0
		sprintf(str, "Cell_%i_voltage,%f,%f,%f\n\r",i+1,MovingAverageADCData[CELLVIDXS+i],minimumValues[CELLVIDXS+i],maximumValues[CELLVIDXS+i]);
  404ada:	4d59      	ldr	r5, [pc, #356]	; (404c40 <printStatus+0x204>)
  404adc:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404c1c <printStatus+0x1e0>
  404ae0:	3401      	adds	r4, #1
  404ae2:	f858 9b04 	ldr.w	r9, [r8], #4
  404ae6:	f857 ab04 	ldr.w	sl, [r7], #4
  404aea:	f856 0b04 	ldr.w	r0, [r6], #4
  404aee:	47a8      	blx	r5
  404af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404af4:	4650      	mov	r0, sl
  404af6:	47a8      	blx	r5
  404af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404afc:	4648      	mov	r0, r9
  404afe:	47a8      	blx	r5
  404b00:	e9cd 0100 	strd	r0, r1, [sp]
  404b04:	4622      	mov	r2, r4
  404b06:	494f      	ldr	r1, [pc, #316]	; (404c44 <printStatus+0x208>)
  404b08:	a846      	add	r0, sp, #280	; 0x118
  404b0a:	47d8      	blx	fp
		printString(str);
  404b0c:	a846      	add	r0, sp, #280	; 0x118
  404b0e:	4b40      	ldr	r3, [pc, #256]	; (404c10 <printStatus+0x1d4>)
  404b10:	4798      	blx	r3
	for (int i=0;i<6;i++){
  404b12:	2c06      	cmp	r4, #6
  404b14:	d1e4      	bne.n	404ae0 <printStatus+0xa4>
  404b16:	f8df 8150 	ldr.w	r8, [pc, #336]	; 404c68 <printStatus+0x22c>
  404b1a:	4f4b      	ldr	r7, [pc, #300]	; (404c48 <printStatus+0x20c>)
  404b1c:	4e4b      	ldr	r6, [pc, #300]	; (404c4c <printStatus+0x210>)
  404b1e:	2400      	movs	r4, #0
		sprintf(str, "Ext_Temp_%i,%f,%f,%f\n\r",i+1,MovingAverageADCData[TEMPIDXS+i],minimumValues[TEMPIDXS+i],maximumValues[TEMPIDXS+i]);
  404b20:	f8df a148 	ldr.w	sl, [pc, #328]	; 404c6c <printStatus+0x230>
  404b24:	4d46      	ldr	r5, [pc, #280]	; (404c40 <printStatus+0x204>)
  404b26:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 404c1c <printStatus+0x1e0>
  404b2a:	3401      	adds	r4, #1
  404b2c:	f856 0f04 	ldr.w	r0, [r6, #4]!
  404b30:	47a8      	blx	r5
  404b32:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404b36:	f857 0f04 	ldr.w	r0, [r7, #4]!
  404b3a:	47a8      	blx	r5
  404b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404b40:	f858 0f04 	ldr.w	r0, [r8, #4]!
  404b44:	47a8      	blx	r5
  404b46:	e9cd 0100 	strd	r0, r1, [sp]
  404b4a:	4622      	mov	r2, r4
  404b4c:	4651      	mov	r1, sl
  404b4e:	a846      	add	r0, sp, #280	; 0x118
  404b50:	47c8      	blx	r9
		printString(str);
  404b52:	a846      	add	r0, sp, #280	; 0x118
  404b54:	4b2e      	ldr	r3, [pc, #184]	; (404c10 <printStatus+0x1d4>)
  404b56:	4798      	blx	r3
	for (int i=0;i<6;i++){
  404b58:	2c06      	cmp	r4, #6
  404b5a:	d1e6      	bne.n	404b2a <printStatus+0xee>
	sprintf(str, "Current,%f,%f,%f\n\r",MovingAverageADCData[CURRENTIDX],minimumValues[CURRENTIDX],maximumValues[CURRENTIDX]);
  404b5c:	4f3c      	ldr	r7, [pc, #240]	; (404c50 <printStatus+0x214>)
  404b5e:	4c38      	ldr	r4, [pc, #224]	; (404c40 <printStatus+0x204>)
  404b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
  404b62:	47a0      	blx	r4
  404b64:	4680      	mov	r8, r0
  404b66:	4689      	mov	r9, r1
  404b68:	4e34      	ldr	r6, [pc, #208]	; (404c3c <printStatus+0x200>)
  404b6a:	6b30      	ldr	r0, [r6, #48]	; 0x30
  404b6c:	47a0      	blx	r4
  404b6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404b72:	4d31      	ldr	r5, [pc, #196]	; (404c38 <printStatus+0x1fc>)
  404b74:	6b28      	ldr	r0, [r5, #48]	; 0x30
  404b76:	47a0      	blx	r4
  404b78:	e9cd 0100 	strd	r0, r1, [sp]
  404b7c:	4642      	mov	r2, r8
  404b7e:	464b      	mov	r3, r9
  404b80:	4934      	ldr	r1, [pc, #208]	; (404c54 <printStatus+0x218>)
  404b82:	a846      	add	r0, sp, #280	; 0x118
  404b84:	f8df b094 	ldr.w	fp, [pc, #148]	; 404c1c <printStatus+0x1e0>
  404b88:	47d8      	blx	fp
	printString(str);
  404b8a:	a846      	add	r0, sp, #280	; 0x118
  404b8c:	f8df a080 	ldr.w	sl, [pc, #128]	; 404c10 <printStatus+0x1d4>
  404b90:	47d0      	blx	sl
	sprintf(str, "Shunt_Temp,%f,%f,%f\n\r",MovingAverageADCData[SHUNTTEMPIDX],minimumValues[SHUNTTEMPIDX],maximumValues[SHUNTTEMPIDX]);
  404b92:	6b78      	ldr	r0, [r7, #52]	; 0x34
  404b94:	47a0      	blx	r4
  404b96:	4680      	mov	r8, r0
  404b98:	4689      	mov	r9, r1
  404b9a:	6b70      	ldr	r0, [r6, #52]	; 0x34
  404b9c:	47a0      	blx	r4
  404b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ba2:	6b68      	ldr	r0, [r5, #52]	; 0x34
  404ba4:	47a0      	blx	r4
  404ba6:	e9cd 0100 	strd	r0, r1, [sp]
  404baa:	4642      	mov	r2, r8
  404bac:	464b      	mov	r3, r9
  404bae:	492a      	ldr	r1, [pc, #168]	; (404c58 <printStatus+0x21c>)
  404bb0:	a846      	add	r0, sp, #280	; 0x118
  404bb2:	47d8      	blx	fp
	printString(str);
  404bb4:	a846      	add	r0, sp, #280	; 0x118
  404bb6:	47d0      	blx	sl
	sprintf(str, "Fet_Temp,%f,%f,%f\n\r",MovingAverageADCData[FETTEMPIDX],minimumValues[FETTEMPIDX],maximumValues[FETTEMPIDX]);
  404bb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
  404bba:	47a0      	blx	r4
  404bbc:	4680      	mov	r8, r0
  404bbe:	4689      	mov	r9, r1
  404bc0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
  404bc2:	47a0      	blx	r4
  404bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404bc8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  404bca:	47a0      	blx	r4
  404bcc:	e9cd 0100 	strd	r0, r1, [sp]
  404bd0:	4642      	mov	r2, r8
  404bd2:	464b      	mov	r3, r9
  404bd4:	4921      	ldr	r1, [pc, #132]	; (404c5c <printStatus+0x220>)
  404bd6:	a846      	add	r0, sp, #280	; 0x118
  404bd8:	47d8      	blx	fp
	printString(str);
  404bda:	a846      	add	r0, sp, #280	; 0x118
  404bdc:	47d0      	blx	sl
	sprintf(str, "Output_Voltage,%f,%f,%f\n\r",MovingAverageADCData[STACKVOLTIDX],minimumValues[STACKVOLTIDX],maximumValues[STACKVOLTIDX]);
  404bde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  404be0:	47a0      	blx	r4
  404be2:	4680      	mov	r8, r0
  404be4:	4689      	mov	r9, r1
  404be6:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
  404be8:	47a0      	blx	r4
  404bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404bee:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  404bf0:	47a0      	blx	r4
  404bf2:	e9cd 0100 	strd	r0, r1, [sp]
  404bf6:	4642      	mov	r2, r8
  404bf8:	464b      	mov	r3, r9
  404bfa:	4919      	ldr	r1, [pc, #100]	; (404c60 <printStatus+0x224>)
  404bfc:	a846      	add	r0, sp, #280	; 0x118
  404bfe:	47d8      	blx	fp
	printString(str);
  404c00:	a846      	add	r0, sp, #280	; 0x118
  404c02:	47d0      	blx	sl
}
  404c04:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
  404c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c0c:	00406519 	.word	0x00406519
  404c10:	00404a01 	.word	0x00404a01
  404c14:	20003560 	.word	0x20003560
  404c18:	0040a72c 	.word	0x0040a72c
  404c1c:	004065b5 	.word	0x004065b5
  404c20:	0040a744 	.word	0x0040a744
  404c24:	0040a75c 	.word	0x0040a75c
  404c28:	0040a770 	.word	0x0040a770
  404c2c:	0040a788 	.word	0x0040a788
  404c30:	0040a79c 	.word	0x0040a79c
  404c34:	004063e5 	.word	0x004063e5
  404c38:	20003568 	.word	0x20003568
  404c3c:	200023fc 	.word	0x200023fc
  404c40:	00405739 	.word	0x00405739
  404c44:	0040a7b4 	.word	0x0040a7b4
  404c48:	2000357c 	.word	0x2000357c
  404c4c:	20002410 	.word	0x20002410
  404c50:	20000130 	.word	0x20000130
  404c54:	0040a7e8 	.word	0x0040a7e8
  404c58:	0040a7fc 	.word	0x0040a7fc
  404c5c:	0040a814 	.word	0x0040a814
  404c60:	0040a828 	.word	0x0040a828
  404c64:	0040a3b0 	.word	0x0040a3b0
  404c68:	20000144 	.word	0x20000144
  404c6c:	0040a7d0 	.word	0x0040a7d0

00404c70 <printInstructions>:
void printInstructions(){
  404c70:	b508      	push	{r3, lr}
	printString(instructions);
  404c72:	4802      	ldr	r0, [pc, #8]	; (404c7c <printInstructions+0xc>)
  404c74:	4b02      	ldr	r3, [pc, #8]	; (404c80 <printInstructions+0x10>)
  404c76:	4798      	blx	r3
  404c78:	bd08      	pop	{r3, pc}
  404c7a:	bf00      	nop
  404c7c:	0040a5f8 	.word	0x0040a5f8
  404c80:	00404a01 	.word	0x00404a01

00404c84 <checkUSB>:
void checkUSB(){
  404c84:	b508      	push	{r3, lr}
	if(udi_cdc_get_nb_received_data() > 0){
  404c86:	4b0c      	ldr	r3, [pc, #48]	; (404cb8 <checkUSB+0x34>)
  404c88:	4798      	blx	r3
  404c8a:	b900      	cbnz	r0, 404c8e <checkUSB+0xa>
  404c8c:	bd08      	pop	{r3, pc}
		char inChar = udi_cdc_getc();
  404c8e:	4b0b      	ldr	r3, [pc, #44]	; (404cbc <checkUSB+0x38>)
  404c90:	4798      	blx	r3
  404c92:	b2c0      	uxtb	r0, r0
		if (inChar == 0) return;
  404c94:	2800      	cmp	r0, #0
  404c96:	d0f9      	beq.n	404c8c <checkUSB+0x8>
		if(inChar == 's')
  404c98:	2873      	cmp	r0, #115	; 0x73
  404c9a:	d004      	beq.n	404ca6 <checkUSB+0x22>
		else if(inChar == 'c'){
  404c9c:	2863      	cmp	r0, #99	; 0x63
  404c9e:	d005      	beq.n	404cac <checkUSB+0x28>
			printInstructions();
  404ca0:	4b07      	ldr	r3, [pc, #28]	; (404cc0 <checkUSB+0x3c>)
  404ca2:	4798      	blx	r3
  404ca4:	e7f2      	b.n	404c8c <checkUSB+0x8>
			printStatus();
  404ca6:	4b07      	ldr	r3, [pc, #28]	; (404cc4 <checkUSB+0x40>)
  404ca8:	4798      	blx	r3
  404caa:	bd08      	pop	{r3, pc}
			clearProtections();
  404cac:	4b06      	ldr	r3, [pc, #24]	; (404cc8 <checkUSB+0x44>)
  404cae:	4798      	blx	r3
			printString(message);
  404cb0:	4806      	ldr	r0, [pc, #24]	; (404ccc <checkUSB+0x48>)
  404cb2:	4b07      	ldr	r3, [pc, #28]	; (404cd0 <checkUSB+0x4c>)
  404cb4:	4798      	blx	r3
  404cb6:	bd08      	pop	{r3, pc}
  404cb8:	00400425 	.word	0x00400425
  404cbc:	004006ad 	.word	0x004006ad
  404cc0:	00404c71 	.word	0x00404c71
  404cc4:	00404a3d 	.word	0x00404a3d
  404cc8:	00404599 	.word	0x00404599
  404ccc:	0040a5b0 	.word	0x0040a5b0
  404cd0:	00404a01 	.word	0x00404a01

00404cd4 <loadFromFlash>:

void loadFromFlash(){
  404cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cd8:	b083      	sub	sp, #12
	uint32_t flashOk = flash_init(FLASH_ACCESS_MODE_128, 6);
  404cda:	2106      	movs	r1, #6
  404cdc:	2000      	movs	r0, #0
  404cde:	4b3a      	ldr	r3, [pc, #232]	; (404dc8 <loadFromFlash+0xf4>)
  404ce0:	4798      	blx	r3
	if(flashOk != FLASH_RC_OK) return;
  404ce2:	b110      	cbz	r0, 404cea <loadFromFlash+0x16>
	}
	
	if(ignoreProtections){
		pio_set(BOARD_LED_PORT,BOARD_LED);
	}
}
  404ce4:	b003      	add	sp, #12
  404ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	flashOk = flash_unlock(FLASH_DATA_PAGE_ADDRESS, FLASH_DATA_PAGE_ADDRESS + (SIZE_OF_DATA_FLASH)*4,0,0);
  404cea:	2300      	movs	r3, #0
  404cec:	461a      	mov	r2, r3
  404cee:	4937      	ldr	r1, [pc, #220]	; (404dcc <loadFromFlash+0xf8>)
  404cf0:	4837      	ldr	r0, [pc, #220]	; (404dd0 <loadFromFlash+0xfc>)
  404cf2:	4c38      	ldr	r4, [pc, #224]	; (404dd4 <loadFromFlash+0x100>)
  404cf4:	47a0      	blx	r4
	if(flashOk != FLASH_RC_OK) return;
  404cf6:	2800      	cmp	r0, #0
  404cf8:	d1f4      	bne.n	404ce4 <loadFromFlash+0x10>
  404cfa:	4937      	ldr	r1, [pc, #220]	; (404dd8 <loadFromFlash+0x104>)
  404cfc:	4a37      	ldr	r2, [pc, #220]	; (404ddc <loadFromFlash+0x108>)
	for(int i = 0;i < QTY_PROTECTIONS; i++){
  404cfe:	4838      	ldr	r0, [pc, #224]	; (404de0 <loadFromFlash+0x10c>)
		activeProtections[i-flashIdx] = !(bool)(pageContents[i]);
  404d00:	f852 3f04 	ldr.w	r3, [r2, #4]!
  404d04:	fab3 f383 	clz	r3, r3
  404d08:	095b      	lsrs	r3, r3, #5
  404d0a:	f801 3b01 	strb.w	r3, [r1], #1
	for(int i = 0;i < QTY_PROTECTIONS; i++){
  404d0e:	4282      	cmp	r2, r0
  404d10:	d1f6      	bne.n	404d00 <loadFromFlash+0x2c>
	batteryStable = !(bool)(pageContents[flashIdx++]);
  404d12:	4b34      	ldr	r3, [pc, #208]	; (404de4 <loadFromFlash+0x110>)
  404d14:	681b      	ldr	r3, [r3, #0]
  404d16:	fab3 f383 	clz	r3, r3
  404d1a:	095b      	lsrs	r3, r3, #5
  404d1c:	4a32      	ldr	r2, [pc, #200]	; (404de8 <loadFromFlash+0x114>)
  404d1e:	7013      	strb	r3, [r2, #0]
	ignoreProtections = !(bool)(pageContents[flashIdx++]);
  404d20:	4b32      	ldr	r3, [pc, #200]	; (404dec <loadFromFlash+0x118>)
  404d22:	681b      	ldr	r3, [r3, #0]
  404d24:	9301      	str	r3, [sp, #4]
  404d26:	fab3 f383 	clz	r3, r3
  404d2a:	095b      	lsrs	r3, r3, #5
  404d2c:	4a30      	ldr	r2, [pc, #192]	; (404df0 <loadFromFlash+0x11c>)
  404d2e:	7013      	strb	r3, [r2, #0]
	protectionActive = false;
  404d30:	2200      	movs	r2, #0
  404d32:	4b30      	ldr	r3, [pc, #192]	; (404df4 <loadFromFlash+0x120>)
  404d34:	701a      	strb	r2, [r3, #0]
  404d36:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 404e10 <loadFromFlash+0x13c>
  404d3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 404e14 <loadFromFlash+0x140>
  404d3e:	4d2e      	ldr	r5, [pc, #184]	; (404df8 <loadFromFlash+0x124>)
  404d40:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 404e04 <loadFromFlash+0x130>
  404d44:	4c2d      	ldr	r4, [pc, #180]	; (404dfc <loadFromFlash+0x128>)
  404d46:	4f2e      	ldr	r7, [pc, #184]	; (404e00 <loadFromFlash+0x12c>)
		MovingAverageADCData[i] = fromMemory == 0? MovingAverageADCData[i] : fromMemory;
  404d48:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 404e18 <loadFromFlash+0x144>
  404d4c:	e00d      	b.n	404d6a <loadFromFlash+0x96>
  404d4e:	682b      	ldr	r3, [r5, #0]
  404d50:	9300      	str	r3, [sp, #0]
  404d52:	e015      	b.n	404d80 <loadFromFlash+0xac>
		minimumValues[i] = fromMemory == 0? MovingAverageADCData[i] : fromMemory;
  404d54:	9e00      	ldr	r6, [sp, #0]
  404d56:	e020      	b.n	404d9a <loadFromFlash+0xc6>
  404d58:	9e00      	ldr	r6, [sp, #0]
  404d5a:	e01e      	b.n	404d9a <loadFromFlash+0xc6>
		maximumValues[i] = fromMemory == 0? MovingAverageADCData[i] : fromMemory;
  404d5c:	9e00      	ldr	r6, [sp, #0]
  404d5e:	f84b 6f04 	str.w	r6, [fp, #4]!
  404d62:	3504      	adds	r5, #4
	for(int i=0;i<QTY_ANALOG_SOURCES;i++){
  404d64:	4b27      	ldr	r3, [pc, #156]	; (404e04 <loadFromFlash+0x130>)
  404d66:	429f      	cmp	r7, r3
  404d68:	d026      	beq.n	404db8 <loadFromFlash+0xe4>
		float fromMemory = convertToFloat(pageContents[i+flashIdx]);
  404d6a:	f857 3f04 	ldr.w	r3, [r7, #4]!
	union {
		uint32_t data;
		float data_f;
	} u;

	u.data = indata;
  404d6e:	4618      	mov	r0, r3
  404d70:	9300      	str	r3, [sp, #0]
	if(u.data == 0xffffffff) return 0;
  404d72:	f1b3 3fff 	cmp.w	r3, #4294967295
  404d76:	d0ea      	beq.n	404d4e <loadFromFlash+0x7a>
		MovingAverageADCData[i] = fromMemory == 0? MovingAverageADCData[i] : fromMemory;
  404d78:	2100      	movs	r1, #0
  404d7a:	47c0      	blx	r8
  404d7c:	2800      	cmp	r0, #0
  404d7e:	d1e6      	bne.n	404d4e <loadFromFlash+0x7a>
  404d80:	9b00      	ldr	r3, [sp, #0]
  404d82:	602b      	str	r3, [r5, #0]
		fromMemory = convertToFloat(pageContents[ i + flashIdx + QTY_ANALOG_SOURCES ]);
  404d84:	f859 3f04 	ldr.w	r3, [r9, #4]!
	u.data = indata;
  404d88:	461e      	mov	r6, r3
	if(u.data == 0xffffffff) return 0;
  404d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
  404d8e:	d0e3      	beq.n	404d58 <loadFromFlash+0x84>
		minimumValues[i] = fromMemory == 0? MovingAverageADCData[i] : fromMemory;
  404d90:	2100      	movs	r1, #0
  404d92:	4618      	mov	r0, r3
  404d94:	47c0      	blx	r8
  404d96:	2800      	cmp	r0, #0
  404d98:	d1dc      	bne.n	404d54 <loadFromFlash+0x80>
  404d9a:	f84a 6f04 	str.w	r6, [sl, #4]!
		fromMemory = convertToFloat(pageContents[ i + flashIdx + (QTY_ANALOG_SOURCES * 2) ]);
  404d9e:	f854 3f04 	ldr.w	r3, [r4, #4]!
	u.data = indata;
  404da2:	461e      	mov	r6, r3
	if(u.data == 0xffffffff) return 0;
  404da4:	f1b3 3fff 	cmp.w	r3, #4294967295
  404da8:	d0d8      	beq.n	404d5c <loadFromFlash+0x88>
		maximumValues[i] = fromMemory == 0? MovingAverageADCData[i] : fromMemory;
  404daa:	2100      	movs	r1, #0
  404dac:	4618      	mov	r0, r3
  404dae:	47c0      	blx	r8
  404db0:	2800      	cmp	r0, #0
  404db2:	d0d4      	beq.n	404d5e <loadFromFlash+0x8a>
  404db4:	9e00      	ldr	r6, [sp, #0]
  404db6:	e7d2      	b.n	404d5e <loadFromFlash+0x8a>
	if(ignoreProtections){
  404db8:	9b01      	ldr	r3, [sp, #4]
  404dba:	2b00      	cmp	r3, #0
  404dbc:	d192      	bne.n	404ce4 <loadFromFlash+0x10>
		pio_set(BOARD_LED_PORT,BOARD_LED);
  404dbe:	2108      	movs	r1, #8
  404dc0:	4811      	ldr	r0, [pc, #68]	; (404e08 <loadFromFlash+0x134>)
  404dc2:	4b12      	ldr	r3, [pc, #72]	; (404e0c <loadFromFlash+0x138>)
  404dc4:	4798      	blx	r3
  404dc6:	e78d      	b.n	404ce4 <loadFromFlash+0x10>
  404dc8:	0040276d 	.word	0x0040276d
  404dcc:	0043f0e4 	.word	0x0043f0e4
  404dd0:	0043f000 	.word	0x0043f000
  404dd4:	00402875 	.word	0x00402875
  404dd8:	20003560 	.word	0x20003560
  404ddc:	0043effc 	.word	0x0043effc
  404de0:	0043f014 	.word	0x0043f014
  404de4:	0043f018 	.word	0x0043f018
  404de8:	20000170 	.word	0x20000170
  404dec:	0043f01c 	.word	0x0043f01c
  404df0:	20001788 	.word	0x20001788
  404df4:	20001789 	.word	0x20001789
  404df8:	20000130 	.word	0x20000130
  404dfc:	0043f0a0 	.word	0x0043f0a0
  404e00:	0043f020 	.word	0x0043f020
  404e04:	0043f060 	.word	0x0043f060
  404e08:	400e0e00 	.word	0x400e0e00
  404e0c:	00403145 	.word	0x00403145
  404e10:	200023f8 	.word	0x200023f8
  404e14:	20003564 	.word	0x20003564
  404e18:	00406325 	.word	0x00406325

00404e1c <updateRegisters>:
	u.data_f = indata;
	return u.data;
}

void updateRegisters(){
	floatRegisters[CELL1_VOLTAGE] = MovingAverageADCData[CELL1IDX];
  404e1c:	4b18      	ldr	r3, [pc, #96]	; (404e80 <updateRegisters+0x64>)
  404e1e:	4a19      	ldr	r2, [pc, #100]	; (404e84 <updateRegisters+0x68>)
  404e20:	6811      	ldr	r1, [r2, #0]
  404e22:	6019      	str	r1, [r3, #0]
	floatRegisters[CELL2_VOLTAGE] = MovingAverageADCData[CELL2IDX];
  404e24:	6851      	ldr	r1, [r2, #4]
  404e26:	6059      	str	r1, [r3, #4]
	floatRegisters[CELL3_VOLTAGE] = MovingAverageADCData[CELL3IDX];
  404e28:	6891      	ldr	r1, [r2, #8]
  404e2a:	6099      	str	r1, [r3, #8]
	floatRegisters[CELL4_VOLTAGE] = MovingAverageADCData[CELL4IDX];
  404e2c:	68d1      	ldr	r1, [r2, #12]
  404e2e:	60d9      	str	r1, [r3, #12]
	floatRegisters[CELL5_VOLTAGE] = MovingAverageADCData[CELL5IDX];
  404e30:	6911      	ldr	r1, [r2, #16]
  404e32:	6119      	str	r1, [r3, #16]
	floatRegisters[CELL6_VOLTAGE] = MovingAverageADCData[CELL6IDX];
  404e34:	6951      	ldr	r1, [r2, #20]
  404e36:	6159      	str	r1, [r3, #20]
	
	floatRegisters[BATT_TEMP1] = MovingAverageADCData[TEMP1IDX];
  404e38:	6991      	ldr	r1, [r2, #24]
  404e3a:	6199      	str	r1, [r3, #24]
	floatRegisters[BATT_TEMP2] = MovingAverageADCData[TEMP2IDX];
  404e3c:	69d1      	ldr	r1, [r2, #28]
  404e3e:	61d9      	str	r1, [r3, #28]
	floatRegisters[BATT_TEMP3] = MovingAverageADCData[TEMP3IDX];
  404e40:	6a11      	ldr	r1, [r2, #32]
  404e42:	6219      	str	r1, [r3, #32]
	floatRegisters[BATT_TEMP4] = MovingAverageADCData[TEMP4IDX];
  404e44:	6a51      	ldr	r1, [r2, #36]	; 0x24
  404e46:	6259      	str	r1, [r3, #36]	; 0x24
	floatRegisters[BATT_TEMP5] = MovingAverageADCData[TEMP5IDX];
  404e48:	6a91      	ldr	r1, [r2, #40]	; 0x28
  404e4a:	6299      	str	r1, [r3, #40]	; 0x28
	floatRegisters[BATT_TEMP6] = MovingAverageADCData[TEMP6IDX];
  404e4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  404e4e:	62d9      	str	r1, [r3, #44]	; 0x2c
	
	floatRegisters[BATT_CURRENT] = MovingAverageADCData[CURRENTIDX];
  404e50:	6b11      	ldr	r1, [r2, #48]	; 0x30
  404e52:	6319      	str	r1, [r3, #48]	; 0x30
	floatRegisters[PCB_SHUNT_TEMP] = MovingAverageADCData[SHUNTTEMPIDX];
  404e54:	6b51      	ldr	r1, [r2, #52]	; 0x34
  404e56:	6359      	str	r1, [r3, #52]	; 0x34
	floatRegisters[PCB_FET_TEMP] = MovingAverageADCData[FETTEMPIDX];
  404e58:	6b91      	ldr	r1, [r2, #56]	; 0x38
  404e5a:	6399      	str	r1, [r3, #56]	; 0x38
	floatRegisters[BATTERY_OUTPUT_VOLTAGE] = MovingAverageADCData[STACKVOLTIDX];
  404e5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  404e5e:	63da      	str	r2, [r3, #60]	; 0x3c
	
	boolRegisters[OVER_TEMP_PROTEC] = activeProtections[OVERTEMPIDX];
  404e60:	4b09      	ldr	r3, [pc, #36]	; (404e88 <updateRegisters+0x6c>)
  404e62:	4a0a      	ldr	r2, [pc, #40]	; (404e8c <updateRegisters+0x70>)
  404e64:	7811      	ldrb	r1, [r2, #0]
  404e66:	7019      	strb	r1, [r3, #0]
	boolRegisters[UNDER_TEMP_PROTEC] = activeProtections[UNDERTEMPIDX];
  404e68:	7851      	ldrb	r1, [r2, #1]
  404e6a:	7059      	strb	r1, [r3, #1]
	boolRegisters[OVER_VOLT_PROTEC] = activeProtections[OVERVOLTIDX];
  404e6c:	7891      	ldrb	r1, [r2, #2]
  404e6e:	7099      	strb	r1, [r3, #2]
	boolRegisters[UNDER_VOLT_PROTEC] = activeProtections[UNDERVOLTIDX];
  404e70:	78d1      	ldrb	r1, [r2, #3]
  404e72:	70d9      	strb	r1, [r3, #3]
	boolRegisters[OVER_CURRENT_PROTEC] = activeProtections[OVERCURRENTIDX];
  404e74:	7911      	ldrb	r1, [r2, #4]
  404e76:	7119      	strb	r1, [r3, #4]
	boolRegisters[CELL_IMBALANCE_PROTEC] = activeProtections[CELLIMBALANCEIDX];
  404e78:	7952      	ldrb	r2, [r2, #5]
  404e7a:	715a      	strb	r2, [r3, #5]
  404e7c:	4770      	bx	lr
  404e7e:	bf00      	nop
  404e80:	20001de4 	.word	0x20001de4
  404e84:	20000130 	.word	0x20000130
  404e88:	200018e4 	.word	0x200018e4
  404e8c:	20003560 	.word	0x20003560

00404e90 <checkIfPeriodicWakeup>:
}

void checkIfPeriodicWakeup(){
  404e90:	b570      	push	{r4, r5, r6, lr}
	bool USBSense = pio_get(USB_SNS_PORT,PIO_TYPE_PIO_INPUT,USB_SNS);
  404e92:	4d1b      	ldr	r5, [pc, #108]	; (404f00 <checkIfPeriodicWakeup+0x70>)
  404e94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  404e98:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  404e9c:	4628      	mov	r0, r5
  404e9e:	4c19      	ldr	r4, [pc, #100]	; (404f04 <checkIfPeriodicWakeup+0x74>)
  404ea0:	47a0      	blx	r4
  404ea2:	4606      	mov	r6, r0
	bool PWRSwitchSense = pio_get(PWR_SW_PORT,PIO_TYPE_PIO_INPUT,PWR_SW);
  404ea4:	2201      	movs	r2, #1
  404ea6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  404eaa:	4628      	mov	r0, r5
  404eac:	47a0      	blx	r4
	if(PWRSwitchSense || USBSense){
  404eae:	b900      	cbnz	r0, 404eb2 <checkIfPeriodicWakeup+0x22>
  404eb0:	b13e      	cbz	r6, 404ec2 <checkIfPeriodicWakeup+0x32>
		pio_get_interrupt_status(PIOA);
  404eb2:	4813      	ldr	r0, [pc, #76]	; (404f00 <checkIfPeriodicWakeup+0x70>)
  404eb4:	4b14      	ldr	r3, [pc, #80]	; (404f08 <checkIfPeriodicWakeup+0x78>)
  404eb6:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  404eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404ebc:	4b13      	ldr	r3, [pc, #76]	; (404f0c <checkIfPeriodicWakeup+0x7c>)
  404ebe:	601a      	str	r2, [r3, #0]
  404ec0:	bd70      	pop	{r4, r5, r6, pc}
		NVIC_EnableIRQ(PIOA_IRQn);
		return;
	}else{
		pmc_enable_periph_clk(ID_TC2);
  404ec2:	2019      	movs	r0, #25
  404ec4:	4b12      	ldr	r3, [pc, #72]	; (404f10 <checkIfPeriodicWakeup+0x80>)
  404ec6:	4798      	blx	r3
		tc_init(TC0, WAKEUP_TC,
  404ec8:	4c12      	ldr	r4, [pc, #72]	; (404f14 <checkIfPeriodicWakeup+0x84>)
  404eca:	f24c 0203 	movw	r2, #49155	; 0xc003
  404ece:	2102      	movs	r1, #2
  404ed0:	4620      	mov	r0, r4
  404ed2:	4b11      	ldr	r3, [pc, #68]	; (404f18 <checkIfPeriodicWakeup+0x88>)
  404ed4:	4798      	blx	r3
			TC_CMR_WAVSEL_UP_RC
			|TC_CMR_WAVE
			| TC_CMR_TCCLKS_TIMER_CLOCK4);
		tc_write_rc(TC0,WAKEUP_TC,9375);				  //sets wakeup to be 0.1s
  404ed6:	f242 429f 	movw	r2, #9375	; 0x249f
  404eda:	2102      	movs	r1, #2
  404edc:	4620      	mov	r0, r4
  404ede:	4b0f      	ldr	r3, [pc, #60]	; (404f1c <checkIfPeriodicWakeup+0x8c>)
  404ee0:	4798      	blx	r3
		tc_enable_interrupt(TC0, WAKEUP_TC, TC_IER_CPCS);
  404ee2:	2210      	movs	r2, #16
  404ee4:	2102      	movs	r1, #2
  404ee6:	4620      	mov	r0, r4
  404ee8:	4b0d      	ldr	r3, [pc, #52]	; (404f20 <checkIfPeriodicWakeup+0x90>)
  404eea:	4798      	blx	r3
  404eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  404ef0:	4b06      	ldr	r3, [pc, #24]	; (404f0c <checkIfPeriodicWakeup+0x7c>)
  404ef2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(TC2_IRQn);
		tc_start(TC0,WAKEUP_TC);
  404ef4:	2102      	movs	r1, #2
  404ef6:	4620      	mov	r0, r4
  404ef8:	4b0a      	ldr	r3, [pc, #40]	; (404f24 <checkIfPeriodicWakeup+0x94>)
  404efa:	4798      	blx	r3
  404efc:	bd70      	pop	{r4, r5, r6, pc}
  404efe:	bf00      	nop
  404f00:	400e0e00 	.word	0x400e0e00
  404f04:	0040314d 	.word	0x0040314d
  404f08:	0040324d 	.word	0x0040324d
  404f0c:	e000e100 	.word	0xe000e100
  404f10:	004033d9 	.word	0x004033d9
  404f14:	40010000 	.word	0x40010000
  404f18:	0040106b 	.word	0x0040106b
  404f1c:	00401093 	.word	0x00401093
  404f20:	0040109b 	.word	0x0040109b
  404f24:	00401083 	.word	0x00401083

00404f28 <main>:
{
  404f28:	b508      	push	{r3, lr}
	sysclk_init();
  404f2a:	4b0a      	ldr	r3, [pc, #40]	; (404f54 <main+0x2c>)
  404f2c:	4798      	blx	r3
	board_init();
  404f2e:	4b0a      	ldr	r3, [pc, #40]	; (404f58 <main+0x30>)
  404f30:	4798      	blx	r3
	adcSetup();
  404f32:	4b0a      	ldr	r3, [pc, #40]	; (404f5c <main+0x34>)
  404f34:	4798      	blx	r3
	loadFromFlash();
  404f36:	4b0a      	ldr	r3, [pc, #40]	; (404f60 <main+0x38>)
  404f38:	4798      	blx	r3
	checkIfPeriodicWakeup();
  404f3a:	4b0a      	ldr	r3, [pc, #40]	; (404f64 <main+0x3c>)
  404f3c:	4798      	blx	r3
		modbus_update();
  404f3e:	4e0a      	ldr	r6, [pc, #40]	; (404f68 <main+0x40>)
		analogCalculate();
  404f40:	4d0a      	ldr	r5, [pc, #40]	; (404f6c <main+0x44>)
		triggerProtections();
  404f42:	4c0b      	ldr	r4, [pc, #44]	; (404f70 <main+0x48>)
		modbus_update();
  404f44:	47b0      	blx	r6
		analogCalculate();
  404f46:	47a8      	blx	r5
		triggerProtections();
  404f48:	47a0      	blx	r4
		checkUSB();
  404f4a:	4b0a      	ldr	r3, [pc, #40]	; (404f74 <main+0x4c>)
  404f4c:	4798      	blx	r3
		updateRegisters();
  404f4e:	4b0a      	ldr	r3, [pc, #40]	; (404f78 <main+0x50>)
  404f50:	4798      	blx	r3
  404f52:	e7f7      	b.n	404f44 <main+0x1c>
  404f54:	004030e1 	.word	0x004030e1
  404f58:	00403549 	.word	0x00403549
  404f5c:	00403939 	.word	0x00403939
  404f60:	00404cd5 	.word	0x00404cd5
  404f64:	00404e91 	.word	0x00404e91
  404f68:	00402f79 	.word	0x00402f79
  404f6c:	00403b39 	.word	0x00403b39
  404f70:	00404409 	.word	0x00404409
  404f74:	00404c85 	.word	0x00404c85
  404f78:	00404e1d 	.word	0x00404e1d

00404f7c <log>:
  404f7c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  404f80:	b08a      	sub	sp, #40	; 0x28
  404f82:	4604      	mov	r4, r0
  404f84:	460d      	mov	r5, r1
  404f86:	f000 f877 	bl	405078 <__ieee754_log>
  404f8a:	4b35      	ldr	r3, [pc, #212]	; (405060 <log+0xe4>)
  404f8c:	f993 6000 	ldrsb.w	r6, [r3]
  404f90:	1c73      	adds	r3, r6, #1
  404f92:	4680      	mov	r8, r0
  404f94:	4689      	mov	r9, r1
  404f96:	d00d      	beq.n	404fb4 <log+0x38>
  404f98:	4622      	mov	r2, r4
  404f9a:	462b      	mov	r3, r5
  404f9c:	4620      	mov	r0, r4
  404f9e:	4629      	mov	r1, r5
  404fa0:	f000 feb8 	bl	405d14 <__aeabi_dcmpun>
  404fa4:	b930      	cbnz	r0, 404fb4 <log+0x38>
  404fa6:	2200      	movs	r2, #0
  404fa8:	2300      	movs	r3, #0
  404faa:	4620      	mov	r0, r4
  404fac:	4629      	mov	r1, r5
  404fae:	f000 fea7 	bl	405d00 <__aeabi_dcmpgt>
  404fb2:	b120      	cbz	r0, 404fbe <log+0x42>
  404fb4:	4640      	mov	r0, r8
  404fb6:	4649      	mov	r1, r9
  404fb8:	b00a      	add	sp, #40	; 0x28
  404fba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  404fbe:	4b29      	ldr	r3, [pc, #164]	; (405064 <log+0xe8>)
  404fc0:	9008      	str	r0, [sp, #32]
  404fc2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  404fc6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404fca:	9301      	str	r3, [sp, #4]
  404fcc:	4620      	mov	r0, r4
  404fce:	4629      	mov	r1, r5
  404fd0:	b9ce      	cbnz	r6, 405006 <log+0x8a>
  404fd2:	4d25      	ldr	r5, [pc, #148]	; (405068 <log+0xec>)
  404fd4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
  404fd8:	2200      	movs	r2, #0
  404fda:	2300      	movs	r3, #0
  404fdc:	e9cd 4506 	strd	r4, r5, [sp, #24]
  404fe0:	f000 fe66 	bl	405cb0 <__aeabi_dcmpeq>
  404fe4:	2800      	cmp	r0, #0
  404fe6:	d033      	beq.n	405050 <log+0xd4>
  404fe8:	2302      	movs	r3, #2
  404fea:	9300      	str	r3, [sp, #0]
  404fec:	4668      	mov	r0, sp
  404fee:	f000 fa37 	bl	405460 <matherr>
  404ff2:	b1a8      	cbz	r0, 405020 <log+0xa4>
  404ff4:	9b08      	ldr	r3, [sp, #32]
  404ff6:	b9c3      	cbnz	r3, 40502a <log+0xae>
  404ff8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404ffc:	4640      	mov	r0, r8
  404ffe:	4649      	mov	r1, r9
  405000:	b00a      	add	sp, #40	; 0x28
  405002:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  405006:	4d19      	ldr	r5, [pc, #100]	; (40506c <log+0xf0>)
  405008:	2400      	movs	r4, #0
  40500a:	2200      	movs	r2, #0
  40500c:	2300      	movs	r3, #0
  40500e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  405012:	f000 fe4d 	bl	405cb0 <__aeabi_dcmpeq>
  405016:	b168      	cbz	r0, 405034 <log+0xb8>
  405018:	2302      	movs	r3, #2
  40501a:	429e      	cmp	r6, r3
  40501c:	9300      	str	r3, [sp, #0]
  40501e:	d1e5      	bne.n	404fec <log+0x70>
  405020:	f001 f9b2 	bl	406388 <__errno>
  405024:	2322      	movs	r3, #34	; 0x22
  405026:	6003      	str	r3, [r0, #0]
  405028:	e7e4      	b.n	404ff4 <log+0x78>
  40502a:	f001 f9ad 	bl	406388 <__errno>
  40502e:	9b08      	ldr	r3, [sp, #32]
  405030:	6003      	str	r3, [r0, #0]
  405032:	e7e1      	b.n	404ff8 <log+0x7c>
  405034:	2301      	movs	r3, #1
  405036:	2e02      	cmp	r6, #2
  405038:	9300      	str	r3, [sp, #0]
  40503a:	d10b      	bne.n	405054 <log+0xd8>
  40503c:	f001 f9a4 	bl	406388 <__errno>
  405040:	2321      	movs	r3, #33	; 0x21
  405042:	6003      	str	r3, [r0, #0]
  405044:	480a      	ldr	r0, [pc, #40]	; (405070 <log+0xf4>)
  405046:	f000 fa0d 	bl	405464 <nan>
  40504a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40504e:	e7d1      	b.n	404ff4 <log+0x78>
  405050:	2301      	movs	r3, #1
  405052:	9300      	str	r3, [sp, #0]
  405054:	4668      	mov	r0, sp
  405056:	f000 fa03 	bl	405460 <matherr>
  40505a:	2800      	cmp	r0, #0
  40505c:	d1f2      	bne.n	405044 <log+0xc8>
  40505e:	e7ed      	b.n	40503c <log+0xc0>
  405060:	20000188 	.word	0x20000188
  405064:	0040a844 	.word	0x0040a844
  405068:	c7efffff 	.word	0xc7efffff
  40506c:	fff00000 	.word	0xfff00000
  405070:	0040a784 	.word	0x0040a784
  405074:	00000000 	.word	0x00000000

00405078 <__ieee754_log>:
  405078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40507c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405080:	b085      	sub	sp, #20
  405082:	4606      	mov	r6, r0
  405084:	460f      	mov	r7, r1
  405086:	460b      	mov	r3, r1
  405088:	da5a      	bge.n	405140 <__ieee754_log+0xc8>
  40508a:	4602      	mov	r2, r0
  40508c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  405090:	4322      	orrs	r2, r4
  405092:	f000 80f8 	beq.w	405286 <__ieee754_log+0x20e>
  405096:	2900      	cmp	r1, #0
  405098:	f2c0 817a 	blt.w	405390 <__ieee754_log+0x318>
  40509c:	2200      	movs	r2, #0
  40509e:	4bd6      	ldr	r3, [pc, #856]	; (4053f8 <__ieee754_log+0x380>)
  4050a0:	f000 fb9e 	bl	4057e0 <__aeabi_dmul>
  4050a4:	4ad5      	ldr	r2, [pc, #852]	; (4053fc <__ieee754_log+0x384>)
  4050a6:	460b      	mov	r3, r1
  4050a8:	4293      	cmp	r3, r2
  4050aa:	4606      	mov	r6, r0
  4050ac:	460f      	mov	r7, r1
  4050ae:	f06f 0c35 	mvn.w	ip, #53	; 0x35
  4050b2:	dc4a      	bgt.n	40514a <__ieee754_log+0xd2>
  4050b4:	f3c3 0513 	ubfx	r5, r3, #0, #20
  4050b8:	f505 2e15 	add.w	lr, r5, #610304	; 0x95000
  4050bc:	f60e 7e64 	addw	lr, lr, #3940	; 0xf64
  4050c0:	f40e 1e80 	and.w	lr, lr, #1048576	; 0x100000
  4050c4:	f08e 527f 	eor.w	r2, lr, #1069547520	; 0x3fc00000
  4050c8:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
  4050cc:	151c      	asrs	r4, r3, #20
  4050ce:	ea42 0705 	orr.w	r7, r2, r5
  4050d2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  4050d6:	4464      	add	r4, ip
  4050d8:	2200      	movs	r2, #0
  4050da:	4bc9      	ldr	r3, [pc, #804]	; (405400 <__ieee754_log+0x388>)
  4050dc:	4630      	mov	r0, r6
  4050de:	4639      	mov	r1, r7
  4050e0:	eb04 541e 	add.w	r4, r4, lr, lsr #20
  4050e4:	f000 f9c8 	bl	405478 <__aeabi_dsub>
  4050e8:	1cab      	adds	r3, r5, #2
  4050ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4050ee:	2b02      	cmp	r3, #2
  4050f0:	4682      	mov	sl, r0
  4050f2:	468b      	mov	fp, r1
  4050f4:	f04f 0200 	mov.w	r2, #0
  4050f8:	dc30      	bgt.n	40515c <__ieee754_log+0xe4>
  4050fa:	2300      	movs	r3, #0
  4050fc:	f000 fdd8 	bl	405cb0 <__aeabi_dcmpeq>
  405100:	2800      	cmp	r0, #0
  405102:	f000 80c9 	beq.w	405298 <__ieee754_log+0x220>
  405106:	2c00      	cmp	r4, #0
  405108:	f000 814b 	beq.w	4053a2 <__ieee754_log+0x32a>
  40510c:	4620      	mov	r0, r4
  40510e:	f000 fb01 	bl	405714 <__aeabi_i2d>
  405112:	a3a5      	add	r3, pc, #660	; (adr r3, 4053a8 <__ieee754_log+0x330>)
  405114:	e9d3 2300 	ldrd	r2, r3, [r3]
  405118:	4606      	mov	r6, r0
  40511a:	460f      	mov	r7, r1
  40511c:	f000 fb60 	bl	4057e0 <__aeabi_dmul>
  405120:	a3a3      	add	r3, pc, #652	; (adr r3, 4053b0 <__ieee754_log+0x338>)
  405122:	e9d3 2300 	ldrd	r2, r3, [r3]
  405126:	4604      	mov	r4, r0
  405128:	460d      	mov	r5, r1
  40512a:	4630      	mov	r0, r6
  40512c:	4639      	mov	r1, r7
  40512e:	f000 fb57 	bl	4057e0 <__aeabi_dmul>
  405132:	4602      	mov	r2, r0
  405134:	460b      	mov	r3, r1
  405136:	4620      	mov	r0, r4
  405138:	4629      	mov	r1, r5
  40513a:	f000 f99f 	bl	40547c <__adddf3>
  40513e:	e00a      	b.n	405156 <__ieee754_log+0xde>
  405140:	4aae      	ldr	r2, [pc, #696]	; (4053fc <__ieee754_log+0x384>)
  405142:	4293      	cmp	r3, r2
  405144:	f04f 0c00 	mov.w	ip, #0
  405148:	ddb4      	ble.n	4050b4 <__ieee754_log+0x3c>
  40514a:	4632      	mov	r2, r6
  40514c:	463b      	mov	r3, r7
  40514e:	4630      	mov	r0, r6
  405150:	4639      	mov	r1, r7
  405152:	f000 f993 	bl	40547c <__adddf3>
  405156:	b005      	add	sp, #20
  405158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40515c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  405160:	f000 f98c 	bl	40547c <__adddf3>
  405164:	4602      	mov	r2, r0
  405166:	460b      	mov	r3, r1
  405168:	4650      	mov	r0, sl
  40516a:	4659      	mov	r1, fp
  40516c:	f000 fc62 	bl	405a34 <__aeabi_ddiv>
  405170:	4606      	mov	r6, r0
  405172:	4620      	mov	r0, r4
  405174:	460f      	mov	r7, r1
  405176:	f000 facd 	bl	405714 <__aeabi_i2d>
  40517a:	4632      	mov	r2, r6
  40517c:	e9cd 0100 	strd	r0, r1, [sp]
  405180:	463b      	mov	r3, r7
  405182:	4630      	mov	r0, r6
  405184:	4639      	mov	r1, r7
  405186:	e9cd 6702 	strd	r6, r7, [sp, #8]
  40518a:	f000 fb29 	bl	4057e0 <__aeabi_dmul>
  40518e:	4602      	mov	r2, r0
  405190:	460b      	mov	r3, r1
  405192:	4680      	mov	r8, r0
  405194:	4689      	mov	r9, r1
  405196:	f000 fb23 	bl	4057e0 <__aeabi_dmul>
  40519a:	a387      	add	r3, pc, #540	; (adr r3, 4053b8 <__ieee754_log+0x340>)
  40519c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051a0:	4606      	mov	r6, r0
  4051a2:	460f      	mov	r7, r1
  4051a4:	f000 fb1c 	bl	4057e0 <__aeabi_dmul>
  4051a8:	a385      	add	r3, pc, #532	; (adr r3, 4053c0 <__ieee754_log+0x348>)
  4051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051ae:	f000 f965 	bl	40547c <__adddf3>
  4051b2:	4632      	mov	r2, r6
  4051b4:	463b      	mov	r3, r7
  4051b6:	f000 fb13 	bl	4057e0 <__aeabi_dmul>
  4051ba:	a383      	add	r3, pc, #524	; (adr r3, 4053c8 <__ieee754_log+0x350>)
  4051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051c0:	f000 f95c 	bl	40547c <__adddf3>
  4051c4:	4632      	mov	r2, r6
  4051c6:	463b      	mov	r3, r7
  4051c8:	f000 fb0a 	bl	4057e0 <__aeabi_dmul>
  4051cc:	a380      	add	r3, pc, #512	; (adr r3, 4053d0 <__ieee754_log+0x358>)
  4051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051d2:	f000 f953 	bl	40547c <__adddf3>
  4051d6:	4642      	mov	r2, r8
  4051d8:	464b      	mov	r3, r9
  4051da:	f000 fb01 	bl	4057e0 <__aeabi_dmul>
  4051de:	a37e      	add	r3, pc, #504	; (adr r3, 4053d8 <__ieee754_log+0x360>)
  4051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051e4:	4680      	mov	r8, r0
  4051e6:	4689      	mov	r9, r1
  4051e8:	4630      	mov	r0, r6
  4051ea:	4639      	mov	r1, r7
  4051ec:	f000 faf8 	bl	4057e0 <__aeabi_dmul>
  4051f0:	a37b      	add	r3, pc, #492	; (adr r3, 4053e0 <__ieee754_log+0x368>)
  4051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051f6:	f000 f941 	bl	40547c <__adddf3>
  4051fa:	4632      	mov	r2, r6
  4051fc:	463b      	mov	r3, r7
  4051fe:	f000 faef 	bl	4057e0 <__aeabi_dmul>
  405202:	a379      	add	r3, pc, #484	; (adr r3, 4053e8 <__ieee754_log+0x370>)
  405204:	e9d3 2300 	ldrd	r2, r3, [r3]
  405208:	f000 f938 	bl	40547c <__adddf3>
  40520c:	4632      	mov	r2, r6
  40520e:	463b      	mov	r3, r7
  405210:	f000 fae6 	bl	4057e0 <__aeabi_dmul>
  405214:	460b      	mov	r3, r1
  405216:	4602      	mov	r2, r0
  405218:	4649      	mov	r1, r9
  40521a:	4640      	mov	r0, r8
  40521c:	f000 f92e 	bl	40547c <__adddf3>
  405220:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
  405224:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
  405228:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
  40522c:	3551      	adds	r5, #81	; 0x51
  40522e:	431d      	orrs	r5, r3
  405230:	2d00      	cmp	r5, #0
  405232:	4680      	mov	r8, r0
  405234:	4689      	mov	r9, r1
  405236:	dd56      	ble.n	4052e6 <__ieee754_log+0x26e>
  405238:	2200      	movs	r2, #0
  40523a:	4b72      	ldr	r3, [pc, #456]	; (405404 <__ieee754_log+0x38c>)
  40523c:	4650      	mov	r0, sl
  40523e:	4659      	mov	r1, fp
  405240:	f000 face 	bl	4057e0 <__aeabi_dmul>
  405244:	4652      	mov	r2, sl
  405246:	465b      	mov	r3, fp
  405248:	f000 faca 	bl	4057e0 <__aeabi_dmul>
  40524c:	4606      	mov	r6, r0
  40524e:	460f      	mov	r7, r1
  405250:	2c00      	cmp	r4, #0
  405252:	d168      	bne.n	405326 <__ieee754_log+0x2ae>
  405254:	4632      	mov	r2, r6
  405256:	463b      	mov	r3, r7
  405258:	4640      	mov	r0, r8
  40525a:	4649      	mov	r1, r9
  40525c:	f000 f90e 	bl	40547c <__adddf3>
  405260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405264:	f000 fabc 	bl	4057e0 <__aeabi_dmul>
  405268:	4602      	mov	r2, r0
  40526a:	460b      	mov	r3, r1
  40526c:	4630      	mov	r0, r6
  40526e:	4639      	mov	r1, r7
  405270:	f000 f902 	bl	405478 <__aeabi_dsub>
  405274:	4602      	mov	r2, r0
  405276:	460b      	mov	r3, r1
  405278:	4650      	mov	r0, sl
  40527a:	4659      	mov	r1, fp
  40527c:	f000 f8fc 	bl	405478 <__aeabi_dsub>
  405280:	b005      	add	sp, #20
  405282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405286:	2200      	movs	r2, #0
  405288:	2300      	movs	r3, #0
  40528a:	2000      	movs	r0, #0
  40528c:	495e      	ldr	r1, [pc, #376]	; (405408 <__ieee754_log+0x390>)
  40528e:	f000 fbd1 	bl	405a34 <__aeabi_ddiv>
  405292:	b005      	add	sp, #20
  405294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405298:	a355      	add	r3, pc, #340	; (adr r3, 4053f0 <__ieee754_log+0x378>)
  40529a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40529e:	4650      	mov	r0, sl
  4052a0:	4659      	mov	r1, fp
  4052a2:	f000 fa9d 	bl	4057e0 <__aeabi_dmul>
  4052a6:	4602      	mov	r2, r0
  4052a8:	460b      	mov	r3, r1
  4052aa:	2000      	movs	r0, #0
  4052ac:	4955      	ldr	r1, [pc, #340]	; (405404 <__ieee754_log+0x38c>)
  4052ae:	f000 f8e3 	bl	405478 <__aeabi_dsub>
  4052b2:	4652      	mov	r2, sl
  4052b4:	4606      	mov	r6, r0
  4052b6:	460f      	mov	r7, r1
  4052b8:	465b      	mov	r3, fp
  4052ba:	4650      	mov	r0, sl
  4052bc:	4659      	mov	r1, fp
  4052be:	f000 fa8f 	bl	4057e0 <__aeabi_dmul>
  4052c2:	4602      	mov	r2, r0
  4052c4:	460b      	mov	r3, r1
  4052c6:	4630      	mov	r0, r6
  4052c8:	4639      	mov	r1, r7
  4052ca:	f000 fa89 	bl	4057e0 <__aeabi_dmul>
  4052ce:	4606      	mov	r6, r0
  4052d0:	460f      	mov	r7, r1
  4052d2:	2c00      	cmp	r4, #0
  4052d4:	f040 809a 	bne.w	40540c <__ieee754_log+0x394>
  4052d8:	4602      	mov	r2, r0
  4052da:	460b      	mov	r3, r1
  4052dc:	4650      	mov	r0, sl
  4052de:	4659      	mov	r1, fp
  4052e0:	f000 f8ca 	bl	405478 <__aeabi_dsub>
  4052e4:	e737      	b.n	405156 <__ieee754_log+0xde>
  4052e6:	2c00      	cmp	r4, #0
  4052e8:	f000 80a4 	beq.w	405434 <__ieee754_log+0x3bc>
  4052ec:	a32e      	add	r3, pc, #184	; (adr r3, 4053a8 <__ieee754_log+0x330>)
  4052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052f2:	e9dd 0100 	ldrd	r0, r1, [sp]
  4052f6:	f000 fa73 	bl	4057e0 <__aeabi_dmul>
  4052fa:	4642      	mov	r2, r8
  4052fc:	464b      	mov	r3, r9
  4052fe:	4604      	mov	r4, r0
  405300:	460d      	mov	r5, r1
  405302:	4650      	mov	r0, sl
  405304:	4659      	mov	r1, fp
  405306:	f000 f8b7 	bl	405478 <__aeabi_dsub>
  40530a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40530e:	f000 fa67 	bl	4057e0 <__aeabi_dmul>
  405312:	a327      	add	r3, pc, #156	; (adr r3, 4053b0 <__ieee754_log+0x338>)
  405314:	e9d3 2300 	ldrd	r2, r3, [r3]
  405318:	4606      	mov	r6, r0
  40531a:	460f      	mov	r7, r1
  40531c:	e9dd 0100 	ldrd	r0, r1, [sp]
  405320:	f000 fa5e 	bl	4057e0 <__aeabi_dmul>
  405324:	e021      	b.n	40536a <__ieee754_log+0x2f2>
  405326:	a320      	add	r3, pc, #128	; (adr r3, 4053a8 <__ieee754_log+0x330>)
  405328:	e9d3 2300 	ldrd	r2, r3, [r3]
  40532c:	e9dd 0100 	ldrd	r0, r1, [sp]
  405330:	f000 fa56 	bl	4057e0 <__aeabi_dmul>
  405334:	4632      	mov	r2, r6
  405336:	463b      	mov	r3, r7
  405338:	4604      	mov	r4, r0
  40533a:	460d      	mov	r5, r1
  40533c:	4640      	mov	r0, r8
  40533e:	4649      	mov	r1, r9
  405340:	f000 f89c 	bl	40547c <__adddf3>
  405344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405348:	f000 fa4a 	bl	4057e0 <__aeabi_dmul>
  40534c:	a318      	add	r3, pc, #96	; (adr r3, 4053b0 <__ieee754_log+0x338>)
  40534e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405352:	4680      	mov	r8, r0
  405354:	4689      	mov	r9, r1
  405356:	e9dd 0100 	ldrd	r0, r1, [sp]
  40535a:	f000 fa41 	bl	4057e0 <__aeabi_dmul>
  40535e:	4602      	mov	r2, r0
  405360:	460b      	mov	r3, r1
  405362:	4640      	mov	r0, r8
  405364:	4649      	mov	r1, r9
  405366:	f000 f889 	bl	40547c <__adddf3>
  40536a:	4602      	mov	r2, r0
  40536c:	460b      	mov	r3, r1
  40536e:	4630      	mov	r0, r6
  405370:	4639      	mov	r1, r7
  405372:	f000 f881 	bl	405478 <__aeabi_dsub>
  405376:	4652      	mov	r2, sl
  405378:	465b      	mov	r3, fp
  40537a:	f000 f87d 	bl	405478 <__aeabi_dsub>
  40537e:	4602      	mov	r2, r0
  405380:	460b      	mov	r3, r1
  405382:	4620      	mov	r0, r4
  405384:	4629      	mov	r1, r5
  405386:	f000 f877 	bl	405478 <__aeabi_dsub>
  40538a:	b005      	add	sp, #20
  40538c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405390:	4602      	mov	r2, r0
  405392:	460b      	mov	r3, r1
  405394:	f000 f870 	bl	405478 <__aeabi_dsub>
  405398:	2200      	movs	r2, #0
  40539a:	2300      	movs	r3, #0
  40539c:	f000 fb4a 	bl	405a34 <__aeabi_ddiv>
  4053a0:	e6d9      	b.n	405156 <__ieee754_log+0xde>
  4053a2:	2000      	movs	r0, #0
  4053a4:	2100      	movs	r1, #0
  4053a6:	e6d6      	b.n	405156 <__ieee754_log+0xde>
  4053a8:	fee00000 	.word	0xfee00000
  4053ac:	3fe62e42 	.word	0x3fe62e42
  4053b0:	35793c76 	.word	0x35793c76
  4053b4:	3dea39ef 	.word	0x3dea39ef
  4053b8:	df3e5244 	.word	0xdf3e5244
  4053bc:	3fc2f112 	.word	0x3fc2f112
  4053c0:	96cb03de 	.word	0x96cb03de
  4053c4:	3fc74664 	.word	0x3fc74664
  4053c8:	94229359 	.word	0x94229359
  4053cc:	3fd24924 	.word	0x3fd24924
  4053d0:	55555593 	.word	0x55555593
  4053d4:	3fe55555 	.word	0x3fe55555
  4053d8:	d078c69f 	.word	0xd078c69f
  4053dc:	3fc39a09 	.word	0x3fc39a09
  4053e0:	1d8e78af 	.word	0x1d8e78af
  4053e4:	3fcc71c5 	.word	0x3fcc71c5
  4053e8:	9997fa04 	.word	0x9997fa04
  4053ec:	3fd99999 	.word	0x3fd99999
  4053f0:	55555555 	.word	0x55555555
  4053f4:	3fd55555 	.word	0x3fd55555
  4053f8:	43500000 	.word	0x43500000
  4053fc:	7fefffff 	.word	0x7fefffff
  405400:	3ff00000 	.word	0x3ff00000
  405404:	3fe00000 	.word	0x3fe00000
  405408:	c3500000 	.word	0xc3500000
  40540c:	4620      	mov	r0, r4
  40540e:	f000 f981 	bl	405714 <__aeabi_i2d>
  405412:	a30f      	add	r3, pc, #60	; (adr r3, 405450 <__ieee754_log+0x3d8>)
  405414:	e9d3 2300 	ldrd	r2, r3, [r3]
  405418:	4680      	mov	r8, r0
  40541a:	4689      	mov	r9, r1
  40541c:	f000 f9e0 	bl	4057e0 <__aeabi_dmul>
  405420:	a30d      	add	r3, pc, #52	; (adr r3, 405458 <__ieee754_log+0x3e0>)
  405422:	e9d3 2300 	ldrd	r2, r3, [r3]
  405426:	4604      	mov	r4, r0
  405428:	460d      	mov	r5, r1
  40542a:	4640      	mov	r0, r8
  40542c:	4649      	mov	r1, r9
  40542e:	f000 f9d7 	bl	4057e0 <__aeabi_dmul>
  405432:	e79a      	b.n	40536a <__ieee754_log+0x2f2>
  405434:	4602      	mov	r2, r0
  405436:	460b      	mov	r3, r1
  405438:	4650      	mov	r0, sl
  40543a:	4659      	mov	r1, fp
  40543c:	f000 f81c 	bl	405478 <__aeabi_dsub>
  405440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405444:	f000 f9cc 	bl	4057e0 <__aeabi_dmul>
  405448:	e714      	b.n	405274 <__ieee754_log+0x1fc>
  40544a:	bf00      	nop
  40544c:	f3af 8000 	nop.w
  405450:	fee00000 	.word	0xfee00000
  405454:	3fe62e42 	.word	0x3fe62e42
  405458:	35793c76 	.word	0x35793c76
  40545c:	3dea39ef 	.word	0x3dea39ef

00405460 <matherr>:
  405460:	2000      	movs	r0, #0
  405462:	4770      	bx	lr

00405464 <nan>:
  405464:	2000      	movs	r0, #0
  405466:	4901      	ldr	r1, [pc, #4]	; (40546c <nan+0x8>)
  405468:	4770      	bx	lr
  40546a:	bf00      	nop
  40546c:	7ff80000 	.word	0x7ff80000

00405470 <__aeabi_drsub>:
  405470:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405474:	e002      	b.n	40547c <__adddf3>
  405476:	bf00      	nop

00405478 <__aeabi_dsub>:
  405478:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040547c <__adddf3>:
  40547c:	b530      	push	{r4, r5, lr}
  40547e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405482:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405486:	ea94 0f05 	teq	r4, r5
  40548a:	bf08      	it	eq
  40548c:	ea90 0f02 	teqeq	r0, r2
  405490:	bf1f      	itttt	ne
  405492:	ea54 0c00 	orrsne.w	ip, r4, r0
  405496:	ea55 0c02 	orrsne.w	ip, r5, r2
  40549a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40549e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4054a2:	f000 80e2 	beq.w	40566a <__adddf3+0x1ee>
  4054a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4054aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4054ae:	bfb8      	it	lt
  4054b0:	426d      	neglt	r5, r5
  4054b2:	dd0c      	ble.n	4054ce <__adddf3+0x52>
  4054b4:	442c      	add	r4, r5
  4054b6:	ea80 0202 	eor.w	r2, r0, r2
  4054ba:	ea81 0303 	eor.w	r3, r1, r3
  4054be:	ea82 0000 	eor.w	r0, r2, r0
  4054c2:	ea83 0101 	eor.w	r1, r3, r1
  4054c6:	ea80 0202 	eor.w	r2, r0, r2
  4054ca:	ea81 0303 	eor.w	r3, r1, r3
  4054ce:	2d36      	cmp	r5, #54	; 0x36
  4054d0:	bf88      	it	hi
  4054d2:	bd30      	pophi	{r4, r5, pc}
  4054d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4054d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4054dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4054e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4054e4:	d002      	beq.n	4054ec <__adddf3+0x70>
  4054e6:	4240      	negs	r0, r0
  4054e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4054ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4054f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4054f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4054f8:	d002      	beq.n	405500 <__adddf3+0x84>
  4054fa:	4252      	negs	r2, r2
  4054fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405500:	ea94 0f05 	teq	r4, r5
  405504:	f000 80a7 	beq.w	405656 <__adddf3+0x1da>
  405508:	f1a4 0401 	sub.w	r4, r4, #1
  40550c:	f1d5 0e20 	rsbs	lr, r5, #32
  405510:	db0d      	blt.n	40552e <__adddf3+0xb2>
  405512:	fa02 fc0e 	lsl.w	ip, r2, lr
  405516:	fa22 f205 	lsr.w	r2, r2, r5
  40551a:	1880      	adds	r0, r0, r2
  40551c:	f141 0100 	adc.w	r1, r1, #0
  405520:	fa03 f20e 	lsl.w	r2, r3, lr
  405524:	1880      	adds	r0, r0, r2
  405526:	fa43 f305 	asr.w	r3, r3, r5
  40552a:	4159      	adcs	r1, r3
  40552c:	e00e      	b.n	40554c <__adddf3+0xd0>
  40552e:	f1a5 0520 	sub.w	r5, r5, #32
  405532:	f10e 0e20 	add.w	lr, lr, #32
  405536:	2a01      	cmp	r2, #1
  405538:	fa03 fc0e 	lsl.w	ip, r3, lr
  40553c:	bf28      	it	cs
  40553e:	f04c 0c02 	orrcs.w	ip, ip, #2
  405542:	fa43 f305 	asr.w	r3, r3, r5
  405546:	18c0      	adds	r0, r0, r3
  405548:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40554c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405550:	d507      	bpl.n	405562 <__adddf3+0xe6>
  405552:	f04f 0e00 	mov.w	lr, #0
  405556:	f1dc 0c00 	rsbs	ip, ip, #0
  40555a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40555e:	eb6e 0101 	sbc.w	r1, lr, r1
  405562:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405566:	d31b      	bcc.n	4055a0 <__adddf3+0x124>
  405568:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40556c:	d30c      	bcc.n	405588 <__adddf3+0x10c>
  40556e:	0849      	lsrs	r1, r1, #1
  405570:	ea5f 0030 	movs.w	r0, r0, rrx
  405574:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405578:	f104 0401 	add.w	r4, r4, #1
  40557c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405580:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405584:	f080 809a 	bcs.w	4056bc <__adddf3+0x240>
  405588:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40558c:	bf08      	it	eq
  40558e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405592:	f150 0000 	adcs.w	r0, r0, #0
  405596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40559a:	ea41 0105 	orr.w	r1, r1, r5
  40559e:	bd30      	pop	{r4, r5, pc}
  4055a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4055a4:	4140      	adcs	r0, r0
  4055a6:	eb41 0101 	adc.w	r1, r1, r1
  4055aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4055ae:	f1a4 0401 	sub.w	r4, r4, #1
  4055b2:	d1e9      	bne.n	405588 <__adddf3+0x10c>
  4055b4:	f091 0f00 	teq	r1, #0
  4055b8:	bf04      	itt	eq
  4055ba:	4601      	moveq	r1, r0
  4055bc:	2000      	moveq	r0, #0
  4055be:	fab1 f381 	clz	r3, r1
  4055c2:	bf08      	it	eq
  4055c4:	3320      	addeq	r3, #32
  4055c6:	f1a3 030b 	sub.w	r3, r3, #11
  4055ca:	f1b3 0220 	subs.w	r2, r3, #32
  4055ce:	da0c      	bge.n	4055ea <__adddf3+0x16e>
  4055d0:	320c      	adds	r2, #12
  4055d2:	dd08      	ble.n	4055e6 <__adddf3+0x16a>
  4055d4:	f102 0c14 	add.w	ip, r2, #20
  4055d8:	f1c2 020c 	rsb	r2, r2, #12
  4055dc:	fa01 f00c 	lsl.w	r0, r1, ip
  4055e0:	fa21 f102 	lsr.w	r1, r1, r2
  4055e4:	e00c      	b.n	405600 <__adddf3+0x184>
  4055e6:	f102 0214 	add.w	r2, r2, #20
  4055ea:	bfd8      	it	le
  4055ec:	f1c2 0c20 	rsble	ip, r2, #32
  4055f0:	fa01 f102 	lsl.w	r1, r1, r2
  4055f4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4055f8:	bfdc      	itt	le
  4055fa:	ea41 010c 	orrle.w	r1, r1, ip
  4055fe:	4090      	lslle	r0, r2
  405600:	1ae4      	subs	r4, r4, r3
  405602:	bfa2      	ittt	ge
  405604:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405608:	4329      	orrge	r1, r5
  40560a:	bd30      	popge	{r4, r5, pc}
  40560c:	ea6f 0404 	mvn.w	r4, r4
  405610:	3c1f      	subs	r4, #31
  405612:	da1c      	bge.n	40564e <__adddf3+0x1d2>
  405614:	340c      	adds	r4, #12
  405616:	dc0e      	bgt.n	405636 <__adddf3+0x1ba>
  405618:	f104 0414 	add.w	r4, r4, #20
  40561c:	f1c4 0220 	rsb	r2, r4, #32
  405620:	fa20 f004 	lsr.w	r0, r0, r4
  405624:	fa01 f302 	lsl.w	r3, r1, r2
  405628:	ea40 0003 	orr.w	r0, r0, r3
  40562c:	fa21 f304 	lsr.w	r3, r1, r4
  405630:	ea45 0103 	orr.w	r1, r5, r3
  405634:	bd30      	pop	{r4, r5, pc}
  405636:	f1c4 040c 	rsb	r4, r4, #12
  40563a:	f1c4 0220 	rsb	r2, r4, #32
  40563e:	fa20 f002 	lsr.w	r0, r0, r2
  405642:	fa01 f304 	lsl.w	r3, r1, r4
  405646:	ea40 0003 	orr.w	r0, r0, r3
  40564a:	4629      	mov	r1, r5
  40564c:	bd30      	pop	{r4, r5, pc}
  40564e:	fa21 f004 	lsr.w	r0, r1, r4
  405652:	4629      	mov	r1, r5
  405654:	bd30      	pop	{r4, r5, pc}
  405656:	f094 0f00 	teq	r4, #0
  40565a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40565e:	bf06      	itte	eq
  405660:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405664:	3401      	addeq	r4, #1
  405666:	3d01      	subne	r5, #1
  405668:	e74e      	b.n	405508 <__adddf3+0x8c>
  40566a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40566e:	bf18      	it	ne
  405670:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405674:	d029      	beq.n	4056ca <__adddf3+0x24e>
  405676:	ea94 0f05 	teq	r4, r5
  40567a:	bf08      	it	eq
  40567c:	ea90 0f02 	teqeq	r0, r2
  405680:	d005      	beq.n	40568e <__adddf3+0x212>
  405682:	ea54 0c00 	orrs.w	ip, r4, r0
  405686:	bf04      	itt	eq
  405688:	4619      	moveq	r1, r3
  40568a:	4610      	moveq	r0, r2
  40568c:	bd30      	pop	{r4, r5, pc}
  40568e:	ea91 0f03 	teq	r1, r3
  405692:	bf1e      	ittt	ne
  405694:	2100      	movne	r1, #0
  405696:	2000      	movne	r0, #0
  405698:	bd30      	popne	{r4, r5, pc}
  40569a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40569e:	d105      	bne.n	4056ac <__adddf3+0x230>
  4056a0:	0040      	lsls	r0, r0, #1
  4056a2:	4149      	adcs	r1, r1
  4056a4:	bf28      	it	cs
  4056a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4056aa:	bd30      	pop	{r4, r5, pc}
  4056ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4056b0:	bf3c      	itt	cc
  4056b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4056b6:	bd30      	popcc	{r4, r5, pc}
  4056b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4056bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4056c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4056c4:	f04f 0000 	mov.w	r0, #0
  4056c8:	bd30      	pop	{r4, r5, pc}
  4056ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4056ce:	bf1a      	itte	ne
  4056d0:	4619      	movne	r1, r3
  4056d2:	4610      	movne	r0, r2
  4056d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4056d8:	bf1c      	itt	ne
  4056da:	460b      	movne	r3, r1
  4056dc:	4602      	movne	r2, r0
  4056de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4056e2:	bf06      	itte	eq
  4056e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4056e8:	ea91 0f03 	teqeq	r1, r3
  4056ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4056f0:	bd30      	pop	{r4, r5, pc}
  4056f2:	bf00      	nop

004056f4 <__aeabi_ui2d>:
  4056f4:	f090 0f00 	teq	r0, #0
  4056f8:	bf04      	itt	eq
  4056fa:	2100      	moveq	r1, #0
  4056fc:	4770      	bxeq	lr
  4056fe:	b530      	push	{r4, r5, lr}
  405700:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405704:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405708:	f04f 0500 	mov.w	r5, #0
  40570c:	f04f 0100 	mov.w	r1, #0
  405710:	e750      	b.n	4055b4 <__adddf3+0x138>
  405712:	bf00      	nop

00405714 <__aeabi_i2d>:
  405714:	f090 0f00 	teq	r0, #0
  405718:	bf04      	itt	eq
  40571a:	2100      	moveq	r1, #0
  40571c:	4770      	bxeq	lr
  40571e:	b530      	push	{r4, r5, lr}
  405720:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405724:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405728:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40572c:	bf48      	it	mi
  40572e:	4240      	negmi	r0, r0
  405730:	f04f 0100 	mov.w	r1, #0
  405734:	e73e      	b.n	4055b4 <__adddf3+0x138>
  405736:	bf00      	nop

00405738 <__aeabi_f2d>:
  405738:	0042      	lsls	r2, r0, #1
  40573a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40573e:	ea4f 0131 	mov.w	r1, r1, rrx
  405742:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405746:	bf1f      	itttt	ne
  405748:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40574c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405750:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405754:	4770      	bxne	lr
  405756:	f092 0f00 	teq	r2, #0
  40575a:	bf14      	ite	ne
  40575c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405760:	4770      	bxeq	lr
  405762:	b530      	push	{r4, r5, lr}
  405764:	f44f 7460 	mov.w	r4, #896	; 0x380
  405768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40576c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405770:	e720      	b.n	4055b4 <__adddf3+0x138>
  405772:	bf00      	nop

00405774 <__aeabi_ul2d>:
  405774:	ea50 0201 	orrs.w	r2, r0, r1
  405778:	bf08      	it	eq
  40577a:	4770      	bxeq	lr
  40577c:	b530      	push	{r4, r5, lr}
  40577e:	f04f 0500 	mov.w	r5, #0
  405782:	e00a      	b.n	40579a <__aeabi_l2d+0x16>

00405784 <__aeabi_l2d>:
  405784:	ea50 0201 	orrs.w	r2, r0, r1
  405788:	bf08      	it	eq
  40578a:	4770      	bxeq	lr
  40578c:	b530      	push	{r4, r5, lr}
  40578e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405792:	d502      	bpl.n	40579a <__aeabi_l2d+0x16>
  405794:	4240      	negs	r0, r0
  405796:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40579a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40579e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4057a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4057a6:	f43f aedc 	beq.w	405562 <__adddf3+0xe6>
  4057aa:	f04f 0203 	mov.w	r2, #3
  4057ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4057b2:	bf18      	it	ne
  4057b4:	3203      	addne	r2, #3
  4057b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4057ba:	bf18      	it	ne
  4057bc:	3203      	addne	r2, #3
  4057be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4057c2:	f1c2 0320 	rsb	r3, r2, #32
  4057c6:	fa00 fc03 	lsl.w	ip, r0, r3
  4057ca:	fa20 f002 	lsr.w	r0, r0, r2
  4057ce:	fa01 fe03 	lsl.w	lr, r1, r3
  4057d2:	ea40 000e 	orr.w	r0, r0, lr
  4057d6:	fa21 f102 	lsr.w	r1, r1, r2
  4057da:	4414      	add	r4, r2
  4057dc:	e6c1      	b.n	405562 <__adddf3+0xe6>
  4057de:	bf00      	nop

004057e0 <__aeabi_dmul>:
  4057e0:	b570      	push	{r4, r5, r6, lr}
  4057e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4057e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4057ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4057ee:	bf1d      	ittte	ne
  4057f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4057f4:	ea94 0f0c 	teqne	r4, ip
  4057f8:	ea95 0f0c 	teqne	r5, ip
  4057fc:	f000 f8de 	bleq	4059bc <__aeabi_dmul+0x1dc>
  405800:	442c      	add	r4, r5
  405802:	ea81 0603 	eor.w	r6, r1, r3
  405806:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40580a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40580e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405812:	bf18      	it	ne
  405814:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40581c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405820:	d038      	beq.n	405894 <__aeabi_dmul+0xb4>
  405822:	fba0 ce02 	umull	ip, lr, r0, r2
  405826:	f04f 0500 	mov.w	r5, #0
  40582a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40582e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405832:	fbe0 e503 	umlal	lr, r5, r0, r3
  405836:	f04f 0600 	mov.w	r6, #0
  40583a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40583e:	f09c 0f00 	teq	ip, #0
  405842:	bf18      	it	ne
  405844:	f04e 0e01 	orrne.w	lr, lr, #1
  405848:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40584c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405850:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405854:	d204      	bcs.n	405860 <__aeabi_dmul+0x80>
  405856:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40585a:	416d      	adcs	r5, r5
  40585c:	eb46 0606 	adc.w	r6, r6, r6
  405860:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405864:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405868:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40586c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405870:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405874:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405878:	bf88      	it	hi
  40587a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40587e:	d81e      	bhi.n	4058be <__aeabi_dmul+0xde>
  405880:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405884:	bf08      	it	eq
  405886:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40588a:	f150 0000 	adcs.w	r0, r0, #0
  40588e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405892:	bd70      	pop	{r4, r5, r6, pc}
  405894:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405898:	ea46 0101 	orr.w	r1, r6, r1
  40589c:	ea40 0002 	orr.w	r0, r0, r2
  4058a0:	ea81 0103 	eor.w	r1, r1, r3
  4058a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4058a8:	bfc2      	ittt	gt
  4058aa:	ebd4 050c 	rsbsgt	r5, r4, ip
  4058ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4058b2:	bd70      	popgt	{r4, r5, r6, pc}
  4058b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4058b8:	f04f 0e00 	mov.w	lr, #0
  4058bc:	3c01      	subs	r4, #1
  4058be:	f300 80ab 	bgt.w	405a18 <__aeabi_dmul+0x238>
  4058c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4058c6:	bfde      	ittt	le
  4058c8:	2000      	movle	r0, #0
  4058ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4058ce:	bd70      	pople	{r4, r5, r6, pc}
  4058d0:	f1c4 0400 	rsb	r4, r4, #0
  4058d4:	3c20      	subs	r4, #32
  4058d6:	da35      	bge.n	405944 <__aeabi_dmul+0x164>
  4058d8:	340c      	adds	r4, #12
  4058da:	dc1b      	bgt.n	405914 <__aeabi_dmul+0x134>
  4058dc:	f104 0414 	add.w	r4, r4, #20
  4058e0:	f1c4 0520 	rsb	r5, r4, #32
  4058e4:	fa00 f305 	lsl.w	r3, r0, r5
  4058e8:	fa20 f004 	lsr.w	r0, r0, r4
  4058ec:	fa01 f205 	lsl.w	r2, r1, r5
  4058f0:	ea40 0002 	orr.w	r0, r0, r2
  4058f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4058f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4058fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405900:	fa21 f604 	lsr.w	r6, r1, r4
  405904:	eb42 0106 	adc.w	r1, r2, r6
  405908:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40590c:	bf08      	it	eq
  40590e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405912:	bd70      	pop	{r4, r5, r6, pc}
  405914:	f1c4 040c 	rsb	r4, r4, #12
  405918:	f1c4 0520 	rsb	r5, r4, #32
  40591c:	fa00 f304 	lsl.w	r3, r0, r4
  405920:	fa20 f005 	lsr.w	r0, r0, r5
  405924:	fa01 f204 	lsl.w	r2, r1, r4
  405928:	ea40 0002 	orr.w	r0, r0, r2
  40592c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405930:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405934:	f141 0100 	adc.w	r1, r1, #0
  405938:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40593c:	bf08      	it	eq
  40593e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405942:	bd70      	pop	{r4, r5, r6, pc}
  405944:	f1c4 0520 	rsb	r5, r4, #32
  405948:	fa00 f205 	lsl.w	r2, r0, r5
  40594c:	ea4e 0e02 	orr.w	lr, lr, r2
  405950:	fa20 f304 	lsr.w	r3, r0, r4
  405954:	fa01 f205 	lsl.w	r2, r1, r5
  405958:	ea43 0302 	orr.w	r3, r3, r2
  40595c:	fa21 f004 	lsr.w	r0, r1, r4
  405960:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405964:	fa21 f204 	lsr.w	r2, r1, r4
  405968:	ea20 0002 	bic.w	r0, r0, r2
  40596c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405970:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405974:	bf08      	it	eq
  405976:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40597a:	bd70      	pop	{r4, r5, r6, pc}
  40597c:	f094 0f00 	teq	r4, #0
  405980:	d10f      	bne.n	4059a2 <__aeabi_dmul+0x1c2>
  405982:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405986:	0040      	lsls	r0, r0, #1
  405988:	eb41 0101 	adc.w	r1, r1, r1
  40598c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405990:	bf08      	it	eq
  405992:	3c01      	subeq	r4, #1
  405994:	d0f7      	beq.n	405986 <__aeabi_dmul+0x1a6>
  405996:	ea41 0106 	orr.w	r1, r1, r6
  40599a:	f095 0f00 	teq	r5, #0
  40599e:	bf18      	it	ne
  4059a0:	4770      	bxne	lr
  4059a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4059a6:	0052      	lsls	r2, r2, #1
  4059a8:	eb43 0303 	adc.w	r3, r3, r3
  4059ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4059b0:	bf08      	it	eq
  4059b2:	3d01      	subeq	r5, #1
  4059b4:	d0f7      	beq.n	4059a6 <__aeabi_dmul+0x1c6>
  4059b6:	ea43 0306 	orr.w	r3, r3, r6
  4059ba:	4770      	bx	lr
  4059bc:	ea94 0f0c 	teq	r4, ip
  4059c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4059c4:	bf18      	it	ne
  4059c6:	ea95 0f0c 	teqne	r5, ip
  4059ca:	d00c      	beq.n	4059e6 <__aeabi_dmul+0x206>
  4059cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4059d0:	bf18      	it	ne
  4059d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4059d6:	d1d1      	bne.n	40597c <__aeabi_dmul+0x19c>
  4059d8:	ea81 0103 	eor.w	r1, r1, r3
  4059dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4059e0:	f04f 0000 	mov.w	r0, #0
  4059e4:	bd70      	pop	{r4, r5, r6, pc}
  4059e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4059ea:	bf06      	itte	eq
  4059ec:	4610      	moveq	r0, r2
  4059ee:	4619      	moveq	r1, r3
  4059f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4059f4:	d019      	beq.n	405a2a <__aeabi_dmul+0x24a>
  4059f6:	ea94 0f0c 	teq	r4, ip
  4059fa:	d102      	bne.n	405a02 <__aeabi_dmul+0x222>
  4059fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405a00:	d113      	bne.n	405a2a <__aeabi_dmul+0x24a>
  405a02:	ea95 0f0c 	teq	r5, ip
  405a06:	d105      	bne.n	405a14 <__aeabi_dmul+0x234>
  405a08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405a0c:	bf1c      	itt	ne
  405a0e:	4610      	movne	r0, r2
  405a10:	4619      	movne	r1, r3
  405a12:	d10a      	bne.n	405a2a <__aeabi_dmul+0x24a>
  405a14:	ea81 0103 	eor.w	r1, r1, r3
  405a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405a1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405a20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405a24:	f04f 0000 	mov.w	r0, #0
  405a28:	bd70      	pop	{r4, r5, r6, pc}
  405a2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405a2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405a32:	bd70      	pop	{r4, r5, r6, pc}

00405a34 <__aeabi_ddiv>:
  405a34:	b570      	push	{r4, r5, r6, lr}
  405a36:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405a3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405a3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405a42:	bf1d      	ittte	ne
  405a44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405a48:	ea94 0f0c 	teqne	r4, ip
  405a4c:	ea95 0f0c 	teqne	r5, ip
  405a50:	f000 f8a7 	bleq	405ba2 <__aeabi_ddiv+0x16e>
  405a54:	eba4 0405 	sub.w	r4, r4, r5
  405a58:	ea81 0e03 	eor.w	lr, r1, r3
  405a5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405a60:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405a64:	f000 8088 	beq.w	405b78 <__aeabi_ddiv+0x144>
  405a68:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405a6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405a70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405a74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405a78:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405a7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405a80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405a84:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405a88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405a8c:	429d      	cmp	r5, r3
  405a8e:	bf08      	it	eq
  405a90:	4296      	cmpeq	r6, r2
  405a92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405a96:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405a9a:	d202      	bcs.n	405aa2 <__aeabi_ddiv+0x6e>
  405a9c:	085b      	lsrs	r3, r3, #1
  405a9e:	ea4f 0232 	mov.w	r2, r2, rrx
  405aa2:	1ab6      	subs	r6, r6, r2
  405aa4:	eb65 0503 	sbc.w	r5, r5, r3
  405aa8:	085b      	lsrs	r3, r3, #1
  405aaa:	ea4f 0232 	mov.w	r2, r2, rrx
  405aae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405ab2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405ab6:	ebb6 0e02 	subs.w	lr, r6, r2
  405aba:	eb75 0e03 	sbcs.w	lr, r5, r3
  405abe:	bf22      	ittt	cs
  405ac0:	1ab6      	subcs	r6, r6, r2
  405ac2:	4675      	movcs	r5, lr
  405ac4:	ea40 000c 	orrcs.w	r0, r0, ip
  405ac8:	085b      	lsrs	r3, r3, #1
  405aca:	ea4f 0232 	mov.w	r2, r2, rrx
  405ace:	ebb6 0e02 	subs.w	lr, r6, r2
  405ad2:	eb75 0e03 	sbcs.w	lr, r5, r3
  405ad6:	bf22      	ittt	cs
  405ad8:	1ab6      	subcs	r6, r6, r2
  405ada:	4675      	movcs	r5, lr
  405adc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405ae0:	085b      	lsrs	r3, r3, #1
  405ae2:	ea4f 0232 	mov.w	r2, r2, rrx
  405ae6:	ebb6 0e02 	subs.w	lr, r6, r2
  405aea:	eb75 0e03 	sbcs.w	lr, r5, r3
  405aee:	bf22      	ittt	cs
  405af0:	1ab6      	subcs	r6, r6, r2
  405af2:	4675      	movcs	r5, lr
  405af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405af8:	085b      	lsrs	r3, r3, #1
  405afa:	ea4f 0232 	mov.w	r2, r2, rrx
  405afe:	ebb6 0e02 	subs.w	lr, r6, r2
  405b02:	eb75 0e03 	sbcs.w	lr, r5, r3
  405b06:	bf22      	ittt	cs
  405b08:	1ab6      	subcs	r6, r6, r2
  405b0a:	4675      	movcs	r5, lr
  405b0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405b10:	ea55 0e06 	orrs.w	lr, r5, r6
  405b14:	d018      	beq.n	405b48 <__aeabi_ddiv+0x114>
  405b16:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405b1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405b1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405b22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405b26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405b2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405b2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405b32:	d1c0      	bne.n	405ab6 <__aeabi_ddiv+0x82>
  405b34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405b38:	d10b      	bne.n	405b52 <__aeabi_ddiv+0x11e>
  405b3a:	ea41 0100 	orr.w	r1, r1, r0
  405b3e:	f04f 0000 	mov.w	r0, #0
  405b42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405b46:	e7b6      	b.n	405ab6 <__aeabi_ddiv+0x82>
  405b48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405b4c:	bf04      	itt	eq
  405b4e:	4301      	orreq	r1, r0
  405b50:	2000      	moveq	r0, #0
  405b52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405b56:	bf88      	it	hi
  405b58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405b5c:	f63f aeaf 	bhi.w	4058be <__aeabi_dmul+0xde>
  405b60:	ebb5 0c03 	subs.w	ip, r5, r3
  405b64:	bf04      	itt	eq
  405b66:	ebb6 0c02 	subseq.w	ip, r6, r2
  405b6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405b6e:	f150 0000 	adcs.w	r0, r0, #0
  405b72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405b76:	bd70      	pop	{r4, r5, r6, pc}
  405b78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405b7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405b80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405b84:	bfc2      	ittt	gt
  405b86:	ebd4 050c 	rsbsgt	r5, r4, ip
  405b8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405b8e:	bd70      	popgt	{r4, r5, r6, pc}
  405b90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405b94:	f04f 0e00 	mov.w	lr, #0
  405b98:	3c01      	subs	r4, #1
  405b9a:	e690      	b.n	4058be <__aeabi_dmul+0xde>
  405b9c:	ea45 0e06 	orr.w	lr, r5, r6
  405ba0:	e68d      	b.n	4058be <__aeabi_dmul+0xde>
  405ba2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405ba6:	ea94 0f0c 	teq	r4, ip
  405baa:	bf08      	it	eq
  405bac:	ea95 0f0c 	teqeq	r5, ip
  405bb0:	f43f af3b 	beq.w	405a2a <__aeabi_dmul+0x24a>
  405bb4:	ea94 0f0c 	teq	r4, ip
  405bb8:	d10a      	bne.n	405bd0 <__aeabi_ddiv+0x19c>
  405bba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405bbe:	f47f af34 	bne.w	405a2a <__aeabi_dmul+0x24a>
  405bc2:	ea95 0f0c 	teq	r5, ip
  405bc6:	f47f af25 	bne.w	405a14 <__aeabi_dmul+0x234>
  405bca:	4610      	mov	r0, r2
  405bcc:	4619      	mov	r1, r3
  405bce:	e72c      	b.n	405a2a <__aeabi_dmul+0x24a>
  405bd0:	ea95 0f0c 	teq	r5, ip
  405bd4:	d106      	bne.n	405be4 <__aeabi_ddiv+0x1b0>
  405bd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405bda:	f43f aefd 	beq.w	4059d8 <__aeabi_dmul+0x1f8>
  405bde:	4610      	mov	r0, r2
  405be0:	4619      	mov	r1, r3
  405be2:	e722      	b.n	405a2a <__aeabi_dmul+0x24a>
  405be4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405be8:	bf18      	it	ne
  405bea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405bee:	f47f aec5 	bne.w	40597c <__aeabi_dmul+0x19c>
  405bf2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405bf6:	f47f af0d 	bne.w	405a14 <__aeabi_dmul+0x234>
  405bfa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405bfe:	f47f aeeb 	bne.w	4059d8 <__aeabi_dmul+0x1f8>
  405c02:	e712      	b.n	405a2a <__aeabi_dmul+0x24a>

00405c04 <__gedf2>:
  405c04:	f04f 3cff 	mov.w	ip, #4294967295
  405c08:	e006      	b.n	405c18 <__cmpdf2+0x4>
  405c0a:	bf00      	nop

00405c0c <__ledf2>:
  405c0c:	f04f 0c01 	mov.w	ip, #1
  405c10:	e002      	b.n	405c18 <__cmpdf2+0x4>
  405c12:	bf00      	nop

00405c14 <__cmpdf2>:
  405c14:	f04f 0c01 	mov.w	ip, #1
  405c18:	f84d cd04 	str.w	ip, [sp, #-4]!
  405c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405c24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405c28:	bf18      	it	ne
  405c2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405c2e:	d01b      	beq.n	405c68 <__cmpdf2+0x54>
  405c30:	b001      	add	sp, #4
  405c32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405c36:	bf0c      	ite	eq
  405c38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405c3c:	ea91 0f03 	teqne	r1, r3
  405c40:	bf02      	ittt	eq
  405c42:	ea90 0f02 	teqeq	r0, r2
  405c46:	2000      	moveq	r0, #0
  405c48:	4770      	bxeq	lr
  405c4a:	f110 0f00 	cmn.w	r0, #0
  405c4e:	ea91 0f03 	teq	r1, r3
  405c52:	bf58      	it	pl
  405c54:	4299      	cmppl	r1, r3
  405c56:	bf08      	it	eq
  405c58:	4290      	cmpeq	r0, r2
  405c5a:	bf2c      	ite	cs
  405c5c:	17d8      	asrcs	r0, r3, #31
  405c5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  405c62:	f040 0001 	orr.w	r0, r0, #1
  405c66:	4770      	bx	lr
  405c68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405c6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405c70:	d102      	bne.n	405c78 <__cmpdf2+0x64>
  405c72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405c76:	d107      	bne.n	405c88 <__cmpdf2+0x74>
  405c78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405c7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405c80:	d1d6      	bne.n	405c30 <__cmpdf2+0x1c>
  405c82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405c86:	d0d3      	beq.n	405c30 <__cmpdf2+0x1c>
  405c88:	f85d 0b04 	ldr.w	r0, [sp], #4
  405c8c:	4770      	bx	lr
  405c8e:	bf00      	nop

00405c90 <__aeabi_cdrcmple>:
  405c90:	4684      	mov	ip, r0
  405c92:	4610      	mov	r0, r2
  405c94:	4662      	mov	r2, ip
  405c96:	468c      	mov	ip, r1
  405c98:	4619      	mov	r1, r3
  405c9a:	4663      	mov	r3, ip
  405c9c:	e000      	b.n	405ca0 <__aeabi_cdcmpeq>
  405c9e:	bf00      	nop

00405ca0 <__aeabi_cdcmpeq>:
  405ca0:	b501      	push	{r0, lr}
  405ca2:	f7ff ffb7 	bl	405c14 <__cmpdf2>
  405ca6:	2800      	cmp	r0, #0
  405ca8:	bf48      	it	mi
  405caa:	f110 0f00 	cmnmi.w	r0, #0
  405cae:	bd01      	pop	{r0, pc}

00405cb0 <__aeabi_dcmpeq>:
  405cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
  405cb4:	f7ff fff4 	bl	405ca0 <__aeabi_cdcmpeq>
  405cb8:	bf0c      	ite	eq
  405cba:	2001      	moveq	r0, #1
  405cbc:	2000      	movne	r0, #0
  405cbe:	f85d fb08 	ldr.w	pc, [sp], #8
  405cc2:	bf00      	nop

00405cc4 <__aeabi_dcmplt>:
  405cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
  405cc8:	f7ff ffea 	bl	405ca0 <__aeabi_cdcmpeq>
  405ccc:	bf34      	ite	cc
  405cce:	2001      	movcc	r0, #1
  405cd0:	2000      	movcs	r0, #0
  405cd2:	f85d fb08 	ldr.w	pc, [sp], #8
  405cd6:	bf00      	nop

00405cd8 <__aeabi_dcmple>:
  405cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
  405cdc:	f7ff ffe0 	bl	405ca0 <__aeabi_cdcmpeq>
  405ce0:	bf94      	ite	ls
  405ce2:	2001      	movls	r0, #1
  405ce4:	2000      	movhi	r0, #0
  405ce6:	f85d fb08 	ldr.w	pc, [sp], #8
  405cea:	bf00      	nop

00405cec <__aeabi_dcmpge>:
  405cec:	f84d ed08 	str.w	lr, [sp, #-8]!
  405cf0:	f7ff ffce 	bl	405c90 <__aeabi_cdrcmple>
  405cf4:	bf94      	ite	ls
  405cf6:	2001      	movls	r0, #1
  405cf8:	2000      	movhi	r0, #0
  405cfa:	f85d fb08 	ldr.w	pc, [sp], #8
  405cfe:	bf00      	nop

00405d00 <__aeabi_dcmpgt>:
  405d00:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d04:	f7ff ffc4 	bl	405c90 <__aeabi_cdrcmple>
  405d08:	bf34      	ite	cc
  405d0a:	2001      	movcc	r0, #1
  405d0c:	2000      	movcs	r0, #0
  405d0e:	f85d fb08 	ldr.w	pc, [sp], #8
  405d12:	bf00      	nop

00405d14 <__aeabi_dcmpun>:
  405d14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405d1c:	d102      	bne.n	405d24 <__aeabi_dcmpun+0x10>
  405d1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405d22:	d10a      	bne.n	405d3a <__aeabi_dcmpun+0x26>
  405d24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405d2c:	d102      	bne.n	405d34 <__aeabi_dcmpun+0x20>
  405d2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405d32:	d102      	bne.n	405d3a <__aeabi_dcmpun+0x26>
  405d34:	f04f 0000 	mov.w	r0, #0
  405d38:	4770      	bx	lr
  405d3a:	f04f 0001 	mov.w	r0, #1
  405d3e:	4770      	bx	lr

00405d40 <__aeabi_d2f>:
  405d40:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405d44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405d48:	bf24      	itt	cs
  405d4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  405d4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405d52:	d90d      	bls.n	405d70 <__aeabi_d2f+0x30>
  405d54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405d58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405d5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405d60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405d64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405d68:	bf08      	it	eq
  405d6a:	f020 0001 	biceq.w	r0, r0, #1
  405d6e:	4770      	bx	lr
  405d70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405d74:	d121      	bne.n	405dba <__aeabi_d2f+0x7a>
  405d76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405d7a:	bfbc      	itt	lt
  405d7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405d80:	4770      	bxlt	lr
  405d82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405d86:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405d8a:	f1c2 0218 	rsb	r2, r2, #24
  405d8e:	f1c2 0c20 	rsb	ip, r2, #32
  405d92:	fa10 f30c 	lsls.w	r3, r0, ip
  405d96:	fa20 f002 	lsr.w	r0, r0, r2
  405d9a:	bf18      	it	ne
  405d9c:	f040 0001 	orrne.w	r0, r0, #1
  405da0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405da4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405da8:	fa03 fc0c 	lsl.w	ip, r3, ip
  405dac:	ea40 000c 	orr.w	r0, r0, ip
  405db0:	fa23 f302 	lsr.w	r3, r3, r2
  405db4:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405db8:	e7cc      	b.n	405d54 <__aeabi_d2f+0x14>
  405dba:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405dbe:	d107      	bne.n	405dd0 <__aeabi_d2f+0x90>
  405dc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405dc4:	bf1e      	ittt	ne
  405dc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405dca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405dce:	4770      	bxne	lr
  405dd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405ddc:	4770      	bx	lr
  405dde:	bf00      	nop

00405de0 <__aeabi_frsub>:
  405de0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405de4:	e002      	b.n	405dec <__addsf3>
  405de6:	bf00      	nop

00405de8 <__aeabi_fsub>:
  405de8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405dec <__addsf3>:
  405dec:	0042      	lsls	r2, r0, #1
  405dee:	bf1f      	itttt	ne
  405df0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405df4:	ea92 0f03 	teqne	r2, r3
  405df8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405dfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405e00:	d06a      	beq.n	405ed8 <__addsf3+0xec>
  405e02:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405e06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405e0a:	bfc1      	itttt	gt
  405e0c:	18d2      	addgt	r2, r2, r3
  405e0e:	4041      	eorgt	r1, r0
  405e10:	4048      	eorgt	r0, r1
  405e12:	4041      	eorgt	r1, r0
  405e14:	bfb8      	it	lt
  405e16:	425b      	neglt	r3, r3
  405e18:	2b19      	cmp	r3, #25
  405e1a:	bf88      	it	hi
  405e1c:	4770      	bxhi	lr
  405e1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405e22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405e26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405e2a:	bf18      	it	ne
  405e2c:	4240      	negne	r0, r0
  405e2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405e32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405e36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405e3a:	bf18      	it	ne
  405e3c:	4249      	negne	r1, r1
  405e3e:	ea92 0f03 	teq	r2, r3
  405e42:	d03f      	beq.n	405ec4 <__addsf3+0xd8>
  405e44:	f1a2 0201 	sub.w	r2, r2, #1
  405e48:	fa41 fc03 	asr.w	ip, r1, r3
  405e4c:	eb10 000c 	adds.w	r0, r0, ip
  405e50:	f1c3 0320 	rsb	r3, r3, #32
  405e54:	fa01 f103 	lsl.w	r1, r1, r3
  405e58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405e5c:	d502      	bpl.n	405e64 <__addsf3+0x78>
  405e5e:	4249      	negs	r1, r1
  405e60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405e64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405e68:	d313      	bcc.n	405e92 <__addsf3+0xa6>
  405e6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405e6e:	d306      	bcc.n	405e7e <__addsf3+0x92>
  405e70:	0840      	lsrs	r0, r0, #1
  405e72:	ea4f 0131 	mov.w	r1, r1, rrx
  405e76:	f102 0201 	add.w	r2, r2, #1
  405e7a:	2afe      	cmp	r2, #254	; 0xfe
  405e7c:	d251      	bcs.n	405f22 <__addsf3+0x136>
  405e7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405e82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405e86:	bf08      	it	eq
  405e88:	f020 0001 	biceq.w	r0, r0, #1
  405e8c:	ea40 0003 	orr.w	r0, r0, r3
  405e90:	4770      	bx	lr
  405e92:	0049      	lsls	r1, r1, #1
  405e94:	eb40 0000 	adc.w	r0, r0, r0
  405e98:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405e9c:	f1a2 0201 	sub.w	r2, r2, #1
  405ea0:	d1ed      	bne.n	405e7e <__addsf3+0x92>
  405ea2:	fab0 fc80 	clz	ip, r0
  405ea6:	f1ac 0c08 	sub.w	ip, ip, #8
  405eaa:	ebb2 020c 	subs.w	r2, r2, ip
  405eae:	fa00 f00c 	lsl.w	r0, r0, ip
  405eb2:	bfaa      	itet	ge
  405eb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405eb8:	4252      	neglt	r2, r2
  405eba:	4318      	orrge	r0, r3
  405ebc:	bfbc      	itt	lt
  405ebe:	40d0      	lsrlt	r0, r2
  405ec0:	4318      	orrlt	r0, r3
  405ec2:	4770      	bx	lr
  405ec4:	f092 0f00 	teq	r2, #0
  405ec8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405ecc:	bf06      	itte	eq
  405ece:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  405ed2:	3201      	addeq	r2, #1
  405ed4:	3b01      	subne	r3, #1
  405ed6:	e7b5      	b.n	405e44 <__addsf3+0x58>
  405ed8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405edc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405ee0:	bf18      	it	ne
  405ee2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405ee6:	d021      	beq.n	405f2c <__addsf3+0x140>
  405ee8:	ea92 0f03 	teq	r2, r3
  405eec:	d004      	beq.n	405ef8 <__addsf3+0x10c>
  405eee:	f092 0f00 	teq	r2, #0
  405ef2:	bf08      	it	eq
  405ef4:	4608      	moveq	r0, r1
  405ef6:	4770      	bx	lr
  405ef8:	ea90 0f01 	teq	r0, r1
  405efc:	bf1c      	itt	ne
  405efe:	2000      	movne	r0, #0
  405f00:	4770      	bxne	lr
  405f02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405f06:	d104      	bne.n	405f12 <__addsf3+0x126>
  405f08:	0040      	lsls	r0, r0, #1
  405f0a:	bf28      	it	cs
  405f0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405f10:	4770      	bx	lr
  405f12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405f16:	bf3c      	itt	cc
  405f18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405f1c:	4770      	bxcc	lr
  405f1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405f22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405f2a:	4770      	bx	lr
  405f2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405f30:	bf16      	itet	ne
  405f32:	4608      	movne	r0, r1
  405f34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405f38:	4601      	movne	r1, r0
  405f3a:	0242      	lsls	r2, r0, #9
  405f3c:	bf06      	itte	eq
  405f3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  405f42:	ea90 0f01 	teqeq	r0, r1
  405f46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405f4a:	4770      	bx	lr

00405f4c <__aeabi_ui2f>:
  405f4c:	f04f 0300 	mov.w	r3, #0
  405f50:	e004      	b.n	405f5c <__aeabi_i2f+0x8>
  405f52:	bf00      	nop

00405f54 <__aeabi_i2f>:
  405f54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405f58:	bf48      	it	mi
  405f5a:	4240      	negmi	r0, r0
  405f5c:	ea5f 0c00 	movs.w	ip, r0
  405f60:	bf08      	it	eq
  405f62:	4770      	bxeq	lr
  405f64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405f68:	4601      	mov	r1, r0
  405f6a:	f04f 0000 	mov.w	r0, #0
  405f6e:	e01c      	b.n	405faa <__aeabi_l2f+0x2a>

00405f70 <__aeabi_ul2f>:
  405f70:	ea50 0201 	orrs.w	r2, r0, r1
  405f74:	bf08      	it	eq
  405f76:	4770      	bxeq	lr
  405f78:	f04f 0300 	mov.w	r3, #0
  405f7c:	e00a      	b.n	405f94 <__aeabi_l2f+0x14>
  405f7e:	bf00      	nop

00405f80 <__aeabi_l2f>:
  405f80:	ea50 0201 	orrs.w	r2, r0, r1
  405f84:	bf08      	it	eq
  405f86:	4770      	bxeq	lr
  405f88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405f8c:	d502      	bpl.n	405f94 <__aeabi_l2f+0x14>
  405f8e:	4240      	negs	r0, r0
  405f90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405f94:	ea5f 0c01 	movs.w	ip, r1
  405f98:	bf02      	ittt	eq
  405f9a:	4684      	moveq	ip, r0
  405f9c:	4601      	moveq	r1, r0
  405f9e:	2000      	moveq	r0, #0
  405fa0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405fa4:	bf08      	it	eq
  405fa6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405faa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405fae:	fabc f28c 	clz	r2, ip
  405fb2:	3a08      	subs	r2, #8
  405fb4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405fb8:	db10      	blt.n	405fdc <__aeabi_l2f+0x5c>
  405fba:	fa01 fc02 	lsl.w	ip, r1, r2
  405fbe:	4463      	add	r3, ip
  405fc0:	fa00 fc02 	lsl.w	ip, r0, r2
  405fc4:	f1c2 0220 	rsb	r2, r2, #32
  405fc8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405fcc:	fa20 f202 	lsr.w	r2, r0, r2
  405fd0:	eb43 0002 	adc.w	r0, r3, r2
  405fd4:	bf08      	it	eq
  405fd6:	f020 0001 	biceq.w	r0, r0, #1
  405fda:	4770      	bx	lr
  405fdc:	f102 0220 	add.w	r2, r2, #32
  405fe0:	fa01 fc02 	lsl.w	ip, r1, r2
  405fe4:	f1c2 0220 	rsb	r2, r2, #32
  405fe8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405fec:	fa21 f202 	lsr.w	r2, r1, r2
  405ff0:	eb43 0002 	adc.w	r0, r3, r2
  405ff4:	bf08      	it	eq
  405ff6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405ffa:	4770      	bx	lr

00405ffc <__aeabi_fmul>:
  405ffc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406000:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  406004:	bf1e      	ittt	ne
  406006:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40600a:	ea92 0f0c 	teqne	r2, ip
  40600e:	ea93 0f0c 	teqne	r3, ip
  406012:	d06f      	beq.n	4060f4 <__aeabi_fmul+0xf8>
  406014:	441a      	add	r2, r3
  406016:	ea80 0c01 	eor.w	ip, r0, r1
  40601a:	0240      	lsls	r0, r0, #9
  40601c:	bf18      	it	ne
  40601e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  406022:	d01e      	beq.n	406062 <__aeabi_fmul+0x66>
  406024:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406028:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40602c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406030:	fba0 3101 	umull	r3, r1, r0, r1
  406034:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406038:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40603c:	bf3e      	ittt	cc
  40603e:	0049      	lslcc	r1, r1, #1
  406040:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  406044:	005b      	lslcc	r3, r3, #1
  406046:	ea40 0001 	orr.w	r0, r0, r1
  40604a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40604e:	2afd      	cmp	r2, #253	; 0xfd
  406050:	d81d      	bhi.n	40608e <__aeabi_fmul+0x92>
  406052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  406056:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40605a:	bf08      	it	eq
  40605c:	f020 0001 	biceq.w	r0, r0, #1
  406060:	4770      	bx	lr
  406062:	f090 0f00 	teq	r0, #0
  406066:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40606a:	bf08      	it	eq
  40606c:	0249      	lsleq	r1, r1, #9
  40606e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406072:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  406076:	3a7f      	subs	r2, #127	; 0x7f
  406078:	bfc2      	ittt	gt
  40607a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40607e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406082:	4770      	bxgt	lr
  406084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406088:	f04f 0300 	mov.w	r3, #0
  40608c:	3a01      	subs	r2, #1
  40608e:	dc5d      	bgt.n	40614c <__aeabi_fmul+0x150>
  406090:	f112 0f19 	cmn.w	r2, #25
  406094:	bfdc      	itt	le
  406096:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40609a:	4770      	bxle	lr
  40609c:	f1c2 0200 	rsb	r2, r2, #0
  4060a0:	0041      	lsls	r1, r0, #1
  4060a2:	fa21 f102 	lsr.w	r1, r1, r2
  4060a6:	f1c2 0220 	rsb	r2, r2, #32
  4060aa:	fa00 fc02 	lsl.w	ip, r0, r2
  4060ae:	ea5f 0031 	movs.w	r0, r1, rrx
  4060b2:	f140 0000 	adc.w	r0, r0, #0
  4060b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4060ba:	bf08      	it	eq
  4060bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4060c0:	4770      	bx	lr
  4060c2:	f092 0f00 	teq	r2, #0
  4060c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4060ca:	bf02      	ittt	eq
  4060cc:	0040      	lsleq	r0, r0, #1
  4060ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4060d2:	3a01      	subeq	r2, #1
  4060d4:	d0f9      	beq.n	4060ca <__aeabi_fmul+0xce>
  4060d6:	ea40 000c 	orr.w	r0, r0, ip
  4060da:	f093 0f00 	teq	r3, #0
  4060de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4060e2:	bf02      	ittt	eq
  4060e4:	0049      	lsleq	r1, r1, #1
  4060e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4060ea:	3b01      	subeq	r3, #1
  4060ec:	d0f9      	beq.n	4060e2 <__aeabi_fmul+0xe6>
  4060ee:	ea41 010c 	orr.w	r1, r1, ip
  4060f2:	e78f      	b.n	406014 <__aeabi_fmul+0x18>
  4060f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4060f8:	ea92 0f0c 	teq	r2, ip
  4060fc:	bf18      	it	ne
  4060fe:	ea93 0f0c 	teqne	r3, ip
  406102:	d00a      	beq.n	40611a <__aeabi_fmul+0x11e>
  406104:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406108:	bf18      	it	ne
  40610a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40610e:	d1d8      	bne.n	4060c2 <__aeabi_fmul+0xc6>
  406110:	ea80 0001 	eor.w	r0, r0, r1
  406114:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406118:	4770      	bx	lr
  40611a:	f090 0f00 	teq	r0, #0
  40611e:	bf17      	itett	ne
  406120:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  406124:	4608      	moveq	r0, r1
  406126:	f091 0f00 	teqne	r1, #0
  40612a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40612e:	d014      	beq.n	40615a <__aeabi_fmul+0x15e>
  406130:	ea92 0f0c 	teq	r2, ip
  406134:	d101      	bne.n	40613a <__aeabi_fmul+0x13e>
  406136:	0242      	lsls	r2, r0, #9
  406138:	d10f      	bne.n	40615a <__aeabi_fmul+0x15e>
  40613a:	ea93 0f0c 	teq	r3, ip
  40613e:	d103      	bne.n	406148 <__aeabi_fmul+0x14c>
  406140:	024b      	lsls	r3, r1, #9
  406142:	bf18      	it	ne
  406144:	4608      	movne	r0, r1
  406146:	d108      	bne.n	40615a <__aeabi_fmul+0x15e>
  406148:	ea80 0001 	eor.w	r0, r0, r1
  40614c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406150:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  406154:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406158:	4770      	bx	lr
  40615a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40615e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  406162:	4770      	bx	lr

00406164 <__aeabi_fdiv>:
  406164:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406168:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40616c:	bf1e      	ittt	ne
  40616e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406172:	ea92 0f0c 	teqne	r2, ip
  406176:	ea93 0f0c 	teqne	r3, ip
  40617a:	d069      	beq.n	406250 <__aeabi_fdiv+0xec>
  40617c:	eba2 0203 	sub.w	r2, r2, r3
  406180:	ea80 0c01 	eor.w	ip, r0, r1
  406184:	0249      	lsls	r1, r1, #9
  406186:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40618a:	d037      	beq.n	4061fc <__aeabi_fdiv+0x98>
  40618c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  406190:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  406194:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  406198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40619c:	428b      	cmp	r3, r1
  40619e:	bf38      	it	cc
  4061a0:	005b      	lslcc	r3, r3, #1
  4061a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4061a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4061aa:	428b      	cmp	r3, r1
  4061ac:	bf24      	itt	cs
  4061ae:	1a5b      	subcs	r3, r3, r1
  4061b0:	ea40 000c 	orrcs.w	r0, r0, ip
  4061b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4061b8:	bf24      	itt	cs
  4061ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4061be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4061c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4061c6:	bf24      	itt	cs
  4061c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  4061cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4061d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  4061d4:	bf24      	itt	cs
  4061d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  4061da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4061de:	011b      	lsls	r3, r3, #4
  4061e0:	bf18      	it	ne
  4061e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  4061e6:	d1e0      	bne.n	4061aa <__aeabi_fdiv+0x46>
  4061e8:	2afd      	cmp	r2, #253	; 0xfd
  4061ea:	f63f af50 	bhi.w	40608e <__aeabi_fmul+0x92>
  4061ee:	428b      	cmp	r3, r1
  4061f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4061f4:	bf08      	it	eq
  4061f6:	f020 0001 	biceq.w	r0, r0, #1
  4061fa:	4770      	bx	lr
  4061fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406200:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  406204:	327f      	adds	r2, #127	; 0x7f
  406206:	bfc2      	ittt	gt
  406208:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40620c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406210:	4770      	bxgt	lr
  406212:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406216:	f04f 0300 	mov.w	r3, #0
  40621a:	3a01      	subs	r2, #1
  40621c:	e737      	b.n	40608e <__aeabi_fmul+0x92>
  40621e:	f092 0f00 	teq	r2, #0
  406222:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406226:	bf02      	ittt	eq
  406228:	0040      	lsleq	r0, r0, #1
  40622a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40622e:	3a01      	subeq	r2, #1
  406230:	d0f9      	beq.n	406226 <__aeabi_fdiv+0xc2>
  406232:	ea40 000c 	orr.w	r0, r0, ip
  406236:	f093 0f00 	teq	r3, #0
  40623a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40623e:	bf02      	ittt	eq
  406240:	0049      	lsleq	r1, r1, #1
  406242:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406246:	3b01      	subeq	r3, #1
  406248:	d0f9      	beq.n	40623e <__aeabi_fdiv+0xda>
  40624a:	ea41 010c 	orr.w	r1, r1, ip
  40624e:	e795      	b.n	40617c <__aeabi_fdiv+0x18>
  406250:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406254:	ea92 0f0c 	teq	r2, ip
  406258:	d108      	bne.n	40626c <__aeabi_fdiv+0x108>
  40625a:	0242      	lsls	r2, r0, #9
  40625c:	f47f af7d 	bne.w	40615a <__aeabi_fmul+0x15e>
  406260:	ea93 0f0c 	teq	r3, ip
  406264:	f47f af70 	bne.w	406148 <__aeabi_fmul+0x14c>
  406268:	4608      	mov	r0, r1
  40626a:	e776      	b.n	40615a <__aeabi_fmul+0x15e>
  40626c:	ea93 0f0c 	teq	r3, ip
  406270:	d104      	bne.n	40627c <__aeabi_fdiv+0x118>
  406272:	024b      	lsls	r3, r1, #9
  406274:	f43f af4c 	beq.w	406110 <__aeabi_fmul+0x114>
  406278:	4608      	mov	r0, r1
  40627a:	e76e      	b.n	40615a <__aeabi_fmul+0x15e>
  40627c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406280:	bf18      	it	ne
  406282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406286:	d1ca      	bne.n	40621e <__aeabi_fdiv+0xba>
  406288:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40628c:	f47f af5c 	bne.w	406148 <__aeabi_fmul+0x14c>
  406290:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406294:	f47f af3c 	bne.w	406110 <__aeabi_fmul+0x114>
  406298:	e75f      	b.n	40615a <__aeabi_fmul+0x15e>
  40629a:	bf00      	nop

0040629c <__gesf2>:
  40629c:	f04f 3cff 	mov.w	ip, #4294967295
  4062a0:	e006      	b.n	4062b0 <__cmpsf2+0x4>
  4062a2:	bf00      	nop

004062a4 <__lesf2>:
  4062a4:	f04f 0c01 	mov.w	ip, #1
  4062a8:	e002      	b.n	4062b0 <__cmpsf2+0x4>
  4062aa:	bf00      	nop

004062ac <__cmpsf2>:
  4062ac:	f04f 0c01 	mov.w	ip, #1
  4062b0:	f84d cd04 	str.w	ip, [sp, #-4]!
  4062b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
  4062b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4062bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4062c0:	bf18      	it	ne
  4062c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4062c6:	d011      	beq.n	4062ec <__cmpsf2+0x40>
  4062c8:	b001      	add	sp, #4
  4062ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  4062ce:	bf18      	it	ne
  4062d0:	ea90 0f01 	teqne	r0, r1
  4062d4:	bf58      	it	pl
  4062d6:	ebb2 0003 	subspl.w	r0, r2, r3
  4062da:	bf88      	it	hi
  4062dc:	17c8      	asrhi	r0, r1, #31
  4062de:	bf38      	it	cc
  4062e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  4062e4:	bf18      	it	ne
  4062e6:	f040 0001 	orrne.w	r0, r0, #1
  4062ea:	4770      	bx	lr
  4062ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4062f0:	d102      	bne.n	4062f8 <__cmpsf2+0x4c>
  4062f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  4062f6:	d105      	bne.n	406304 <__cmpsf2+0x58>
  4062f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  4062fc:	d1e4      	bne.n	4062c8 <__cmpsf2+0x1c>
  4062fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  406302:	d0e1      	beq.n	4062c8 <__cmpsf2+0x1c>
  406304:	f85d 0b04 	ldr.w	r0, [sp], #4
  406308:	4770      	bx	lr
  40630a:	bf00      	nop

0040630c <__aeabi_cfrcmple>:
  40630c:	4684      	mov	ip, r0
  40630e:	4608      	mov	r0, r1
  406310:	4661      	mov	r1, ip
  406312:	e7ff      	b.n	406314 <__aeabi_cfcmpeq>

00406314 <__aeabi_cfcmpeq>:
  406314:	b50f      	push	{r0, r1, r2, r3, lr}
  406316:	f7ff ffc9 	bl	4062ac <__cmpsf2>
  40631a:	2800      	cmp	r0, #0
  40631c:	bf48      	it	mi
  40631e:	f110 0f00 	cmnmi.w	r0, #0
  406322:	bd0f      	pop	{r0, r1, r2, r3, pc}

00406324 <__aeabi_fcmpeq>:
  406324:	f84d ed08 	str.w	lr, [sp, #-8]!
  406328:	f7ff fff4 	bl	406314 <__aeabi_cfcmpeq>
  40632c:	bf0c      	ite	eq
  40632e:	2001      	moveq	r0, #1
  406330:	2000      	movne	r0, #0
  406332:	f85d fb08 	ldr.w	pc, [sp], #8
  406336:	bf00      	nop

00406338 <__aeabi_fcmplt>:
  406338:	f84d ed08 	str.w	lr, [sp, #-8]!
  40633c:	f7ff ffea 	bl	406314 <__aeabi_cfcmpeq>
  406340:	bf34      	ite	cc
  406342:	2001      	movcc	r0, #1
  406344:	2000      	movcs	r0, #0
  406346:	f85d fb08 	ldr.w	pc, [sp], #8
  40634a:	bf00      	nop

0040634c <__aeabi_fcmple>:
  40634c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406350:	f7ff ffe0 	bl	406314 <__aeabi_cfcmpeq>
  406354:	bf94      	ite	ls
  406356:	2001      	movls	r0, #1
  406358:	2000      	movhi	r0, #0
  40635a:	f85d fb08 	ldr.w	pc, [sp], #8
  40635e:	bf00      	nop

00406360 <__aeabi_fcmpge>:
  406360:	f84d ed08 	str.w	lr, [sp, #-8]!
  406364:	f7ff ffd2 	bl	40630c <__aeabi_cfrcmple>
  406368:	bf94      	ite	ls
  40636a:	2001      	movls	r0, #1
  40636c:	2000      	movhi	r0, #0
  40636e:	f85d fb08 	ldr.w	pc, [sp], #8
  406372:	bf00      	nop

00406374 <__aeabi_fcmpgt>:
  406374:	f84d ed08 	str.w	lr, [sp, #-8]!
  406378:	f7ff ffc8 	bl	40630c <__aeabi_cfrcmple>
  40637c:	bf34      	ite	cc
  40637e:	2001      	movcc	r0, #1
  406380:	2000      	movcs	r0, #0
  406382:	f85d fb08 	ldr.w	pc, [sp], #8
  406386:	bf00      	nop

00406388 <__errno>:
  406388:	4b01      	ldr	r3, [pc, #4]	; (406390 <__errno+0x8>)
  40638a:	6818      	ldr	r0, [r3, #0]
  40638c:	4770      	bx	lr
  40638e:	bf00      	nop
  406390:	2000018c 	.word	0x2000018c

00406394 <__libc_init_array>:
  406394:	b570      	push	{r4, r5, r6, lr}
  406396:	4e0f      	ldr	r6, [pc, #60]	; (4063d4 <__libc_init_array+0x40>)
  406398:	4d0f      	ldr	r5, [pc, #60]	; (4063d8 <__libc_init_array+0x44>)
  40639a:	1b76      	subs	r6, r6, r5
  40639c:	10b6      	asrs	r6, r6, #2
  40639e:	bf18      	it	ne
  4063a0:	2400      	movne	r4, #0
  4063a2:	d005      	beq.n	4063b0 <__libc_init_array+0x1c>
  4063a4:	3401      	adds	r4, #1
  4063a6:	f855 3b04 	ldr.w	r3, [r5], #4
  4063aa:	4798      	blx	r3
  4063ac:	42a6      	cmp	r6, r4
  4063ae:	d1f9      	bne.n	4063a4 <__libc_init_array+0x10>
  4063b0:	4e0a      	ldr	r6, [pc, #40]	; (4063dc <__libc_init_array+0x48>)
  4063b2:	4d0b      	ldr	r5, [pc, #44]	; (4063e0 <__libc_init_array+0x4c>)
  4063b4:	1b76      	subs	r6, r6, r5
  4063b6:	f004 fb8b 	bl	40aad0 <_init>
  4063ba:	10b6      	asrs	r6, r6, #2
  4063bc:	bf18      	it	ne
  4063be:	2400      	movne	r4, #0
  4063c0:	d006      	beq.n	4063d0 <__libc_init_array+0x3c>
  4063c2:	3401      	adds	r4, #1
  4063c4:	f855 3b04 	ldr.w	r3, [r5], #4
  4063c8:	4798      	blx	r3
  4063ca:	42a6      	cmp	r6, r4
  4063cc:	d1f9      	bne.n	4063c2 <__libc_init_array+0x2e>
  4063ce:	bd70      	pop	{r4, r5, r6, pc}
  4063d0:	bd70      	pop	{r4, r5, r6, pc}
  4063d2:	bf00      	nop
  4063d4:	0040aadc 	.word	0x0040aadc
  4063d8:	0040aadc 	.word	0x0040aadc
  4063dc:	0040aae4 	.word	0x0040aae4
  4063e0:	0040aadc 	.word	0x0040aadc

004063e4 <memcpy>:
  4063e4:	4684      	mov	ip, r0
  4063e6:	ea41 0300 	orr.w	r3, r1, r0
  4063ea:	f013 0303 	ands.w	r3, r3, #3
  4063ee:	d16d      	bne.n	4064cc <memcpy+0xe8>
  4063f0:	3a40      	subs	r2, #64	; 0x40
  4063f2:	d341      	bcc.n	406478 <memcpy+0x94>
  4063f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f8:	f840 3b04 	str.w	r3, [r0], #4
  4063fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406400:	f840 3b04 	str.w	r3, [r0], #4
  406404:	f851 3b04 	ldr.w	r3, [r1], #4
  406408:	f840 3b04 	str.w	r3, [r0], #4
  40640c:	f851 3b04 	ldr.w	r3, [r1], #4
  406410:	f840 3b04 	str.w	r3, [r0], #4
  406414:	f851 3b04 	ldr.w	r3, [r1], #4
  406418:	f840 3b04 	str.w	r3, [r0], #4
  40641c:	f851 3b04 	ldr.w	r3, [r1], #4
  406420:	f840 3b04 	str.w	r3, [r0], #4
  406424:	f851 3b04 	ldr.w	r3, [r1], #4
  406428:	f840 3b04 	str.w	r3, [r0], #4
  40642c:	f851 3b04 	ldr.w	r3, [r1], #4
  406430:	f840 3b04 	str.w	r3, [r0], #4
  406434:	f851 3b04 	ldr.w	r3, [r1], #4
  406438:	f840 3b04 	str.w	r3, [r0], #4
  40643c:	f851 3b04 	ldr.w	r3, [r1], #4
  406440:	f840 3b04 	str.w	r3, [r0], #4
  406444:	f851 3b04 	ldr.w	r3, [r1], #4
  406448:	f840 3b04 	str.w	r3, [r0], #4
  40644c:	f851 3b04 	ldr.w	r3, [r1], #4
  406450:	f840 3b04 	str.w	r3, [r0], #4
  406454:	f851 3b04 	ldr.w	r3, [r1], #4
  406458:	f840 3b04 	str.w	r3, [r0], #4
  40645c:	f851 3b04 	ldr.w	r3, [r1], #4
  406460:	f840 3b04 	str.w	r3, [r0], #4
  406464:	f851 3b04 	ldr.w	r3, [r1], #4
  406468:	f840 3b04 	str.w	r3, [r0], #4
  40646c:	f851 3b04 	ldr.w	r3, [r1], #4
  406470:	f840 3b04 	str.w	r3, [r0], #4
  406474:	3a40      	subs	r2, #64	; 0x40
  406476:	d2bd      	bcs.n	4063f4 <memcpy+0x10>
  406478:	3230      	adds	r2, #48	; 0x30
  40647a:	d311      	bcc.n	4064a0 <memcpy+0xbc>
  40647c:	f851 3b04 	ldr.w	r3, [r1], #4
  406480:	f840 3b04 	str.w	r3, [r0], #4
  406484:	f851 3b04 	ldr.w	r3, [r1], #4
  406488:	f840 3b04 	str.w	r3, [r0], #4
  40648c:	f851 3b04 	ldr.w	r3, [r1], #4
  406490:	f840 3b04 	str.w	r3, [r0], #4
  406494:	f851 3b04 	ldr.w	r3, [r1], #4
  406498:	f840 3b04 	str.w	r3, [r0], #4
  40649c:	3a10      	subs	r2, #16
  40649e:	d2ed      	bcs.n	40647c <memcpy+0x98>
  4064a0:	320c      	adds	r2, #12
  4064a2:	d305      	bcc.n	4064b0 <memcpy+0xcc>
  4064a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4064a8:	f840 3b04 	str.w	r3, [r0], #4
  4064ac:	3a04      	subs	r2, #4
  4064ae:	d2f9      	bcs.n	4064a4 <memcpy+0xc0>
  4064b0:	3204      	adds	r2, #4
  4064b2:	d008      	beq.n	4064c6 <memcpy+0xe2>
  4064b4:	07d2      	lsls	r2, r2, #31
  4064b6:	bf1c      	itt	ne
  4064b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4064bc:	f800 3b01 	strbne.w	r3, [r0], #1
  4064c0:	d301      	bcc.n	4064c6 <memcpy+0xe2>
  4064c2:	880b      	ldrh	r3, [r1, #0]
  4064c4:	8003      	strh	r3, [r0, #0]
  4064c6:	4660      	mov	r0, ip
  4064c8:	4770      	bx	lr
  4064ca:	bf00      	nop
  4064cc:	2a08      	cmp	r2, #8
  4064ce:	d313      	bcc.n	4064f8 <memcpy+0x114>
  4064d0:	078b      	lsls	r3, r1, #30
  4064d2:	d08d      	beq.n	4063f0 <memcpy+0xc>
  4064d4:	f010 0303 	ands.w	r3, r0, #3
  4064d8:	d08a      	beq.n	4063f0 <memcpy+0xc>
  4064da:	f1c3 0304 	rsb	r3, r3, #4
  4064de:	1ad2      	subs	r2, r2, r3
  4064e0:	07db      	lsls	r3, r3, #31
  4064e2:	bf1c      	itt	ne
  4064e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4064e8:	f800 3b01 	strbne.w	r3, [r0], #1
  4064ec:	d380      	bcc.n	4063f0 <memcpy+0xc>
  4064ee:	f831 3b02 	ldrh.w	r3, [r1], #2
  4064f2:	f820 3b02 	strh.w	r3, [r0], #2
  4064f6:	e77b      	b.n	4063f0 <memcpy+0xc>
  4064f8:	3a04      	subs	r2, #4
  4064fa:	d3d9      	bcc.n	4064b0 <memcpy+0xcc>
  4064fc:	3a01      	subs	r2, #1
  4064fe:	f811 3b01 	ldrb.w	r3, [r1], #1
  406502:	f800 3b01 	strb.w	r3, [r0], #1
  406506:	d2f9      	bcs.n	4064fc <memcpy+0x118>
  406508:	780b      	ldrb	r3, [r1, #0]
  40650a:	7003      	strb	r3, [r0, #0]
  40650c:	784b      	ldrb	r3, [r1, #1]
  40650e:	7043      	strb	r3, [r0, #1]
  406510:	788b      	ldrb	r3, [r1, #2]
  406512:	7083      	strb	r3, [r0, #2]
  406514:	4660      	mov	r0, ip
  406516:	4770      	bx	lr

00406518 <memset>:
  406518:	b470      	push	{r4, r5, r6}
  40651a:	0786      	lsls	r6, r0, #30
  40651c:	d046      	beq.n	4065ac <memset+0x94>
  40651e:	1e54      	subs	r4, r2, #1
  406520:	2a00      	cmp	r2, #0
  406522:	d041      	beq.n	4065a8 <memset+0x90>
  406524:	b2ca      	uxtb	r2, r1
  406526:	4603      	mov	r3, r0
  406528:	e002      	b.n	406530 <memset+0x18>
  40652a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40652e:	d33b      	bcc.n	4065a8 <memset+0x90>
  406530:	f803 2b01 	strb.w	r2, [r3], #1
  406534:	079d      	lsls	r5, r3, #30
  406536:	d1f8      	bne.n	40652a <memset+0x12>
  406538:	2c03      	cmp	r4, #3
  40653a:	d92e      	bls.n	40659a <memset+0x82>
  40653c:	b2cd      	uxtb	r5, r1
  40653e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406542:	2c0f      	cmp	r4, #15
  406544:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406548:	d919      	bls.n	40657e <memset+0x66>
  40654a:	f103 0210 	add.w	r2, r3, #16
  40654e:	4626      	mov	r6, r4
  406550:	3e10      	subs	r6, #16
  406552:	2e0f      	cmp	r6, #15
  406554:	f842 5c10 	str.w	r5, [r2, #-16]
  406558:	f842 5c0c 	str.w	r5, [r2, #-12]
  40655c:	f842 5c08 	str.w	r5, [r2, #-8]
  406560:	f842 5c04 	str.w	r5, [r2, #-4]
  406564:	f102 0210 	add.w	r2, r2, #16
  406568:	d8f2      	bhi.n	406550 <memset+0x38>
  40656a:	f1a4 0210 	sub.w	r2, r4, #16
  40656e:	f022 020f 	bic.w	r2, r2, #15
  406572:	f004 040f 	and.w	r4, r4, #15
  406576:	3210      	adds	r2, #16
  406578:	2c03      	cmp	r4, #3
  40657a:	4413      	add	r3, r2
  40657c:	d90d      	bls.n	40659a <memset+0x82>
  40657e:	461e      	mov	r6, r3
  406580:	4622      	mov	r2, r4
  406582:	3a04      	subs	r2, #4
  406584:	2a03      	cmp	r2, #3
  406586:	f846 5b04 	str.w	r5, [r6], #4
  40658a:	d8fa      	bhi.n	406582 <memset+0x6a>
  40658c:	1f22      	subs	r2, r4, #4
  40658e:	f022 0203 	bic.w	r2, r2, #3
  406592:	3204      	adds	r2, #4
  406594:	4413      	add	r3, r2
  406596:	f004 0403 	and.w	r4, r4, #3
  40659a:	b12c      	cbz	r4, 4065a8 <memset+0x90>
  40659c:	b2c9      	uxtb	r1, r1
  40659e:	441c      	add	r4, r3
  4065a0:	f803 1b01 	strb.w	r1, [r3], #1
  4065a4:	429c      	cmp	r4, r3
  4065a6:	d1fb      	bne.n	4065a0 <memset+0x88>
  4065a8:	bc70      	pop	{r4, r5, r6}
  4065aa:	4770      	bx	lr
  4065ac:	4614      	mov	r4, r2
  4065ae:	4603      	mov	r3, r0
  4065b0:	e7c2      	b.n	406538 <memset+0x20>
  4065b2:	bf00      	nop

004065b4 <sprintf>:
  4065b4:	b40e      	push	{r1, r2, r3}
  4065b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4065b8:	b09c      	sub	sp, #112	; 0x70
  4065ba:	ab21      	add	r3, sp, #132	; 0x84
  4065bc:	490f      	ldr	r1, [pc, #60]	; (4065fc <sprintf+0x48>)
  4065be:	f853 2b04 	ldr.w	r2, [r3], #4
  4065c2:	9301      	str	r3, [sp, #4]
  4065c4:	4605      	mov	r5, r0
  4065c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4065ca:	6808      	ldr	r0, [r1, #0]
  4065cc:	9502      	str	r5, [sp, #8]
  4065ce:	f44f 7702 	mov.w	r7, #520	; 0x208
  4065d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4065d6:	a902      	add	r1, sp, #8
  4065d8:	9506      	str	r5, [sp, #24]
  4065da:	f8ad 7014 	strh.w	r7, [sp, #20]
  4065de:	9404      	str	r4, [sp, #16]
  4065e0:	9407      	str	r4, [sp, #28]
  4065e2:	f8ad 6016 	strh.w	r6, [sp, #22]
  4065e6:	f000 f879 	bl	4066dc <_svfprintf_r>
  4065ea:	9b02      	ldr	r3, [sp, #8]
  4065ec:	2200      	movs	r2, #0
  4065ee:	701a      	strb	r2, [r3, #0]
  4065f0:	b01c      	add	sp, #112	; 0x70
  4065f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4065f6:	b003      	add	sp, #12
  4065f8:	4770      	bx	lr
  4065fa:	bf00      	nop
  4065fc:	2000018c 	.word	0x2000018c

00406600 <strlen>:
  406600:	f890 f000 	pld	[r0]
  406604:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406608:	f020 0107 	bic.w	r1, r0, #7
  40660c:	f06f 0c00 	mvn.w	ip, #0
  406610:	f010 0407 	ands.w	r4, r0, #7
  406614:	f891 f020 	pld	[r1, #32]
  406618:	f040 8049 	bne.w	4066ae <strlen+0xae>
  40661c:	f04f 0400 	mov.w	r4, #0
  406620:	f06f 0007 	mvn.w	r0, #7
  406624:	e9d1 2300 	ldrd	r2, r3, [r1]
  406628:	f891 f040 	pld	[r1, #64]	; 0x40
  40662c:	f100 0008 	add.w	r0, r0, #8
  406630:	fa82 f24c 	uadd8	r2, r2, ip
  406634:	faa4 f28c 	sel	r2, r4, ip
  406638:	fa83 f34c 	uadd8	r3, r3, ip
  40663c:	faa2 f38c 	sel	r3, r2, ip
  406640:	bb4b      	cbnz	r3, 406696 <strlen+0x96>
  406642:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406646:	fa82 f24c 	uadd8	r2, r2, ip
  40664a:	f100 0008 	add.w	r0, r0, #8
  40664e:	faa4 f28c 	sel	r2, r4, ip
  406652:	fa83 f34c 	uadd8	r3, r3, ip
  406656:	faa2 f38c 	sel	r3, r2, ip
  40665a:	b9e3      	cbnz	r3, 406696 <strlen+0x96>
  40665c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406660:	fa82 f24c 	uadd8	r2, r2, ip
  406664:	f100 0008 	add.w	r0, r0, #8
  406668:	faa4 f28c 	sel	r2, r4, ip
  40666c:	fa83 f34c 	uadd8	r3, r3, ip
  406670:	faa2 f38c 	sel	r3, r2, ip
  406674:	b97b      	cbnz	r3, 406696 <strlen+0x96>
  406676:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40667a:	f101 0120 	add.w	r1, r1, #32
  40667e:	fa82 f24c 	uadd8	r2, r2, ip
  406682:	f100 0008 	add.w	r0, r0, #8
  406686:	faa4 f28c 	sel	r2, r4, ip
  40668a:	fa83 f34c 	uadd8	r3, r3, ip
  40668e:	faa2 f38c 	sel	r3, r2, ip
  406692:	2b00      	cmp	r3, #0
  406694:	d0c6      	beq.n	406624 <strlen+0x24>
  406696:	2a00      	cmp	r2, #0
  406698:	bf04      	itt	eq
  40669a:	3004      	addeq	r0, #4
  40669c:	461a      	moveq	r2, r3
  40669e:	ba12      	rev	r2, r2
  4066a0:	fab2 f282 	clz	r2, r2
  4066a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4066a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4066ac:	4770      	bx	lr
  4066ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4066b2:	f004 0503 	and.w	r5, r4, #3
  4066b6:	f1c4 0000 	rsb	r0, r4, #0
  4066ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4066be:	f014 0f04 	tst.w	r4, #4
  4066c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4066c6:	fa0c f505 	lsl.w	r5, ip, r5
  4066ca:	ea62 0205 	orn	r2, r2, r5
  4066ce:	bf1c      	itt	ne
  4066d0:	ea63 0305 	ornne	r3, r3, r5
  4066d4:	4662      	movne	r2, ip
  4066d6:	f04f 0400 	mov.w	r4, #0
  4066da:	e7a9      	b.n	406630 <strlen+0x30>

004066dc <_svfprintf_r>:
  4066dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4066e0:	b0c3      	sub	sp, #268	; 0x10c
  4066e2:	460c      	mov	r4, r1
  4066e4:	910b      	str	r1, [sp, #44]	; 0x2c
  4066e6:	4692      	mov	sl, r2
  4066e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4066ea:	900c      	str	r0, [sp, #48]	; 0x30
  4066ec:	f002 fb42 	bl	408d74 <_localeconv_r>
  4066f0:	6803      	ldr	r3, [r0, #0]
  4066f2:	931a      	str	r3, [sp, #104]	; 0x68
  4066f4:	4618      	mov	r0, r3
  4066f6:	f7ff ff83 	bl	406600 <strlen>
  4066fa:	89a3      	ldrh	r3, [r4, #12]
  4066fc:	9019      	str	r0, [sp, #100]	; 0x64
  4066fe:	0619      	lsls	r1, r3, #24
  406700:	d503      	bpl.n	40670a <_svfprintf_r+0x2e>
  406702:	6923      	ldr	r3, [r4, #16]
  406704:	2b00      	cmp	r3, #0
  406706:	f001 8003 	beq.w	407710 <_svfprintf_r+0x1034>
  40670a:	2300      	movs	r3, #0
  40670c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406710:	9313      	str	r3, [sp, #76]	; 0x4c
  406712:	9315      	str	r3, [sp, #84]	; 0x54
  406714:	9314      	str	r3, [sp, #80]	; 0x50
  406716:	9327      	str	r3, [sp, #156]	; 0x9c
  406718:	9326      	str	r3, [sp, #152]	; 0x98
  40671a:	9318      	str	r3, [sp, #96]	; 0x60
  40671c:	931b      	str	r3, [sp, #108]	; 0x6c
  40671e:	9309      	str	r3, [sp, #36]	; 0x24
  406720:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  406724:	46c8      	mov	r8, r9
  406726:	9316      	str	r3, [sp, #88]	; 0x58
  406728:	9317      	str	r3, [sp, #92]	; 0x5c
  40672a:	f89a 3000 	ldrb.w	r3, [sl]
  40672e:	4654      	mov	r4, sl
  406730:	b1e3      	cbz	r3, 40676c <_svfprintf_r+0x90>
  406732:	2b25      	cmp	r3, #37	; 0x25
  406734:	d102      	bne.n	40673c <_svfprintf_r+0x60>
  406736:	e019      	b.n	40676c <_svfprintf_r+0x90>
  406738:	2b25      	cmp	r3, #37	; 0x25
  40673a:	d003      	beq.n	406744 <_svfprintf_r+0x68>
  40673c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406740:	2b00      	cmp	r3, #0
  406742:	d1f9      	bne.n	406738 <_svfprintf_r+0x5c>
  406744:	eba4 050a 	sub.w	r5, r4, sl
  406748:	b185      	cbz	r5, 40676c <_svfprintf_r+0x90>
  40674a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40674c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40674e:	f8c8 a000 	str.w	sl, [r8]
  406752:	3301      	adds	r3, #1
  406754:	442a      	add	r2, r5
  406756:	2b07      	cmp	r3, #7
  406758:	f8c8 5004 	str.w	r5, [r8, #4]
  40675c:	9227      	str	r2, [sp, #156]	; 0x9c
  40675e:	9326      	str	r3, [sp, #152]	; 0x98
  406760:	dc7f      	bgt.n	406862 <_svfprintf_r+0x186>
  406762:	f108 0808 	add.w	r8, r8, #8
  406766:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406768:	442b      	add	r3, r5
  40676a:	9309      	str	r3, [sp, #36]	; 0x24
  40676c:	7823      	ldrb	r3, [r4, #0]
  40676e:	2b00      	cmp	r3, #0
  406770:	d07f      	beq.n	406872 <_svfprintf_r+0x196>
  406772:	2300      	movs	r3, #0
  406774:	461a      	mov	r2, r3
  406776:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40677a:	4619      	mov	r1, r3
  40677c:	930d      	str	r3, [sp, #52]	; 0x34
  40677e:	469b      	mov	fp, r3
  406780:	f04f 30ff 	mov.w	r0, #4294967295
  406784:	7863      	ldrb	r3, [r4, #1]
  406786:	900a      	str	r0, [sp, #40]	; 0x28
  406788:	f104 0a01 	add.w	sl, r4, #1
  40678c:	f10a 0a01 	add.w	sl, sl, #1
  406790:	f1a3 0020 	sub.w	r0, r3, #32
  406794:	2858      	cmp	r0, #88	; 0x58
  406796:	f200 83c1 	bhi.w	406f1c <_svfprintf_r+0x840>
  40679a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40679e:	0238      	.short	0x0238
  4067a0:	03bf03bf 	.word	0x03bf03bf
  4067a4:	03bf0240 	.word	0x03bf0240
  4067a8:	03bf03bf 	.word	0x03bf03bf
  4067ac:	03bf03bf 	.word	0x03bf03bf
  4067b0:	024503bf 	.word	0x024503bf
  4067b4:	03bf0203 	.word	0x03bf0203
  4067b8:	026b005d 	.word	0x026b005d
  4067bc:	028603bf 	.word	0x028603bf
  4067c0:	039d039d 	.word	0x039d039d
  4067c4:	039d039d 	.word	0x039d039d
  4067c8:	039d039d 	.word	0x039d039d
  4067cc:	039d039d 	.word	0x039d039d
  4067d0:	03bf039d 	.word	0x03bf039d
  4067d4:	03bf03bf 	.word	0x03bf03bf
  4067d8:	03bf03bf 	.word	0x03bf03bf
  4067dc:	03bf03bf 	.word	0x03bf03bf
  4067e0:	03bf03bf 	.word	0x03bf03bf
  4067e4:	033703bf 	.word	0x033703bf
  4067e8:	03bf0357 	.word	0x03bf0357
  4067ec:	03bf0357 	.word	0x03bf0357
  4067f0:	03bf03bf 	.word	0x03bf03bf
  4067f4:	039803bf 	.word	0x039803bf
  4067f8:	03bf03bf 	.word	0x03bf03bf
  4067fc:	03bf03ad 	.word	0x03bf03ad
  406800:	03bf03bf 	.word	0x03bf03bf
  406804:	03bf03bf 	.word	0x03bf03bf
  406808:	03bf0259 	.word	0x03bf0259
  40680c:	031e03bf 	.word	0x031e03bf
  406810:	03bf03bf 	.word	0x03bf03bf
  406814:	03bf03bf 	.word	0x03bf03bf
  406818:	03bf03bf 	.word	0x03bf03bf
  40681c:	03bf03bf 	.word	0x03bf03bf
  406820:	03bf03bf 	.word	0x03bf03bf
  406824:	02db02c6 	.word	0x02db02c6
  406828:	03570357 	.word	0x03570357
  40682c:	028b0357 	.word	0x028b0357
  406830:	03bf02db 	.word	0x03bf02db
  406834:	029003bf 	.word	0x029003bf
  406838:	029d03bf 	.word	0x029d03bf
  40683c:	02b401cc 	.word	0x02b401cc
  406840:	03bf0208 	.word	0x03bf0208
  406844:	03bf01e1 	.word	0x03bf01e1
  406848:	03bf007e 	.word	0x03bf007e
  40684c:	020d03bf 	.word	0x020d03bf
  406850:	980d      	ldr	r0, [sp, #52]	; 0x34
  406852:	930f      	str	r3, [sp, #60]	; 0x3c
  406854:	4240      	negs	r0, r0
  406856:	900d      	str	r0, [sp, #52]	; 0x34
  406858:	f04b 0b04 	orr.w	fp, fp, #4
  40685c:	f89a 3000 	ldrb.w	r3, [sl]
  406860:	e794      	b.n	40678c <_svfprintf_r+0xb0>
  406862:	aa25      	add	r2, sp, #148	; 0x94
  406864:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406866:	980c      	ldr	r0, [sp, #48]	; 0x30
  406868:	f003 fad4 	bl	409e14 <__ssprint_r>
  40686c:	b940      	cbnz	r0, 406880 <_svfprintf_r+0x1a4>
  40686e:	46c8      	mov	r8, r9
  406870:	e779      	b.n	406766 <_svfprintf_r+0x8a>
  406872:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  406874:	b123      	cbz	r3, 406880 <_svfprintf_r+0x1a4>
  406876:	980c      	ldr	r0, [sp, #48]	; 0x30
  406878:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40687a:	aa25      	add	r2, sp, #148	; 0x94
  40687c:	f003 faca 	bl	409e14 <__ssprint_r>
  406880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406882:	899b      	ldrh	r3, [r3, #12]
  406884:	f013 0f40 	tst.w	r3, #64	; 0x40
  406888:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40688a:	bf18      	it	ne
  40688c:	f04f 33ff 	movne.w	r3, #4294967295
  406890:	9309      	str	r3, [sp, #36]	; 0x24
  406892:	9809      	ldr	r0, [sp, #36]	; 0x24
  406894:	b043      	add	sp, #268	; 0x10c
  406896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40689a:	f01b 0f20 	tst.w	fp, #32
  40689e:	9311      	str	r3, [sp, #68]	; 0x44
  4068a0:	f040 81dd 	bne.w	406c5e <_svfprintf_r+0x582>
  4068a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4068a6:	f01b 0f10 	tst.w	fp, #16
  4068aa:	4613      	mov	r3, r2
  4068ac:	f040 856e 	bne.w	40738c <_svfprintf_r+0xcb0>
  4068b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4068b4:	f000 856a 	beq.w	40738c <_svfprintf_r+0xcb0>
  4068b8:	8814      	ldrh	r4, [r2, #0]
  4068ba:	3204      	adds	r2, #4
  4068bc:	2500      	movs	r5, #0
  4068be:	2301      	movs	r3, #1
  4068c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4068c2:	2700      	movs	r7, #0
  4068c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4068c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4068ca:	1c4a      	adds	r2, r1, #1
  4068cc:	f000 8265 	beq.w	406d9a <_svfprintf_r+0x6be>
  4068d0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4068d4:	9207      	str	r2, [sp, #28]
  4068d6:	ea54 0205 	orrs.w	r2, r4, r5
  4068da:	f040 8264 	bne.w	406da6 <_svfprintf_r+0x6ca>
  4068de:	2900      	cmp	r1, #0
  4068e0:	f040 843c 	bne.w	40715c <_svfprintf_r+0xa80>
  4068e4:	2b00      	cmp	r3, #0
  4068e6:	f040 84d7 	bne.w	407298 <_svfprintf_r+0xbbc>
  4068ea:	f01b 0301 	ands.w	r3, fp, #1
  4068ee:	930e      	str	r3, [sp, #56]	; 0x38
  4068f0:	f000 8604 	beq.w	4074fc <_svfprintf_r+0xe20>
  4068f4:	ae42      	add	r6, sp, #264	; 0x108
  4068f6:	2330      	movs	r3, #48	; 0x30
  4068f8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4068fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4068fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406900:	4293      	cmp	r3, r2
  406902:	bfb8      	it	lt
  406904:	4613      	movlt	r3, r2
  406906:	9308      	str	r3, [sp, #32]
  406908:	2300      	movs	r3, #0
  40690a:	9312      	str	r3, [sp, #72]	; 0x48
  40690c:	b117      	cbz	r7, 406914 <_svfprintf_r+0x238>
  40690e:	9b08      	ldr	r3, [sp, #32]
  406910:	3301      	adds	r3, #1
  406912:	9308      	str	r3, [sp, #32]
  406914:	9b07      	ldr	r3, [sp, #28]
  406916:	f013 0302 	ands.w	r3, r3, #2
  40691a:	9310      	str	r3, [sp, #64]	; 0x40
  40691c:	d002      	beq.n	406924 <_svfprintf_r+0x248>
  40691e:	9b08      	ldr	r3, [sp, #32]
  406920:	3302      	adds	r3, #2
  406922:	9308      	str	r3, [sp, #32]
  406924:	9b07      	ldr	r3, [sp, #28]
  406926:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40692a:	f040 830e 	bne.w	406f4a <_svfprintf_r+0x86e>
  40692e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406930:	9a08      	ldr	r2, [sp, #32]
  406932:	eba3 0b02 	sub.w	fp, r3, r2
  406936:	f1bb 0f00 	cmp.w	fp, #0
  40693a:	f340 8306 	ble.w	406f4a <_svfprintf_r+0x86e>
  40693e:	f1bb 0f10 	cmp.w	fp, #16
  406942:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406944:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406946:	dd29      	ble.n	40699c <_svfprintf_r+0x2c0>
  406948:	4643      	mov	r3, r8
  40694a:	4621      	mov	r1, r4
  40694c:	46a8      	mov	r8, r5
  40694e:	2710      	movs	r7, #16
  406950:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406952:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406954:	e006      	b.n	406964 <_svfprintf_r+0x288>
  406956:	f1ab 0b10 	sub.w	fp, fp, #16
  40695a:	f1bb 0f10 	cmp.w	fp, #16
  40695e:	f103 0308 	add.w	r3, r3, #8
  406962:	dd18      	ble.n	406996 <_svfprintf_r+0x2ba>
  406964:	3201      	adds	r2, #1
  406966:	48b7      	ldr	r0, [pc, #732]	; (406c44 <_svfprintf_r+0x568>)
  406968:	9226      	str	r2, [sp, #152]	; 0x98
  40696a:	3110      	adds	r1, #16
  40696c:	2a07      	cmp	r2, #7
  40696e:	9127      	str	r1, [sp, #156]	; 0x9c
  406970:	e883 0081 	stmia.w	r3, {r0, r7}
  406974:	ddef      	ble.n	406956 <_svfprintf_r+0x27a>
  406976:	aa25      	add	r2, sp, #148	; 0x94
  406978:	4629      	mov	r1, r5
  40697a:	4620      	mov	r0, r4
  40697c:	f003 fa4a 	bl	409e14 <__ssprint_r>
  406980:	2800      	cmp	r0, #0
  406982:	f47f af7d 	bne.w	406880 <_svfprintf_r+0x1a4>
  406986:	f1ab 0b10 	sub.w	fp, fp, #16
  40698a:	f1bb 0f10 	cmp.w	fp, #16
  40698e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406990:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406992:	464b      	mov	r3, r9
  406994:	dce6      	bgt.n	406964 <_svfprintf_r+0x288>
  406996:	4645      	mov	r5, r8
  406998:	460c      	mov	r4, r1
  40699a:	4698      	mov	r8, r3
  40699c:	3201      	adds	r2, #1
  40699e:	4ba9      	ldr	r3, [pc, #676]	; (406c44 <_svfprintf_r+0x568>)
  4069a0:	9226      	str	r2, [sp, #152]	; 0x98
  4069a2:	445c      	add	r4, fp
  4069a4:	2a07      	cmp	r2, #7
  4069a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4069a8:	e888 0808 	stmia.w	r8, {r3, fp}
  4069ac:	f300 8498 	bgt.w	4072e0 <_svfprintf_r+0xc04>
  4069b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4069b4:	f108 0808 	add.w	r8, r8, #8
  4069b8:	b177      	cbz	r7, 4069d8 <_svfprintf_r+0x2fc>
  4069ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4069bc:	3301      	adds	r3, #1
  4069be:	3401      	adds	r4, #1
  4069c0:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4069c4:	2201      	movs	r2, #1
  4069c6:	2b07      	cmp	r3, #7
  4069c8:	9427      	str	r4, [sp, #156]	; 0x9c
  4069ca:	9326      	str	r3, [sp, #152]	; 0x98
  4069cc:	e888 0006 	stmia.w	r8, {r1, r2}
  4069d0:	f300 83db 	bgt.w	40718a <_svfprintf_r+0xaae>
  4069d4:	f108 0808 	add.w	r8, r8, #8
  4069d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4069da:	b16b      	cbz	r3, 4069f8 <_svfprintf_r+0x31c>
  4069dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4069de:	3301      	adds	r3, #1
  4069e0:	3402      	adds	r4, #2
  4069e2:	a91e      	add	r1, sp, #120	; 0x78
  4069e4:	2202      	movs	r2, #2
  4069e6:	2b07      	cmp	r3, #7
  4069e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4069ea:	9326      	str	r3, [sp, #152]	; 0x98
  4069ec:	e888 0006 	stmia.w	r8, {r1, r2}
  4069f0:	f300 83d6 	bgt.w	4071a0 <_svfprintf_r+0xac4>
  4069f4:	f108 0808 	add.w	r8, r8, #8
  4069f8:	2d80      	cmp	r5, #128	; 0x80
  4069fa:	f000 8315 	beq.w	407028 <_svfprintf_r+0x94c>
  4069fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406a02:	1a9f      	subs	r7, r3, r2
  406a04:	2f00      	cmp	r7, #0
  406a06:	dd36      	ble.n	406a76 <_svfprintf_r+0x39a>
  406a08:	2f10      	cmp	r7, #16
  406a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406a0c:	4d8e      	ldr	r5, [pc, #568]	; (406c48 <_svfprintf_r+0x56c>)
  406a0e:	dd27      	ble.n	406a60 <_svfprintf_r+0x384>
  406a10:	4642      	mov	r2, r8
  406a12:	4621      	mov	r1, r4
  406a14:	46b0      	mov	r8, r6
  406a16:	f04f 0b10 	mov.w	fp, #16
  406a1a:	462e      	mov	r6, r5
  406a1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406a1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406a20:	e004      	b.n	406a2c <_svfprintf_r+0x350>
  406a22:	3f10      	subs	r7, #16
  406a24:	2f10      	cmp	r7, #16
  406a26:	f102 0208 	add.w	r2, r2, #8
  406a2a:	dd15      	ble.n	406a58 <_svfprintf_r+0x37c>
  406a2c:	3301      	adds	r3, #1
  406a2e:	3110      	adds	r1, #16
  406a30:	2b07      	cmp	r3, #7
  406a32:	9127      	str	r1, [sp, #156]	; 0x9c
  406a34:	9326      	str	r3, [sp, #152]	; 0x98
  406a36:	e882 0840 	stmia.w	r2, {r6, fp}
  406a3a:	ddf2      	ble.n	406a22 <_svfprintf_r+0x346>
  406a3c:	aa25      	add	r2, sp, #148	; 0x94
  406a3e:	4629      	mov	r1, r5
  406a40:	4620      	mov	r0, r4
  406a42:	f003 f9e7 	bl	409e14 <__ssprint_r>
  406a46:	2800      	cmp	r0, #0
  406a48:	f47f af1a 	bne.w	406880 <_svfprintf_r+0x1a4>
  406a4c:	3f10      	subs	r7, #16
  406a4e:	2f10      	cmp	r7, #16
  406a50:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406a52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406a54:	464a      	mov	r2, r9
  406a56:	dce9      	bgt.n	406a2c <_svfprintf_r+0x350>
  406a58:	4635      	mov	r5, r6
  406a5a:	460c      	mov	r4, r1
  406a5c:	4646      	mov	r6, r8
  406a5e:	4690      	mov	r8, r2
  406a60:	3301      	adds	r3, #1
  406a62:	443c      	add	r4, r7
  406a64:	2b07      	cmp	r3, #7
  406a66:	9427      	str	r4, [sp, #156]	; 0x9c
  406a68:	9326      	str	r3, [sp, #152]	; 0x98
  406a6a:	e888 00a0 	stmia.w	r8, {r5, r7}
  406a6e:	f300 8381 	bgt.w	407174 <_svfprintf_r+0xa98>
  406a72:	f108 0808 	add.w	r8, r8, #8
  406a76:	9b07      	ldr	r3, [sp, #28]
  406a78:	05df      	lsls	r7, r3, #23
  406a7a:	f100 8268 	bmi.w	406f4e <_svfprintf_r+0x872>
  406a7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406a80:	990e      	ldr	r1, [sp, #56]	; 0x38
  406a82:	f8c8 6000 	str.w	r6, [r8]
  406a86:	3301      	adds	r3, #1
  406a88:	440c      	add	r4, r1
  406a8a:	2b07      	cmp	r3, #7
  406a8c:	9427      	str	r4, [sp, #156]	; 0x9c
  406a8e:	f8c8 1004 	str.w	r1, [r8, #4]
  406a92:	9326      	str	r3, [sp, #152]	; 0x98
  406a94:	f300 834d 	bgt.w	407132 <_svfprintf_r+0xa56>
  406a98:	f108 0808 	add.w	r8, r8, #8
  406a9c:	9b07      	ldr	r3, [sp, #28]
  406a9e:	075b      	lsls	r3, r3, #29
  406aa0:	d53a      	bpl.n	406b18 <_svfprintf_r+0x43c>
  406aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406aa4:	9a08      	ldr	r2, [sp, #32]
  406aa6:	1a9d      	subs	r5, r3, r2
  406aa8:	2d00      	cmp	r5, #0
  406aaa:	dd35      	ble.n	406b18 <_svfprintf_r+0x43c>
  406aac:	2d10      	cmp	r5, #16
  406aae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ab0:	dd20      	ble.n	406af4 <_svfprintf_r+0x418>
  406ab2:	2610      	movs	r6, #16
  406ab4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406ab6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  406aba:	e004      	b.n	406ac6 <_svfprintf_r+0x3ea>
  406abc:	3d10      	subs	r5, #16
  406abe:	2d10      	cmp	r5, #16
  406ac0:	f108 0808 	add.w	r8, r8, #8
  406ac4:	dd16      	ble.n	406af4 <_svfprintf_r+0x418>
  406ac6:	3301      	adds	r3, #1
  406ac8:	4a5e      	ldr	r2, [pc, #376]	; (406c44 <_svfprintf_r+0x568>)
  406aca:	9326      	str	r3, [sp, #152]	; 0x98
  406acc:	3410      	adds	r4, #16
  406ace:	2b07      	cmp	r3, #7
  406ad0:	9427      	str	r4, [sp, #156]	; 0x9c
  406ad2:	e888 0044 	stmia.w	r8, {r2, r6}
  406ad6:	ddf1      	ble.n	406abc <_svfprintf_r+0x3e0>
  406ad8:	aa25      	add	r2, sp, #148	; 0x94
  406ada:	4659      	mov	r1, fp
  406adc:	4638      	mov	r0, r7
  406ade:	f003 f999 	bl	409e14 <__ssprint_r>
  406ae2:	2800      	cmp	r0, #0
  406ae4:	f47f aecc 	bne.w	406880 <_svfprintf_r+0x1a4>
  406ae8:	3d10      	subs	r5, #16
  406aea:	2d10      	cmp	r5, #16
  406aec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406aee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406af0:	46c8      	mov	r8, r9
  406af2:	dce8      	bgt.n	406ac6 <_svfprintf_r+0x3ea>
  406af4:	3301      	adds	r3, #1
  406af6:	4a53      	ldr	r2, [pc, #332]	; (406c44 <_svfprintf_r+0x568>)
  406af8:	9326      	str	r3, [sp, #152]	; 0x98
  406afa:	442c      	add	r4, r5
  406afc:	2b07      	cmp	r3, #7
  406afe:	9427      	str	r4, [sp, #156]	; 0x9c
  406b00:	e888 0024 	stmia.w	r8, {r2, r5}
  406b04:	dd08      	ble.n	406b18 <_svfprintf_r+0x43c>
  406b06:	aa25      	add	r2, sp, #148	; 0x94
  406b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406b0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406b0c:	f003 f982 	bl	409e14 <__ssprint_r>
  406b10:	2800      	cmp	r0, #0
  406b12:	f47f aeb5 	bne.w	406880 <_svfprintf_r+0x1a4>
  406b16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406b1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406b1c:	9908      	ldr	r1, [sp, #32]
  406b1e:	428a      	cmp	r2, r1
  406b20:	bfac      	ite	ge
  406b22:	189b      	addge	r3, r3, r2
  406b24:	185b      	addlt	r3, r3, r1
  406b26:	9309      	str	r3, [sp, #36]	; 0x24
  406b28:	2c00      	cmp	r4, #0
  406b2a:	f040 830d 	bne.w	407148 <_svfprintf_r+0xa6c>
  406b2e:	2300      	movs	r3, #0
  406b30:	9326      	str	r3, [sp, #152]	; 0x98
  406b32:	46c8      	mov	r8, r9
  406b34:	e5f9      	b.n	40672a <_svfprintf_r+0x4e>
  406b36:	9311      	str	r3, [sp, #68]	; 0x44
  406b38:	f01b 0320 	ands.w	r3, fp, #32
  406b3c:	f040 81e3 	bne.w	406f06 <_svfprintf_r+0x82a>
  406b40:	f01b 0210 	ands.w	r2, fp, #16
  406b44:	f040 842e 	bne.w	4073a4 <_svfprintf_r+0xcc8>
  406b48:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  406b4c:	f000 842a 	beq.w	4073a4 <_svfprintf_r+0xcc8>
  406b50:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406b52:	4613      	mov	r3, r2
  406b54:	460a      	mov	r2, r1
  406b56:	3204      	adds	r2, #4
  406b58:	880c      	ldrh	r4, [r1, #0]
  406b5a:	920f      	str	r2, [sp, #60]	; 0x3c
  406b5c:	2500      	movs	r5, #0
  406b5e:	e6b0      	b.n	4068c2 <_svfprintf_r+0x1e6>
  406b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406b62:	9311      	str	r3, [sp, #68]	; 0x44
  406b64:	6816      	ldr	r6, [r2, #0]
  406b66:	2400      	movs	r4, #0
  406b68:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  406b6c:	1d15      	adds	r5, r2, #4
  406b6e:	2e00      	cmp	r6, #0
  406b70:	f000 86a7 	beq.w	4078c2 <_svfprintf_r+0x11e6>
  406b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406b76:	1c53      	adds	r3, r2, #1
  406b78:	f000 8609 	beq.w	40778e <_svfprintf_r+0x10b2>
  406b7c:	4621      	mov	r1, r4
  406b7e:	4630      	mov	r0, r6
  406b80:	f002 fbd6 	bl	409330 <memchr>
  406b84:	2800      	cmp	r0, #0
  406b86:	f000 86e1 	beq.w	40794c <_svfprintf_r+0x1270>
  406b8a:	1b83      	subs	r3, r0, r6
  406b8c:	930e      	str	r3, [sp, #56]	; 0x38
  406b8e:	940a      	str	r4, [sp, #40]	; 0x28
  406b90:	950f      	str	r5, [sp, #60]	; 0x3c
  406b92:	f8cd b01c 	str.w	fp, [sp, #28]
  406b96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406b9a:	9308      	str	r3, [sp, #32]
  406b9c:	9412      	str	r4, [sp, #72]	; 0x48
  406b9e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406ba2:	e6b3      	b.n	40690c <_svfprintf_r+0x230>
  406ba4:	f89a 3000 	ldrb.w	r3, [sl]
  406ba8:	2201      	movs	r2, #1
  406baa:	212b      	movs	r1, #43	; 0x2b
  406bac:	e5ee      	b.n	40678c <_svfprintf_r+0xb0>
  406bae:	f04b 0b20 	orr.w	fp, fp, #32
  406bb2:	f89a 3000 	ldrb.w	r3, [sl]
  406bb6:	e5e9      	b.n	40678c <_svfprintf_r+0xb0>
  406bb8:	9311      	str	r3, [sp, #68]	; 0x44
  406bba:	2a00      	cmp	r2, #0
  406bbc:	f040 8795 	bne.w	407aea <_svfprintf_r+0x140e>
  406bc0:	4b22      	ldr	r3, [pc, #136]	; (406c4c <_svfprintf_r+0x570>)
  406bc2:	9318      	str	r3, [sp, #96]	; 0x60
  406bc4:	f01b 0f20 	tst.w	fp, #32
  406bc8:	f040 8111 	bne.w	406dee <_svfprintf_r+0x712>
  406bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406bce:	f01b 0f10 	tst.w	fp, #16
  406bd2:	4613      	mov	r3, r2
  406bd4:	f040 83e1 	bne.w	40739a <_svfprintf_r+0xcbe>
  406bd8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406bdc:	f000 83dd 	beq.w	40739a <_svfprintf_r+0xcbe>
  406be0:	3304      	adds	r3, #4
  406be2:	8814      	ldrh	r4, [r2, #0]
  406be4:	930f      	str	r3, [sp, #60]	; 0x3c
  406be6:	2500      	movs	r5, #0
  406be8:	f01b 0f01 	tst.w	fp, #1
  406bec:	f000 810c 	beq.w	406e08 <_svfprintf_r+0x72c>
  406bf0:	ea54 0305 	orrs.w	r3, r4, r5
  406bf4:	f000 8108 	beq.w	406e08 <_svfprintf_r+0x72c>
  406bf8:	2330      	movs	r3, #48	; 0x30
  406bfa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  406bfe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  406c02:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  406c06:	f04b 0b02 	orr.w	fp, fp, #2
  406c0a:	2302      	movs	r3, #2
  406c0c:	e659      	b.n	4068c2 <_svfprintf_r+0x1e6>
  406c0e:	f89a 3000 	ldrb.w	r3, [sl]
  406c12:	2900      	cmp	r1, #0
  406c14:	f47f adba 	bne.w	40678c <_svfprintf_r+0xb0>
  406c18:	2201      	movs	r2, #1
  406c1a:	2120      	movs	r1, #32
  406c1c:	e5b6      	b.n	40678c <_svfprintf_r+0xb0>
  406c1e:	f04b 0b01 	orr.w	fp, fp, #1
  406c22:	f89a 3000 	ldrb.w	r3, [sl]
  406c26:	e5b1      	b.n	40678c <_svfprintf_r+0xb0>
  406c28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  406c2a:	6823      	ldr	r3, [r4, #0]
  406c2c:	930d      	str	r3, [sp, #52]	; 0x34
  406c2e:	4618      	mov	r0, r3
  406c30:	2800      	cmp	r0, #0
  406c32:	4623      	mov	r3, r4
  406c34:	f103 0304 	add.w	r3, r3, #4
  406c38:	f6ff ae0a 	blt.w	406850 <_svfprintf_r+0x174>
  406c3c:	930f      	str	r3, [sp, #60]	; 0x3c
  406c3e:	f89a 3000 	ldrb.w	r3, [sl]
  406c42:	e5a3      	b.n	40678c <_svfprintf_r+0xb0>
  406c44:	0040a890 	.word	0x0040a890
  406c48:	0040a8a0 	.word	0x0040a8a0
  406c4c:	0040a870 	.word	0x0040a870
  406c50:	f04b 0b10 	orr.w	fp, fp, #16
  406c54:	f01b 0f20 	tst.w	fp, #32
  406c58:	9311      	str	r3, [sp, #68]	; 0x44
  406c5a:	f43f ae23 	beq.w	4068a4 <_svfprintf_r+0x1c8>
  406c5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406c60:	3507      	adds	r5, #7
  406c62:	f025 0307 	bic.w	r3, r5, #7
  406c66:	f103 0208 	add.w	r2, r3, #8
  406c6a:	e9d3 4500 	ldrd	r4, r5, [r3]
  406c6e:	920f      	str	r2, [sp, #60]	; 0x3c
  406c70:	2301      	movs	r3, #1
  406c72:	e626      	b.n	4068c2 <_svfprintf_r+0x1e6>
  406c74:	f89a 3000 	ldrb.w	r3, [sl]
  406c78:	2b2a      	cmp	r3, #42	; 0x2a
  406c7a:	f10a 0401 	add.w	r4, sl, #1
  406c7e:	f000 8727 	beq.w	407ad0 <_svfprintf_r+0x13f4>
  406c82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406c86:	2809      	cmp	r0, #9
  406c88:	46a2      	mov	sl, r4
  406c8a:	f200 86ad 	bhi.w	4079e8 <_svfprintf_r+0x130c>
  406c8e:	2300      	movs	r3, #0
  406c90:	461c      	mov	r4, r3
  406c92:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406c96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406c9a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  406c9e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406ca2:	2809      	cmp	r0, #9
  406ca4:	d9f5      	bls.n	406c92 <_svfprintf_r+0x5b6>
  406ca6:	940a      	str	r4, [sp, #40]	; 0x28
  406ca8:	e572      	b.n	406790 <_svfprintf_r+0xb4>
  406caa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406cae:	f89a 3000 	ldrb.w	r3, [sl]
  406cb2:	e56b      	b.n	40678c <_svfprintf_r+0xb0>
  406cb4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406cb8:	f89a 3000 	ldrb.w	r3, [sl]
  406cbc:	e566      	b.n	40678c <_svfprintf_r+0xb0>
  406cbe:	f89a 3000 	ldrb.w	r3, [sl]
  406cc2:	2b6c      	cmp	r3, #108	; 0x6c
  406cc4:	bf03      	ittte	eq
  406cc6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  406cca:	f04b 0b20 	orreq.w	fp, fp, #32
  406cce:	f10a 0a01 	addeq.w	sl, sl, #1
  406cd2:	f04b 0b10 	orrne.w	fp, fp, #16
  406cd6:	e559      	b.n	40678c <_svfprintf_r+0xb0>
  406cd8:	2a00      	cmp	r2, #0
  406cda:	f040 8711 	bne.w	407b00 <_svfprintf_r+0x1424>
  406cde:	f01b 0f20 	tst.w	fp, #32
  406ce2:	f040 84f9 	bne.w	4076d8 <_svfprintf_r+0xffc>
  406ce6:	f01b 0f10 	tst.w	fp, #16
  406cea:	f040 84ac 	bne.w	407646 <_svfprintf_r+0xf6a>
  406cee:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406cf2:	f000 84a8 	beq.w	407646 <_svfprintf_r+0xf6a>
  406cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406cf8:	6813      	ldr	r3, [r2, #0]
  406cfa:	3204      	adds	r2, #4
  406cfc:	920f      	str	r2, [sp, #60]	; 0x3c
  406cfe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  406d02:	801a      	strh	r2, [r3, #0]
  406d04:	e511      	b.n	40672a <_svfprintf_r+0x4e>
  406d06:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406d08:	4bb3      	ldr	r3, [pc, #716]	; (406fd8 <_svfprintf_r+0x8fc>)
  406d0a:	680c      	ldr	r4, [r1, #0]
  406d0c:	9318      	str	r3, [sp, #96]	; 0x60
  406d0e:	2230      	movs	r2, #48	; 0x30
  406d10:	2378      	movs	r3, #120	; 0x78
  406d12:	3104      	adds	r1, #4
  406d14:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  406d18:	9311      	str	r3, [sp, #68]	; 0x44
  406d1a:	f04b 0b02 	orr.w	fp, fp, #2
  406d1e:	910f      	str	r1, [sp, #60]	; 0x3c
  406d20:	2500      	movs	r5, #0
  406d22:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  406d26:	2302      	movs	r3, #2
  406d28:	e5cb      	b.n	4068c2 <_svfprintf_r+0x1e6>
  406d2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406d2c:	9311      	str	r3, [sp, #68]	; 0x44
  406d2e:	680a      	ldr	r2, [r1, #0]
  406d30:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  406d34:	2300      	movs	r3, #0
  406d36:	460a      	mov	r2, r1
  406d38:	461f      	mov	r7, r3
  406d3a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406d3e:	3204      	adds	r2, #4
  406d40:	2301      	movs	r3, #1
  406d42:	9308      	str	r3, [sp, #32]
  406d44:	f8cd b01c 	str.w	fp, [sp, #28]
  406d48:	970a      	str	r7, [sp, #40]	; 0x28
  406d4a:	9712      	str	r7, [sp, #72]	; 0x48
  406d4c:	920f      	str	r2, [sp, #60]	; 0x3c
  406d4e:	930e      	str	r3, [sp, #56]	; 0x38
  406d50:	ae28      	add	r6, sp, #160	; 0xa0
  406d52:	e5df      	b.n	406914 <_svfprintf_r+0x238>
  406d54:	9311      	str	r3, [sp, #68]	; 0x44
  406d56:	2a00      	cmp	r2, #0
  406d58:	f040 86ea 	bne.w	407b30 <_svfprintf_r+0x1454>
  406d5c:	f01b 0f20 	tst.w	fp, #32
  406d60:	d15d      	bne.n	406e1e <_svfprintf_r+0x742>
  406d62:	f01b 0f10 	tst.w	fp, #16
  406d66:	f040 8308 	bne.w	40737a <_svfprintf_r+0xc9e>
  406d6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406d6e:	f000 8304 	beq.w	40737a <_svfprintf_r+0xc9e>
  406d72:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406d74:	f9b1 4000 	ldrsh.w	r4, [r1]
  406d78:	3104      	adds	r1, #4
  406d7a:	17e5      	asrs	r5, r4, #31
  406d7c:	4622      	mov	r2, r4
  406d7e:	462b      	mov	r3, r5
  406d80:	910f      	str	r1, [sp, #60]	; 0x3c
  406d82:	2a00      	cmp	r2, #0
  406d84:	f173 0300 	sbcs.w	r3, r3, #0
  406d88:	db58      	blt.n	406e3c <_svfprintf_r+0x760>
  406d8a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d8c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406d90:	1c4a      	adds	r2, r1, #1
  406d92:	f04f 0301 	mov.w	r3, #1
  406d96:	f47f ad9b 	bne.w	4068d0 <_svfprintf_r+0x1f4>
  406d9a:	ea54 0205 	orrs.w	r2, r4, r5
  406d9e:	f000 81df 	beq.w	407160 <_svfprintf_r+0xa84>
  406da2:	f8cd b01c 	str.w	fp, [sp, #28]
  406da6:	2b01      	cmp	r3, #1
  406da8:	f000 827b 	beq.w	4072a2 <_svfprintf_r+0xbc6>
  406dac:	2b02      	cmp	r3, #2
  406dae:	f040 8206 	bne.w	4071be <_svfprintf_r+0xae2>
  406db2:	9818      	ldr	r0, [sp, #96]	; 0x60
  406db4:	464e      	mov	r6, r9
  406db6:	0923      	lsrs	r3, r4, #4
  406db8:	f004 010f 	and.w	r1, r4, #15
  406dbc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406dc0:	092a      	lsrs	r2, r5, #4
  406dc2:	461c      	mov	r4, r3
  406dc4:	4615      	mov	r5, r2
  406dc6:	5c43      	ldrb	r3, [r0, r1]
  406dc8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  406dcc:	ea54 0305 	orrs.w	r3, r4, r5
  406dd0:	d1f1      	bne.n	406db6 <_svfprintf_r+0x6da>
  406dd2:	eba9 0306 	sub.w	r3, r9, r6
  406dd6:	930e      	str	r3, [sp, #56]	; 0x38
  406dd8:	e590      	b.n	4068fc <_svfprintf_r+0x220>
  406dda:	9311      	str	r3, [sp, #68]	; 0x44
  406ddc:	2a00      	cmp	r2, #0
  406dde:	f040 86a3 	bne.w	407b28 <_svfprintf_r+0x144c>
  406de2:	4b7e      	ldr	r3, [pc, #504]	; (406fdc <_svfprintf_r+0x900>)
  406de4:	9318      	str	r3, [sp, #96]	; 0x60
  406de6:	f01b 0f20 	tst.w	fp, #32
  406dea:	f43f aeef 	beq.w	406bcc <_svfprintf_r+0x4f0>
  406dee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406df0:	3507      	adds	r5, #7
  406df2:	f025 0307 	bic.w	r3, r5, #7
  406df6:	f103 0208 	add.w	r2, r3, #8
  406dfa:	f01b 0f01 	tst.w	fp, #1
  406dfe:	920f      	str	r2, [sp, #60]	; 0x3c
  406e00:	e9d3 4500 	ldrd	r4, r5, [r3]
  406e04:	f47f aef4 	bne.w	406bf0 <_svfprintf_r+0x514>
  406e08:	2302      	movs	r3, #2
  406e0a:	e55a      	b.n	4068c2 <_svfprintf_r+0x1e6>
  406e0c:	9311      	str	r3, [sp, #68]	; 0x44
  406e0e:	2a00      	cmp	r2, #0
  406e10:	f040 8686 	bne.w	407b20 <_svfprintf_r+0x1444>
  406e14:	f04b 0b10 	orr.w	fp, fp, #16
  406e18:	f01b 0f20 	tst.w	fp, #32
  406e1c:	d0a1      	beq.n	406d62 <_svfprintf_r+0x686>
  406e1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406e20:	3507      	adds	r5, #7
  406e22:	f025 0507 	bic.w	r5, r5, #7
  406e26:	e9d5 2300 	ldrd	r2, r3, [r5]
  406e2a:	2a00      	cmp	r2, #0
  406e2c:	f105 0108 	add.w	r1, r5, #8
  406e30:	461d      	mov	r5, r3
  406e32:	f173 0300 	sbcs.w	r3, r3, #0
  406e36:	910f      	str	r1, [sp, #60]	; 0x3c
  406e38:	4614      	mov	r4, r2
  406e3a:	daa6      	bge.n	406d8a <_svfprintf_r+0x6ae>
  406e3c:	272d      	movs	r7, #45	; 0x2d
  406e3e:	4264      	negs	r4, r4
  406e40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406e44:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406e48:	2301      	movs	r3, #1
  406e4a:	e53d      	b.n	4068c8 <_svfprintf_r+0x1ec>
  406e4c:	9311      	str	r3, [sp, #68]	; 0x44
  406e4e:	2a00      	cmp	r2, #0
  406e50:	f040 8662 	bne.w	407b18 <_svfprintf_r+0x143c>
  406e54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406e56:	3507      	adds	r5, #7
  406e58:	f025 0307 	bic.w	r3, r5, #7
  406e5c:	f103 0208 	add.w	r2, r3, #8
  406e60:	920f      	str	r2, [sp, #60]	; 0x3c
  406e62:	681a      	ldr	r2, [r3, #0]
  406e64:	9215      	str	r2, [sp, #84]	; 0x54
  406e66:	685b      	ldr	r3, [r3, #4]
  406e68:	9314      	str	r3, [sp, #80]	; 0x50
  406e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406e6c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  406e6e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  406e72:	4628      	mov	r0, r5
  406e74:	4621      	mov	r1, r4
  406e76:	f04f 32ff 	mov.w	r2, #4294967295
  406e7a:	4b59      	ldr	r3, [pc, #356]	; (406fe0 <_svfprintf_r+0x904>)
  406e7c:	f7fe ff4a 	bl	405d14 <__aeabi_dcmpun>
  406e80:	2800      	cmp	r0, #0
  406e82:	f040 834a 	bne.w	40751a <_svfprintf_r+0xe3e>
  406e86:	4628      	mov	r0, r5
  406e88:	4621      	mov	r1, r4
  406e8a:	f04f 32ff 	mov.w	r2, #4294967295
  406e8e:	4b54      	ldr	r3, [pc, #336]	; (406fe0 <_svfprintf_r+0x904>)
  406e90:	f7fe ff22 	bl	405cd8 <__aeabi_dcmple>
  406e94:	2800      	cmp	r0, #0
  406e96:	f040 8340 	bne.w	40751a <_svfprintf_r+0xe3e>
  406e9a:	a815      	add	r0, sp, #84	; 0x54
  406e9c:	c80d      	ldmia	r0, {r0, r2, r3}
  406e9e:	9914      	ldr	r1, [sp, #80]	; 0x50
  406ea0:	f7fe ff10 	bl	405cc4 <__aeabi_dcmplt>
  406ea4:	2800      	cmp	r0, #0
  406ea6:	f040 8530 	bne.w	40790a <_svfprintf_r+0x122e>
  406eaa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406eae:	4e4d      	ldr	r6, [pc, #308]	; (406fe4 <_svfprintf_r+0x908>)
  406eb0:	4b4d      	ldr	r3, [pc, #308]	; (406fe8 <_svfprintf_r+0x90c>)
  406eb2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  406eb6:	9007      	str	r0, [sp, #28]
  406eb8:	9811      	ldr	r0, [sp, #68]	; 0x44
  406eba:	2203      	movs	r2, #3
  406ebc:	2100      	movs	r1, #0
  406ebe:	9208      	str	r2, [sp, #32]
  406ec0:	910a      	str	r1, [sp, #40]	; 0x28
  406ec2:	2847      	cmp	r0, #71	; 0x47
  406ec4:	bfd8      	it	le
  406ec6:	461e      	movle	r6, r3
  406ec8:	920e      	str	r2, [sp, #56]	; 0x38
  406eca:	9112      	str	r1, [sp, #72]	; 0x48
  406ecc:	e51e      	b.n	40690c <_svfprintf_r+0x230>
  406ece:	f04b 0b08 	orr.w	fp, fp, #8
  406ed2:	f89a 3000 	ldrb.w	r3, [sl]
  406ed6:	e459      	b.n	40678c <_svfprintf_r+0xb0>
  406ed8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406edc:	2300      	movs	r3, #0
  406ede:	461c      	mov	r4, r3
  406ee0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406ee4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406ee8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  406eec:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406ef0:	2809      	cmp	r0, #9
  406ef2:	d9f5      	bls.n	406ee0 <_svfprintf_r+0x804>
  406ef4:	940d      	str	r4, [sp, #52]	; 0x34
  406ef6:	e44b      	b.n	406790 <_svfprintf_r+0xb4>
  406ef8:	f04b 0b10 	orr.w	fp, fp, #16
  406efc:	9311      	str	r3, [sp, #68]	; 0x44
  406efe:	f01b 0320 	ands.w	r3, fp, #32
  406f02:	f43f ae1d 	beq.w	406b40 <_svfprintf_r+0x464>
  406f06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406f08:	3507      	adds	r5, #7
  406f0a:	f025 0307 	bic.w	r3, r5, #7
  406f0e:	f103 0208 	add.w	r2, r3, #8
  406f12:	e9d3 4500 	ldrd	r4, r5, [r3]
  406f16:	920f      	str	r2, [sp, #60]	; 0x3c
  406f18:	2300      	movs	r3, #0
  406f1a:	e4d2      	b.n	4068c2 <_svfprintf_r+0x1e6>
  406f1c:	9311      	str	r3, [sp, #68]	; 0x44
  406f1e:	2a00      	cmp	r2, #0
  406f20:	f040 85e7 	bne.w	407af2 <_svfprintf_r+0x1416>
  406f24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f26:	2a00      	cmp	r2, #0
  406f28:	f43f aca3 	beq.w	406872 <_svfprintf_r+0x196>
  406f2c:	2300      	movs	r3, #0
  406f2e:	2101      	movs	r1, #1
  406f30:	461f      	mov	r7, r3
  406f32:	9108      	str	r1, [sp, #32]
  406f34:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  406f38:	f8cd b01c 	str.w	fp, [sp, #28]
  406f3c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406f40:	930a      	str	r3, [sp, #40]	; 0x28
  406f42:	9312      	str	r3, [sp, #72]	; 0x48
  406f44:	910e      	str	r1, [sp, #56]	; 0x38
  406f46:	ae28      	add	r6, sp, #160	; 0xa0
  406f48:	e4e4      	b.n	406914 <_svfprintf_r+0x238>
  406f4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406f4c:	e534      	b.n	4069b8 <_svfprintf_r+0x2dc>
  406f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406f50:	2b65      	cmp	r3, #101	; 0x65
  406f52:	f340 80a7 	ble.w	4070a4 <_svfprintf_r+0x9c8>
  406f56:	a815      	add	r0, sp, #84	; 0x54
  406f58:	c80d      	ldmia	r0, {r0, r2, r3}
  406f5a:	9914      	ldr	r1, [sp, #80]	; 0x50
  406f5c:	f7fe fea8 	bl	405cb0 <__aeabi_dcmpeq>
  406f60:	2800      	cmp	r0, #0
  406f62:	f000 8150 	beq.w	407206 <_svfprintf_r+0xb2a>
  406f66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f68:	4a20      	ldr	r2, [pc, #128]	; (406fec <_svfprintf_r+0x910>)
  406f6a:	f8c8 2000 	str.w	r2, [r8]
  406f6e:	3301      	adds	r3, #1
  406f70:	3401      	adds	r4, #1
  406f72:	2201      	movs	r2, #1
  406f74:	2b07      	cmp	r3, #7
  406f76:	9427      	str	r4, [sp, #156]	; 0x9c
  406f78:	9326      	str	r3, [sp, #152]	; 0x98
  406f7a:	f8c8 2004 	str.w	r2, [r8, #4]
  406f7e:	f300 836a 	bgt.w	407656 <_svfprintf_r+0xf7a>
  406f82:	f108 0808 	add.w	r8, r8, #8
  406f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406f8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406f8c:	4293      	cmp	r3, r2
  406f8e:	db03      	blt.n	406f98 <_svfprintf_r+0x8bc>
  406f90:	9b07      	ldr	r3, [sp, #28]
  406f92:	07dd      	lsls	r5, r3, #31
  406f94:	f57f ad82 	bpl.w	406a9c <_svfprintf_r+0x3c0>
  406f98:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f9a:	9919      	ldr	r1, [sp, #100]	; 0x64
  406f9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  406f9e:	f8c8 2000 	str.w	r2, [r8]
  406fa2:	3301      	adds	r3, #1
  406fa4:	440c      	add	r4, r1
  406fa6:	2b07      	cmp	r3, #7
  406fa8:	f8c8 1004 	str.w	r1, [r8, #4]
  406fac:	9427      	str	r4, [sp, #156]	; 0x9c
  406fae:	9326      	str	r3, [sp, #152]	; 0x98
  406fb0:	f300 839e 	bgt.w	4076f0 <_svfprintf_r+0x1014>
  406fb4:	f108 0808 	add.w	r8, r8, #8
  406fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406fba:	1e5e      	subs	r6, r3, #1
  406fbc:	2e00      	cmp	r6, #0
  406fbe:	f77f ad6d 	ble.w	406a9c <_svfprintf_r+0x3c0>
  406fc2:	2e10      	cmp	r6, #16
  406fc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406fc6:	4d0a      	ldr	r5, [pc, #40]	; (406ff0 <_svfprintf_r+0x914>)
  406fc8:	f340 81f5 	ble.w	4073b6 <_svfprintf_r+0xcda>
  406fcc:	4622      	mov	r2, r4
  406fce:	2710      	movs	r7, #16
  406fd0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  406fd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  406fd6:	e013      	b.n	407000 <_svfprintf_r+0x924>
  406fd8:	0040a870 	.word	0x0040a870
  406fdc:	0040a85c 	.word	0x0040a85c
  406fe0:	7fefffff 	.word	0x7fefffff
  406fe4:	0040a850 	.word	0x0040a850
  406fe8:	0040a84c 	.word	0x0040a84c
  406fec:	0040a88c 	.word	0x0040a88c
  406ff0:	0040a8a0 	.word	0x0040a8a0
  406ff4:	f108 0808 	add.w	r8, r8, #8
  406ff8:	3e10      	subs	r6, #16
  406ffa:	2e10      	cmp	r6, #16
  406ffc:	f340 81da 	ble.w	4073b4 <_svfprintf_r+0xcd8>
  407000:	3301      	adds	r3, #1
  407002:	3210      	adds	r2, #16
  407004:	2b07      	cmp	r3, #7
  407006:	9227      	str	r2, [sp, #156]	; 0x9c
  407008:	9326      	str	r3, [sp, #152]	; 0x98
  40700a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40700e:	ddf1      	ble.n	406ff4 <_svfprintf_r+0x918>
  407010:	aa25      	add	r2, sp, #148	; 0x94
  407012:	4621      	mov	r1, r4
  407014:	4658      	mov	r0, fp
  407016:	f002 fefd 	bl	409e14 <__ssprint_r>
  40701a:	2800      	cmp	r0, #0
  40701c:	f47f ac30 	bne.w	406880 <_svfprintf_r+0x1a4>
  407020:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407022:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407024:	46c8      	mov	r8, r9
  407026:	e7e7      	b.n	406ff8 <_svfprintf_r+0x91c>
  407028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40702a:	9a08      	ldr	r2, [sp, #32]
  40702c:	1a9f      	subs	r7, r3, r2
  40702e:	2f00      	cmp	r7, #0
  407030:	f77f ace5 	ble.w	4069fe <_svfprintf_r+0x322>
  407034:	2f10      	cmp	r7, #16
  407036:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407038:	4db6      	ldr	r5, [pc, #728]	; (407314 <_svfprintf_r+0xc38>)
  40703a:	dd27      	ble.n	40708c <_svfprintf_r+0x9b0>
  40703c:	4642      	mov	r2, r8
  40703e:	4621      	mov	r1, r4
  407040:	46b0      	mov	r8, r6
  407042:	f04f 0b10 	mov.w	fp, #16
  407046:	462e      	mov	r6, r5
  407048:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40704a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40704c:	e004      	b.n	407058 <_svfprintf_r+0x97c>
  40704e:	3f10      	subs	r7, #16
  407050:	2f10      	cmp	r7, #16
  407052:	f102 0208 	add.w	r2, r2, #8
  407056:	dd15      	ble.n	407084 <_svfprintf_r+0x9a8>
  407058:	3301      	adds	r3, #1
  40705a:	3110      	adds	r1, #16
  40705c:	2b07      	cmp	r3, #7
  40705e:	9127      	str	r1, [sp, #156]	; 0x9c
  407060:	9326      	str	r3, [sp, #152]	; 0x98
  407062:	e882 0840 	stmia.w	r2, {r6, fp}
  407066:	ddf2      	ble.n	40704e <_svfprintf_r+0x972>
  407068:	aa25      	add	r2, sp, #148	; 0x94
  40706a:	4629      	mov	r1, r5
  40706c:	4620      	mov	r0, r4
  40706e:	f002 fed1 	bl	409e14 <__ssprint_r>
  407072:	2800      	cmp	r0, #0
  407074:	f47f ac04 	bne.w	406880 <_svfprintf_r+0x1a4>
  407078:	3f10      	subs	r7, #16
  40707a:	2f10      	cmp	r7, #16
  40707c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40707e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407080:	464a      	mov	r2, r9
  407082:	dce9      	bgt.n	407058 <_svfprintf_r+0x97c>
  407084:	4635      	mov	r5, r6
  407086:	460c      	mov	r4, r1
  407088:	4646      	mov	r6, r8
  40708a:	4690      	mov	r8, r2
  40708c:	3301      	adds	r3, #1
  40708e:	443c      	add	r4, r7
  407090:	2b07      	cmp	r3, #7
  407092:	9427      	str	r4, [sp, #156]	; 0x9c
  407094:	9326      	str	r3, [sp, #152]	; 0x98
  407096:	e888 00a0 	stmia.w	r8, {r5, r7}
  40709a:	f300 8232 	bgt.w	407502 <_svfprintf_r+0xe26>
  40709e:	f108 0808 	add.w	r8, r8, #8
  4070a2:	e4ac      	b.n	4069fe <_svfprintf_r+0x322>
  4070a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4070a6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4070a8:	2b01      	cmp	r3, #1
  4070aa:	f340 81fe 	ble.w	4074aa <_svfprintf_r+0xdce>
  4070ae:	3701      	adds	r7, #1
  4070b0:	3401      	adds	r4, #1
  4070b2:	2301      	movs	r3, #1
  4070b4:	2f07      	cmp	r7, #7
  4070b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4070b8:	9726      	str	r7, [sp, #152]	; 0x98
  4070ba:	f8c8 6000 	str.w	r6, [r8]
  4070be:	f8c8 3004 	str.w	r3, [r8, #4]
  4070c2:	f300 8203 	bgt.w	4074cc <_svfprintf_r+0xdf0>
  4070c6:	f108 0808 	add.w	r8, r8, #8
  4070ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4070cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4070ce:	f8c8 3000 	str.w	r3, [r8]
  4070d2:	3701      	adds	r7, #1
  4070d4:	4414      	add	r4, r2
  4070d6:	2f07      	cmp	r7, #7
  4070d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4070da:	9726      	str	r7, [sp, #152]	; 0x98
  4070dc:	f8c8 2004 	str.w	r2, [r8, #4]
  4070e0:	f300 8200 	bgt.w	4074e4 <_svfprintf_r+0xe08>
  4070e4:	f108 0808 	add.w	r8, r8, #8
  4070e8:	a815      	add	r0, sp, #84	; 0x54
  4070ea:	c80d      	ldmia	r0, {r0, r2, r3}
  4070ec:	9914      	ldr	r1, [sp, #80]	; 0x50
  4070ee:	f7fe fddf 	bl	405cb0 <__aeabi_dcmpeq>
  4070f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4070f4:	2800      	cmp	r0, #0
  4070f6:	f040 8101 	bne.w	4072fc <_svfprintf_r+0xc20>
  4070fa:	3b01      	subs	r3, #1
  4070fc:	3701      	adds	r7, #1
  4070fe:	3601      	adds	r6, #1
  407100:	441c      	add	r4, r3
  407102:	2f07      	cmp	r7, #7
  407104:	9726      	str	r7, [sp, #152]	; 0x98
  407106:	9427      	str	r4, [sp, #156]	; 0x9c
  407108:	f8c8 6000 	str.w	r6, [r8]
  40710c:	f8c8 3004 	str.w	r3, [r8, #4]
  407110:	f300 8127 	bgt.w	407362 <_svfprintf_r+0xc86>
  407114:	f108 0808 	add.w	r8, r8, #8
  407118:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40711a:	f8c8 2004 	str.w	r2, [r8, #4]
  40711e:	3701      	adds	r7, #1
  407120:	4414      	add	r4, r2
  407122:	ab21      	add	r3, sp, #132	; 0x84
  407124:	2f07      	cmp	r7, #7
  407126:	9427      	str	r4, [sp, #156]	; 0x9c
  407128:	9726      	str	r7, [sp, #152]	; 0x98
  40712a:	f8c8 3000 	str.w	r3, [r8]
  40712e:	f77f acb3 	ble.w	406a98 <_svfprintf_r+0x3bc>
  407132:	aa25      	add	r2, sp, #148	; 0x94
  407134:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407136:	980c      	ldr	r0, [sp, #48]	; 0x30
  407138:	f002 fe6c 	bl	409e14 <__ssprint_r>
  40713c:	2800      	cmp	r0, #0
  40713e:	f47f ab9f 	bne.w	406880 <_svfprintf_r+0x1a4>
  407142:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407144:	46c8      	mov	r8, r9
  407146:	e4a9      	b.n	406a9c <_svfprintf_r+0x3c0>
  407148:	aa25      	add	r2, sp, #148	; 0x94
  40714a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40714c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40714e:	f002 fe61 	bl	409e14 <__ssprint_r>
  407152:	2800      	cmp	r0, #0
  407154:	f43f aceb 	beq.w	406b2e <_svfprintf_r+0x452>
  407158:	f7ff bb92 	b.w	406880 <_svfprintf_r+0x1a4>
  40715c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  407160:	2b01      	cmp	r3, #1
  407162:	f000 8134 	beq.w	4073ce <_svfprintf_r+0xcf2>
  407166:	2b02      	cmp	r3, #2
  407168:	d125      	bne.n	4071b6 <_svfprintf_r+0xada>
  40716a:	f8cd b01c 	str.w	fp, [sp, #28]
  40716e:	2400      	movs	r4, #0
  407170:	2500      	movs	r5, #0
  407172:	e61e      	b.n	406db2 <_svfprintf_r+0x6d6>
  407174:	aa25      	add	r2, sp, #148	; 0x94
  407176:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407178:	980c      	ldr	r0, [sp, #48]	; 0x30
  40717a:	f002 fe4b 	bl	409e14 <__ssprint_r>
  40717e:	2800      	cmp	r0, #0
  407180:	f47f ab7e 	bne.w	406880 <_svfprintf_r+0x1a4>
  407184:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407186:	46c8      	mov	r8, r9
  407188:	e475      	b.n	406a76 <_svfprintf_r+0x39a>
  40718a:	aa25      	add	r2, sp, #148	; 0x94
  40718c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40718e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407190:	f002 fe40 	bl	409e14 <__ssprint_r>
  407194:	2800      	cmp	r0, #0
  407196:	f47f ab73 	bne.w	406880 <_svfprintf_r+0x1a4>
  40719a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40719c:	46c8      	mov	r8, r9
  40719e:	e41b      	b.n	4069d8 <_svfprintf_r+0x2fc>
  4071a0:	aa25      	add	r2, sp, #148	; 0x94
  4071a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4071a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4071a6:	f002 fe35 	bl	409e14 <__ssprint_r>
  4071aa:	2800      	cmp	r0, #0
  4071ac:	f47f ab68 	bne.w	406880 <_svfprintf_r+0x1a4>
  4071b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4071b2:	46c8      	mov	r8, r9
  4071b4:	e420      	b.n	4069f8 <_svfprintf_r+0x31c>
  4071b6:	f8cd b01c 	str.w	fp, [sp, #28]
  4071ba:	2400      	movs	r4, #0
  4071bc:	2500      	movs	r5, #0
  4071be:	4649      	mov	r1, r9
  4071c0:	e000      	b.n	4071c4 <_svfprintf_r+0xae8>
  4071c2:	4631      	mov	r1, r6
  4071c4:	08e2      	lsrs	r2, r4, #3
  4071c6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4071ca:	08e8      	lsrs	r0, r5, #3
  4071cc:	f004 0307 	and.w	r3, r4, #7
  4071d0:	4605      	mov	r5, r0
  4071d2:	4614      	mov	r4, r2
  4071d4:	3330      	adds	r3, #48	; 0x30
  4071d6:	ea54 0205 	orrs.w	r2, r4, r5
  4071da:	f801 3c01 	strb.w	r3, [r1, #-1]
  4071de:	f101 36ff 	add.w	r6, r1, #4294967295
  4071e2:	d1ee      	bne.n	4071c2 <_svfprintf_r+0xae6>
  4071e4:	9a07      	ldr	r2, [sp, #28]
  4071e6:	07d2      	lsls	r2, r2, #31
  4071e8:	f57f adf3 	bpl.w	406dd2 <_svfprintf_r+0x6f6>
  4071ec:	2b30      	cmp	r3, #48	; 0x30
  4071ee:	f43f adf0 	beq.w	406dd2 <_svfprintf_r+0x6f6>
  4071f2:	3902      	subs	r1, #2
  4071f4:	2330      	movs	r3, #48	; 0x30
  4071f6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4071fa:	eba9 0301 	sub.w	r3, r9, r1
  4071fe:	930e      	str	r3, [sp, #56]	; 0x38
  407200:	460e      	mov	r6, r1
  407202:	f7ff bb7b 	b.w	4068fc <_svfprintf_r+0x220>
  407206:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407208:	2900      	cmp	r1, #0
  40720a:	f340 822e 	ble.w	40766a <_svfprintf_r+0xf8e>
  40720e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407212:	4293      	cmp	r3, r2
  407214:	bfa8      	it	ge
  407216:	4613      	movge	r3, r2
  407218:	2b00      	cmp	r3, #0
  40721a:	461f      	mov	r7, r3
  40721c:	dd0d      	ble.n	40723a <_svfprintf_r+0xb5e>
  40721e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407220:	f8c8 6000 	str.w	r6, [r8]
  407224:	3301      	adds	r3, #1
  407226:	443c      	add	r4, r7
  407228:	2b07      	cmp	r3, #7
  40722a:	9427      	str	r4, [sp, #156]	; 0x9c
  40722c:	f8c8 7004 	str.w	r7, [r8, #4]
  407230:	9326      	str	r3, [sp, #152]	; 0x98
  407232:	f300 831f 	bgt.w	407874 <_svfprintf_r+0x1198>
  407236:	f108 0808 	add.w	r8, r8, #8
  40723a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40723c:	2f00      	cmp	r7, #0
  40723e:	bfa8      	it	ge
  407240:	1bdb      	subge	r3, r3, r7
  407242:	2b00      	cmp	r3, #0
  407244:	461f      	mov	r7, r3
  407246:	f340 80d6 	ble.w	4073f6 <_svfprintf_r+0xd1a>
  40724a:	2f10      	cmp	r7, #16
  40724c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40724e:	4d31      	ldr	r5, [pc, #196]	; (407314 <_svfprintf_r+0xc38>)
  407250:	f340 81ed 	ble.w	40762e <_svfprintf_r+0xf52>
  407254:	4642      	mov	r2, r8
  407256:	4621      	mov	r1, r4
  407258:	46b0      	mov	r8, r6
  40725a:	f04f 0b10 	mov.w	fp, #16
  40725e:	462e      	mov	r6, r5
  407260:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407262:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  407264:	e004      	b.n	407270 <_svfprintf_r+0xb94>
  407266:	3208      	adds	r2, #8
  407268:	3f10      	subs	r7, #16
  40726a:	2f10      	cmp	r7, #16
  40726c:	f340 81db 	ble.w	407626 <_svfprintf_r+0xf4a>
  407270:	3301      	adds	r3, #1
  407272:	3110      	adds	r1, #16
  407274:	2b07      	cmp	r3, #7
  407276:	9127      	str	r1, [sp, #156]	; 0x9c
  407278:	9326      	str	r3, [sp, #152]	; 0x98
  40727a:	e882 0840 	stmia.w	r2, {r6, fp}
  40727e:	ddf2      	ble.n	407266 <_svfprintf_r+0xb8a>
  407280:	aa25      	add	r2, sp, #148	; 0x94
  407282:	4629      	mov	r1, r5
  407284:	4620      	mov	r0, r4
  407286:	f002 fdc5 	bl	409e14 <__ssprint_r>
  40728a:	2800      	cmp	r0, #0
  40728c:	f47f aaf8 	bne.w	406880 <_svfprintf_r+0x1a4>
  407290:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407292:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407294:	464a      	mov	r2, r9
  407296:	e7e7      	b.n	407268 <_svfprintf_r+0xb8c>
  407298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40729a:	930e      	str	r3, [sp, #56]	; 0x38
  40729c:	464e      	mov	r6, r9
  40729e:	f7ff bb2d 	b.w	4068fc <_svfprintf_r+0x220>
  4072a2:	2d00      	cmp	r5, #0
  4072a4:	bf08      	it	eq
  4072a6:	2c0a      	cmpeq	r4, #10
  4072a8:	f0c0 808f 	bcc.w	4073ca <_svfprintf_r+0xcee>
  4072ac:	464e      	mov	r6, r9
  4072ae:	4620      	mov	r0, r4
  4072b0:	4629      	mov	r1, r5
  4072b2:	220a      	movs	r2, #10
  4072b4:	2300      	movs	r3, #0
  4072b6:	f002 fef3 	bl	40a0a0 <__aeabi_uldivmod>
  4072ba:	3230      	adds	r2, #48	; 0x30
  4072bc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4072c0:	4620      	mov	r0, r4
  4072c2:	4629      	mov	r1, r5
  4072c4:	2300      	movs	r3, #0
  4072c6:	220a      	movs	r2, #10
  4072c8:	f002 feea 	bl	40a0a0 <__aeabi_uldivmod>
  4072cc:	4604      	mov	r4, r0
  4072ce:	460d      	mov	r5, r1
  4072d0:	ea54 0305 	orrs.w	r3, r4, r5
  4072d4:	d1eb      	bne.n	4072ae <_svfprintf_r+0xbd2>
  4072d6:	eba9 0306 	sub.w	r3, r9, r6
  4072da:	930e      	str	r3, [sp, #56]	; 0x38
  4072dc:	f7ff bb0e 	b.w	4068fc <_svfprintf_r+0x220>
  4072e0:	aa25      	add	r2, sp, #148	; 0x94
  4072e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4072e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4072e6:	f002 fd95 	bl	409e14 <__ssprint_r>
  4072ea:	2800      	cmp	r0, #0
  4072ec:	f47f aac8 	bne.w	406880 <_svfprintf_r+0x1a4>
  4072f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4072f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4072f6:	46c8      	mov	r8, r9
  4072f8:	f7ff bb5e 	b.w	4069b8 <_svfprintf_r+0x2dc>
  4072fc:	1e5e      	subs	r6, r3, #1
  4072fe:	2e00      	cmp	r6, #0
  407300:	f77f af0a 	ble.w	407118 <_svfprintf_r+0xa3c>
  407304:	2e10      	cmp	r6, #16
  407306:	4d03      	ldr	r5, [pc, #12]	; (407314 <_svfprintf_r+0xc38>)
  407308:	dd22      	ble.n	407350 <_svfprintf_r+0xc74>
  40730a:	4622      	mov	r2, r4
  40730c:	f04f 0b10 	mov.w	fp, #16
  407310:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407312:	e006      	b.n	407322 <_svfprintf_r+0xc46>
  407314:	0040a8a0 	.word	0x0040a8a0
  407318:	3e10      	subs	r6, #16
  40731a:	2e10      	cmp	r6, #16
  40731c:	f108 0808 	add.w	r8, r8, #8
  407320:	dd15      	ble.n	40734e <_svfprintf_r+0xc72>
  407322:	3701      	adds	r7, #1
  407324:	3210      	adds	r2, #16
  407326:	2f07      	cmp	r7, #7
  407328:	9227      	str	r2, [sp, #156]	; 0x9c
  40732a:	9726      	str	r7, [sp, #152]	; 0x98
  40732c:	e888 0820 	stmia.w	r8, {r5, fp}
  407330:	ddf2      	ble.n	407318 <_svfprintf_r+0xc3c>
  407332:	aa25      	add	r2, sp, #148	; 0x94
  407334:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407336:	4620      	mov	r0, r4
  407338:	f002 fd6c 	bl	409e14 <__ssprint_r>
  40733c:	2800      	cmp	r0, #0
  40733e:	f47f aa9f 	bne.w	406880 <_svfprintf_r+0x1a4>
  407342:	3e10      	subs	r6, #16
  407344:	2e10      	cmp	r6, #16
  407346:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407348:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40734a:	46c8      	mov	r8, r9
  40734c:	dce9      	bgt.n	407322 <_svfprintf_r+0xc46>
  40734e:	4614      	mov	r4, r2
  407350:	3701      	adds	r7, #1
  407352:	4434      	add	r4, r6
  407354:	2f07      	cmp	r7, #7
  407356:	9427      	str	r4, [sp, #156]	; 0x9c
  407358:	9726      	str	r7, [sp, #152]	; 0x98
  40735a:	e888 0060 	stmia.w	r8, {r5, r6}
  40735e:	f77f aed9 	ble.w	407114 <_svfprintf_r+0xa38>
  407362:	aa25      	add	r2, sp, #148	; 0x94
  407364:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407366:	980c      	ldr	r0, [sp, #48]	; 0x30
  407368:	f002 fd54 	bl	409e14 <__ssprint_r>
  40736c:	2800      	cmp	r0, #0
  40736e:	f47f aa87 	bne.w	406880 <_svfprintf_r+0x1a4>
  407372:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407374:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407376:	46c8      	mov	r8, r9
  407378:	e6ce      	b.n	407118 <_svfprintf_r+0xa3c>
  40737a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40737c:	6814      	ldr	r4, [r2, #0]
  40737e:	4613      	mov	r3, r2
  407380:	3304      	adds	r3, #4
  407382:	17e5      	asrs	r5, r4, #31
  407384:	930f      	str	r3, [sp, #60]	; 0x3c
  407386:	4622      	mov	r2, r4
  407388:	462b      	mov	r3, r5
  40738a:	e4fa      	b.n	406d82 <_svfprintf_r+0x6a6>
  40738c:	3204      	adds	r2, #4
  40738e:	681c      	ldr	r4, [r3, #0]
  407390:	920f      	str	r2, [sp, #60]	; 0x3c
  407392:	2301      	movs	r3, #1
  407394:	2500      	movs	r5, #0
  407396:	f7ff ba94 	b.w	4068c2 <_svfprintf_r+0x1e6>
  40739a:	681c      	ldr	r4, [r3, #0]
  40739c:	3304      	adds	r3, #4
  40739e:	930f      	str	r3, [sp, #60]	; 0x3c
  4073a0:	2500      	movs	r5, #0
  4073a2:	e421      	b.n	406be8 <_svfprintf_r+0x50c>
  4073a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4073a6:	460a      	mov	r2, r1
  4073a8:	3204      	adds	r2, #4
  4073aa:	680c      	ldr	r4, [r1, #0]
  4073ac:	920f      	str	r2, [sp, #60]	; 0x3c
  4073ae:	2500      	movs	r5, #0
  4073b0:	f7ff ba87 	b.w	4068c2 <_svfprintf_r+0x1e6>
  4073b4:	4614      	mov	r4, r2
  4073b6:	3301      	adds	r3, #1
  4073b8:	4434      	add	r4, r6
  4073ba:	2b07      	cmp	r3, #7
  4073bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4073be:	9326      	str	r3, [sp, #152]	; 0x98
  4073c0:	e888 0060 	stmia.w	r8, {r5, r6}
  4073c4:	f77f ab68 	ble.w	406a98 <_svfprintf_r+0x3bc>
  4073c8:	e6b3      	b.n	407132 <_svfprintf_r+0xa56>
  4073ca:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4073ce:	f8cd b01c 	str.w	fp, [sp, #28]
  4073d2:	ae42      	add	r6, sp, #264	; 0x108
  4073d4:	3430      	adds	r4, #48	; 0x30
  4073d6:	2301      	movs	r3, #1
  4073d8:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4073dc:	930e      	str	r3, [sp, #56]	; 0x38
  4073de:	f7ff ba8d 	b.w	4068fc <_svfprintf_r+0x220>
  4073e2:	aa25      	add	r2, sp, #148	; 0x94
  4073e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4073e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4073e8:	f002 fd14 	bl	409e14 <__ssprint_r>
  4073ec:	2800      	cmp	r0, #0
  4073ee:	f47f aa47 	bne.w	406880 <_svfprintf_r+0x1a4>
  4073f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4073f4:	46c8      	mov	r8, r9
  4073f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4073f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4073fa:	429a      	cmp	r2, r3
  4073fc:	db44      	blt.n	407488 <_svfprintf_r+0xdac>
  4073fe:	9b07      	ldr	r3, [sp, #28]
  407400:	07d9      	lsls	r1, r3, #31
  407402:	d441      	bmi.n	407488 <_svfprintf_r+0xdac>
  407404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407406:	9812      	ldr	r0, [sp, #72]	; 0x48
  407408:	1a9a      	subs	r2, r3, r2
  40740a:	1a1d      	subs	r5, r3, r0
  40740c:	4295      	cmp	r5, r2
  40740e:	bfa8      	it	ge
  407410:	4615      	movge	r5, r2
  407412:	2d00      	cmp	r5, #0
  407414:	dd0e      	ble.n	407434 <_svfprintf_r+0xd58>
  407416:	9926      	ldr	r1, [sp, #152]	; 0x98
  407418:	f8c8 5004 	str.w	r5, [r8, #4]
  40741c:	3101      	adds	r1, #1
  40741e:	4406      	add	r6, r0
  407420:	442c      	add	r4, r5
  407422:	2907      	cmp	r1, #7
  407424:	f8c8 6000 	str.w	r6, [r8]
  407428:	9427      	str	r4, [sp, #156]	; 0x9c
  40742a:	9126      	str	r1, [sp, #152]	; 0x98
  40742c:	f300 823b 	bgt.w	4078a6 <_svfprintf_r+0x11ca>
  407430:	f108 0808 	add.w	r8, r8, #8
  407434:	2d00      	cmp	r5, #0
  407436:	bfac      	ite	ge
  407438:	1b56      	subge	r6, r2, r5
  40743a:	4616      	movlt	r6, r2
  40743c:	2e00      	cmp	r6, #0
  40743e:	f77f ab2d 	ble.w	406a9c <_svfprintf_r+0x3c0>
  407442:	2e10      	cmp	r6, #16
  407444:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407446:	4db0      	ldr	r5, [pc, #704]	; (407708 <_svfprintf_r+0x102c>)
  407448:	ddb5      	ble.n	4073b6 <_svfprintf_r+0xcda>
  40744a:	4622      	mov	r2, r4
  40744c:	2710      	movs	r7, #16
  40744e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407452:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  407454:	e004      	b.n	407460 <_svfprintf_r+0xd84>
  407456:	f108 0808 	add.w	r8, r8, #8
  40745a:	3e10      	subs	r6, #16
  40745c:	2e10      	cmp	r6, #16
  40745e:	dda9      	ble.n	4073b4 <_svfprintf_r+0xcd8>
  407460:	3301      	adds	r3, #1
  407462:	3210      	adds	r2, #16
  407464:	2b07      	cmp	r3, #7
  407466:	9227      	str	r2, [sp, #156]	; 0x9c
  407468:	9326      	str	r3, [sp, #152]	; 0x98
  40746a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40746e:	ddf2      	ble.n	407456 <_svfprintf_r+0xd7a>
  407470:	aa25      	add	r2, sp, #148	; 0x94
  407472:	4621      	mov	r1, r4
  407474:	4658      	mov	r0, fp
  407476:	f002 fccd 	bl	409e14 <__ssprint_r>
  40747a:	2800      	cmp	r0, #0
  40747c:	f47f aa00 	bne.w	406880 <_svfprintf_r+0x1a4>
  407480:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407482:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407484:	46c8      	mov	r8, r9
  407486:	e7e8      	b.n	40745a <_svfprintf_r+0xd7e>
  407488:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40748a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40748c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40748e:	f8c8 1000 	str.w	r1, [r8]
  407492:	3301      	adds	r3, #1
  407494:	4404      	add	r4, r0
  407496:	2b07      	cmp	r3, #7
  407498:	9427      	str	r4, [sp, #156]	; 0x9c
  40749a:	f8c8 0004 	str.w	r0, [r8, #4]
  40749e:	9326      	str	r3, [sp, #152]	; 0x98
  4074a0:	f300 81f5 	bgt.w	40788e <_svfprintf_r+0x11b2>
  4074a4:	f108 0808 	add.w	r8, r8, #8
  4074a8:	e7ac      	b.n	407404 <_svfprintf_r+0xd28>
  4074aa:	9b07      	ldr	r3, [sp, #28]
  4074ac:	07da      	lsls	r2, r3, #31
  4074ae:	f53f adfe 	bmi.w	4070ae <_svfprintf_r+0x9d2>
  4074b2:	3701      	adds	r7, #1
  4074b4:	3401      	adds	r4, #1
  4074b6:	2301      	movs	r3, #1
  4074b8:	2f07      	cmp	r7, #7
  4074ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4074bc:	9726      	str	r7, [sp, #152]	; 0x98
  4074be:	f8c8 6000 	str.w	r6, [r8]
  4074c2:	f8c8 3004 	str.w	r3, [r8, #4]
  4074c6:	f77f ae25 	ble.w	407114 <_svfprintf_r+0xa38>
  4074ca:	e74a      	b.n	407362 <_svfprintf_r+0xc86>
  4074cc:	aa25      	add	r2, sp, #148	; 0x94
  4074ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074d2:	f002 fc9f 	bl	409e14 <__ssprint_r>
  4074d6:	2800      	cmp	r0, #0
  4074d8:	f47f a9d2 	bne.w	406880 <_svfprintf_r+0x1a4>
  4074dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4074de:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4074e0:	46c8      	mov	r8, r9
  4074e2:	e5f2      	b.n	4070ca <_svfprintf_r+0x9ee>
  4074e4:	aa25      	add	r2, sp, #148	; 0x94
  4074e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074e8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074ea:	f002 fc93 	bl	409e14 <__ssprint_r>
  4074ee:	2800      	cmp	r0, #0
  4074f0:	f47f a9c6 	bne.w	406880 <_svfprintf_r+0x1a4>
  4074f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4074f6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4074f8:	46c8      	mov	r8, r9
  4074fa:	e5f5      	b.n	4070e8 <_svfprintf_r+0xa0c>
  4074fc:	464e      	mov	r6, r9
  4074fe:	f7ff b9fd 	b.w	4068fc <_svfprintf_r+0x220>
  407502:	aa25      	add	r2, sp, #148	; 0x94
  407504:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407506:	980c      	ldr	r0, [sp, #48]	; 0x30
  407508:	f002 fc84 	bl	409e14 <__ssprint_r>
  40750c:	2800      	cmp	r0, #0
  40750e:	f47f a9b7 	bne.w	406880 <_svfprintf_r+0x1a4>
  407512:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407514:	46c8      	mov	r8, r9
  407516:	f7ff ba72 	b.w	4069fe <_svfprintf_r+0x322>
  40751a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40751c:	4622      	mov	r2, r4
  40751e:	4620      	mov	r0, r4
  407520:	9c14      	ldr	r4, [sp, #80]	; 0x50
  407522:	4623      	mov	r3, r4
  407524:	4621      	mov	r1, r4
  407526:	f7fe fbf5 	bl	405d14 <__aeabi_dcmpun>
  40752a:	2800      	cmp	r0, #0
  40752c:	f040 8286 	bne.w	407a3c <_svfprintf_r+0x1360>
  407530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407532:	3301      	adds	r3, #1
  407534:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407536:	f023 0320 	bic.w	r3, r3, #32
  40753a:	930e      	str	r3, [sp, #56]	; 0x38
  40753c:	f000 81e2 	beq.w	407904 <_svfprintf_r+0x1228>
  407540:	2b47      	cmp	r3, #71	; 0x47
  407542:	f000 811e 	beq.w	407782 <_svfprintf_r+0x10a6>
  407546:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40754a:	9307      	str	r3, [sp, #28]
  40754c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40754e:	1e1f      	subs	r7, r3, #0
  407550:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407552:	9308      	str	r3, [sp, #32]
  407554:	bfbb      	ittet	lt
  407556:	463b      	movlt	r3, r7
  407558:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40755c:	2300      	movge	r3, #0
  40755e:	232d      	movlt	r3, #45	; 0x2d
  407560:	9310      	str	r3, [sp, #64]	; 0x40
  407562:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407564:	2b66      	cmp	r3, #102	; 0x66
  407566:	f000 81bb 	beq.w	4078e0 <_svfprintf_r+0x1204>
  40756a:	2b46      	cmp	r3, #70	; 0x46
  40756c:	f000 80df 	beq.w	40772e <_svfprintf_r+0x1052>
  407570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407572:	9a08      	ldr	r2, [sp, #32]
  407574:	2b45      	cmp	r3, #69	; 0x45
  407576:	bf0c      	ite	eq
  407578:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40757a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40757c:	a823      	add	r0, sp, #140	; 0x8c
  40757e:	a920      	add	r1, sp, #128	; 0x80
  407580:	bf08      	it	eq
  407582:	1c5d      	addeq	r5, r3, #1
  407584:	9004      	str	r0, [sp, #16]
  407586:	9103      	str	r1, [sp, #12]
  407588:	a81f      	add	r0, sp, #124	; 0x7c
  40758a:	2102      	movs	r1, #2
  40758c:	463b      	mov	r3, r7
  40758e:	9002      	str	r0, [sp, #8]
  407590:	9501      	str	r5, [sp, #4]
  407592:	9100      	str	r1, [sp, #0]
  407594:	980c      	ldr	r0, [sp, #48]	; 0x30
  407596:	f000 fb73 	bl	407c80 <_dtoa_r>
  40759a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40759c:	2b67      	cmp	r3, #103	; 0x67
  40759e:	4606      	mov	r6, r0
  4075a0:	f040 81e0 	bne.w	407964 <_svfprintf_r+0x1288>
  4075a4:	f01b 0f01 	tst.w	fp, #1
  4075a8:	f000 8246 	beq.w	407a38 <_svfprintf_r+0x135c>
  4075ac:	1974      	adds	r4, r6, r5
  4075ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4075b0:	9808      	ldr	r0, [sp, #32]
  4075b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4075b4:	4639      	mov	r1, r7
  4075b6:	f7fe fb7b 	bl	405cb0 <__aeabi_dcmpeq>
  4075ba:	2800      	cmp	r0, #0
  4075bc:	f040 8165 	bne.w	40788a <_svfprintf_r+0x11ae>
  4075c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4075c2:	42a3      	cmp	r3, r4
  4075c4:	d206      	bcs.n	4075d4 <_svfprintf_r+0xef8>
  4075c6:	2130      	movs	r1, #48	; 0x30
  4075c8:	1c5a      	adds	r2, r3, #1
  4075ca:	9223      	str	r2, [sp, #140]	; 0x8c
  4075cc:	7019      	strb	r1, [r3, #0]
  4075ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4075d0:	429c      	cmp	r4, r3
  4075d2:	d8f9      	bhi.n	4075c8 <_svfprintf_r+0xeec>
  4075d4:	1b9b      	subs	r3, r3, r6
  4075d6:	9313      	str	r3, [sp, #76]	; 0x4c
  4075d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4075da:	2b47      	cmp	r3, #71	; 0x47
  4075dc:	f000 80e9 	beq.w	4077b2 <_svfprintf_r+0x10d6>
  4075e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4075e2:	2b65      	cmp	r3, #101	; 0x65
  4075e4:	f340 81cd 	ble.w	407982 <_svfprintf_r+0x12a6>
  4075e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4075ea:	2b66      	cmp	r3, #102	; 0x66
  4075ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4075ee:	9312      	str	r3, [sp, #72]	; 0x48
  4075f0:	f000 819e 	beq.w	407930 <_svfprintf_r+0x1254>
  4075f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4075f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4075f8:	4619      	mov	r1, r3
  4075fa:	4291      	cmp	r1, r2
  4075fc:	f300 818a 	bgt.w	407914 <_svfprintf_r+0x1238>
  407600:	f01b 0f01 	tst.w	fp, #1
  407604:	f040 8213 	bne.w	407a2e <_svfprintf_r+0x1352>
  407608:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40760c:	9308      	str	r3, [sp, #32]
  40760e:	2367      	movs	r3, #103	; 0x67
  407610:	920e      	str	r2, [sp, #56]	; 0x38
  407612:	9311      	str	r3, [sp, #68]	; 0x44
  407614:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407616:	2b00      	cmp	r3, #0
  407618:	f040 80c4 	bne.w	4077a4 <_svfprintf_r+0x10c8>
  40761c:	930a      	str	r3, [sp, #40]	; 0x28
  40761e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407622:	f7ff b973 	b.w	40690c <_svfprintf_r+0x230>
  407626:	4635      	mov	r5, r6
  407628:	460c      	mov	r4, r1
  40762a:	4646      	mov	r6, r8
  40762c:	4690      	mov	r8, r2
  40762e:	3301      	adds	r3, #1
  407630:	443c      	add	r4, r7
  407632:	2b07      	cmp	r3, #7
  407634:	9427      	str	r4, [sp, #156]	; 0x9c
  407636:	9326      	str	r3, [sp, #152]	; 0x98
  407638:	e888 00a0 	stmia.w	r8, {r5, r7}
  40763c:	f73f aed1 	bgt.w	4073e2 <_svfprintf_r+0xd06>
  407640:	f108 0808 	add.w	r8, r8, #8
  407644:	e6d7      	b.n	4073f6 <_svfprintf_r+0xd1a>
  407646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407648:	6813      	ldr	r3, [r2, #0]
  40764a:	3204      	adds	r2, #4
  40764c:	920f      	str	r2, [sp, #60]	; 0x3c
  40764e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407650:	601a      	str	r2, [r3, #0]
  407652:	f7ff b86a 	b.w	40672a <_svfprintf_r+0x4e>
  407656:	aa25      	add	r2, sp, #148	; 0x94
  407658:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40765a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40765c:	f002 fbda 	bl	409e14 <__ssprint_r>
  407660:	2800      	cmp	r0, #0
  407662:	f47f a90d 	bne.w	406880 <_svfprintf_r+0x1a4>
  407666:	46c8      	mov	r8, r9
  407668:	e48d      	b.n	406f86 <_svfprintf_r+0x8aa>
  40766a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40766c:	4a27      	ldr	r2, [pc, #156]	; (40770c <_svfprintf_r+0x1030>)
  40766e:	f8c8 2000 	str.w	r2, [r8]
  407672:	3301      	adds	r3, #1
  407674:	3401      	adds	r4, #1
  407676:	2201      	movs	r2, #1
  407678:	2b07      	cmp	r3, #7
  40767a:	9427      	str	r4, [sp, #156]	; 0x9c
  40767c:	9326      	str	r3, [sp, #152]	; 0x98
  40767e:	f8c8 2004 	str.w	r2, [r8, #4]
  407682:	dc72      	bgt.n	40776a <_svfprintf_r+0x108e>
  407684:	f108 0808 	add.w	r8, r8, #8
  407688:	b929      	cbnz	r1, 407696 <_svfprintf_r+0xfba>
  40768a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40768c:	b91b      	cbnz	r3, 407696 <_svfprintf_r+0xfba>
  40768e:	9b07      	ldr	r3, [sp, #28]
  407690:	07d8      	lsls	r0, r3, #31
  407692:	f57f aa03 	bpl.w	406a9c <_svfprintf_r+0x3c0>
  407696:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407698:	9819      	ldr	r0, [sp, #100]	; 0x64
  40769a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40769c:	f8c8 2000 	str.w	r2, [r8]
  4076a0:	3301      	adds	r3, #1
  4076a2:	4602      	mov	r2, r0
  4076a4:	4422      	add	r2, r4
  4076a6:	2b07      	cmp	r3, #7
  4076a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4076aa:	f8c8 0004 	str.w	r0, [r8, #4]
  4076ae:	9326      	str	r3, [sp, #152]	; 0x98
  4076b0:	f300 818d 	bgt.w	4079ce <_svfprintf_r+0x12f2>
  4076b4:	f108 0808 	add.w	r8, r8, #8
  4076b8:	2900      	cmp	r1, #0
  4076ba:	f2c0 8165 	blt.w	407988 <_svfprintf_r+0x12ac>
  4076be:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4076c0:	f8c8 6000 	str.w	r6, [r8]
  4076c4:	3301      	adds	r3, #1
  4076c6:	188c      	adds	r4, r1, r2
  4076c8:	2b07      	cmp	r3, #7
  4076ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4076cc:	9326      	str	r3, [sp, #152]	; 0x98
  4076ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4076d2:	f77f a9e1 	ble.w	406a98 <_svfprintf_r+0x3bc>
  4076d6:	e52c      	b.n	407132 <_svfprintf_r+0xa56>
  4076d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4076da:	9909      	ldr	r1, [sp, #36]	; 0x24
  4076dc:	6813      	ldr	r3, [r2, #0]
  4076de:	17cd      	asrs	r5, r1, #31
  4076e0:	4608      	mov	r0, r1
  4076e2:	3204      	adds	r2, #4
  4076e4:	4629      	mov	r1, r5
  4076e6:	920f      	str	r2, [sp, #60]	; 0x3c
  4076e8:	e9c3 0100 	strd	r0, r1, [r3]
  4076ec:	f7ff b81d 	b.w	40672a <_svfprintf_r+0x4e>
  4076f0:	aa25      	add	r2, sp, #148	; 0x94
  4076f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4076f6:	f002 fb8d 	bl	409e14 <__ssprint_r>
  4076fa:	2800      	cmp	r0, #0
  4076fc:	f47f a8c0 	bne.w	406880 <_svfprintf_r+0x1a4>
  407700:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407702:	46c8      	mov	r8, r9
  407704:	e458      	b.n	406fb8 <_svfprintf_r+0x8dc>
  407706:	bf00      	nop
  407708:	0040a8a0 	.word	0x0040a8a0
  40770c:	0040a88c 	.word	0x0040a88c
  407710:	2140      	movs	r1, #64	; 0x40
  407712:	980c      	ldr	r0, [sp, #48]	; 0x30
  407714:	f001 fb40 	bl	408d98 <_malloc_r>
  407718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40771a:	6010      	str	r0, [r2, #0]
  40771c:	6110      	str	r0, [r2, #16]
  40771e:	2800      	cmp	r0, #0
  407720:	f000 81f2 	beq.w	407b08 <_svfprintf_r+0x142c>
  407724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407726:	2340      	movs	r3, #64	; 0x40
  407728:	6153      	str	r3, [r2, #20]
  40772a:	f7fe bfee 	b.w	40670a <_svfprintf_r+0x2e>
  40772e:	a823      	add	r0, sp, #140	; 0x8c
  407730:	a920      	add	r1, sp, #128	; 0x80
  407732:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  407734:	9004      	str	r0, [sp, #16]
  407736:	9103      	str	r1, [sp, #12]
  407738:	a81f      	add	r0, sp, #124	; 0x7c
  40773a:	2103      	movs	r1, #3
  40773c:	9002      	str	r0, [sp, #8]
  40773e:	9a08      	ldr	r2, [sp, #32]
  407740:	9401      	str	r4, [sp, #4]
  407742:	463b      	mov	r3, r7
  407744:	9100      	str	r1, [sp, #0]
  407746:	980c      	ldr	r0, [sp, #48]	; 0x30
  407748:	f000 fa9a 	bl	407c80 <_dtoa_r>
  40774c:	4625      	mov	r5, r4
  40774e:	4606      	mov	r6, r0
  407750:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407752:	2b46      	cmp	r3, #70	; 0x46
  407754:	eb06 0405 	add.w	r4, r6, r5
  407758:	f47f af29 	bne.w	4075ae <_svfprintf_r+0xed2>
  40775c:	7833      	ldrb	r3, [r6, #0]
  40775e:	2b30      	cmp	r3, #48	; 0x30
  407760:	f000 8178 	beq.w	407a54 <_svfprintf_r+0x1378>
  407764:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  407766:	442c      	add	r4, r5
  407768:	e721      	b.n	4075ae <_svfprintf_r+0xed2>
  40776a:	aa25      	add	r2, sp, #148	; 0x94
  40776c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40776e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407770:	f002 fb50 	bl	409e14 <__ssprint_r>
  407774:	2800      	cmp	r0, #0
  407776:	f47f a883 	bne.w	406880 <_svfprintf_r+0x1a4>
  40777a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40777c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40777e:	46c8      	mov	r8, r9
  407780:	e782      	b.n	407688 <_svfprintf_r+0xfac>
  407782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407784:	2b00      	cmp	r3, #0
  407786:	bf08      	it	eq
  407788:	2301      	moveq	r3, #1
  40778a:	930a      	str	r3, [sp, #40]	; 0x28
  40778c:	e6db      	b.n	407546 <_svfprintf_r+0xe6a>
  40778e:	4630      	mov	r0, r6
  407790:	940a      	str	r4, [sp, #40]	; 0x28
  407792:	f7fe ff35 	bl	406600 <strlen>
  407796:	950f      	str	r5, [sp, #60]	; 0x3c
  407798:	900e      	str	r0, [sp, #56]	; 0x38
  40779a:	f8cd b01c 	str.w	fp, [sp, #28]
  40779e:	4603      	mov	r3, r0
  4077a0:	f7ff b9f9 	b.w	406b96 <_svfprintf_r+0x4ba>
  4077a4:	272d      	movs	r7, #45	; 0x2d
  4077a6:	2300      	movs	r3, #0
  4077a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4077ac:	930a      	str	r3, [sp, #40]	; 0x28
  4077ae:	f7ff b8ae 	b.w	40690e <_svfprintf_r+0x232>
  4077b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4077b4:	9312      	str	r3, [sp, #72]	; 0x48
  4077b6:	461a      	mov	r2, r3
  4077b8:	3303      	adds	r3, #3
  4077ba:	db04      	blt.n	4077c6 <_svfprintf_r+0x10ea>
  4077bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077be:	4619      	mov	r1, r3
  4077c0:	4291      	cmp	r1, r2
  4077c2:	f6bf af17 	bge.w	4075f4 <_svfprintf_r+0xf18>
  4077c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4077c8:	3b02      	subs	r3, #2
  4077ca:	9311      	str	r3, [sp, #68]	; 0x44
  4077cc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4077d0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4077d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4077d6:	3b01      	subs	r3, #1
  4077d8:	2b00      	cmp	r3, #0
  4077da:	931f      	str	r3, [sp, #124]	; 0x7c
  4077dc:	bfbd      	ittte	lt
  4077de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4077e0:	f1c3 0301 	rsblt	r3, r3, #1
  4077e4:	222d      	movlt	r2, #45	; 0x2d
  4077e6:	222b      	movge	r2, #43	; 0x2b
  4077e8:	2b09      	cmp	r3, #9
  4077ea:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4077ee:	f340 8116 	ble.w	407a1e <_svfprintf_r+0x1342>
  4077f2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4077f6:	4620      	mov	r0, r4
  4077f8:	4dab      	ldr	r5, [pc, #684]	; (407aa8 <_svfprintf_r+0x13cc>)
  4077fa:	e000      	b.n	4077fe <_svfprintf_r+0x1122>
  4077fc:	4610      	mov	r0, r2
  4077fe:	fb85 1203 	smull	r1, r2, r5, r3
  407802:	17d9      	asrs	r1, r3, #31
  407804:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407808:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40780c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407810:	3230      	adds	r2, #48	; 0x30
  407812:	2909      	cmp	r1, #9
  407814:	f800 2c01 	strb.w	r2, [r0, #-1]
  407818:	460b      	mov	r3, r1
  40781a:	f100 32ff 	add.w	r2, r0, #4294967295
  40781e:	dced      	bgt.n	4077fc <_svfprintf_r+0x1120>
  407820:	3330      	adds	r3, #48	; 0x30
  407822:	3802      	subs	r0, #2
  407824:	b2d9      	uxtb	r1, r3
  407826:	4284      	cmp	r4, r0
  407828:	f802 1c01 	strb.w	r1, [r2, #-1]
  40782c:	f240 8165 	bls.w	407afa <_svfprintf_r+0x141e>
  407830:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  407834:	4613      	mov	r3, r2
  407836:	e001      	b.n	40783c <_svfprintf_r+0x1160>
  407838:	f813 1b01 	ldrb.w	r1, [r3], #1
  40783c:	f800 1b01 	strb.w	r1, [r0], #1
  407840:	42a3      	cmp	r3, r4
  407842:	d1f9      	bne.n	407838 <_svfprintf_r+0x115c>
  407844:	3301      	adds	r3, #1
  407846:	1a9b      	subs	r3, r3, r2
  407848:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40784c:	4413      	add	r3, r2
  40784e:	aa21      	add	r2, sp, #132	; 0x84
  407850:	1a9b      	subs	r3, r3, r2
  407852:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407854:	931b      	str	r3, [sp, #108]	; 0x6c
  407856:	2a01      	cmp	r2, #1
  407858:	4413      	add	r3, r2
  40785a:	930e      	str	r3, [sp, #56]	; 0x38
  40785c:	f340 8119 	ble.w	407a92 <_svfprintf_r+0x13b6>
  407860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407862:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407864:	4413      	add	r3, r2
  407866:	930e      	str	r3, [sp, #56]	; 0x38
  407868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40786c:	9308      	str	r3, [sp, #32]
  40786e:	2300      	movs	r3, #0
  407870:	9312      	str	r3, [sp, #72]	; 0x48
  407872:	e6cf      	b.n	407614 <_svfprintf_r+0xf38>
  407874:	aa25      	add	r2, sp, #148	; 0x94
  407876:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407878:	980c      	ldr	r0, [sp, #48]	; 0x30
  40787a:	f002 facb 	bl	409e14 <__ssprint_r>
  40787e:	2800      	cmp	r0, #0
  407880:	f47e affe 	bne.w	406880 <_svfprintf_r+0x1a4>
  407884:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407886:	46c8      	mov	r8, r9
  407888:	e4d7      	b.n	40723a <_svfprintf_r+0xb5e>
  40788a:	4623      	mov	r3, r4
  40788c:	e6a2      	b.n	4075d4 <_svfprintf_r+0xef8>
  40788e:	aa25      	add	r2, sp, #148	; 0x94
  407890:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407892:	980c      	ldr	r0, [sp, #48]	; 0x30
  407894:	f002 fabe 	bl	409e14 <__ssprint_r>
  407898:	2800      	cmp	r0, #0
  40789a:	f47e aff1 	bne.w	406880 <_svfprintf_r+0x1a4>
  40789e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4078a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4078a2:	46c8      	mov	r8, r9
  4078a4:	e5ae      	b.n	407404 <_svfprintf_r+0xd28>
  4078a6:	aa25      	add	r2, sp, #148	; 0x94
  4078a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4078aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078ac:	f002 fab2 	bl	409e14 <__ssprint_r>
  4078b0:	2800      	cmp	r0, #0
  4078b2:	f47e afe5 	bne.w	406880 <_svfprintf_r+0x1a4>
  4078b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4078b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4078ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4078bc:	1a9a      	subs	r2, r3, r2
  4078be:	46c8      	mov	r8, r9
  4078c0:	e5b8      	b.n	407434 <_svfprintf_r+0xd58>
  4078c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4078c4:	9612      	str	r6, [sp, #72]	; 0x48
  4078c6:	2b06      	cmp	r3, #6
  4078c8:	bf28      	it	cs
  4078ca:	2306      	movcs	r3, #6
  4078cc:	960a      	str	r6, [sp, #40]	; 0x28
  4078ce:	4637      	mov	r7, r6
  4078d0:	9308      	str	r3, [sp, #32]
  4078d2:	950f      	str	r5, [sp, #60]	; 0x3c
  4078d4:	f8cd b01c 	str.w	fp, [sp, #28]
  4078d8:	930e      	str	r3, [sp, #56]	; 0x38
  4078da:	4e74      	ldr	r6, [pc, #464]	; (407aac <_svfprintf_r+0x13d0>)
  4078dc:	f7ff b816 	b.w	40690c <_svfprintf_r+0x230>
  4078e0:	a823      	add	r0, sp, #140	; 0x8c
  4078e2:	a920      	add	r1, sp, #128	; 0x80
  4078e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4078e6:	9004      	str	r0, [sp, #16]
  4078e8:	9103      	str	r1, [sp, #12]
  4078ea:	a81f      	add	r0, sp, #124	; 0x7c
  4078ec:	2103      	movs	r1, #3
  4078ee:	9002      	str	r0, [sp, #8]
  4078f0:	9a08      	ldr	r2, [sp, #32]
  4078f2:	9501      	str	r5, [sp, #4]
  4078f4:	463b      	mov	r3, r7
  4078f6:	9100      	str	r1, [sp, #0]
  4078f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4078fa:	f000 f9c1 	bl	407c80 <_dtoa_r>
  4078fe:	4606      	mov	r6, r0
  407900:	1944      	adds	r4, r0, r5
  407902:	e72b      	b.n	40775c <_svfprintf_r+0x1080>
  407904:	2306      	movs	r3, #6
  407906:	930a      	str	r3, [sp, #40]	; 0x28
  407908:	e61d      	b.n	407546 <_svfprintf_r+0xe6a>
  40790a:	272d      	movs	r7, #45	; 0x2d
  40790c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407910:	f7ff bacd 	b.w	406eae <_svfprintf_r+0x7d2>
  407914:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407918:	4413      	add	r3, r2
  40791a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40791c:	930e      	str	r3, [sp, #56]	; 0x38
  40791e:	2a00      	cmp	r2, #0
  407920:	f340 80b0 	ble.w	407a84 <_svfprintf_r+0x13a8>
  407924:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407928:	9308      	str	r3, [sp, #32]
  40792a:	2367      	movs	r3, #103	; 0x67
  40792c:	9311      	str	r3, [sp, #68]	; 0x44
  40792e:	e671      	b.n	407614 <_svfprintf_r+0xf38>
  407930:	2b00      	cmp	r3, #0
  407932:	f340 80c3 	ble.w	407abc <_svfprintf_r+0x13e0>
  407936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407938:	2a00      	cmp	r2, #0
  40793a:	f040 8099 	bne.w	407a70 <_svfprintf_r+0x1394>
  40793e:	f01b 0f01 	tst.w	fp, #1
  407942:	f040 8095 	bne.w	407a70 <_svfprintf_r+0x1394>
  407946:	9308      	str	r3, [sp, #32]
  407948:	930e      	str	r3, [sp, #56]	; 0x38
  40794a:	e663      	b.n	407614 <_svfprintf_r+0xf38>
  40794c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40794e:	9308      	str	r3, [sp, #32]
  407950:	930e      	str	r3, [sp, #56]	; 0x38
  407952:	900a      	str	r0, [sp, #40]	; 0x28
  407954:	950f      	str	r5, [sp, #60]	; 0x3c
  407956:	f8cd b01c 	str.w	fp, [sp, #28]
  40795a:	9012      	str	r0, [sp, #72]	; 0x48
  40795c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407960:	f7fe bfd4 	b.w	40690c <_svfprintf_r+0x230>
  407964:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407966:	2b47      	cmp	r3, #71	; 0x47
  407968:	f47f ae20 	bne.w	4075ac <_svfprintf_r+0xed0>
  40796c:	f01b 0f01 	tst.w	fp, #1
  407970:	f47f aeee 	bne.w	407750 <_svfprintf_r+0x1074>
  407974:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407976:	1b9b      	subs	r3, r3, r6
  407978:	9313      	str	r3, [sp, #76]	; 0x4c
  40797a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40797c:	2b47      	cmp	r3, #71	; 0x47
  40797e:	f43f af18 	beq.w	4077b2 <_svfprintf_r+0x10d6>
  407982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407984:	9312      	str	r3, [sp, #72]	; 0x48
  407986:	e721      	b.n	4077cc <_svfprintf_r+0x10f0>
  407988:	424f      	negs	r7, r1
  40798a:	3110      	adds	r1, #16
  40798c:	4d48      	ldr	r5, [pc, #288]	; (407ab0 <_svfprintf_r+0x13d4>)
  40798e:	da2f      	bge.n	4079f0 <_svfprintf_r+0x1314>
  407990:	2410      	movs	r4, #16
  407992:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407996:	e004      	b.n	4079a2 <_svfprintf_r+0x12c6>
  407998:	f108 0808 	add.w	r8, r8, #8
  40799c:	3f10      	subs	r7, #16
  40799e:	2f10      	cmp	r7, #16
  4079a0:	dd26      	ble.n	4079f0 <_svfprintf_r+0x1314>
  4079a2:	3301      	adds	r3, #1
  4079a4:	3210      	adds	r2, #16
  4079a6:	2b07      	cmp	r3, #7
  4079a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4079aa:	9326      	str	r3, [sp, #152]	; 0x98
  4079ac:	f8c8 5000 	str.w	r5, [r8]
  4079b0:	f8c8 4004 	str.w	r4, [r8, #4]
  4079b4:	ddf0      	ble.n	407998 <_svfprintf_r+0x12bc>
  4079b6:	aa25      	add	r2, sp, #148	; 0x94
  4079b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079ba:	4658      	mov	r0, fp
  4079bc:	f002 fa2a 	bl	409e14 <__ssprint_r>
  4079c0:	2800      	cmp	r0, #0
  4079c2:	f47e af5d 	bne.w	406880 <_svfprintf_r+0x1a4>
  4079c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4079c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079ca:	46c8      	mov	r8, r9
  4079cc:	e7e6      	b.n	40799c <_svfprintf_r+0x12c0>
  4079ce:	aa25      	add	r2, sp, #148	; 0x94
  4079d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4079d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4079d4:	f002 fa1e 	bl	409e14 <__ssprint_r>
  4079d8:	2800      	cmp	r0, #0
  4079da:	f47e af51 	bne.w	406880 <_svfprintf_r+0x1a4>
  4079de:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4079e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4079e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4079e4:	46c8      	mov	r8, r9
  4079e6:	e667      	b.n	4076b8 <_svfprintf_r+0xfdc>
  4079e8:	2000      	movs	r0, #0
  4079ea:	900a      	str	r0, [sp, #40]	; 0x28
  4079ec:	f7fe bed0 	b.w	406790 <_svfprintf_r+0xb4>
  4079f0:	3301      	adds	r3, #1
  4079f2:	443a      	add	r2, r7
  4079f4:	2b07      	cmp	r3, #7
  4079f6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4079fa:	9227      	str	r2, [sp, #156]	; 0x9c
  4079fc:	9326      	str	r3, [sp, #152]	; 0x98
  4079fe:	f108 0808 	add.w	r8, r8, #8
  407a02:	f77f ae5c 	ble.w	4076be <_svfprintf_r+0xfe2>
  407a06:	aa25      	add	r2, sp, #148	; 0x94
  407a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407a0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  407a0c:	f002 fa02 	bl	409e14 <__ssprint_r>
  407a10:	2800      	cmp	r0, #0
  407a12:	f47e af35 	bne.w	406880 <_svfprintf_r+0x1a4>
  407a16:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407a1a:	46c8      	mov	r8, r9
  407a1c:	e64f      	b.n	4076be <_svfprintf_r+0xfe2>
  407a1e:	3330      	adds	r3, #48	; 0x30
  407a20:	2230      	movs	r2, #48	; 0x30
  407a22:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  407a26:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  407a2a:	ab22      	add	r3, sp, #136	; 0x88
  407a2c:	e70f      	b.n	40784e <_svfprintf_r+0x1172>
  407a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407a30:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407a32:	4413      	add	r3, r2
  407a34:	930e      	str	r3, [sp, #56]	; 0x38
  407a36:	e775      	b.n	407924 <_svfprintf_r+0x1248>
  407a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407a3a:	e5cb      	b.n	4075d4 <_svfprintf_r+0xef8>
  407a3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407a3e:	4e1d      	ldr	r6, [pc, #116]	; (407ab4 <_svfprintf_r+0x13d8>)
  407a40:	2b00      	cmp	r3, #0
  407a42:	bfb6      	itet	lt
  407a44:	272d      	movlt	r7, #45	; 0x2d
  407a46:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  407a4a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  407a4e:	4b1a      	ldr	r3, [pc, #104]	; (407ab8 <_svfprintf_r+0x13dc>)
  407a50:	f7ff ba2f 	b.w	406eb2 <_svfprintf_r+0x7d6>
  407a54:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407a56:	9808      	ldr	r0, [sp, #32]
  407a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407a5a:	4639      	mov	r1, r7
  407a5c:	f7fe f928 	bl	405cb0 <__aeabi_dcmpeq>
  407a60:	2800      	cmp	r0, #0
  407a62:	f47f ae7f 	bne.w	407764 <_svfprintf_r+0x1088>
  407a66:	f1c5 0501 	rsb	r5, r5, #1
  407a6a:	951f      	str	r5, [sp, #124]	; 0x7c
  407a6c:	442c      	add	r4, r5
  407a6e:	e59e      	b.n	4075ae <_svfprintf_r+0xed2>
  407a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407a72:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407a74:	4413      	add	r3, r2
  407a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407a78:	441a      	add	r2, r3
  407a7a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  407a7e:	920e      	str	r2, [sp, #56]	; 0x38
  407a80:	9308      	str	r3, [sp, #32]
  407a82:	e5c7      	b.n	407614 <_svfprintf_r+0xf38>
  407a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407a88:	f1c3 0301 	rsb	r3, r3, #1
  407a8c:	441a      	add	r2, r3
  407a8e:	4613      	mov	r3, r2
  407a90:	e7d0      	b.n	407a34 <_svfprintf_r+0x1358>
  407a92:	f01b 0301 	ands.w	r3, fp, #1
  407a96:	9312      	str	r3, [sp, #72]	; 0x48
  407a98:	f47f aee2 	bne.w	407860 <_svfprintf_r+0x1184>
  407a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407aa2:	9308      	str	r3, [sp, #32]
  407aa4:	e5b6      	b.n	407614 <_svfprintf_r+0xf38>
  407aa6:	bf00      	nop
  407aa8:	66666667 	.word	0x66666667
  407aac:	0040a884 	.word	0x0040a884
  407ab0:	0040a8a0 	.word	0x0040a8a0
  407ab4:	0040a858 	.word	0x0040a858
  407ab8:	0040a854 	.word	0x0040a854
  407abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407abe:	b913      	cbnz	r3, 407ac6 <_svfprintf_r+0x13ea>
  407ac0:	f01b 0f01 	tst.w	fp, #1
  407ac4:	d002      	beq.n	407acc <_svfprintf_r+0x13f0>
  407ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407ac8:	3301      	adds	r3, #1
  407aca:	e7d4      	b.n	407a76 <_svfprintf_r+0x139a>
  407acc:	2301      	movs	r3, #1
  407ace:	e73a      	b.n	407946 <_svfprintf_r+0x126a>
  407ad0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407ad2:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407ad6:	6828      	ldr	r0, [r5, #0]
  407ad8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  407adc:	900a      	str	r0, [sp, #40]	; 0x28
  407ade:	4628      	mov	r0, r5
  407ae0:	3004      	adds	r0, #4
  407ae2:	46a2      	mov	sl, r4
  407ae4:	900f      	str	r0, [sp, #60]	; 0x3c
  407ae6:	f7fe be51 	b.w	40678c <_svfprintf_r+0xb0>
  407aea:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407aee:	f7ff b867 	b.w	406bc0 <_svfprintf_r+0x4e4>
  407af2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407af6:	f7ff ba15 	b.w	406f24 <_svfprintf_r+0x848>
  407afa:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  407afe:	e6a6      	b.n	40784e <_svfprintf_r+0x1172>
  407b00:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407b04:	f7ff b8eb 	b.w	406cde <_svfprintf_r+0x602>
  407b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407b0a:	230c      	movs	r3, #12
  407b0c:	6013      	str	r3, [r2, #0]
  407b0e:	f04f 33ff 	mov.w	r3, #4294967295
  407b12:	9309      	str	r3, [sp, #36]	; 0x24
  407b14:	f7fe bebd 	b.w	406892 <_svfprintf_r+0x1b6>
  407b18:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407b1c:	f7ff b99a 	b.w	406e54 <_svfprintf_r+0x778>
  407b20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407b24:	f7ff b976 	b.w	406e14 <_svfprintf_r+0x738>
  407b28:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407b2c:	f7ff b959 	b.w	406de2 <_svfprintf_r+0x706>
  407b30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407b34:	f7ff b912 	b.w	406d5c <_svfprintf_r+0x680>

00407b38 <register_fini>:
  407b38:	4b02      	ldr	r3, [pc, #8]	; (407b44 <register_fini+0xc>)
  407b3a:	b113      	cbz	r3, 407b42 <register_fini+0xa>
  407b3c:	4802      	ldr	r0, [pc, #8]	; (407b48 <register_fini+0x10>)
  407b3e:	f000 b805 	b.w	407b4c <atexit>
  407b42:	4770      	bx	lr
  407b44:	00000000 	.word	0x00000000
  407b48:	00408ad5 	.word	0x00408ad5

00407b4c <atexit>:
  407b4c:	2300      	movs	r3, #0
  407b4e:	4601      	mov	r1, r0
  407b50:	461a      	mov	r2, r3
  407b52:	4618      	mov	r0, r3
  407b54:	f002 b9ea 	b.w	409f2c <__register_exitproc>

00407b58 <quorem>:
  407b58:	6902      	ldr	r2, [r0, #16]
  407b5a:	690b      	ldr	r3, [r1, #16]
  407b5c:	4293      	cmp	r3, r2
  407b5e:	f300 808d 	bgt.w	407c7c <quorem+0x124>
  407b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b66:	f103 38ff 	add.w	r8, r3, #4294967295
  407b6a:	f101 0714 	add.w	r7, r1, #20
  407b6e:	f100 0b14 	add.w	fp, r0, #20
  407b72:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  407b76:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  407b7a:	ea4f 0488 	mov.w	r4, r8, lsl #2
  407b7e:	b083      	sub	sp, #12
  407b80:	3201      	adds	r2, #1
  407b82:	fbb3 f9f2 	udiv	r9, r3, r2
  407b86:	eb0b 0304 	add.w	r3, fp, r4
  407b8a:	9400      	str	r4, [sp, #0]
  407b8c:	eb07 0a04 	add.w	sl, r7, r4
  407b90:	9301      	str	r3, [sp, #4]
  407b92:	f1b9 0f00 	cmp.w	r9, #0
  407b96:	d039      	beq.n	407c0c <quorem+0xb4>
  407b98:	2500      	movs	r5, #0
  407b9a:	462e      	mov	r6, r5
  407b9c:	46bc      	mov	ip, r7
  407b9e:	46de      	mov	lr, fp
  407ba0:	f85c 4b04 	ldr.w	r4, [ip], #4
  407ba4:	f8de 3000 	ldr.w	r3, [lr]
  407ba8:	b2a2      	uxth	r2, r4
  407baa:	fb09 5502 	mla	r5, r9, r2, r5
  407bae:	0c22      	lsrs	r2, r4, #16
  407bb0:	0c2c      	lsrs	r4, r5, #16
  407bb2:	fb09 4202 	mla	r2, r9, r2, r4
  407bb6:	b2ad      	uxth	r5, r5
  407bb8:	1b75      	subs	r5, r6, r5
  407bba:	b296      	uxth	r6, r2
  407bbc:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  407bc0:	fa15 f383 	uxtah	r3, r5, r3
  407bc4:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407bc8:	b29b      	uxth	r3, r3
  407bca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  407bce:	45e2      	cmp	sl, ip
  407bd0:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407bd4:	f84e 3b04 	str.w	r3, [lr], #4
  407bd8:	ea4f 4626 	mov.w	r6, r6, asr #16
  407bdc:	d2e0      	bcs.n	407ba0 <quorem+0x48>
  407bde:	9b00      	ldr	r3, [sp, #0]
  407be0:	f85b 3003 	ldr.w	r3, [fp, r3]
  407be4:	b993      	cbnz	r3, 407c0c <quorem+0xb4>
  407be6:	9c01      	ldr	r4, [sp, #4]
  407be8:	1f23      	subs	r3, r4, #4
  407bea:	459b      	cmp	fp, r3
  407bec:	d20c      	bcs.n	407c08 <quorem+0xb0>
  407bee:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407bf2:	b94b      	cbnz	r3, 407c08 <quorem+0xb0>
  407bf4:	f1a4 0308 	sub.w	r3, r4, #8
  407bf8:	e002      	b.n	407c00 <quorem+0xa8>
  407bfa:	681a      	ldr	r2, [r3, #0]
  407bfc:	3b04      	subs	r3, #4
  407bfe:	b91a      	cbnz	r2, 407c08 <quorem+0xb0>
  407c00:	459b      	cmp	fp, r3
  407c02:	f108 38ff 	add.w	r8, r8, #4294967295
  407c06:	d3f8      	bcc.n	407bfa <quorem+0xa2>
  407c08:	f8c0 8010 	str.w	r8, [r0, #16]
  407c0c:	4604      	mov	r4, r0
  407c0e:	f001 fe4d 	bl	4098ac <__mcmp>
  407c12:	2800      	cmp	r0, #0
  407c14:	db2e      	blt.n	407c74 <quorem+0x11c>
  407c16:	f109 0901 	add.w	r9, r9, #1
  407c1a:	465d      	mov	r5, fp
  407c1c:	2300      	movs	r3, #0
  407c1e:	f857 1b04 	ldr.w	r1, [r7], #4
  407c22:	6828      	ldr	r0, [r5, #0]
  407c24:	b28a      	uxth	r2, r1
  407c26:	1a9a      	subs	r2, r3, r2
  407c28:	0c0b      	lsrs	r3, r1, #16
  407c2a:	fa12 f280 	uxtah	r2, r2, r0
  407c2e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  407c32:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407c36:	b292      	uxth	r2, r2
  407c38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407c3c:	45ba      	cmp	sl, r7
  407c3e:	f845 2b04 	str.w	r2, [r5], #4
  407c42:	ea4f 4323 	mov.w	r3, r3, asr #16
  407c46:	d2ea      	bcs.n	407c1e <quorem+0xc6>
  407c48:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  407c4c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  407c50:	b982      	cbnz	r2, 407c74 <quorem+0x11c>
  407c52:	1f1a      	subs	r2, r3, #4
  407c54:	4593      	cmp	fp, r2
  407c56:	d20b      	bcs.n	407c70 <quorem+0x118>
  407c58:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407c5c:	b942      	cbnz	r2, 407c70 <quorem+0x118>
  407c5e:	3b08      	subs	r3, #8
  407c60:	e002      	b.n	407c68 <quorem+0x110>
  407c62:	681a      	ldr	r2, [r3, #0]
  407c64:	3b04      	subs	r3, #4
  407c66:	b91a      	cbnz	r2, 407c70 <quorem+0x118>
  407c68:	459b      	cmp	fp, r3
  407c6a:	f108 38ff 	add.w	r8, r8, #4294967295
  407c6e:	d3f8      	bcc.n	407c62 <quorem+0x10a>
  407c70:	f8c4 8010 	str.w	r8, [r4, #16]
  407c74:	4648      	mov	r0, r9
  407c76:	b003      	add	sp, #12
  407c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c7c:	2000      	movs	r0, #0
  407c7e:	4770      	bx	lr

00407c80 <_dtoa_r>:
  407c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c84:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407c86:	b09b      	sub	sp, #108	; 0x6c
  407c88:	4604      	mov	r4, r0
  407c8a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  407c8c:	4692      	mov	sl, r2
  407c8e:	469b      	mov	fp, r3
  407c90:	b141      	cbz	r1, 407ca4 <_dtoa_r+0x24>
  407c92:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407c94:	604a      	str	r2, [r1, #4]
  407c96:	2301      	movs	r3, #1
  407c98:	4093      	lsls	r3, r2
  407c9a:	608b      	str	r3, [r1, #8]
  407c9c:	f001 fc2e 	bl	4094fc <_Bfree>
  407ca0:	2300      	movs	r3, #0
  407ca2:	6423      	str	r3, [r4, #64]	; 0x40
  407ca4:	f1bb 0f00 	cmp.w	fp, #0
  407ca8:	465d      	mov	r5, fp
  407caa:	db35      	blt.n	407d18 <_dtoa_r+0x98>
  407cac:	2300      	movs	r3, #0
  407cae:	6033      	str	r3, [r6, #0]
  407cb0:	4b9d      	ldr	r3, [pc, #628]	; (407f28 <_dtoa_r+0x2a8>)
  407cb2:	43ab      	bics	r3, r5
  407cb4:	d015      	beq.n	407ce2 <_dtoa_r+0x62>
  407cb6:	4650      	mov	r0, sl
  407cb8:	4659      	mov	r1, fp
  407cba:	2200      	movs	r2, #0
  407cbc:	2300      	movs	r3, #0
  407cbe:	f7fd fff7 	bl	405cb0 <__aeabi_dcmpeq>
  407cc2:	4680      	mov	r8, r0
  407cc4:	2800      	cmp	r0, #0
  407cc6:	d02d      	beq.n	407d24 <_dtoa_r+0xa4>
  407cc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407cca:	2301      	movs	r3, #1
  407ccc:	6013      	str	r3, [r2, #0]
  407cce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407cd0:	2b00      	cmp	r3, #0
  407cd2:	f000 80bd 	beq.w	407e50 <_dtoa_r+0x1d0>
  407cd6:	4895      	ldr	r0, [pc, #596]	; (407f2c <_dtoa_r+0x2ac>)
  407cd8:	6018      	str	r0, [r3, #0]
  407cda:	3801      	subs	r0, #1
  407cdc:	b01b      	add	sp, #108	; 0x6c
  407cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ce2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407ce4:	f242 730f 	movw	r3, #9999	; 0x270f
  407ce8:	6013      	str	r3, [r2, #0]
  407cea:	f1ba 0f00 	cmp.w	sl, #0
  407cee:	d10d      	bne.n	407d0c <_dtoa_r+0x8c>
  407cf0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407cf4:	b955      	cbnz	r5, 407d0c <_dtoa_r+0x8c>
  407cf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407cf8:	488d      	ldr	r0, [pc, #564]	; (407f30 <_dtoa_r+0x2b0>)
  407cfa:	2b00      	cmp	r3, #0
  407cfc:	d0ee      	beq.n	407cdc <_dtoa_r+0x5c>
  407cfe:	f100 0308 	add.w	r3, r0, #8
  407d02:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407d04:	6013      	str	r3, [r2, #0]
  407d06:	b01b      	add	sp, #108	; 0x6c
  407d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407d0e:	4889      	ldr	r0, [pc, #548]	; (407f34 <_dtoa_r+0x2b4>)
  407d10:	2b00      	cmp	r3, #0
  407d12:	d0e3      	beq.n	407cdc <_dtoa_r+0x5c>
  407d14:	1cc3      	adds	r3, r0, #3
  407d16:	e7f4      	b.n	407d02 <_dtoa_r+0x82>
  407d18:	2301      	movs	r3, #1
  407d1a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  407d1e:	6033      	str	r3, [r6, #0]
  407d20:	46ab      	mov	fp, r5
  407d22:	e7c5      	b.n	407cb0 <_dtoa_r+0x30>
  407d24:	aa18      	add	r2, sp, #96	; 0x60
  407d26:	ab19      	add	r3, sp, #100	; 0x64
  407d28:	9201      	str	r2, [sp, #4]
  407d2a:	9300      	str	r3, [sp, #0]
  407d2c:	4652      	mov	r2, sl
  407d2e:	465b      	mov	r3, fp
  407d30:	4620      	mov	r0, r4
  407d32:	f001 fe5b 	bl	4099ec <__d2b>
  407d36:	0d2b      	lsrs	r3, r5, #20
  407d38:	4681      	mov	r9, r0
  407d3a:	d071      	beq.n	407e20 <_dtoa_r+0x1a0>
  407d3c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  407d40:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  407d44:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407d46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  407d4a:	4650      	mov	r0, sl
  407d4c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  407d50:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  407d54:	2200      	movs	r2, #0
  407d56:	4b78      	ldr	r3, [pc, #480]	; (407f38 <_dtoa_r+0x2b8>)
  407d58:	f7fd fb8e 	bl	405478 <__aeabi_dsub>
  407d5c:	a36c      	add	r3, pc, #432	; (adr r3, 407f10 <_dtoa_r+0x290>)
  407d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d62:	f7fd fd3d 	bl	4057e0 <__aeabi_dmul>
  407d66:	a36c      	add	r3, pc, #432	; (adr r3, 407f18 <_dtoa_r+0x298>)
  407d68:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d6c:	f7fd fb86 	bl	40547c <__adddf3>
  407d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407d74:	4630      	mov	r0, r6
  407d76:	f7fd fccd 	bl	405714 <__aeabi_i2d>
  407d7a:	a369      	add	r3, pc, #420	; (adr r3, 407f20 <_dtoa_r+0x2a0>)
  407d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  407d80:	f7fd fd2e 	bl	4057e0 <__aeabi_dmul>
  407d84:	4602      	mov	r2, r0
  407d86:	460b      	mov	r3, r1
  407d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407d8c:	f7fd fb76 	bl	40547c <__adddf3>
  407d90:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407d94:	f002 f95c 	bl	40a050 <__aeabi_d2iz>
  407d98:	2200      	movs	r2, #0
  407d9a:	9002      	str	r0, [sp, #8]
  407d9c:	2300      	movs	r3, #0
  407d9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407da2:	f7fd ff8f 	bl	405cc4 <__aeabi_dcmplt>
  407da6:	2800      	cmp	r0, #0
  407da8:	f040 8173 	bne.w	408092 <_dtoa_r+0x412>
  407dac:	9d02      	ldr	r5, [sp, #8]
  407dae:	2d16      	cmp	r5, #22
  407db0:	f200 815d 	bhi.w	40806e <_dtoa_r+0x3ee>
  407db4:	4b61      	ldr	r3, [pc, #388]	; (407f3c <_dtoa_r+0x2bc>)
  407db6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  407dba:	e9d3 0100 	ldrd	r0, r1, [r3]
  407dbe:	4652      	mov	r2, sl
  407dc0:	465b      	mov	r3, fp
  407dc2:	f7fd ff9d 	bl	405d00 <__aeabi_dcmpgt>
  407dc6:	2800      	cmp	r0, #0
  407dc8:	f000 81c5 	beq.w	408156 <_dtoa_r+0x4d6>
  407dcc:	1e6b      	subs	r3, r5, #1
  407dce:	9302      	str	r3, [sp, #8]
  407dd0:	2300      	movs	r3, #0
  407dd2:	930e      	str	r3, [sp, #56]	; 0x38
  407dd4:	1bbf      	subs	r7, r7, r6
  407dd6:	1e7b      	subs	r3, r7, #1
  407dd8:	9306      	str	r3, [sp, #24]
  407dda:	f100 8154 	bmi.w	408086 <_dtoa_r+0x406>
  407dde:	2300      	movs	r3, #0
  407de0:	9308      	str	r3, [sp, #32]
  407de2:	9b02      	ldr	r3, [sp, #8]
  407de4:	2b00      	cmp	r3, #0
  407de6:	f2c0 8145 	blt.w	408074 <_dtoa_r+0x3f4>
  407dea:	9a06      	ldr	r2, [sp, #24]
  407dec:	930d      	str	r3, [sp, #52]	; 0x34
  407dee:	4611      	mov	r1, r2
  407df0:	4419      	add	r1, r3
  407df2:	2300      	movs	r3, #0
  407df4:	9106      	str	r1, [sp, #24]
  407df6:	930c      	str	r3, [sp, #48]	; 0x30
  407df8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407dfa:	2b09      	cmp	r3, #9
  407dfc:	d82a      	bhi.n	407e54 <_dtoa_r+0x1d4>
  407dfe:	2b05      	cmp	r3, #5
  407e00:	f340 865b 	ble.w	408aba <_dtoa_r+0xe3a>
  407e04:	3b04      	subs	r3, #4
  407e06:	9324      	str	r3, [sp, #144]	; 0x90
  407e08:	2500      	movs	r5, #0
  407e0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407e0c:	3b02      	subs	r3, #2
  407e0e:	2b03      	cmp	r3, #3
  407e10:	f200 8642 	bhi.w	408a98 <_dtoa_r+0xe18>
  407e14:	e8df f013 	tbh	[pc, r3, lsl #1]
  407e18:	02c903d4 	.word	0x02c903d4
  407e1c:	046103df 	.word	0x046103df
  407e20:	9f18      	ldr	r7, [sp, #96]	; 0x60
  407e22:	9e19      	ldr	r6, [sp, #100]	; 0x64
  407e24:	443e      	add	r6, r7
  407e26:	f206 4332 	addw	r3, r6, #1074	; 0x432
  407e2a:	2b20      	cmp	r3, #32
  407e2c:	f340 818e 	ble.w	40814c <_dtoa_r+0x4cc>
  407e30:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  407e34:	f206 4012 	addw	r0, r6, #1042	; 0x412
  407e38:	409d      	lsls	r5, r3
  407e3a:	fa2a f000 	lsr.w	r0, sl, r0
  407e3e:	4328      	orrs	r0, r5
  407e40:	f7fd fc58 	bl	4056f4 <__aeabi_ui2d>
  407e44:	2301      	movs	r3, #1
  407e46:	3e01      	subs	r6, #1
  407e48:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407e4c:	9314      	str	r3, [sp, #80]	; 0x50
  407e4e:	e781      	b.n	407d54 <_dtoa_r+0xd4>
  407e50:	483b      	ldr	r0, [pc, #236]	; (407f40 <_dtoa_r+0x2c0>)
  407e52:	e743      	b.n	407cdc <_dtoa_r+0x5c>
  407e54:	2100      	movs	r1, #0
  407e56:	6461      	str	r1, [r4, #68]	; 0x44
  407e58:	4620      	mov	r0, r4
  407e5a:	9125      	str	r1, [sp, #148]	; 0x94
  407e5c:	f001 fb28 	bl	4094b0 <_Balloc>
  407e60:	f04f 33ff 	mov.w	r3, #4294967295
  407e64:	930a      	str	r3, [sp, #40]	; 0x28
  407e66:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407e68:	930f      	str	r3, [sp, #60]	; 0x3c
  407e6a:	2301      	movs	r3, #1
  407e6c:	9004      	str	r0, [sp, #16]
  407e6e:	6420      	str	r0, [r4, #64]	; 0x40
  407e70:	9224      	str	r2, [sp, #144]	; 0x90
  407e72:	930b      	str	r3, [sp, #44]	; 0x2c
  407e74:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407e76:	2b00      	cmp	r3, #0
  407e78:	f2c0 80d9 	blt.w	40802e <_dtoa_r+0x3ae>
  407e7c:	9a02      	ldr	r2, [sp, #8]
  407e7e:	2a0e      	cmp	r2, #14
  407e80:	f300 80d5 	bgt.w	40802e <_dtoa_r+0x3ae>
  407e84:	4b2d      	ldr	r3, [pc, #180]	; (407f3c <_dtoa_r+0x2bc>)
  407e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407e8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407e92:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407e94:	2b00      	cmp	r3, #0
  407e96:	f2c0 83ba 	blt.w	40860e <_dtoa_r+0x98e>
  407e9a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  407e9e:	4650      	mov	r0, sl
  407ea0:	462a      	mov	r2, r5
  407ea2:	4633      	mov	r3, r6
  407ea4:	4659      	mov	r1, fp
  407ea6:	f7fd fdc5 	bl	405a34 <__aeabi_ddiv>
  407eaa:	f002 f8d1 	bl	40a050 <__aeabi_d2iz>
  407eae:	4680      	mov	r8, r0
  407eb0:	f7fd fc30 	bl	405714 <__aeabi_i2d>
  407eb4:	462a      	mov	r2, r5
  407eb6:	4633      	mov	r3, r6
  407eb8:	f7fd fc92 	bl	4057e0 <__aeabi_dmul>
  407ebc:	460b      	mov	r3, r1
  407ebe:	4602      	mov	r2, r0
  407ec0:	4659      	mov	r1, fp
  407ec2:	4650      	mov	r0, sl
  407ec4:	f7fd fad8 	bl	405478 <__aeabi_dsub>
  407ec8:	9d04      	ldr	r5, [sp, #16]
  407eca:	f108 0330 	add.w	r3, r8, #48	; 0x30
  407ece:	702b      	strb	r3, [r5, #0]
  407ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407ed2:	2b01      	cmp	r3, #1
  407ed4:	4606      	mov	r6, r0
  407ed6:	460f      	mov	r7, r1
  407ed8:	f105 0501 	add.w	r5, r5, #1
  407edc:	d068      	beq.n	407fb0 <_dtoa_r+0x330>
  407ede:	2200      	movs	r2, #0
  407ee0:	4b18      	ldr	r3, [pc, #96]	; (407f44 <_dtoa_r+0x2c4>)
  407ee2:	f7fd fc7d 	bl	4057e0 <__aeabi_dmul>
  407ee6:	2200      	movs	r2, #0
  407ee8:	2300      	movs	r3, #0
  407eea:	4606      	mov	r6, r0
  407eec:	460f      	mov	r7, r1
  407eee:	f7fd fedf 	bl	405cb0 <__aeabi_dcmpeq>
  407ef2:	2800      	cmp	r0, #0
  407ef4:	f040 8088 	bne.w	408008 <_dtoa_r+0x388>
  407ef8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  407efc:	f04f 0a00 	mov.w	sl, #0
  407f00:	f8df b040 	ldr.w	fp, [pc, #64]	; 407f44 <_dtoa_r+0x2c4>
  407f04:	940c      	str	r4, [sp, #48]	; 0x30
  407f06:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407f0a:	e028      	b.n	407f5e <_dtoa_r+0x2de>
  407f0c:	f3af 8000 	nop.w
  407f10:	636f4361 	.word	0x636f4361
  407f14:	3fd287a7 	.word	0x3fd287a7
  407f18:	8b60c8b3 	.word	0x8b60c8b3
  407f1c:	3fc68a28 	.word	0x3fc68a28
  407f20:	509f79fb 	.word	0x509f79fb
  407f24:	3fd34413 	.word	0x3fd34413
  407f28:	7ff00000 	.word	0x7ff00000
  407f2c:	0040a88d 	.word	0x0040a88d
  407f30:	0040a8b0 	.word	0x0040a8b0
  407f34:	0040a8bc 	.word	0x0040a8bc
  407f38:	3ff80000 	.word	0x3ff80000
  407f3c:	0040a8f8 	.word	0x0040a8f8
  407f40:	0040a88c 	.word	0x0040a88c
  407f44:	40240000 	.word	0x40240000
  407f48:	f7fd fc4a 	bl	4057e0 <__aeabi_dmul>
  407f4c:	2200      	movs	r2, #0
  407f4e:	2300      	movs	r3, #0
  407f50:	4606      	mov	r6, r0
  407f52:	460f      	mov	r7, r1
  407f54:	f7fd feac 	bl	405cb0 <__aeabi_dcmpeq>
  407f58:	2800      	cmp	r0, #0
  407f5a:	f040 83c1 	bne.w	4086e0 <_dtoa_r+0xa60>
  407f5e:	4642      	mov	r2, r8
  407f60:	464b      	mov	r3, r9
  407f62:	4630      	mov	r0, r6
  407f64:	4639      	mov	r1, r7
  407f66:	f7fd fd65 	bl	405a34 <__aeabi_ddiv>
  407f6a:	f002 f871 	bl	40a050 <__aeabi_d2iz>
  407f6e:	4604      	mov	r4, r0
  407f70:	f7fd fbd0 	bl	405714 <__aeabi_i2d>
  407f74:	4642      	mov	r2, r8
  407f76:	464b      	mov	r3, r9
  407f78:	f7fd fc32 	bl	4057e0 <__aeabi_dmul>
  407f7c:	4602      	mov	r2, r0
  407f7e:	460b      	mov	r3, r1
  407f80:	4630      	mov	r0, r6
  407f82:	4639      	mov	r1, r7
  407f84:	f7fd fa78 	bl	405478 <__aeabi_dsub>
  407f88:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  407f8c:	9e04      	ldr	r6, [sp, #16]
  407f8e:	f805 eb01 	strb.w	lr, [r5], #1
  407f92:	eba5 0e06 	sub.w	lr, r5, r6
  407f96:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407f98:	45b6      	cmp	lr, r6
  407f9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407f9e:	4652      	mov	r2, sl
  407fa0:	465b      	mov	r3, fp
  407fa2:	d1d1      	bne.n	407f48 <_dtoa_r+0x2c8>
  407fa4:	46a0      	mov	r8, r4
  407fa6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407faa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407fac:	4606      	mov	r6, r0
  407fae:	460f      	mov	r7, r1
  407fb0:	4632      	mov	r2, r6
  407fb2:	463b      	mov	r3, r7
  407fb4:	4630      	mov	r0, r6
  407fb6:	4639      	mov	r1, r7
  407fb8:	f7fd fa60 	bl	40547c <__adddf3>
  407fbc:	4606      	mov	r6, r0
  407fbe:	460f      	mov	r7, r1
  407fc0:	4602      	mov	r2, r0
  407fc2:	460b      	mov	r3, r1
  407fc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407fc8:	f7fd fe7c 	bl	405cc4 <__aeabi_dcmplt>
  407fcc:	b948      	cbnz	r0, 407fe2 <_dtoa_r+0x362>
  407fce:	4632      	mov	r2, r6
  407fd0:	463b      	mov	r3, r7
  407fd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407fd6:	f7fd fe6b 	bl	405cb0 <__aeabi_dcmpeq>
  407fda:	b1a8      	cbz	r0, 408008 <_dtoa_r+0x388>
  407fdc:	f018 0f01 	tst.w	r8, #1
  407fe0:	d012      	beq.n	408008 <_dtoa_r+0x388>
  407fe2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407fe6:	9a04      	ldr	r2, [sp, #16]
  407fe8:	1e6b      	subs	r3, r5, #1
  407fea:	e004      	b.n	407ff6 <_dtoa_r+0x376>
  407fec:	429a      	cmp	r2, r3
  407fee:	f000 8401 	beq.w	4087f4 <_dtoa_r+0xb74>
  407ff2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407ff6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  407ffa:	f103 0501 	add.w	r5, r3, #1
  407ffe:	d0f5      	beq.n	407fec <_dtoa_r+0x36c>
  408000:	f108 0801 	add.w	r8, r8, #1
  408004:	f883 8000 	strb.w	r8, [r3]
  408008:	4649      	mov	r1, r9
  40800a:	4620      	mov	r0, r4
  40800c:	f001 fa76 	bl	4094fc <_Bfree>
  408010:	2200      	movs	r2, #0
  408012:	9b02      	ldr	r3, [sp, #8]
  408014:	702a      	strb	r2, [r5, #0]
  408016:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408018:	3301      	adds	r3, #1
  40801a:	6013      	str	r3, [r2, #0]
  40801c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40801e:	2b00      	cmp	r3, #0
  408020:	f000 839e 	beq.w	408760 <_dtoa_r+0xae0>
  408024:	9804      	ldr	r0, [sp, #16]
  408026:	601d      	str	r5, [r3, #0]
  408028:	b01b      	add	sp, #108	; 0x6c
  40802a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40802e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408030:	2a00      	cmp	r2, #0
  408032:	d03e      	beq.n	4080b2 <_dtoa_r+0x432>
  408034:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408036:	2a01      	cmp	r2, #1
  408038:	f340 8311 	ble.w	40865e <_dtoa_r+0x9de>
  40803c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40803e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408040:	1e5f      	subs	r7, r3, #1
  408042:	42ba      	cmp	r2, r7
  408044:	f2c0 838f 	blt.w	408766 <_dtoa_r+0xae6>
  408048:	1bd7      	subs	r7, r2, r7
  40804a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40804c:	2b00      	cmp	r3, #0
  40804e:	f2c0 848b 	blt.w	408968 <_dtoa_r+0xce8>
  408052:	9d08      	ldr	r5, [sp, #32]
  408054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408056:	9a08      	ldr	r2, [sp, #32]
  408058:	441a      	add	r2, r3
  40805a:	9208      	str	r2, [sp, #32]
  40805c:	9a06      	ldr	r2, [sp, #24]
  40805e:	2101      	movs	r1, #1
  408060:	441a      	add	r2, r3
  408062:	4620      	mov	r0, r4
  408064:	9206      	str	r2, [sp, #24]
  408066:	f001 fae3 	bl	409630 <__i2b>
  40806a:	4606      	mov	r6, r0
  40806c:	e024      	b.n	4080b8 <_dtoa_r+0x438>
  40806e:	2301      	movs	r3, #1
  408070:	930e      	str	r3, [sp, #56]	; 0x38
  408072:	e6af      	b.n	407dd4 <_dtoa_r+0x154>
  408074:	9a08      	ldr	r2, [sp, #32]
  408076:	9b02      	ldr	r3, [sp, #8]
  408078:	1ad2      	subs	r2, r2, r3
  40807a:	425b      	negs	r3, r3
  40807c:	930c      	str	r3, [sp, #48]	; 0x30
  40807e:	2300      	movs	r3, #0
  408080:	9208      	str	r2, [sp, #32]
  408082:	930d      	str	r3, [sp, #52]	; 0x34
  408084:	e6b8      	b.n	407df8 <_dtoa_r+0x178>
  408086:	f1c7 0301 	rsb	r3, r7, #1
  40808a:	9308      	str	r3, [sp, #32]
  40808c:	2300      	movs	r3, #0
  40808e:	9306      	str	r3, [sp, #24]
  408090:	e6a7      	b.n	407de2 <_dtoa_r+0x162>
  408092:	9d02      	ldr	r5, [sp, #8]
  408094:	4628      	mov	r0, r5
  408096:	f7fd fb3d 	bl	405714 <__aeabi_i2d>
  40809a:	4602      	mov	r2, r0
  40809c:	460b      	mov	r3, r1
  40809e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4080a2:	f7fd fe05 	bl	405cb0 <__aeabi_dcmpeq>
  4080a6:	2800      	cmp	r0, #0
  4080a8:	f47f ae80 	bne.w	407dac <_dtoa_r+0x12c>
  4080ac:	1e6b      	subs	r3, r5, #1
  4080ae:	9302      	str	r3, [sp, #8]
  4080b0:	e67c      	b.n	407dac <_dtoa_r+0x12c>
  4080b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4080b4:	9d08      	ldr	r5, [sp, #32]
  4080b6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  4080b8:	2d00      	cmp	r5, #0
  4080ba:	dd0c      	ble.n	4080d6 <_dtoa_r+0x456>
  4080bc:	9906      	ldr	r1, [sp, #24]
  4080be:	2900      	cmp	r1, #0
  4080c0:	460b      	mov	r3, r1
  4080c2:	dd08      	ble.n	4080d6 <_dtoa_r+0x456>
  4080c4:	42a9      	cmp	r1, r5
  4080c6:	9a08      	ldr	r2, [sp, #32]
  4080c8:	bfa8      	it	ge
  4080ca:	462b      	movge	r3, r5
  4080cc:	1ad2      	subs	r2, r2, r3
  4080ce:	1aed      	subs	r5, r5, r3
  4080d0:	1acb      	subs	r3, r1, r3
  4080d2:	9208      	str	r2, [sp, #32]
  4080d4:	9306      	str	r3, [sp, #24]
  4080d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4080d8:	b1d3      	cbz	r3, 408110 <_dtoa_r+0x490>
  4080da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4080dc:	2b00      	cmp	r3, #0
  4080de:	f000 82b7 	beq.w	408650 <_dtoa_r+0x9d0>
  4080e2:	2f00      	cmp	r7, #0
  4080e4:	dd10      	ble.n	408108 <_dtoa_r+0x488>
  4080e6:	4631      	mov	r1, r6
  4080e8:	463a      	mov	r2, r7
  4080ea:	4620      	mov	r0, r4
  4080ec:	f001 fb3c 	bl	409768 <__pow5mult>
  4080f0:	464a      	mov	r2, r9
  4080f2:	4601      	mov	r1, r0
  4080f4:	4606      	mov	r6, r0
  4080f6:	4620      	mov	r0, r4
  4080f8:	f001 faa4 	bl	409644 <__multiply>
  4080fc:	4649      	mov	r1, r9
  4080fe:	4680      	mov	r8, r0
  408100:	4620      	mov	r0, r4
  408102:	f001 f9fb 	bl	4094fc <_Bfree>
  408106:	46c1      	mov	r9, r8
  408108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40810a:	1bda      	subs	r2, r3, r7
  40810c:	f040 82a1 	bne.w	408652 <_dtoa_r+0x9d2>
  408110:	2101      	movs	r1, #1
  408112:	4620      	mov	r0, r4
  408114:	f001 fa8c 	bl	409630 <__i2b>
  408118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40811a:	2b00      	cmp	r3, #0
  40811c:	4680      	mov	r8, r0
  40811e:	dd1c      	ble.n	40815a <_dtoa_r+0x4da>
  408120:	4601      	mov	r1, r0
  408122:	461a      	mov	r2, r3
  408124:	4620      	mov	r0, r4
  408126:	f001 fb1f 	bl	409768 <__pow5mult>
  40812a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40812c:	2b01      	cmp	r3, #1
  40812e:	4680      	mov	r8, r0
  408130:	f340 8254 	ble.w	4085dc <_dtoa_r+0x95c>
  408134:	2300      	movs	r3, #0
  408136:	930c      	str	r3, [sp, #48]	; 0x30
  408138:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40813c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408140:	6918      	ldr	r0, [r3, #16]
  408142:	f001 fa25 	bl	409590 <__hi0bits>
  408146:	f1c0 0020 	rsb	r0, r0, #32
  40814a:	e010      	b.n	40816e <_dtoa_r+0x4ee>
  40814c:	f1c3 0520 	rsb	r5, r3, #32
  408150:	fa0a f005 	lsl.w	r0, sl, r5
  408154:	e674      	b.n	407e40 <_dtoa_r+0x1c0>
  408156:	900e      	str	r0, [sp, #56]	; 0x38
  408158:	e63c      	b.n	407dd4 <_dtoa_r+0x154>
  40815a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40815c:	2b01      	cmp	r3, #1
  40815e:	f340 8287 	ble.w	408670 <_dtoa_r+0x9f0>
  408162:	2300      	movs	r3, #0
  408164:	930c      	str	r3, [sp, #48]	; 0x30
  408166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408168:	2001      	movs	r0, #1
  40816a:	2b00      	cmp	r3, #0
  40816c:	d1e4      	bne.n	408138 <_dtoa_r+0x4b8>
  40816e:	9a06      	ldr	r2, [sp, #24]
  408170:	4410      	add	r0, r2
  408172:	f010 001f 	ands.w	r0, r0, #31
  408176:	f000 80a1 	beq.w	4082bc <_dtoa_r+0x63c>
  40817a:	f1c0 0320 	rsb	r3, r0, #32
  40817e:	2b04      	cmp	r3, #4
  408180:	f340 849e 	ble.w	408ac0 <_dtoa_r+0xe40>
  408184:	9b08      	ldr	r3, [sp, #32]
  408186:	f1c0 001c 	rsb	r0, r0, #28
  40818a:	4403      	add	r3, r0
  40818c:	9308      	str	r3, [sp, #32]
  40818e:	4613      	mov	r3, r2
  408190:	4403      	add	r3, r0
  408192:	4405      	add	r5, r0
  408194:	9306      	str	r3, [sp, #24]
  408196:	9b08      	ldr	r3, [sp, #32]
  408198:	2b00      	cmp	r3, #0
  40819a:	dd05      	ble.n	4081a8 <_dtoa_r+0x528>
  40819c:	4649      	mov	r1, r9
  40819e:	461a      	mov	r2, r3
  4081a0:	4620      	mov	r0, r4
  4081a2:	f001 fb31 	bl	409808 <__lshift>
  4081a6:	4681      	mov	r9, r0
  4081a8:	9b06      	ldr	r3, [sp, #24]
  4081aa:	2b00      	cmp	r3, #0
  4081ac:	dd05      	ble.n	4081ba <_dtoa_r+0x53a>
  4081ae:	4641      	mov	r1, r8
  4081b0:	461a      	mov	r2, r3
  4081b2:	4620      	mov	r0, r4
  4081b4:	f001 fb28 	bl	409808 <__lshift>
  4081b8:	4680      	mov	r8, r0
  4081ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4081bc:	2b00      	cmp	r3, #0
  4081be:	f040 8086 	bne.w	4082ce <_dtoa_r+0x64e>
  4081c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4081c4:	2b00      	cmp	r3, #0
  4081c6:	f340 8266 	ble.w	408696 <_dtoa_r+0xa16>
  4081ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4081cc:	2b00      	cmp	r3, #0
  4081ce:	f000 8098 	beq.w	408302 <_dtoa_r+0x682>
  4081d2:	2d00      	cmp	r5, #0
  4081d4:	dd05      	ble.n	4081e2 <_dtoa_r+0x562>
  4081d6:	4631      	mov	r1, r6
  4081d8:	462a      	mov	r2, r5
  4081da:	4620      	mov	r0, r4
  4081dc:	f001 fb14 	bl	409808 <__lshift>
  4081e0:	4606      	mov	r6, r0
  4081e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4081e4:	2b00      	cmp	r3, #0
  4081e6:	f040 8337 	bne.w	408858 <_dtoa_r+0xbd8>
  4081ea:	9606      	str	r6, [sp, #24]
  4081ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4081ee:	9a04      	ldr	r2, [sp, #16]
  4081f0:	f8dd b018 	ldr.w	fp, [sp, #24]
  4081f4:	3b01      	subs	r3, #1
  4081f6:	18d3      	adds	r3, r2, r3
  4081f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4081fa:	f00a 0301 	and.w	r3, sl, #1
  4081fe:	930c      	str	r3, [sp, #48]	; 0x30
  408200:	4617      	mov	r7, r2
  408202:	46c2      	mov	sl, r8
  408204:	4651      	mov	r1, sl
  408206:	4648      	mov	r0, r9
  408208:	f7ff fca6 	bl	407b58 <quorem>
  40820c:	4631      	mov	r1, r6
  40820e:	4605      	mov	r5, r0
  408210:	4648      	mov	r0, r9
  408212:	f001 fb4b 	bl	4098ac <__mcmp>
  408216:	465a      	mov	r2, fp
  408218:	900a      	str	r0, [sp, #40]	; 0x28
  40821a:	4651      	mov	r1, sl
  40821c:	4620      	mov	r0, r4
  40821e:	f001 fb61 	bl	4098e4 <__mdiff>
  408222:	68c2      	ldr	r2, [r0, #12]
  408224:	4680      	mov	r8, r0
  408226:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40822a:	2a00      	cmp	r2, #0
  40822c:	f040 822b 	bne.w	408686 <_dtoa_r+0xa06>
  408230:	4601      	mov	r1, r0
  408232:	4648      	mov	r0, r9
  408234:	9308      	str	r3, [sp, #32]
  408236:	f001 fb39 	bl	4098ac <__mcmp>
  40823a:	4641      	mov	r1, r8
  40823c:	9006      	str	r0, [sp, #24]
  40823e:	4620      	mov	r0, r4
  408240:	f001 f95c 	bl	4094fc <_Bfree>
  408244:	9a06      	ldr	r2, [sp, #24]
  408246:	9b08      	ldr	r3, [sp, #32]
  408248:	b932      	cbnz	r2, 408258 <_dtoa_r+0x5d8>
  40824a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40824c:	b921      	cbnz	r1, 408258 <_dtoa_r+0x5d8>
  40824e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408250:	2a00      	cmp	r2, #0
  408252:	f000 83ef 	beq.w	408a34 <_dtoa_r+0xdb4>
  408256:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408258:	990a      	ldr	r1, [sp, #40]	; 0x28
  40825a:	2900      	cmp	r1, #0
  40825c:	f2c0 829f 	blt.w	40879e <_dtoa_r+0xb1e>
  408260:	d105      	bne.n	40826e <_dtoa_r+0x5ee>
  408262:	9924      	ldr	r1, [sp, #144]	; 0x90
  408264:	b919      	cbnz	r1, 40826e <_dtoa_r+0x5ee>
  408266:	990c      	ldr	r1, [sp, #48]	; 0x30
  408268:	2900      	cmp	r1, #0
  40826a:	f000 8298 	beq.w	40879e <_dtoa_r+0xb1e>
  40826e:	2a00      	cmp	r2, #0
  408270:	f300 8306 	bgt.w	408880 <_dtoa_r+0xc00>
  408274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408276:	703b      	strb	r3, [r7, #0]
  408278:	f107 0801 	add.w	r8, r7, #1
  40827c:	4297      	cmp	r7, r2
  40827e:	4645      	mov	r5, r8
  408280:	f000 830c 	beq.w	40889c <_dtoa_r+0xc1c>
  408284:	4649      	mov	r1, r9
  408286:	2300      	movs	r3, #0
  408288:	220a      	movs	r2, #10
  40828a:	4620      	mov	r0, r4
  40828c:	f001 f940 	bl	409510 <__multadd>
  408290:	455e      	cmp	r6, fp
  408292:	4681      	mov	r9, r0
  408294:	4631      	mov	r1, r6
  408296:	f04f 0300 	mov.w	r3, #0
  40829a:	f04f 020a 	mov.w	r2, #10
  40829e:	4620      	mov	r0, r4
  4082a0:	f000 81eb 	beq.w	40867a <_dtoa_r+0x9fa>
  4082a4:	f001 f934 	bl	409510 <__multadd>
  4082a8:	4659      	mov	r1, fp
  4082aa:	4606      	mov	r6, r0
  4082ac:	2300      	movs	r3, #0
  4082ae:	220a      	movs	r2, #10
  4082b0:	4620      	mov	r0, r4
  4082b2:	f001 f92d 	bl	409510 <__multadd>
  4082b6:	4647      	mov	r7, r8
  4082b8:	4683      	mov	fp, r0
  4082ba:	e7a3      	b.n	408204 <_dtoa_r+0x584>
  4082bc:	201c      	movs	r0, #28
  4082be:	9b08      	ldr	r3, [sp, #32]
  4082c0:	4403      	add	r3, r0
  4082c2:	9308      	str	r3, [sp, #32]
  4082c4:	9b06      	ldr	r3, [sp, #24]
  4082c6:	4403      	add	r3, r0
  4082c8:	4405      	add	r5, r0
  4082ca:	9306      	str	r3, [sp, #24]
  4082cc:	e763      	b.n	408196 <_dtoa_r+0x516>
  4082ce:	4641      	mov	r1, r8
  4082d0:	4648      	mov	r0, r9
  4082d2:	f001 faeb 	bl	4098ac <__mcmp>
  4082d6:	2800      	cmp	r0, #0
  4082d8:	f6bf af73 	bge.w	4081c2 <_dtoa_r+0x542>
  4082dc:	9f02      	ldr	r7, [sp, #8]
  4082de:	4649      	mov	r1, r9
  4082e0:	2300      	movs	r3, #0
  4082e2:	220a      	movs	r2, #10
  4082e4:	4620      	mov	r0, r4
  4082e6:	3f01      	subs	r7, #1
  4082e8:	9702      	str	r7, [sp, #8]
  4082ea:	f001 f911 	bl	409510 <__multadd>
  4082ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4082f0:	4681      	mov	r9, r0
  4082f2:	2b00      	cmp	r3, #0
  4082f4:	f040 83b6 	bne.w	408a64 <_dtoa_r+0xde4>
  4082f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4082fa:	2b00      	cmp	r3, #0
  4082fc:	f340 83bf 	ble.w	408a7e <_dtoa_r+0xdfe>
  408300:	930a      	str	r3, [sp, #40]	; 0x28
  408302:	f8dd b010 	ldr.w	fp, [sp, #16]
  408306:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408308:	465d      	mov	r5, fp
  40830a:	e002      	b.n	408312 <_dtoa_r+0x692>
  40830c:	f001 f900 	bl	409510 <__multadd>
  408310:	4681      	mov	r9, r0
  408312:	4641      	mov	r1, r8
  408314:	4648      	mov	r0, r9
  408316:	f7ff fc1f 	bl	407b58 <quorem>
  40831a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40831e:	f805 ab01 	strb.w	sl, [r5], #1
  408322:	eba5 030b 	sub.w	r3, r5, fp
  408326:	42bb      	cmp	r3, r7
  408328:	f04f 020a 	mov.w	r2, #10
  40832c:	f04f 0300 	mov.w	r3, #0
  408330:	4649      	mov	r1, r9
  408332:	4620      	mov	r0, r4
  408334:	dbea      	blt.n	40830c <_dtoa_r+0x68c>
  408336:	9b04      	ldr	r3, [sp, #16]
  408338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40833a:	2a01      	cmp	r2, #1
  40833c:	bfac      	ite	ge
  40833e:	189b      	addge	r3, r3, r2
  408340:	3301      	addlt	r3, #1
  408342:	461d      	mov	r5, r3
  408344:	f04f 0b00 	mov.w	fp, #0
  408348:	4649      	mov	r1, r9
  40834a:	2201      	movs	r2, #1
  40834c:	4620      	mov	r0, r4
  40834e:	f001 fa5b 	bl	409808 <__lshift>
  408352:	4641      	mov	r1, r8
  408354:	4681      	mov	r9, r0
  408356:	f001 faa9 	bl	4098ac <__mcmp>
  40835a:	2800      	cmp	r0, #0
  40835c:	f340 823d 	ble.w	4087da <_dtoa_r+0xb5a>
  408360:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408364:	9904      	ldr	r1, [sp, #16]
  408366:	1e6b      	subs	r3, r5, #1
  408368:	e004      	b.n	408374 <_dtoa_r+0x6f4>
  40836a:	428b      	cmp	r3, r1
  40836c:	f000 81ae 	beq.w	4086cc <_dtoa_r+0xa4c>
  408370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  408374:	2a39      	cmp	r2, #57	; 0x39
  408376:	f103 0501 	add.w	r5, r3, #1
  40837a:	d0f6      	beq.n	40836a <_dtoa_r+0x6ea>
  40837c:	3201      	adds	r2, #1
  40837e:	701a      	strb	r2, [r3, #0]
  408380:	4641      	mov	r1, r8
  408382:	4620      	mov	r0, r4
  408384:	f001 f8ba 	bl	4094fc <_Bfree>
  408388:	2e00      	cmp	r6, #0
  40838a:	f43f ae3d 	beq.w	408008 <_dtoa_r+0x388>
  40838e:	f1bb 0f00 	cmp.w	fp, #0
  408392:	d005      	beq.n	4083a0 <_dtoa_r+0x720>
  408394:	45b3      	cmp	fp, r6
  408396:	d003      	beq.n	4083a0 <_dtoa_r+0x720>
  408398:	4659      	mov	r1, fp
  40839a:	4620      	mov	r0, r4
  40839c:	f001 f8ae 	bl	4094fc <_Bfree>
  4083a0:	4631      	mov	r1, r6
  4083a2:	4620      	mov	r0, r4
  4083a4:	f001 f8aa 	bl	4094fc <_Bfree>
  4083a8:	e62e      	b.n	408008 <_dtoa_r+0x388>
  4083aa:	2300      	movs	r3, #0
  4083ac:	930b      	str	r3, [sp, #44]	; 0x2c
  4083ae:	9b02      	ldr	r3, [sp, #8]
  4083b0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4083b2:	4413      	add	r3, r2
  4083b4:	930f      	str	r3, [sp, #60]	; 0x3c
  4083b6:	3301      	adds	r3, #1
  4083b8:	2b01      	cmp	r3, #1
  4083ba:	461f      	mov	r7, r3
  4083bc:	461e      	mov	r6, r3
  4083be:	930a      	str	r3, [sp, #40]	; 0x28
  4083c0:	bfb8      	it	lt
  4083c2:	2701      	movlt	r7, #1
  4083c4:	2100      	movs	r1, #0
  4083c6:	2f17      	cmp	r7, #23
  4083c8:	6461      	str	r1, [r4, #68]	; 0x44
  4083ca:	d90a      	bls.n	4083e2 <_dtoa_r+0x762>
  4083cc:	2201      	movs	r2, #1
  4083ce:	2304      	movs	r3, #4
  4083d0:	005b      	lsls	r3, r3, #1
  4083d2:	f103 0014 	add.w	r0, r3, #20
  4083d6:	4287      	cmp	r7, r0
  4083d8:	4611      	mov	r1, r2
  4083da:	f102 0201 	add.w	r2, r2, #1
  4083de:	d2f7      	bcs.n	4083d0 <_dtoa_r+0x750>
  4083e0:	6461      	str	r1, [r4, #68]	; 0x44
  4083e2:	4620      	mov	r0, r4
  4083e4:	f001 f864 	bl	4094b0 <_Balloc>
  4083e8:	2e0e      	cmp	r6, #14
  4083ea:	9004      	str	r0, [sp, #16]
  4083ec:	6420      	str	r0, [r4, #64]	; 0x40
  4083ee:	f63f ad41 	bhi.w	407e74 <_dtoa_r+0x1f4>
  4083f2:	2d00      	cmp	r5, #0
  4083f4:	f43f ad3e 	beq.w	407e74 <_dtoa_r+0x1f4>
  4083f8:	9902      	ldr	r1, [sp, #8]
  4083fa:	2900      	cmp	r1, #0
  4083fc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  408400:	f340 8202 	ble.w	408808 <_dtoa_r+0xb88>
  408404:	4bb8      	ldr	r3, [pc, #736]	; (4086e8 <_dtoa_r+0xa68>)
  408406:	f001 020f 	and.w	r2, r1, #15
  40840a:	110d      	asrs	r5, r1, #4
  40840c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408410:	06e9      	lsls	r1, r5, #27
  408412:	e9d3 6700 	ldrd	r6, r7, [r3]
  408416:	f140 81ae 	bpl.w	408776 <_dtoa_r+0xaf6>
  40841a:	4bb4      	ldr	r3, [pc, #720]	; (4086ec <_dtoa_r+0xa6c>)
  40841c:	4650      	mov	r0, sl
  40841e:	4659      	mov	r1, fp
  408420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408424:	f7fd fb06 	bl	405a34 <__aeabi_ddiv>
  408428:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40842c:	f005 050f 	and.w	r5, r5, #15
  408430:	f04f 0a03 	mov.w	sl, #3
  408434:	b18d      	cbz	r5, 40845a <_dtoa_r+0x7da>
  408436:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4086ec <_dtoa_r+0xa6c>
  40843a:	07ea      	lsls	r2, r5, #31
  40843c:	d509      	bpl.n	408452 <_dtoa_r+0x7d2>
  40843e:	4630      	mov	r0, r6
  408440:	4639      	mov	r1, r7
  408442:	e9d8 2300 	ldrd	r2, r3, [r8]
  408446:	f7fd f9cb 	bl	4057e0 <__aeabi_dmul>
  40844a:	f10a 0a01 	add.w	sl, sl, #1
  40844e:	4606      	mov	r6, r0
  408450:	460f      	mov	r7, r1
  408452:	106d      	asrs	r5, r5, #1
  408454:	f108 0808 	add.w	r8, r8, #8
  408458:	d1ef      	bne.n	40843a <_dtoa_r+0x7ba>
  40845a:	463b      	mov	r3, r7
  40845c:	4632      	mov	r2, r6
  40845e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  408462:	f7fd fae7 	bl	405a34 <__aeabi_ddiv>
  408466:	4607      	mov	r7, r0
  408468:	4688      	mov	r8, r1
  40846a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40846c:	b143      	cbz	r3, 408480 <_dtoa_r+0x800>
  40846e:	2200      	movs	r2, #0
  408470:	4b9f      	ldr	r3, [pc, #636]	; (4086f0 <_dtoa_r+0xa70>)
  408472:	4638      	mov	r0, r7
  408474:	4641      	mov	r1, r8
  408476:	f7fd fc25 	bl	405cc4 <__aeabi_dcmplt>
  40847a:	2800      	cmp	r0, #0
  40847c:	f040 8286 	bne.w	40898c <_dtoa_r+0xd0c>
  408480:	4650      	mov	r0, sl
  408482:	f7fd f947 	bl	405714 <__aeabi_i2d>
  408486:	463a      	mov	r2, r7
  408488:	4643      	mov	r3, r8
  40848a:	f7fd f9a9 	bl	4057e0 <__aeabi_dmul>
  40848e:	4b99      	ldr	r3, [pc, #612]	; (4086f4 <_dtoa_r+0xa74>)
  408490:	2200      	movs	r2, #0
  408492:	f7fc fff3 	bl	40547c <__adddf3>
  408496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408498:	4605      	mov	r5, r0
  40849a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40849e:	2b00      	cmp	r3, #0
  4084a0:	f000 813e 	beq.w	408720 <_dtoa_r+0xaa0>
  4084a4:	9b02      	ldr	r3, [sp, #8]
  4084a6:	9315      	str	r3, [sp, #84]	; 0x54
  4084a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4084aa:	9312      	str	r3, [sp, #72]	; 0x48
  4084ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4084ae:	2b00      	cmp	r3, #0
  4084b0:	f000 81fa 	beq.w	4088a8 <_dtoa_r+0xc28>
  4084b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4084b6:	4b8c      	ldr	r3, [pc, #560]	; (4086e8 <_dtoa_r+0xa68>)
  4084b8:	498f      	ldr	r1, [pc, #572]	; (4086f8 <_dtoa_r+0xa78>)
  4084ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4084be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4084c2:	2000      	movs	r0, #0
  4084c4:	f7fd fab6 	bl	405a34 <__aeabi_ddiv>
  4084c8:	462a      	mov	r2, r5
  4084ca:	4633      	mov	r3, r6
  4084cc:	f7fc ffd4 	bl	405478 <__aeabi_dsub>
  4084d0:	4682      	mov	sl, r0
  4084d2:	468b      	mov	fp, r1
  4084d4:	4638      	mov	r0, r7
  4084d6:	4641      	mov	r1, r8
  4084d8:	f001 fdba 	bl	40a050 <__aeabi_d2iz>
  4084dc:	4605      	mov	r5, r0
  4084de:	f7fd f919 	bl	405714 <__aeabi_i2d>
  4084e2:	4602      	mov	r2, r0
  4084e4:	460b      	mov	r3, r1
  4084e6:	4638      	mov	r0, r7
  4084e8:	4641      	mov	r1, r8
  4084ea:	f7fc ffc5 	bl	405478 <__aeabi_dsub>
  4084ee:	3530      	adds	r5, #48	; 0x30
  4084f0:	fa5f f885 	uxtb.w	r8, r5
  4084f4:	9d04      	ldr	r5, [sp, #16]
  4084f6:	4606      	mov	r6, r0
  4084f8:	460f      	mov	r7, r1
  4084fa:	f885 8000 	strb.w	r8, [r5]
  4084fe:	4602      	mov	r2, r0
  408500:	460b      	mov	r3, r1
  408502:	4650      	mov	r0, sl
  408504:	4659      	mov	r1, fp
  408506:	3501      	adds	r5, #1
  408508:	f7fd fbfa 	bl	405d00 <__aeabi_dcmpgt>
  40850c:	2800      	cmp	r0, #0
  40850e:	d154      	bne.n	4085ba <_dtoa_r+0x93a>
  408510:	4632      	mov	r2, r6
  408512:	463b      	mov	r3, r7
  408514:	2000      	movs	r0, #0
  408516:	4976      	ldr	r1, [pc, #472]	; (4086f0 <_dtoa_r+0xa70>)
  408518:	f7fc ffae 	bl	405478 <__aeabi_dsub>
  40851c:	4602      	mov	r2, r0
  40851e:	460b      	mov	r3, r1
  408520:	4650      	mov	r0, sl
  408522:	4659      	mov	r1, fp
  408524:	f7fd fbec 	bl	405d00 <__aeabi_dcmpgt>
  408528:	2800      	cmp	r0, #0
  40852a:	f040 8270 	bne.w	408a0e <_dtoa_r+0xd8e>
  40852e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  408530:	2a01      	cmp	r2, #1
  408532:	f000 8111 	beq.w	408758 <_dtoa_r+0xad8>
  408536:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408538:	9a04      	ldr	r2, [sp, #16]
  40853a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40853e:	4413      	add	r3, r2
  408540:	4699      	mov	r9, r3
  408542:	e00d      	b.n	408560 <_dtoa_r+0x8e0>
  408544:	2000      	movs	r0, #0
  408546:	496a      	ldr	r1, [pc, #424]	; (4086f0 <_dtoa_r+0xa70>)
  408548:	f7fc ff96 	bl	405478 <__aeabi_dsub>
  40854c:	4652      	mov	r2, sl
  40854e:	465b      	mov	r3, fp
  408550:	f7fd fbb8 	bl	405cc4 <__aeabi_dcmplt>
  408554:	2800      	cmp	r0, #0
  408556:	f040 8258 	bne.w	408a0a <_dtoa_r+0xd8a>
  40855a:	454d      	cmp	r5, r9
  40855c:	f000 80fa 	beq.w	408754 <_dtoa_r+0xad4>
  408560:	4650      	mov	r0, sl
  408562:	4659      	mov	r1, fp
  408564:	2200      	movs	r2, #0
  408566:	4b65      	ldr	r3, [pc, #404]	; (4086fc <_dtoa_r+0xa7c>)
  408568:	f7fd f93a 	bl	4057e0 <__aeabi_dmul>
  40856c:	2200      	movs	r2, #0
  40856e:	4b63      	ldr	r3, [pc, #396]	; (4086fc <_dtoa_r+0xa7c>)
  408570:	4682      	mov	sl, r0
  408572:	468b      	mov	fp, r1
  408574:	4630      	mov	r0, r6
  408576:	4639      	mov	r1, r7
  408578:	f7fd f932 	bl	4057e0 <__aeabi_dmul>
  40857c:	460f      	mov	r7, r1
  40857e:	4606      	mov	r6, r0
  408580:	f001 fd66 	bl	40a050 <__aeabi_d2iz>
  408584:	4680      	mov	r8, r0
  408586:	f7fd f8c5 	bl	405714 <__aeabi_i2d>
  40858a:	4602      	mov	r2, r0
  40858c:	460b      	mov	r3, r1
  40858e:	4630      	mov	r0, r6
  408590:	4639      	mov	r1, r7
  408592:	f7fc ff71 	bl	405478 <__aeabi_dsub>
  408596:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40859a:	fa5f f888 	uxtb.w	r8, r8
  40859e:	4652      	mov	r2, sl
  4085a0:	465b      	mov	r3, fp
  4085a2:	f805 8b01 	strb.w	r8, [r5], #1
  4085a6:	4606      	mov	r6, r0
  4085a8:	460f      	mov	r7, r1
  4085aa:	f7fd fb8b 	bl	405cc4 <__aeabi_dcmplt>
  4085ae:	4632      	mov	r2, r6
  4085b0:	463b      	mov	r3, r7
  4085b2:	2800      	cmp	r0, #0
  4085b4:	d0c6      	beq.n	408544 <_dtoa_r+0x8c4>
  4085b6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4085ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4085bc:	9302      	str	r3, [sp, #8]
  4085be:	e523      	b.n	408008 <_dtoa_r+0x388>
  4085c0:	2300      	movs	r3, #0
  4085c2:	930b      	str	r3, [sp, #44]	; 0x2c
  4085c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4085c6:	2b00      	cmp	r3, #0
  4085c8:	f340 80dc 	ble.w	408784 <_dtoa_r+0xb04>
  4085cc:	461f      	mov	r7, r3
  4085ce:	461e      	mov	r6, r3
  4085d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4085d2:	930a      	str	r3, [sp, #40]	; 0x28
  4085d4:	e6f6      	b.n	4083c4 <_dtoa_r+0x744>
  4085d6:	2301      	movs	r3, #1
  4085d8:	930b      	str	r3, [sp, #44]	; 0x2c
  4085da:	e7f3      	b.n	4085c4 <_dtoa_r+0x944>
  4085dc:	f1ba 0f00 	cmp.w	sl, #0
  4085e0:	f47f ada8 	bne.w	408134 <_dtoa_r+0x4b4>
  4085e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4085e8:	2b00      	cmp	r3, #0
  4085ea:	f47f adba 	bne.w	408162 <_dtoa_r+0x4e2>
  4085ee:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4085f2:	0d3f      	lsrs	r7, r7, #20
  4085f4:	053f      	lsls	r7, r7, #20
  4085f6:	2f00      	cmp	r7, #0
  4085f8:	f000 820d 	beq.w	408a16 <_dtoa_r+0xd96>
  4085fc:	9b08      	ldr	r3, [sp, #32]
  4085fe:	3301      	adds	r3, #1
  408600:	9308      	str	r3, [sp, #32]
  408602:	9b06      	ldr	r3, [sp, #24]
  408604:	3301      	adds	r3, #1
  408606:	9306      	str	r3, [sp, #24]
  408608:	2301      	movs	r3, #1
  40860a:	930c      	str	r3, [sp, #48]	; 0x30
  40860c:	e5ab      	b.n	408166 <_dtoa_r+0x4e6>
  40860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408610:	2b00      	cmp	r3, #0
  408612:	f73f ac42 	bgt.w	407e9a <_dtoa_r+0x21a>
  408616:	f040 8221 	bne.w	408a5c <_dtoa_r+0xddc>
  40861a:	2200      	movs	r2, #0
  40861c:	4b38      	ldr	r3, [pc, #224]	; (408700 <_dtoa_r+0xa80>)
  40861e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408622:	f7fd f8dd 	bl	4057e0 <__aeabi_dmul>
  408626:	4652      	mov	r2, sl
  408628:	465b      	mov	r3, fp
  40862a:	f7fd fb5f 	bl	405cec <__aeabi_dcmpge>
  40862e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  408632:	4646      	mov	r6, r8
  408634:	2800      	cmp	r0, #0
  408636:	d041      	beq.n	4086bc <_dtoa_r+0xa3c>
  408638:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40863a:	9d04      	ldr	r5, [sp, #16]
  40863c:	43db      	mvns	r3, r3
  40863e:	9302      	str	r3, [sp, #8]
  408640:	4641      	mov	r1, r8
  408642:	4620      	mov	r0, r4
  408644:	f000 ff5a 	bl	4094fc <_Bfree>
  408648:	2e00      	cmp	r6, #0
  40864a:	f43f acdd 	beq.w	408008 <_dtoa_r+0x388>
  40864e:	e6a7      	b.n	4083a0 <_dtoa_r+0x720>
  408650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408652:	4649      	mov	r1, r9
  408654:	4620      	mov	r0, r4
  408656:	f001 f887 	bl	409768 <__pow5mult>
  40865a:	4681      	mov	r9, r0
  40865c:	e558      	b.n	408110 <_dtoa_r+0x490>
  40865e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  408660:	2a00      	cmp	r2, #0
  408662:	f000 8187 	beq.w	408974 <_dtoa_r+0xcf4>
  408666:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40866a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40866c:	9d08      	ldr	r5, [sp, #32]
  40866e:	e4f2      	b.n	408056 <_dtoa_r+0x3d6>
  408670:	f1ba 0f00 	cmp.w	sl, #0
  408674:	f47f ad75 	bne.w	408162 <_dtoa_r+0x4e2>
  408678:	e7b4      	b.n	4085e4 <_dtoa_r+0x964>
  40867a:	f000 ff49 	bl	409510 <__multadd>
  40867e:	4647      	mov	r7, r8
  408680:	4606      	mov	r6, r0
  408682:	4683      	mov	fp, r0
  408684:	e5be      	b.n	408204 <_dtoa_r+0x584>
  408686:	4601      	mov	r1, r0
  408688:	4620      	mov	r0, r4
  40868a:	9306      	str	r3, [sp, #24]
  40868c:	f000 ff36 	bl	4094fc <_Bfree>
  408690:	2201      	movs	r2, #1
  408692:	9b06      	ldr	r3, [sp, #24]
  408694:	e5e0      	b.n	408258 <_dtoa_r+0x5d8>
  408696:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408698:	2b02      	cmp	r3, #2
  40869a:	f77f ad96 	ble.w	4081ca <_dtoa_r+0x54a>
  40869e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4086a0:	2b00      	cmp	r3, #0
  4086a2:	d1c9      	bne.n	408638 <_dtoa_r+0x9b8>
  4086a4:	4641      	mov	r1, r8
  4086a6:	2205      	movs	r2, #5
  4086a8:	4620      	mov	r0, r4
  4086aa:	f000 ff31 	bl	409510 <__multadd>
  4086ae:	4601      	mov	r1, r0
  4086b0:	4680      	mov	r8, r0
  4086b2:	4648      	mov	r0, r9
  4086b4:	f001 f8fa 	bl	4098ac <__mcmp>
  4086b8:	2800      	cmp	r0, #0
  4086ba:	ddbd      	ble.n	408638 <_dtoa_r+0x9b8>
  4086bc:	9a02      	ldr	r2, [sp, #8]
  4086be:	9904      	ldr	r1, [sp, #16]
  4086c0:	2331      	movs	r3, #49	; 0x31
  4086c2:	3201      	adds	r2, #1
  4086c4:	9202      	str	r2, [sp, #8]
  4086c6:	700b      	strb	r3, [r1, #0]
  4086c8:	1c4d      	adds	r5, r1, #1
  4086ca:	e7b9      	b.n	408640 <_dtoa_r+0x9c0>
  4086cc:	9a02      	ldr	r2, [sp, #8]
  4086ce:	3201      	adds	r2, #1
  4086d0:	9202      	str	r2, [sp, #8]
  4086d2:	9a04      	ldr	r2, [sp, #16]
  4086d4:	2331      	movs	r3, #49	; 0x31
  4086d6:	7013      	strb	r3, [r2, #0]
  4086d8:	e652      	b.n	408380 <_dtoa_r+0x700>
  4086da:	2301      	movs	r3, #1
  4086dc:	930b      	str	r3, [sp, #44]	; 0x2c
  4086de:	e666      	b.n	4083ae <_dtoa_r+0x72e>
  4086e0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4086e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4086e6:	e48f      	b.n	408008 <_dtoa_r+0x388>
  4086e8:	0040a8f8 	.word	0x0040a8f8
  4086ec:	0040a8d0 	.word	0x0040a8d0
  4086f0:	3ff00000 	.word	0x3ff00000
  4086f4:	401c0000 	.word	0x401c0000
  4086f8:	3fe00000 	.word	0x3fe00000
  4086fc:	40240000 	.word	0x40240000
  408700:	40140000 	.word	0x40140000
  408704:	4650      	mov	r0, sl
  408706:	f7fd f805 	bl	405714 <__aeabi_i2d>
  40870a:	463a      	mov	r2, r7
  40870c:	4643      	mov	r3, r8
  40870e:	f7fd f867 	bl	4057e0 <__aeabi_dmul>
  408712:	2200      	movs	r2, #0
  408714:	4bc1      	ldr	r3, [pc, #772]	; (408a1c <_dtoa_r+0xd9c>)
  408716:	f7fc feb1 	bl	40547c <__adddf3>
  40871a:	4605      	mov	r5, r0
  40871c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  408720:	4641      	mov	r1, r8
  408722:	2200      	movs	r2, #0
  408724:	4bbe      	ldr	r3, [pc, #760]	; (408a20 <_dtoa_r+0xda0>)
  408726:	4638      	mov	r0, r7
  408728:	f7fc fea6 	bl	405478 <__aeabi_dsub>
  40872c:	462a      	mov	r2, r5
  40872e:	4633      	mov	r3, r6
  408730:	4682      	mov	sl, r0
  408732:	468b      	mov	fp, r1
  408734:	f7fd fae4 	bl	405d00 <__aeabi_dcmpgt>
  408738:	4680      	mov	r8, r0
  40873a:	2800      	cmp	r0, #0
  40873c:	f040 8110 	bne.w	408960 <_dtoa_r+0xce0>
  408740:	462a      	mov	r2, r5
  408742:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  408746:	4650      	mov	r0, sl
  408748:	4659      	mov	r1, fp
  40874a:	f7fd fabb 	bl	405cc4 <__aeabi_dcmplt>
  40874e:	b118      	cbz	r0, 408758 <_dtoa_r+0xad8>
  408750:	4646      	mov	r6, r8
  408752:	e771      	b.n	408638 <_dtoa_r+0x9b8>
  408754:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408758:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40875c:	f7ff bb8a 	b.w	407e74 <_dtoa_r+0x1f4>
  408760:	9804      	ldr	r0, [sp, #16]
  408762:	f7ff babb 	b.w	407cdc <_dtoa_r+0x5c>
  408766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40876a:	970c      	str	r7, [sp, #48]	; 0x30
  40876c:	1afb      	subs	r3, r7, r3
  40876e:	441a      	add	r2, r3
  408770:	920d      	str	r2, [sp, #52]	; 0x34
  408772:	2700      	movs	r7, #0
  408774:	e469      	b.n	40804a <_dtoa_r+0x3ca>
  408776:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40877a:	f04f 0a02 	mov.w	sl, #2
  40877e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  408782:	e657      	b.n	408434 <_dtoa_r+0x7b4>
  408784:	2100      	movs	r1, #0
  408786:	2301      	movs	r3, #1
  408788:	6461      	str	r1, [r4, #68]	; 0x44
  40878a:	4620      	mov	r0, r4
  40878c:	9325      	str	r3, [sp, #148]	; 0x94
  40878e:	f000 fe8f 	bl	4094b0 <_Balloc>
  408792:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408794:	9004      	str	r0, [sp, #16]
  408796:	6420      	str	r0, [r4, #64]	; 0x40
  408798:	930a      	str	r3, [sp, #40]	; 0x28
  40879a:	930f      	str	r3, [sp, #60]	; 0x3c
  40879c:	e629      	b.n	4083f2 <_dtoa_r+0x772>
  40879e:	2a00      	cmp	r2, #0
  4087a0:	46d0      	mov	r8, sl
  4087a2:	f8cd b018 	str.w	fp, [sp, #24]
  4087a6:	469a      	mov	sl, r3
  4087a8:	dd11      	ble.n	4087ce <_dtoa_r+0xb4e>
  4087aa:	4649      	mov	r1, r9
  4087ac:	2201      	movs	r2, #1
  4087ae:	4620      	mov	r0, r4
  4087b0:	f001 f82a 	bl	409808 <__lshift>
  4087b4:	4641      	mov	r1, r8
  4087b6:	4681      	mov	r9, r0
  4087b8:	f001 f878 	bl	4098ac <__mcmp>
  4087bc:	2800      	cmp	r0, #0
  4087be:	f340 8146 	ble.w	408a4e <_dtoa_r+0xdce>
  4087c2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4087c6:	f000 8106 	beq.w	4089d6 <_dtoa_r+0xd56>
  4087ca:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4087ce:	46b3      	mov	fp, r6
  4087d0:	f887 a000 	strb.w	sl, [r7]
  4087d4:	1c7d      	adds	r5, r7, #1
  4087d6:	9e06      	ldr	r6, [sp, #24]
  4087d8:	e5d2      	b.n	408380 <_dtoa_r+0x700>
  4087da:	d104      	bne.n	4087e6 <_dtoa_r+0xb66>
  4087dc:	f01a 0f01 	tst.w	sl, #1
  4087e0:	d001      	beq.n	4087e6 <_dtoa_r+0xb66>
  4087e2:	e5bd      	b.n	408360 <_dtoa_r+0x6e0>
  4087e4:	4615      	mov	r5, r2
  4087e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4087ea:	2b30      	cmp	r3, #48	; 0x30
  4087ec:	f105 32ff 	add.w	r2, r5, #4294967295
  4087f0:	d0f8      	beq.n	4087e4 <_dtoa_r+0xb64>
  4087f2:	e5c5      	b.n	408380 <_dtoa_r+0x700>
  4087f4:	9904      	ldr	r1, [sp, #16]
  4087f6:	2230      	movs	r2, #48	; 0x30
  4087f8:	700a      	strb	r2, [r1, #0]
  4087fa:	9a02      	ldr	r2, [sp, #8]
  4087fc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408800:	3201      	adds	r2, #1
  408802:	9202      	str	r2, [sp, #8]
  408804:	f7ff bbfc 	b.w	408000 <_dtoa_r+0x380>
  408808:	f000 80bb 	beq.w	408982 <_dtoa_r+0xd02>
  40880c:	9b02      	ldr	r3, [sp, #8]
  40880e:	425d      	negs	r5, r3
  408810:	4b84      	ldr	r3, [pc, #528]	; (408a24 <_dtoa_r+0xda4>)
  408812:	f005 020f 	and.w	r2, r5, #15
  408816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40881a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40881e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  408822:	f7fc ffdd 	bl	4057e0 <__aeabi_dmul>
  408826:	112d      	asrs	r5, r5, #4
  408828:	4607      	mov	r7, r0
  40882a:	4688      	mov	r8, r1
  40882c:	f000 812c 	beq.w	408a88 <_dtoa_r+0xe08>
  408830:	4e7d      	ldr	r6, [pc, #500]	; (408a28 <_dtoa_r+0xda8>)
  408832:	f04f 0a02 	mov.w	sl, #2
  408836:	07eb      	lsls	r3, r5, #31
  408838:	d509      	bpl.n	40884e <_dtoa_r+0xbce>
  40883a:	4638      	mov	r0, r7
  40883c:	4641      	mov	r1, r8
  40883e:	e9d6 2300 	ldrd	r2, r3, [r6]
  408842:	f7fc ffcd 	bl	4057e0 <__aeabi_dmul>
  408846:	f10a 0a01 	add.w	sl, sl, #1
  40884a:	4607      	mov	r7, r0
  40884c:	4688      	mov	r8, r1
  40884e:	106d      	asrs	r5, r5, #1
  408850:	f106 0608 	add.w	r6, r6, #8
  408854:	d1ef      	bne.n	408836 <_dtoa_r+0xbb6>
  408856:	e608      	b.n	40846a <_dtoa_r+0x7ea>
  408858:	6871      	ldr	r1, [r6, #4]
  40885a:	4620      	mov	r0, r4
  40885c:	f000 fe28 	bl	4094b0 <_Balloc>
  408860:	6933      	ldr	r3, [r6, #16]
  408862:	3302      	adds	r3, #2
  408864:	009a      	lsls	r2, r3, #2
  408866:	4605      	mov	r5, r0
  408868:	f106 010c 	add.w	r1, r6, #12
  40886c:	300c      	adds	r0, #12
  40886e:	f7fd fdb9 	bl	4063e4 <memcpy>
  408872:	4629      	mov	r1, r5
  408874:	2201      	movs	r2, #1
  408876:	4620      	mov	r0, r4
  408878:	f000 ffc6 	bl	409808 <__lshift>
  40887c:	9006      	str	r0, [sp, #24]
  40887e:	e4b5      	b.n	4081ec <_dtoa_r+0x56c>
  408880:	2b39      	cmp	r3, #57	; 0x39
  408882:	f8cd b018 	str.w	fp, [sp, #24]
  408886:	46d0      	mov	r8, sl
  408888:	f000 80a5 	beq.w	4089d6 <_dtoa_r+0xd56>
  40888c:	f103 0a01 	add.w	sl, r3, #1
  408890:	46b3      	mov	fp, r6
  408892:	f887 a000 	strb.w	sl, [r7]
  408896:	1c7d      	adds	r5, r7, #1
  408898:	9e06      	ldr	r6, [sp, #24]
  40889a:	e571      	b.n	408380 <_dtoa_r+0x700>
  40889c:	465a      	mov	r2, fp
  40889e:	46d0      	mov	r8, sl
  4088a0:	46b3      	mov	fp, r6
  4088a2:	469a      	mov	sl, r3
  4088a4:	4616      	mov	r6, r2
  4088a6:	e54f      	b.n	408348 <_dtoa_r+0x6c8>
  4088a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4088aa:	495e      	ldr	r1, [pc, #376]	; (408a24 <_dtoa_r+0xda4>)
  4088ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4088b0:	462a      	mov	r2, r5
  4088b2:	4633      	mov	r3, r6
  4088b4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4088b8:	f7fc ff92 	bl	4057e0 <__aeabi_dmul>
  4088bc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4088c0:	4638      	mov	r0, r7
  4088c2:	4641      	mov	r1, r8
  4088c4:	f001 fbc4 	bl	40a050 <__aeabi_d2iz>
  4088c8:	4605      	mov	r5, r0
  4088ca:	f7fc ff23 	bl	405714 <__aeabi_i2d>
  4088ce:	460b      	mov	r3, r1
  4088d0:	4602      	mov	r2, r0
  4088d2:	4641      	mov	r1, r8
  4088d4:	4638      	mov	r0, r7
  4088d6:	f7fc fdcf 	bl	405478 <__aeabi_dsub>
  4088da:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4088dc:	460f      	mov	r7, r1
  4088de:	9904      	ldr	r1, [sp, #16]
  4088e0:	3530      	adds	r5, #48	; 0x30
  4088e2:	2b01      	cmp	r3, #1
  4088e4:	700d      	strb	r5, [r1, #0]
  4088e6:	4606      	mov	r6, r0
  4088e8:	f101 0501 	add.w	r5, r1, #1
  4088ec:	d026      	beq.n	40893c <_dtoa_r+0xcbc>
  4088ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4088f0:	9a04      	ldr	r2, [sp, #16]
  4088f2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 408a30 <_dtoa_r+0xdb0>
  4088f6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4088fa:	4413      	add	r3, r2
  4088fc:	f04f 0a00 	mov.w	sl, #0
  408900:	4699      	mov	r9, r3
  408902:	4652      	mov	r2, sl
  408904:	465b      	mov	r3, fp
  408906:	4630      	mov	r0, r6
  408908:	4639      	mov	r1, r7
  40890a:	f7fc ff69 	bl	4057e0 <__aeabi_dmul>
  40890e:	460f      	mov	r7, r1
  408910:	4606      	mov	r6, r0
  408912:	f001 fb9d 	bl	40a050 <__aeabi_d2iz>
  408916:	4680      	mov	r8, r0
  408918:	f7fc fefc 	bl	405714 <__aeabi_i2d>
  40891c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  408920:	4602      	mov	r2, r0
  408922:	460b      	mov	r3, r1
  408924:	4630      	mov	r0, r6
  408926:	4639      	mov	r1, r7
  408928:	f7fc fda6 	bl	405478 <__aeabi_dsub>
  40892c:	f805 8b01 	strb.w	r8, [r5], #1
  408930:	454d      	cmp	r5, r9
  408932:	4606      	mov	r6, r0
  408934:	460f      	mov	r7, r1
  408936:	d1e4      	bne.n	408902 <_dtoa_r+0xc82>
  408938:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40893c:	4b3b      	ldr	r3, [pc, #236]	; (408a2c <_dtoa_r+0xdac>)
  40893e:	2200      	movs	r2, #0
  408940:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408944:	f7fc fd9a 	bl	40547c <__adddf3>
  408948:	4632      	mov	r2, r6
  40894a:	463b      	mov	r3, r7
  40894c:	f7fd f9ba 	bl	405cc4 <__aeabi_dcmplt>
  408950:	2800      	cmp	r0, #0
  408952:	d046      	beq.n	4089e2 <_dtoa_r+0xd62>
  408954:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408956:	9302      	str	r3, [sp, #8]
  408958:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40895c:	f7ff bb43 	b.w	407fe6 <_dtoa_r+0x366>
  408960:	f04f 0800 	mov.w	r8, #0
  408964:	4646      	mov	r6, r8
  408966:	e6a9      	b.n	4086bc <_dtoa_r+0xa3c>
  408968:	9b08      	ldr	r3, [sp, #32]
  40896a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40896c:	1a9d      	subs	r5, r3, r2
  40896e:	2300      	movs	r3, #0
  408970:	f7ff bb71 	b.w	408056 <_dtoa_r+0x3d6>
  408974:	9b18      	ldr	r3, [sp, #96]	; 0x60
  408976:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408978:	9d08      	ldr	r5, [sp, #32]
  40897a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40897e:	f7ff bb6a 	b.w	408056 <_dtoa_r+0x3d6>
  408982:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  408986:	f04f 0a02 	mov.w	sl, #2
  40898a:	e56e      	b.n	40846a <_dtoa_r+0x7ea>
  40898c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40898e:	2b00      	cmp	r3, #0
  408990:	f43f aeb8 	beq.w	408704 <_dtoa_r+0xa84>
  408994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408996:	2b00      	cmp	r3, #0
  408998:	f77f aede 	ble.w	408758 <_dtoa_r+0xad8>
  40899c:	2200      	movs	r2, #0
  40899e:	4b24      	ldr	r3, [pc, #144]	; (408a30 <_dtoa_r+0xdb0>)
  4089a0:	4638      	mov	r0, r7
  4089a2:	4641      	mov	r1, r8
  4089a4:	f7fc ff1c 	bl	4057e0 <__aeabi_dmul>
  4089a8:	4607      	mov	r7, r0
  4089aa:	4688      	mov	r8, r1
  4089ac:	f10a 0001 	add.w	r0, sl, #1
  4089b0:	f7fc feb0 	bl	405714 <__aeabi_i2d>
  4089b4:	463a      	mov	r2, r7
  4089b6:	4643      	mov	r3, r8
  4089b8:	f7fc ff12 	bl	4057e0 <__aeabi_dmul>
  4089bc:	2200      	movs	r2, #0
  4089be:	4b17      	ldr	r3, [pc, #92]	; (408a1c <_dtoa_r+0xd9c>)
  4089c0:	f7fc fd5c 	bl	40547c <__adddf3>
  4089c4:	9a02      	ldr	r2, [sp, #8]
  4089c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4089c8:	9312      	str	r3, [sp, #72]	; 0x48
  4089ca:	3a01      	subs	r2, #1
  4089cc:	4605      	mov	r5, r0
  4089ce:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4089d2:	9215      	str	r2, [sp, #84]	; 0x54
  4089d4:	e56a      	b.n	4084ac <_dtoa_r+0x82c>
  4089d6:	2239      	movs	r2, #57	; 0x39
  4089d8:	46b3      	mov	fp, r6
  4089da:	703a      	strb	r2, [r7, #0]
  4089dc:	9e06      	ldr	r6, [sp, #24]
  4089de:	1c7d      	adds	r5, r7, #1
  4089e0:	e4c0      	b.n	408364 <_dtoa_r+0x6e4>
  4089e2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4089e6:	2000      	movs	r0, #0
  4089e8:	4910      	ldr	r1, [pc, #64]	; (408a2c <_dtoa_r+0xdac>)
  4089ea:	f7fc fd45 	bl	405478 <__aeabi_dsub>
  4089ee:	4632      	mov	r2, r6
  4089f0:	463b      	mov	r3, r7
  4089f2:	f7fd f985 	bl	405d00 <__aeabi_dcmpgt>
  4089f6:	b908      	cbnz	r0, 4089fc <_dtoa_r+0xd7c>
  4089f8:	e6ae      	b.n	408758 <_dtoa_r+0xad8>
  4089fa:	4615      	mov	r5, r2
  4089fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408a00:	2b30      	cmp	r3, #48	; 0x30
  408a02:	f105 32ff 	add.w	r2, r5, #4294967295
  408a06:	d0f8      	beq.n	4089fa <_dtoa_r+0xd7a>
  408a08:	e5d7      	b.n	4085ba <_dtoa_r+0x93a>
  408a0a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  408a0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  408a10:	9302      	str	r3, [sp, #8]
  408a12:	f7ff bae8 	b.w	407fe6 <_dtoa_r+0x366>
  408a16:	970c      	str	r7, [sp, #48]	; 0x30
  408a18:	f7ff bba5 	b.w	408166 <_dtoa_r+0x4e6>
  408a1c:	401c0000 	.word	0x401c0000
  408a20:	40140000 	.word	0x40140000
  408a24:	0040a8f8 	.word	0x0040a8f8
  408a28:	0040a8d0 	.word	0x0040a8d0
  408a2c:	3fe00000 	.word	0x3fe00000
  408a30:	40240000 	.word	0x40240000
  408a34:	2b39      	cmp	r3, #57	; 0x39
  408a36:	f8cd b018 	str.w	fp, [sp, #24]
  408a3a:	46d0      	mov	r8, sl
  408a3c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  408a40:	469a      	mov	sl, r3
  408a42:	d0c8      	beq.n	4089d6 <_dtoa_r+0xd56>
  408a44:	f1bb 0f00 	cmp.w	fp, #0
  408a48:	f73f aebf 	bgt.w	4087ca <_dtoa_r+0xb4a>
  408a4c:	e6bf      	b.n	4087ce <_dtoa_r+0xb4e>
  408a4e:	f47f aebe 	bne.w	4087ce <_dtoa_r+0xb4e>
  408a52:	f01a 0f01 	tst.w	sl, #1
  408a56:	f43f aeba 	beq.w	4087ce <_dtoa_r+0xb4e>
  408a5a:	e6b2      	b.n	4087c2 <_dtoa_r+0xb42>
  408a5c:	f04f 0800 	mov.w	r8, #0
  408a60:	4646      	mov	r6, r8
  408a62:	e5e9      	b.n	408638 <_dtoa_r+0x9b8>
  408a64:	4631      	mov	r1, r6
  408a66:	2300      	movs	r3, #0
  408a68:	220a      	movs	r2, #10
  408a6a:	4620      	mov	r0, r4
  408a6c:	f000 fd50 	bl	409510 <__multadd>
  408a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a72:	2b00      	cmp	r3, #0
  408a74:	4606      	mov	r6, r0
  408a76:	dd0a      	ble.n	408a8e <_dtoa_r+0xe0e>
  408a78:	930a      	str	r3, [sp, #40]	; 0x28
  408a7a:	f7ff bbaa 	b.w	4081d2 <_dtoa_r+0x552>
  408a7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a80:	2b02      	cmp	r3, #2
  408a82:	dc23      	bgt.n	408acc <_dtoa_r+0xe4c>
  408a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a86:	e43b      	b.n	408300 <_dtoa_r+0x680>
  408a88:	f04f 0a02 	mov.w	sl, #2
  408a8c:	e4ed      	b.n	40846a <_dtoa_r+0x7ea>
  408a8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408a90:	2b02      	cmp	r3, #2
  408a92:	dc1b      	bgt.n	408acc <_dtoa_r+0xe4c>
  408a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408a96:	e7ef      	b.n	408a78 <_dtoa_r+0xdf8>
  408a98:	2500      	movs	r5, #0
  408a9a:	6465      	str	r5, [r4, #68]	; 0x44
  408a9c:	4629      	mov	r1, r5
  408a9e:	4620      	mov	r0, r4
  408aa0:	f000 fd06 	bl	4094b0 <_Balloc>
  408aa4:	f04f 33ff 	mov.w	r3, #4294967295
  408aa8:	930a      	str	r3, [sp, #40]	; 0x28
  408aaa:	930f      	str	r3, [sp, #60]	; 0x3c
  408aac:	2301      	movs	r3, #1
  408aae:	9004      	str	r0, [sp, #16]
  408ab0:	9525      	str	r5, [sp, #148]	; 0x94
  408ab2:	6420      	str	r0, [r4, #64]	; 0x40
  408ab4:	930b      	str	r3, [sp, #44]	; 0x2c
  408ab6:	f7ff b9dd 	b.w	407e74 <_dtoa_r+0x1f4>
  408aba:	2501      	movs	r5, #1
  408abc:	f7ff b9a5 	b.w	407e0a <_dtoa_r+0x18a>
  408ac0:	f43f ab69 	beq.w	408196 <_dtoa_r+0x516>
  408ac4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408ac8:	f7ff bbf9 	b.w	4082be <_dtoa_r+0x63e>
  408acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408ace:	930a      	str	r3, [sp, #40]	; 0x28
  408ad0:	e5e5      	b.n	40869e <_dtoa_r+0xa1e>
  408ad2:	bf00      	nop

00408ad4 <__libc_fini_array>:
  408ad4:	b538      	push	{r3, r4, r5, lr}
  408ad6:	4c0a      	ldr	r4, [pc, #40]	; (408b00 <__libc_fini_array+0x2c>)
  408ad8:	4d0a      	ldr	r5, [pc, #40]	; (408b04 <__libc_fini_array+0x30>)
  408ada:	1b64      	subs	r4, r4, r5
  408adc:	10a4      	asrs	r4, r4, #2
  408ade:	d00a      	beq.n	408af6 <__libc_fini_array+0x22>
  408ae0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408ae4:	3b01      	subs	r3, #1
  408ae6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408aea:	3c01      	subs	r4, #1
  408aec:	f855 3904 	ldr.w	r3, [r5], #-4
  408af0:	4798      	blx	r3
  408af2:	2c00      	cmp	r4, #0
  408af4:	d1f9      	bne.n	408aea <__libc_fini_array+0x16>
  408af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408afa:	f001 bff3 	b.w	40aae4 <_fini>
  408afe:	bf00      	nop
  408b00:	0040aaf4 	.word	0x0040aaf4
  408b04:	0040aaf0 	.word	0x0040aaf0

00408b08 <_malloc_trim_r>:
  408b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408b0a:	4f24      	ldr	r7, [pc, #144]	; (408b9c <_malloc_trim_r+0x94>)
  408b0c:	460c      	mov	r4, r1
  408b0e:	4606      	mov	r6, r0
  408b10:	f000 fcc2 	bl	409498 <__malloc_lock>
  408b14:	68bb      	ldr	r3, [r7, #8]
  408b16:	685d      	ldr	r5, [r3, #4]
  408b18:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408b1c:	310f      	adds	r1, #15
  408b1e:	f025 0503 	bic.w	r5, r5, #3
  408b22:	4429      	add	r1, r5
  408b24:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408b28:	f021 010f 	bic.w	r1, r1, #15
  408b2c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408b30:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408b34:	db07      	blt.n	408b46 <_malloc_trim_r+0x3e>
  408b36:	2100      	movs	r1, #0
  408b38:	4630      	mov	r0, r6
  408b3a:	f001 f959 	bl	409df0 <_sbrk_r>
  408b3e:	68bb      	ldr	r3, [r7, #8]
  408b40:	442b      	add	r3, r5
  408b42:	4298      	cmp	r0, r3
  408b44:	d004      	beq.n	408b50 <_malloc_trim_r+0x48>
  408b46:	4630      	mov	r0, r6
  408b48:	f000 fcac 	bl	4094a4 <__malloc_unlock>
  408b4c:	2000      	movs	r0, #0
  408b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408b50:	4261      	negs	r1, r4
  408b52:	4630      	mov	r0, r6
  408b54:	f001 f94c 	bl	409df0 <_sbrk_r>
  408b58:	3001      	adds	r0, #1
  408b5a:	d00d      	beq.n	408b78 <_malloc_trim_r+0x70>
  408b5c:	4b10      	ldr	r3, [pc, #64]	; (408ba0 <_malloc_trim_r+0x98>)
  408b5e:	68ba      	ldr	r2, [r7, #8]
  408b60:	6819      	ldr	r1, [r3, #0]
  408b62:	1b2d      	subs	r5, r5, r4
  408b64:	f045 0501 	orr.w	r5, r5, #1
  408b68:	4630      	mov	r0, r6
  408b6a:	1b09      	subs	r1, r1, r4
  408b6c:	6055      	str	r5, [r2, #4]
  408b6e:	6019      	str	r1, [r3, #0]
  408b70:	f000 fc98 	bl	4094a4 <__malloc_unlock>
  408b74:	2001      	movs	r0, #1
  408b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408b78:	2100      	movs	r1, #0
  408b7a:	4630      	mov	r0, r6
  408b7c:	f001 f938 	bl	409df0 <_sbrk_r>
  408b80:	68ba      	ldr	r2, [r7, #8]
  408b82:	1a83      	subs	r3, r0, r2
  408b84:	2b0f      	cmp	r3, #15
  408b86:	ddde      	ble.n	408b46 <_malloc_trim_r+0x3e>
  408b88:	4c06      	ldr	r4, [pc, #24]	; (408ba4 <_malloc_trim_r+0x9c>)
  408b8a:	4905      	ldr	r1, [pc, #20]	; (408ba0 <_malloc_trim_r+0x98>)
  408b8c:	6824      	ldr	r4, [r4, #0]
  408b8e:	f043 0301 	orr.w	r3, r3, #1
  408b92:	1b00      	subs	r0, r0, r4
  408b94:	6053      	str	r3, [r2, #4]
  408b96:	6008      	str	r0, [r1, #0]
  408b98:	e7d5      	b.n	408b46 <_malloc_trim_r+0x3e>
  408b9a:	bf00      	nop
  408b9c:	20000728 	.word	0x20000728
  408ba0:	2000178c 	.word	0x2000178c
  408ba4:	20000b30 	.word	0x20000b30

00408ba8 <_free_r>:
  408ba8:	2900      	cmp	r1, #0
  408baa:	d044      	beq.n	408c36 <_free_r+0x8e>
  408bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408bb0:	460d      	mov	r5, r1
  408bb2:	4680      	mov	r8, r0
  408bb4:	f000 fc70 	bl	409498 <__malloc_lock>
  408bb8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  408bbc:	4969      	ldr	r1, [pc, #420]	; (408d64 <_free_r+0x1bc>)
  408bbe:	f027 0301 	bic.w	r3, r7, #1
  408bc2:	f1a5 0408 	sub.w	r4, r5, #8
  408bc6:	18e2      	adds	r2, r4, r3
  408bc8:	688e      	ldr	r6, [r1, #8]
  408bca:	6850      	ldr	r0, [r2, #4]
  408bcc:	42b2      	cmp	r2, r6
  408bce:	f020 0003 	bic.w	r0, r0, #3
  408bd2:	d05e      	beq.n	408c92 <_free_r+0xea>
  408bd4:	07fe      	lsls	r6, r7, #31
  408bd6:	6050      	str	r0, [r2, #4]
  408bd8:	d40b      	bmi.n	408bf2 <_free_r+0x4a>
  408bda:	f855 7c08 	ldr.w	r7, [r5, #-8]
  408bde:	1be4      	subs	r4, r4, r7
  408be0:	f101 0e08 	add.w	lr, r1, #8
  408be4:	68a5      	ldr	r5, [r4, #8]
  408be6:	4575      	cmp	r5, lr
  408be8:	443b      	add	r3, r7
  408bea:	d06d      	beq.n	408cc8 <_free_r+0x120>
  408bec:	68e7      	ldr	r7, [r4, #12]
  408bee:	60ef      	str	r7, [r5, #12]
  408bf0:	60bd      	str	r5, [r7, #8]
  408bf2:	1815      	adds	r5, r2, r0
  408bf4:	686d      	ldr	r5, [r5, #4]
  408bf6:	07ed      	lsls	r5, r5, #31
  408bf8:	d53e      	bpl.n	408c78 <_free_r+0xd0>
  408bfa:	f043 0201 	orr.w	r2, r3, #1
  408bfe:	6062      	str	r2, [r4, #4]
  408c00:	50e3      	str	r3, [r4, r3]
  408c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408c06:	d217      	bcs.n	408c38 <_free_r+0x90>
  408c08:	08db      	lsrs	r3, r3, #3
  408c0a:	1c58      	adds	r0, r3, #1
  408c0c:	109a      	asrs	r2, r3, #2
  408c0e:	684d      	ldr	r5, [r1, #4]
  408c10:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408c14:	60a7      	str	r7, [r4, #8]
  408c16:	2301      	movs	r3, #1
  408c18:	4093      	lsls	r3, r2
  408c1a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  408c1e:	432b      	orrs	r3, r5
  408c20:	3a08      	subs	r2, #8
  408c22:	60e2      	str	r2, [r4, #12]
  408c24:	604b      	str	r3, [r1, #4]
  408c26:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408c2a:	60fc      	str	r4, [r7, #12]
  408c2c:	4640      	mov	r0, r8
  408c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408c32:	f000 bc37 	b.w	4094a4 <__malloc_unlock>
  408c36:	4770      	bx	lr
  408c38:	0a5a      	lsrs	r2, r3, #9
  408c3a:	2a04      	cmp	r2, #4
  408c3c:	d852      	bhi.n	408ce4 <_free_r+0x13c>
  408c3e:	099a      	lsrs	r2, r3, #6
  408c40:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408c44:	00ff      	lsls	r7, r7, #3
  408c46:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408c4a:	19c8      	adds	r0, r1, r7
  408c4c:	59ca      	ldr	r2, [r1, r7]
  408c4e:	3808      	subs	r0, #8
  408c50:	4290      	cmp	r0, r2
  408c52:	d04f      	beq.n	408cf4 <_free_r+0x14c>
  408c54:	6851      	ldr	r1, [r2, #4]
  408c56:	f021 0103 	bic.w	r1, r1, #3
  408c5a:	428b      	cmp	r3, r1
  408c5c:	d232      	bcs.n	408cc4 <_free_r+0x11c>
  408c5e:	6892      	ldr	r2, [r2, #8]
  408c60:	4290      	cmp	r0, r2
  408c62:	d1f7      	bne.n	408c54 <_free_r+0xac>
  408c64:	68c3      	ldr	r3, [r0, #12]
  408c66:	60a0      	str	r0, [r4, #8]
  408c68:	60e3      	str	r3, [r4, #12]
  408c6a:	609c      	str	r4, [r3, #8]
  408c6c:	60c4      	str	r4, [r0, #12]
  408c6e:	4640      	mov	r0, r8
  408c70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408c74:	f000 bc16 	b.w	4094a4 <__malloc_unlock>
  408c78:	6895      	ldr	r5, [r2, #8]
  408c7a:	4f3b      	ldr	r7, [pc, #236]	; (408d68 <_free_r+0x1c0>)
  408c7c:	42bd      	cmp	r5, r7
  408c7e:	4403      	add	r3, r0
  408c80:	d040      	beq.n	408d04 <_free_r+0x15c>
  408c82:	68d0      	ldr	r0, [r2, #12]
  408c84:	60e8      	str	r0, [r5, #12]
  408c86:	f043 0201 	orr.w	r2, r3, #1
  408c8a:	6085      	str	r5, [r0, #8]
  408c8c:	6062      	str	r2, [r4, #4]
  408c8e:	50e3      	str	r3, [r4, r3]
  408c90:	e7b7      	b.n	408c02 <_free_r+0x5a>
  408c92:	07ff      	lsls	r7, r7, #31
  408c94:	4403      	add	r3, r0
  408c96:	d407      	bmi.n	408ca8 <_free_r+0x100>
  408c98:	f855 2c08 	ldr.w	r2, [r5, #-8]
  408c9c:	1aa4      	subs	r4, r4, r2
  408c9e:	4413      	add	r3, r2
  408ca0:	68a0      	ldr	r0, [r4, #8]
  408ca2:	68e2      	ldr	r2, [r4, #12]
  408ca4:	60c2      	str	r2, [r0, #12]
  408ca6:	6090      	str	r0, [r2, #8]
  408ca8:	4a30      	ldr	r2, [pc, #192]	; (408d6c <_free_r+0x1c4>)
  408caa:	6812      	ldr	r2, [r2, #0]
  408cac:	f043 0001 	orr.w	r0, r3, #1
  408cb0:	4293      	cmp	r3, r2
  408cb2:	6060      	str	r0, [r4, #4]
  408cb4:	608c      	str	r4, [r1, #8]
  408cb6:	d3b9      	bcc.n	408c2c <_free_r+0x84>
  408cb8:	4b2d      	ldr	r3, [pc, #180]	; (408d70 <_free_r+0x1c8>)
  408cba:	4640      	mov	r0, r8
  408cbc:	6819      	ldr	r1, [r3, #0]
  408cbe:	f7ff ff23 	bl	408b08 <_malloc_trim_r>
  408cc2:	e7b3      	b.n	408c2c <_free_r+0x84>
  408cc4:	4610      	mov	r0, r2
  408cc6:	e7cd      	b.n	408c64 <_free_r+0xbc>
  408cc8:	1811      	adds	r1, r2, r0
  408cca:	6849      	ldr	r1, [r1, #4]
  408ccc:	07c9      	lsls	r1, r1, #31
  408cce:	d444      	bmi.n	408d5a <_free_r+0x1b2>
  408cd0:	6891      	ldr	r1, [r2, #8]
  408cd2:	68d2      	ldr	r2, [r2, #12]
  408cd4:	60ca      	str	r2, [r1, #12]
  408cd6:	4403      	add	r3, r0
  408cd8:	f043 0001 	orr.w	r0, r3, #1
  408cdc:	6091      	str	r1, [r2, #8]
  408cde:	6060      	str	r0, [r4, #4]
  408ce0:	50e3      	str	r3, [r4, r3]
  408ce2:	e7a3      	b.n	408c2c <_free_r+0x84>
  408ce4:	2a14      	cmp	r2, #20
  408ce6:	d816      	bhi.n	408d16 <_free_r+0x16e>
  408ce8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408cec:	00ff      	lsls	r7, r7, #3
  408cee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408cf2:	e7aa      	b.n	408c4a <_free_r+0xa2>
  408cf4:	10aa      	asrs	r2, r5, #2
  408cf6:	2301      	movs	r3, #1
  408cf8:	684d      	ldr	r5, [r1, #4]
  408cfa:	4093      	lsls	r3, r2
  408cfc:	432b      	orrs	r3, r5
  408cfe:	604b      	str	r3, [r1, #4]
  408d00:	4603      	mov	r3, r0
  408d02:	e7b0      	b.n	408c66 <_free_r+0xbe>
  408d04:	f043 0201 	orr.w	r2, r3, #1
  408d08:	614c      	str	r4, [r1, #20]
  408d0a:	610c      	str	r4, [r1, #16]
  408d0c:	60e5      	str	r5, [r4, #12]
  408d0e:	60a5      	str	r5, [r4, #8]
  408d10:	6062      	str	r2, [r4, #4]
  408d12:	50e3      	str	r3, [r4, r3]
  408d14:	e78a      	b.n	408c2c <_free_r+0x84>
  408d16:	2a54      	cmp	r2, #84	; 0x54
  408d18:	d806      	bhi.n	408d28 <_free_r+0x180>
  408d1a:	0b1a      	lsrs	r2, r3, #12
  408d1c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408d20:	00ff      	lsls	r7, r7, #3
  408d22:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408d26:	e790      	b.n	408c4a <_free_r+0xa2>
  408d28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408d2c:	d806      	bhi.n	408d3c <_free_r+0x194>
  408d2e:	0bda      	lsrs	r2, r3, #15
  408d30:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408d34:	00ff      	lsls	r7, r7, #3
  408d36:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408d3a:	e786      	b.n	408c4a <_free_r+0xa2>
  408d3c:	f240 5054 	movw	r0, #1364	; 0x554
  408d40:	4282      	cmp	r2, r0
  408d42:	d806      	bhi.n	408d52 <_free_r+0x1aa>
  408d44:	0c9a      	lsrs	r2, r3, #18
  408d46:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408d4a:	00ff      	lsls	r7, r7, #3
  408d4c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  408d50:	e77b      	b.n	408c4a <_free_r+0xa2>
  408d52:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408d56:	257e      	movs	r5, #126	; 0x7e
  408d58:	e777      	b.n	408c4a <_free_r+0xa2>
  408d5a:	f043 0101 	orr.w	r1, r3, #1
  408d5e:	6061      	str	r1, [r4, #4]
  408d60:	6013      	str	r3, [r2, #0]
  408d62:	e763      	b.n	408c2c <_free_r+0x84>
  408d64:	20000728 	.word	0x20000728
  408d68:	20000730 	.word	0x20000730
  408d6c:	20000b34 	.word	0x20000b34
  408d70:	200017bc 	.word	0x200017bc

00408d74 <_localeconv_r>:
  408d74:	4a04      	ldr	r2, [pc, #16]	; (408d88 <_localeconv_r+0x14>)
  408d76:	4b05      	ldr	r3, [pc, #20]	; (408d8c <_localeconv_r+0x18>)
  408d78:	6812      	ldr	r2, [r2, #0]
  408d7a:	6b50      	ldr	r0, [r2, #52]	; 0x34
  408d7c:	2800      	cmp	r0, #0
  408d7e:	bf08      	it	eq
  408d80:	4618      	moveq	r0, r3
  408d82:	30f0      	adds	r0, #240	; 0xf0
  408d84:	4770      	bx	lr
  408d86:	bf00      	nop
  408d88:	2000018c 	.word	0x2000018c
  408d8c:	200005bc 	.word	0x200005bc

00408d90 <__retarget_lock_acquire_recursive>:
  408d90:	4770      	bx	lr
  408d92:	bf00      	nop

00408d94 <__retarget_lock_release_recursive>:
  408d94:	4770      	bx	lr
  408d96:	bf00      	nop

00408d98 <_malloc_r>:
  408d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408d9c:	f101 060b 	add.w	r6, r1, #11
  408da0:	2e16      	cmp	r6, #22
  408da2:	b083      	sub	sp, #12
  408da4:	4605      	mov	r5, r0
  408da6:	f240 809e 	bls.w	408ee6 <_malloc_r+0x14e>
  408daa:	f036 0607 	bics.w	r6, r6, #7
  408dae:	f100 80bd 	bmi.w	408f2c <_malloc_r+0x194>
  408db2:	42b1      	cmp	r1, r6
  408db4:	f200 80ba 	bhi.w	408f2c <_malloc_r+0x194>
  408db8:	f000 fb6e 	bl	409498 <__malloc_lock>
  408dbc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408dc0:	f0c0 8293 	bcc.w	4092ea <_malloc_r+0x552>
  408dc4:	0a73      	lsrs	r3, r6, #9
  408dc6:	f000 80b8 	beq.w	408f3a <_malloc_r+0x1a2>
  408dca:	2b04      	cmp	r3, #4
  408dcc:	f200 8179 	bhi.w	4090c2 <_malloc_r+0x32a>
  408dd0:	09b3      	lsrs	r3, r6, #6
  408dd2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408dd6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  408dda:	00c3      	lsls	r3, r0, #3
  408ddc:	4fbf      	ldr	r7, [pc, #764]	; (4090dc <_malloc_r+0x344>)
  408dde:	443b      	add	r3, r7
  408de0:	f1a3 0108 	sub.w	r1, r3, #8
  408de4:	685c      	ldr	r4, [r3, #4]
  408de6:	42a1      	cmp	r1, r4
  408de8:	d106      	bne.n	408df8 <_malloc_r+0x60>
  408dea:	e00c      	b.n	408e06 <_malloc_r+0x6e>
  408dec:	2a00      	cmp	r2, #0
  408dee:	f280 80aa 	bge.w	408f46 <_malloc_r+0x1ae>
  408df2:	68e4      	ldr	r4, [r4, #12]
  408df4:	42a1      	cmp	r1, r4
  408df6:	d006      	beq.n	408e06 <_malloc_r+0x6e>
  408df8:	6863      	ldr	r3, [r4, #4]
  408dfa:	f023 0303 	bic.w	r3, r3, #3
  408dfe:	1b9a      	subs	r2, r3, r6
  408e00:	2a0f      	cmp	r2, #15
  408e02:	ddf3      	ble.n	408dec <_malloc_r+0x54>
  408e04:	4670      	mov	r0, lr
  408e06:	693c      	ldr	r4, [r7, #16]
  408e08:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4090f0 <_malloc_r+0x358>
  408e0c:	4574      	cmp	r4, lr
  408e0e:	f000 81ab 	beq.w	409168 <_malloc_r+0x3d0>
  408e12:	6863      	ldr	r3, [r4, #4]
  408e14:	f023 0303 	bic.w	r3, r3, #3
  408e18:	1b9a      	subs	r2, r3, r6
  408e1a:	2a0f      	cmp	r2, #15
  408e1c:	f300 8190 	bgt.w	409140 <_malloc_r+0x3a8>
  408e20:	2a00      	cmp	r2, #0
  408e22:	f8c7 e014 	str.w	lr, [r7, #20]
  408e26:	f8c7 e010 	str.w	lr, [r7, #16]
  408e2a:	f280 809d 	bge.w	408f68 <_malloc_r+0x1d0>
  408e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408e32:	f080 8161 	bcs.w	4090f8 <_malloc_r+0x360>
  408e36:	08db      	lsrs	r3, r3, #3
  408e38:	f103 0c01 	add.w	ip, r3, #1
  408e3c:	1099      	asrs	r1, r3, #2
  408e3e:	687a      	ldr	r2, [r7, #4]
  408e40:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  408e44:	f8c4 8008 	str.w	r8, [r4, #8]
  408e48:	2301      	movs	r3, #1
  408e4a:	408b      	lsls	r3, r1
  408e4c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  408e50:	4313      	orrs	r3, r2
  408e52:	3908      	subs	r1, #8
  408e54:	60e1      	str	r1, [r4, #12]
  408e56:	607b      	str	r3, [r7, #4]
  408e58:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  408e5c:	f8c8 400c 	str.w	r4, [r8, #12]
  408e60:	1082      	asrs	r2, r0, #2
  408e62:	2401      	movs	r4, #1
  408e64:	4094      	lsls	r4, r2
  408e66:	429c      	cmp	r4, r3
  408e68:	f200 808b 	bhi.w	408f82 <_malloc_r+0x1ea>
  408e6c:	421c      	tst	r4, r3
  408e6e:	d106      	bne.n	408e7e <_malloc_r+0xe6>
  408e70:	f020 0003 	bic.w	r0, r0, #3
  408e74:	0064      	lsls	r4, r4, #1
  408e76:	421c      	tst	r4, r3
  408e78:	f100 0004 	add.w	r0, r0, #4
  408e7c:	d0fa      	beq.n	408e74 <_malloc_r+0xdc>
  408e7e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408e82:	46cc      	mov	ip, r9
  408e84:	4680      	mov	r8, r0
  408e86:	f8dc 300c 	ldr.w	r3, [ip, #12]
  408e8a:	459c      	cmp	ip, r3
  408e8c:	d107      	bne.n	408e9e <_malloc_r+0x106>
  408e8e:	e16d      	b.n	40916c <_malloc_r+0x3d4>
  408e90:	2a00      	cmp	r2, #0
  408e92:	f280 817b 	bge.w	40918c <_malloc_r+0x3f4>
  408e96:	68db      	ldr	r3, [r3, #12]
  408e98:	459c      	cmp	ip, r3
  408e9a:	f000 8167 	beq.w	40916c <_malloc_r+0x3d4>
  408e9e:	6859      	ldr	r1, [r3, #4]
  408ea0:	f021 0103 	bic.w	r1, r1, #3
  408ea4:	1b8a      	subs	r2, r1, r6
  408ea6:	2a0f      	cmp	r2, #15
  408ea8:	ddf2      	ble.n	408e90 <_malloc_r+0xf8>
  408eaa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  408eae:	f8d3 8008 	ldr.w	r8, [r3, #8]
  408eb2:	9300      	str	r3, [sp, #0]
  408eb4:	199c      	adds	r4, r3, r6
  408eb6:	4628      	mov	r0, r5
  408eb8:	f046 0601 	orr.w	r6, r6, #1
  408ebc:	f042 0501 	orr.w	r5, r2, #1
  408ec0:	605e      	str	r6, [r3, #4]
  408ec2:	f8c8 c00c 	str.w	ip, [r8, #12]
  408ec6:	f8cc 8008 	str.w	r8, [ip, #8]
  408eca:	617c      	str	r4, [r7, #20]
  408ecc:	613c      	str	r4, [r7, #16]
  408ece:	f8c4 e00c 	str.w	lr, [r4, #12]
  408ed2:	f8c4 e008 	str.w	lr, [r4, #8]
  408ed6:	6065      	str	r5, [r4, #4]
  408ed8:	505a      	str	r2, [r3, r1]
  408eda:	f000 fae3 	bl	4094a4 <__malloc_unlock>
  408ede:	9b00      	ldr	r3, [sp, #0]
  408ee0:	f103 0408 	add.w	r4, r3, #8
  408ee4:	e01e      	b.n	408f24 <_malloc_r+0x18c>
  408ee6:	2910      	cmp	r1, #16
  408ee8:	d820      	bhi.n	408f2c <_malloc_r+0x194>
  408eea:	f000 fad5 	bl	409498 <__malloc_lock>
  408eee:	2610      	movs	r6, #16
  408ef0:	2318      	movs	r3, #24
  408ef2:	2002      	movs	r0, #2
  408ef4:	4f79      	ldr	r7, [pc, #484]	; (4090dc <_malloc_r+0x344>)
  408ef6:	443b      	add	r3, r7
  408ef8:	f1a3 0208 	sub.w	r2, r3, #8
  408efc:	685c      	ldr	r4, [r3, #4]
  408efe:	4294      	cmp	r4, r2
  408f00:	f000 813d 	beq.w	40917e <_malloc_r+0x3e6>
  408f04:	6863      	ldr	r3, [r4, #4]
  408f06:	68e1      	ldr	r1, [r4, #12]
  408f08:	68a6      	ldr	r6, [r4, #8]
  408f0a:	f023 0303 	bic.w	r3, r3, #3
  408f0e:	4423      	add	r3, r4
  408f10:	4628      	mov	r0, r5
  408f12:	685a      	ldr	r2, [r3, #4]
  408f14:	60f1      	str	r1, [r6, #12]
  408f16:	f042 0201 	orr.w	r2, r2, #1
  408f1a:	608e      	str	r6, [r1, #8]
  408f1c:	605a      	str	r2, [r3, #4]
  408f1e:	f000 fac1 	bl	4094a4 <__malloc_unlock>
  408f22:	3408      	adds	r4, #8
  408f24:	4620      	mov	r0, r4
  408f26:	b003      	add	sp, #12
  408f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f2c:	2400      	movs	r4, #0
  408f2e:	230c      	movs	r3, #12
  408f30:	4620      	mov	r0, r4
  408f32:	602b      	str	r3, [r5, #0]
  408f34:	b003      	add	sp, #12
  408f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f3a:	2040      	movs	r0, #64	; 0x40
  408f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
  408f40:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  408f44:	e74a      	b.n	408ddc <_malloc_r+0x44>
  408f46:	4423      	add	r3, r4
  408f48:	68e1      	ldr	r1, [r4, #12]
  408f4a:	685a      	ldr	r2, [r3, #4]
  408f4c:	68a6      	ldr	r6, [r4, #8]
  408f4e:	f042 0201 	orr.w	r2, r2, #1
  408f52:	60f1      	str	r1, [r6, #12]
  408f54:	4628      	mov	r0, r5
  408f56:	608e      	str	r6, [r1, #8]
  408f58:	605a      	str	r2, [r3, #4]
  408f5a:	f000 faa3 	bl	4094a4 <__malloc_unlock>
  408f5e:	3408      	adds	r4, #8
  408f60:	4620      	mov	r0, r4
  408f62:	b003      	add	sp, #12
  408f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f68:	4423      	add	r3, r4
  408f6a:	4628      	mov	r0, r5
  408f6c:	685a      	ldr	r2, [r3, #4]
  408f6e:	f042 0201 	orr.w	r2, r2, #1
  408f72:	605a      	str	r2, [r3, #4]
  408f74:	f000 fa96 	bl	4094a4 <__malloc_unlock>
  408f78:	3408      	adds	r4, #8
  408f7a:	4620      	mov	r0, r4
  408f7c:	b003      	add	sp, #12
  408f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f82:	68bc      	ldr	r4, [r7, #8]
  408f84:	6863      	ldr	r3, [r4, #4]
  408f86:	f023 0803 	bic.w	r8, r3, #3
  408f8a:	45b0      	cmp	r8, r6
  408f8c:	d304      	bcc.n	408f98 <_malloc_r+0x200>
  408f8e:	eba8 0306 	sub.w	r3, r8, r6
  408f92:	2b0f      	cmp	r3, #15
  408f94:	f300 8085 	bgt.w	4090a2 <_malloc_r+0x30a>
  408f98:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4090f4 <_malloc_r+0x35c>
  408f9c:	4b50      	ldr	r3, [pc, #320]	; (4090e0 <_malloc_r+0x348>)
  408f9e:	f8d9 2000 	ldr.w	r2, [r9]
  408fa2:	681b      	ldr	r3, [r3, #0]
  408fa4:	3201      	adds	r2, #1
  408fa6:	4433      	add	r3, r6
  408fa8:	eb04 0a08 	add.w	sl, r4, r8
  408fac:	f000 8155 	beq.w	40925a <_malloc_r+0x4c2>
  408fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  408fb4:	330f      	adds	r3, #15
  408fb6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  408fba:	f02b 0b0f 	bic.w	fp, fp, #15
  408fbe:	4659      	mov	r1, fp
  408fc0:	4628      	mov	r0, r5
  408fc2:	f000 ff15 	bl	409df0 <_sbrk_r>
  408fc6:	1c41      	adds	r1, r0, #1
  408fc8:	4602      	mov	r2, r0
  408fca:	f000 80fc 	beq.w	4091c6 <_malloc_r+0x42e>
  408fce:	4582      	cmp	sl, r0
  408fd0:	f200 80f7 	bhi.w	4091c2 <_malloc_r+0x42a>
  408fd4:	4b43      	ldr	r3, [pc, #268]	; (4090e4 <_malloc_r+0x34c>)
  408fd6:	6819      	ldr	r1, [r3, #0]
  408fd8:	4459      	add	r1, fp
  408fda:	6019      	str	r1, [r3, #0]
  408fdc:	f000 814d 	beq.w	40927a <_malloc_r+0x4e2>
  408fe0:	f8d9 0000 	ldr.w	r0, [r9]
  408fe4:	3001      	adds	r0, #1
  408fe6:	bf1b      	ittet	ne
  408fe8:	eba2 0a0a 	subne.w	sl, r2, sl
  408fec:	4451      	addne	r1, sl
  408fee:	f8c9 2000 	streq.w	r2, [r9]
  408ff2:	6019      	strne	r1, [r3, #0]
  408ff4:	f012 0107 	ands.w	r1, r2, #7
  408ff8:	f000 8115 	beq.w	409226 <_malloc_r+0x48e>
  408ffc:	f1c1 0008 	rsb	r0, r1, #8
  409000:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  409004:	4402      	add	r2, r0
  409006:	3108      	adds	r1, #8
  409008:	eb02 090b 	add.w	r9, r2, fp
  40900c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  409010:	eba1 0909 	sub.w	r9, r1, r9
  409014:	4649      	mov	r1, r9
  409016:	4628      	mov	r0, r5
  409018:	9301      	str	r3, [sp, #4]
  40901a:	9200      	str	r2, [sp, #0]
  40901c:	f000 fee8 	bl	409df0 <_sbrk_r>
  409020:	1c43      	adds	r3, r0, #1
  409022:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409026:	f000 8143 	beq.w	4092b0 <_malloc_r+0x518>
  40902a:	1a80      	subs	r0, r0, r2
  40902c:	4448      	add	r0, r9
  40902e:	f040 0001 	orr.w	r0, r0, #1
  409032:	6819      	ldr	r1, [r3, #0]
  409034:	60ba      	str	r2, [r7, #8]
  409036:	4449      	add	r1, r9
  409038:	42bc      	cmp	r4, r7
  40903a:	6050      	str	r0, [r2, #4]
  40903c:	6019      	str	r1, [r3, #0]
  40903e:	d017      	beq.n	409070 <_malloc_r+0x2d8>
  409040:	f1b8 0f0f 	cmp.w	r8, #15
  409044:	f240 80fb 	bls.w	40923e <_malloc_r+0x4a6>
  409048:	6860      	ldr	r0, [r4, #4]
  40904a:	f1a8 020c 	sub.w	r2, r8, #12
  40904e:	f022 0207 	bic.w	r2, r2, #7
  409052:	eb04 0e02 	add.w	lr, r4, r2
  409056:	f000 0001 	and.w	r0, r0, #1
  40905a:	f04f 0c05 	mov.w	ip, #5
  40905e:	4310      	orrs	r0, r2
  409060:	2a0f      	cmp	r2, #15
  409062:	6060      	str	r0, [r4, #4]
  409064:	f8ce c004 	str.w	ip, [lr, #4]
  409068:	f8ce c008 	str.w	ip, [lr, #8]
  40906c:	f200 8117 	bhi.w	40929e <_malloc_r+0x506>
  409070:	4b1d      	ldr	r3, [pc, #116]	; (4090e8 <_malloc_r+0x350>)
  409072:	68bc      	ldr	r4, [r7, #8]
  409074:	681a      	ldr	r2, [r3, #0]
  409076:	4291      	cmp	r1, r2
  409078:	bf88      	it	hi
  40907a:	6019      	strhi	r1, [r3, #0]
  40907c:	4b1b      	ldr	r3, [pc, #108]	; (4090ec <_malloc_r+0x354>)
  40907e:	681a      	ldr	r2, [r3, #0]
  409080:	4291      	cmp	r1, r2
  409082:	6862      	ldr	r2, [r4, #4]
  409084:	bf88      	it	hi
  409086:	6019      	strhi	r1, [r3, #0]
  409088:	f022 0203 	bic.w	r2, r2, #3
  40908c:	4296      	cmp	r6, r2
  40908e:	eba2 0306 	sub.w	r3, r2, r6
  409092:	d801      	bhi.n	409098 <_malloc_r+0x300>
  409094:	2b0f      	cmp	r3, #15
  409096:	dc04      	bgt.n	4090a2 <_malloc_r+0x30a>
  409098:	4628      	mov	r0, r5
  40909a:	f000 fa03 	bl	4094a4 <__malloc_unlock>
  40909e:	2400      	movs	r4, #0
  4090a0:	e740      	b.n	408f24 <_malloc_r+0x18c>
  4090a2:	19a2      	adds	r2, r4, r6
  4090a4:	f043 0301 	orr.w	r3, r3, #1
  4090a8:	f046 0601 	orr.w	r6, r6, #1
  4090ac:	6066      	str	r6, [r4, #4]
  4090ae:	4628      	mov	r0, r5
  4090b0:	60ba      	str	r2, [r7, #8]
  4090b2:	6053      	str	r3, [r2, #4]
  4090b4:	f000 f9f6 	bl	4094a4 <__malloc_unlock>
  4090b8:	3408      	adds	r4, #8
  4090ba:	4620      	mov	r0, r4
  4090bc:	b003      	add	sp, #12
  4090be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4090c2:	2b14      	cmp	r3, #20
  4090c4:	d971      	bls.n	4091aa <_malloc_r+0x412>
  4090c6:	2b54      	cmp	r3, #84	; 0x54
  4090c8:	f200 80a3 	bhi.w	409212 <_malloc_r+0x47a>
  4090cc:	0b33      	lsrs	r3, r6, #12
  4090ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4090d2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4090d6:	00c3      	lsls	r3, r0, #3
  4090d8:	e680      	b.n	408ddc <_malloc_r+0x44>
  4090da:	bf00      	nop
  4090dc:	20000728 	.word	0x20000728
  4090e0:	200017bc 	.word	0x200017bc
  4090e4:	2000178c 	.word	0x2000178c
  4090e8:	200017b4 	.word	0x200017b4
  4090ec:	200017b8 	.word	0x200017b8
  4090f0:	20000730 	.word	0x20000730
  4090f4:	20000b30 	.word	0x20000b30
  4090f8:	0a5a      	lsrs	r2, r3, #9
  4090fa:	2a04      	cmp	r2, #4
  4090fc:	d95b      	bls.n	4091b6 <_malloc_r+0x41e>
  4090fe:	2a14      	cmp	r2, #20
  409100:	f200 80ae 	bhi.w	409260 <_malloc_r+0x4c8>
  409104:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  409108:	00c9      	lsls	r1, r1, #3
  40910a:	325b      	adds	r2, #91	; 0x5b
  40910c:	eb07 0c01 	add.w	ip, r7, r1
  409110:	5879      	ldr	r1, [r7, r1]
  409112:	f1ac 0c08 	sub.w	ip, ip, #8
  409116:	458c      	cmp	ip, r1
  409118:	f000 8088 	beq.w	40922c <_malloc_r+0x494>
  40911c:	684a      	ldr	r2, [r1, #4]
  40911e:	f022 0203 	bic.w	r2, r2, #3
  409122:	4293      	cmp	r3, r2
  409124:	d273      	bcs.n	40920e <_malloc_r+0x476>
  409126:	6889      	ldr	r1, [r1, #8]
  409128:	458c      	cmp	ip, r1
  40912a:	d1f7      	bne.n	40911c <_malloc_r+0x384>
  40912c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  409130:	687b      	ldr	r3, [r7, #4]
  409132:	60e2      	str	r2, [r4, #12]
  409134:	f8c4 c008 	str.w	ip, [r4, #8]
  409138:	6094      	str	r4, [r2, #8]
  40913a:	f8cc 400c 	str.w	r4, [ip, #12]
  40913e:	e68f      	b.n	408e60 <_malloc_r+0xc8>
  409140:	19a1      	adds	r1, r4, r6
  409142:	f046 0c01 	orr.w	ip, r6, #1
  409146:	f042 0601 	orr.w	r6, r2, #1
  40914a:	f8c4 c004 	str.w	ip, [r4, #4]
  40914e:	4628      	mov	r0, r5
  409150:	6179      	str	r1, [r7, #20]
  409152:	6139      	str	r1, [r7, #16]
  409154:	f8c1 e00c 	str.w	lr, [r1, #12]
  409158:	f8c1 e008 	str.w	lr, [r1, #8]
  40915c:	604e      	str	r6, [r1, #4]
  40915e:	50e2      	str	r2, [r4, r3]
  409160:	f000 f9a0 	bl	4094a4 <__malloc_unlock>
  409164:	3408      	adds	r4, #8
  409166:	e6dd      	b.n	408f24 <_malloc_r+0x18c>
  409168:	687b      	ldr	r3, [r7, #4]
  40916a:	e679      	b.n	408e60 <_malloc_r+0xc8>
  40916c:	f108 0801 	add.w	r8, r8, #1
  409170:	f018 0f03 	tst.w	r8, #3
  409174:	f10c 0c08 	add.w	ip, ip, #8
  409178:	f47f ae85 	bne.w	408e86 <_malloc_r+0xee>
  40917c:	e02d      	b.n	4091da <_malloc_r+0x442>
  40917e:	68dc      	ldr	r4, [r3, #12]
  409180:	42a3      	cmp	r3, r4
  409182:	bf08      	it	eq
  409184:	3002      	addeq	r0, #2
  409186:	f43f ae3e 	beq.w	408e06 <_malloc_r+0x6e>
  40918a:	e6bb      	b.n	408f04 <_malloc_r+0x16c>
  40918c:	4419      	add	r1, r3
  40918e:	461c      	mov	r4, r3
  409190:	684a      	ldr	r2, [r1, #4]
  409192:	68db      	ldr	r3, [r3, #12]
  409194:	f854 6f08 	ldr.w	r6, [r4, #8]!
  409198:	f042 0201 	orr.w	r2, r2, #1
  40919c:	604a      	str	r2, [r1, #4]
  40919e:	4628      	mov	r0, r5
  4091a0:	60f3      	str	r3, [r6, #12]
  4091a2:	609e      	str	r6, [r3, #8]
  4091a4:	f000 f97e 	bl	4094a4 <__malloc_unlock>
  4091a8:	e6bc      	b.n	408f24 <_malloc_r+0x18c>
  4091aa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4091ae:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4091b2:	00c3      	lsls	r3, r0, #3
  4091b4:	e612      	b.n	408ddc <_malloc_r+0x44>
  4091b6:	099a      	lsrs	r2, r3, #6
  4091b8:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4091bc:	00c9      	lsls	r1, r1, #3
  4091be:	3238      	adds	r2, #56	; 0x38
  4091c0:	e7a4      	b.n	40910c <_malloc_r+0x374>
  4091c2:	42bc      	cmp	r4, r7
  4091c4:	d054      	beq.n	409270 <_malloc_r+0x4d8>
  4091c6:	68bc      	ldr	r4, [r7, #8]
  4091c8:	6862      	ldr	r2, [r4, #4]
  4091ca:	f022 0203 	bic.w	r2, r2, #3
  4091ce:	e75d      	b.n	40908c <_malloc_r+0x2f4>
  4091d0:	f859 3908 	ldr.w	r3, [r9], #-8
  4091d4:	4599      	cmp	r9, r3
  4091d6:	f040 8086 	bne.w	4092e6 <_malloc_r+0x54e>
  4091da:	f010 0f03 	tst.w	r0, #3
  4091de:	f100 30ff 	add.w	r0, r0, #4294967295
  4091e2:	d1f5      	bne.n	4091d0 <_malloc_r+0x438>
  4091e4:	687b      	ldr	r3, [r7, #4]
  4091e6:	ea23 0304 	bic.w	r3, r3, r4
  4091ea:	607b      	str	r3, [r7, #4]
  4091ec:	0064      	lsls	r4, r4, #1
  4091ee:	429c      	cmp	r4, r3
  4091f0:	f63f aec7 	bhi.w	408f82 <_malloc_r+0x1ea>
  4091f4:	2c00      	cmp	r4, #0
  4091f6:	f43f aec4 	beq.w	408f82 <_malloc_r+0x1ea>
  4091fa:	421c      	tst	r4, r3
  4091fc:	4640      	mov	r0, r8
  4091fe:	f47f ae3e 	bne.w	408e7e <_malloc_r+0xe6>
  409202:	0064      	lsls	r4, r4, #1
  409204:	421c      	tst	r4, r3
  409206:	f100 0004 	add.w	r0, r0, #4
  40920a:	d0fa      	beq.n	409202 <_malloc_r+0x46a>
  40920c:	e637      	b.n	408e7e <_malloc_r+0xe6>
  40920e:	468c      	mov	ip, r1
  409210:	e78c      	b.n	40912c <_malloc_r+0x394>
  409212:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  409216:	d815      	bhi.n	409244 <_malloc_r+0x4ac>
  409218:	0bf3      	lsrs	r3, r6, #15
  40921a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40921e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  409222:	00c3      	lsls	r3, r0, #3
  409224:	e5da      	b.n	408ddc <_malloc_r+0x44>
  409226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40922a:	e6ed      	b.n	409008 <_malloc_r+0x270>
  40922c:	687b      	ldr	r3, [r7, #4]
  40922e:	1092      	asrs	r2, r2, #2
  409230:	2101      	movs	r1, #1
  409232:	fa01 f202 	lsl.w	r2, r1, r2
  409236:	4313      	orrs	r3, r2
  409238:	607b      	str	r3, [r7, #4]
  40923a:	4662      	mov	r2, ip
  40923c:	e779      	b.n	409132 <_malloc_r+0x39a>
  40923e:	2301      	movs	r3, #1
  409240:	6053      	str	r3, [r2, #4]
  409242:	e729      	b.n	409098 <_malloc_r+0x300>
  409244:	f240 5254 	movw	r2, #1364	; 0x554
  409248:	4293      	cmp	r3, r2
  40924a:	d822      	bhi.n	409292 <_malloc_r+0x4fa>
  40924c:	0cb3      	lsrs	r3, r6, #18
  40924e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  409252:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  409256:	00c3      	lsls	r3, r0, #3
  409258:	e5c0      	b.n	408ddc <_malloc_r+0x44>
  40925a:	f103 0b10 	add.w	fp, r3, #16
  40925e:	e6ae      	b.n	408fbe <_malloc_r+0x226>
  409260:	2a54      	cmp	r2, #84	; 0x54
  409262:	d829      	bhi.n	4092b8 <_malloc_r+0x520>
  409264:	0b1a      	lsrs	r2, r3, #12
  409266:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40926a:	00c9      	lsls	r1, r1, #3
  40926c:	326e      	adds	r2, #110	; 0x6e
  40926e:	e74d      	b.n	40910c <_malloc_r+0x374>
  409270:	4b20      	ldr	r3, [pc, #128]	; (4092f4 <_malloc_r+0x55c>)
  409272:	6819      	ldr	r1, [r3, #0]
  409274:	4459      	add	r1, fp
  409276:	6019      	str	r1, [r3, #0]
  409278:	e6b2      	b.n	408fe0 <_malloc_r+0x248>
  40927a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40927e:	2800      	cmp	r0, #0
  409280:	f47f aeae 	bne.w	408fe0 <_malloc_r+0x248>
  409284:	eb08 030b 	add.w	r3, r8, fp
  409288:	68ba      	ldr	r2, [r7, #8]
  40928a:	f043 0301 	orr.w	r3, r3, #1
  40928e:	6053      	str	r3, [r2, #4]
  409290:	e6ee      	b.n	409070 <_malloc_r+0x2d8>
  409292:	207f      	movs	r0, #127	; 0x7f
  409294:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  409298:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40929c:	e59e      	b.n	408ddc <_malloc_r+0x44>
  40929e:	f104 0108 	add.w	r1, r4, #8
  4092a2:	4628      	mov	r0, r5
  4092a4:	9300      	str	r3, [sp, #0]
  4092a6:	f7ff fc7f 	bl	408ba8 <_free_r>
  4092aa:	9b00      	ldr	r3, [sp, #0]
  4092ac:	6819      	ldr	r1, [r3, #0]
  4092ae:	e6df      	b.n	409070 <_malloc_r+0x2d8>
  4092b0:	2001      	movs	r0, #1
  4092b2:	f04f 0900 	mov.w	r9, #0
  4092b6:	e6bc      	b.n	409032 <_malloc_r+0x29a>
  4092b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4092bc:	d805      	bhi.n	4092ca <_malloc_r+0x532>
  4092be:	0bda      	lsrs	r2, r3, #15
  4092c0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4092c4:	00c9      	lsls	r1, r1, #3
  4092c6:	3277      	adds	r2, #119	; 0x77
  4092c8:	e720      	b.n	40910c <_malloc_r+0x374>
  4092ca:	f240 5154 	movw	r1, #1364	; 0x554
  4092ce:	428a      	cmp	r2, r1
  4092d0:	d805      	bhi.n	4092de <_malloc_r+0x546>
  4092d2:	0c9a      	lsrs	r2, r3, #18
  4092d4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4092d8:	00c9      	lsls	r1, r1, #3
  4092da:	327c      	adds	r2, #124	; 0x7c
  4092dc:	e716      	b.n	40910c <_malloc_r+0x374>
  4092de:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4092e2:	227e      	movs	r2, #126	; 0x7e
  4092e4:	e712      	b.n	40910c <_malloc_r+0x374>
  4092e6:	687b      	ldr	r3, [r7, #4]
  4092e8:	e780      	b.n	4091ec <_malloc_r+0x454>
  4092ea:	08f0      	lsrs	r0, r6, #3
  4092ec:	f106 0308 	add.w	r3, r6, #8
  4092f0:	e600      	b.n	408ef4 <_malloc_r+0x15c>
  4092f2:	bf00      	nop
  4092f4:	2000178c 	.word	0x2000178c

004092f8 <__ascii_mbtowc>:
  4092f8:	b082      	sub	sp, #8
  4092fa:	b149      	cbz	r1, 409310 <__ascii_mbtowc+0x18>
  4092fc:	b15a      	cbz	r2, 409316 <__ascii_mbtowc+0x1e>
  4092fe:	b16b      	cbz	r3, 40931c <__ascii_mbtowc+0x24>
  409300:	7813      	ldrb	r3, [r2, #0]
  409302:	600b      	str	r3, [r1, #0]
  409304:	7812      	ldrb	r2, [r2, #0]
  409306:	1c10      	adds	r0, r2, #0
  409308:	bf18      	it	ne
  40930a:	2001      	movne	r0, #1
  40930c:	b002      	add	sp, #8
  40930e:	4770      	bx	lr
  409310:	a901      	add	r1, sp, #4
  409312:	2a00      	cmp	r2, #0
  409314:	d1f3      	bne.n	4092fe <__ascii_mbtowc+0x6>
  409316:	4610      	mov	r0, r2
  409318:	b002      	add	sp, #8
  40931a:	4770      	bx	lr
  40931c:	f06f 0001 	mvn.w	r0, #1
  409320:	e7f4      	b.n	40930c <__ascii_mbtowc+0x14>
  409322:	bf00      	nop
	...

00409330 <memchr>:
  409330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  409334:	2a10      	cmp	r2, #16
  409336:	db2b      	blt.n	409390 <memchr+0x60>
  409338:	f010 0f07 	tst.w	r0, #7
  40933c:	d008      	beq.n	409350 <memchr+0x20>
  40933e:	f810 3b01 	ldrb.w	r3, [r0], #1
  409342:	3a01      	subs	r2, #1
  409344:	428b      	cmp	r3, r1
  409346:	d02d      	beq.n	4093a4 <memchr+0x74>
  409348:	f010 0f07 	tst.w	r0, #7
  40934c:	b342      	cbz	r2, 4093a0 <memchr+0x70>
  40934e:	d1f6      	bne.n	40933e <memchr+0xe>
  409350:	b4f0      	push	{r4, r5, r6, r7}
  409352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  409356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40935a:	f022 0407 	bic.w	r4, r2, #7
  40935e:	f07f 0700 	mvns.w	r7, #0
  409362:	2300      	movs	r3, #0
  409364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  409368:	3c08      	subs	r4, #8
  40936a:	ea85 0501 	eor.w	r5, r5, r1
  40936e:	ea86 0601 	eor.w	r6, r6, r1
  409372:	fa85 f547 	uadd8	r5, r5, r7
  409376:	faa3 f587 	sel	r5, r3, r7
  40937a:	fa86 f647 	uadd8	r6, r6, r7
  40937e:	faa5 f687 	sel	r6, r5, r7
  409382:	b98e      	cbnz	r6, 4093a8 <memchr+0x78>
  409384:	d1ee      	bne.n	409364 <memchr+0x34>
  409386:	bcf0      	pop	{r4, r5, r6, r7}
  409388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40938c:	f002 0207 	and.w	r2, r2, #7
  409390:	b132      	cbz	r2, 4093a0 <memchr+0x70>
  409392:	f810 3b01 	ldrb.w	r3, [r0], #1
  409396:	3a01      	subs	r2, #1
  409398:	ea83 0301 	eor.w	r3, r3, r1
  40939c:	b113      	cbz	r3, 4093a4 <memchr+0x74>
  40939e:	d1f8      	bne.n	409392 <memchr+0x62>
  4093a0:	2000      	movs	r0, #0
  4093a2:	4770      	bx	lr
  4093a4:	3801      	subs	r0, #1
  4093a6:	4770      	bx	lr
  4093a8:	2d00      	cmp	r5, #0
  4093aa:	bf06      	itte	eq
  4093ac:	4635      	moveq	r5, r6
  4093ae:	3803      	subeq	r0, #3
  4093b0:	3807      	subne	r0, #7
  4093b2:	f015 0f01 	tst.w	r5, #1
  4093b6:	d107      	bne.n	4093c8 <memchr+0x98>
  4093b8:	3001      	adds	r0, #1
  4093ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4093be:	bf02      	ittt	eq
  4093c0:	3001      	addeq	r0, #1
  4093c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4093c6:	3001      	addeq	r0, #1
  4093c8:	bcf0      	pop	{r4, r5, r6, r7}
  4093ca:	3801      	subs	r0, #1
  4093cc:	4770      	bx	lr
  4093ce:	bf00      	nop

004093d0 <memmove>:
  4093d0:	4288      	cmp	r0, r1
  4093d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4093d4:	d90d      	bls.n	4093f2 <memmove+0x22>
  4093d6:	188b      	adds	r3, r1, r2
  4093d8:	4298      	cmp	r0, r3
  4093da:	d20a      	bcs.n	4093f2 <memmove+0x22>
  4093dc:	1884      	adds	r4, r0, r2
  4093de:	2a00      	cmp	r2, #0
  4093e0:	d051      	beq.n	409486 <memmove+0xb6>
  4093e2:	4622      	mov	r2, r4
  4093e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4093e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4093ec:	4299      	cmp	r1, r3
  4093ee:	d1f9      	bne.n	4093e4 <memmove+0x14>
  4093f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4093f2:	2a0f      	cmp	r2, #15
  4093f4:	d948      	bls.n	409488 <memmove+0xb8>
  4093f6:	ea41 0300 	orr.w	r3, r1, r0
  4093fa:	079b      	lsls	r3, r3, #30
  4093fc:	d146      	bne.n	40948c <memmove+0xbc>
  4093fe:	f100 0410 	add.w	r4, r0, #16
  409402:	f101 0310 	add.w	r3, r1, #16
  409406:	4615      	mov	r5, r2
  409408:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40940c:	f844 6c10 	str.w	r6, [r4, #-16]
  409410:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  409414:	f844 6c0c 	str.w	r6, [r4, #-12]
  409418:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40941c:	f844 6c08 	str.w	r6, [r4, #-8]
  409420:	3d10      	subs	r5, #16
  409422:	f853 6c04 	ldr.w	r6, [r3, #-4]
  409426:	f844 6c04 	str.w	r6, [r4, #-4]
  40942a:	2d0f      	cmp	r5, #15
  40942c:	f103 0310 	add.w	r3, r3, #16
  409430:	f104 0410 	add.w	r4, r4, #16
  409434:	d8e8      	bhi.n	409408 <memmove+0x38>
  409436:	f1a2 0310 	sub.w	r3, r2, #16
  40943a:	f023 030f 	bic.w	r3, r3, #15
  40943e:	f002 0e0f 	and.w	lr, r2, #15
  409442:	3310      	adds	r3, #16
  409444:	f1be 0f03 	cmp.w	lr, #3
  409448:	4419      	add	r1, r3
  40944a:	4403      	add	r3, r0
  40944c:	d921      	bls.n	409492 <memmove+0xc2>
  40944e:	1f1e      	subs	r6, r3, #4
  409450:	460d      	mov	r5, r1
  409452:	4674      	mov	r4, lr
  409454:	3c04      	subs	r4, #4
  409456:	f855 7b04 	ldr.w	r7, [r5], #4
  40945a:	f846 7f04 	str.w	r7, [r6, #4]!
  40945e:	2c03      	cmp	r4, #3
  409460:	d8f8      	bhi.n	409454 <memmove+0x84>
  409462:	f1ae 0404 	sub.w	r4, lr, #4
  409466:	f024 0403 	bic.w	r4, r4, #3
  40946a:	3404      	adds	r4, #4
  40946c:	4421      	add	r1, r4
  40946e:	4423      	add	r3, r4
  409470:	f002 0203 	and.w	r2, r2, #3
  409474:	b162      	cbz	r2, 409490 <memmove+0xc0>
  409476:	3b01      	subs	r3, #1
  409478:	440a      	add	r2, r1
  40947a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40947e:	f803 4f01 	strb.w	r4, [r3, #1]!
  409482:	428a      	cmp	r2, r1
  409484:	d1f9      	bne.n	40947a <memmove+0xaa>
  409486:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409488:	4603      	mov	r3, r0
  40948a:	e7f3      	b.n	409474 <memmove+0xa4>
  40948c:	4603      	mov	r3, r0
  40948e:	e7f2      	b.n	409476 <memmove+0xa6>
  409490:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409492:	4672      	mov	r2, lr
  409494:	e7ee      	b.n	409474 <memmove+0xa4>
  409496:	bf00      	nop

00409498 <__malloc_lock>:
  409498:	4801      	ldr	r0, [pc, #4]	; (4094a0 <__malloc_lock+0x8>)
  40949a:	f7ff bc79 	b.w	408d90 <__retarget_lock_acquire_recursive>
  40949e:	bf00      	nop
  4094a0:	20004608 	.word	0x20004608

004094a4 <__malloc_unlock>:
  4094a4:	4801      	ldr	r0, [pc, #4]	; (4094ac <__malloc_unlock+0x8>)
  4094a6:	f7ff bc75 	b.w	408d94 <__retarget_lock_release_recursive>
  4094aa:	bf00      	nop
  4094ac:	20004608 	.word	0x20004608

004094b0 <_Balloc>:
  4094b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4094b2:	b570      	push	{r4, r5, r6, lr}
  4094b4:	4605      	mov	r5, r0
  4094b6:	460c      	mov	r4, r1
  4094b8:	b14b      	cbz	r3, 4094ce <_Balloc+0x1e>
  4094ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4094be:	b180      	cbz	r0, 4094e2 <_Balloc+0x32>
  4094c0:	6802      	ldr	r2, [r0, #0]
  4094c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4094c6:	2300      	movs	r3, #0
  4094c8:	6103      	str	r3, [r0, #16]
  4094ca:	60c3      	str	r3, [r0, #12]
  4094cc:	bd70      	pop	{r4, r5, r6, pc}
  4094ce:	2221      	movs	r2, #33	; 0x21
  4094d0:	2104      	movs	r1, #4
  4094d2:	f000 fd8d 	bl	409ff0 <_calloc_r>
  4094d6:	64e8      	str	r0, [r5, #76]	; 0x4c
  4094d8:	4603      	mov	r3, r0
  4094da:	2800      	cmp	r0, #0
  4094dc:	d1ed      	bne.n	4094ba <_Balloc+0xa>
  4094de:	2000      	movs	r0, #0
  4094e0:	bd70      	pop	{r4, r5, r6, pc}
  4094e2:	2101      	movs	r1, #1
  4094e4:	fa01 f604 	lsl.w	r6, r1, r4
  4094e8:	1d72      	adds	r2, r6, #5
  4094ea:	4628      	mov	r0, r5
  4094ec:	0092      	lsls	r2, r2, #2
  4094ee:	f000 fd7f 	bl	409ff0 <_calloc_r>
  4094f2:	2800      	cmp	r0, #0
  4094f4:	d0f3      	beq.n	4094de <_Balloc+0x2e>
  4094f6:	6044      	str	r4, [r0, #4]
  4094f8:	6086      	str	r6, [r0, #8]
  4094fa:	e7e4      	b.n	4094c6 <_Balloc+0x16>

004094fc <_Bfree>:
  4094fc:	b131      	cbz	r1, 40950c <_Bfree+0x10>
  4094fe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409500:	684a      	ldr	r2, [r1, #4]
  409502:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  409506:	6008      	str	r0, [r1, #0]
  409508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40950c:	4770      	bx	lr
  40950e:	bf00      	nop

00409510 <__multadd>:
  409510:	b5f0      	push	{r4, r5, r6, r7, lr}
  409512:	690c      	ldr	r4, [r1, #16]
  409514:	b083      	sub	sp, #12
  409516:	460d      	mov	r5, r1
  409518:	4606      	mov	r6, r0
  40951a:	f101 0e14 	add.w	lr, r1, #20
  40951e:	2700      	movs	r7, #0
  409520:	f8de 0000 	ldr.w	r0, [lr]
  409524:	b281      	uxth	r1, r0
  409526:	fb02 3301 	mla	r3, r2, r1, r3
  40952a:	0c01      	lsrs	r1, r0, #16
  40952c:	0c18      	lsrs	r0, r3, #16
  40952e:	fb02 0101 	mla	r1, r2, r1, r0
  409532:	b29b      	uxth	r3, r3
  409534:	3701      	adds	r7, #1
  409536:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40953a:	42bc      	cmp	r4, r7
  40953c:	f84e 3b04 	str.w	r3, [lr], #4
  409540:	ea4f 4311 	mov.w	r3, r1, lsr #16
  409544:	dcec      	bgt.n	409520 <__multadd+0x10>
  409546:	b13b      	cbz	r3, 409558 <__multadd+0x48>
  409548:	68aa      	ldr	r2, [r5, #8]
  40954a:	4294      	cmp	r4, r2
  40954c:	da07      	bge.n	40955e <__multadd+0x4e>
  40954e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  409552:	3401      	adds	r4, #1
  409554:	6153      	str	r3, [r2, #20]
  409556:	612c      	str	r4, [r5, #16]
  409558:	4628      	mov	r0, r5
  40955a:	b003      	add	sp, #12
  40955c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40955e:	6869      	ldr	r1, [r5, #4]
  409560:	9301      	str	r3, [sp, #4]
  409562:	3101      	adds	r1, #1
  409564:	4630      	mov	r0, r6
  409566:	f7ff ffa3 	bl	4094b0 <_Balloc>
  40956a:	692a      	ldr	r2, [r5, #16]
  40956c:	3202      	adds	r2, #2
  40956e:	f105 010c 	add.w	r1, r5, #12
  409572:	4607      	mov	r7, r0
  409574:	0092      	lsls	r2, r2, #2
  409576:	300c      	adds	r0, #12
  409578:	f7fc ff34 	bl	4063e4 <memcpy>
  40957c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40957e:	6869      	ldr	r1, [r5, #4]
  409580:	9b01      	ldr	r3, [sp, #4]
  409582:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  409586:	6028      	str	r0, [r5, #0]
  409588:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40958c:	463d      	mov	r5, r7
  40958e:	e7de      	b.n	40954e <__multadd+0x3e>

00409590 <__hi0bits>:
  409590:	0c02      	lsrs	r2, r0, #16
  409592:	0412      	lsls	r2, r2, #16
  409594:	4603      	mov	r3, r0
  409596:	b9b2      	cbnz	r2, 4095c6 <__hi0bits+0x36>
  409598:	0403      	lsls	r3, r0, #16
  40959a:	2010      	movs	r0, #16
  40959c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4095a0:	bf04      	itt	eq
  4095a2:	021b      	lsleq	r3, r3, #8
  4095a4:	3008      	addeq	r0, #8
  4095a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4095aa:	bf04      	itt	eq
  4095ac:	011b      	lsleq	r3, r3, #4
  4095ae:	3004      	addeq	r0, #4
  4095b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4095b4:	bf04      	itt	eq
  4095b6:	009b      	lsleq	r3, r3, #2
  4095b8:	3002      	addeq	r0, #2
  4095ba:	2b00      	cmp	r3, #0
  4095bc:	db02      	blt.n	4095c4 <__hi0bits+0x34>
  4095be:	005b      	lsls	r3, r3, #1
  4095c0:	d403      	bmi.n	4095ca <__hi0bits+0x3a>
  4095c2:	2020      	movs	r0, #32
  4095c4:	4770      	bx	lr
  4095c6:	2000      	movs	r0, #0
  4095c8:	e7e8      	b.n	40959c <__hi0bits+0xc>
  4095ca:	3001      	adds	r0, #1
  4095cc:	4770      	bx	lr
  4095ce:	bf00      	nop

004095d0 <__lo0bits>:
  4095d0:	6803      	ldr	r3, [r0, #0]
  4095d2:	f013 0207 	ands.w	r2, r3, #7
  4095d6:	4601      	mov	r1, r0
  4095d8:	d007      	beq.n	4095ea <__lo0bits+0x1a>
  4095da:	07da      	lsls	r2, r3, #31
  4095dc:	d421      	bmi.n	409622 <__lo0bits+0x52>
  4095de:	0798      	lsls	r0, r3, #30
  4095e0:	d421      	bmi.n	409626 <__lo0bits+0x56>
  4095e2:	089b      	lsrs	r3, r3, #2
  4095e4:	600b      	str	r3, [r1, #0]
  4095e6:	2002      	movs	r0, #2
  4095e8:	4770      	bx	lr
  4095ea:	b298      	uxth	r0, r3
  4095ec:	b198      	cbz	r0, 409616 <__lo0bits+0x46>
  4095ee:	4610      	mov	r0, r2
  4095f0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4095f4:	bf04      	itt	eq
  4095f6:	0a1b      	lsreq	r3, r3, #8
  4095f8:	3008      	addeq	r0, #8
  4095fa:	071a      	lsls	r2, r3, #28
  4095fc:	bf04      	itt	eq
  4095fe:	091b      	lsreq	r3, r3, #4
  409600:	3004      	addeq	r0, #4
  409602:	079a      	lsls	r2, r3, #30
  409604:	bf04      	itt	eq
  409606:	089b      	lsreq	r3, r3, #2
  409608:	3002      	addeq	r0, #2
  40960a:	07da      	lsls	r2, r3, #31
  40960c:	d407      	bmi.n	40961e <__lo0bits+0x4e>
  40960e:	085b      	lsrs	r3, r3, #1
  409610:	d104      	bne.n	40961c <__lo0bits+0x4c>
  409612:	2020      	movs	r0, #32
  409614:	4770      	bx	lr
  409616:	0c1b      	lsrs	r3, r3, #16
  409618:	2010      	movs	r0, #16
  40961a:	e7e9      	b.n	4095f0 <__lo0bits+0x20>
  40961c:	3001      	adds	r0, #1
  40961e:	600b      	str	r3, [r1, #0]
  409620:	4770      	bx	lr
  409622:	2000      	movs	r0, #0
  409624:	4770      	bx	lr
  409626:	085b      	lsrs	r3, r3, #1
  409628:	600b      	str	r3, [r1, #0]
  40962a:	2001      	movs	r0, #1
  40962c:	4770      	bx	lr
  40962e:	bf00      	nop

00409630 <__i2b>:
  409630:	b510      	push	{r4, lr}
  409632:	460c      	mov	r4, r1
  409634:	2101      	movs	r1, #1
  409636:	f7ff ff3b 	bl	4094b0 <_Balloc>
  40963a:	2201      	movs	r2, #1
  40963c:	6144      	str	r4, [r0, #20]
  40963e:	6102      	str	r2, [r0, #16]
  409640:	bd10      	pop	{r4, pc}
  409642:	bf00      	nop

00409644 <__multiply>:
  409644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409648:	690c      	ldr	r4, [r1, #16]
  40964a:	6915      	ldr	r5, [r2, #16]
  40964c:	42ac      	cmp	r4, r5
  40964e:	b083      	sub	sp, #12
  409650:	468b      	mov	fp, r1
  409652:	4616      	mov	r6, r2
  409654:	da04      	bge.n	409660 <__multiply+0x1c>
  409656:	4622      	mov	r2, r4
  409658:	46b3      	mov	fp, r6
  40965a:	462c      	mov	r4, r5
  40965c:	460e      	mov	r6, r1
  40965e:	4615      	mov	r5, r2
  409660:	f8db 3008 	ldr.w	r3, [fp, #8]
  409664:	f8db 1004 	ldr.w	r1, [fp, #4]
  409668:	eb04 0805 	add.w	r8, r4, r5
  40966c:	4598      	cmp	r8, r3
  40966e:	bfc8      	it	gt
  409670:	3101      	addgt	r1, #1
  409672:	f7ff ff1d 	bl	4094b0 <_Balloc>
  409676:	f100 0914 	add.w	r9, r0, #20
  40967a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40967e:	45d1      	cmp	r9, sl
  409680:	9000      	str	r0, [sp, #0]
  409682:	d205      	bcs.n	409690 <__multiply+0x4c>
  409684:	464b      	mov	r3, r9
  409686:	2100      	movs	r1, #0
  409688:	f843 1b04 	str.w	r1, [r3], #4
  40968c:	459a      	cmp	sl, r3
  40968e:	d8fb      	bhi.n	409688 <__multiply+0x44>
  409690:	f106 0c14 	add.w	ip, r6, #20
  409694:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  409698:	f10b 0b14 	add.w	fp, fp, #20
  40969c:	459c      	cmp	ip, r3
  40969e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4096a2:	d24c      	bcs.n	40973e <__multiply+0xfa>
  4096a4:	f8cd a004 	str.w	sl, [sp, #4]
  4096a8:	469a      	mov	sl, r3
  4096aa:	f8dc 5000 	ldr.w	r5, [ip]
  4096ae:	b2af      	uxth	r7, r5
  4096b0:	b1ef      	cbz	r7, 4096ee <__multiply+0xaa>
  4096b2:	2100      	movs	r1, #0
  4096b4:	464d      	mov	r5, r9
  4096b6:	465e      	mov	r6, fp
  4096b8:	460c      	mov	r4, r1
  4096ba:	f856 2b04 	ldr.w	r2, [r6], #4
  4096be:	6828      	ldr	r0, [r5, #0]
  4096c0:	b293      	uxth	r3, r2
  4096c2:	b281      	uxth	r1, r0
  4096c4:	fb07 1303 	mla	r3, r7, r3, r1
  4096c8:	0c12      	lsrs	r2, r2, #16
  4096ca:	0c01      	lsrs	r1, r0, #16
  4096cc:	4423      	add	r3, r4
  4096ce:	fb07 1102 	mla	r1, r7, r2, r1
  4096d2:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4096d6:	b29b      	uxth	r3, r3
  4096d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4096dc:	45b6      	cmp	lr, r6
  4096de:	f845 3b04 	str.w	r3, [r5], #4
  4096e2:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4096e6:	d8e8      	bhi.n	4096ba <__multiply+0x76>
  4096e8:	602c      	str	r4, [r5, #0]
  4096ea:	f8dc 5000 	ldr.w	r5, [ip]
  4096ee:	0c2d      	lsrs	r5, r5, #16
  4096f0:	d01d      	beq.n	40972e <__multiply+0xea>
  4096f2:	f8d9 3000 	ldr.w	r3, [r9]
  4096f6:	4648      	mov	r0, r9
  4096f8:	461c      	mov	r4, r3
  4096fa:	4659      	mov	r1, fp
  4096fc:	2200      	movs	r2, #0
  4096fe:	880e      	ldrh	r6, [r1, #0]
  409700:	0c24      	lsrs	r4, r4, #16
  409702:	fb05 4406 	mla	r4, r5, r6, r4
  409706:	4422      	add	r2, r4
  409708:	b29b      	uxth	r3, r3
  40970a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40970e:	f840 3b04 	str.w	r3, [r0], #4
  409712:	f851 3b04 	ldr.w	r3, [r1], #4
  409716:	6804      	ldr	r4, [r0, #0]
  409718:	0c1b      	lsrs	r3, r3, #16
  40971a:	b2a6      	uxth	r6, r4
  40971c:	fb05 6303 	mla	r3, r5, r3, r6
  409720:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  409724:	458e      	cmp	lr, r1
  409726:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40972a:	d8e8      	bhi.n	4096fe <__multiply+0xba>
  40972c:	6003      	str	r3, [r0, #0]
  40972e:	f10c 0c04 	add.w	ip, ip, #4
  409732:	45e2      	cmp	sl, ip
  409734:	f109 0904 	add.w	r9, r9, #4
  409738:	d8b7      	bhi.n	4096aa <__multiply+0x66>
  40973a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40973e:	f1b8 0f00 	cmp.w	r8, #0
  409742:	dd0b      	ble.n	40975c <__multiply+0x118>
  409744:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  409748:	f1aa 0a04 	sub.w	sl, sl, #4
  40974c:	b11b      	cbz	r3, 409756 <__multiply+0x112>
  40974e:	e005      	b.n	40975c <__multiply+0x118>
  409750:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  409754:	b913      	cbnz	r3, 40975c <__multiply+0x118>
  409756:	f1b8 0801 	subs.w	r8, r8, #1
  40975a:	d1f9      	bne.n	409750 <__multiply+0x10c>
  40975c:	9800      	ldr	r0, [sp, #0]
  40975e:	f8c0 8010 	str.w	r8, [r0, #16]
  409762:	b003      	add	sp, #12
  409764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409768 <__pow5mult>:
  409768:	f012 0303 	ands.w	r3, r2, #3
  40976c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409770:	4614      	mov	r4, r2
  409772:	4607      	mov	r7, r0
  409774:	d12e      	bne.n	4097d4 <__pow5mult+0x6c>
  409776:	460d      	mov	r5, r1
  409778:	10a4      	asrs	r4, r4, #2
  40977a:	d01c      	beq.n	4097b6 <__pow5mult+0x4e>
  40977c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40977e:	b396      	cbz	r6, 4097e6 <__pow5mult+0x7e>
  409780:	07e3      	lsls	r3, r4, #31
  409782:	f04f 0800 	mov.w	r8, #0
  409786:	d406      	bmi.n	409796 <__pow5mult+0x2e>
  409788:	1064      	asrs	r4, r4, #1
  40978a:	d014      	beq.n	4097b6 <__pow5mult+0x4e>
  40978c:	6830      	ldr	r0, [r6, #0]
  40978e:	b1a8      	cbz	r0, 4097bc <__pow5mult+0x54>
  409790:	4606      	mov	r6, r0
  409792:	07e3      	lsls	r3, r4, #31
  409794:	d5f8      	bpl.n	409788 <__pow5mult+0x20>
  409796:	4632      	mov	r2, r6
  409798:	4629      	mov	r1, r5
  40979a:	4638      	mov	r0, r7
  40979c:	f7ff ff52 	bl	409644 <__multiply>
  4097a0:	b1b5      	cbz	r5, 4097d0 <__pow5mult+0x68>
  4097a2:	686a      	ldr	r2, [r5, #4]
  4097a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4097a6:	1064      	asrs	r4, r4, #1
  4097a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4097ac:	6029      	str	r1, [r5, #0]
  4097ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4097b2:	4605      	mov	r5, r0
  4097b4:	d1ea      	bne.n	40978c <__pow5mult+0x24>
  4097b6:	4628      	mov	r0, r5
  4097b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4097bc:	4632      	mov	r2, r6
  4097be:	4631      	mov	r1, r6
  4097c0:	4638      	mov	r0, r7
  4097c2:	f7ff ff3f 	bl	409644 <__multiply>
  4097c6:	6030      	str	r0, [r6, #0]
  4097c8:	f8c0 8000 	str.w	r8, [r0]
  4097cc:	4606      	mov	r6, r0
  4097ce:	e7e0      	b.n	409792 <__pow5mult+0x2a>
  4097d0:	4605      	mov	r5, r0
  4097d2:	e7d9      	b.n	409788 <__pow5mult+0x20>
  4097d4:	1e5a      	subs	r2, r3, #1
  4097d6:	4d0b      	ldr	r5, [pc, #44]	; (409804 <__pow5mult+0x9c>)
  4097d8:	2300      	movs	r3, #0
  4097da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4097de:	f7ff fe97 	bl	409510 <__multadd>
  4097e2:	4605      	mov	r5, r0
  4097e4:	e7c8      	b.n	409778 <__pow5mult+0x10>
  4097e6:	2101      	movs	r1, #1
  4097e8:	4638      	mov	r0, r7
  4097ea:	f7ff fe61 	bl	4094b0 <_Balloc>
  4097ee:	f240 2171 	movw	r1, #625	; 0x271
  4097f2:	2201      	movs	r2, #1
  4097f4:	2300      	movs	r3, #0
  4097f6:	6141      	str	r1, [r0, #20]
  4097f8:	6102      	str	r2, [r0, #16]
  4097fa:	4606      	mov	r6, r0
  4097fc:	64b8      	str	r0, [r7, #72]	; 0x48
  4097fe:	6003      	str	r3, [r0, #0]
  409800:	e7be      	b.n	409780 <__pow5mult+0x18>
  409802:	bf00      	nop
  409804:	0040a9c0 	.word	0x0040a9c0

00409808 <__lshift>:
  409808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40980c:	4691      	mov	r9, r2
  40980e:	690a      	ldr	r2, [r1, #16]
  409810:	688b      	ldr	r3, [r1, #8]
  409812:	ea4f 1469 	mov.w	r4, r9, asr #5
  409816:	eb04 0802 	add.w	r8, r4, r2
  40981a:	f108 0501 	add.w	r5, r8, #1
  40981e:	429d      	cmp	r5, r3
  409820:	460e      	mov	r6, r1
  409822:	4607      	mov	r7, r0
  409824:	6849      	ldr	r1, [r1, #4]
  409826:	dd04      	ble.n	409832 <__lshift+0x2a>
  409828:	005b      	lsls	r3, r3, #1
  40982a:	429d      	cmp	r5, r3
  40982c:	f101 0101 	add.w	r1, r1, #1
  409830:	dcfa      	bgt.n	409828 <__lshift+0x20>
  409832:	4638      	mov	r0, r7
  409834:	f7ff fe3c 	bl	4094b0 <_Balloc>
  409838:	2c00      	cmp	r4, #0
  40983a:	f100 0314 	add.w	r3, r0, #20
  40983e:	dd06      	ble.n	40984e <__lshift+0x46>
  409840:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  409844:	2100      	movs	r1, #0
  409846:	f843 1b04 	str.w	r1, [r3], #4
  40984a:	429a      	cmp	r2, r3
  40984c:	d1fb      	bne.n	409846 <__lshift+0x3e>
  40984e:	6934      	ldr	r4, [r6, #16]
  409850:	f106 0114 	add.w	r1, r6, #20
  409854:	f019 091f 	ands.w	r9, r9, #31
  409858:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40985c:	d01d      	beq.n	40989a <__lshift+0x92>
  40985e:	f1c9 0c20 	rsb	ip, r9, #32
  409862:	2200      	movs	r2, #0
  409864:	680c      	ldr	r4, [r1, #0]
  409866:	fa04 f409 	lsl.w	r4, r4, r9
  40986a:	4314      	orrs	r4, r2
  40986c:	f843 4b04 	str.w	r4, [r3], #4
  409870:	f851 2b04 	ldr.w	r2, [r1], #4
  409874:	458e      	cmp	lr, r1
  409876:	fa22 f20c 	lsr.w	r2, r2, ip
  40987a:	d8f3      	bhi.n	409864 <__lshift+0x5c>
  40987c:	601a      	str	r2, [r3, #0]
  40987e:	b10a      	cbz	r2, 409884 <__lshift+0x7c>
  409880:	f108 0502 	add.w	r5, r8, #2
  409884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409886:	6872      	ldr	r2, [r6, #4]
  409888:	3d01      	subs	r5, #1
  40988a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40988e:	6105      	str	r5, [r0, #16]
  409890:	6031      	str	r1, [r6, #0]
  409892:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40989a:	3b04      	subs	r3, #4
  40989c:	f851 2b04 	ldr.w	r2, [r1], #4
  4098a0:	f843 2f04 	str.w	r2, [r3, #4]!
  4098a4:	458e      	cmp	lr, r1
  4098a6:	d8f9      	bhi.n	40989c <__lshift+0x94>
  4098a8:	e7ec      	b.n	409884 <__lshift+0x7c>
  4098aa:	bf00      	nop

004098ac <__mcmp>:
  4098ac:	b430      	push	{r4, r5}
  4098ae:	690b      	ldr	r3, [r1, #16]
  4098b0:	4605      	mov	r5, r0
  4098b2:	6900      	ldr	r0, [r0, #16]
  4098b4:	1ac0      	subs	r0, r0, r3
  4098b6:	d10f      	bne.n	4098d8 <__mcmp+0x2c>
  4098b8:	009b      	lsls	r3, r3, #2
  4098ba:	3514      	adds	r5, #20
  4098bc:	3114      	adds	r1, #20
  4098be:	4419      	add	r1, r3
  4098c0:	442b      	add	r3, r5
  4098c2:	e001      	b.n	4098c8 <__mcmp+0x1c>
  4098c4:	429d      	cmp	r5, r3
  4098c6:	d207      	bcs.n	4098d8 <__mcmp+0x2c>
  4098c8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4098cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4098d0:	4294      	cmp	r4, r2
  4098d2:	d0f7      	beq.n	4098c4 <__mcmp+0x18>
  4098d4:	d302      	bcc.n	4098dc <__mcmp+0x30>
  4098d6:	2001      	movs	r0, #1
  4098d8:	bc30      	pop	{r4, r5}
  4098da:	4770      	bx	lr
  4098dc:	f04f 30ff 	mov.w	r0, #4294967295
  4098e0:	e7fa      	b.n	4098d8 <__mcmp+0x2c>
  4098e2:	bf00      	nop

004098e4 <__mdiff>:
  4098e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4098e8:	690f      	ldr	r7, [r1, #16]
  4098ea:	460e      	mov	r6, r1
  4098ec:	6911      	ldr	r1, [r2, #16]
  4098ee:	1a7f      	subs	r7, r7, r1
  4098f0:	2f00      	cmp	r7, #0
  4098f2:	4690      	mov	r8, r2
  4098f4:	d117      	bne.n	409926 <__mdiff+0x42>
  4098f6:	0089      	lsls	r1, r1, #2
  4098f8:	f106 0514 	add.w	r5, r6, #20
  4098fc:	f102 0e14 	add.w	lr, r2, #20
  409900:	186b      	adds	r3, r5, r1
  409902:	4471      	add	r1, lr
  409904:	e001      	b.n	40990a <__mdiff+0x26>
  409906:	429d      	cmp	r5, r3
  409908:	d25c      	bcs.n	4099c4 <__mdiff+0xe0>
  40990a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40990e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  409912:	42a2      	cmp	r2, r4
  409914:	d0f7      	beq.n	409906 <__mdiff+0x22>
  409916:	d25e      	bcs.n	4099d6 <__mdiff+0xf2>
  409918:	4633      	mov	r3, r6
  40991a:	462c      	mov	r4, r5
  40991c:	4646      	mov	r6, r8
  40991e:	4675      	mov	r5, lr
  409920:	4698      	mov	r8, r3
  409922:	2701      	movs	r7, #1
  409924:	e005      	b.n	409932 <__mdiff+0x4e>
  409926:	db58      	blt.n	4099da <__mdiff+0xf6>
  409928:	f106 0514 	add.w	r5, r6, #20
  40992c:	f108 0414 	add.w	r4, r8, #20
  409930:	2700      	movs	r7, #0
  409932:	6871      	ldr	r1, [r6, #4]
  409934:	f7ff fdbc 	bl	4094b0 <_Balloc>
  409938:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40993c:	6936      	ldr	r6, [r6, #16]
  40993e:	60c7      	str	r7, [r0, #12]
  409940:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  409944:	46a6      	mov	lr, r4
  409946:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40994a:	f100 0414 	add.w	r4, r0, #20
  40994e:	2300      	movs	r3, #0
  409950:	f85e 1b04 	ldr.w	r1, [lr], #4
  409954:	f855 8b04 	ldr.w	r8, [r5], #4
  409958:	b28a      	uxth	r2, r1
  40995a:	fa13 f388 	uxtah	r3, r3, r8
  40995e:	0c09      	lsrs	r1, r1, #16
  409960:	1a9a      	subs	r2, r3, r2
  409962:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  409966:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40996a:	b292      	uxth	r2, r2
  40996c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  409970:	45f4      	cmp	ip, lr
  409972:	f844 2b04 	str.w	r2, [r4], #4
  409976:	ea4f 4323 	mov.w	r3, r3, asr #16
  40997a:	d8e9      	bhi.n	409950 <__mdiff+0x6c>
  40997c:	42af      	cmp	r7, r5
  40997e:	d917      	bls.n	4099b0 <__mdiff+0xcc>
  409980:	46a4      	mov	ip, r4
  409982:	46ae      	mov	lr, r5
  409984:	f85e 2b04 	ldr.w	r2, [lr], #4
  409988:	fa13 f382 	uxtah	r3, r3, r2
  40998c:	1419      	asrs	r1, r3, #16
  40998e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  409992:	b29b      	uxth	r3, r3
  409994:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  409998:	4577      	cmp	r7, lr
  40999a:	f84c 2b04 	str.w	r2, [ip], #4
  40999e:	ea4f 4321 	mov.w	r3, r1, asr #16
  4099a2:	d8ef      	bhi.n	409984 <__mdiff+0xa0>
  4099a4:	43ed      	mvns	r5, r5
  4099a6:	442f      	add	r7, r5
  4099a8:	f027 0703 	bic.w	r7, r7, #3
  4099ac:	3704      	adds	r7, #4
  4099ae:	443c      	add	r4, r7
  4099b0:	3c04      	subs	r4, #4
  4099b2:	b922      	cbnz	r2, 4099be <__mdiff+0xda>
  4099b4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4099b8:	3e01      	subs	r6, #1
  4099ba:	2b00      	cmp	r3, #0
  4099bc:	d0fa      	beq.n	4099b4 <__mdiff+0xd0>
  4099be:	6106      	str	r6, [r0, #16]
  4099c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4099c4:	2100      	movs	r1, #0
  4099c6:	f7ff fd73 	bl	4094b0 <_Balloc>
  4099ca:	2201      	movs	r2, #1
  4099cc:	2300      	movs	r3, #0
  4099ce:	6102      	str	r2, [r0, #16]
  4099d0:	6143      	str	r3, [r0, #20]
  4099d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4099d6:	4674      	mov	r4, lr
  4099d8:	e7ab      	b.n	409932 <__mdiff+0x4e>
  4099da:	4633      	mov	r3, r6
  4099dc:	f106 0414 	add.w	r4, r6, #20
  4099e0:	f102 0514 	add.w	r5, r2, #20
  4099e4:	4616      	mov	r6, r2
  4099e6:	2701      	movs	r7, #1
  4099e8:	4698      	mov	r8, r3
  4099ea:	e7a2      	b.n	409932 <__mdiff+0x4e>

004099ec <__d2b>:
  4099ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4099f0:	b082      	sub	sp, #8
  4099f2:	2101      	movs	r1, #1
  4099f4:	461c      	mov	r4, r3
  4099f6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4099fa:	4615      	mov	r5, r2
  4099fc:	9e08      	ldr	r6, [sp, #32]
  4099fe:	f7ff fd57 	bl	4094b0 <_Balloc>
  409a02:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409a06:	4680      	mov	r8, r0
  409a08:	b10f      	cbz	r7, 409a0e <__d2b+0x22>
  409a0a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409a0e:	9401      	str	r4, [sp, #4]
  409a10:	b31d      	cbz	r5, 409a5a <__d2b+0x6e>
  409a12:	a802      	add	r0, sp, #8
  409a14:	f840 5d08 	str.w	r5, [r0, #-8]!
  409a18:	f7ff fdda 	bl	4095d0 <__lo0bits>
  409a1c:	2800      	cmp	r0, #0
  409a1e:	d134      	bne.n	409a8a <__d2b+0x9e>
  409a20:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409a24:	f8c8 2014 	str.w	r2, [r8, #20]
  409a28:	2b00      	cmp	r3, #0
  409a2a:	bf0c      	ite	eq
  409a2c:	2101      	moveq	r1, #1
  409a2e:	2102      	movne	r1, #2
  409a30:	f8c8 3018 	str.w	r3, [r8, #24]
  409a34:	f8c8 1010 	str.w	r1, [r8, #16]
  409a38:	b9df      	cbnz	r7, 409a72 <__d2b+0x86>
  409a3a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  409a3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409a42:	6030      	str	r0, [r6, #0]
  409a44:	6918      	ldr	r0, [r3, #16]
  409a46:	f7ff fda3 	bl	409590 <__hi0bits>
  409a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409a4c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  409a50:	6018      	str	r0, [r3, #0]
  409a52:	4640      	mov	r0, r8
  409a54:	b002      	add	sp, #8
  409a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a5a:	a801      	add	r0, sp, #4
  409a5c:	f7ff fdb8 	bl	4095d0 <__lo0bits>
  409a60:	9b01      	ldr	r3, [sp, #4]
  409a62:	f8c8 3014 	str.w	r3, [r8, #20]
  409a66:	2101      	movs	r1, #1
  409a68:	3020      	adds	r0, #32
  409a6a:	f8c8 1010 	str.w	r1, [r8, #16]
  409a6e:	2f00      	cmp	r7, #0
  409a70:	d0e3      	beq.n	409a3a <__d2b+0x4e>
  409a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409a74:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  409a78:	4407      	add	r7, r0
  409a7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  409a7e:	6037      	str	r7, [r6, #0]
  409a80:	6018      	str	r0, [r3, #0]
  409a82:	4640      	mov	r0, r8
  409a84:	b002      	add	sp, #8
  409a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409a8a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  409a8e:	f1c0 0220 	rsb	r2, r0, #32
  409a92:	fa03 f202 	lsl.w	r2, r3, r2
  409a96:	430a      	orrs	r2, r1
  409a98:	40c3      	lsrs	r3, r0
  409a9a:	9301      	str	r3, [sp, #4]
  409a9c:	f8c8 2014 	str.w	r2, [r8, #20]
  409aa0:	e7c2      	b.n	409a28 <__d2b+0x3c>
  409aa2:	bf00      	nop

00409aa4 <_realloc_r>:
  409aa4:	2900      	cmp	r1, #0
  409aa6:	f000 8095 	beq.w	409bd4 <_realloc_r+0x130>
  409aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409aae:	460d      	mov	r5, r1
  409ab0:	4616      	mov	r6, r2
  409ab2:	b083      	sub	sp, #12
  409ab4:	4680      	mov	r8, r0
  409ab6:	f106 070b 	add.w	r7, r6, #11
  409aba:	f7ff fced 	bl	409498 <__malloc_lock>
  409abe:	f855 ec04 	ldr.w	lr, [r5, #-4]
  409ac2:	2f16      	cmp	r7, #22
  409ac4:	f02e 0403 	bic.w	r4, lr, #3
  409ac8:	f1a5 0908 	sub.w	r9, r5, #8
  409acc:	d83c      	bhi.n	409b48 <_realloc_r+0xa4>
  409ace:	2210      	movs	r2, #16
  409ad0:	4617      	mov	r7, r2
  409ad2:	42be      	cmp	r6, r7
  409ad4:	d83d      	bhi.n	409b52 <_realloc_r+0xae>
  409ad6:	4294      	cmp	r4, r2
  409ad8:	da43      	bge.n	409b62 <_realloc_r+0xbe>
  409ada:	4bc4      	ldr	r3, [pc, #784]	; (409dec <_realloc_r+0x348>)
  409adc:	6899      	ldr	r1, [r3, #8]
  409ade:	eb09 0004 	add.w	r0, r9, r4
  409ae2:	4288      	cmp	r0, r1
  409ae4:	f000 80b4 	beq.w	409c50 <_realloc_r+0x1ac>
  409ae8:	6843      	ldr	r3, [r0, #4]
  409aea:	f023 0101 	bic.w	r1, r3, #1
  409aee:	4401      	add	r1, r0
  409af0:	6849      	ldr	r1, [r1, #4]
  409af2:	07c9      	lsls	r1, r1, #31
  409af4:	d54c      	bpl.n	409b90 <_realloc_r+0xec>
  409af6:	f01e 0f01 	tst.w	lr, #1
  409afa:	f000 809b 	beq.w	409c34 <_realloc_r+0x190>
  409afe:	4631      	mov	r1, r6
  409b00:	4640      	mov	r0, r8
  409b02:	f7ff f949 	bl	408d98 <_malloc_r>
  409b06:	4606      	mov	r6, r0
  409b08:	2800      	cmp	r0, #0
  409b0a:	d03a      	beq.n	409b82 <_realloc_r+0xde>
  409b0c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409b10:	f023 0301 	bic.w	r3, r3, #1
  409b14:	444b      	add	r3, r9
  409b16:	f1a0 0208 	sub.w	r2, r0, #8
  409b1a:	429a      	cmp	r2, r3
  409b1c:	f000 8121 	beq.w	409d62 <_realloc_r+0x2be>
  409b20:	1f22      	subs	r2, r4, #4
  409b22:	2a24      	cmp	r2, #36	; 0x24
  409b24:	f200 8107 	bhi.w	409d36 <_realloc_r+0x292>
  409b28:	2a13      	cmp	r2, #19
  409b2a:	f200 80db 	bhi.w	409ce4 <_realloc_r+0x240>
  409b2e:	4603      	mov	r3, r0
  409b30:	462a      	mov	r2, r5
  409b32:	6811      	ldr	r1, [r2, #0]
  409b34:	6019      	str	r1, [r3, #0]
  409b36:	6851      	ldr	r1, [r2, #4]
  409b38:	6059      	str	r1, [r3, #4]
  409b3a:	6892      	ldr	r2, [r2, #8]
  409b3c:	609a      	str	r2, [r3, #8]
  409b3e:	4629      	mov	r1, r5
  409b40:	4640      	mov	r0, r8
  409b42:	f7ff f831 	bl	408ba8 <_free_r>
  409b46:	e01c      	b.n	409b82 <_realloc_r+0xde>
  409b48:	f027 0707 	bic.w	r7, r7, #7
  409b4c:	2f00      	cmp	r7, #0
  409b4e:	463a      	mov	r2, r7
  409b50:	dabf      	bge.n	409ad2 <_realloc_r+0x2e>
  409b52:	2600      	movs	r6, #0
  409b54:	230c      	movs	r3, #12
  409b56:	4630      	mov	r0, r6
  409b58:	f8c8 3000 	str.w	r3, [r8]
  409b5c:	b003      	add	sp, #12
  409b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b62:	462e      	mov	r6, r5
  409b64:	1be3      	subs	r3, r4, r7
  409b66:	2b0f      	cmp	r3, #15
  409b68:	d81e      	bhi.n	409ba8 <_realloc_r+0x104>
  409b6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  409b6e:	f003 0301 	and.w	r3, r3, #1
  409b72:	4323      	orrs	r3, r4
  409b74:	444c      	add	r4, r9
  409b76:	f8c9 3004 	str.w	r3, [r9, #4]
  409b7a:	6863      	ldr	r3, [r4, #4]
  409b7c:	f043 0301 	orr.w	r3, r3, #1
  409b80:	6063      	str	r3, [r4, #4]
  409b82:	4640      	mov	r0, r8
  409b84:	f7ff fc8e 	bl	4094a4 <__malloc_unlock>
  409b88:	4630      	mov	r0, r6
  409b8a:	b003      	add	sp, #12
  409b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409b90:	f023 0303 	bic.w	r3, r3, #3
  409b94:	18e1      	adds	r1, r4, r3
  409b96:	4291      	cmp	r1, r2
  409b98:	db1f      	blt.n	409bda <_realloc_r+0x136>
  409b9a:	68c3      	ldr	r3, [r0, #12]
  409b9c:	6882      	ldr	r2, [r0, #8]
  409b9e:	462e      	mov	r6, r5
  409ba0:	60d3      	str	r3, [r2, #12]
  409ba2:	460c      	mov	r4, r1
  409ba4:	609a      	str	r2, [r3, #8]
  409ba6:	e7dd      	b.n	409b64 <_realloc_r+0xc0>
  409ba8:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409bac:	eb09 0107 	add.w	r1, r9, r7
  409bb0:	f002 0201 	and.w	r2, r2, #1
  409bb4:	444c      	add	r4, r9
  409bb6:	f043 0301 	orr.w	r3, r3, #1
  409bba:	4317      	orrs	r7, r2
  409bbc:	f8c9 7004 	str.w	r7, [r9, #4]
  409bc0:	604b      	str	r3, [r1, #4]
  409bc2:	6863      	ldr	r3, [r4, #4]
  409bc4:	f043 0301 	orr.w	r3, r3, #1
  409bc8:	3108      	adds	r1, #8
  409bca:	6063      	str	r3, [r4, #4]
  409bcc:	4640      	mov	r0, r8
  409bce:	f7fe ffeb 	bl	408ba8 <_free_r>
  409bd2:	e7d6      	b.n	409b82 <_realloc_r+0xde>
  409bd4:	4611      	mov	r1, r2
  409bd6:	f7ff b8df 	b.w	408d98 <_malloc_r>
  409bda:	f01e 0f01 	tst.w	lr, #1
  409bde:	d18e      	bne.n	409afe <_realloc_r+0x5a>
  409be0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409be4:	eba9 0a01 	sub.w	sl, r9, r1
  409be8:	f8da 1004 	ldr.w	r1, [sl, #4]
  409bec:	f021 0103 	bic.w	r1, r1, #3
  409bf0:	440b      	add	r3, r1
  409bf2:	4423      	add	r3, r4
  409bf4:	4293      	cmp	r3, r2
  409bf6:	db25      	blt.n	409c44 <_realloc_r+0x1a0>
  409bf8:	68c2      	ldr	r2, [r0, #12]
  409bfa:	6881      	ldr	r1, [r0, #8]
  409bfc:	4656      	mov	r6, sl
  409bfe:	60ca      	str	r2, [r1, #12]
  409c00:	6091      	str	r1, [r2, #8]
  409c02:	f8da 100c 	ldr.w	r1, [sl, #12]
  409c06:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409c0a:	1f22      	subs	r2, r4, #4
  409c0c:	2a24      	cmp	r2, #36	; 0x24
  409c0e:	60c1      	str	r1, [r0, #12]
  409c10:	6088      	str	r0, [r1, #8]
  409c12:	f200 8094 	bhi.w	409d3e <_realloc_r+0x29a>
  409c16:	2a13      	cmp	r2, #19
  409c18:	d96f      	bls.n	409cfa <_realloc_r+0x256>
  409c1a:	6829      	ldr	r1, [r5, #0]
  409c1c:	f8ca 1008 	str.w	r1, [sl, #8]
  409c20:	6869      	ldr	r1, [r5, #4]
  409c22:	f8ca 100c 	str.w	r1, [sl, #12]
  409c26:	2a1b      	cmp	r2, #27
  409c28:	f200 80a2 	bhi.w	409d70 <_realloc_r+0x2cc>
  409c2c:	3508      	adds	r5, #8
  409c2e:	f10a 0210 	add.w	r2, sl, #16
  409c32:	e063      	b.n	409cfc <_realloc_r+0x258>
  409c34:	f855 3c08 	ldr.w	r3, [r5, #-8]
  409c38:	eba9 0a03 	sub.w	sl, r9, r3
  409c3c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409c40:	f021 0103 	bic.w	r1, r1, #3
  409c44:	1863      	adds	r3, r4, r1
  409c46:	4293      	cmp	r3, r2
  409c48:	f6ff af59 	blt.w	409afe <_realloc_r+0x5a>
  409c4c:	4656      	mov	r6, sl
  409c4e:	e7d8      	b.n	409c02 <_realloc_r+0x15e>
  409c50:	6841      	ldr	r1, [r0, #4]
  409c52:	f021 0b03 	bic.w	fp, r1, #3
  409c56:	44a3      	add	fp, r4
  409c58:	f107 0010 	add.w	r0, r7, #16
  409c5c:	4583      	cmp	fp, r0
  409c5e:	da56      	bge.n	409d0e <_realloc_r+0x26a>
  409c60:	f01e 0f01 	tst.w	lr, #1
  409c64:	f47f af4b 	bne.w	409afe <_realloc_r+0x5a>
  409c68:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409c6c:	eba9 0a01 	sub.w	sl, r9, r1
  409c70:	f8da 1004 	ldr.w	r1, [sl, #4]
  409c74:	f021 0103 	bic.w	r1, r1, #3
  409c78:	448b      	add	fp, r1
  409c7a:	4558      	cmp	r0, fp
  409c7c:	dce2      	bgt.n	409c44 <_realloc_r+0x1a0>
  409c7e:	4656      	mov	r6, sl
  409c80:	f8da 100c 	ldr.w	r1, [sl, #12]
  409c84:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409c88:	1f22      	subs	r2, r4, #4
  409c8a:	2a24      	cmp	r2, #36	; 0x24
  409c8c:	60c1      	str	r1, [r0, #12]
  409c8e:	6088      	str	r0, [r1, #8]
  409c90:	f200 808f 	bhi.w	409db2 <_realloc_r+0x30e>
  409c94:	2a13      	cmp	r2, #19
  409c96:	f240 808a 	bls.w	409dae <_realloc_r+0x30a>
  409c9a:	6829      	ldr	r1, [r5, #0]
  409c9c:	f8ca 1008 	str.w	r1, [sl, #8]
  409ca0:	6869      	ldr	r1, [r5, #4]
  409ca2:	f8ca 100c 	str.w	r1, [sl, #12]
  409ca6:	2a1b      	cmp	r2, #27
  409ca8:	f200 808a 	bhi.w	409dc0 <_realloc_r+0x31c>
  409cac:	3508      	adds	r5, #8
  409cae:	f10a 0210 	add.w	r2, sl, #16
  409cb2:	6829      	ldr	r1, [r5, #0]
  409cb4:	6011      	str	r1, [r2, #0]
  409cb6:	6869      	ldr	r1, [r5, #4]
  409cb8:	6051      	str	r1, [r2, #4]
  409cba:	68a9      	ldr	r1, [r5, #8]
  409cbc:	6091      	str	r1, [r2, #8]
  409cbe:	eb0a 0107 	add.w	r1, sl, r7
  409cc2:	ebab 0207 	sub.w	r2, fp, r7
  409cc6:	f042 0201 	orr.w	r2, r2, #1
  409cca:	6099      	str	r1, [r3, #8]
  409ccc:	604a      	str	r2, [r1, #4]
  409cce:	f8da 3004 	ldr.w	r3, [sl, #4]
  409cd2:	f003 0301 	and.w	r3, r3, #1
  409cd6:	431f      	orrs	r7, r3
  409cd8:	4640      	mov	r0, r8
  409cda:	f8ca 7004 	str.w	r7, [sl, #4]
  409cde:	f7ff fbe1 	bl	4094a4 <__malloc_unlock>
  409ce2:	e751      	b.n	409b88 <_realloc_r+0xe4>
  409ce4:	682b      	ldr	r3, [r5, #0]
  409ce6:	6003      	str	r3, [r0, #0]
  409ce8:	686b      	ldr	r3, [r5, #4]
  409cea:	6043      	str	r3, [r0, #4]
  409cec:	2a1b      	cmp	r2, #27
  409cee:	d82d      	bhi.n	409d4c <_realloc_r+0x2a8>
  409cf0:	f100 0308 	add.w	r3, r0, #8
  409cf4:	f105 0208 	add.w	r2, r5, #8
  409cf8:	e71b      	b.n	409b32 <_realloc_r+0x8e>
  409cfa:	4632      	mov	r2, r6
  409cfc:	6829      	ldr	r1, [r5, #0]
  409cfe:	6011      	str	r1, [r2, #0]
  409d00:	6869      	ldr	r1, [r5, #4]
  409d02:	6051      	str	r1, [r2, #4]
  409d04:	68a9      	ldr	r1, [r5, #8]
  409d06:	6091      	str	r1, [r2, #8]
  409d08:	461c      	mov	r4, r3
  409d0a:	46d1      	mov	r9, sl
  409d0c:	e72a      	b.n	409b64 <_realloc_r+0xc0>
  409d0e:	eb09 0107 	add.w	r1, r9, r7
  409d12:	ebab 0b07 	sub.w	fp, fp, r7
  409d16:	f04b 0201 	orr.w	r2, fp, #1
  409d1a:	6099      	str	r1, [r3, #8]
  409d1c:	604a      	str	r2, [r1, #4]
  409d1e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409d22:	f003 0301 	and.w	r3, r3, #1
  409d26:	431f      	orrs	r7, r3
  409d28:	4640      	mov	r0, r8
  409d2a:	f845 7c04 	str.w	r7, [r5, #-4]
  409d2e:	f7ff fbb9 	bl	4094a4 <__malloc_unlock>
  409d32:	462e      	mov	r6, r5
  409d34:	e728      	b.n	409b88 <_realloc_r+0xe4>
  409d36:	4629      	mov	r1, r5
  409d38:	f7ff fb4a 	bl	4093d0 <memmove>
  409d3c:	e6ff      	b.n	409b3e <_realloc_r+0x9a>
  409d3e:	4629      	mov	r1, r5
  409d40:	4630      	mov	r0, r6
  409d42:	461c      	mov	r4, r3
  409d44:	46d1      	mov	r9, sl
  409d46:	f7ff fb43 	bl	4093d0 <memmove>
  409d4a:	e70b      	b.n	409b64 <_realloc_r+0xc0>
  409d4c:	68ab      	ldr	r3, [r5, #8]
  409d4e:	6083      	str	r3, [r0, #8]
  409d50:	68eb      	ldr	r3, [r5, #12]
  409d52:	60c3      	str	r3, [r0, #12]
  409d54:	2a24      	cmp	r2, #36	; 0x24
  409d56:	d017      	beq.n	409d88 <_realloc_r+0x2e4>
  409d58:	f100 0310 	add.w	r3, r0, #16
  409d5c:	f105 0210 	add.w	r2, r5, #16
  409d60:	e6e7      	b.n	409b32 <_realloc_r+0x8e>
  409d62:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409d66:	f023 0303 	bic.w	r3, r3, #3
  409d6a:	441c      	add	r4, r3
  409d6c:	462e      	mov	r6, r5
  409d6e:	e6f9      	b.n	409b64 <_realloc_r+0xc0>
  409d70:	68a9      	ldr	r1, [r5, #8]
  409d72:	f8ca 1010 	str.w	r1, [sl, #16]
  409d76:	68e9      	ldr	r1, [r5, #12]
  409d78:	f8ca 1014 	str.w	r1, [sl, #20]
  409d7c:	2a24      	cmp	r2, #36	; 0x24
  409d7e:	d00c      	beq.n	409d9a <_realloc_r+0x2f6>
  409d80:	3510      	adds	r5, #16
  409d82:	f10a 0218 	add.w	r2, sl, #24
  409d86:	e7b9      	b.n	409cfc <_realloc_r+0x258>
  409d88:	692b      	ldr	r3, [r5, #16]
  409d8a:	6103      	str	r3, [r0, #16]
  409d8c:	696b      	ldr	r3, [r5, #20]
  409d8e:	6143      	str	r3, [r0, #20]
  409d90:	f105 0218 	add.w	r2, r5, #24
  409d94:	f100 0318 	add.w	r3, r0, #24
  409d98:	e6cb      	b.n	409b32 <_realloc_r+0x8e>
  409d9a:	692a      	ldr	r2, [r5, #16]
  409d9c:	f8ca 2018 	str.w	r2, [sl, #24]
  409da0:	696a      	ldr	r2, [r5, #20]
  409da2:	f8ca 201c 	str.w	r2, [sl, #28]
  409da6:	3518      	adds	r5, #24
  409da8:	f10a 0220 	add.w	r2, sl, #32
  409dac:	e7a6      	b.n	409cfc <_realloc_r+0x258>
  409dae:	4632      	mov	r2, r6
  409db0:	e77f      	b.n	409cb2 <_realloc_r+0x20e>
  409db2:	4629      	mov	r1, r5
  409db4:	4630      	mov	r0, r6
  409db6:	9301      	str	r3, [sp, #4]
  409db8:	f7ff fb0a 	bl	4093d0 <memmove>
  409dbc:	9b01      	ldr	r3, [sp, #4]
  409dbe:	e77e      	b.n	409cbe <_realloc_r+0x21a>
  409dc0:	68a9      	ldr	r1, [r5, #8]
  409dc2:	f8ca 1010 	str.w	r1, [sl, #16]
  409dc6:	68e9      	ldr	r1, [r5, #12]
  409dc8:	f8ca 1014 	str.w	r1, [sl, #20]
  409dcc:	2a24      	cmp	r2, #36	; 0x24
  409dce:	d003      	beq.n	409dd8 <_realloc_r+0x334>
  409dd0:	3510      	adds	r5, #16
  409dd2:	f10a 0218 	add.w	r2, sl, #24
  409dd6:	e76c      	b.n	409cb2 <_realloc_r+0x20e>
  409dd8:	692a      	ldr	r2, [r5, #16]
  409dda:	f8ca 2018 	str.w	r2, [sl, #24]
  409dde:	696a      	ldr	r2, [r5, #20]
  409de0:	f8ca 201c 	str.w	r2, [sl, #28]
  409de4:	3518      	adds	r5, #24
  409de6:	f10a 0220 	add.w	r2, sl, #32
  409dea:	e762      	b.n	409cb2 <_realloc_r+0x20e>
  409dec:	20000728 	.word	0x20000728

00409df0 <_sbrk_r>:
  409df0:	b538      	push	{r3, r4, r5, lr}
  409df2:	4c07      	ldr	r4, [pc, #28]	; (409e10 <_sbrk_r+0x20>)
  409df4:	2300      	movs	r3, #0
  409df6:	4605      	mov	r5, r0
  409df8:	4608      	mov	r0, r1
  409dfa:	6023      	str	r3, [r4, #0]
  409dfc:	f7f9 fd80 	bl	403900 <_sbrk>
  409e00:	1c43      	adds	r3, r0, #1
  409e02:	d000      	beq.n	409e06 <_sbrk_r+0x16>
  409e04:	bd38      	pop	{r3, r4, r5, pc}
  409e06:	6823      	ldr	r3, [r4, #0]
  409e08:	2b00      	cmp	r3, #0
  409e0a:	d0fb      	beq.n	409e04 <_sbrk_r+0x14>
  409e0c:	602b      	str	r3, [r5, #0]
  409e0e:	bd38      	pop	{r3, r4, r5, pc}
  409e10:	2000461c 	.word	0x2000461c

00409e14 <__ssprint_r>:
  409e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e18:	6893      	ldr	r3, [r2, #8]
  409e1a:	b083      	sub	sp, #12
  409e1c:	4690      	mov	r8, r2
  409e1e:	2b00      	cmp	r3, #0
  409e20:	d070      	beq.n	409f04 <__ssprint_r+0xf0>
  409e22:	4682      	mov	sl, r0
  409e24:	460c      	mov	r4, r1
  409e26:	6817      	ldr	r7, [r2, #0]
  409e28:	688d      	ldr	r5, [r1, #8]
  409e2a:	6808      	ldr	r0, [r1, #0]
  409e2c:	e042      	b.n	409eb4 <__ssprint_r+0xa0>
  409e2e:	89a3      	ldrh	r3, [r4, #12]
  409e30:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409e34:	d02e      	beq.n	409e94 <__ssprint_r+0x80>
  409e36:	6965      	ldr	r5, [r4, #20]
  409e38:	6921      	ldr	r1, [r4, #16]
  409e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  409e3e:	eba0 0b01 	sub.w	fp, r0, r1
  409e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  409e46:	f10b 0001 	add.w	r0, fp, #1
  409e4a:	106d      	asrs	r5, r5, #1
  409e4c:	4430      	add	r0, r6
  409e4e:	42a8      	cmp	r0, r5
  409e50:	462a      	mov	r2, r5
  409e52:	bf84      	itt	hi
  409e54:	4605      	movhi	r5, r0
  409e56:	462a      	movhi	r2, r5
  409e58:	055b      	lsls	r3, r3, #21
  409e5a:	d538      	bpl.n	409ece <__ssprint_r+0xba>
  409e5c:	4611      	mov	r1, r2
  409e5e:	4650      	mov	r0, sl
  409e60:	f7fe ff9a 	bl	408d98 <_malloc_r>
  409e64:	2800      	cmp	r0, #0
  409e66:	d03c      	beq.n	409ee2 <__ssprint_r+0xce>
  409e68:	465a      	mov	r2, fp
  409e6a:	6921      	ldr	r1, [r4, #16]
  409e6c:	9001      	str	r0, [sp, #4]
  409e6e:	f7fc fab9 	bl	4063e4 <memcpy>
  409e72:	89a2      	ldrh	r2, [r4, #12]
  409e74:	9b01      	ldr	r3, [sp, #4]
  409e76:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  409e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  409e7e:	81a2      	strh	r2, [r4, #12]
  409e80:	eba5 020b 	sub.w	r2, r5, fp
  409e84:	eb03 000b 	add.w	r0, r3, fp
  409e88:	6165      	str	r5, [r4, #20]
  409e8a:	6123      	str	r3, [r4, #16]
  409e8c:	6020      	str	r0, [r4, #0]
  409e8e:	60a2      	str	r2, [r4, #8]
  409e90:	4635      	mov	r5, r6
  409e92:	46b3      	mov	fp, r6
  409e94:	465a      	mov	r2, fp
  409e96:	4649      	mov	r1, r9
  409e98:	f7ff fa9a 	bl	4093d0 <memmove>
  409e9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409ea0:	68a2      	ldr	r2, [r4, #8]
  409ea2:	6820      	ldr	r0, [r4, #0]
  409ea4:	1b55      	subs	r5, r2, r5
  409ea6:	4458      	add	r0, fp
  409ea8:	1b9e      	subs	r6, r3, r6
  409eaa:	60a5      	str	r5, [r4, #8]
  409eac:	6020      	str	r0, [r4, #0]
  409eae:	f8c8 6008 	str.w	r6, [r8, #8]
  409eb2:	b33e      	cbz	r6, 409f04 <__ssprint_r+0xf0>
  409eb4:	687e      	ldr	r6, [r7, #4]
  409eb6:	463b      	mov	r3, r7
  409eb8:	3708      	adds	r7, #8
  409eba:	2e00      	cmp	r6, #0
  409ebc:	d0fa      	beq.n	409eb4 <__ssprint_r+0xa0>
  409ebe:	42ae      	cmp	r6, r5
  409ec0:	f8d3 9000 	ldr.w	r9, [r3]
  409ec4:	46ab      	mov	fp, r5
  409ec6:	d2b2      	bcs.n	409e2e <__ssprint_r+0x1a>
  409ec8:	4635      	mov	r5, r6
  409eca:	46b3      	mov	fp, r6
  409ecc:	e7e2      	b.n	409e94 <__ssprint_r+0x80>
  409ece:	4650      	mov	r0, sl
  409ed0:	f7ff fde8 	bl	409aa4 <_realloc_r>
  409ed4:	4603      	mov	r3, r0
  409ed6:	2800      	cmp	r0, #0
  409ed8:	d1d2      	bne.n	409e80 <__ssprint_r+0x6c>
  409eda:	6921      	ldr	r1, [r4, #16]
  409edc:	4650      	mov	r0, sl
  409ede:	f7fe fe63 	bl	408ba8 <_free_r>
  409ee2:	230c      	movs	r3, #12
  409ee4:	f8ca 3000 	str.w	r3, [sl]
  409ee8:	89a3      	ldrh	r3, [r4, #12]
  409eea:	2200      	movs	r2, #0
  409eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409ef0:	f04f 30ff 	mov.w	r0, #4294967295
  409ef4:	81a3      	strh	r3, [r4, #12]
  409ef6:	f8c8 2008 	str.w	r2, [r8, #8]
  409efa:	f8c8 2004 	str.w	r2, [r8, #4]
  409efe:	b003      	add	sp, #12
  409f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f04:	2000      	movs	r0, #0
  409f06:	f8c8 0004 	str.w	r0, [r8, #4]
  409f0a:	b003      	add	sp, #12
  409f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409f10 <__ascii_wctomb>:
  409f10:	b121      	cbz	r1, 409f1c <__ascii_wctomb+0xc>
  409f12:	2aff      	cmp	r2, #255	; 0xff
  409f14:	d804      	bhi.n	409f20 <__ascii_wctomb+0x10>
  409f16:	700a      	strb	r2, [r1, #0]
  409f18:	2001      	movs	r0, #1
  409f1a:	4770      	bx	lr
  409f1c:	4608      	mov	r0, r1
  409f1e:	4770      	bx	lr
  409f20:	238a      	movs	r3, #138	; 0x8a
  409f22:	6003      	str	r3, [r0, #0]
  409f24:	f04f 30ff 	mov.w	r0, #4294967295
  409f28:	4770      	bx	lr
  409f2a:	bf00      	nop

00409f2c <__register_exitproc>:
  409f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409f30:	4d2c      	ldr	r5, [pc, #176]	; (409fe4 <__register_exitproc+0xb8>)
  409f32:	4606      	mov	r6, r0
  409f34:	6828      	ldr	r0, [r5, #0]
  409f36:	4698      	mov	r8, r3
  409f38:	460f      	mov	r7, r1
  409f3a:	4691      	mov	r9, r2
  409f3c:	f7fe ff28 	bl	408d90 <__retarget_lock_acquire_recursive>
  409f40:	4b29      	ldr	r3, [pc, #164]	; (409fe8 <__register_exitproc+0xbc>)
  409f42:	681c      	ldr	r4, [r3, #0]
  409f44:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409f48:	2b00      	cmp	r3, #0
  409f4a:	d03e      	beq.n	409fca <__register_exitproc+0x9e>
  409f4c:	685a      	ldr	r2, [r3, #4]
  409f4e:	2a1f      	cmp	r2, #31
  409f50:	dc1c      	bgt.n	409f8c <__register_exitproc+0x60>
  409f52:	f102 0e01 	add.w	lr, r2, #1
  409f56:	b176      	cbz	r6, 409f76 <__register_exitproc+0x4a>
  409f58:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409f5c:	2401      	movs	r4, #1
  409f5e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  409f62:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  409f66:	4094      	lsls	r4, r2
  409f68:	4320      	orrs	r0, r4
  409f6a:	2e02      	cmp	r6, #2
  409f6c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  409f70:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409f74:	d023      	beq.n	409fbe <__register_exitproc+0x92>
  409f76:	3202      	adds	r2, #2
  409f78:	f8c3 e004 	str.w	lr, [r3, #4]
  409f7c:	6828      	ldr	r0, [r5, #0]
  409f7e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409f82:	f7fe ff07 	bl	408d94 <__retarget_lock_release_recursive>
  409f86:	2000      	movs	r0, #0
  409f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409f8c:	4b17      	ldr	r3, [pc, #92]	; (409fec <__register_exitproc+0xc0>)
  409f8e:	b30b      	cbz	r3, 409fd4 <__register_exitproc+0xa8>
  409f90:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409f94:	f3af 8000 	nop.w
  409f98:	4603      	mov	r3, r0
  409f9a:	b1d8      	cbz	r0, 409fd4 <__register_exitproc+0xa8>
  409f9c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409fa0:	6002      	str	r2, [r0, #0]
  409fa2:	2100      	movs	r1, #0
  409fa4:	6041      	str	r1, [r0, #4]
  409fa6:	460a      	mov	r2, r1
  409fa8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409fac:	f04f 0e01 	mov.w	lr, #1
  409fb0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409fb4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409fb8:	2e00      	cmp	r6, #0
  409fba:	d0dc      	beq.n	409f76 <__register_exitproc+0x4a>
  409fbc:	e7cc      	b.n	409f58 <__register_exitproc+0x2c>
  409fbe:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409fc2:	430c      	orrs	r4, r1
  409fc4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409fc8:	e7d5      	b.n	409f76 <__register_exitproc+0x4a>
  409fca:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409fce:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409fd2:	e7bb      	b.n	409f4c <__register_exitproc+0x20>
  409fd4:	6828      	ldr	r0, [r5, #0]
  409fd6:	f7fe fedd 	bl	408d94 <__retarget_lock_release_recursive>
  409fda:	f04f 30ff 	mov.w	r0, #4294967295
  409fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409fe2:	bf00      	nop
  409fe4:	200005b8 	.word	0x200005b8
  409fe8:	0040a848 	.word	0x0040a848
  409fec:	00000000 	.word	0x00000000

00409ff0 <_calloc_r>:
  409ff0:	b510      	push	{r4, lr}
  409ff2:	fb02 f101 	mul.w	r1, r2, r1
  409ff6:	f7fe fecf 	bl	408d98 <_malloc_r>
  409ffa:	4604      	mov	r4, r0
  409ffc:	b1d8      	cbz	r0, 40a036 <_calloc_r+0x46>
  409ffe:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a002:	f022 0203 	bic.w	r2, r2, #3
  40a006:	3a04      	subs	r2, #4
  40a008:	2a24      	cmp	r2, #36	; 0x24
  40a00a:	d818      	bhi.n	40a03e <_calloc_r+0x4e>
  40a00c:	2a13      	cmp	r2, #19
  40a00e:	d914      	bls.n	40a03a <_calloc_r+0x4a>
  40a010:	2300      	movs	r3, #0
  40a012:	2a1b      	cmp	r2, #27
  40a014:	6003      	str	r3, [r0, #0]
  40a016:	6043      	str	r3, [r0, #4]
  40a018:	d916      	bls.n	40a048 <_calloc_r+0x58>
  40a01a:	2a24      	cmp	r2, #36	; 0x24
  40a01c:	6083      	str	r3, [r0, #8]
  40a01e:	60c3      	str	r3, [r0, #12]
  40a020:	bf11      	iteee	ne
  40a022:	f100 0210 	addne.w	r2, r0, #16
  40a026:	6103      	streq	r3, [r0, #16]
  40a028:	6143      	streq	r3, [r0, #20]
  40a02a:	f100 0218 	addeq.w	r2, r0, #24
  40a02e:	2300      	movs	r3, #0
  40a030:	6013      	str	r3, [r2, #0]
  40a032:	6053      	str	r3, [r2, #4]
  40a034:	6093      	str	r3, [r2, #8]
  40a036:	4620      	mov	r0, r4
  40a038:	bd10      	pop	{r4, pc}
  40a03a:	4602      	mov	r2, r0
  40a03c:	e7f7      	b.n	40a02e <_calloc_r+0x3e>
  40a03e:	2100      	movs	r1, #0
  40a040:	f7fc fa6a 	bl	406518 <memset>
  40a044:	4620      	mov	r0, r4
  40a046:	bd10      	pop	{r4, pc}
  40a048:	f100 0208 	add.w	r2, r0, #8
  40a04c:	e7ef      	b.n	40a02e <_calloc_r+0x3e>
  40a04e:	bf00      	nop

0040a050 <__aeabi_d2iz>:
  40a050:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40a054:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40a058:	d215      	bcs.n	40a086 <__aeabi_d2iz+0x36>
  40a05a:	d511      	bpl.n	40a080 <__aeabi_d2iz+0x30>
  40a05c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40a060:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40a064:	d912      	bls.n	40a08c <__aeabi_d2iz+0x3c>
  40a066:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40a06a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40a06e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40a072:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a076:	fa23 f002 	lsr.w	r0, r3, r2
  40a07a:	bf18      	it	ne
  40a07c:	4240      	negne	r0, r0
  40a07e:	4770      	bx	lr
  40a080:	f04f 0000 	mov.w	r0, #0
  40a084:	4770      	bx	lr
  40a086:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40a08a:	d105      	bne.n	40a098 <__aeabi_d2iz+0x48>
  40a08c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40a090:	bf08      	it	eq
  40a092:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40a096:	4770      	bx	lr
  40a098:	f04f 0000 	mov.w	r0, #0
  40a09c:	4770      	bx	lr
  40a09e:	bf00      	nop

0040a0a0 <__aeabi_uldivmod>:
  40a0a0:	b953      	cbnz	r3, 40a0b8 <__aeabi_uldivmod+0x18>
  40a0a2:	b94a      	cbnz	r2, 40a0b8 <__aeabi_uldivmod+0x18>
  40a0a4:	2900      	cmp	r1, #0
  40a0a6:	bf08      	it	eq
  40a0a8:	2800      	cmpeq	r0, #0
  40a0aa:	bf1c      	itt	ne
  40a0ac:	f04f 31ff 	movne.w	r1, #4294967295
  40a0b0:	f04f 30ff 	movne.w	r0, #4294967295
  40a0b4:	f000 b97a 	b.w	40a3ac <__aeabi_idiv0>
  40a0b8:	f1ad 0c08 	sub.w	ip, sp, #8
  40a0bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40a0c0:	f000 f806 	bl	40a0d0 <__udivmoddi4>
  40a0c4:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a0c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40a0cc:	b004      	add	sp, #16
  40a0ce:	4770      	bx	lr

0040a0d0 <__udivmoddi4>:
  40a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a0d4:	468c      	mov	ip, r1
  40a0d6:	460d      	mov	r5, r1
  40a0d8:	4604      	mov	r4, r0
  40a0da:	9e08      	ldr	r6, [sp, #32]
  40a0dc:	2b00      	cmp	r3, #0
  40a0de:	d151      	bne.n	40a184 <__udivmoddi4+0xb4>
  40a0e0:	428a      	cmp	r2, r1
  40a0e2:	4617      	mov	r7, r2
  40a0e4:	d96d      	bls.n	40a1c2 <__udivmoddi4+0xf2>
  40a0e6:	fab2 fe82 	clz	lr, r2
  40a0ea:	f1be 0f00 	cmp.w	lr, #0
  40a0ee:	d00b      	beq.n	40a108 <__udivmoddi4+0x38>
  40a0f0:	f1ce 0c20 	rsb	ip, lr, #32
  40a0f4:	fa01 f50e 	lsl.w	r5, r1, lr
  40a0f8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a0fc:	fa02 f70e 	lsl.w	r7, r2, lr
  40a100:	ea4c 0c05 	orr.w	ip, ip, r5
  40a104:	fa00 f40e 	lsl.w	r4, r0, lr
  40a108:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40a10c:	0c25      	lsrs	r5, r4, #16
  40a10e:	fbbc f8fa 	udiv	r8, ip, sl
  40a112:	fa1f f987 	uxth.w	r9, r7
  40a116:	fb0a cc18 	mls	ip, sl, r8, ip
  40a11a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40a11e:	fb08 f309 	mul.w	r3, r8, r9
  40a122:	42ab      	cmp	r3, r5
  40a124:	d90a      	bls.n	40a13c <__udivmoddi4+0x6c>
  40a126:	19ed      	adds	r5, r5, r7
  40a128:	f108 32ff 	add.w	r2, r8, #4294967295
  40a12c:	f080 8123 	bcs.w	40a376 <__udivmoddi4+0x2a6>
  40a130:	42ab      	cmp	r3, r5
  40a132:	f240 8120 	bls.w	40a376 <__udivmoddi4+0x2a6>
  40a136:	f1a8 0802 	sub.w	r8, r8, #2
  40a13a:	443d      	add	r5, r7
  40a13c:	1aed      	subs	r5, r5, r3
  40a13e:	b2a4      	uxth	r4, r4
  40a140:	fbb5 f0fa 	udiv	r0, r5, sl
  40a144:	fb0a 5510 	mls	r5, sl, r0, r5
  40a148:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40a14c:	fb00 f909 	mul.w	r9, r0, r9
  40a150:	45a1      	cmp	r9, r4
  40a152:	d909      	bls.n	40a168 <__udivmoddi4+0x98>
  40a154:	19e4      	adds	r4, r4, r7
  40a156:	f100 33ff 	add.w	r3, r0, #4294967295
  40a15a:	f080 810a 	bcs.w	40a372 <__udivmoddi4+0x2a2>
  40a15e:	45a1      	cmp	r9, r4
  40a160:	f240 8107 	bls.w	40a372 <__udivmoddi4+0x2a2>
  40a164:	3802      	subs	r0, #2
  40a166:	443c      	add	r4, r7
  40a168:	eba4 0409 	sub.w	r4, r4, r9
  40a16c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a170:	2100      	movs	r1, #0
  40a172:	2e00      	cmp	r6, #0
  40a174:	d061      	beq.n	40a23a <__udivmoddi4+0x16a>
  40a176:	fa24 f40e 	lsr.w	r4, r4, lr
  40a17a:	2300      	movs	r3, #0
  40a17c:	6034      	str	r4, [r6, #0]
  40a17e:	6073      	str	r3, [r6, #4]
  40a180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a184:	428b      	cmp	r3, r1
  40a186:	d907      	bls.n	40a198 <__udivmoddi4+0xc8>
  40a188:	2e00      	cmp	r6, #0
  40a18a:	d054      	beq.n	40a236 <__udivmoddi4+0x166>
  40a18c:	2100      	movs	r1, #0
  40a18e:	e886 0021 	stmia.w	r6, {r0, r5}
  40a192:	4608      	mov	r0, r1
  40a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a198:	fab3 f183 	clz	r1, r3
  40a19c:	2900      	cmp	r1, #0
  40a19e:	f040 808e 	bne.w	40a2be <__udivmoddi4+0x1ee>
  40a1a2:	42ab      	cmp	r3, r5
  40a1a4:	d302      	bcc.n	40a1ac <__udivmoddi4+0xdc>
  40a1a6:	4282      	cmp	r2, r0
  40a1a8:	f200 80fa 	bhi.w	40a3a0 <__udivmoddi4+0x2d0>
  40a1ac:	1a84      	subs	r4, r0, r2
  40a1ae:	eb65 0503 	sbc.w	r5, r5, r3
  40a1b2:	2001      	movs	r0, #1
  40a1b4:	46ac      	mov	ip, r5
  40a1b6:	2e00      	cmp	r6, #0
  40a1b8:	d03f      	beq.n	40a23a <__udivmoddi4+0x16a>
  40a1ba:	e886 1010 	stmia.w	r6, {r4, ip}
  40a1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1c2:	b912      	cbnz	r2, 40a1ca <__udivmoddi4+0xfa>
  40a1c4:	2701      	movs	r7, #1
  40a1c6:	fbb7 f7f2 	udiv	r7, r7, r2
  40a1ca:	fab7 fe87 	clz	lr, r7
  40a1ce:	f1be 0f00 	cmp.w	lr, #0
  40a1d2:	d134      	bne.n	40a23e <__udivmoddi4+0x16e>
  40a1d4:	1beb      	subs	r3, r5, r7
  40a1d6:	0c3a      	lsrs	r2, r7, #16
  40a1d8:	fa1f fc87 	uxth.w	ip, r7
  40a1dc:	2101      	movs	r1, #1
  40a1de:	fbb3 f8f2 	udiv	r8, r3, r2
  40a1e2:	0c25      	lsrs	r5, r4, #16
  40a1e4:	fb02 3318 	mls	r3, r2, r8, r3
  40a1e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a1ec:	fb0c f308 	mul.w	r3, ip, r8
  40a1f0:	42ab      	cmp	r3, r5
  40a1f2:	d907      	bls.n	40a204 <__udivmoddi4+0x134>
  40a1f4:	19ed      	adds	r5, r5, r7
  40a1f6:	f108 30ff 	add.w	r0, r8, #4294967295
  40a1fa:	d202      	bcs.n	40a202 <__udivmoddi4+0x132>
  40a1fc:	42ab      	cmp	r3, r5
  40a1fe:	f200 80d1 	bhi.w	40a3a4 <__udivmoddi4+0x2d4>
  40a202:	4680      	mov	r8, r0
  40a204:	1aed      	subs	r5, r5, r3
  40a206:	b2a3      	uxth	r3, r4
  40a208:	fbb5 f0f2 	udiv	r0, r5, r2
  40a20c:	fb02 5510 	mls	r5, r2, r0, r5
  40a210:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40a214:	fb0c fc00 	mul.w	ip, ip, r0
  40a218:	45a4      	cmp	ip, r4
  40a21a:	d907      	bls.n	40a22c <__udivmoddi4+0x15c>
  40a21c:	19e4      	adds	r4, r4, r7
  40a21e:	f100 33ff 	add.w	r3, r0, #4294967295
  40a222:	d202      	bcs.n	40a22a <__udivmoddi4+0x15a>
  40a224:	45a4      	cmp	ip, r4
  40a226:	f200 80b8 	bhi.w	40a39a <__udivmoddi4+0x2ca>
  40a22a:	4618      	mov	r0, r3
  40a22c:	eba4 040c 	sub.w	r4, r4, ip
  40a230:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40a234:	e79d      	b.n	40a172 <__udivmoddi4+0xa2>
  40a236:	4631      	mov	r1, r6
  40a238:	4630      	mov	r0, r6
  40a23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a23e:	f1ce 0420 	rsb	r4, lr, #32
  40a242:	fa05 f30e 	lsl.w	r3, r5, lr
  40a246:	fa07 f70e 	lsl.w	r7, r7, lr
  40a24a:	fa20 f804 	lsr.w	r8, r0, r4
  40a24e:	0c3a      	lsrs	r2, r7, #16
  40a250:	fa25 f404 	lsr.w	r4, r5, r4
  40a254:	ea48 0803 	orr.w	r8, r8, r3
  40a258:	fbb4 f1f2 	udiv	r1, r4, r2
  40a25c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40a260:	fb02 4411 	mls	r4, r2, r1, r4
  40a264:	fa1f fc87 	uxth.w	ip, r7
  40a268:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40a26c:	fb01 f30c 	mul.w	r3, r1, ip
  40a270:	42ab      	cmp	r3, r5
  40a272:	fa00 f40e 	lsl.w	r4, r0, lr
  40a276:	d909      	bls.n	40a28c <__udivmoddi4+0x1bc>
  40a278:	19ed      	adds	r5, r5, r7
  40a27a:	f101 30ff 	add.w	r0, r1, #4294967295
  40a27e:	f080 808a 	bcs.w	40a396 <__udivmoddi4+0x2c6>
  40a282:	42ab      	cmp	r3, r5
  40a284:	f240 8087 	bls.w	40a396 <__udivmoddi4+0x2c6>
  40a288:	3902      	subs	r1, #2
  40a28a:	443d      	add	r5, r7
  40a28c:	1aeb      	subs	r3, r5, r3
  40a28e:	fa1f f588 	uxth.w	r5, r8
  40a292:	fbb3 f0f2 	udiv	r0, r3, r2
  40a296:	fb02 3310 	mls	r3, r2, r0, r3
  40a29a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40a29e:	fb00 f30c 	mul.w	r3, r0, ip
  40a2a2:	42ab      	cmp	r3, r5
  40a2a4:	d907      	bls.n	40a2b6 <__udivmoddi4+0x1e6>
  40a2a6:	19ed      	adds	r5, r5, r7
  40a2a8:	f100 38ff 	add.w	r8, r0, #4294967295
  40a2ac:	d26f      	bcs.n	40a38e <__udivmoddi4+0x2be>
  40a2ae:	42ab      	cmp	r3, r5
  40a2b0:	d96d      	bls.n	40a38e <__udivmoddi4+0x2be>
  40a2b2:	3802      	subs	r0, #2
  40a2b4:	443d      	add	r5, r7
  40a2b6:	1aeb      	subs	r3, r5, r3
  40a2b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40a2bc:	e78f      	b.n	40a1de <__udivmoddi4+0x10e>
  40a2be:	f1c1 0720 	rsb	r7, r1, #32
  40a2c2:	fa22 f807 	lsr.w	r8, r2, r7
  40a2c6:	408b      	lsls	r3, r1
  40a2c8:	fa05 f401 	lsl.w	r4, r5, r1
  40a2cc:	ea48 0303 	orr.w	r3, r8, r3
  40a2d0:	fa20 fe07 	lsr.w	lr, r0, r7
  40a2d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40a2d8:	40fd      	lsrs	r5, r7
  40a2da:	ea4e 0e04 	orr.w	lr, lr, r4
  40a2de:	fbb5 f9fc 	udiv	r9, r5, ip
  40a2e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40a2e6:	fb0c 5519 	mls	r5, ip, r9, r5
  40a2ea:	fa1f f883 	uxth.w	r8, r3
  40a2ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40a2f2:	fb09 f408 	mul.w	r4, r9, r8
  40a2f6:	42ac      	cmp	r4, r5
  40a2f8:	fa02 f201 	lsl.w	r2, r2, r1
  40a2fc:	fa00 fa01 	lsl.w	sl, r0, r1
  40a300:	d908      	bls.n	40a314 <__udivmoddi4+0x244>
  40a302:	18ed      	adds	r5, r5, r3
  40a304:	f109 30ff 	add.w	r0, r9, #4294967295
  40a308:	d243      	bcs.n	40a392 <__udivmoddi4+0x2c2>
  40a30a:	42ac      	cmp	r4, r5
  40a30c:	d941      	bls.n	40a392 <__udivmoddi4+0x2c2>
  40a30e:	f1a9 0902 	sub.w	r9, r9, #2
  40a312:	441d      	add	r5, r3
  40a314:	1b2d      	subs	r5, r5, r4
  40a316:	fa1f fe8e 	uxth.w	lr, lr
  40a31a:	fbb5 f0fc 	udiv	r0, r5, ip
  40a31e:	fb0c 5510 	mls	r5, ip, r0, r5
  40a322:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40a326:	fb00 f808 	mul.w	r8, r0, r8
  40a32a:	45a0      	cmp	r8, r4
  40a32c:	d907      	bls.n	40a33e <__udivmoddi4+0x26e>
  40a32e:	18e4      	adds	r4, r4, r3
  40a330:	f100 35ff 	add.w	r5, r0, #4294967295
  40a334:	d229      	bcs.n	40a38a <__udivmoddi4+0x2ba>
  40a336:	45a0      	cmp	r8, r4
  40a338:	d927      	bls.n	40a38a <__udivmoddi4+0x2ba>
  40a33a:	3802      	subs	r0, #2
  40a33c:	441c      	add	r4, r3
  40a33e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40a342:	eba4 0408 	sub.w	r4, r4, r8
  40a346:	fba0 8902 	umull	r8, r9, r0, r2
  40a34a:	454c      	cmp	r4, r9
  40a34c:	46c6      	mov	lr, r8
  40a34e:	464d      	mov	r5, r9
  40a350:	d315      	bcc.n	40a37e <__udivmoddi4+0x2ae>
  40a352:	d012      	beq.n	40a37a <__udivmoddi4+0x2aa>
  40a354:	b156      	cbz	r6, 40a36c <__udivmoddi4+0x29c>
  40a356:	ebba 030e 	subs.w	r3, sl, lr
  40a35a:	eb64 0405 	sbc.w	r4, r4, r5
  40a35e:	fa04 f707 	lsl.w	r7, r4, r7
  40a362:	40cb      	lsrs	r3, r1
  40a364:	431f      	orrs	r7, r3
  40a366:	40cc      	lsrs	r4, r1
  40a368:	6037      	str	r7, [r6, #0]
  40a36a:	6074      	str	r4, [r6, #4]
  40a36c:	2100      	movs	r1, #0
  40a36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a372:	4618      	mov	r0, r3
  40a374:	e6f8      	b.n	40a168 <__udivmoddi4+0x98>
  40a376:	4690      	mov	r8, r2
  40a378:	e6e0      	b.n	40a13c <__udivmoddi4+0x6c>
  40a37a:	45c2      	cmp	sl, r8
  40a37c:	d2ea      	bcs.n	40a354 <__udivmoddi4+0x284>
  40a37e:	ebb8 0e02 	subs.w	lr, r8, r2
  40a382:	eb69 0503 	sbc.w	r5, r9, r3
  40a386:	3801      	subs	r0, #1
  40a388:	e7e4      	b.n	40a354 <__udivmoddi4+0x284>
  40a38a:	4628      	mov	r0, r5
  40a38c:	e7d7      	b.n	40a33e <__udivmoddi4+0x26e>
  40a38e:	4640      	mov	r0, r8
  40a390:	e791      	b.n	40a2b6 <__udivmoddi4+0x1e6>
  40a392:	4681      	mov	r9, r0
  40a394:	e7be      	b.n	40a314 <__udivmoddi4+0x244>
  40a396:	4601      	mov	r1, r0
  40a398:	e778      	b.n	40a28c <__udivmoddi4+0x1bc>
  40a39a:	3802      	subs	r0, #2
  40a39c:	443c      	add	r4, r7
  40a39e:	e745      	b.n	40a22c <__udivmoddi4+0x15c>
  40a3a0:	4608      	mov	r0, r1
  40a3a2:	e708      	b.n	40a1b6 <__udivmoddi4+0xe6>
  40a3a4:	f1a8 0802 	sub.w	r8, r8, #2
  40a3a8:	443d      	add	r5, r7
  40a3aa:	e72b      	b.n	40a204 <__udivmoddi4+0x134>

0040a3ac <__aeabi_idiv0>:
  40a3ac:	4770      	bx	lr
  40a3ae:	bf00      	nop
  40a3b0:	0d0a0d0a 	.word	0x0d0a0d0a
  40a3b4:	72727543 	.word	0x72727543
  40a3b8:	20746e65 	.word	0x20746e65
  40a3bc:	69746341 	.word	0x69746341
  40a3c0:	50206576 	.word	0x50206576
  40a3c4:	65746f72 	.word	0x65746f72
  40a3c8:	6f697463 	.word	0x6f697463
  40a3cc:	0a3a736e 	.word	0x0a3a736e
  40a3d0:	0000000d 	.word	0x0000000d
	...
  40a4b0:	614e0d0a 	.word	0x614e0d0a
  40a4b4:	202c656d 	.word	0x202c656d
  40a4b8:	72727543 	.word	0x72727543
  40a4bc:	20746e65 	.word	0x20746e65
  40a4c0:	756c6156 	.word	0x756c6156
  40a4c4:	53202c65 	.word	0x53202c65
  40a4c8:	6c6c616d 	.word	0x6c6c616d
  40a4cc:	20747365 	.word	0x20747365
  40a4d0:	6566696c 	.word	0x6566696c
  40a4d4:	656d6974 	.word	0x656d6974
  40a4d8:	6c617620 	.word	0x6c617620
  40a4dc:	202c6575 	.word	0x202c6575
  40a4e0:	6772616c 	.word	0x6772616c
  40a4e4:	20747365 	.word	0x20747365
  40a4e8:	6566696c 	.word	0x6566696c
  40a4ec:	656d6974 	.word	0x656d6974
  40a4f0:	6c617620 	.word	0x6c617620
  40a4f4:	0d0a6575 	.word	0x0d0a6575
	...
  40a5b0:	6c410d0a 	.word	0x6c410d0a
  40a5b4:	7270206c 	.word	0x7270206c
  40a5b8:	6365746f 	.word	0x6365746f
  40a5bc:	6e6f6974 	.word	0x6e6f6974
  40a5c0:	69772073 	.word	0x69772073
  40a5c4:	62206c6c 	.word	0x62206c6c
  40a5c8:	67692065 	.word	0x67692065
  40a5cc:	65726f6e 	.word	0x65726f6e
  40a5d0:	69742064 	.word	0x69742064
  40a5d4:	74206c6c 	.word	0x74206c6c
  40a5d8:	62206568 	.word	0x62206568
  40a5dc:	65747461 	.word	0x65747461
  40a5e0:	69207972 	.word	0x69207972
  40a5e4:	74732073 	.word	0x74732073
  40a5e8:	656c6261 	.word	0x656c6261
  40a5ec:	61676120 	.word	0x61676120
  40a5f0:	0d0a6e69 	.word	0x0d0a6e69
  40a5f4:	00000000 	.word	0x00000000
  40a5f8:	6c500d0a 	.word	0x6c500d0a
  40a5fc:	65736165 	.word	0x65736165
  40a600:	70795420 	.word	0x70795420
  40a604:	22732265 	.word	0x22732265
  40a608:	206f7420 	.word	0x206f7420
  40a60c:	20746567 	.word	0x20746567
  40a610:	20656874 	.word	0x20656874
  40a614:	72727563 	.word	0x72727563
  40a618:	20746e65 	.word	0x20746e65
  40a61c:	74617473 	.word	0x74617473
  40a620:	6f207375 	.word	0x6f207375
  40a624:	68742066 	.word	0x68742066
  40a628:	61622065 	.word	0x61622065
  40a62c:	72657474 	.word	0x72657474
  40a630:	410d0a79 	.word	0x410d0a79
  40a634:	72657466 	.word	0x72657466
  40a638:	74656420 	.word	0x74656420
  40a63c:	696d7265 	.word	0x696d7265
  40a640:	676e696e 	.word	0x676e696e
  40a644:	65687420 	.word	0x65687420
  40a648:	73656220 	.word	0x73656220
  40a64c:	63612074 	.word	0x63612074
  40a650:	6e6f6974 	.word	0x6e6f6974
  40a654:	70797420 	.word	0x70797420
  40a658:	63222065 	.word	0x63222065
  40a65c:	6f742022 	.word	0x6f742022
  40a660:	6d657420 	.word	0x6d657420
  40a664:	61726f70 	.word	0x61726f70
  40a668:	796c6972 	.word	0x796c6972
  40a66c:	656c6320 	.word	0x656c6320
  40a670:	61207261 	.word	0x61207261
  40a674:	70206c6c 	.word	0x70206c6c
  40a678:	65746f72 	.word	0x65746f72
  40a67c:	6f697463 	.word	0x6f697463
  40a680:	0d0a736e 	.word	0x0d0a736e
  40a684:	5241575b 	.word	0x5241575b
  40a688:	474e494e 	.word	0x474e494e
  40a68c:	6877205d 	.word	0x6877205d
  40a690:	74206e65 	.word	0x74206e65
  40a694:	70206568 	.word	0x70206568
  40a698:	65746f72 	.word	0x65746f72
  40a69c:	6f697463 	.word	0x6f697463
  40a6a0:	6120736e 	.word	0x6120736e
  40a6a4:	63206572 	.word	0x63206572
  40a6a8:	7261656c 	.word	0x7261656c
  40a6ac:	202c6465 	.word	0x202c6465
  40a6b0:	20656874 	.word	0x20656874
  40a6b4:	20534d42 	.word	0x20534d42
  40a6b8:	6c6c6977 	.word	0x6c6c6977
  40a6bc:	6e676920 	.word	0x6e676920
  40a6c0:	2065726f 	.word	0x2065726f
  40a6c4:	206c6c61 	.word	0x206c6c61
  40a6c8:	746f7270 	.word	0x746f7270
  40a6cc:	69746365 	.word	0x69746365
  40a6d0:	20736e6f 	.word	0x20736e6f
  40a6d4:	6c6c6974 	.word	0x6c6c6974
  40a6d8:	65687420 	.word	0x65687420
  40a6dc:	74616220 	.word	0x74616220
  40a6e0:	79726574 	.word	0x79726574
  40a6e4:	20736920 	.word	0x20736920
  40a6e8:	62617473 	.word	0x62617473
  40a6ec:	6f20656c 	.word	0x6f20656c
  40a6f0:	2065636e 	.word	0x2065636e
  40a6f4:	69616761 	.word	0x69616761
  40a6f8:	200d0a6e 	.word	0x200d0a6e
  40a6fc:	73696854 	.word	0x73696854
  40a700:	20736920 	.word	0x20736920
  40a704:	69646e69 	.word	0x69646e69
  40a708:	65746163 	.word	0x65746163
  40a70c:	79622064 	.word	0x79622064
  40a710:	65687420 	.word	0x65687420
  40a714:	64657220 	.word	0x64657220
  40a718:	44454c20 	.word	0x44454c20
  40a71c:	72757420 	.word	0x72757420
  40a720:	676e696e 	.word	0x676e696e
  40a724:	66666f20 	.word	0x66666f20
  40a728:	000d0a2e 	.word	0x000d0a2e
  40a72c:	7265764f 	.word	0x7265764f
  40a730:	6d655420 	.word	0x6d655420
  40a734:	61726570 	.word	0x61726570
  40a738:	65727574 	.word	0x65727574
  40a73c:	6925093a 	.word	0x6925093a
  40a740:	00000d0a 	.word	0x00000d0a
  40a744:	65646e55 	.word	0x65646e55
  40a748:	65542072 	.word	0x65542072
  40a74c:	7265706d 	.word	0x7265706d
  40a750:	72757461 	.word	0x72757461
  40a754:	25093a65 	.word	0x25093a65
  40a758:	000d0a69 	.word	0x000d0a69
  40a75c:	7265764f 	.word	0x7265764f
  40a760:	6c6f5620 	.word	0x6c6f5620
  40a764:	65676174 	.word	0x65676174
  40a768:	2509093a 	.word	0x2509093a
  40a76c:	000d0a69 	.word	0x000d0a69
  40a770:	65646e55 	.word	0x65646e55
  40a774:	6f562072 	.word	0x6f562072
  40a778:	6761746c 	.word	0x6761746c
  40a77c:	09093a65 	.word	0x09093a65
  40a780:	0d0a6925 	.word	0x0d0a6925
  40a784:	00000000 	.word	0x00000000
  40a788:	7265764f 	.word	0x7265764f
  40a78c:	72754320 	.word	0x72754320
  40a790:	746e6572 	.word	0x746e6572
  40a794:	2509093a 	.word	0x2509093a
  40a798:	000d0a69 	.word	0x000d0a69
  40a79c:	6c6c6543 	.word	0x6c6c6543
  40a7a0:	626d4920 	.word	0x626d4920
  40a7a4:	6e616c61 	.word	0x6e616c61
  40a7a8:	093a6563 	.word	0x093a6563
  40a7ac:	0a692509 	.word	0x0a692509
  40a7b0:	0000000d 	.word	0x0000000d
  40a7b4:	6c6c6543 	.word	0x6c6c6543
  40a7b8:	5f69255f 	.word	0x5f69255f
  40a7bc:	746c6f76 	.word	0x746c6f76
  40a7c0:	2c656761 	.word	0x2c656761
  40a7c4:	252c6625 	.word	0x252c6625
  40a7c8:	66252c66 	.word	0x66252c66
  40a7cc:	00000d0a 	.word	0x00000d0a
  40a7d0:	5f747845 	.word	0x5f747845
  40a7d4:	706d6554 	.word	0x706d6554
  40a7d8:	2c69255f 	.word	0x2c69255f
  40a7dc:	252c6625 	.word	0x252c6625
  40a7e0:	66252c66 	.word	0x66252c66
  40a7e4:	00000d0a 	.word	0x00000d0a
  40a7e8:	72727543 	.word	0x72727543
  40a7ec:	2c746e65 	.word	0x2c746e65
  40a7f0:	252c6625 	.word	0x252c6625
  40a7f4:	66252c66 	.word	0x66252c66
  40a7f8:	00000d0a 	.word	0x00000d0a
  40a7fc:	6e756853 	.word	0x6e756853
  40a800:	65545f74 	.word	0x65545f74
  40a804:	252c706d 	.word	0x252c706d
  40a808:	66252c66 	.word	0x66252c66
  40a80c:	0a66252c 	.word	0x0a66252c
  40a810:	0000000d 	.word	0x0000000d
  40a814:	5f746546 	.word	0x5f746546
  40a818:	706d6554 	.word	0x706d6554
  40a81c:	2c66252c 	.word	0x2c66252c
  40a820:	252c6625 	.word	0x252c6625
  40a824:	000d0a66 	.word	0x000d0a66
  40a828:	7074754f 	.word	0x7074754f
  40a82c:	565f7475 	.word	0x565f7475
  40a830:	61746c6f 	.word	0x61746c6f
  40a834:	252c6567 	.word	0x252c6567
  40a838:	66252c66 	.word	0x66252c66
  40a83c:	0a66252c 	.word	0x0a66252c
  40a840:	0000000d 	.word	0x0000000d
  40a844:	00676f6c 	.word	0x00676f6c

0040a848 <_global_impure_ptr>:
  40a848:	20000190 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  40a858:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40a868:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a878:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a888:	0000296c 00000030                       l)..0...

0040a890 <blanks.7223>:
  40a890:	20202020 20202020 20202020 20202020                     

0040a8a0 <zeroes.7224>:
  40a8a0:	30303030 30303030 30303030 30303030     0000000000000000
  40a8b0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40a8c0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040a8d0 <__mprec_bigtens>:
  40a8d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40a8e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40a8f0:	7f73bf3c 75154fdd                       <.s..O.u

0040a8f8 <__mprec_tens>:
  40a8f8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40a908:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40a918:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40a928:	00000000 412e8480 00000000 416312d0     .......A......cA
  40a938:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a948:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a958:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a968:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a978:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a988:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a998:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a9a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a9b8:	79d99db4 44ea7843                       ...yCx.D

0040a9c0 <p05.6055>:
  40a9c0:	00000005 00000019 0000007d              ........}...

0040a9cc <_ctype_>:
  40a9cc:	20202000 20202020 28282020 20282828     .         ((((( 
  40a9dc:	20202020 20202020 20202020 20202020                     
  40a9ec:	10108820 10101010 10101010 10101010      ...............
  40a9fc:	04040410 04040404 10040404 10101010     ................
  40aa0c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40aa1c:	01010101 01010101 01010101 10101010     ................
  40aa2c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40aa3c:	02020202 02020202 02020202 10101010     ................
  40aa4c:	00000020 00000000 00000000 00000000      ...............
	...

0040aad0 <_init>:
  40aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40aad2:	bf00      	nop
  40aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40aad6:	bc08      	pop	{r3}
  40aad8:	469e      	mov	lr, r3
  40aada:	4770      	bx	lr

0040aadc <__init_array_start>:
  40aadc:	00407b39 	.word	0x00407b39

0040aae0 <__frame_dummy_init_array_entry>:
  40aae0:	004000f1                                ..@.

0040aae4 <_fini>:
  40aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40aae6:	bf00      	nop
  40aae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40aaea:	bc08      	pop	{r3}
  40aaec:	469e      	mov	lr, r3
  40aaee:	4770      	bx	lr

0040aaf0 <__fini_array_start>:
  40aaf0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <udi_api_cdc_comm>:
20000088:	0139 0040 0185 0040 01b9 0040 01b5 0040     9.@...@...@...@.
20000098:	0000 0000                                   ....

2000009c <udi_api_cdc_data>:
2000009c:	0501 0040 0195 0040 01b1 0040 01b5 0040     ..@...@...@...@.
200000ac:	03c1 0040                                   ..@.

200000b0 <udc_config>:
200000b0:	0108 2000 00bc 2000 0000 0000               ... ... ....

200000bc <udc_config_fs>:
200000bc:	00c4 2000 011c 2000                         ... ... 

200000c4 <udc_desc_fs>:
200000c4:	0209 0043 0102 c000 0900 0004 0100 0202     ..C.............
200000d4:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
200000e4:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
200000f4:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
20000104:	0040 0000                                   @...

20000108 <udc_device_desc>:
20000108:	0112 0200 0002 4000 03eb 2404 0100 0000     .......@...$....
20000118:	0100 0000                                   ....

2000011c <udi_apis>:
2000011c:	0088 2000 009c 2000                         ... ... 

20000124 <udc_string_desc_languageid>:
20000124:	0304 0409                                   ....

20000128 <g_interrupt_enabled>:
20000128:	0001 0000                                   ....

2000012c <SystemCoreClock>:
2000012c:	0900 003d                                   ..=.

20000130 <MovingAverageADCData>:
20000130:	0000 4080 0000 4080 0000 4080 0000 4080     ...@...@...@...@
20000140:	0000 4080 0000 4080 0000 41c8 0000 41c8     ...@...@...A...A
20000150:	0000 41c8 0000 41c8 0000 41c8 0000 41c8     ...A...A...A...A
20000160:	0000 4120 0000 41c8 0000 41c8 0000 41c0     .. A...A...A...A

20000170 <batteryStable>:
20000170:	0001 0000                                   ....

20000174 <cellMovingAverageCoef>:
20000174:	cccd 3f0c                                   ...?

20000178 <ctsCurrentMovingAverageCoef>:
20000178:	b717 3951                                   ..Q9

2000017c <istCurrentMovingAverageCoef>:
2000017c:	cccd 3f0c                                   ...?

20000180 <stackMovingAverageCoef>:
20000180:	cccd 3f0c                                   ...?

20000184 <tempMovingAverageCoef>:
20000184:	d70a 3ba3                                   ...;

20000188 <__fdlib_version>:
20000188:	0001 0000                                   ....

2000018c <_impure_ptr>:
2000018c:	0190 2000                                   ... 

20000190 <impure_data>:
20000190:	0000 0000 047c 2000 04e4 2000 054c 2000     ....|.. ... L.. 
	...
20000238:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000248:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200005b8 <__atexit_recursive_mutex>:
200005b8:	45f8 2000                                   .E. 

200005bc <__global_locale>:
200005bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000061c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000063c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000065c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000067c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2000069c:	9f11 0040 92f9 0040 0000 0000 a9cc 0040     ..@...@.......@.
200006ac:	a8cc 0040 a784 0040 a784 0040 a784 0040     ..@...@...@...@.
200006bc:	a784 0040 a784 0040 a784 0040 a784 0040     ..@...@...@...@.
200006cc:	a784 0040 a784 0040 ffff ffff ffff ffff     ..@...@.........
200006dc:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20000704:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000728 <__malloc_av_>:
	...
20000730:	0728 2000 0728 2000 0730 2000 0730 2000     (.. (.. 0.. 0.. 
20000740:	0738 2000 0738 2000 0740 2000 0740 2000     8.. 8.. @.. @.. 
20000750:	0748 2000 0748 2000 0750 2000 0750 2000     H.. H.. P.. P.. 
20000760:	0758 2000 0758 2000 0760 2000 0760 2000     X.. X.. `.. `.. 
20000770:	0768 2000 0768 2000 0770 2000 0770 2000     h.. h.. p.. p.. 
20000780:	0778 2000 0778 2000 0780 2000 0780 2000     x.. x.. ... ... 
20000790:	0788 2000 0788 2000 0790 2000 0790 2000     ... ... ... ... 
200007a0:	0798 2000 0798 2000 07a0 2000 07a0 2000     ... ... ... ... 
200007b0:	07a8 2000 07a8 2000 07b0 2000 07b0 2000     ... ... ... ... 
200007c0:	07b8 2000 07b8 2000 07c0 2000 07c0 2000     ... ... ... ... 
200007d0:	07c8 2000 07c8 2000 07d0 2000 07d0 2000     ... ... ... ... 
200007e0:	07d8 2000 07d8 2000 07e0 2000 07e0 2000     ... ... ... ... 
200007f0:	07e8 2000 07e8 2000 07f0 2000 07f0 2000     ... ... ... ... 
20000800:	07f8 2000 07f8 2000 0800 2000 0800 2000     ... ... ... ... 
20000810:	0808 2000 0808 2000 0810 2000 0810 2000     ... ... ... ... 
20000820:	0818 2000 0818 2000 0820 2000 0820 2000     ... ...  ..  .. 
20000830:	0828 2000 0828 2000 0830 2000 0830 2000     (.. (.. 0.. 0.. 
20000840:	0838 2000 0838 2000 0840 2000 0840 2000     8.. 8.. @.. @.. 
20000850:	0848 2000 0848 2000 0850 2000 0850 2000     H.. H.. P.. P.. 
20000860:	0858 2000 0858 2000 0860 2000 0860 2000     X.. X.. `.. `.. 
20000870:	0868 2000 0868 2000 0870 2000 0870 2000     h.. h.. p.. p.. 
20000880:	0878 2000 0878 2000 0880 2000 0880 2000     x.. x.. ... ... 
20000890:	0888 2000 0888 2000 0890 2000 0890 2000     ... ... ... ... 
200008a0:	0898 2000 0898 2000 08a0 2000 08a0 2000     ... ... ... ... 
200008b0:	08a8 2000 08a8 2000 08b0 2000 08b0 2000     ... ... ... ... 
200008c0:	08b8 2000 08b8 2000 08c0 2000 08c0 2000     ... ... ... ... 
200008d0:	08c8 2000 08c8 2000 08d0 2000 08d0 2000     ... ... ... ... 
200008e0:	08d8 2000 08d8 2000 08e0 2000 08e0 2000     ... ... ... ... 
200008f0:	08e8 2000 08e8 2000 08f0 2000 08f0 2000     ... ... ... ... 
20000900:	08f8 2000 08f8 2000 0900 2000 0900 2000     ... ... ... ... 
20000910:	0908 2000 0908 2000 0910 2000 0910 2000     ... ... ... ... 
20000920:	0918 2000 0918 2000 0920 2000 0920 2000     ... ...  ..  .. 
20000930:	0928 2000 0928 2000 0930 2000 0930 2000     (.. (.. 0.. 0.. 
20000940:	0938 2000 0938 2000 0940 2000 0940 2000     8.. 8.. @.. @.. 
20000950:	0948 2000 0948 2000 0950 2000 0950 2000     H.. H.. P.. P.. 
20000960:	0958 2000 0958 2000 0960 2000 0960 2000     X.. X.. `.. `.. 
20000970:	0968 2000 0968 2000 0970 2000 0970 2000     h.. h.. p.. p.. 
20000980:	0978 2000 0978 2000 0980 2000 0980 2000     x.. x.. ... ... 
20000990:	0988 2000 0988 2000 0990 2000 0990 2000     ... ... ... ... 
200009a0:	0998 2000 0998 2000 09a0 2000 09a0 2000     ... ... ... ... 
200009b0:	09a8 2000 09a8 2000 09b0 2000 09b0 2000     ... ... ... ... 
200009c0:	09b8 2000 09b8 2000 09c0 2000 09c0 2000     ... ... ... ... 
200009d0:	09c8 2000 09c8 2000 09d0 2000 09d0 2000     ... ... ... ... 
200009e0:	09d8 2000 09d8 2000 09e0 2000 09e0 2000     ... ... ... ... 
200009f0:	09e8 2000 09e8 2000 09f0 2000 09f0 2000     ... ... ... ... 
20000a00:	09f8 2000 09f8 2000 0a00 2000 0a00 2000     ... ... ... ... 
20000a10:	0a08 2000 0a08 2000 0a10 2000 0a10 2000     ... ... ... ... 
20000a20:	0a18 2000 0a18 2000 0a20 2000 0a20 2000     ... ...  ..  .. 
20000a30:	0a28 2000 0a28 2000 0a30 2000 0a30 2000     (.. (.. 0.. 0.. 
20000a40:	0a38 2000 0a38 2000 0a40 2000 0a40 2000     8.. 8.. @.. @.. 
20000a50:	0a48 2000 0a48 2000 0a50 2000 0a50 2000     H.. H.. P.. P.. 
20000a60:	0a58 2000 0a58 2000 0a60 2000 0a60 2000     X.. X.. `.. `.. 
20000a70:	0a68 2000 0a68 2000 0a70 2000 0a70 2000     h.. h.. p.. p.. 
20000a80:	0a78 2000 0a78 2000 0a80 2000 0a80 2000     x.. x.. ... ... 
20000a90:	0a88 2000 0a88 2000 0a90 2000 0a90 2000     ... ... ... ... 
20000aa0:	0a98 2000 0a98 2000 0aa0 2000 0aa0 2000     ... ... ... ... 
20000ab0:	0aa8 2000 0aa8 2000 0ab0 2000 0ab0 2000     ... ... ... ... 
20000ac0:	0ab8 2000 0ab8 2000 0ac0 2000 0ac0 2000     ... ... ... ... 
20000ad0:	0ac8 2000 0ac8 2000 0ad0 2000 0ad0 2000     ... ... ... ... 
20000ae0:	0ad8 2000 0ad8 2000 0ae0 2000 0ae0 2000     ... ... ... ... 
20000af0:	0ae8 2000 0ae8 2000 0af0 2000 0af0 2000     ... ... ... ... 
20000b00:	0af8 2000 0af8 2000 0b00 2000 0b00 2000     ... ... ... ... 
20000b10:	0b08 2000 0b08 2000 0b10 2000 0b10 2000     ... ... ... ... 
20000b20:	0b18 2000 0b18 2000 0b20 2000 0b20 2000     ... ...  ..  .. 

20000b30 <__malloc_sbrk_base>:
20000b30:	ffff ffff                                   ....

20000b34 <__malloc_trim_threshold>:
20000b34:	0000 0002                                   ....
