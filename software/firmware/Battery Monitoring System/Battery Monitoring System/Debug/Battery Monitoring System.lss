
Battery Monitoring System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009dec  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409dec  00409dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a58  20000000  00409df4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000377c  20000a58  0040a84c  00020a58  2**2
                  ALLOC
  4 .stack        00003004  200041d4  0040dfc8  00020a58  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020a58  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020a82  2**0
                  CONTENTS, READONLY
  7 .debug_info   000226db  00000000  00000000  00020adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004763  00000000  00000000  000431b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e50  00000000  00000000  00047919  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00016b25  00000000  00000000  00048769  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000127d7  00000000  00000000  0005f28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000544f2  00000000  00000000  00071a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008480  00000000  00000000  000c5f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f00  00000000  00000000  000ce3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002f38  00000000  00000000  000cf2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 71 00 20 d1 34 40 00 cd 34 40 00 cd 34 40 00     .q. .4@..4@..4@.
  400010:	cd 34 40 00 cd 34 40 00 cd 34 40 00 00 00 00 00     .4@..4@..4@.....
	...
  40002c:	cd 34 40 00 cd 34 40 00 00 00 00 00 cd 34 40 00     .4@..4@......4@.
  40003c:	cd 34 40 00 cd 34 40 00 cd 34 40 00 cd 34 40 00     .4@..4@..4@..4@.
  40004c:	3d 27 40 00 cd 34 40 00 cd 34 40 00 cd 34 40 00     ='@..4@..4@..4@.
  40005c:	00 00 00 00 91 2b 40 00 9d 2b 40 00 00 00 00 00     .....+@..+@.....
  40006c:	e5 26 40 00 31 0f 40 00 00 00 00 00 cd 34 40 00     .&@.1.@......4@.
	...
  40008c:	cd 34 40 00 cd 34 40 00 cd 34 40 00 cd 34 40 00     .4@..4@..4@..4@.
  40009c:	51 41 40 00 7d 41 40 00 cd 34 40 00 00 00 00 00     QA@.}A@..4@.....
	...
  4000b4:	05 40 40 00 00 00 00 00 cd 34 40 00 cd 34 40 00     .@@......4@..4@.
  4000c4:	cd 34 40 00 e1 15 40 00                             .4@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000a58 	.word	0x20000a58
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00409df4 	.word	0x00409df4

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00409df4 	.word	0x00409df4
  40012c:	20000a5c 	.word	0x20000a5c
  400130:	00409df4 	.word	0x00409df4
  400134:	00000000 	.word	0x00000000

00400138 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400138:	490e      	ldr	r1, [pc, #56]	; (400174 <udi_cdc_comm_enable+0x3c>)
  40013a:	2300      	movs	r3, #0
  40013c:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40013e:	4a0e      	ldr	r2, [pc, #56]	; (400178 <udi_cdc_comm_enable+0x40>)
  400140:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400142:	4a0e      	ldr	r2, [pc, #56]	; (40017c <udi_cdc_comm_enable+0x44>)
  400144:	20a1      	movs	r0, #161	; 0xa1
  400146:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400148:	2020      	movs	r0, #32
  40014a:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40014c:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40014e:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400150:	2002      	movs	r0, #2
  400152:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400154:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400156:	4a0a      	ldr	r2, [pc, #40]	; (400180 <udi_cdc_comm_enable+0x48>)
  400158:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  40015c:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40015e:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400160:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400162:	2308      	movs	r3, #8
  400164:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400166:	780b      	ldrb	r3, [r1, #0]
  400168:	3301      	adds	r3, #1
  40016a:	b2db      	uxtb	r3, r3
  40016c:	700b      	strb	r3, [r1, #0]
	return true;
}
  40016e:	2001      	movs	r0, #1
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	20000a7f 	.word	0x20000a7f
  400178:	20000b14 	.word	0x20000b14
  40017c:	20000bac 	.word	0x20000bac
  400180:	20000a78 	.word	0x20000a78

00400184 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400184:	4a02      	ldr	r2, [pc, #8]	; (400190 <udi_cdc_comm_disable+0xc>)
  400186:	7813      	ldrb	r3, [r2, #0]
  400188:	3b01      	subs	r3, #1
  40018a:	b2db      	uxtb	r3, r3
  40018c:	7013      	strb	r3, [r2, #0]
  40018e:	4770      	bx	lr
  400190:	20000a7f 	.word	0x20000a7f

00400194 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400194:	4a04      	ldr	r2, [pc, #16]	; (4001a8 <udi_cdc_data_disable+0x14>)
  400196:	7813      	ldrb	r3, [r2, #0]
  400198:	3b01      	subs	r3, #1
  40019a:	b2db      	uxtb	r3, r3
  40019c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  40019e:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001a0:	2200      	movs	r2, #0
  4001a2:	4b02      	ldr	r3, [pc, #8]	; (4001ac <udi_cdc_data_disable+0x18>)
  4001a4:	701a      	strb	r2, [r3, #0]
  4001a6:	4770      	bx	lr
  4001a8:	20000a80 	.word	0x20000a80
  4001ac:	20000a76 	.word	0x20000a76

004001b0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b0:	2000      	movs	r0, #0
  4001b2:	4770      	bx	lr

004001b4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001b4:	2000      	movs	r0, #0
  4001b6:	4770      	bx	lr

004001b8 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001b8:	4b1d      	ldr	r3, [pc, #116]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001ba:	781b      	ldrb	r3, [r3, #0]
  4001bc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001c0:	d105      	bne.n	4001ce <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001c6:	2b20      	cmp	r3, #32
  4001c8:	d018      	beq.n	4001fc <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001ca:	2000      	movs	r0, #0
  4001cc:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001d2:	2b20      	cmp	r3, #32
  4001d4:	d001      	beq.n	4001da <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  4001d6:	2000      	movs	r0, #0
  4001d8:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001da:	4b15      	ldr	r3, [pc, #84]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001dc:	785b      	ldrb	r3, [r3, #1]
  4001de:	2b21      	cmp	r3, #33	; 0x21
  4001e0:	d124      	bne.n	40022c <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  4001e2:	4b13      	ldr	r3, [pc, #76]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e4:	88db      	ldrh	r3, [r3, #6]
  4001e6:	2b07      	cmp	r3, #7
  4001e8:	d001      	beq.n	4001ee <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  4001ea:	2000      	movs	r0, #0
  4001ec:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <udi_cdc_comm_setup+0x7c>)
  4001f2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4001f4:	2207      	movs	r2, #7
  4001f6:	819a      	strh	r2, [r3, #12]
				return true;
  4001f8:	2001      	movs	r0, #1
  4001fa:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001fc:	4b0c      	ldr	r3, [pc, #48]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001fe:	7858      	ldrb	r0, [r3, #1]
  400200:	2820      	cmp	r0, #32
  400202:	d004      	beq.n	40020e <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400204:	2822      	cmp	r0, #34	; 0x22
  400206:	bf14      	ite	ne
  400208:	2000      	movne	r0, #0
  40020a:	2001      	moveq	r0, #1
  40020c:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  40020e:	4b08      	ldr	r3, [pc, #32]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400210:	88db      	ldrh	r3, [r3, #6]
  400212:	2b07      	cmp	r3, #7
  400214:	d001      	beq.n	40021a <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  400216:	2000      	movs	r0, #0
}
  400218:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <udi_cdc_comm_setup+0x78>)
  40021c:	4a06      	ldr	r2, [pc, #24]	; (400238 <udi_cdc_comm_setup+0x80>)
  40021e:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400220:	4a04      	ldr	r2, [pc, #16]	; (400234 <udi_cdc_comm_setup+0x7c>)
  400222:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400224:	2207      	movs	r2, #7
  400226:	819a      	strh	r2, [r3, #12]
				return true;
  400228:	2001      	movs	r0, #1
  40022a:	4770      	bx	lr
	return false;  // request Not supported
  40022c:	2000      	movs	r0, #0
  40022e:	4770      	bx	lr
  400230:	200014e0 	.word	0x200014e0
  400234:	20000a78 	.word	0x20000a78
  400238:	0040023d 	.word	0x0040023d

0040023c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  40023c:	4770      	bx	lr
	...

00400240 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400240:	4b44      	ldr	r3, [pc, #272]	; (400354 <udi_cdc_tx_send+0x114>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b103      	cbz	r3, 400248 <udi_cdc_tx_send+0x8>
  400246:	4770      	bx	lr
{
  400248:	b570      	push	{r4, r5, r6, lr}
  40024a:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40024c:	4b42      	ldr	r3, [pc, #264]	; (400358 <udi_cdc_tx_send+0x118>)
  40024e:	4798      	blx	r3
  400250:	2800      	cmp	r0, #0
  400252:	d041      	beq.n	4002d8 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400254:	4b41      	ldr	r3, [pc, #260]	; (40035c <udi_cdc_tx_send+0x11c>)
  400256:	881c      	ldrh	r4, [r3, #0]
  400258:	4b41      	ldr	r3, [pc, #260]	; (400360 <udi_cdc_tx_send+0x120>)
  40025a:	4798      	blx	r3
  40025c:	4284      	cmp	r4, r0
  40025e:	d076      	beq.n	40034e <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400260:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400264:	fab3 f383 	clz	r3, r3
  400268:	095b      	lsrs	r3, r3, #5
  40026a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40026c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40026e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400272:	2200      	movs	r2, #0
  400274:	4b3b      	ldr	r3, [pc, #236]	; (400364 <udi_cdc_tx_send+0x124>)
  400276:	701a      	strb	r2, [r3, #0]
	return flags;
  400278:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40027a:	4b3b      	ldr	r3, [pc, #236]	; (400368 <udi_cdc_tx_send+0x128>)
  40027c:	781c      	ldrb	r4, [r3, #0]
  40027e:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400280:	4b3a      	ldr	r3, [pc, #232]	; (40036c <udi_cdc_tx_send+0x12c>)
  400282:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400286:	2b00      	cmp	r3, #0
  400288:	d02d      	beq.n	4002e6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40028a:	2200      	movs	r2, #0
  40028c:	4b38      	ldr	r3, [pc, #224]	; (400370 <udi_cdc_tx_send+0x130>)
  40028e:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400290:	4b38      	ldr	r3, [pc, #224]	; (400374 <udi_cdc_tx_send+0x134>)
  400292:	781b      	ldrb	r3, [r3, #0]
  400294:	2b00      	cmp	r3, #0
  400296:	d142      	bne.n	40031e <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400298:	fab4 f384 	clz	r3, r4
  40029c:	095b      	lsrs	r3, r3, #5
  40029e:	4a32      	ldr	r2, [pc, #200]	; (400368 <udi_cdc_tx_send+0x128>)
  4002a0:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002a2:	2201      	movs	r2, #1
  4002a4:	4b2b      	ldr	r3, [pc, #172]	; (400354 <udi_cdc_tx_send+0x114>)
  4002a6:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002a8:	b125      	cbz	r5, 4002b4 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002aa:	4b2e      	ldr	r3, [pc, #184]	; (400364 <udi_cdc_tx_send+0x124>)
  4002ac:	701a      	strb	r2, [r3, #0]
  4002ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002b2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002b4:	4626      	mov	r6, r4
  4002b6:	4b2d      	ldr	r3, [pc, #180]	; (40036c <udi_cdc_tx_send+0x12c>)
  4002b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002bc:	2b40      	cmp	r3, #64	; 0x40
  4002be:	bf14      	ite	ne
  4002c0:	2501      	movne	r5, #1
  4002c2:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002c4:	d034      	beq.n	400330 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4002c6:	4b24      	ldr	r3, [pc, #144]	; (400358 <udi_cdc_tx_send+0x118>)
  4002c8:	4798      	blx	r3
  4002ca:	2800      	cmp	r0, #0
  4002cc:	d02b      	beq.n	400326 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002ce:	4b24      	ldr	r3, [pc, #144]	; (400360 <udi_cdc_tx_send+0x120>)
  4002d0:	4798      	blx	r3
  4002d2:	4b22      	ldr	r3, [pc, #136]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002d4:	8018      	strh	r0, [r3, #0]
  4002d6:	e02e      	b.n	400336 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4002d8:	4b20      	ldr	r3, [pc, #128]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002da:	881c      	ldrh	r4, [r3, #0]
  4002dc:	4b26      	ldr	r3, [pc, #152]	; (400378 <udi_cdc_tx_send+0x138>)
  4002de:	4798      	blx	r3
  4002e0:	4284      	cmp	r4, r0
  4002e2:	d1bd      	bne.n	400260 <udi_cdc_tx_send+0x20>
  4002e4:	e033      	b.n	40034e <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4002e6:	4a22      	ldr	r2, [pc, #136]	; (400370 <udi_cdc_tx_send+0x130>)
  4002e8:	8813      	ldrh	r3, [r2, #0]
  4002ea:	3301      	adds	r3, #1
  4002ec:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002ee:	4b1a      	ldr	r3, [pc, #104]	; (400358 <udi_cdc_tx_send+0x118>)
  4002f0:	4798      	blx	r3
  4002f2:	b918      	cbnz	r0, 4002fc <udi_cdc_tx_send+0xbc>
  4002f4:	4b1e      	ldr	r3, [pc, #120]	; (400370 <udi_cdc_tx_send+0x130>)
  4002f6:	881b      	ldrh	r3, [r3, #0]
  4002f8:	2b63      	cmp	r3, #99	; 0x63
  4002fa:	d908      	bls.n	40030e <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4002fc:	4b16      	ldr	r3, [pc, #88]	; (400358 <udi_cdc_tx_send+0x118>)
  4002fe:	4798      	blx	r3
  400300:	2800      	cmp	r0, #0
  400302:	d0c2      	beq.n	40028a <udi_cdc_tx_send+0x4a>
  400304:	4b1a      	ldr	r3, [pc, #104]	; (400370 <udi_cdc_tx_send+0x130>)
  400306:	881b      	ldrh	r3, [r3, #0]
  400308:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40030c:	d2bd      	bcs.n	40028a <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  40030e:	b1f5      	cbz	r5, 40034e <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  400310:	2201      	movs	r2, #1
  400312:	4b14      	ldr	r3, [pc, #80]	; (400364 <udi_cdc_tx_send+0x124>)
  400314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40031a:	b662      	cpsie	i
  40031c:	e017      	b.n	40034e <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40031e:	fab4 f484 	clz	r4, r4
  400322:	0964      	lsrs	r4, r4, #5
  400324:	e7bd      	b.n	4002a2 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400326:	4b14      	ldr	r3, [pc, #80]	; (400378 <udi_cdc_tx_send+0x138>)
  400328:	4798      	blx	r3
  40032a:	4b0c      	ldr	r3, [pc, #48]	; (40035c <udi_cdc_tx_send+0x11c>)
  40032c:	8018      	strh	r0, [r3, #0]
  40032e:	e002      	b.n	400336 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400330:	2200      	movs	r2, #0
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <udi_cdc_tx_send+0x11c>)
  400334:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400336:	4b0d      	ldr	r3, [pc, #52]	; (40036c <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400338:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  40033c:	4a0f      	ldr	r2, [pc, #60]	; (40037c <udi_cdc_tx_send+0x13c>)
  40033e:	9200      	str	r2, [sp, #0]
  400340:	4a0f      	ldr	r2, [pc, #60]	; (400380 <udi_cdc_tx_send+0x140>)
  400342:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400346:	4629      	mov	r1, r5
  400348:	2081      	movs	r0, #129	; 0x81
  40034a:	4c0e      	ldr	r4, [pc, #56]	; (400384 <udi_cdc_tx_send+0x144>)
  40034c:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40034e:	b004      	add	sp, #16
  400350:	bd70      	pop	{r4, r5, r6, pc}
  400352:	bf00      	nop
  400354:	20000ba8 	.word	0x20000ba8
  400358:	00402041 	.word	0x00402041
  40035c:	20000ba4 	.word	0x20000ba4
  400360:	004020ad 	.word	0x004020ad
  400364:	200000a0 	.word	0x200000a0
  400368:	20000ba0 	.word	0x20000ba0
  40036c:	20000b9c 	.word	0x20000b9c
  400370:	20000a74 	.word	0x20000a74
  400374:	20000b18 	.word	0x20000b18
  400378:	0040209d 	.word	0x0040209d
  40037c:	00400389 	.word	0x00400389
  400380:	20000b1c 	.word	0x20000b1c
  400384:	00402405 	.word	0x00402405

00400388 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400388:	b100      	cbz	r0, 40038c <udi_cdc_data_sent+0x4>
  40038a:	4770      	bx	lr
{
  40038c:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40038e:	4b07      	ldr	r3, [pc, #28]	; (4003ac <udi_cdc_data_sent+0x24>)
  400390:	781b      	ldrb	r3, [r3, #0]
  400392:	fab3 f383 	clz	r3, r3
  400396:	095b      	lsrs	r3, r3, #5
  400398:	4a05      	ldr	r2, [pc, #20]	; (4003b0 <udi_cdc_data_sent+0x28>)
  40039a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40039e:	4b05      	ldr	r3, [pc, #20]	; (4003b4 <udi_cdc_data_sent+0x2c>)
  4003a0:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003a2:	4b05      	ldr	r3, [pc, #20]	; (4003b8 <udi_cdc_data_sent+0x30>)
  4003a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  4003a6:	4b05      	ldr	r3, [pc, #20]	; (4003bc <udi_cdc_data_sent+0x34>)
  4003a8:	4798      	blx	r3
  4003aa:	bd08      	pop	{r3, pc}
  4003ac:	20000ba0 	.word	0x20000ba0
  4003b0:	20000b9c 	.word	0x20000b9c
  4003b4:	20000b18 	.word	0x20000b18
  4003b8:	20000ba8 	.word	0x20000ba8
  4003bc:	00400241 	.word	0x00400241

004003c0 <udi_cdc_data_sof_notify>:
{
  4003c0:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  4003c2:	2000      	movs	r0, #0
  4003c4:	4b01      	ldr	r3, [pc, #4]	; (4003cc <udi_cdc_data_sof_notify+0xc>)
  4003c6:	4798      	blx	r3
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	00400241 	.word	0x00400241

004003d0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003d0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003d2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003d6:	fab3 f383 	clz	r3, r3
  4003da:	095b      	lsrs	r3, r3, #5
  4003dc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4003e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003e4:	2200      	movs	r2, #0
  4003e6:	4b0b      	ldr	r3, [pc, #44]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  4003e8:	701a      	strb	r2, [r3, #0]
	return flags;
  4003ea:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4003ec:	4b0a      	ldr	r3, [pc, #40]	; (400418 <udi_cdc_multi_get_nb_received_data+0x48>)
  4003ee:	8818      	ldrh	r0, [r3, #0]
  4003f0:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4003f2:	4a0a      	ldr	r2, [pc, #40]	; (40041c <udi_cdc_multi_get_nb_received_data+0x4c>)
  4003f4:	7812      	ldrb	r2, [r2, #0]
  4003f6:	b2d2      	uxtb	r2, r2
  4003f8:	4809      	ldr	r0, [pc, #36]	; (400420 <udi_cdc_multi_get_nb_received_data+0x50>)
  4003fa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  4003fe:	b280      	uxth	r0, r0
  400400:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  400402:	b129      	cbz	r1, 400410 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400404:	2201      	movs	r2, #1
  400406:	4b03      	ldr	r3, [pc, #12]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  400408:	701a      	strb	r2, [r3, #0]
  40040a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40040e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400410:	b002      	add	sp, #8
  400412:	4770      	bx	lr
  400414:	200000a0 	.word	0x200000a0
  400418:	20000b0c 	.word	0x20000b0c
  40041c:	20000b08 	.word	0x20000b08
  400420:	20000b04 	.word	0x20000b04

00400424 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
  400424:	b508      	push	{r3, lr}
	return udi_cdc_multi_get_nb_received_data(0);
  400426:	2000      	movs	r0, #0
  400428:	4b01      	ldr	r3, [pc, #4]	; (400430 <udi_cdc_get_nb_received_data+0xc>)
  40042a:	4798      	blx	r3
}
  40042c:	bd08      	pop	{r3, pc}
  40042e:	bf00      	nop
  400430:	004003d1 	.word	0x004003d1

00400434 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400434:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400436:	4b03      	ldr	r3, [pc, #12]	; (400444 <udi_cdc_multi_is_rx_ready+0x10>)
  400438:	4798      	blx	r3
}
  40043a:	3000      	adds	r0, #0
  40043c:	bf18      	it	ne
  40043e:	2001      	movne	r0, #1
  400440:	bd08      	pop	{r3, pc}
  400442:	bf00      	nop
  400444:	004003d1 	.word	0x004003d1

00400448 <udi_cdc_rx_start>:
{
  400448:	b510      	push	{r4, lr}
  40044a:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40044c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400450:	fab3 f383 	clz	r3, r3
  400454:	095b      	lsrs	r3, r3, #5
  400456:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400458:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40045a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40045e:	2200      	movs	r2, #0
  400460:	4b1e      	ldr	r3, [pc, #120]	; (4004dc <udi_cdc_rx_start+0x94>)
  400462:	701a      	strb	r2, [r3, #0]
	return flags;
  400464:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400466:	4a1e      	ldr	r2, [pc, #120]	; (4004e0 <udi_cdc_rx_start+0x98>)
  400468:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  40046a:	4a1e      	ldr	r2, [pc, #120]	; (4004e4 <udi_cdc_rx_start+0x9c>)
  40046c:	7812      	ldrb	r2, [r2, #0]
  40046e:	b94a      	cbnz	r2, 400484 <udi_cdc_rx_start+0x3c>
  400470:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400472:	4a1d      	ldr	r2, [pc, #116]	; (4004e8 <udi_cdc_rx_start+0xa0>)
  400474:	8811      	ldrh	r1, [r2, #0]
  400476:	b289      	uxth	r1, r1
  400478:	4a1c      	ldr	r2, [pc, #112]	; (4004ec <udi_cdc_rx_start+0xa4>)
  40047a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40047e:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400480:	4291      	cmp	r1, r2
  400482:	d209      	bcs.n	400498 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b33b      	cbz	r3, 4004d6 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b14      	ldr	r3, [pc, #80]	; (4004dc <udi_cdc_rx_start+0x94>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
		return false;
  400492:	2000      	movs	r0, #0
}
  400494:	b004      	add	sp, #16
  400496:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  400498:	2100      	movs	r1, #0
  40049a:	4a13      	ldr	r2, [pc, #76]	; (4004e8 <udi_cdc_rx_start+0xa0>)
  40049c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40049e:	fab4 f284 	clz	r2, r4
  4004a2:	0952      	lsrs	r2, r2, #5
  4004a4:	490e      	ldr	r1, [pc, #56]	; (4004e0 <udi_cdc_rx_start+0x98>)
  4004a6:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  4004a8:	2101      	movs	r1, #1
  4004aa:	4a0e      	ldr	r2, [pc, #56]	; (4004e4 <udi_cdc_rx_start+0x9c>)
  4004ac:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  4004ae:	b123      	cbz	r3, 4004ba <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004b0:	4b0a      	ldr	r3, [pc, #40]	; (4004dc <udi_cdc_rx_start+0x94>)
  4004b2:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4004b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004b8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004ba:	2000      	movs	r0, #0
  4004bc:	4b0c      	ldr	r3, [pc, #48]	; (4004f0 <udi_cdc_rx_start+0xa8>)
  4004be:	4798      	blx	r3
	return udd_ep_run(ep,
  4004c0:	4b0c      	ldr	r3, [pc, #48]	; (4004f4 <udi_cdc_rx_start+0xac>)
  4004c2:	9300      	str	r3, [sp, #0]
  4004c4:	2340      	movs	r3, #64	; 0x40
  4004c6:	4a0c      	ldr	r2, [pc, #48]	; (4004f8 <udi_cdc_rx_start+0xb0>)
  4004c8:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004cc:	2101      	movs	r1, #1
  4004ce:	2002      	movs	r0, #2
  4004d0:	4c0a      	ldr	r4, [pc, #40]	; (4004fc <udi_cdc_rx_start+0xb4>)
  4004d2:	47a0      	blx	r4
  4004d4:	e7de      	b.n	400494 <udi_cdc_rx_start+0x4c>
		return false;
  4004d6:	2000      	movs	r0, #0
  4004d8:	e7dc      	b.n	400494 <udi_cdc_rx_start+0x4c>
  4004da:	bf00      	nop
  4004dc:	200000a0 	.word	0x200000a0
  4004e0:	20000b08 	.word	0x20000b08
  4004e4:	20000b10 	.word	0x20000b10
  4004e8:	20000b0c 	.word	0x20000b0c
  4004ec:	20000b04 	.word	0x20000b04
  4004f0:	00400435 	.word	0x00400435
  4004f4:	00400595 	.word	0x00400595
  4004f8:	20000a84 	.word	0x20000a84
  4004fc:	00402405 	.word	0x00402405

00400500 <udi_cdc_data_enable>:
{
  400500:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  400502:	2400      	movs	r4, #0
  400504:	4b16      	ldr	r3, [pc, #88]	; (400560 <udi_cdc_data_enable+0x60>)
  400506:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400508:	4b16      	ldr	r3, [pc, #88]	; (400564 <udi_cdc_data_enable+0x64>)
  40050a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40050c:	4b16      	ldr	r3, [pc, #88]	; (400568 <udi_cdc_data_enable+0x68>)
  40050e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400510:	4b16      	ldr	r3, [pc, #88]	; (40056c <udi_cdc_data_enable+0x6c>)
  400512:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400514:	4b16      	ldr	r3, [pc, #88]	; (400570 <udi_cdc_data_enable+0x70>)
  400516:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400518:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40051a:	4b16      	ldr	r3, [pc, #88]	; (400574 <udi_cdc_data_enable+0x74>)
  40051c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40051e:	4620      	mov	r0, r4
  400520:	4b15      	ldr	r3, [pc, #84]	; (400578 <udi_cdc_data_enable+0x78>)
  400522:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400524:	4b15      	ldr	r3, [pc, #84]	; (40057c <udi_cdc_data_enable+0x7c>)
  400526:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400528:	4b15      	ldr	r3, [pc, #84]	; (400580 <udi_cdc_data_enable+0x80>)
  40052a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40052c:	4b15      	ldr	r3, [pc, #84]	; (400584 <udi_cdc_data_enable+0x84>)
  40052e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400530:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  400532:	4b15      	ldr	r3, [pc, #84]	; (400588 <udi_cdc_data_enable+0x88>)
  400534:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400536:	4620      	mov	r0, r4
  400538:	4b14      	ldr	r3, [pc, #80]	; (40058c <udi_cdc_data_enable+0x8c>)
  40053a:	4798      	blx	r3
  40053c:	4601      	mov	r1, r0
  40053e:	b140      	cbz	r0, 400552 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400540:	4a07      	ldr	r2, [pc, #28]	; (400560 <udi_cdc_data_enable+0x60>)
  400542:	7813      	ldrb	r3, [r2, #0]
  400544:	3301      	adds	r3, #1
  400546:	b2db      	uxtb	r3, r3
  400548:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40054a:	7813      	ldrb	r3, [r2, #0]
  40054c:	b2db      	uxtb	r3, r3
  40054e:	2b01      	cmp	r3, #1
  400550:	d001      	beq.n	400556 <udi_cdc_data_enable+0x56>
}
  400552:	4608      	mov	r0, r1
  400554:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  400556:	2201      	movs	r2, #1
  400558:	4b0d      	ldr	r3, [pc, #52]	; (400590 <udi_cdc_data_enable+0x90>)
  40055a:	701a      	strb	r2, [r3, #0]
  40055c:	e7f9      	b.n	400552 <udi_cdc_data_enable+0x52>
  40055e:	bf00      	nop
  400560:	20000a80 	.word	0x20000a80
  400564:	20000ba8 	.word	0x20000ba8
  400568:	20000b18 	.word	0x20000b18
  40056c:	20000ba0 	.word	0x20000ba0
  400570:	20000b9c 	.word	0x20000b9c
  400574:	20000ba4 	.word	0x20000ba4
  400578:	00400241 	.word	0x00400241
  40057c:	20000b10 	.word	0x20000b10
  400580:	20000b08 	.word	0x20000b08
  400584:	20000b04 	.word	0x20000b04
  400588:	20000b0c 	.word	0x20000b0c
  40058c:	00400449 	.word	0x00400449
  400590:	20000a76 	.word	0x20000a76

00400594 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400594:	b9e8      	cbnz	r0, 4005d2 <udi_cdc_data_received+0x3e>
{
  400596:	b510      	push	{r4, lr}
  400598:	b082      	sub	sp, #8
  40059a:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <udi_cdc_data_received+0x40>)
  40059e:	781c      	ldrb	r4, [r3, #0]
  4005a0:	fab4 f484 	clz	r4, r4
  4005a4:	0964      	lsrs	r4, r4, #5
	if (!n) {
  4005a6:	b151      	cbz	r1, 4005be <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4005a8:	b289      	uxth	r1, r1
  4005aa:	4b0b      	ldr	r3, [pc, #44]	; (4005d8 <udi_cdc_data_received+0x44>)
  4005ac:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005b0:	2000      	movs	r0, #0
  4005b2:	4b0a      	ldr	r3, [pc, #40]	; (4005dc <udi_cdc_data_received+0x48>)
  4005b4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005b6:	4b0a      	ldr	r3, [pc, #40]	; (4005e0 <udi_cdc_data_received+0x4c>)
  4005b8:	4798      	blx	r3
}
  4005ba:	b002      	add	sp, #8
  4005bc:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  4005be:	4b09      	ldr	r3, [pc, #36]	; (4005e4 <udi_cdc_data_received+0x50>)
  4005c0:	9300      	str	r3, [sp, #0]
  4005c2:	2340      	movs	r3, #64	; 0x40
  4005c4:	4a08      	ldr	r2, [pc, #32]	; (4005e8 <udi_cdc_data_received+0x54>)
  4005c6:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4005ca:	2101      	movs	r1, #1
  4005cc:	4c07      	ldr	r4, [pc, #28]	; (4005ec <udi_cdc_data_received+0x58>)
  4005ce:	47a0      	blx	r4
		return;
  4005d0:	e7f3      	b.n	4005ba <udi_cdc_data_received+0x26>
  4005d2:	4770      	bx	lr
  4005d4:	20000b08 	.word	0x20000b08
  4005d8:	20000b04 	.word	0x20000b04
  4005dc:	20000b10 	.word	0x20000b10
  4005e0:	00400449 	.word	0x00400449
  4005e4:	00400595 	.word	0x00400595
  4005e8:	20000a84 	.word	0x20000a84
  4005ec:	00402405 	.word	0x00402405

004005f0 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
  4005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4005f4:	b082      	sub	sp, #8

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4005f6:	4b25      	ldr	r3, [pc, #148]	; (40068c <udi_cdc_multi_getc+0x9c>)
  4005f8:	f893 8006 	ldrb.w	r8, [r3, #6]
  4005fc:	f1b8 0f09 	cmp.w	r8, #9
  400600:	bf14      	ite	ne
  400602:	f04f 0800 	movne.w	r8, #0
  400606:	f04f 0801 	moveq.w	r8, #1
	int rx_data = 0;
  40060a:	f04f 0a00 	mov.w	sl, #0
	cpu_irq_disable();
  40060e:	4c20      	ldr	r4, [pc, #128]	; (400690 <udi_cdc_multi_getc+0xa0>)
  400610:	46d1      	mov	r9, sl
  400612:	4657      	mov	r7, sl

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400614:	4d1f      	ldr	r5, [pc, #124]	; (400694 <udi_cdc_multi_getc+0xa4>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  400616:	4e20      	ldr	r6, [pc, #128]	; (400698 <udi_cdc_multi_getc+0xa8>)
  400618:	e004      	b.n	400624 <udi_cdc_multi_getc+0x34>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
  40061a:	428b      	cmp	r3, r1
  40061c:	d323      	bcc.n	400666 <udi_cdc_multi_getc+0x76>
		if (!udi_cdc_data_running) {
  40061e:	4b1f      	ldr	r3, [pc, #124]	; (40069c <udi_cdc_multi_getc+0xac>)
  400620:	781b      	ldrb	r3, [r3, #0]
  400622:	b1d3      	cbz	r3, 40065a <udi_cdc_multi_getc+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400624:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400628:	fab3 f383 	clz	r3, r3
  40062c:	095b      	lsrs	r3, r3, #5
  40062e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400630:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400632:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400636:	7027      	strb	r7, [r4, #0]
	return flags;
  400638:	9801      	ldr	r0, [sp, #4]
	pos = udi_cdc_rx_pos[port];
  40063a:	882b      	ldrh	r3, [r5, #0]
  40063c:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  40063e:	7832      	ldrb	r2, [r6, #0]
  400640:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  400642:	4917      	ldr	r1, [pc, #92]	; (4006a0 <udi_cdc_multi_getc+0xb0>)
  400644:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400648:	b289      	uxth	r1, r1
	if (cpu_irq_is_enabled_flags(flags))
  40064a:	2800      	cmp	r0, #0
  40064c:	d0e5      	beq.n	40061a <udi_cdc_multi_getc+0x2a>
		cpu_irq_enable();
  40064e:	2001      	movs	r0, #1
  400650:	7020      	strb	r0, [r4, #0]
  400652:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400656:	b662      	cpsie	i
  400658:	e7df      	b.n	40061a <udi_cdc_multi_getc+0x2a>
			return 0;
  40065a:	f04f 0a00 	mov.w	sl, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  40065e:	4650      	mov	r0, sl
  400660:	b002      	add	sp, #8
  400662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400666:	490f      	ldr	r1, [pc, #60]	; (4006a4 <udi_cdc_multi_getc+0xb4>)
  400668:	eb01 1282 	add.w	r2, r1, r2, lsl #6
  40066c:	5cd2      	ldrb	r2, [r2, r3]
  40066e:	ea42 0a0a 	orr.w	sl, r2, sl
	udi_cdc_rx_pos[port] = pos+1;
  400672:	3301      	adds	r3, #1
  400674:	b29b      	uxth	r3, r3
  400676:	802b      	strh	r3, [r5, #0]
	udi_cdc_rx_start(port);
  400678:	4648      	mov	r0, r9
  40067a:	4b0b      	ldr	r3, [pc, #44]	; (4006a8 <udi_cdc_multi_getc+0xb8>)
  40067c:	4798      	blx	r3
	if (b_databit_9) {
  40067e:	f1b8 0f00 	cmp.w	r8, #0
  400682:	d0ec      	beq.n	40065e <udi_cdc_multi_getc+0x6e>
		rx_data = rx_data << 8;
  400684:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
		b_databit_9 = false;
  400688:	46c8      	mov	r8, r9
		goto udi_cdc_getc_process_one_byte;
  40068a:	e7cb      	b.n	400624 <udi_cdc_multi_getc+0x34>
  40068c:	20000a78 	.word	0x20000a78
  400690:	200000a0 	.word	0x200000a0
  400694:	20000b0c 	.word	0x20000b0c
  400698:	20000b08 	.word	0x20000b08
  40069c:	20000a76 	.word	0x20000a76
  4006a0:	20000b04 	.word	0x20000b04
  4006a4:	20000a84 	.word	0x20000a84
  4006a8:	00400449 	.word	0x00400449

004006ac <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  4006ac:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  4006ae:	2000      	movs	r0, #0
  4006b0:	4b01      	ldr	r3, [pc, #4]	; (4006b8 <udi_cdc_getc+0xc>)
  4006b2:	4798      	blx	r3
}
  4006b4:	bd08      	pop	{r3, pc}
  4006b6:	bf00      	nop
  4006b8:	004005f1 	.word	0x004005f1

004006bc <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  4006bc:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4006be:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006c2:	fab3 f383 	clz	r3, r3
  4006c6:	095b      	lsrs	r3, r3, #5
  4006c8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4006cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006d0:	2200      	movs	r2, #0
  4006d2:	4b14      	ldr	r3, [pc, #80]	; (400724 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4006d6:	9a01      	ldr	r2, [sp, #4]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4006d8:	4b13      	ldr	r3, [pc, #76]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  4006da:	781b      	ldrb	r3, [r3, #0]
  4006dc:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  4006de:	4913      	ldr	r1, [pc, #76]	; (40072c <udi_cdc_multi_get_free_tx_buffer+0x70>)
  4006e0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  4006e4:	2840      	cmp	r0, #64	; 0x40
  4006e6:	d00a      	beq.n	4006fe <udi_cdc_multi_get_free_tx_buffer+0x42>
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  4006e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	if (cpu_irq_is_enabled_flags(flags))
  4006ec:	b12a      	cbz	r2, 4006fa <udi_cdc_multi_get_free_tx_buffer+0x3e>
		cpu_irq_enable();
  4006ee:	2201      	movs	r2, #1
  4006f0:	4b0c      	ldr	r3, [pc, #48]	; (400724 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006f2:	701a      	strb	r2, [r3, #0]
  4006f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006f8:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  4006fa:	b002      	add	sp, #8
  4006fc:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
  4006fe:	490c      	ldr	r1, [pc, #48]	; (400730 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400700:	7809      	ldrb	r1, [r1, #0]
  400702:	2900      	cmp	r1, #0
  400704:	d1f0      	bne.n	4006e8 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400706:	490b      	ldr	r1, [pc, #44]	; (400734 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400708:	7809      	ldrb	r1, [r1, #0]
  40070a:	2900      	cmp	r1, #0
  40070c:	d1ec      	bne.n	4006e8 <udi_cdc_multi_get_free_tx_buffer+0x2c>
			udi_cdc_tx_both_buf_to_send[port] = true;
  40070e:	2001      	movs	r0, #1
  400710:	4908      	ldr	r1, [pc, #32]	; (400734 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400712:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400714:	fab3 f383 	clz	r3, r3
  400718:	095b      	lsrs	r3, r3, #5
  40071a:	4903      	ldr	r1, [pc, #12]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  40071c:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  40071e:	2000      	movs	r0, #0
  400720:	e7e2      	b.n	4006e8 <udi_cdc_multi_get_free_tx_buffer+0x2c>
  400722:	bf00      	nop
  400724:	200000a0 	.word	0x200000a0
  400728:	20000ba0 	.word	0x20000ba0
  40072c:	20000b9c 	.word	0x20000b9c
  400730:	20000ba8 	.word	0x20000ba8
  400734:	20000b18 	.word	0x20000b18

00400738 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400738:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  40073a:	4b03      	ldr	r3, [pc, #12]	; (400748 <udi_cdc_multi_is_tx_ready+0x10>)
  40073c:	4798      	blx	r3
}
  40073e:	3000      	adds	r0, #0
  400740:	bf18      	it	ne
  400742:	2001      	movne	r0, #1
  400744:	bd08      	pop	{r3, pc}
  400746:	bf00      	nop
  400748:	004006bd 	.word	0x004006bd

0040074c <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  40074c:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_tx_ready(0);
  40074e:	2000      	movs	r0, #0
  400750:	4b01      	ldr	r3, [pc, #4]	; (400758 <udi_cdc_is_tx_ready+0xc>)
  400752:	4798      	blx	r3
}
  400754:	bd08      	pop	{r3, pc}
  400756:	bf00      	nop
  400758:	00400739 	.word	0x00400739

0040075c <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  40075c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400760:	b082      	sub	sp, #8
  400762:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400764:	4b1d      	ldr	r3, [pc, #116]	; (4007dc <udi_cdc_multi_putc+0x80>)
  400766:	799d      	ldrb	r5, [r3, #6]
  400768:	2d09      	cmp	r5, #9
  40076a:	bf14      	ite	ne
  40076c:	2500      	movne	r5, #0
  40076e:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400770:	4e1b      	ldr	r6, [pc, #108]	; (4007e0 <udi_cdc_multi_putc+0x84>)
	cpu_irq_disable();
  400772:	4f1c      	ldr	r7, [pc, #112]	; (4007e4 <udi_cdc_multi_putc+0x88>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400774:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4007f4 <udi_cdc_multi_putc+0x98>
  400778:	e022      	b.n	4007c0 <udi_cdc_multi_putc+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40077a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40077e:	fab3 f383 	clz	r3, r3
  400782:	095b      	lsrs	r3, r3, #5
  400784:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400786:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400788:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40078c:	2300      	movs	r3, #0
  40078e:	703b      	strb	r3, [r7, #0]
	return flags;
  400790:	9801      	ldr	r0, [sp, #4]
  400792:	f898 3000 	ldrb.w	r3, [r8]
  400796:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400798:	4a13      	ldr	r2, [pc, #76]	; (4007e8 <udi_cdc_multi_putc+0x8c>)
  40079a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
  40079e:	f101 0e01 	add.w	lr, r1, #1
  4007a2:	f822 e013 	strh.w	lr, [r2, r3, lsl #1]
  4007a6:	4a11      	ldr	r2, [pc, #68]	; (4007ec <udi_cdc_multi_putc+0x90>)
  4007a8:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  4007ac:	545c      	strb	r4, [r3, r1]
	if (cpu_irq_is_enabled_flags(flags))
  4007ae:	b120      	cbz	r0, 4007ba <udi_cdc_multi_putc+0x5e>
		cpu_irq_enable();
  4007b0:	2301      	movs	r3, #1
  4007b2:	703b      	strb	r3, [r7, #0]
  4007b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007b8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  4007ba:	b165      	cbz	r5, 4007d6 <udi_cdc_multi_putc+0x7a>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  4007bc:	1224      	asrs	r4, r4, #8
		b_databit_9 = false;
  4007be:	2500      	movs	r5, #0
	if (!udi_cdc_multi_is_tx_ready(port)) {
  4007c0:	2000      	movs	r0, #0
  4007c2:	47b0      	blx	r6
  4007c4:	2800      	cmp	r0, #0
  4007c6:	d1d8      	bne.n	40077a <udi_cdc_multi_putc+0x1e>
		if (!udi_cdc_data_running) {
  4007c8:	4b09      	ldr	r3, [pc, #36]	; (4007f0 <udi_cdc_multi_putc+0x94>)
  4007ca:	781b      	ldrb	r3, [r3, #0]
  4007cc:	2b00      	cmp	r3, #0
  4007ce:	d1f7      	bne.n	4007c0 <udi_cdc_multi_putc+0x64>
		goto udi_cdc_putc_process_one_byte;
	}
	return true;
}
  4007d0:	b002      	add	sp, #8
  4007d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
  4007d6:	2001      	movs	r0, #1
  4007d8:	e7fa      	b.n	4007d0 <udi_cdc_multi_putc+0x74>
  4007da:	bf00      	nop
  4007dc:	20000a78 	.word	0x20000a78
  4007e0:	00400739 	.word	0x00400739
  4007e4:	200000a0 	.word	0x200000a0
  4007e8:	20000b9c 	.word	0x20000b9c
  4007ec:	20000b1c 	.word	0x20000b1c
  4007f0:	20000a76 	.word	0x20000a76
  4007f4:	20000ba0 	.word	0x20000ba0

004007f8 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  4007f8:	b508      	push	{r3, lr}
	return udi_cdc_multi_putc(0, value);
  4007fa:	4601      	mov	r1, r0
  4007fc:	2000      	movs	r0, #0
  4007fe:	4b01      	ldr	r3, [pc, #4]	; (400804 <udi_cdc_putc+0xc>)
  400800:	4798      	blx	r3
}
  400802:	bd08      	pop	{r3, pc}
  400804:	0040075d 	.word	0x0040075d

00400808 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  400808:	4b10      	ldr	r3, [pc, #64]	; (40084c <udc_next_desc_in_iface+0x44>)
  40080a:	681b      	ldr	r3, [r3, #0]
  40080c:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40080e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400810:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  400812:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400814:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400816:	4290      	cmp	r0, r2
  400818:	d211      	bcs.n	40083e <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40081a:	7843      	ldrb	r3, [r0, #1]
  40081c:	2b04      	cmp	r3, #4
  40081e:	d010      	beq.n	400842 <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400820:	428b      	cmp	r3, r1
  400822:	d009      	beq.n	400838 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  400824:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400826:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400828:	4290      	cmp	r0, r2
  40082a:	d206      	bcs.n	40083a <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40082c:	7843      	ldrb	r3, [r0, #1]
  40082e:	2b04      	cmp	r3, #4
  400830:	d009      	beq.n	400846 <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  400832:	428b      	cmp	r3, r1
  400834:	d1f6      	bne.n	400824 <udc_next_desc_in_iface+0x1c>
  400836:	e007      	b.n	400848 <udc_next_desc_in_iface+0x40>
  400838:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  40083a:	2000      	movs	r0, #0
  40083c:	4770      	bx	lr
  40083e:	2000      	movs	r0, #0
  400840:	4770      	bx	lr
  400842:	2000      	movs	r0, #0
  400844:	4770      	bx	lr
  400846:	2000      	movs	r0, #0
}
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	20000bc4 	.word	0x20000bc4

00400850 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400850:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400852:	4b03      	ldr	r3, [pc, #12]	; (400860 <udc_valid_address+0x10>)
  400854:	7898      	ldrb	r0, [r3, #2]
  400856:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40085a:	4b02      	ldr	r3, [pc, #8]	; (400864 <udc_valid_address+0x14>)
  40085c:	4798      	blx	r3
  40085e:	bd08      	pop	{r3, pc}
  400860:	200014e0 	.word	0x200014e0
  400864:	00402045 	.word	0x00402045

00400868 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400868:	4b19      	ldr	r3, [pc, #100]	; (4008d0 <udc_update_iface_desc+0x68>)
  40086a:	781b      	ldrb	r3, [r3, #0]
  40086c:	b34b      	cbz	r3, 4008c2 <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40086e:	4b19      	ldr	r3, [pc, #100]	; (4008d4 <udc_update_iface_desc+0x6c>)
  400870:	681b      	ldr	r3, [r3, #0]
  400872:	681b      	ldr	r3, [r3, #0]
  400874:	791a      	ldrb	r2, [r3, #4]
  400876:	4282      	cmp	r2, r0
  400878:	d925      	bls.n	4008c6 <udc_update_iface_desc+0x5e>
{
  40087a:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  40087c:	4a16      	ldr	r2, [pc, #88]	; (4008d8 <udc_update_iface_desc+0x70>)
  40087e:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400880:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400882:	441c      	add	r4, r3
	while (ptr_end_desc >
  400884:	42a3      	cmp	r3, r4
  400886:	d220      	bcs.n	4008ca <udc_update_iface_desc+0x62>
  400888:	2500      	movs	r5, #0
  40088a:	2601      	movs	r6, #1
  40088c:	e007      	b.n	40089e <udc_update_iface_desc+0x36>
  40088e:	4a12      	ldr	r2, [pc, #72]	; (4008d8 <udc_update_iface_desc+0x70>)
  400890:	6013      	str	r3, [r2, #0]
  400892:	e00f      	b.n	4008b4 <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  400894:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400896:	4413      	add	r3, r2
  400898:	4635      	mov	r5, r6
	while (ptr_end_desc >
  40089a:	42a3      	cmp	r3, r4
  40089c:	d20c      	bcs.n	4008b8 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  40089e:	785a      	ldrb	r2, [r3, #1]
  4008a0:	2a04      	cmp	r2, #4
  4008a2:	d1f7      	bne.n	400894 <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4008a4:	789a      	ldrb	r2, [r3, #2]
  4008a6:	4282      	cmp	r2, r0
  4008a8:	d1f4      	bne.n	400894 <udc_update_iface_desc+0x2c>
  4008aa:	78da      	ldrb	r2, [r3, #3]
  4008ac:	428a      	cmp	r2, r1
  4008ae:	d1f1      	bne.n	400894 <udc_update_iface_desc+0x2c>
  4008b0:	2d00      	cmp	r5, #0
  4008b2:	d1ec      	bne.n	40088e <udc_update_iface_desc+0x26>
				return true; // Interface found
  4008b4:	2001      	movs	r0, #1
  4008b6:	e002      	b.n	4008be <udc_update_iface_desc+0x56>
  4008b8:	4a07      	ldr	r2, [pc, #28]	; (4008d8 <udc_update_iface_desc+0x70>)
  4008ba:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  4008bc:	2000      	movs	r0, #0
}
  4008be:	bc70      	pop	{r4, r5, r6}
  4008c0:	4770      	bx	lr
		return false;
  4008c2:	2000      	movs	r0, #0
  4008c4:	4770      	bx	lr
		return false;
  4008c6:	2000      	movs	r0, #0
  4008c8:	4770      	bx	lr
	return false; // Interface not found
  4008ca:	2000      	movs	r0, #0
  4008cc:	e7f7      	b.n	4008be <udc_update_iface_desc+0x56>
  4008ce:	bf00      	nop
  4008d0:	20000bc0 	.word	0x20000bc0
  4008d4:	20000bc4 	.word	0x20000bc4
  4008d8:	20000bc8 	.word	0x20000bc8

004008dc <udc_iface_disable>:
{
  4008dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008e0:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4008e2:	2100      	movs	r1, #0
  4008e4:	4b13      	ldr	r3, [pc, #76]	; (400934 <udc_iface_disable+0x58>)
  4008e6:	4798      	blx	r3
  4008e8:	4680      	mov	r8, r0
  4008ea:	b910      	cbnz	r0, 4008f2 <udc_iface_disable+0x16>
}
  4008ec:	4640      	mov	r0, r8
  4008ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4008f2:	4b11      	ldr	r3, [pc, #68]	; (400938 <udc_iface_disable+0x5c>)
  4008f4:	681b      	ldr	r3, [r3, #0]
  4008f6:	685b      	ldr	r3, [r3, #4]
  4008f8:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4008fc:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400900:	4798      	blx	r3
  400902:	4601      	mov	r1, r0
  400904:	4620      	mov	r0, r4
  400906:	4b0b      	ldr	r3, [pc, #44]	; (400934 <udc_iface_disable+0x58>)
  400908:	4798      	blx	r3
  40090a:	4680      	mov	r8, r0
  40090c:	2800      	cmp	r0, #0
  40090e:	d0ed      	beq.n	4008ec <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400910:	4b0a      	ldr	r3, [pc, #40]	; (40093c <udc_iface_disable+0x60>)
  400912:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400914:	2605      	movs	r6, #5
  400916:	4d0a      	ldr	r5, [pc, #40]	; (400940 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  400918:	4f0a      	ldr	r7, [pc, #40]	; (400944 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40091a:	4631      	mov	r1, r6
  40091c:	4620      	mov	r0, r4
  40091e:	47a8      	blx	r5
			if (NULL == ep_desc) {
  400920:	4604      	mov	r4, r0
  400922:	b110      	cbz	r0, 40092a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  400924:	7880      	ldrb	r0, [r0, #2]
  400926:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400928:	e7f7      	b.n	40091a <udc_iface_disable+0x3e>
	udi_api->disable();
  40092a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40092e:	4798      	blx	r3
	return true;
  400930:	e7dc      	b.n	4008ec <udc_iface_disable+0x10>
  400932:	bf00      	nop
  400934:	00400869 	.word	0x00400869
  400938:	20000bc4 	.word	0x20000bc4
  40093c:	20000bc8 	.word	0x20000bc8
  400940:	00400809 	.word	0x00400809
  400944:	004021b5 	.word	0x004021b5

00400948 <udc_iface_enable>:
{
  400948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40094c:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40094e:	4b10      	ldr	r3, [pc, #64]	; (400990 <udc_iface_enable+0x48>)
  400950:	4798      	blx	r3
  400952:	4603      	mov	r3, r0
  400954:	b1c8      	cbz	r0, 40098a <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400956:	4b0f      	ldr	r3, [pc, #60]	; (400994 <udc_iface_enable+0x4c>)
  400958:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40095a:	2605      	movs	r6, #5
  40095c:	4d0e      	ldr	r5, [pc, #56]	; (400998 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40095e:	4f0f      	ldr	r7, [pc, #60]	; (40099c <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400960:	4631      	mov	r1, r6
  400962:	4620      	mov	r0, r4
  400964:	47a8      	blx	r5
		if (NULL == ep_desc)
  400966:	4604      	mov	r4, r0
  400968:	b138      	cbz	r0, 40097a <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40096a:	8882      	ldrh	r2, [r0, #4]
  40096c:	78c1      	ldrb	r1, [r0, #3]
  40096e:	7880      	ldrb	r0, [r0, #2]
  400970:	47b8      	blx	r7
  400972:	4603      	mov	r3, r0
  400974:	2800      	cmp	r0, #0
  400976:	d1f3      	bne.n	400960 <udc_iface_enable+0x18>
  400978:	e007      	b.n	40098a <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40097a:	4b09      	ldr	r3, [pc, #36]	; (4009a0 <udc_iface_enable+0x58>)
  40097c:	681b      	ldr	r3, [r3, #0]
  40097e:	685b      	ldr	r3, [r3, #4]
  400980:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400984:	681b      	ldr	r3, [r3, #0]
  400986:	4798      	blx	r3
  400988:	4603      	mov	r3, r0
}
  40098a:	4618      	mov	r0, r3
  40098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400990:	00400869 	.word	0x00400869
  400994:	20000bc8 	.word	0x20000bc8
  400998:	00400809 	.word	0x00400809
  40099c:	004020bd 	.word	0x004020bd
  4009a0:	20000bc4 	.word	0x20000bc4

004009a4 <udc_start>:
{
  4009a4:	b508      	push	{r3, lr}
	udd_enable();
  4009a6:	4b01      	ldr	r3, [pc, #4]	; (4009ac <udc_start+0x8>)
  4009a8:	4798      	blx	r3
  4009aa:	bd08      	pop	{r3, pc}
  4009ac:	00401f65 	.word	0x00401f65

004009b0 <udc_reset>:
{
  4009b0:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  4009b2:	4b0d      	ldr	r3, [pc, #52]	; (4009e8 <udc_reset+0x38>)
  4009b4:	781b      	ldrb	r3, [r3, #0]
  4009b6:	b183      	cbz	r3, 4009da <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009b8:	4b0c      	ldr	r3, [pc, #48]	; (4009ec <udc_reset+0x3c>)
  4009ba:	681b      	ldr	r3, [r3, #0]
  4009bc:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4009be:	791b      	ldrb	r3, [r3, #4]
  4009c0:	b15b      	cbz	r3, 4009da <udc_reset+0x2a>
  4009c2:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  4009c4:	4e0a      	ldr	r6, [pc, #40]	; (4009f0 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009c6:	4d09      	ldr	r5, [pc, #36]	; (4009ec <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4009c8:	4620      	mov	r0, r4
  4009ca:	47b0      	blx	r6
				iface_num++) {
  4009cc:	3401      	adds	r4, #1
  4009ce:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009d0:	682b      	ldr	r3, [r5, #0]
  4009d2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4009d4:	791b      	ldrb	r3, [r3, #4]
  4009d6:	42a3      	cmp	r3, r4
  4009d8:	d8f6      	bhi.n	4009c8 <udc_reset+0x18>
	udc_num_configuration = 0;
  4009da:	2200      	movs	r2, #0
  4009dc:	4b02      	ldr	r3, [pc, #8]	; (4009e8 <udc_reset+0x38>)
  4009de:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4009e0:	2201      	movs	r2, #1
  4009e2:	4b04      	ldr	r3, [pc, #16]	; (4009f4 <udc_reset+0x44>)
  4009e4:	801a      	strh	r2, [r3, #0]
  4009e6:	bd70      	pop	{r4, r5, r6, pc}
  4009e8:	20000bc0 	.word	0x20000bc0
  4009ec:	20000bc4 	.word	0x20000bc4
  4009f0:	004008dd 	.word	0x004008dd
  4009f4:	20000bb6 	.word	0x20000bb6

004009f8 <udc_sof_notify>:
{
  4009f8:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4009fa:	4b0d      	ldr	r3, [pc, #52]	; (400a30 <udc_sof_notify+0x38>)
  4009fc:	781b      	ldrb	r3, [r3, #0]
  4009fe:	b1b3      	cbz	r3, 400a2e <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a00:	4b0c      	ldr	r3, [pc, #48]	; (400a34 <udc_sof_notify+0x3c>)
  400a02:	681b      	ldr	r3, [r3, #0]
  400a04:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a06:	7912      	ldrb	r2, [r2, #4]
  400a08:	b18a      	cbz	r2, 400a2e <udc_sof_notify+0x36>
  400a0a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a0c:	4d09      	ldr	r5, [pc, #36]	; (400a34 <udc_sof_notify+0x3c>)
  400a0e:	e006      	b.n	400a1e <udc_sof_notify+0x26>
				iface_num++) {
  400a10:	3401      	adds	r4, #1
  400a12:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a14:	682b      	ldr	r3, [r5, #0]
  400a16:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  400a18:	7912      	ldrb	r2, [r2, #4]
  400a1a:	42a2      	cmp	r2, r4
  400a1c:	d907      	bls.n	400a2e <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400a1e:	685b      	ldr	r3, [r3, #4]
  400a20:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400a24:	691b      	ldr	r3, [r3, #16]
  400a26:	2b00      	cmp	r3, #0
  400a28:	d0f2      	beq.n	400a10 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400a2a:	4798      	blx	r3
  400a2c:	e7f0      	b.n	400a10 <udc_sof_notify+0x18>
  400a2e:	bd38      	pop	{r3, r4, r5, pc}
  400a30:	20000bc0 	.word	0x20000bc0
  400a34:	20000bc4 	.word	0x20000bc4

00400a38 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400a3a:	4b96      	ldr	r3, [pc, #600]	; (400c94 <udc_process_setup+0x25c>)
  400a3c:	2200      	movs	r2, #0
  400a3e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400a40:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400a42:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400a44:	781b      	ldrb	r3, [r3, #0]
  400a46:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a4a:	d114      	bne.n	400a76 <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400a4c:	f013 0f60 	tst.w	r3, #96	; 0x60
  400a50:	f000 80b8 	beq.w	400bc4 <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400a54:	4b8f      	ldr	r3, [pc, #572]	; (400c94 <udc_process_setup+0x25c>)
  400a56:	781b      	ldrb	r3, [r3, #0]
  400a58:	f003 031f 	and.w	r3, r3, #31
  400a5c:	2b01      	cmp	r3, #1
  400a5e:	f000 818b 	beq.w	400d78 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400a62:	4b8c      	ldr	r3, [pc, #560]	; (400c94 <udc_process_setup+0x25c>)
  400a64:	781b      	ldrb	r3, [r3, #0]
  400a66:	f003 031f 	and.w	r3, r3, #31
  400a6a:	2b02      	cmp	r3, #2
  400a6c:	f000 81ac 	beq.w	400dc8 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400a70:	2300      	movs	r3, #0
#endif
}
  400a72:	4618      	mov	r0, r3
  400a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  400a76:	4a87      	ldr	r2, [pc, #540]	; (400c94 <udc_process_setup+0x25c>)
  400a78:	88d2      	ldrh	r2, [r2, #6]
  400a7a:	2a00      	cmp	r2, #0
  400a7c:	f000 81cd 	beq.w	400e1a <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400a80:	f013 0f60 	tst.w	r3, #96	; 0x60
  400a84:	d1e6      	bne.n	400a54 <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400a86:	f013 031f 	ands.w	r3, r3, #31
  400a8a:	d106      	bne.n	400a9a <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400a8c:	4981      	ldr	r1, [pc, #516]	; (400c94 <udc_process_setup+0x25c>)
  400a8e:	7849      	ldrb	r1, [r1, #1]
  400a90:	2906      	cmp	r1, #6
  400a92:	d013      	beq.n	400abc <udc_process_setup+0x84>
  400a94:	2908      	cmp	r1, #8
  400a96:	d058      	beq.n	400b4a <udc_process_setup+0x112>
  400a98:	b149      	cbz	r1, 400aae <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400a9a:	2b01      	cmp	r3, #1
  400a9c:	d05c      	beq.n	400b58 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400a9e:	2b02      	cmp	r3, #2
  400aa0:	d1d8      	bne.n	400a54 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400aa2:	4b7c      	ldr	r3, [pc, #496]	; (400c94 <udc_process_setup+0x25c>)
  400aa4:	785b      	ldrb	r3, [r3, #1]
  400aa6:	2b00      	cmp	r3, #0
  400aa8:	d07e      	beq.n	400ba8 <udc_process_setup+0x170>
	return false;
  400aaa:	2300      	movs	r3, #0
  400aac:	e160      	b.n	400d70 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400aae:	2a02      	cmp	r2, #2
  400ab0:	d1d0      	bne.n	400a54 <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400ab2:	2102      	movs	r1, #2
  400ab4:	4878      	ldr	r0, [pc, #480]	; (400c98 <udc_process_setup+0x260>)
  400ab6:	4b79      	ldr	r3, [pc, #484]	; (400c9c <udc_process_setup+0x264>)
  400ab8:	4798      	blx	r3
  400aba:	e09f      	b.n	400bfc <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400abc:	4b75      	ldr	r3, [pc, #468]	; (400c94 <udc_process_setup+0x25c>)
  400abe:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400ac0:	0a13      	lsrs	r3, r2, #8
  400ac2:	3b01      	subs	r3, #1
  400ac4:	2b0e      	cmp	r3, #14
  400ac6:	f200 8150 	bhi.w	400d6a <udc_process_setup+0x332>
  400aca:	e8df f013 	tbh	[pc, r3, lsl #1]
  400ace:	000f      	.short	0x000f
  400ad0:	0036001c 	.word	0x0036001c
  400ad4:	014e014e 	.word	0x014e014e
  400ad8:	014e014e 	.word	0x014e014e
  400adc:	014e014e 	.word	0x014e014e
  400ae0:	014e014e 	.word	0x014e014e
  400ae4:	014e014e 	.word	0x014e014e
  400ae8:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  400aec:	4b6c      	ldr	r3, [pc, #432]	; (400ca0 <udc_process_setup+0x268>)
  400aee:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  400af0:	7801      	ldrb	r1, [r0, #0]
  400af2:	4b6a      	ldr	r3, [pc, #424]	; (400c9c <udc_process_setup+0x264>)
  400af4:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400af6:	4b67      	ldr	r3, [pc, #412]	; (400c94 <udc_process_setup+0x25c>)
  400af8:	88da      	ldrh	r2, [r3, #6]
  400afa:	899b      	ldrh	r3, [r3, #12]
  400afc:	4293      	cmp	r3, r2
  400afe:	d97d      	bls.n	400bfc <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400b00:	4b64      	ldr	r3, [pc, #400]	; (400c94 <udc_process_setup+0x25c>)
  400b02:	819a      	strh	r2, [r3, #12]
  400b04:	e07a      	b.n	400bfc <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400b06:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  400b08:	4b65      	ldr	r3, [pc, #404]	; (400ca0 <udc_process_setup+0x268>)
  400b0a:	681b      	ldr	r3, [r3, #0]
  400b0c:	7c5b      	ldrb	r3, [r3, #17]
  400b0e:	4293      	cmp	r3, r2
  400b10:	d9a0      	bls.n	400a54 <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  400b12:	4b63      	ldr	r3, [pc, #396]	; (400ca0 <udc_process_setup+0x268>)
  400b14:	685b      	ldr	r3, [r3, #4]
  400b16:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  400b1a:	8841      	ldrh	r1, [r0, #2]
  400b1c:	4b5f      	ldr	r3, [pc, #380]	; (400c9c <udc_process_setup+0x264>)
  400b1e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400b20:	4b5c      	ldr	r3, [pc, #368]	; (400c94 <udc_process_setup+0x25c>)
  400b22:	689b      	ldr	r3, [r3, #8]
  400b24:	2202      	movs	r2, #2
  400b26:	705a      	strb	r2, [r3, #1]
  400b28:	e7e5      	b.n	400af6 <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400b2a:	4b5d      	ldr	r3, [pc, #372]	; (400ca0 <udc_process_setup+0x268>)
  400b2c:	6898      	ldr	r0, [r3, #8]
  400b2e:	2800      	cmp	r0, #0
  400b30:	d090      	beq.n	400a54 <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400b32:	8841      	ldrh	r1, [r0, #2]
  400b34:	4b59      	ldr	r3, [pc, #356]	; (400c9c <udc_process_setup+0x264>)
  400b36:	4798      	blx	r3
  400b38:	e7dd      	b.n	400af6 <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400b3a:	f012 0fff 	tst.w	r2, #255	; 0xff
  400b3e:	d189      	bne.n	400a54 <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400b40:	2104      	movs	r1, #4
  400b42:	4858      	ldr	r0, [pc, #352]	; (400ca4 <udc_process_setup+0x26c>)
  400b44:	4b55      	ldr	r3, [pc, #340]	; (400c9c <udc_process_setup+0x264>)
  400b46:	4798      	blx	r3
  400b48:	e7d5      	b.n	400af6 <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b4a:	2a01      	cmp	r2, #1
  400b4c:	d182      	bne.n	400a54 <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400b4e:	2101      	movs	r1, #1
  400b50:	4855      	ldr	r0, [pc, #340]	; (400ca8 <udc_process_setup+0x270>)
  400b52:	4b52      	ldr	r3, [pc, #328]	; (400c9c <udc_process_setup+0x264>)
  400b54:	4798      	blx	r3
  400b56:	e051      	b.n	400bfc <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400b58:	494e      	ldr	r1, [pc, #312]	; (400c94 <udc_process_setup+0x25c>)
  400b5a:	7849      	ldrb	r1, [r1, #1]
  400b5c:	290a      	cmp	r1, #10
  400b5e:	d19e      	bne.n	400a9e <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b60:	2a01      	cmp	r2, #1
  400b62:	f47f af77 	bne.w	400a54 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400b66:	4b50      	ldr	r3, [pc, #320]	; (400ca8 <udc_process_setup+0x270>)
  400b68:	781b      	ldrb	r3, [r3, #0]
  400b6a:	2b00      	cmp	r3, #0
  400b6c:	f43f af72 	beq.w	400a54 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b70:	4b48      	ldr	r3, [pc, #288]	; (400c94 <udc_process_setup+0x25c>)
  400b72:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b74:	4b4d      	ldr	r3, [pc, #308]	; (400cac <udc_process_setup+0x274>)
  400b76:	681d      	ldr	r5, [r3, #0]
  400b78:	682b      	ldr	r3, [r5, #0]
  400b7a:	791b      	ldrb	r3, [r3, #4]
  400b7c:	42a3      	cmp	r3, r4
  400b7e:	f67f af69 	bls.w	400a54 <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b82:	2100      	movs	r1, #0
  400b84:	4620      	mov	r0, r4
  400b86:	4b4a      	ldr	r3, [pc, #296]	; (400cb0 <udc_process_setup+0x278>)
  400b88:	4798      	blx	r3
  400b8a:	2800      	cmp	r0, #0
  400b8c:	f43f af62 	beq.w	400a54 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b90:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  400b92:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400b96:	68db      	ldr	r3, [r3, #12]
  400b98:	4798      	blx	r3
  400b9a:	4b46      	ldr	r3, [pc, #280]	; (400cb4 <udc_process_setup+0x27c>)
  400b9c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400b9e:	2101      	movs	r1, #1
  400ba0:	4618      	mov	r0, r3
  400ba2:	4b3e      	ldr	r3, [pc, #248]	; (400c9c <udc_process_setup+0x264>)
  400ba4:	4798      	blx	r3
  400ba6:	e029      	b.n	400bfc <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400ba8:	2a02      	cmp	r2, #2
  400baa:	f47f af53 	bne.w	400a54 <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400bae:	4b39      	ldr	r3, [pc, #228]	; (400c94 <udc_process_setup+0x25c>)
  400bb0:	7918      	ldrb	r0, [r3, #4]
  400bb2:	4b41      	ldr	r3, [pc, #260]	; (400cb8 <udc_process_setup+0x280>)
  400bb4:	4798      	blx	r3
  400bb6:	4b41      	ldr	r3, [pc, #260]	; (400cbc <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400bb8:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400bba:	2102      	movs	r1, #2
  400bbc:	4618      	mov	r0, r3
  400bbe:	4b37      	ldr	r3, [pc, #220]	; (400c9c <udc_process_setup+0x264>)
  400bc0:	4798      	blx	r3
  400bc2:	e01b      	b.n	400bfc <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400bc4:	f013 031f 	ands.w	r3, r3, #31
  400bc8:	f040 8082 	bne.w	400cd0 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  400bcc:	4a31      	ldr	r2, [pc, #196]	; (400c94 <udc_process_setup+0x25c>)
  400bce:	7852      	ldrb	r2, [r2, #1]
  400bd0:	3a01      	subs	r2, #1
  400bd2:	2a08      	cmp	r2, #8
  400bd4:	d87c      	bhi.n	400cd0 <udc_process_setup+0x298>
  400bd6:	e8df f012 	tbh	[pc, r2, lsl #1]
  400bda:	0013      	.short	0x0013
  400bdc:	00ca007b 	.word	0x00ca007b
  400be0:	0009007b 	.word	0x0009007b
  400be4:	007b007b 	.word	0x007b007b
  400be8:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  400bec:	4b29      	ldr	r3, [pc, #164]	; (400c94 <udc_process_setup+0x25c>)
  400bee:	88db      	ldrh	r3, [r3, #6]
  400bf0:	2b00      	cmp	r3, #0
  400bf2:	f47f af2f 	bne.w	400a54 <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  400bf6:	4a32      	ldr	r2, [pc, #200]	; (400cc0 <udc_process_setup+0x288>)
  400bf8:	4b26      	ldr	r3, [pc, #152]	; (400c94 <udc_process_setup+0x25c>)
  400bfa:	611a      	str	r2, [r3, #16]
			return true;
  400bfc:	2301      	movs	r3, #1
  400bfe:	e738      	b.n	400a72 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  400c00:	4b24      	ldr	r3, [pc, #144]	; (400c94 <udc_process_setup+0x25c>)
  400c02:	88db      	ldrh	r3, [r3, #6]
  400c04:	2b00      	cmp	r3, #0
  400c06:	f47f af25 	bne.w	400a54 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400c0a:	4b22      	ldr	r3, [pc, #136]	; (400c94 <udc_process_setup+0x25c>)
  400c0c:	885b      	ldrh	r3, [r3, #2]
  400c0e:	2b01      	cmp	r3, #1
  400c10:	f47f af20 	bne.w	400a54 <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400c14:	4a20      	ldr	r2, [pc, #128]	; (400c98 <udc_process_setup+0x260>)
  400c16:	8813      	ldrh	r3, [r2, #0]
  400c18:	f023 0302 	bic.w	r3, r3, #2
  400c1c:	8013      	strh	r3, [r2, #0]
  400c1e:	e7ed      	b.n	400bfc <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  400c20:	4b1c      	ldr	r3, [pc, #112]	; (400c94 <udc_process_setup+0x25c>)
  400c22:	88db      	ldrh	r3, [r3, #6]
  400c24:	2b00      	cmp	r3, #0
  400c26:	f47f af15 	bne.w	400a54 <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400c2a:	4b26      	ldr	r3, [pc, #152]	; (400cc4 <udc_process_setup+0x28c>)
  400c2c:	4798      	blx	r3
  400c2e:	2800      	cmp	r0, #0
  400c30:	f43f af10 	beq.w	400a54 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c34:	4b17      	ldr	r3, [pc, #92]	; (400c94 <udc_process_setup+0x25c>)
  400c36:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400c38:	4b19      	ldr	r3, [pc, #100]	; (400ca0 <udc_process_setup+0x268>)
  400c3a:	681b      	ldr	r3, [r3, #0]
  400c3c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c3e:	429a      	cmp	r2, r3
  400c40:	f73f af08 	bgt.w	400a54 <udc_process_setup+0x1c>
	udc_reset();
  400c44:	4b20      	ldr	r3, [pc, #128]	; (400cc8 <udc_process_setup+0x290>)
  400c46:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400c48:	4b12      	ldr	r3, [pc, #72]	; (400c94 <udc_process_setup+0x25c>)
  400c4a:	789b      	ldrb	r3, [r3, #2]
  400c4c:	4a16      	ldr	r2, [pc, #88]	; (400ca8 <udc_process_setup+0x270>)
  400c4e:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400c50:	2b00      	cmp	r3, #0
  400c52:	d0d3      	beq.n	400bfc <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400c54:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400c58:	3b01      	subs	r3, #1
  400c5a:	4a11      	ldr	r2, [pc, #68]	; (400ca0 <udc_process_setup+0x268>)
  400c5c:	6852      	ldr	r2, [r2, #4]
  400c5e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400c62:	4912      	ldr	r1, [pc, #72]	; (400cac <udc_process_setup+0x274>)
  400c64:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400c6a:	791b      	ldrb	r3, [r3, #4]
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d0c5      	beq.n	400bfc <udc_process_setup+0x1c4>
  400c70:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400c72:	4626      	mov	r6, r4
  400c74:	4d15      	ldr	r5, [pc, #84]	; (400ccc <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c76:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400c78:	4631      	mov	r1, r6
  400c7a:	4620      	mov	r0, r4
  400c7c:	47a8      	blx	r5
  400c7e:	2800      	cmp	r0, #0
  400c80:	f43f aee8 	beq.w	400a54 <udc_process_setup+0x1c>
			iface_num++) {
  400c84:	3401      	adds	r4, #1
  400c86:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c88:	683b      	ldr	r3, [r7, #0]
  400c8a:	681b      	ldr	r3, [r3, #0]
  400c8c:	791b      	ldrb	r3, [r3, #4]
  400c8e:	42a3      	cmp	r3, r4
  400c90:	d8f2      	bhi.n	400c78 <udc_process_setup+0x240>
  400c92:	e7b3      	b.n	400bfc <udc_process_setup+0x1c4>
  400c94:	200014e0 	.word	0x200014e0
  400c98:	20000bb6 	.word	0x20000bb6
  400c9c:	004020b1 	.word	0x004020b1
  400ca0:	20000028 	.word	0x20000028
  400ca4:	2000009c 	.word	0x2000009c
  400ca8:	20000bc0 	.word	0x20000bc0
  400cac:	20000bc4 	.word	0x20000bc4
  400cb0:	00400869 	.word	0x00400869
  400cb4:	20000bbc 	.word	0x20000bbc
  400cb8:	0040220d 	.word	0x0040220d
  400cbc:	20000bb8 	.word	0x20000bb8
  400cc0:	00400851 	.word	0x00400851
  400cc4:	00402081 	.word	0x00402081
  400cc8:	004009b1 	.word	0x004009b1
  400ccc:	00400949 	.word	0x00400949
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400cd0:	2b01      	cmp	r3, #1
  400cd2:	d00a      	beq.n	400cea <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400cd4:	2b02      	cmp	r3, #2
  400cd6:	f47f aebd 	bne.w	400a54 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400cda:	4b52      	ldr	r3, [pc, #328]	; (400e24 <udc_process_setup+0x3ec>)
  400cdc:	785b      	ldrb	r3, [r3, #1]
  400cde:	2b01      	cmp	r3, #1
  400ce0:	d020      	beq.n	400d24 <udc_process_setup+0x2ec>
  400ce2:	2b03      	cmp	r3, #3
  400ce4:	d02e      	beq.n	400d44 <udc_process_setup+0x30c>
	return false;
  400ce6:	2300      	movs	r3, #0
  400ce8:	e042      	b.n	400d70 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400cea:	4a4e      	ldr	r2, [pc, #312]	; (400e24 <udc_process_setup+0x3ec>)
  400cec:	7852      	ldrb	r2, [r2, #1]
  400cee:	2a0b      	cmp	r2, #11
  400cf0:	d1f0      	bne.n	400cd4 <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400cf2:	4b4c      	ldr	r3, [pc, #304]	; (400e24 <udc_process_setup+0x3ec>)
  400cf4:	88db      	ldrh	r3, [r3, #6]
  400cf6:	2b00      	cmp	r3, #0
  400cf8:	f47f aeac 	bne.w	400a54 <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400cfc:	4b4a      	ldr	r3, [pc, #296]	; (400e28 <udc_process_setup+0x3f0>)
  400cfe:	781b      	ldrb	r3, [r3, #0]
  400d00:	2b00      	cmp	r3, #0
  400d02:	f43f aea7 	beq.w	400a54 <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d06:	4b47      	ldr	r3, [pc, #284]	; (400e24 <udc_process_setup+0x3ec>)
  400d08:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400d0a:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400d0c:	4620      	mov	r0, r4
  400d0e:	4b47      	ldr	r3, [pc, #284]	; (400e2c <udc_process_setup+0x3f4>)
  400d10:	4798      	blx	r3
  400d12:	2800      	cmp	r0, #0
  400d14:	f43f ae9e 	beq.w	400a54 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400d18:	b2e9      	uxtb	r1, r5
  400d1a:	4620      	mov	r0, r4
  400d1c:	4b44      	ldr	r3, [pc, #272]	; (400e30 <udc_process_setup+0x3f8>)
  400d1e:	4798      	blx	r3
  400d20:	4603      	mov	r3, r0
  400d22:	e025      	b.n	400d70 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d24:	4b3f      	ldr	r3, [pc, #252]	; (400e24 <udc_process_setup+0x3ec>)
  400d26:	88db      	ldrh	r3, [r3, #6]
  400d28:	2b00      	cmp	r3, #0
  400d2a:	f47f ae93 	bne.w	400a54 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d2e:	4b3d      	ldr	r3, [pc, #244]	; (400e24 <udc_process_setup+0x3ec>)
  400d30:	885b      	ldrh	r3, [r3, #2]
  400d32:	2b00      	cmp	r3, #0
  400d34:	f47f ae8e 	bne.w	400a54 <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d38:	4b3a      	ldr	r3, [pc, #232]	; (400e24 <udc_process_setup+0x3ec>)
  400d3a:	7918      	ldrb	r0, [r3, #4]
  400d3c:	4b3d      	ldr	r3, [pc, #244]	; (400e34 <udc_process_setup+0x3fc>)
  400d3e:	4798      	blx	r3
  400d40:	4603      	mov	r3, r0
  400d42:	e015      	b.n	400d70 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400d44:	4b37      	ldr	r3, [pc, #220]	; (400e24 <udc_process_setup+0x3ec>)
  400d46:	88db      	ldrh	r3, [r3, #6]
  400d48:	2b00      	cmp	r3, #0
  400d4a:	f47f ae83 	bne.w	400a54 <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d4e:	4b35      	ldr	r3, [pc, #212]	; (400e24 <udc_process_setup+0x3ec>)
  400d50:	885b      	ldrh	r3, [r3, #2]
  400d52:	2b00      	cmp	r3, #0
  400d54:	f47f ae7e 	bne.w	400a54 <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d58:	4c32      	ldr	r4, [pc, #200]	; (400e24 <udc_process_setup+0x3ec>)
  400d5a:	7920      	ldrb	r0, [r4, #4]
  400d5c:	4b36      	ldr	r3, [pc, #216]	; (400e38 <udc_process_setup+0x400>)
  400d5e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d60:	7920      	ldrb	r0, [r4, #4]
  400d62:	4b36      	ldr	r3, [pc, #216]	; (400e3c <udc_process_setup+0x404>)
  400d64:	4798      	blx	r3
  400d66:	4603      	mov	r3, r0
  400d68:	e002      	b.n	400d70 <udc_process_setup+0x338>
		return false;
  400d6a:	2300      	movs	r3, #0
  400d6c:	e000      	b.n	400d70 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400d6e:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400d70:	2b00      	cmp	r3, #0
  400d72:	f47f ae7e 	bne.w	400a72 <udc_process_setup+0x3a>
  400d76:	e66d      	b.n	400a54 <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400d78:	4b2b      	ldr	r3, [pc, #172]	; (400e28 <udc_process_setup+0x3f0>)
  400d7a:	781b      	ldrb	r3, [r3, #0]
  400d7c:	2b00      	cmp	r3, #0
  400d7e:	d04e      	beq.n	400e1e <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d80:	4b28      	ldr	r3, [pc, #160]	; (400e24 <udc_process_setup+0x3ec>)
  400d82:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400d84:	4b2e      	ldr	r3, [pc, #184]	; (400e40 <udc_process_setup+0x408>)
  400d86:	681d      	ldr	r5, [r3, #0]
  400d88:	682b      	ldr	r3, [r5, #0]
  400d8a:	791b      	ldrb	r3, [r3, #4]
  400d8c:	42a3      	cmp	r3, r4
  400d8e:	d801      	bhi.n	400d94 <udc_process_setup+0x35c>
	return false;
  400d90:	2300      	movs	r3, #0
  400d92:	e66e      	b.n	400a72 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400d94:	2100      	movs	r1, #0
  400d96:	4620      	mov	r0, r4
  400d98:	4b2a      	ldr	r3, [pc, #168]	; (400e44 <udc_process_setup+0x40c>)
  400d9a:	4798      	blx	r3
  400d9c:	2800      	cmp	r0, #0
  400d9e:	f43f ae60 	beq.w	400a62 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400da2:	686b      	ldr	r3, [r5, #4]
  400da4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400da8:	68eb      	ldr	r3, [r5, #12]
  400daa:	4798      	blx	r3
  400dac:	4601      	mov	r1, r0
  400dae:	4620      	mov	r0, r4
  400db0:	4b24      	ldr	r3, [pc, #144]	; (400e44 <udc_process_setup+0x40c>)
  400db2:	4798      	blx	r3
  400db4:	2800      	cmp	r0, #0
  400db6:	f43f ae54 	beq.w	400a62 <udc_process_setup+0x2a>
	return udi_api->setup();
  400dba:	68ab      	ldr	r3, [r5, #8]
  400dbc:	4798      	blx	r3
		if (udc_req_iface()) {
  400dbe:	4603      	mov	r3, r0
  400dc0:	2800      	cmp	r0, #0
  400dc2:	f47f ae56 	bne.w	400a72 <udc_process_setup+0x3a>
  400dc6:	e64c      	b.n	400a62 <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400dc8:	4b17      	ldr	r3, [pc, #92]	; (400e28 <udc_process_setup+0x3f0>)
  400dca:	781b      	ldrb	r3, [r3, #0]
  400dcc:	b30b      	cbz	r3, 400e12 <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400dce:	4b1c      	ldr	r3, [pc, #112]	; (400e40 <udc_process_setup+0x408>)
  400dd0:	681a      	ldr	r2, [r3, #0]
  400dd2:	6813      	ldr	r3, [r2, #0]
  400dd4:	791b      	ldrb	r3, [r3, #4]
  400dd6:	b1f3      	cbz	r3, 400e16 <udc_process_setup+0x3de>
  400dd8:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400dda:	4e1a      	ldr	r6, [pc, #104]	; (400e44 <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ddc:	4f18      	ldr	r7, [pc, #96]	; (400e40 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400dde:	6853      	ldr	r3, [r2, #4]
  400de0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400de4:	68eb      	ldr	r3, [r5, #12]
  400de6:	4798      	blx	r3
  400de8:	4601      	mov	r1, r0
  400dea:	4620      	mov	r0, r4
  400dec:	47b0      	blx	r6
  400dee:	4603      	mov	r3, r0
  400df0:	2800      	cmp	r0, #0
  400df2:	f43f ae3e 	beq.w	400a72 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400df6:	68ab      	ldr	r3, [r5, #8]
  400df8:	4798      	blx	r3
  400dfa:	4603      	mov	r3, r0
  400dfc:	2800      	cmp	r0, #0
  400dfe:	f47f ae38 	bne.w	400a72 <udc_process_setup+0x3a>
			iface_num++) {
  400e02:	3401      	adds	r4, #1
  400e04:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e06:	683a      	ldr	r2, [r7, #0]
  400e08:	6811      	ldr	r1, [r2, #0]
  400e0a:	7909      	ldrb	r1, [r1, #4]
  400e0c:	42a1      	cmp	r1, r4
  400e0e:	d8e6      	bhi.n	400dde <udc_process_setup+0x3a6>
  400e10:	e62f      	b.n	400a72 <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400e12:	2300      	movs	r3, #0
  400e14:	e62d      	b.n	400a72 <udc_process_setup+0x3a>
	return false;
  400e16:	2300      	movs	r3, #0
  400e18:	e62b      	b.n	400a72 <udc_process_setup+0x3a>
			return false; // Error from USB host
  400e1a:	2300      	movs	r3, #0
  400e1c:	e629      	b.n	400a72 <udc_process_setup+0x3a>
	return false;
  400e1e:	2300      	movs	r3, #0
  400e20:	e627      	b.n	400a72 <udc_process_setup+0x3a>
  400e22:	bf00      	nop
  400e24:	200014e0 	.word	0x200014e0
  400e28:	20000bc0 	.word	0x20000bc0
  400e2c:	004008dd 	.word	0x004008dd
  400e30:	00400949 	.word	0x00400949
  400e34:	0040232d 	.word	0x0040232d
  400e38:	00402581 	.word	0x00402581
  400e3c:	0040224d 	.word	0x0040224d
  400e40:	20000bc4 	.word	0x20000bc4
  400e44:	00400869 	.word	0x00400869

00400e48 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400e48:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400e4a:	2401      	movs	r4, #1
  400e4c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400e4e:	2400      	movs	r4, #0
  400e50:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400e52:	f240 2502 	movw	r5, #514	; 0x202
  400e56:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400e5a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400e5e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400e62:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400e64:	0052      	lsls	r2, r2, #1
  400e66:	fbb1 f2f2 	udiv	r2, r1, r2
  400e6a:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400e6c:	0212      	lsls	r2, r2, #8
  400e6e:	b292      	uxth	r2, r2
  400e70:	432b      	orrs	r3, r5
  400e72:	431a      	orrs	r2, r3
  400e74:	6042      	str	r2, [r0, #4]
	return 0;
}
  400e76:	4620      	mov	r0, r4
  400e78:	bc30      	pop	{r4, r5}
  400e7a:	4770      	bx	lr

00400e7c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  400e7c:	6843      	ldr	r3, [r0, #4]
  400e7e:	01d2      	lsls	r2, r2, #7
  400e80:	b2d2      	uxtb	r2, r2
  400e82:	4319      	orrs	r1, r3
  400e84:	430a      	orrs	r2, r1
  400e86:	6042      	str	r2, [r0, #4]
  400e88:	4770      	bx	lr

00400e8a <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  400e8a:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400e8c:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  400e8e:	0609      	lsls	r1, r1, #24
  400e90:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400e94:	4321      	orrs	r1, r4
  400e96:	430a      	orrs	r2, r1
  400e98:	0719      	lsls	r1, r3, #28
  400e9a:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
  400e9e:	4311      	orrs	r1, r2
  400ea0:	6041      	str	r1, [r0, #4]
}
  400ea2:	bc10      	pop	{r4}
  400ea4:	4770      	bx	lr

00400ea6 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  400ea6:	2302      	movs	r3, #2
  400ea8:	6003      	str	r3, [r0, #0]
  400eaa:	4770      	bx	lr

00400eac <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400eac:	2301      	movs	r3, #1
  400eae:	fa03 f101 	lsl.w	r1, r3, r1
  400eb2:	6101      	str	r1, [r0, #16]
  400eb4:	4770      	bx	lr

00400eb6 <adc_get_channel_value>:
 */
uint32_t adc_get_channel_value(const Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	uint32_t ul_data = 0;

	if (15 >= adc_ch) {
  400eb6:	290f      	cmp	r1, #15
		ul_data = *(p_adc->ADC_CDR + adc_ch);
  400eb8:	bf9a      	itte	ls
  400eba:	3050      	addls	r0, #80	; 0x50
  400ebc:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
	uint32_t ul_data = 0;
  400ec0:	2000      	movhi	r0, #0
	}

	return ul_data;
}
  400ec2:	4770      	bx	lr

00400ec4 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400ec4:	6241      	str	r1, [r0, #36]	; 0x24
  400ec6:	4770      	bx	lr

00400ec8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ecc:	4681      	mov	r9, r0
  400ece:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400ed0:	4b12      	ldr	r3, [pc, #72]	; (400f1c <pio_handler_process+0x54>)
  400ed2:	4798      	blx	r3
  400ed4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ed6:	4648      	mov	r0, r9
  400ed8:	4b11      	ldr	r3, [pc, #68]	; (400f20 <pio_handler_process+0x58>)
  400eda:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400edc:	4005      	ands	r5, r0
  400ede:	d013      	beq.n	400f08 <pio_handler_process+0x40>
  400ee0:	4c10      	ldr	r4, [pc, #64]	; (400f24 <pio_handler_process+0x5c>)
  400ee2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400ee6:	e003      	b.n	400ef0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400ee8:	42b4      	cmp	r4, r6
  400eea:	d00d      	beq.n	400f08 <pio_handler_process+0x40>
  400eec:	3410      	adds	r4, #16
		while (status != 0) {
  400eee:	b15d      	cbz	r5, 400f08 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400ef0:	6820      	ldr	r0, [r4, #0]
  400ef2:	42b8      	cmp	r0, r7
  400ef4:	d1f8      	bne.n	400ee8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400ef6:	6861      	ldr	r1, [r4, #4]
  400ef8:	4229      	tst	r1, r5
  400efa:	d0f5      	beq.n	400ee8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400efc:	68e3      	ldr	r3, [r4, #12]
  400efe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400f00:	6863      	ldr	r3, [r4, #4]
  400f02:	ea25 0503 	bic.w	r5, r5, r3
  400f06:	e7ef      	b.n	400ee8 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400f08:	4b07      	ldr	r3, [pc, #28]	; (400f28 <pio_handler_process+0x60>)
  400f0a:	681b      	ldr	r3, [r3, #0]
  400f0c:	b123      	cbz	r3, 400f18 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400f0e:	4b07      	ldr	r3, [pc, #28]	; (400f2c <pio_handler_process+0x64>)
  400f10:	681b      	ldr	r3, [r3, #0]
  400f12:	b10b      	cbz	r3, 400f18 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400f14:	4648      	mov	r0, r9
  400f16:	4798      	blx	r3
  400f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f1c:	00403081 	.word	0x00403081
  400f20:	00403085 	.word	0x00403085
  400f24:	20000bcc 	.word	0x20000bcc
  400f28:	20002110 	.word	0x20002110
  400f2c:	20000c3c 	.word	0x20000c3c

00400f30 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400f30:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400f32:	210c      	movs	r1, #12
  400f34:	4801      	ldr	r0, [pc, #4]	; (400f3c <PIOB_Handler+0xc>)
  400f36:	4b02      	ldr	r3, [pc, #8]	; (400f40 <PIOB_Handler+0x10>)
  400f38:	4798      	blx	r3
  400f3a:	bd08      	pop	{r3, pc}
  400f3c:	400e1000 	.word	0x400e1000
  400f40:	00400ec9 	.word	0x00400ec9

00400f44 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400f44:	4b03      	ldr	r3, [pc, #12]	; (400f54 <rtt_init+0x10>)
  400f46:	681b      	ldr	r3, [r3, #0]
  400f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400f4c:	4319      	orrs	r1, r3
  400f4e:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400f50:	2000      	movs	r0, #0
  400f52:	4770      	bx	lr
  400f54:	20000c40 	.word	0x20000c40

00400f58 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400f58:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400f5a:	4b03      	ldr	r3, [pc, #12]	; (400f68 <rtt_enable_interrupt+0x10>)
  400f5c:	681b      	ldr	r3, [r3, #0]
  400f5e:	4319      	orrs	r1, r3
  400f60:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400f62:	6001      	str	r1, [r0, #0]
  400f64:	4770      	bx	lr
  400f66:	bf00      	nop
  400f68:	20000c40 	.word	0x20000c40

00400f6c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400f6c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400f6e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400f72:	4b02      	ldr	r3, [pc, #8]	; (400f7c <rtt_disable_interrupt+0x10>)
  400f74:	681b      	ldr	r3, [r3, #0]
  400f76:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400f78:	6001      	str	r1, [r0, #0]
  400f7a:	4770      	bx	lr
  400f7c:	20000c40 	.word	0x20000c40

00400f80 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400f80:	b570      	push	{r4, r5, r6, lr}
  400f82:	4606      	mov	r6, r0
  400f84:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400f86:	6804      	ldr	r4, [r0, #0]
  400f88:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400f8c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400f90:	4809      	ldr	r0, [pc, #36]	; (400fb8 <rtt_write_alarm_time+0x38>)
  400f92:	4b0a      	ldr	r3, [pc, #40]	; (400fbc <rtt_write_alarm_time+0x3c>)
  400f94:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400f96:	b92d      	cbnz	r5, 400fa4 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400f98:	f04f 33ff 	mov.w	r3, #4294967295
  400f9c:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400f9e:	b924      	cbnz	r4, 400faa <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400fa0:	2000      	movs	r0, #0
  400fa2:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400fa4:	3d01      	subs	r5, #1
  400fa6:	6075      	str	r5, [r6, #4]
  400fa8:	e7f9      	b.n	400f9e <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400faa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400fae:	4802      	ldr	r0, [pc, #8]	; (400fb8 <rtt_write_alarm_time+0x38>)
  400fb0:	4b03      	ldr	r3, [pc, #12]	; (400fc0 <rtt_write_alarm_time+0x40>)
  400fb2:	4798      	blx	r3
  400fb4:	e7f4      	b.n	400fa0 <rtt_write_alarm_time+0x20>
  400fb6:	bf00      	nop
  400fb8:	400e1430 	.word	0x400e1430
  400fbc:	00400f6d 	.word	0x00400f6d
  400fc0:	00400f59 	.word	0x00400f59

00400fc4 <supc_enable_backup_mode>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_enable_backup_mode(Supc *p_supc)
{
	p_supc->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF;
  400fc4:	4b03      	ldr	r3, [pc, #12]	; (400fd4 <supc_enable_backup_mode+0x10>)
  400fc6:	6003      	str	r3, [r0, #0]
	uint32_t ul_dummy = p_supc->SUPC_MR;
  400fc8:	6883      	ldr	r3, [r0, #8]
  __ASM volatile ("dsb 0xF":::"memory");
  400fca:	f3bf 8f4f 	dsb	sy
	__DSB();
	__WFE();
  400fce:	bf20      	wfe
	__WFI();
  400fd0:	bf30      	wfi
  400fd2:	4770      	bx	lr
  400fd4:	a5000004 	.word	0xa5000004

00400fd8 <supc_set_wakeup_mode>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_mode Bitmask of wake up mode (please refer to datasheet for more details).
 */
void supc_set_wakeup_mode(Supc *p_supc, uint32_t ul_mode)
{
	p_supc->SUPC_WUMR = ul_mode;
  400fd8:	60c1      	str	r1, [r0, #12]
  400fda:	4770      	bx	lr

00400fdc <supc_set_wakeup_inputs>:
 * 0 means a low-to-high level transition forces the wake up of core power supply.
 */
void supc_set_wakeup_inputs(Supc *p_supc, uint32_t ul_inputs,
		uint32_t ul_transition)
{
	p_supc->SUPC_WUIR = ul_inputs | ul_transition;
  400fdc:	430a      	orrs	r2, r1
  400fde:	6102      	str	r2, [r0, #16]
  400fe0:	4770      	bx	lr

00400fe2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400fe2:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400fe4:	0189      	lsls	r1, r1, #6
  400fe6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400fe8:	2402      	movs	r4, #2
  400fea:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400fec:	f04f 31ff 	mov.w	r1, #4294967295
  400ff0:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400ff2:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400ff4:	605a      	str	r2, [r3, #4]
}
  400ff6:	bc10      	pop	{r4}
  400ff8:	4770      	bx	lr

00400ffa <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400ffa:	0189      	lsls	r1, r1, #6
  400ffc:	2305      	movs	r3, #5
  400ffe:	5043      	str	r3, [r0, r1]
  401000:	4770      	bx	lr

00401002 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  401002:	0189      	lsls	r1, r1, #6
  401004:	2302      	movs	r3, #2
  401006:	5043      	str	r3, [r0, r1]
  401008:	4770      	bx	lr

0040100a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40100a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40100e:	61ca      	str	r2, [r1, #28]
  401010:	4770      	bx	lr

00401012 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401012:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  401016:	624a      	str	r2, [r1, #36]	; 0x24
  401018:	4770      	bx	lr

0040101a <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40101a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40101e:	6a08      	ldr	r0, [r1, #32]
}
  401020:	4770      	bx	lr
	...

00401024 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  401024:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  401026:	4601      	mov	r1, r0
  401028:	bb28      	cbnz	r0, 401076 <udd_sleep_mode+0x52>
  40102a:	4b24      	ldr	r3, [pc, #144]	; (4010bc <udd_sleep_mode+0x98>)
  40102c:	781b      	ldrb	r3, [r3, #0]
  40102e:	b91b      	cbnz	r3, 401038 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401030:	4b22      	ldr	r3, [pc, #136]	; (4010bc <udd_sleep_mode+0x98>)
  401032:	7019      	strb	r1, [r3, #0]
}
  401034:	b002      	add	sp, #8
  401036:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  401038:	4b21      	ldr	r3, [pc, #132]	; (4010c0 <udd_sleep_mode+0x9c>)
  40103a:	789b      	ldrb	r3, [r3, #2]
  40103c:	b903      	cbnz	r3, 401040 <udd_sleep_mode+0x1c>
  40103e:	e7fe      	b.n	40103e <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401040:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401044:	fab3 f383 	clz	r3, r3
  401048:	095b      	lsrs	r3, r3, #5
  40104a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40104c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40104e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401052:	2200      	movs	r2, #0
  401054:	4b1b      	ldr	r3, [pc, #108]	; (4010c4 <udd_sleep_mode+0xa0>)
  401056:	701a      	strb	r2, [r3, #0]
	return flags;
  401058:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  40105a:	4a19      	ldr	r2, [pc, #100]	; (4010c0 <udd_sleep_mode+0x9c>)
  40105c:	7893      	ldrb	r3, [r2, #2]
  40105e:	3b01      	subs	r3, #1
  401060:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  401062:	2800      	cmp	r0, #0
  401064:	d0e4      	beq.n	401030 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  401066:	2201      	movs	r2, #1
  401068:	4b16      	ldr	r3, [pc, #88]	; (4010c4 <udd_sleep_mode+0xa0>)
  40106a:	701a      	strb	r2, [r3, #0]
  40106c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401070:	b662      	cpsie	i
  401072:	e7dd      	b.n	401030 <udd_sleep_mode+0xc>
  401074:	e7fe      	b.n	401074 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  401076:	4b11      	ldr	r3, [pc, #68]	; (4010bc <udd_sleep_mode+0x98>)
  401078:	781b      	ldrb	r3, [r3, #0]
  40107a:	2b00      	cmp	r3, #0
  40107c:	d1d8      	bne.n	401030 <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  40107e:	4b10      	ldr	r3, [pc, #64]	; (4010c0 <udd_sleep_mode+0x9c>)
  401080:	789b      	ldrb	r3, [r3, #2]
  401082:	2bff      	cmp	r3, #255	; 0xff
  401084:	d0f6      	beq.n	401074 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401086:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40108a:	fab3 f383 	clz	r3, r3
  40108e:	095b      	lsrs	r3, r3, #5
  401090:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401092:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401094:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401098:	2200      	movs	r2, #0
  40109a:	4b0a      	ldr	r3, [pc, #40]	; (4010c4 <udd_sleep_mode+0xa0>)
  40109c:	701a      	strb	r2, [r3, #0]
	return flags;
  40109e:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  4010a0:	4a07      	ldr	r2, [pc, #28]	; (4010c0 <udd_sleep_mode+0x9c>)
  4010a2:	7893      	ldrb	r3, [r2, #2]
  4010a4:	3301      	adds	r3, #1
  4010a6:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  4010a8:	2800      	cmp	r0, #0
  4010aa:	d0c1      	beq.n	401030 <udd_sleep_mode+0xc>
		cpu_irq_enable();
  4010ac:	2201      	movs	r2, #1
  4010ae:	4b05      	ldr	r3, [pc, #20]	; (4010c4 <udd_sleep_mode+0xa0>)
  4010b0:	701a      	strb	r2, [r3, #0]
  4010b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010b6:	b662      	cpsie	i
  4010b8:	e7ba      	b.n	401030 <udd_sleep_mode+0xc>
  4010ba:	bf00      	nop
  4010bc:	20000c45 	.word	0x20000c45
  4010c0:	200014d8 	.word	0x200014d8
  4010c4:	200000a0 	.word	0x200000a0

004010c8 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4010c8:	4a03      	ldr	r2, [pc, #12]	; (4010d8 <udd_ctrl_init+0x10>)
  4010ca:	2300      	movs	r3, #0
  4010cc:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4010ce:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4010d0:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4010d2:	4a02      	ldr	r2, [pc, #8]	; (4010dc <udd_ctrl_init+0x14>)
  4010d4:	7013      	strb	r3, [r2, #0]
  4010d6:	4770      	bx	lr
  4010d8:	200014e0 	.word	0x200014e0
  4010dc:	20000c4a 	.word	0x20000c4a

004010e0 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  4010e0:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4010e2:	2205      	movs	r2, #5
  4010e4:	4b0a      	ldr	r3, [pc, #40]	; (401110 <udd_ctrl_stall_data+0x30>)
  4010e6:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4010e8:	4a0a      	ldr	r2, [pc, #40]	; (401114 <udd_ctrl_stall_data+0x34>)
  4010ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4010ec:	9301      	str	r3, [sp, #4]
  4010ee:	9b01      	ldr	r3, [sp, #4]
  4010f0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4010f4:	9301      	str	r3, [sp, #4]
  4010f6:	9b01      	ldr	r3, [sp, #4]
  4010f8:	f043 0320 	orr.w	r3, r3, #32
  4010fc:	9301      	str	r3, [sp, #4]
  4010fe:	9b01      	ldr	r3, [sp, #4]
  401100:	6313      	str	r3, [r2, #48]	; 0x30
  401102:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401104:	f013 0f20 	tst.w	r3, #32
  401108:	d0fb      	beq.n	401102 <udd_ctrl_stall_data+0x22>
}
  40110a:	b002      	add	sp, #8
  40110c:	4770      	bx	lr
  40110e:	bf00      	nop
  401110:	20000c4a 	.word	0x20000c4a
  401114:	40034000 	.word	0x40034000

00401118 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401118:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40111a:	2203      	movs	r2, #3
  40111c:	4b0a      	ldr	r3, [pc, #40]	; (401148 <udd_ctrl_send_zlp_in+0x30>)
  40111e:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401120:	4a0a      	ldr	r2, [pc, #40]	; (40114c <udd_ctrl_send_zlp_in+0x34>)
  401122:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401124:	9301      	str	r3, [sp, #4]
  401126:	9b01      	ldr	r3, [sp, #4]
  401128:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40112c:	9301      	str	r3, [sp, #4]
  40112e:	9b01      	ldr	r3, [sp, #4]
  401130:	f043 0310 	orr.w	r3, r3, #16
  401134:	9301      	str	r3, [sp, #4]
  401136:	9b01      	ldr	r3, [sp, #4]
  401138:	6313      	str	r3, [r2, #48]	; 0x30
  40113a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40113c:	f013 0f10 	tst.w	r3, #16
  401140:	d0fb      	beq.n	40113a <udd_ctrl_send_zlp_in+0x22>
}
  401142:	b002      	add	sp, #8
  401144:	4770      	bx	lr
  401146:	bf00      	nop
  401148:	20000c4a 	.word	0x20000c4a
  40114c:	40034000 	.word	0x40034000

00401150 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401150:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401152:	4b02      	ldr	r3, [pc, #8]	; (40115c <udd_ctrl_endofrequest+0xc>)
  401154:	691b      	ldr	r3, [r3, #16]
  401156:	b103      	cbz	r3, 40115a <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401158:	4798      	blx	r3
  40115a:	bd08      	pop	{r3, pc}
  40115c:	200014e0 	.word	0x200014e0

00401160 <udd_ctrl_in_sent>:
{
  401160:	b530      	push	{r4, r5, lr}
  401162:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401164:	4b63      	ldr	r3, [pc, #396]	; (4012f4 <udd_ctrl_in_sent+0x194>)
  401166:	781b      	ldrb	r3, [r3, #0]
  401168:	2b03      	cmp	r3, #3
  40116a:	d029      	beq.n	4011c0 <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  40116c:	4b62      	ldr	r3, [pc, #392]	; (4012f8 <udd_ctrl_in_sent+0x198>)
  40116e:	881b      	ldrh	r3, [r3, #0]
  401170:	4a62      	ldr	r2, [pc, #392]	; (4012fc <udd_ctrl_in_sent+0x19c>)
  401172:	8994      	ldrh	r4, [r2, #12]
  401174:	1ae4      	subs	r4, r4, r3
  401176:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401178:	2c00      	cmp	r4, #0
  40117a:	d144      	bne.n	401206 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40117c:	4a60      	ldr	r2, [pc, #384]	; (401300 <udd_ctrl_in_sent+0x1a0>)
  40117e:	8811      	ldrh	r1, [r2, #0]
  401180:	440b      	add	r3, r1
  401182:	b29b      	uxth	r3, r3
  401184:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401186:	4a5d      	ldr	r2, [pc, #372]	; (4012fc <udd_ctrl_in_sent+0x19c>)
  401188:	88d2      	ldrh	r2, [r2, #6]
  40118a:	429a      	cmp	r2, r3
  40118c:	d003      	beq.n	401196 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  40118e:	4b5d      	ldr	r3, [pc, #372]	; (401304 <udd_ctrl_in_sent+0x1a4>)
  401190:	781b      	ldrb	r3, [r3, #0]
  401192:	2b00      	cmp	r3, #0
  401194:	d02b      	beq.n	4011ee <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401196:	2204      	movs	r2, #4
  401198:	4b56      	ldr	r3, [pc, #344]	; (4012f4 <udd_ctrl_in_sent+0x194>)
  40119a:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  40119c:	4a5a      	ldr	r2, [pc, #360]	; (401308 <udd_ctrl_in_sent+0x1a8>)
  40119e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011a0:	9301      	str	r3, [sp, #4]
  4011a2:	9b01      	ldr	r3, [sp, #4]
  4011a4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011a8:	9301      	str	r3, [sp, #4]
  4011aa:	9b01      	ldr	r3, [sp, #4]
  4011ac:	f023 0301 	bic.w	r3, r3, #1
  4011b0:	9301      	str	r3, [sp, #4]
  4011b2:	9b01      	ldr	r3, [sp, #4]
  4011b4:	6313      	str	r3, [r2, #48]	; 0x30
  4011b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011b8:	f013 0f01 	tst.w	r3, #1
  4011bc:	d1fb      	bne.n	4011b6 <udd_ctrl_in_sent+0x56>
  4011be:	e014      	b.n	4011ea <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  4011c0:	4a51      	ldr	r2, [pc, #324]	; (401308 <udd_ctrl_in_sent+0x1a8>)
  4011c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011c4:	9300      	str	r3, [sp, #0]
  4011c6:	9b00      	ldr	r3, [sp, #0]
  4011c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011cc:	9300      	str	r3, [sp, #0]
  4011ce:	9b00      	ldr	r3, [sp, #0]
  4011d0:	f023 0301 	bic.w	r3, r3, #1
  4011d4:	9300      	str	r3, [sp, #0]
  4011d6:	9b00      	ldr	r3, [sp, #0]
  4011d8:	6313      	str	r3, [r2, #48]	; 0x30
  4011da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011dc:	f013 0f01 	tst.w	r3, #1
  4011e0:	d1fb      	bne.n	4011da <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  4011e2:	4b4a      	ldr	r3, [pc, #296]	; (40130c <udd_ctrl_in_sent+0x1ac>)
  4011e4:	4798      	blx	r3
		udd_ctrl_init();
  4011e6:	4b4a      	ldr	r3, [pc, #296]	; (401310 <udd_ctrl_in_sent+0x1b0>)
  4011e8:	4798      	blx	r3
}
  4011ea:	b007      	add	sp, #28
  4011ec:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  4011ee:	4b43      	ldr	r3, [pc, #268]	; (4012fc <udd_ctrl_in_sent+0x19c>)
  4011f0:	695b      	ldr	r3, [r3, #20]
  4011f2:	2b00      	cmp	r3, #0
  4011f4:	d05d      	beq.n	4012b2 <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  4011f6:	4798      	blx	r3
  4011f8:	2800      	cmp	r0, #0
  4011fa:	d05a      	beq.n	4012b2 <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  4011fc:	2200      	movs	r2, #0
  4011fe:	4b3e      	ldr	r3, [pc, #248]	; (4012f8 <udd_ctrl_in_sent+0x198>)
  401200:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401202:	4b3e      	ldr	r3, [pc, #248]	; (4012fc <udd_ctrl_in_sent+0x19c>)
  401204:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401206:	2c3f      	cmp	r4, #63	; 0x3f
  401208:	d953      	bls.n	4012b2 <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  40120a:	2200      	movs	r2, #0
  40120c:	4b3d      	ldr	r3, [pc, #244]	; (401304 <udd_ctrl_in_sent+0x1a4>)
  40120e:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401210:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401212:	4b3a      	ldr	r3, [pc, #232]	; (4012fc <udd_ctrl_in_sent+0x19c>)
  401214:	6899      	ldr	r1, [r3, #8]
  401216:	4b38      	ldr	r3, [pc, #224]	; (4012f8 <udd_ctrl_in_sent+0x198>)
  401218:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40121a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40121e:	fab3 f383 	clz	r3, r3
  401222:	095b      	lsrs	r3, r3, #5
  401224:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  401226:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401228:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40122c:	2200      	movs	r2, #0
  40122e:	4b39      	ldr	r3, [pc, #228]	; (401314 <udd_ctrl_in_sent+0x1b4>)
  401230:	701a      	strb	r2, [r3, #0]
	return flags;
  401232:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  401234:	4b34      	ldr	r3, [pc, #208]	; (401308 <udd_ctrl_in_sent+0x1a8>)
  401236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401238:	f013 0f02 	tst.w	r3, #2
  40123c:	d13d      	bne.n	4012ba <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  40123e:	b14c      	cbz	r4, 401254 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401240:	4401      	add	r1, r0
  401242:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  401244:	4830      	ldr	r0, [pc, #192]	; (401308 <udd_ctrl_in_sent+0x1a8>)
  401246:	f812 3b01 	ldrb.w	r3, [r2], #1
  40124a:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  40124c:	1a53      	subs	r3, r2, r1
  40124e:	b2db      	uxtb	r3, r3
  401250:	42a3      	cmp	r3, r4
  401252:	d3f8      	bcc.n	401246 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  401254:	4b28      	ldr	r3, [pc, #160]	; (4012f8 <udd_ctrl_in_sent+0x198>)
  401256:	881a      	ldrh	r2, [r3, #0]
  401258:	4414      	add	r4, r2
  40125a:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  40125c:	4a2a      	ldr	r2, [pc, #168]	; (401308 <udd_ctrl_in_sent+0x1a8>)
  40125e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401260:	9303      	str	r3, [sp, #12]
  401262:	9b03      	ldr	r3, [sp, #12]
  401264:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401268:	9303      	str	r3, [sp, #12]
  40126a:	9b03      	ldr	r3, [sp, #12]
  40126c:	f043 0310 	orr.w	r3, r3, #16
  401270:	9303      	str	r3, [sp, #12]
  401272:	9b03      	ldr	r3, [sp, #12]
  401274:	6313      	str	r3, [r2, #48]	; 0x30
  401276:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401278:	f013 0f10 	tst.w	r3, #16
  40127c:	d0fb      	beq.n	401276 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  40127e:	4a22      	ldr	r2, [pc, #136]	; (401308 <udd_ctrl_in_sent+0x1a8>)
  401280:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401282:	9304      	str	r3, [sp, #16]
  401284:	9b04      	ldr	r3, [sp, #16]
  401286:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40128a:	9304      	str	r3, [sp, #16]
  40128c:	9b04      	ldr	r3, [sp, #16]
  40128e:	f023 0301 	bic.w	r3, r3, #1
  401292:	9304      	str	r3, [sp, #16]
  401294:	9b04      	ldr	r3, [sp, #16]
  401296:	6313      	str	r3, [r2, #48]	; 0x30
  401298:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40129a:	f013 0f01 	tst.w	r3, #1
  40129e:	d1fb      	bne.n	401298 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  4012a0:	2d00      	cmp	r5, #0
  4012a2:	d0a2      	beq.n	4011ea <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  4012a4:	2201      	movs	r2, #1
  4012a6:	4b1b      	ldr	r3, [pc, #108]	; (401314 <udd_ctrl_in_sent+0x1b4>)
  4012a8:	701a      	strb	r2, [r3, #0]
  4012aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4012ae:	b662      	cpsie	i
  4012b0:	e79b      	b.n	4011ea <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  4012b2:	2201      	movs	r2, #1
  4012b4:	4b13      	ldr	r3, [pc, #76]	; (401304 <udd_ctrl_in_sent+0x1a4>)
  4012b6:	701a      	strb	r2, [r3, #0]
  4012b8:	e7ab      	b.n	401212 <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  4012ba:	b12d      	cbz	r5, 4012c8 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  4012bc:	2201      	movs	r2, #1
  4012be:	4b15      	ldr	r3, [pc, #84]	; (401314 <udd_ctrl_in_sent+0x1b4>)
  4012c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4012c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4012c6:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4012c8:	2204      	movs	r2, #4
  4012ca:	4b0a      	ldr	r3, [pc, #40]	; (4012f4 <udd_ctrl_in_sent+0x194>)
  4012cc:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  4012ce:	4a0e      	ldr	r2, [pc, #56]	; (401308 <udd_ctrl_in_sent+0x1a8>)
  4012d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012d2:	9302      	str	r3, [sp, #8]
  4012d4:	9b02      	ldr	r3, [sp, #8]
  4012d6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4012da:	9302      	str	r3, [sp, #8]
  4012dc:	9b02      	ldr	r3, [sp, #8]
  4012de:	f023 0301 	bic.w	r3, r3, #1
  4012e2:	9302      	str	r3, [sp, #8]
  4012e4:	9b02      	ldr	r3, [sp, #8]
  4012e6:	6313      	str	r3, [r2, #48]	; 0x30
  4012e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012ea:	f013 0f01 	tst.w	r3, #1
  4012ee:	d1fb      	bne.n	4012e8 <udd_ctrl_in_sent+0x188>
  4012f0:	e77b      	b.n	4011ea <udd_ctrl_in_sent+0x8a>
  4012f2:	bf00      	nop
  4012f4:	20000c4a 	.word	0x20000c4a
  4012f8:	20000c46 	.word	0x20000c46
  4012fc:	200014e0 	.word	0x200014e0
  401300:	20000c48 	.word	0x20000c48
  401304:	20000c44 	.word	0x20000c44
  401308:	40034000 	.word	0x40034000
  40130c:	00401151 	.word	0x00401151
  401310:	004010c9 	.word	0x004010c9
  401314:	200000a0 	.word	0x200000a0

00401318 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401318:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  40131a:	7c43      	ldrb	r3, [r0, #17]
  40131c:	f013 0f10 	tst.w	r3, #16
  401320:	d016      	beq.n	401350 <udd_ep_finish_job+0x38>
  401322:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  401324:	7c43      	ldrb	r3, [r0, #17]
  401326:	f36f 1304 	bfc	r3, #4, #1
  40132a:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  40132c:	6804      	ldr	r4, [r0, #0]
  40132e:	b17c      	cbz	r4, 401350 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401330:	f102 030c 	add.w	r3, r2, #12
  401334:	4907      	ldr	r1, [pc, #28]	; (401354 <udd_ep_finish_job+0x3c>)
  401336:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40133a:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  40133e:	bf18      	it	ne
  401340:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401344:	6881      	ldr	r1, [r0, #8]
  401346:	2d01      	cmp	r5, #1
  401348:	bf14      	ite	ne
  40134a:	2000      	movne	r0, #0
  40134c:	2001      	moveq	r0, #1
  40134e:	47a0      	blx	r4
  401350:	bd38      	pop	{r3, r4, r5, pc}
  401352:	bf00      	nop
  401354:	40034000 	.word	0x40034000

00401358 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401358:	b430      	push	{r4, r5}
  40135a:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40135c:	1e41      	subs	r1, r0, #1
  40135e:	0083      	lsls	r3, r0, #2
  401360:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401364:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  401368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  40136a:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  40136c:	f012 0f02 	tst.w	r2, #2
  401370:	d032      	beq.n	4013d8 <udd_ep_ack_out_received+0x80>
  401372:	f014 0f40 	tst.w	r4, #64	; 0x40
  401376:	d108      	bne.n	40138a <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401378:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40137c:	4c2a      	ldr	r4, [pc, #168]	; (401428 <udd_ep_ack_out_received+0xd0>)
  40137e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401382:	7c54      	ldrb	r4, [r2, #17]
  401384:	f36f 0483 	bfc	r4, #2, #2
  401388:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  40138a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40138e:	4c26      	ldr	r4, [pc, #152]	; (401428 <udd_ep_ack_out_received+0xd0>)
  401390:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401394:	7c52      	ldrb	r2, [r2, #17]
  401396:	f012 0f0c 	tst.w	r2, #12
  40139a:	d128      	bne.n	4013ee <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  40139c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40139e:	9200      	str	r2, [sp, #0]
  4013a0:	9a00      	ldr	r2, [sp, #0]
  4013a2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4013a6:	9200      	str	r2, [sp, #0]
  4013a8:	9a00      	ldr	r2, [sp, #0]
  4013aa:	f022 0202 	bic.w	r2, r2, #2
  4013ae:	9200      	str	r2, [sp, #0]
  4013b0:	9a00      	ldr	r2, [sp, #0]
  4013b2:	631a      	str	r2, [r3, #48]	; 0x30
  4013b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4013b6:	f012 0f02 	tst.w	r2, #2
  4013ba:	d1fb      	bne.n	4013b4 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4013bc:	b380      	cbz	r0, 401420 <udd_ep_ack_out_received+0xc8>
  4013be:	2803      	cmp	r0, #3
  4013c0:	d02e      	beq.n	401420 <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  4013c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4013c6:	4b18      	ldr	r3, [pc, #96]	; (401428 <udd_ep_ack_out_received+0xd0>)
  4013c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  4013cc:	7c5a      	ldrb	r2, [r3, #17]
  4013ce:	2101      	movs	r1, #1
  4013d0:	f361 0283 	bfi	r2, r1, #2, #2
  4013d4:	745a      	strb	r2, [r3, #17]
  4013d6:	e023      	b.n	401420 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  4013d8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4013dc:	4c12      	ldr	r4, [pc, #72]	; (401428 <udd_ep_ack_out_received+0xd0>)
  4013de:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  4013e2:	7c54      	ldrb	r4, [r2, #17]
  4013e4:	2501      	movs	r5, #1
  4013e6:	f365 0483 	bfi	r4, r5, #2, #2
  4013ea:	7454      	strb	r4, [r2, #17]
  4013ec:	e7cd      	b.n	40138a <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  4013ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4013f0:	9201      	str	r2, [sp, #4]
  4013f2:	9a01      	ldr	r2, [sp, #4]
  4013f4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4013f8:	9201      	str	r2, [sp, #4]
  4013fa:	9a01      	ldr	r2, [sp, #4]
  4013fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  401400:	9201      	str	r2, [sp, #4]
  401402:	9a01      	ldr	r2, [sp, #4]
  401404:	631a      	str	r2, [r3, #48]	; 0x30
  401406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401408:	f012 0f40 	tst.w	r2, #64	; 0x40
  40140c:	d1fb      	bne.n	401406 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  40140e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401412:	4b05      	ldr	r3, [pc, #20]	; (401428 <udd_ep_ack_out_received+0xd0>)
  401414:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401418:	7c4b      	ldrb	r3, [r1, #17]
  40141a:	f36f 0383 	bfc	r3, #2, #2
  40141e:	744b      	strb	r3, [r1, #17]
	}
}
  401420:	b002      	add	sp, #8
  401422:	bc30      	pop	{r4, r5}
  401424:	4770      	bx	lr
  401426:	bf00      	nop
  401428:	20000c4c 	.word	0x20000c4c

0040142c <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  40142c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401430:	b083      	sub	sp, #12
  401432:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401434:	4681      	mov	r9, r0
  401436:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401438:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  40143c:	4b66      	ldr	r3, [pc, #408]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  40143e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401442:	f893 c011 	ldrb.w	ip, [r3, #17]
  401446:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  40144a:	2800      	cmp	r0, #0
  40144c:	f000 80b7 	beq.w	4015be <udd_ep_in_sent+0x192>
  401450:	2803      	cmp	r0, #3
  401452:	bf0c      	ite	eq
  401454:	2301      	moveq	r3, #1
  401456:	2302      	movne	r3, #2
  401458:	4563      	cmp	r3, ip
  40145a:	f340 80b2 	ble.w	4015c2 <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  40145e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401462:	4a5d      	ldr	r2, [pc, #372]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  401464:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401468:	68da      	ldr	r2, [r3, #12]
  40146a:	689b      	ldr	r3, [r3, #8]
  40146c:	429a      	cmp	r2, r3
  40146e:	d309      	bcc.n	401484 <udd_ep_in_sent+0x58>
  401470:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  401474:	4c58      	ldr	r4, [pc, #352]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  401476:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40147a:	7c49      	ldrb	r1, [r1, #17]
  40147c:	f011 0f40 	tst.w	r1, #64	; 0x40
  401480:	f000 80a3 	beq.w	4015ca <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401484:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401488:	4953      	ldr	r1, [pc, #332]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  40148a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  40148e:	686c      	ldr	r4, [r5, #4]
  401490:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401492:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401494:	8a2b      	ldrh	r3, [r5, #16]
  401496:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  40149a:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  40149c:	bf3a      	itte	cc
  40149e:	460f      	movcc	r7, r1
		is_short_pkt = true;
  4014a0:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  4014a4:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  4014a8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4014ac:	494a      	ldr	r1, [pc, #296]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  4014ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4014b2:	443a      	add	r2, r7
  4014b4:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  4014b6:	2f07      	cmp	r7, #7
  4014b8:	d92b      	bls.n	401512 <udd_ep_in_sent+0xe6>
  4014ba:	f104 0308 	add.w	r3, r4, #8
  4014be:	463d      	mov	r5, r7
  4014c0:	0082      	lsls	r2, r0, #2
  4014c2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4014c6:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014ca:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  4014ce:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014d0:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  4014d4:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014d6:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  4014da:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014dc:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  4014e0:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014e2:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  4014e6:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014e8:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  4014ec:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014ee:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  4014f2:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4014f4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  4014f8:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  4014fa:	3d08      	subs	r5, #8
  4014fc:	3308      	adds	r3, #8
  4014fe:	2d07      	cmp	r5, #7
  401500:	d8e3      	bhi.n	4014ca <udd_ep_in_sent+0x9e>
  401502:	f1a7 0308 	sub.w	r3, r7, #8
  401506:	f023 0307 	bic.w	r3, r3, #7
  40150a:	3308      	adds	r3, #8
  40150c:	441c      	add	r4, r3
  40150e:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  401512:	b14f      	cbz	r7, 401528 <udd_ep_in_sent+0xfc>
  401514:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401516:	4931      	ldr	r1, [pc, #196]	; (4015dc <udd_ep_in_sent+0x1b0>)
  401518:	f109 0914 	add.w	r9, r9, #20
  40151c:	f814 2b01 	ldrb.w	r2, [r4], #1
  401520:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  401524:	429c      	cmp	r4, r3
  401526:	d1f9      	bne.n	40151c <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  401528:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40152c:	4a2a      	ldr	r2, [pc, #168]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  40152e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401532:	f10c 0c01 	add.w	ip, ip, #1
  401536:	7c5a      	ldrb	r2, [r3, #17]
  401538:	f36c 0283 	bfi	r2, ip, #2, #2
  40153c:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  40153e:	f1b8 0f00 	cmp.w	r8, #0
  401542:	d014      	beq.n	40156e <udd_ep_in_sent+0x142>
  401544:	0080      	lsls	r0, r0, #2
  401546:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  40154a:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  40154e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401550:	9301      	str	r3, [sp, #4]
  401552:	9b01      	ldr	r3, [sp, #4]
  401554:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401558:	9301      	str	r3, [sp, #4]
  40155a:	9b01      	ldr	r3, [sp, #4]
  40155c:	f043 0310 	orr.w	r3, r3, #16
  401560:	9301      	str	r3, [sp, #4]
  401562:	9b01      	ldr	r3, [sp, #4]
  401564:	6303      	str	r3, [r0, #48]	; 0x30
  401566:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401568:	f013 0f10 	tst.w	r3, #16
  40156c:	d0fb      	beq.n	401566 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  40156e:	f1be 0f00 	cmp.w	lr, #0
  401572:	d008      	beq.n	401586 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  401574:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401578:	4a17      	ldr	r2, [pc, #92]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  40157a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40157e:	7c5a      	ldrb	r2, [r3, #17]
  401580:	f36f 1286 	bfc	r2, #6, #1
  401584:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401586:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40158a:	4a13      	ldr	r2, [pc, #76]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  40158c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401590:	68da      	ldr	r2, [r3, #12]
  401592:	689b      	ldr	r3, [r3, #8]
  401594:	429a      	cmp	r2, r3
  401596:	d31a      	bcc.n	4015ce <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401598:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40159c:	4a0e      	ldr	r2, [pc, #56]	; (4015d8 <udd_ep_in_sent+0x1ac>)
  40159e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4015a2:	7c5b      	ldrb	r3, [r3, #17]
  4015a4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4015a8:	d113      	bne.n	4015d2 <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  4015aa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4015ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4015b2:	7c73      	ldrb	r3, [r6, #17]
  4015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4015b8:	7473      	strb	r3, [r6, #17]
		return false;
  4015ba:	2000      	movs	r0, #0
  4015bc:	e002      	b.n	4015c4 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4015be:	2301      	movs	r3, #1
  4015c0:	e74a      	b.n	401458 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  4015c2:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  4015c4:	b003      	add	sp, #12
  4015c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  4015ca:	2000      	movs	r0, #0
  4015cc:	e7fa      	b.n	4015c4 <udd_ep_in_sent+0x198>
	return true; // Pending
  4015ce:	2001      	movs	r0, #1
  4015d0:	e7f8      	b.n	4015c4 <udd_ep_in_sent+0x198>
  4015d2:	2001      	movs	r0, #1
  4015d4:	e7f6      	b.n	4015c4 <udd_ep_in_sent+0x198>
  4015d6:	bf00      	nop
  4015d8:	20000c4c 	.word	0x20000c4c
  4015dc:	40034000 	.word	0x40034000

004015e0 <UDP_Handler>:
{
  4015e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015e4:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  4015e6:	4b86      	ldr	r3, [pc, #536]	; (401800 <UDP_Handler+0x220>)
  4015e8:	4798      	blx	r3
  4015ea:	b920      	cbnz	r0, 4015f6 <UDP_Handler+0x16>
  4015ec:	4b85      	ldr	r3, [pc, #532]	; (401804 <UDP_Handler+0x224>)
  4015ee:	69db      	ldr	r3, [r3, #28]
  4015f0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4015f4:	d03b      	beq.n	40166e <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  4015f6:	2022      	movs	r0, #34	; 0x22
  4015f8:	4b83      	ldr	r3, [pc, #524]	; (401808 <UDP_Handler+0x228>)
  4015fa:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  4015fc:	4b81      	ldr	r3, [pc, #516]	; (401804 <UDP_Handler+0x224>)
  4015fe:	699b      	ldr	r3, [r3, #24]
  401600:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401604:	d004      	beq.n	401610 <UDP_Handler+0x30>
  401606:	4b7f      	ldr	r3, [pc, #508]	; (401804 <UDP_Handler+0x224>)
  401608:	69db      	ldr	r3, [r3, #28]
  40160a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40160e:	d137      	bne.n	401680 <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  401610:	4b7c      	ldr	r3, [pc, #496]	; (401804 <UDP_Handler+0x224>)
  401612:	69db      	ldr	r3, [r3, #28]
  401614:	f013 0f01 	tst.w	r3, #1
  401618:	f000 81b6 	beq.w	401988 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  40161c:	4b79      	ldr	r3, [pc, #484]	; (401804 <UDP_Handler+0x224>)
  40161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401620:	f013 0f04 	tst.w	r3, #4
  401624:	d133      	bne.n	40168e <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  401626:	4b77      	ldr	r3, [pc, #476]	; (401804 <UDP_Handler+0x224>)
  401628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40162a:	f013 0f01 	tst.w	r3, #1
  40162e:	f040 80c3 	bne.w	4017b8 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  401632:	4b74      	ldr	r3, [pc, #464]	; (401804 <UDP_Handler+0x224>)
  401634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401636:	f013 0f02 	tst.w	r3, #2
  40163a:	f040 80c0 	bne.w	4017be <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  40163e:	4b71      	ldr	r3, [pc, #452]	; (401804 <UDP_Handler+0x224>)
  401640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401642:	f013 0f08 	tst.w	r3, #8
  401646:	f000 819f 	beq.w	401988 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  40164a:	4a6e      	ldr	r2, [pc, #440]	; (401804 <UDP_Handler+0x224>)
  40164c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40164e:	9300      	str	r3, [sp, #0]
  401650:	9b00      	ldr	r3, [sp, #0]
  401652:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401656:	9300      	str	r3, [sp, #0]
  401658:	9b00      	ldr	r3, [sp, #0]
  40165a:	f023 0308 	bic.w	r3, r3, #8
  40165e:	9300      	str	r3, [sp, #0]
  401660:	9b00      	ldr	r3, [sp, #0]
  401662:	6313      	str	r3, [r2, #48]	; 0x30
  401664:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401666:	f013 0f08 	tst.w	r3, #8
  40166a:	d1fb      	bne.n	401664 <UDP_Handler+0x84>
  40166c:	e005      	b.n	40167a <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  40166e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401670:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401674:	2200      	movs	r2, #0
  401676:	4b65      	ldr	r3, [pc, #404]	; (40180c <UDP_Handler+0x22c>)
  401678:	701a      	strb	r2, [r3, #0]
}
  40167a:	b01b      	add	sp, #108	; 0x6c
  40167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  401680:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401684:	4b5f      	ldr	r3, [pc, #380]	; (401804 <UDP_Handler+0x224>)
  401686:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401688:	4b61      	ldr	r3, [pc, #388]	; (401810 <UDP_Handler+0x230>)
  40168a:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  40168c:	e7f5      	b.n	40167a <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40168e:	4b61      	ldr	r3, [pc, #388]	; (401814 <UDP_Handler+0x234>)
  401690:	781b      	ldrb	r3, [r3, #0]
  401692:	b9cb      	cbnz	r3, 4016c8 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  401694:	4b5b      	ldr	r3, [pc, #364]	; (401804 <UDP_Handler+0x224>)
  401696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401698:	f3c3 430a 	ubfx	r3, r3, #16, #11
  40169c:	2b08      	cmp	r3, #8
  40169e:	d018      	beq.n	4016d2 <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  4016a0:	4a58      	ldr	r2, [pc, #352]	; (401804 <UDP_Handler+0x224>)
  4016a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016a4:	9301      	str	r3, [sp, #4]
  4016a6:	9b01      	ldr	r3, [sp, #4]
  4016a8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016ac:	9301      	str	r3, [sp, #4]
  4016ae:	9b01      	ldr	r3, [sp, #4]
  4016b0:	f023 0304 	bic.w	r3, r3, #4
  4016b4:	9301      	str	r3, [sp, #4]
  4016b6:	9b01      	ldr	r3, [sp, #4]
  4016b8:	6313      	str	r3, [r2, #48]	; 0x30
  4016ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016bc:	f013 0f04 	tst.w	r3, #4
  4016c0:	d1fb      	bne.n	4016ba <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  4016c2:	4b55      	ldr	r3, [pc, #340]	; (401818 <UDP_Handler+0x238>)
  4016c4:	4798      	blx	r3
  4016c6:	e7d8      	b.n	40167a <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  4016c8:	4b54      	ldr	r3, [pc, #336]	; (40181c <UDP_Handler+0x23c>)
  4016ca:	4798      	blx	r3
		udd_ctrl_init();
  4016cc:	4b54      	ldr	r3, [pc, #336]	; (401820 <UDP_Handler+0x240>)
  4016ce:	4798      	blx	r3
  4016d0:	e7e0      	b.n	401694 <UDP_Handler+0xb4>
  4016d2:	4b54      	ldr	r3, [pc, #336]	; (401824 <UDP_Handler+0x244>)
  4016d4:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  4016d8:	494a      	ldr	r1, [pc, #296]	; (401804 <UDP_Handler+0x224>)
  4016da:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4016dc:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  4016e0:	4283      	cmp	r3, r0
  4016e2:	d1fa      	bne.n	4016da <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  4016e4:	4b50      	ldr	r3, [pc, #320]	; (401828 <UDP_Handler+0x248>)
  4016e6:	4798      	blx	r3
  4016e8:	b998      	cbnz	r0, 401712 <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  4016ea:	4a46      	ldr	r2, [pc, #280]	; (401804 <UDP_Handler+0x224>)
  4016ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4016ee:	9302      	str	r3, [sp, #8]
  4016f0:	9b02      	ldr	r3, [sp, #8]
  4016f2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016f6:	9302      	str	r3, [sp, #8]
  4016f8:	9b02      	ldr	r3, [sp, #8]
  4016fa:	f023 0304 	bic.w	r3, r3, #4
  4016fe:	9302      	str	r3, [sp, #8]
  401700:	9b02      	ldr	r3, [sp, #8]
  401702:	6313      	str	r3, [r2, #48]	; 0x30
  401704:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401706:	f013 0f04 	tst.w	r3, #4
  40170a:	d1fb      	bne.n	401704 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  40170c:	4b42      	ldr	r3, [pc, #264]	; (401818 <UDP_Handler+0x238>)
  40170e:	4798      	blx	r3
  401710:	e7b3      	b.n	40167a <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  401712:	4b46      	ldr	r3, [pc, #280]	; (40182c <UDP_Handler+0x24c>)
  401714:	f993 3000 	ldrsb.w	r3, [r3]
  401718:	2b00      	cmp	r3, #0
  40171a:	db1d      	blt.n	401758 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  40171c:	4a39      	ldr	r2, [pc, #228]	; (401804 <UDP_Handler+0x224>)
  40171e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401720:	9305      	str	r3, [sp, #20]
  401722:	9b05      	ldr	r3, [sp, #20]
  401724:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401728:	9305      	str	r3, [sp, #20]
  40172a:	9b05      	ldr	r3, [sp, #20]
  40172c:	f023 0304 	bic.w	r3, r3, #4
  401730:	9305      	str	r3, [sp, #20]
  401732:	9b05      	ldr	r3, [sp, #20]
  401734:	6313      	str	r3, [r2, #48]	; 0x30
  401736:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401738:	f013 0f04 	tst.w	r3, #4
  40173c:	d1fb      	bne.n	401736 <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40173e:	4b3b      	ldr	r3, [pc, #236]	; (40182c <UDP_Handler+0x24c>)
  401740:	88db      	ldrh	r3, [r3, #6]
  401742:	2b00      	cmp	r3, #0
  401744:	d035      	beq.n	4017b2 <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  401746:	2300      	movs	r3, #0
  401748:	4a39      	ldr	r2, [pc, #228]	; (401830 <UDP_Handler+0x250>)
  40174a:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40174c:	4a39      	ldr	r2, [pc, #228]	; (401834 <UDP_Handler+0x254>)
  40174e:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401750:	2201      	movs	r2, #1
  401752:	4b30      	ldr	r3, [pc, #192]	; (401814 <UDP_Handler+0x234>)
  401754:	701a      	strb	r2, [r3, #0]
  401756:	e790      	b.n	40167a <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  401758:	4a2a      	ldr	r2, [pc, #168]	; (401804 <UDP_Handler+0x224>)
  40175a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40175c:	9303      	str	r3, [sp, #12]
  40175e:	9b03      	ldr	r3, [sp, #12]
  401760:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401764:	9303      	str	r3, [sp, #12]
  401766:	9b03      	ldr	r3, [sp, #12]
  401768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40176c:	9303      	str	r3, [sp, #12]
  40176e:	9b03      	ldr	r3, [sp, #12]
  401770:	6313      	str	r3, [r2, #48]	; 0x30
  401772:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401774:	f013 0f80 	tst.w	r3, #128	; 0x80
  401778:	d0fb      	beq.n	401772 <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  40177a:	4a22      	ldr	r2, [pc, #136]	; (401804 <UDP_Handler+0x224>)
  40177c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40177e:	9304      	str	r3, [sp, #16]
  401780:	9b04      	ldr	r3, [sp, #16]
  401782:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401786:	9304      	str	r3, [sp, #16]
  401788:	9b04      	ldr	r3, [sp, #16]
  40178a:	f023 0304 	bic.w	r3, r3, #4
  40178e:	9304      	str	r3, [sp, #16]
  401790:	9b04      	ldr	r3, [sp, #16]
  401792:	6313      	str	r3, [r2, #48]	; 0x30
  401794:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401796:	f013 0f04 	tst.w	r3, #4
  40179a:	d1fb      	bne.n	401794 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  40179c:	2300      	movs	r3, #0
  40179e:	4a24      	ldr	r2, [pc, #144]	; (401830 <UDP_Handler+0x250>)
  4017a0:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4017a2:	4a24      	ldr	r2, [pc, #144]	; (401834 <UDP_Handler+0x254>)
  4017a4:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4017a6:	2202      	movs	r2, #2
  4017a8:	4b1a      	ldr	r3, [pc, #104]	; (401814 <UDP_Handler+0x234>)
  4017aa:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4017ac:	4b22      	ldr	r3, [pc, #136]	; (401838 <UDP_Handler+0x258>)
  4017ae:	4798      	blx	r3
  4017b0:	e763      	b.n	40167a <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  4017b2:	4b22      	ldr	r3, [pc, #136]	; (40183c <UDP_Handler+0x25c>)
  4017b4:	4798      	blx	r3
  4017b6:	e760      	b.n	40167a <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  4017b8:	4b1f      	ldr	r3, [pc, #124]	; (401838 <UDP_Handler+0x258>)
  4017ba:	4798      	blx	r3
  4017bc:	e75d      	b.n	40167a <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  4017be:	4b15      	ldr	r3, [pc, #84]	; (401814 <UDP_Handler+0x234>)
  4017c0:	781b      	ldrb	r3, [r3, #0]
  4017c2:	2b01      	cmp	r3, #1
  4017c4:	d03c      	beq.n	401840 <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  4017c6:	2b02      	cmp	r3, #2
  4017c8:	d004      	beq.n	4017d4 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  4017ca:	2b04      	cmp	r3, #4
  4017cc:	d002      	beq.n	4017d4 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  4017ce:	4b12      	ldr	r3, [pc, #72]	; (401818 <UDP_Handler+0x238>)
  4017d0:	4798      	blx	r3
  4017d2:	e001      	b.n	4017d8 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  4017d4:	4b11      	ldr	r3, [pc, #68]	; (40181c <UDP_Handler+0x23c>)
  4017d6:	4798      	blx	r3
		udd_ack_bank0_received(0);
  4017d8:	4a0a      	ldr	r2, [pc, #40]	; (401804 <UDP_Handler+0x224>)
  4017da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017dc:	9306      	str	r3, [sp, #24]
  4017de:	9b06      	ldr	r3, [sp, #24]
  4017e0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017e4:	9306      	str	r3, [sp, #24]
  4017e6:	9b06      	ldr	r3, [sp, #24]
  4017e8:	f023 0302 	bic.w	r3, r3, #2
  4017ec:	9306      	str	r3, [sp, #24]
  4017ee:	9b06      	ldr	r3, [sp, #24]
  4017f0:	6313      	str	r3, [r2, #48]	; 0x30
  4017f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4017f4:	f013 0f02 	tst.w	r3, #2
  4017f8:	d1fb      	bne.n	4017f2 <UDP_Handler+0x212>
		udd_ctrl_init();
  4017fa:	4b09      	ldr	r3, [pc, #36]	; (401820 <UDP_Handler+0x240>)
  4017fc:	4798      	blx	r3
  4017fe:	e73c      	b.n	40167a <UDP_Handler+0x9a>
  401800:	0040336d 	.word	0x0040336d
  401804:	40034000 	.word	0x40034000
  401808:	0040320d 	.word	0x0040320d
  40180c:	200000a0 	.word	0x200000a0
  401810:	004009f9 	.word	0x004009f9
  401814:	20000c4a 	.word	0x20000c4a
  401818:	004010e1 	.word	0x004010e1
  40181c:	00401151 	.word	0x00401151
  401820:	004010c9 	.word	0x004010c9
  401824:	200014df 	.word	0x200014df
  401828:	00400a39 	.word	0x00400a39
  40182c:	200014e0 	.word	0x200014e0
  401830:	20000c48 	.word	0x20000c48
  401834:	20000c46 	.word	0x20000c46
  401838:	00401161 	.word	0x00401161
  40183c:	00401119 	.word	0x00401119
	nb_data = udd_byte_count(0);
  401840:	4b93      	ldr	r3, [pc, #588]	; (401a90 <UDP_Handler+0x4b0>)
  401842:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401844:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401848:	4b92      	ldr	r3, [pc, #584]	; (401a94 <UDP_Handler+0x4b4>)
  40184a:	899b      	ldrh	r3, [r3, #12]
  40184c:	4a92      	ldr	r2, [pc, #584]	; (401a98 <UDP_Handler+0x4b8>)
  40184e:	8815      	ldrh	r5, [r2, #0]
  401850:	186a      	adds	r2, r5, r1
  401852:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  401854:	bfbc      	itt	lt
  401856:	1b5b      	sublt	r3, r3, r5
  401858:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40185a:	4b8e      	ldr	r3, [pc, #568]	; (401a94 <UDP_Handler+0x4b4>)
  40185c:	6898      	ldr	r0, [r3, #8]
  40185e:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401860:	b171      	cbz	r1, 401880 <UDP_Handler+0x2a0>
  401862:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401864:	4c8a      	ldr	r4, [pc, #552]	; (401a90 <UDP_Handler+0x4b0>)
  401866:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401868:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  40186c:	1a13      	subs	r3, r2, r0
  40186e:	b2db      	uxtb	r3, r3
  401870:	428b      	cmp	r3, r1
  401872:	d3f8      	bcc.n	401866 <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  401874:	440d      	add	r5, r1
  401876:	b2ad      	uxth	r5, r5
  401878:	4b87      	ldr	r3, [pc, #540]	; (401a98 <UDP_Handler+0x4b8>)
  40187a:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  40187c:	2940      	cmp	r1, #64	; 0x40
  40187e:	d01a      	beq.n	4018b6 <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401880:	4b84      	ldr	r3, [pc, #528]	; (401a94 <UDP_Handler+0x4b4>)
  401882:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401884:	695b      	ldr	r3, [r3, #20]
  401886:	b113      	cbz	r3, 40188e <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  401888:	4798      	blx	r3
  40188a:	2800      	cmp	r0, #0
  40188c:	d030      	beq.n	4018f0 <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  40188e:	4a80      	ldr	r2, [pc, #512]	; (401a90 <UDP_Handler+0x4b0>)
  401890:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401892:	9308      	str	r3, [sp, #32]
  401894:	9b08      	ldr	r3, [sp, #32]
  401896:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40189a:	9308      	str	r3, [sp, #32]
  40189c:	9b08      	ldr	r3, [sp, #32]
  40189e:	f023 0302 	bic.w	r3, r3, #2
  4018a2:	9308      	str	r3, [sp, #32]
  4018a4:	9b08      	ldr	r3, [sp, #32]
  4018a6:	6313      	str	r3, [r2, #48]	; 0x30
  4018a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018aa:	f013 0f02 	tst.w	r3, #2
  4018ae:	d1fb      	bne.n	4018a8 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  4018b0:	4b7a      	ldr	r3, [pc, #488]	; (401a9c <UDP_Handler+0x4bc>)
  4018b2:	4798      	blx	r3
  4018b4:	e6e1      	b.n	40167a <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  4018b6:	4b77      	ldr	r3, [pc, #476]	; (401a94 <UDP_Handler+0x4b4>)
  4018b8:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  4018ba:	4b79      	ldr	r3, [pc, #484]	; (401aa0 <UDP_Handler+0x4c0>)
  4018bc:	881b      	ldrh	r3, [r3, #0]
  4018be:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  4018c0:	429a      	cmp	r2, r3
  4018c2:	dddd      	ble.n	401880 <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4018c4:	4b73      	ldr	r3, [pc, #460]	; (401a94 <UDP_Handler+0x4b4>)
  4018c6:	899b      	ldrh	r3, [r3, #12]
  4018c8:	42ab      	cmp	r3, r5
  4018ca:	d025      	beq.n	401918 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  4018cc:	4a70      	ldr	r2, [pc, #448]	; (401a90 <UDP_Handler+0x4b0>)
  4018ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018d0:	930b      	str	r3, [sp, #44]	; 0x2c
  4018d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4018d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018d8:	930b      	str	r3, [sp, #44]	; 0x2c
  4018da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4018dc:	f023 0302 	bic.w	r3, r3, #2
  4018e0:	930b      	str	r3, [sp, #44]	; 0x2c
  4018e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4018e4:	6313      	str	r3, [r2, #48]	; 0x30
  4018e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018e8:	f013 0f02 	tst.w	r3, #2
  4018ec:	d1fb      	bne.n	4018e6 <UDP_Handler+0x306>
  4018ee:	e6c4      	b.n	40167a <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  4018f0:	4b6c      	ldr	r3, [pc, #432]	; (401aa4 <UDP_Handler+0x4c4>)
  4018f2:	4798      	blx	r3
				udd_ack_bank0_received(0);
  4018f4:	4a66      	ldr	r2, [pc, #408]	; (401a90 <UDP_Handler+0x4b0>)
  4018f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4018f8:	9307      	str	r3, [sp, #28]
  4018fa:	9b07      	ldr	r3, [sp, #28]
  4018fc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401900:	9307      	str	r3, [sp, #28]
  401902:	9b07      	ldr	r3, [sp, #28]
  401904:	f023 0302 	bic.w	r3, r3, #2
  401908:	9307      	str	r3, [sp, #28]
  40190a:	9b07      	ldr	r3, [sp, #28]
  40190c:	6313      	str	r3, [r2, #48]	; 0x30
  40190e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401910:	f013 0f02 	tst.w	r3, #2
  401914:	d1fb      	bne.n	40190e <UDP_Handler+0x32e>
  401916:	e6b0      	b.n	40167a <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  401918:	4b5e      	ldr	r3, [pc, #376]	; (401a94 <UDP_Handler+0x4b4>)
  40191a:	695b      	ldr	r3, [r3, #20]
  40191c:	b153      	cbz	r3, 401934 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  40191e:	4798      	blx	r3
  401920:	b1e8      	cbz	r0, 40195e <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401922:	495f      	ldr	r1, [pc, #380]	; (401aa0 <UDP_Handler+0x4c0>)
  401924:	4a5c      	ldr	r2, [pc, #368]	; (401a98 <UDP_Handler+0x4b8>)
  401926:	880b      	ldrh	r3, [r1, #0]
  401928:	8810      	ldrh	r0, [r2, #0]
  40192a:	4403      	add	r3, r0
  40192c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  40192e:	2300      	movs	r3, #0
  401930:	8013      	strh	r3, [r2, #0]
  401932:	e7cb      	b.n	4018cc <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  401934:	4b5b      	ldr	r3, [pc, #364]	; (401aa4 <UDP_Handler+0x4c4>)
  401936:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401938:	4a55      	ldr	r2, [pc, #340]	; (401a90 <UDP_Handler+0x4b0>)
  40193a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40193c:	9309      	str	r3, [sp, #36]	; 0x24
  40193e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401940:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401944:	9309      	str	r3, [sp, #36]	; 0x24
  401946:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401948:	f023 0302 	bic.w	r3, r3, #2
  40194c:	9309      	str	r3, [sp, #36]	; 0x24
  40194e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401950:	6313      	str	r3, [r2, #48]	; 0x30
  401952:	4613      	mov	r3, r2
  401954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401956:	f012 0f02 	tst.w	r2, #2
  40195a:	d1fb      	bne.n	401954 <UDP_Handler+0x374>
  40195c:	e68d      	b.n	40167a <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  40195e:	4b51      	ldr	r3, [pc, #324]	; (401aa4 <UDP_Handler+0x4c4>)
  401960:	4798      	blx	r3
			udd_ack_bank0_received(0);
  401962:	4a4b      	ldr	r2, [pc, #300]	; (401a90 <UDP_Handler+0x4b0>)
  401964:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401966:	930a      	str	r3, [sp, #40]	; 0x28
  401968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40196a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40196e:	930a      	str	r3, [sp, #40]	; 0x28
  401970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401972:	f023 0302 	bic.w	r3, r3, #2
  401976:	930a      	str	r3, [sp, #40]	; 0x28
  401978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40197a:	6313      	str	r3, [r2, #48]	; 0x30
  40197c:	4613      	mov	r3, r2
  40197e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401980:	f012 0f02 	tst.w	r2, #2
  401984:	d1fb      	bne.n	40197e <UDP_Handler+0x39e>
  401986:	e678      	b.n	40167a <UDP_Handler+0x9a>
  401988:	4a47      	ldr	r2, [pc, #284]	; (401aa8 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  40198a:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40198c:	f8df e100 	ldr.w	lr, [pc, #256]	; 401a90 <UDP_Handler+0x4b0>
  401990:	4618      	mov	r0, r3
  401992:	e17f      	b.n	401c94 <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  401994:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401998:	4b43      	ldr	r3, [pc, #268]	; (401aa8 <UDP_Handler+0x4c8>)
  40199a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40199e:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  4019a2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  4019a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4019a8:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  4019ac:	f1b9 0f00 	cmp.w	r9, #0
  4019b0:	f000 81df 	beq.w	401d72 <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4019b4:	4b3c      	ldr	r3, [pc, #240]	; (401aa8 <UDP_Handler+0x4c8>)
  4019b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4019ba:	f8d3 e008 	ldr.w	lr, [r3, #8]
  4019be:	68da      	ldr	r2, [r3, #12]
  4019c0:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4019c4:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  4019c6:	4548      	cmp	r0, r9
  4019c8:	f240 81c7 	bls.w	401d5a <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  4019cc:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  4019d0:	4b35      	ldr	r3, [pc, #212]	; (401aa8 <UDP_Handler+0x4c8>)
  4019d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  4019d6:	eb02 0009 	add.w	r0, r2, r9
  4019da:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  4019dc:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  4019de:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4019e2:	4411      	add	r1, r2
  4019e4:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4019e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4019e8:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  4019ec:	1a5a      	subs	r2, r3, r1
  4019ee:	4282      	cmp	r2, r0
  4019f0:	d3f9      	bcc.n	4019e6 <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  4019f2:	4630      	mov	r0, r6
  4019f4:	4b2d      	ldr	r3, [pc, #180]	; (401aac <UDP_Handler+0x4cc>)
  4019f6:	4798      	blx	r3
	if ((b_full || b_short) &&
  4019f8:	f1bb 0f00 	cmp.w	fp, #0
  4019fc:	f000 81bc 	beq.w	401d78 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  401a00:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  401a02:	f013 0f20 	tst.w	r3, #32
  401a06:	f47f ae38 	bne.w	40167a <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  401a0a:	4b21      	ldr	r3, [pc, #132]	; (401a90 <UDP_Handler+0x4b0>)
  401a0c:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401a0e:	4b26      	ldr	r3, [pc, #152]	; (401aa8 <UDP_Handler+0x4c8>)
  401a10:	00ba      	lsls	r2, r7, #2
  401a12:	19d1      	adds	r1, r2, r7
  401a14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401a18:	68cb      	ldr	r3, [r1, #12]
  401a1a:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401a1c:	4632      	mov	r2, r6
  401a1e:	2100      	movs	r1, #0
  401a20:	4640      	mov	r0, r8
  401a22:	4b23      	ldr	r3, [pc, #140]	; (401ab0 <UDP_Handler+0x4d0>)
  401a24:	4798      	blx	r3
  401a26:	e628      	b.n	40167a <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  401a28:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401a2c:	4b1e      	ldr	r3, [pc, #120]	; (401aa8 <UDP_Handler+0x4c8>)
  401a2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401a32:	7c53      	ldrb	r3, [r2, #17]
  401a34:	f3c3 0181 	ubfx	r1, r3, #2, #2
  401a38:	3103      	adds	r1, #3
  401a3a:	f361 0383 	bfi	r3, r1, #2, #2
  401a3e:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401a40:	7c53      	ldrb	r3, [r2, #17]
  401a42:	f013 0f20 	tst.w	r3, #32
  401a46:	d05f      	beq.n	401b08 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  401a48:	f013 0f0c 	tst.w	r3, #12
  401a4c:	d032      	beq.n	401ab4 <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  401a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a50:	930c      	str	r3, [sp, #48]	; 0x30
  401a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a58:	930c      	str	r3, [sp, #48]	; 0x30
  401a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a5c:	f043 0310 	orr.w	r3, r3, #16
  401a60:	930c      	str	r3, [sp, #48]	; 0x30
  401a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a64:	6323      	str	r3, [r4, #48]	; 0x30
  401a66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a68:	f013 0f10 	tst.w	r3, #16
  401a6c:	d0fb      	beq.n	401a66 <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  401a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a70:	930d      	str	r3, [sp, #52]	; 0x34
  401a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a74:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401a78:	930d      	str	r3, [sp, #52]	; 0x34
  401a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a7c:	f023 0301 	bic.w	r3, r3, #1
  401a80:	930d      	str	r3, [sp, #52]	; 0x34
  401a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401a84:	6323      	str	r3, [r4, #48]	; 0x30
  401a86:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401a88:	f013 0f01 	tst.w	r3, #1
  401a8c:	d1fb      	bne.n	401a86 <UDP_Handler+0x4a6>
  401a8e:	e5f4      	b.n	40167a <UDP_Handler+0x9a>
  401a90:	40034000 	.word	0x40034000
  401a94:	200014e0 	.word	0x200014e0
  401a98:	20000c46 	.word	0x20000c46
  401a9c:	00401119 	.word	0x00401119
  401aa0:	20000c48 	.word	0x20000c48
  401aa4:	004010e1 	.word	0x004010e1
  401aa8:	20000c4c 	.word	0x20000c4c
  401aac:	00401359 	.word	0x00401359
  401ab0:	00401319 	.word	0x00401319
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401ab4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ab6:	930e      	str	r3, [sp, #56]	; 0x38
  401ab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401aba:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401abe:	930e      	str	r3, [sp, #56]	; 0x38
  401ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401ac2:	f023 0301 	bic.w	r3, r3, #1
  401ac6:	930e      	str	r3, [sp, #56]	; 0x38
  401ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401aca:	6323      	str	r3, [r4, #48]	; 0x30
  401acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ace:	f013 0f01 	tst.w	r3, #1
  401ad2:	d1fb      	bne.n	401acc <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401ad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ad6:	930f      	str	r3, [sp, #60]	; 0x3c
  401ad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401ada:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ade:	930f      	str	r3, [sp, #60]	; 0x3c
  401ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401ae2:	f043 0320 	orr.w	r3, r3, #32
  401ae6:	930f      	str	r3, [sp, #60]	; 0x3c
  401ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401aea:	6323      	str	r3, [r4, #48]	; 0x30
  401aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401aee:	f013 0f20 	tst.w	r3, #32
  401af2:	d0fb      	beq.n	401aec <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401af4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401af8:	4ba1      	ldr	r3, [pc, #644]	; (401d80 <UDP_Handler+0x7a0>)
  401afa:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  401afe:	7c5a      	ldrb	r2, [r3, #17]
  401b00:	f36f 1245 	bfc	r2, #5, #1
  401b04:	745a      	strb	r2, [r3, #17]
  401b06:	e5b8      	b.n	40167a <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401b08:	f013 0f80 	tst.w	r3, #128	; 0x80
  401b0c:	d138      	bne.n	401b80 <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401b0e:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401b12:	4b9b      	ldr	r3, [pc, #620]	; (401d80 <UDP_Handler+0x7a0>)
  401b14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401b18:	68da      	ldr	r2, [r3, #12]
  401b1a:	689b      	ldr	r3, [r3, #8]
  401b1c:	429a      	cmp	r2, r3
  401b1e:	d341      	bcc.n	401ba4 <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  401b20:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401b24:	4b96      	ldr	r3, [pc, #600]	; (401d80 <UDP_Handler+0x7a0>)
  401b26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401b2a:	7c5b      	ldrb	r3, [r3, #17]
  401b2c:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401b30:	d138      	bne.n	401ba4 <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401b32:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b36:	fab3 f383 	clz	r3, r3
  401b3a:	095b      	lsrs	r3, r3, #5
  401b3c:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  401b3e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401b40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b44:	2200      	movs	r2, #0
  401b46:	4b8f      	ldr	r3, [pc, #572]	; (401d84 <UDP_Handler+0x7a4>)
  401b48:	701a      	strb	r2, [r3, #0]
	return flags;
  401b4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401b4c:	4a8e      	ldr	r2, [pc, #568]	; (401d88 <UDP_Handler+0x7a8>)
  401b4e:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  401b50:	b12b      	cbz	r3, 401b5e <UDP_Handler+0x57e>
		cpu_irq_enable();
  401b52:	2201      	movs	r2, #1
  401b54:	4b8b      	ldr	r3, [pc, #556]	; (401d84 <UDP_Handler+0x7a4>)
  401b56:	701a      	strb	r2, [r3, #0]
  401b58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b5c:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401b5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b60:	9311      	str	r3, [sp, #68]	; 0x44
  401b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b64:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b68:	9311      	str	r3, [sp, #68]	; 0x44
  401b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b6c:	f023 0301 	bic.w	r3, r3, #1
  401b70:	9311      	str	r3, [sp, #68]	; 0x44
  401b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401b74:	6323      	str	r3, [r4, #48]	; 0x30
  401b76:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b78:	f013 0f01 	tst.w	r3, #1
  401b7c:	d1fb      	bne.n	401b76 <UDP_Handler+0x596>
  401b7e:	e57c      	b.n	40167a <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  401b80:	2314      	movs	r3, #20
  401b82:	4a7f      	ldr	r2, [pc, #508]	; (401d80 <UDP_Handler+0x7a0>)
  401b84:	fb03 2307 	mla	r3, r3, r7, r2
  401b88:	7c59      	ldrb	r1, [r3, #17]
  401b8a:	f36f 11c7 	bfc	r1, #7, #1
  401b8e:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401b90:	68da      	ldr	r2, [r3, #12]
  401b92:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401b94:	4b7c      	ldr	r3, [pc, #496]	; (401d88 <UDP_Handler+0x7a8>)
  401b96:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401b98:	4632      	mov	r2, r6
  401b9a:	2100      	movs	r1, #0
  401b9c:	4640      	mov	r0, r8
  401b9e:	4b7b      	ldr	r3, [pc, #492]	; (401d8c <UDP_Handler+0x7ac>)
  401ba0:	4798      	blx	r3
  401ba2:	e7b4      	b.n	401b0e <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401ba4:	2e00      	cmp	r6, #0
  401ba6:	d05b      	beq.n	401c60 <UDP_Handler+0x680>
  401ba8:	2e03      	cmp	r6, #3
  401baa:	d059      	beq.n	401c60 <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401bac:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401bb0:	4b73      	ldr	r3, [pc, #460]	; (401d80 <UDP_Handler+0x7a0>)
  401bb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401bb6:	7c5b      	ldrb	r3, [r3, #17]
  401bb8:	f013 0f0c 	tst.w	r3, #12
  401bbc:	d024      	beq.n	401c08 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  401bbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bc0:	9312      	str	r3, [sp, #72]	; 0x48
  401bc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401bc4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401bc8:	9312      	str	r3, [sp, #72]	; 0x48
  401bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401bcc:	f043 0310 	orr.w	r3, r3, #16
  401bd0:	9312      	str	r3, [sp, #72]	; 0x48
  401bd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401bd4:	6323      	str	r3, [r4, #48]	; 0x30
  401bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bd8:	f013 0f10 	tst.w	r3, #16
  401bdc:	d0fb      	beq.n	401bd6 <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  401bde:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401be0:	9313      	str	r3, [sp, #76]	; 0x4c
  401be2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401be4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401be8:	9313      	str	r3, [sp, #76]	; 0x4c
  401bea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401bec:	f023 0301 	bic.w	r3, r3, #1
  401bf0:	9313      	str	r3, [sp, #76]	; 0x4c
  401bf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401bf4:	6323      	str	r3, [r4, #48]	; 0x30
  401bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401bf8:	f013 0f01 	tst.w	r3, #1
  401bfc:	d1fb      	bne.n	401bf6 <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  401bfe:	2100      	movs	r1, #0
  401c00:	4630      	mov	r0, r6
  401c02:	4b63      	ldr	r3, [pc, #396]	; (401d90 <UDP_Handler+0x7b0>)
  401c04:	4798      	blx	r3
  401c06:	e538      	b.n	40167a <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401c08:	2101      	movs	r1, #1
  401c0a:	4630      	mov	r0, r6
  401c0c:	4b60      	ldr	r3, [pc, #384]	; (401d90 <UDP_Handler+0x7b0>)
  401c0e:	4798      	blx	r3
  401c10:	b1a0      	cbz	r0, 401c3c <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  401c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c14:	9314      	str	r3, [sp, #80]	; 0x50
  401c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401c18:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c1c:	9314      	str	r3, [sp, #80]	; 0x50
  401c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401c20:	f023 0301 	bic.w	r3, r3, #1
  401c24:	9314      	str	r3, [sp, #80]	; 0x50
  401c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
  401c28:	6323      	str	r3, [r4, #48]	; 0x30
  401c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c2c:	f013 0f01 	tst.w	r3, #1
  401c30:	d1fb      	bne.n	401c2a <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  401c32:	2100      	movs	r1, #0
  401c34:	4630      	mov	r0, r6
  401c36:	4b56      	ldr	r3, [pc, #344]	; (401d90 <UDP_Handler+0x7b0>)
  401c38:	4798      	blx	r3
  401c3a:	e51e      	b.n	40167a <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  401c3c:	2314      	movs	r3, #20
  401c3e:	4a50      	ldr	r2, [pc, #320]	; (401d80 <UDP_Handler+0x7a0>)
  401c40:	fb03 2707 	mla	r7, r3, r7, r2
  401c44:	7c7a      	ldrb	r2, [r7, #17]
  401c46:	f36f 12c7 	bfc	r2, #7, #1
  401c4a:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401c4c:	68fb      	ldr	r3, [r7, #12]
  401c4e:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  401c50:	4b4d      	ldr	r3, [pc, #308]	; (401d88 <UDP_Handler+0x7a8>)
  401c52:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401c54:	4632      	mov	r2, r6
  401c56:	2100      	movs	r1, #0
  401c58:	4640      	mov	r0, r8
  401c5a:	4b4c      	ldr	r3, [pc, #304]	; (401d8c <UDP_Handler+0x7ac>)
  401c5c:	4798      	blx	r3
  401c5e:	e7d8      	b.n	401c12 <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401c60:	2101      	movs	r1, #1
  401c62:	4630      	mov	r0, r6
  401c64:	4b4a      	ldr	r3, [pc, #296]	; (401d90 <UDP_Handler+0x7b0>)
  401c66:	4798      	blx	r3
				udd_ack_in_sent(ep);
  401c68:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c6a:	9315      	str	r3, [sp, #84]	; 0x54
  401c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401c6e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c72:	9315      	str	r3, [sp, #84]	; 0x54
  401c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401c76:	f023 0301 	bic.w	r3, r3, #1
  401c7a:	9315      	str	r3, [sp, #84]	; 0x54
  401c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401c7e:	6323      	str	r3, [r4, #48]	; 0x30
  401c80:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c82:	f013 0f01 	tst.w	r3, #1
  401c86:	d1fb      	bne.n	401c80 <UDP_Handler+0x6a0>
  401c88:	e4f7      	b.n	40167a <UDP_Handler+0x9a>
  401c8a:	3301      	adds	r3, #1
  401c8c:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401c8e:	2b04      	cmp	r3, #4
  401c90:	f000 8086 	beq.w	401da0 <UDP_Handler+0x7c0>
  401c94:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401c96:	f8de 1018 	ldr.w	r1, [lr, #24]
  401c9a:	fa00 f503 	lsl.w	r5, r0, r3
  401c9e:	4229      	tst	r1, r5
  401ca0:	d0f3      	beq.n	401c8a <UDP_Handler+0x6aa>
  401ca2:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401ca4:	4690      	mov	r8, r2
  401ca6:	009c      	lsls	r4, r3, #2
  401ca8:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401cac:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  401cb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401cb2:	f011 0f42 	tst.w	r1, #66	; 0x42
  401cb6:	f47f ae6d 	bne.w	401994 <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401cba:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401cbc:	f011 0f01 	tst.w	r1, #1
  401cc0:	f47f aeb2 	bne.w	401a28 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401cc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401cc6:	f011 0f08 	tst.w	r1, #8
  401cca:	d0de      	beq.n	401c8a <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401ccc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cce:	9316      	str	r3, [sp, #88]	; 0x58
  401cd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401cd2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401cd6:	9316      	str	r3, [sp, #88]	; 0x58
  401cd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401cda:	f023 0308 	bic.w	r3, r3, #8
  401cde:	9316      	str	r3, [sp, #88]	; 0x58
  401ce0:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401ce2:	6323      	str	r3, [r4, #48]	; 0x30
  401ce4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401ce6:	f013 0f08 	tst.w	r3, #8
  401cea:	d1fb      	bne.n	401ce4 <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401cec:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401cf6:	f43f acc0 	beq.w	40167a <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401cfc:	e4bd      	b.n	40167a <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401cfe:	4b22      	ldr	r3, [pc, #136]	; (401d88 <UDP_Handler+0x7a8>)
  401d00:	69db      	ldr	r3, [r3, #28]
  401d02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401d06:	d050      	beq.n	401daa <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401d08:	4c1f      	ldr	r4, [pc, #124]	; (401d88 <UDP_Handler+0x7a8>)
  401d0a:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  401d0e:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  401d10:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  401d12:	2001      	movs	r0, #1
  401d14:	4b1f      	ldr	r3, [pc, #124]	; (401d94 <UDP_Handler+0x7b4>)
  401d16:	4798      	blx	r3
		udd_ack_suspend();
  401d18:	f44f 7380 	mov.w	r3, #256	; 0x100
  401d1c:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401d1e:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401d24:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401d26:	e4a8      	b.n	40167a <UDP_Handler+0x9a>
		udd_ack_suspend();
  401d28:	4b17      	ldr	r3, [pc, #92]	; (401d88 <UDP_Handler+0x7a8>)
  401d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
  401d2e:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401d30:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401d36:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401d38:	f44f 7200 	mov.w	r2, #512	; 0x200
  401d3c:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401d42:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401d44:	2022      	movs	r0, #34	; 0x22
  401d46:	4b14      	ldr	r3, [pc, #80]	; (401d98 <UDP_Handler+0x7b8>)
  401d48:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  401d4a:	2000      	movs	r0, #0
  401d4c:	4b11      	ldr	r3, [pc, #68]	; (401d94 <UDP_Handler+0x7b4>)
  401d4e:	4798      	blx	r3
		goto udd_interrupt_end;
  401d50:	e493      	b.n	40167a <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  401d52:	4630      	mov	r0, r6
  401d54:	4b11      	ldr	r3, [pc, #68]	; (401d9c <UDP_Handler+0x7bc>)
  401d56:	4798      	blx	r3
  401d58:	e652      	b.n	401a00 <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  401d5a:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  401d5e:	4b08      	ldr	r3, [pc, #32]	; (401d80 <UDP_Handler+0x7a0>)
  401d60:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  401d64:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  401d68:	2800      	cmp	r0, #0
  401d6a:	d0f2      	beq.n	401d52 <UDP_Handler+0x772>
			b_full = true;
  401d6c:	f04f 0b01 	mov.w	fp, #1
  401d70:	e637      	b.n	4019e2 <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  401d72:	4630      	mov	r0, r6
  401d74:	4b09      	ldr	r3, [pc, #36]	; (401d9c <UDP_Handler+0x7bc>)
  401d76:	4798      	blx	r3
	if ((b_full || b_short) &&
  401d78:	45ca      	cmp	sl, r9
  401d7a:	f63f ae41 	bhi.w	401a00 <UDP_Handler+0x420>
  401d7e:	e47c      	b.n	40167a <UDP_Handler+0x9a>
  401d80:	20000c4c 	.word	0x20000c4c
  401d84:	200000a0 	.word	0x200000a0
  401d88:	40034000 	.word	0x40034000
  401d8c:	00401319 	.word	0x00401319
  401d90:	0040142d 	.word	0x0040142d
  401d94:	00401025 	.word	0x00401025
  401d98:	00403261 	.word	0x00403261
  401d9c:	00401359 	.word	0x00401359
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401da0:	4b4b      	ldr	r3, [pc, #300]	; (401ed0 <UDP_Handler+0x8f0>)
  401da2:	699b      	ldr	r3, [r3, #24]
  401da4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401da8:	d1a9      	bne.n	401cfe <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401daa:	4b49      	ldr	r3, [pc, #292]	; (401ed0 <UDP_Handler+0x8f0>)
  401dac:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401dae:	f413 7f00 	tst.w	r3, #512	; 0x200
  401db2:	d004      	beq.n	401dbe <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401db4:	4b46      	ldr	r3, [pc, #280]	; (401ed0 <UDP_Handler+0x8f0>)
  401db6:	69db      	ldr	r3, [r3, #28]
  401db8:	f413 7f00 	tst.w	r3, #512	; 0x200
  401dbc:	d1a4      	bne.n	401d08 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401dbe:	4b44      	ldr	r3, [pc, #272]	; (401ed0 <UDP_Handler+0x8f0>)
  401dc0:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401dc2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401dc6:	d004      	beq.n	401dd2 <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401dc8:	4b41      	ldr	r3, [pc, #260]	; (401ed0 <UDP_Handler+0x8f0>)
  401dca:	69db      	ldr	r3, [r3, #28]
  401dcc:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401dd0:	d19a      	bne.n	401d08 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401dd2:	4b3f      	ldr	r3, [pc, #252]	; (401ed0 <UDP_Handler+0x8f0>)
  401dd4:	699b      	ldr	r3, [r3, #24]
  401dd6:	f413 7f80 	tst.w	r3, #256	; 0x100
  401dda:	d004      	beq.n	401de6 <UDP_Handler+0x806>
  401ddc:	4b3c      	ldr	r3, [pc, #240]	; (401ed0 <UDP_Handler+0x8f0>)
  401dde:	69db      	ldr	r3, [r3, #28]
  401de0:	f413 7f80 	tst.w	r3, #256	; 0x100
  401de4:	d1a0      	bne.n	401d28 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401de6:	4b3a      	ldr	r3, [pc, #232]	; (401ed0 <UDP_Handler+0x8f0>)
  401de8:	69db      	ldr	r3, [r3, #28]
  401dea:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401dee:	f43f ac44 	beq.w	40167a <UDP_Handler+0x9a>
		udd_ack_reset();
  401df2:	4c37      	ldr	r4, [pc, #220]	; (401ed0 <UDP_Handler+0x8f0>)
  401df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401df8:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401dfa:	4e36      	ldr	r6, [pc, #216]	; (401ed4 <UDP_Handler+0x8f4>)
  401dfc:	2201      	movs	r2, #1
  401dfe:	4611      	mov	r1, r2
  401e00:	4630      	mov	r0, r6
  401e02:	4d35      	ldr	r5, [pc, #212]	; (401ed8 <UDP_Handler+0x8f8>)
  401e04:	47a8      	blx	r5
  401e06:	2202      	movs	r2, #2
  401e08:	2101      	movs	r1, #1
  401e0a:	f106 0014 	add.w	r0, r6, #20
  401e0e:	47a8      	blx	r5
  401e10:	2203      	movs	r2, #3
  401e12:	2101      	movs	r1, #1
  401e14:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401e18:	47a8      	blx	r5
		udc_reset();
  401e1a:	4b30      	ldr	r3, [pc, #192]	; (401edc <UDP_Handler+0x8fc>)
  401e1c:	4798      	blx	r3
		udd_disable_address_state();
  401e1e:	6863      	ldr	r3, [r4, #4]
  401e20:	f023 0301 	bic.w	r3, r3, #1
  401e24:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401e26:	6863      	ldr	r3, [r4, #4]
  401e28:	f023 0302 	bic.w	r3, r3, #2
  401e2c:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401e2e:	68a3      	ldr	r3, [r4, #8]
  401e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401e34:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401e36:	68a3      	ldr	r3, [r4, #8]
  401e38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401e3c:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401e3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401e40:	9318      	str	r3, [sp, #96]	; 0x60
  401e42:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e44:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e48:	9318      	str	r3, [sp, #96]	; 0x60
  401e4a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e4c:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401e54:	9318      	str	r3, [sp, #96]	; 0x60
  401e56:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401e5c:	9318      	str	r3, [sp, #96]	; 0x60
  401e5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e60:	6323      	str	r3, [r4, #48]	; 0x30
  401e62:	4622      	mov	r2, r4
  401e64:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e66:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401e6a:	d0fb      	beq.n	401e64 <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401e6c:	4a18      	ldr	r2, [pc, #96]	; (401ed0 <UDP_Handler+0x8f0>)
  401e6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e70:	9319      	str	r3, [sp, #100]	; 0x64
  401e72:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e74:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e78:	9319      	str	r3, [sp, #100]	; 0x64
  401e7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401e80:	9319      	str	r3, [sp, #100]	; 0x64
  401e82:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e84:	6313      	str	r3, [r2, #48]	; 0x30
  401e86:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e88:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401e8c:	d0fb      	beq.n	401e86 <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401e8e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401e92:	fab3 f383 	clz	r3, r3
  401e96:	095b      	lsrs	r3, r3, #5
  401e98:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401e9a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401e9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ea0:	2200      	movs	r2, #0
  401ea2:	4b0f      	ldr	r3, [pc, #60]	; (401ee0 <UDP_Handler+0x900>)
  401ea4:	701a      	strb	r2, [r3, #0]
	return flags;
  401ea6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401ea8:	2101      	movs	r1, #1
  401eaa:	4a09      	ldr	r2, [pc, #36]	; (401ed0 <UDP_Handler+0x8f0>)
  401eac:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401eae:	b123      	cbz	r3, 401eba <UDP_Handler+0x8da>
		cpu_irq_enable();
  401eb0:	4b0b      	ldr	r3, [pc, #44]	; (401ee0 <UDP_Handler+0x900>)
  401eb2:	7019      	strb	r1, [r3, #0]
  401eb4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401eb8:	b662      	cpsie	i
		udd_ctrl_init();
  401eba:	4b0a      	ldr	r3, [pc, #40]	; (401ee4 <UDP_Handler+0x904>)
  401ebc:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401ebe:	4b04      	ldr	r3, [pc, #16]	; (401ed0 <UDP_Handler+0x8f0>)
  401ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
  401ec4:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401eca:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401ecc:	f7ff bbd5 	b.w	40167a <UDP_Handler+0x9a>
  401ed0:	40034000 	.word	0x40034000
  401ed4:	20000c4c 	.word	0x20000c4c
  401ed8:	00401319 	.word	0x00401319
  401edc:	004009b1 	.word	0x004009b1
  401ee0:	200000a0 	.word	0x200000a0
  401ee4:	004010c9 	.word	0x004010c9

00401ee8 <udd_attach>:
{
  401ee8:	b510      	push	{r4, lr}
  401eea:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401eec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ef0:	fab3 f383 	clz	r3, r3
  401ef4:	095b      	lsrs	r3, r3, #5
  401ef6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401ef8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401efa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401efe:	2200      	movs	r2, #0
  401f00:	4b14      	ldr	r3, [pc, #80]	; (401f54 <udd_attach+0x6c>)
  401f02:	701a      	strb	r2, [r3, #0]
	return flags;
  401f04:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  401f06:	2001      	movs	r0, #1
  401f08:	4b13      	ldr	r3, [pc, #76]	; (401f58 <udd_attach+0x70>)
  401f0a:	4798      	blx	r3
	udd_enable_periph_ck();
  401f0c:	2022      	movs	r0, #34	; 0x22
  401f0e:	4b13      	ldr	r3, [pc, #76]	; (401f5c <udd_attach+0x74>)
  401f10:	4798      	blx	r3
	udd_enable_transceiver();
  401f12:	4b13      	ldr	r3, [pc, #76]	; (401f60 <udd_attach+0x78>)
  401f14:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401f1a:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401f1c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401f22:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  401f24:	f44f 7280 	mov.w	r2, #256	; 0x100
  401f28:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401f2e:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401f30:	f44f 7200 	mov.w	r2, #512	; 0x200
  401f34:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401f3a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401f40:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401f42:	b12c      	cbz	r4, 401f50 <udd_attach+0x68>
		cpu_irq_enable();
  401f44:	2201      	movs	r2, #1
  401f46:	4b03      	ldr	r3, [pc, #12]	; (401f54 <udd_attach+0x6c>)
  401f48:	701a      	strb	r2, [r3, #0]
  401f4a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f4e:	b662      	cpsie	i
}
  401f50:	b002      	add	sp, #8
  401f52:	bd10      	pop	{r4, pc}
  401f54:	200000a0 	.word	0x200000a0
  401f58:	00401025 	.word	0x00401025
  401f5c:	0040320d 	.word	0x0040320d
  401f60:	40034000 	.word	0x40034000

00401f64 <udd_enable>:
{
  401f64:	b530      	push	{r4, r5, lr}
  401f66:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401f68:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401f6c:	fab3 f383 	clz	r3, r3
  401f70:	095b      	lsrs	r3, r3, #5
  401f72:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401f74:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401f76:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401f7a:	2400      	movs	r4, #0
  401f7c:	4b27      	ldr	r3, [pc, #156]	; (40201c <udd_enable+0xb8>)
  401f7e:	701c      	strb	r4, [r3, #0]
	return flags;
  401f80:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  401f82:	2022      	movs	r0, #34	; 0x22
  401f84:	4b26      	ldr	r3, [pc, #152]	; (402020 <udd_enable+0xbc>)
  401f86:	4798      	blx	r3
	sysclk_enable_usb();
  401f88:	4b26      	ldr	r3, [pc, #152]	; (402024 <udd_enable+0xc0>)
  401f8a:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401f8c:	4b26      	ldr	r3, [pc, #152]	; (402028 <udd_enable+0xc4>)
  401f8e:	2250      	movs	r2, #80	; 0x50
  401f90:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401f94:	2204      	movs	r2, #4
  401f96:	605a      	str	r2, [r3, #4]
  401f98:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  401f9a:	4824      	ldr	r0, [pc, #144]	; (40202c <udd_enable+0xc8>)
  401f9c:	009a      	lsls	r2, r3, #2
  401f9e:	18d1      	adds	r1, r2, r3
  401fa0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401fa4:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  401fa6:	441a      	add	r2, r3
  401fa8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401fac:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401fb0:	f36f 11c7 	bfc	r1, #7, #1
  401fb4:	7451      	strb	r1, [r2, #17]
  401fb6:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401fb8:	2b03      	cmp	r3, #3
  401fba:	d1ef      	bne.n	401f9c <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401fbc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401fc0:	4b1b      	ldr	r3, [pc, #108]	; (402030 <udd_enable+0xcc>)
  401fc2:	4798      	blx	r3
	udd_b_idle = false;
  401fc4:	2200      	movs	r2, #0
  401fc6:	4b1b      	ldr	r3, [pc, #108]	; (402034 <udd_enable+0xd0>)
  401fc8:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  401fca:	4b1b      	ldr	r3, [pc, #108]	; (402038 <udd_enable+0xd4>)
  401fcc:	781b      	ldrb	r3, [r3, #0]
  401fce:	2bff      	cmp	r3, #255	; 0xff
  401fd0:	d022      	beq.n	402018 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401fd2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401fd6:	fab3 f383 	clz	r3, r3
  401fda:	095b      	lsrs	r3, r3, #5
  401fdc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401fde:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401fe0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401fe4:	2200      	movs	r2, #0
  401fe6:	4b0d      	ldr	r3, [pc, #52]	; (40201c <udd_enable+0xb8>)
  401fe8:	701a      	strb	r2, [r3, #0]
	return flags;
  401fea:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  401fec:	4a12      	ldr	r2, [pc, #72]	; (402038 <udd_enable+0xd4>)
  401fee:	7813      	ldrb	r3, [r2, #0]
  401ff0:	3301      	adds	r3, #1
  401ff2:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401ff4:	b129      	cbz	r1, 402002 <udd_enable+0x9e>
		cpu_irq_enable();
  401ff6:	2201      	movs	r2, #1
  401ff8:	4b08      	ldr	r3, [pc, #32]	; (40201c <udd_enable+0xb8>)
  401ffa:	701a      	strb	r2, [r3, #0]
  401ffc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402000:	b662      	cpsie	i
	udd_attach();
  402002:	4b0e      	ldr	r3, [pc, #56]	; (40203c <udd_enable+0xd8>)
  402004:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  402006:	b12d      	cbz	r5, 402014 <udd_enable+0xb0>
		cpu_irq_enable();
  402008:	2201      	movs	r2, #1
  40200a:	4b04      	ldr	r3, [pc, #16]	; (40201c <udd_enable+0xb8>)
  40200c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40200e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402012:	b662      	cpsie	i
}
  402014:	b003      	add	sp, #12
  402016:	bd30      	pop	{r4, r5, pc}
  402018:	e7fe      	b.n	402018 <udd_enable+0xb4>
  40201a:	bf00      	nop
  40201c:	200000a0 	.word	0x200000a0
  402020:	0040320d 	.word	0x0040320d
  402024:	00402ec5 	.word	0x00402ec5
  402028:	e000e100 	.word	0xe000e100
  40202c:	20000c4c 	.word	0x20000c4c
  402030:	004032d5 	.word	0x004032d5
  402034:	20000c45 	.word	0x20000c45
  402038:	200014d8 	.word	0x200014d8
  40203c:	00401ee9 	.word	0x00401ee9

00402040 <udd_is_high_speed>:
}
  402040:	2000      	movs	r0, #0
  402042:	4770      	bx	lr

00402044 <udd_set_address>:
	udd_disable_address_state();
  402044:	4b0d      	ldr	r3, [pc, #52]	; (40207c <udd_set_address+0x38>)
  402046:	685a      	ldr	r2, [r3, #4]
  402048:	f022 0201 	bic.w	r2, r2, #1
  40204c:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40204e:	689a      	ldr	r2, [r3, #8]
  402050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402054:	609a      	str	r2, [r3, #8]
	if (address) {
  402056:	4602      	mov	r2, r0
  402058:	b170      	cbz	r0, 402078 <udd_set_address+0x34>
		udd_configure_address(address);
  40205a:	6898      	ldr	r0, [r3, #8]
  40205c:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  402060:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402064:	4310      	orrs	r0, r2
  402066:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402068:	689a      	ldr	r2, [r3, #8]
  40206a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40206e:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402070:	685a      	ldr	r2, [r3, #4]
  402072:	f042 0201 	orr.w	r2, r2, #1
  402076:	605a      	str	r2, [r3, #4]
  402078:	4770      	bx	lr
  40207a:	bf00      	nop
  40207c:	40034000 	.word	0x40034000

00402080 <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  402080:	4b05      	ldr	r3, [pc, #20]	; (402098 <udd_getaddress+0x18>)
  402082:	685b      	ldr	r3, [r3, #4]
  402084:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402088:	bf1d      	ittte	ne
  40208a:	4b03      	ldrne	r3, [pc, #12]	; (402098 <udd_getaddress+0x18>)
  40208c:	6898      	ldrne	r0, [r3, #8]
  40208e:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  402092:	2000      	moveq	r0, #0
}
  402094:	4770      	bx	lr
  402096:	bf00      	nop
  402098:	40034000 	.word	0x40034000

0040209c <udd_get_frame_number>:
	return udd_frame_number();
  40209c:	4b02      	ldr	r3, [pc, #8]	; (4020a8 <udd_get_frame_number+0xc>)
  40209e:	6818      	ldr	r0, [r3, #0]
}
  4020a0:	f3c0 000a 	ubfx	r0, r0, #0, #11
  4020a4:	4770      	bx	lr
  4020a6:	bf00      	nop
  4020a8:	40034000 	.word	0x40034000

004020ac <udd_get_micro_frame_number>:
}
  4020ac:	2000      	movs	r0, #0
  4020ae:	4770      	bx	lr

004020b0 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  4020b0:	4b01      	ldr	r3, [pc, #4]	; (4020b8 <udd_set_setup_payload+0x8>)
  4020b2:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4020b4:	8199      	strh	r1, [r3, #12]
  4020b6:	4770      	bx	lr
  4020b8:	200014e0 	.word	0x200014e0

004020bc <udd_ep_alloc>:
{
  4020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4020be:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  4020c0:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  4020c4:	2c03      	cmp	r4, #3
  4020c6:	d867      	bhi.n	402198 <udd_ep_alloc+0xdc>
  4020c8:	00a3      	lsls	r3, r4, #2
  4020ca:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4020ce:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  4020d2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  4020d4:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4020d8:	d161      	bne.n	40219e <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4020da:	f001 0503 	and.w	r5, r1, #3
  4020de:	2d01      	cmp	r5, #1
  4020e0:	d050      	beq.n	402184 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4020e2:	1f25      	subs	r5, r4, #4
  4020e4:	b2ed      	uxtb	r5, r5
  4020e6:	2d02      	cmp	r5, #2
  4020e8:	bf34      	ite	cc
  4020ea:	f44f 7500 	movcc.w	r5, #512	; 0x200
  4020ee:	2540      	movcs	r5, #64	; 0x40
  4020f0:	4295      	cmp	r5, r2
  4020f2:	db58      	blt.n	4021a6 <udd_ep_alloc+0xea>
  4020f4:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  4020f6:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  4020f8:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  4020fc:	4d2b      	ldr	r5, [pc, #172]	; (4021ac <udd_ep_alloc+0xf0>)
  4020fe:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  402102:	f105 0710 	add.w	r7, r5, #16
  402106:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  40210a:	f362 0e09 	bfi	lr, r2, #0, #10
  40210e:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  402112:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402114:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402118:	f36f 1245 	bfc	r2, #5, #1
  40211c:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  40211e:	2800      	cmp	r0, #0
  402120:	db35      	blt.n	40218e <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  402122:	4e23      	ldr	r6, [pc, #140]	; (4021b0 <udd_ep_alloc+0xf4>)
  402124:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  402126:	2201      	movs	r2, #1
  402128:	fa02 f404 	lsl.w	r4, r2, r4
  40212c:	4325      	orrs	r5, r4
  40212e:	62b5      	str	r5, [r6, #40]	; 0x28
  402130:	4635      	mov	r5, r6
  402132:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  402134:	4214      	tst	r4, r2
  402136:	d0fc      	beq.n	402132 <udd_ep_alloc+0x76>
  402138:	4d1d      	ldr	r5, [pc, #116]	; (4021b0 <udd_ep_alloc+0xf4>)
  40213a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  40213c:	ea22 0404 	bic.w	r4, r2, r4
  402140:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  402142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402144:	9201      	str	r2, [sp, #4]
  402146:	9a01      	ldr	r2, [sp, #4]
  402148:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40214c:	9201      	str	r2, [sp, #4]
  40214e:	9a01      	ldr	r2, [sp, #4]
  402150:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402158:	9201      	str	r2, [sp, #4]
  40215a:	2800      	cmp	r0, #0
  40215c:	ea4f 2201 	mov.w	r2, r1, lsl #8
  402160:	f402 7240 	and.w	r2, r2, #768	; 0x300
  402164:	bfb4      	ite	lt
  402166:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  40216a:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  40216e:	9901      	ldr	r1, [sp, #4]
  402170:	4311      	orrs	r1, r2
  402172:	9101      	str	r1, [sp, #4]
  402174:	9901      	ldr	r1, [sp, #4]
  402176:	6319      	str	r1, [r3, #48]	; 0x30
  402178:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40217a:	ea32 0101 	bics.w	r1, r2, r1
  40217e:	d1fb      	bne.n	402178 <udd_ep_alloc+0xbc>
	return true;
  402180:	2001      	movs	r0, #1
  402182:	e00a      	b.n	40219a <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402184:	b16c      	cbz	r4, 4021a2 <udd_ep_alloc+0xe6>
  402186:	2c03      	cmp	r4, #3
  402188:	d1ab      	bne.n	4020e2 <udd_ep_alloc+0x26>
		return false;
  40218a:	2000      	movs	r0, #0
  40218c:	e005      	b.n	40219a <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  40218e:	787a      	ldrb	r2, [r7, #1]
  402190:	f36f 0283 	bfc	r2, #2, #2
  402194:	707a      	strb	r2, [r7, #1]
  402196:	e7c4      	b.n	402122 <udd_ep_alloc+0x66>
		return false;
  402198:	2000      	movs	r0, #0
}
  40219a:	b003      	add	sp, #12
  40219c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  40219e:	2000      	movs	r0, #0
  4021a0:	e7fb      	b.n	40219a <udd_ep_alloc+0xde>
		return false;
  4021a2:	2000      	movs	r0, #0
  4021a4:	e7f9      	b.n	40219a <udd_ep_alloc+0xde>
		return false;
  4021a6:	2000      	movs	r0, #0
  4021a8:	e7f7      	b.n	40219a <udd_ep_alloc+0xde>
  4021aa:	bf00      	nop
  4021ac:	20000c4c 	.word	0x20000c4c
  4021b0:	40034000 	.word	0x40034000

004021b4 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4021b4:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4021b8:	2a03      	cmp	r2, #3
  4021ba:	d822      	bhi.n	402202 <udd_ep_free+0x4e>
{
  4021bc:	b500      	push	{lr}
  4021be:	b083      	sub	sp, #12
  4021c0:	0091      	lsls	r1, r2, #2
  4021c2:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  4021c6:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  4021ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4021cc:	9301      	str	r3, [sp, #4]
  4021ce:	9b01      	ldr	r3, [sp, #4]
  4021d0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4021d4:	9301      	str	r3, [sp, #4]
  4021d6:	9b01      	ldr	r3, [sp, #4]
  4021d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  4021dc:	9301      	str	r3, [sp, #4]
  4021de:	9b01      	ldr	r3, [sp, #4]
  4021e0:	630b      	str	r3, [r1, #48]	; 0x30
  4021e2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4021e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4021e8:	d1fb      	bne.n	4021e2 <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4021ea:	1e50      	subs	r0, r2, #1
  4021ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021f0:	2101      	movs	r1, #1
  4021f2:	4b04      	ldr	r3, [pc, #16]	; (402204 <udd_ep_free+0x50>)
  4021f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021f8:	4b03      	ldr	r3, [pc, #12]	; (402208 <udd_ep_free+0x54>)
  4021fa:	4798      	blx	r3
}
  4021fc:	b003      	add	sp, #12
  4021fe:	f85d fb04 	ldr.w	pc, [sp], #4
  402202:	4770      	bx	lr
  402204:	20000c4c 	.word	0x20000c4c
  402208:	00401319 	.word	0x00401319

0040220c <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40220c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402210:	2803      	cmp	r0, #3
  402212:	d815      	bhi.n	402240 <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  402214:	1e43      	subs	r3, r0, #1
  402216:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40221a:	4a0a      	ldr	r2, [pc, #40]	; (402244 <udd_ep_is_halted+0x38>)
  40221c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402220:	7c5b      	ldrb	r3, [r3, #17]
  402222:	f013 0f20 	tst.w	r3, #32
  402226:	d109      	bne.n	40223c <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402228:	300c      	adds	r0, #12
  40222a:	4b07      	ldr	r3, [pc, #28]	; (402248 <udd_ep_is_halted+0x3c>)
  40222c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  402230:	f013 0f28 	tst.w	r3, #40	; 0x28
  402234:	bf14      	ite	ne
  402236:	2001      	movne	r0, #1
  402238:	2000      	moveq	r0, #0
  40223a:	4770      	bx	lr
  40223c:	2001      	movs	r0, #1
  40223e:	4770      	bx	lr
		return false;
  402240:	2000      	movs	r0, #0
}
  402242:	4770      	bx	lr
  402244:	20000c4c 	.word	0x20000c4c
  402248:	40034000 	.word	0x40034000

0040224c <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40224c:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402250:	2903      	cmp	r1, #3
  402252:	d85f      	bhi.n	402314 <udd_ep_set_halt+0xc8>
{
  402254:	b410      	push	{r4}
  402256:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402258:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40225c:	fab3 f383 	clz	r3, r3
  402260:	095b      	lsrs	r3, r3, #5
  402262:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402264:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402266:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40226a:	2200      	movs	r2, #0
  40226c:	4b2c      	ldr	r3, [pc, #176]	; (402320 <udd_ep_set_halt+0xd4>)
  40226e:	701a      	strb	r2, [r3, #0]
	return flags;
  402270:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402272:	f010 0f80 	tst.w	r0, #128	; 0x80
  402276:	d124      	bne.n	4022c2 <udd_ep_set_halt+0x76>
  402278:	008a      	lsls	r2, r1, #2
  40227a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40227e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  402282:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402284:	9300      	str	r3, [sp, #0]
  402286:	9b00      	ldr	r3, [sp, #0]
  402288:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40228c:	9300      	str	r3, [sp, #0]
  40228e:	9b00      	ldr	r3, [sp, #0]
  402290:	f043 0320 	orr.w	r3, r3, #32
  402294:	9300      	str	r3, [sp, #0]
  402296:	9b00      	ldr	r3, [sp, #0]
  402298:	6313      	str	r3, [r2, #48]	; 0x30
  40229a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40229c:	f013 0f20 	tst.w	r3, #32
  4022a0:	d0fb      	beq.n	40229a <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  4022a2:	2301      	movs	r3, #1
  4022a4:	fa03 f101 	lsl.w	r1, r3, r1
  4022a8:	4b1e      	ldr	r3, [pc, #120]	; (402324 <udd_ep_set_halt+0xd8>)
  4022aa:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  4022ac:	2c00      	cmp	r4, #0
  4022ae:	d035      	beq.n	40231c <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  4022b0:	2001      	movs	r0, #1
  4022b2:	4b1b      	ldr	r3, [pc, #108]	; (402320 <udd_ep_set_halt+0xd4>)
  4022b4:	7018      	strb	r0, [r3, #0]
  4022b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4022ba:	b662      	cpsie	i
}
  4022bc:	b003      	add	sp, #12
  4022be:	bc10      	pop	{r4}
  4022c0:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4022c2:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4022c4:	f101 020c 	add.w	r2, r1, #12
  4022c8:	4816      	ldr	r0, [pc, #88]	; (402324 <udd_ep_set_halt+0xd8>)
  4022ca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4022ce:	f012 0f10 	tst.w	r2, #16
  4022d2:	d109      	bne.n	4022e8 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  4022d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4022d8:	4813      	ldr	r0, [pc, #76]	; (402328 <udd_ep_set_halt+0xdc>)
  4022da:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4022de:	7c52      	ldrb	r2, [r2, #17]
  4022e0:	f3c2 0281 	ubfx	r2, r2, #2, #2
  4022e4:	2a01      	cmp	r2, #1
  4022e6:	ddc7      	ble.n	402278 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  4022e8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4022ec:	4b0e      	ldr	r3, [pc, #56]	; (402328 <udd_ep_set_halt+0xdc>)
  4022ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4022f2:	7c5a      	ldrb	r2, [r3, #17]
  4022f4:	f042 0220 	orr.w	r2, r2, #32
  4022f8:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4022fa:	2301      	movs	r3, #1
  4022fc:	fa03 f101 	lsl.w	r1, r3, r1
  402300:	4b08      	ldr	r3, [pc, #32]	; (402324 <udd_ep_set_halt+0xd8>)
  402302:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  402304:	b144      	cbz	r4, 402318 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  402306:	2001      	movs	r0, #1
  402308:	4b05      	ldr	r3, [pc, #20]	; (402320 <udd_ep_set_halt+0xd4>)
  40230a:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40230c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402310:	b662      	cpsie	i
  402312:	e7d3      	b.n	4022bc <udd_ep_set_halt+0x70>
		return false;
  402314:	2000      	movs	r0, #0
  402316:	4770      	bx	lr
		return true;
  402318:	2001      	movs	r0, #1
  40231a:	e7cf      	b.n	4022bc <udd_ep_set_halt+0x70>
	return true;
  40231c:	2001      	movs	r0, #1
  40231e:	e7cd      	b.n	4022bc <udd_ep_set_halt+0x70>
  402320:	200000a0 	.word	0x200000a0
  402324:	40034000 	.word	0x40034000
  402328:	20000c4c 	.word	0x20000c4c

0040232c <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  40232c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402330:	2803      	cmp	r0, #3
  402332:	d85e      	bhi.n	4023f2 <udd_ep_clear_halt+0xc6>
{
  402334:	b530      	push	{r4, r5, lr}
  402336:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  402338:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  40233a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  40233e:	4b2f      	ldr	r3, [pc, #188]	; (4023fc <udd_ep_clear_halt+0xd0>)
  402340:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402344:	7c5a      	ldrb	r2, [r3, #17]
  402346:	f36f 1245 	bfc	r2, #5, #1
  40234a:	745a      	strb	r2, [r3, #17]
  40234c:	0083      	lsls	r3, r0, #2
  40234e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402352:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402358:	f012 0f20 	tst.w	r2, #32
  40235c:	d04b      	beq.n	4023f6 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  40235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402360:	9200      	str	r2, [sp, #0]
  402362:	9a00      	ldr	r2, [sp, #0]
  402364:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402368:	9200      	str	r2, [sp, #0]
  40236a:	9a00      	ldr	r2, [sp, #0]
  40236c:	f022 0220 	bic.w	r2, r2, #32
  402370:	9200      	str	r2, [sp, #0]
  402372:	9a00      	ldr	r2, [sp, #0]
  402374:	631a      	str	r2, [r3, #48]	; 0x30
  402376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402378:	f012 0f20 	tst.w	r2, #32
  40237c:	d1fb      	bne.n	402376 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40237e:	4d20      	ldr	r5, [pc, #128]	; (402400 <udd_ep_clear_halt+0xd4>)
  402380:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  402382:	2201      	movs	r2, #1
  402384:	fa02 f000 	lsl.w	r0, r2, r0
  402388:	4301      	orrs	r1, r0
  40238a:	62a9      	str	r1, [r5, #40]	; 0x28
  40238c:	4629      	mov	r1, r5
  40238e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402390:	4210      	tst	r0, r2
  402392:	d0fc      	beq.n	40238e <udd_ep_clear_halt+0x62>
  402394:	491a      	ldr	r1, [pc, #104]	; (402400 <udd_ep_clear_halt+0xd4>)
  402396:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402398:	ea22 0000 	bic.w	r0, r2, r0
  40239c:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40239e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023a0:	9201      	str	r2, [sp, #4]
  4023a2:	9a01      	ldr	r2, [sp, #4]
  4023a4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4023a8:	9201      	str	r2, [sp, #4]
  4023aa:	9a01      	ldr	r2, [sp, #4]
  4023ac:	f022 0208 	bic.w	r2, r2, #8
  4023b0:	9201      	str	r2, [sp, #4]
  4023b2:	9a01      	ldr	r2, [sp, #4]
  4023b4:	631a      	str	r2, [r3, #48]	; 0x30
  4023b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023b8:	f012 0f08 	tst.w	r2, #8
  4023bc:	d1fb      	bne.n	4023b6 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  4023be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4023c2:	4a0e      	ldr	r2, [pc, #56]	; (4023fc <udd_ep_clear_halt+0xd0>)
  4023c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4023c8:	7c5b      	ldrb	r3, [r3, #17]
  4023ca:	f013 0f10 	tst.w	r3, #16
  4023ce:	d101      	bne.n	4023d4 <udd_ep_clear_halt+0xa8>
	return true;
  4023d0:	2001      	movs	r0, #1
  4023d2:	e011      	b.n	4023f8 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  4023d4:	4611      	mov	r1, r2
  4023d6:	00a2      	lsls	r2, r4, #2
  4023d8:	1913      	adds	r3, r2, r4
  4023da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  4023de:	7c58      	ldrb	r0, [r3, #17]
  4023e0:	f36f 1004 	bfc	r0, #4, #1
  4023e4:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  4023e6:	4414      	add	r4, r2
  4023e8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  4023ec:	4798      	blx	r3
	return true;
  4023ee:	2001      	movs	r0, #1
  4023f0:	e002      	b.n	4023f8 <udd_ep_clear_halt+0xcc>
		return false;
  4023f2:	2000      	movs	r0, #0
  4023f4:	4770      	bx	lr
	return true;
  4023f6:	2001      	movs	r0, #1
}
  4023f8:	b003      	add	sp, #12
  4023fa:	bd30      	pop	{r4, r5, pc}
  4023fc:	20000c4c 	.word	0x20000c4c
  402400:	40034000 	.word	0x40034000

00402404 <udd_ep_run>:
{
  402404:	b5f0      	push	{r4, r5, r6, r7, lr}
  402406:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402408:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  40240c:	2f03      	cmp	r7, #3
  40240e:	f200 80a2 	bhi.w	402556 <udd_ep_run+0x152>
  402412:	00bc      	lsls	r4, r7, #2
  402414:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402418:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  40241c:	6b25      	ldr	r5, [r4, #48]	; 0x30
  40241e:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402422:	f000 809b 	beq.w	40255c <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  402426:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  402428:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40242c:	4e50      	ldr	r6, [pc, #320]	; (402570 <udd_ep_run+0x16c>)
  40242e:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402432:	7c76      	ldrb	r6, [r6, #17]
  402434:	f016 0f20 	tst.w	r6, #32
  402438:	f040 8092 	bne.w	402560 <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  40243c:	6b26      	ldr	r6, [r4, #48]	; 0x30
  40243e:	f016 0f20 	tst.w	r6, #32
  402442:	f040 808f 	bne.w	402564 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402446:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40244a:	fab6 f686 	clz	r6, r6
  40244e:	0976      	lsrs	r6, r6, #5
  402450:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402452:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402454:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402458:	f04f 0e00 	mov.w	lr, #0
  40245c:	4e45      	ldr	r6, [pc, #276]	; (402574 <udd_ep_run+0x170>)
  40245e:	f886 e000 	strb.w	lr, [r6]
	return flags;
  402462:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  402466:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40246a:	4e41      	ldr	r6, [pc, #260]	; (402570 <udd_ep_run+0x16c>)
  40246c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402470:	7c76      	ldrb	r6, [r6, #17]
  402472:	f016 0f10 	tst.w	r6, #16
  402476:	d00a      	beq.n	40248e <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402478:	f1bc 0f00 	cmp.w	ip, #0
  40247c:	d074      	beq.n	402568 <udd_ep_run+0x164>
		cpu_irq_enable();
  40247e:	2201      	movs	r2, #1
  402480:	4b3c      	ldr	r3, [pc, #240]	; (402574 <udd_ep_run+0x170>)
  402482:	701a      	strb	r2, [r3, #0]
  402484:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402488:	b662      	cpsie	i
		return false; // Job already on going
  40248a:	2000      	movs	r0, #0
  40248c:	e064      	b.n	402558 <udd_ep_run+0x154>
	ptr_job->busy = true;
  40248e:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  402492:	4e37      	ldr	r6, [pc, #220]	; (402570 <udd_ep_run+0x16c>)
  402494:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402498:	f896 e011 	ldrb.w	lr, [r6, #17]
  40249c:	f04e 0e10 	orr.w	lr, lr, #16
  4024a0:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  4024a4:	f1bc 0f00 	cmp.w	ip, #0
  4024a8:	d007      	beq.n	4024ba <udd_ep_run+0xb6>
		cpu_irq_enable();
  4024aa:	f04f 0e01 	mov.w	lr, #1
  4024ae:	4e31      	ldr	r6, [pc, #196]	; (402574 <udd_ep_run+0x170>)
  4024b0:	f886 e000 	strb.w	lr, [r6]
  __ASM volatile ("dmb 0xF":::"memory");
  4024b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024b8:	b662      	cpsie	i
	ptr_job->buf = buf;
  4024ba:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402570 <udd_ep_run+0x16c>
  4024be:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  4024c2:	00b6      	lsls	r6, r6, #2
  4024c4:	eb0c 0e06 	add.w	lr, ip, r6
  4024c8:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  4024cc:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  4024d0:	2200      	movs	r2, #0
  4024d2:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  4024d6:	9a08      	ldr	r2, [sp, #32]
  4024d8:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4024dc:	b911      	cbnz	r1, 4024e4 <udd_ep_run+0xe0>
  4024de:	fab3 f183 	clz	r1, r3
  4024e2:	0949      	lsrs	r1, r1, #5
  4024e4:	4a22      	ldr	r2, [pc, #136]	; (402570 <udd_ep_run+0x16c>)
  4024e6:	00ae      	lsls	r6, r5, #2
  4024e8:	1973      	adds	r3, r6, r5
  4024ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4024ee:	7c5b      	ldrb	r3, [r3, #17]
  4024f0:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  4024f4:	4435      	add	r5, r6
  4024f6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  4024fa:	f36f 13c7 	bfc	r3, #7, #1
  4024fe:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402500:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402504:	fab3 f383 	clz	r3, r3
  402508:	095b      	lsrs	r3, r3, #5
  40250a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40250c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40250e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402512:	2200      	movs	r2, #0
  402514:	4b17      	ldr	r3, [pc, #92]	; (402574 <udd_ep_run+0x170>)
  402516:	701a      	strb	r2, [r3, #0]
	return flags;
  402518:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  40251a:	2301      	movs	r3, #1
  40251c:	40bb      	lsls	r3, r7
  40251e:	4a16      	ldr	r2, [pc, #88]	; (402578 <udd_ep_run+0x174>)
  402520:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  402522:	f010 0f80 	tst.w	r0, #128	; 0x80
  402526:	d107      	bne.n	402538 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  402528:	b305      	cbz	r5, 40256c <udd_ep_run+0x168>
		cpu_irq_enable();
  40252a:	2001      	movs	r0, #1
  40252c:	4b11      	ldr	r3, [pc, #68]	; (402574 <udd_ep_run+0x170>)
  40252e:	7018      	strb	r0, [r3, #0]
  402530:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402534:	b662      	cpsie	i
  402536:	e00f      	b.n	402558 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  402538:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40253a:	f013 0f11 	tst.w	r3, #17
  40253e:	d1f3      	bne.n	402528 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  402540:	2101      	movs	r1, #1
  402542:	4638      	mov	r0, r7
  402544:	4b0d      	ldr	r3, [pc, #52]	; (40257c <udd_ep_run+0x178>)
  402546:	4798      	blx	r3
  402548:	2800      	cmp	r0, #0
  40254a:	d0ed      	beq.n	402528 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  40254c:	2100      	movs	r1, #0
  40254e:	4638      	mov	r0, r7
  402550:	4b0a      	ldr	r3, [pc, #40]	; (40257c <udd_ep_run+0x178>)
  402552:	4798      	blx	r3
  402554:	e7e8      	b.n	402528 <udd_ep_run+0x124>
		return false;
  402556:	2000      	movs	r0, #0
}
  402558:	b003      	add	sp, #12
  40255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  40255c:	2000      	movs	r0, #0
  40255e:	e7fb      	b.n	402558 <udd_ep_run+0x154>
  402560:	2000      	movs	r0, #0
  402562:	e7f9      	b.n	402558 <udd_ep_run+0x154>
  402564:	2000      	movs	r0, #0
  402566:	e7f7      	b.n	402558 <udd_ep_run+0x154>
		return false; // Job already on going
  402568:	2000      	movs	r0, #0
  40256a:	e7f5      	b.n	402558 <udd_ep_run+0x154>
	return true;
  40256c:	2001      	movs	r0, #1
  40256e:	e7f3      	b.n	402558 <udd_ep_run+0x154>
  402570:	20000c4c 	.word	0x20000c4c
  402574:	200000a0 	.word	0x200000a0
  402578:	40034000 	.word	0x40034000
  40257c:	0040142d 	.word	0x0040142d

00402580 <udd_ep_abort>:
{
  402580:	b5f0      	push	{r4, r5, r6, r7, lr}
  402582:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  402584:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402588:	2d03      	cmp	r5, #3
  40258a:	d840      	bhi.n	40260e <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40258c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402590:	fab3 f383 	clz	r3, r3
  402594:	095b      	lsrs	r3, r3, #5
  402596:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402598:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40259a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40259e:	2200      	movs	r2, #0
  4025a0:	4b4b      	ldr	r3, [pc, #300]	; (4026d0 <udd_ep_abort+0x150>)
  4025a2:	701a      	strb	r2, [r3, #0]
	return flags;
  4025a4:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  4025a6:	2401      	movs	r4, #1
  4025a8:	40ac      	lsls	r4, r5
  4025aa:	4a4a      	ldr	r2, [pc, #296]	; (4026d4 <udd_ep_abort+0x154>)
  4025ac:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4025ae:	b12b      	cbz	r3, 4025bc <udd_ep_abort+0x3c>
		cpu_irq_enable();
  4025b0:	2201      	movs	r2, #1
  4025b2:	4b47      	ldr	r3, [pc, #284]	; (4026d0 <udd_ep_abort+0x150>)
  4025b4:	701a      	strb	r2, [r3, #0]
  4025b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4025ba:	b662      	cpsie	i
	if (b_dir_in) {
  4025bc:	f010 0f80 	tst.w	r0, #128	; 0x80
  4025c0:	d127      	bne.n	402612 <udd_ep_abort+0x92>
  4025c2:	00ae      	lsls	r6, r5, #2
  4025c4:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  4025c8:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  4025cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4025ce:	f013 0f42 	tst.w	r3, #66	; 0x42
  4025d2:	d006      	beq.n	4025e2 <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  4025d4:	4f40      	ldr	r7, [pc, #256]	; (4026d8 <udd_ep_abort+0x158>)
  4025d6:	4628      	mov	r0, r5
  4025d8:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  4025da:	6b33      	ldr	r3, [r6, #48]	; 0x30
  4025dc:	f013 0f42 	tst.w	r3, #66	; 0x42
  4025e0:	d1f9      	bne.n	4025d6 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  4025e2:	4a3c      	ldr	r2, [pc, #240]	; (4026d4 <udd_ep_abort+0x154>)
  4025e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4025e6:	4323      	orrs	r3, r4
  4025e8:	6293      	str	r3, [r2, #40]	; 0x28
  4025ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4025ec:	421c      	tst	r4, r3
  4025ee:	d0fc      	beq.n	4025ea <udd_ep_abort+0x6a>
  4025f0:	4a38      	ldr	r2, [pc, #224]	; (4026d4 <udd_ep_abort+0x154>)
  4025f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4025f4:	ea23 0404 	bic.w	r4, r3, r4
  4025f8:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4025fa:	1e68      	subs	r0, r5, #1
  4025fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402600:	462a      	mov	r2, r5
  402602:	2101      	movs	r1, #1
  402604:	4b35      	ldr	r3, [pc, #212]	; (4026dc <udd_ep_abort+0x15c>)
  402606:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40260a:	4b35      	ldr	r3, [pc, #212]	; (4026e0 <udd_ep_abort+0x160>)
  40260c:	4798      	blx	r3
}
  40260e:	b007      	add	sp, #28
  402610:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402612:	00ab      	lsls	r3, r5, #2
  402614:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402618:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  40261c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40261e:	f012 0f10 	tst.w	r2, #16
  402622:	d03a      	beq.n	40269a <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  402624:	b34d      	cbz	r5, 40267a <udd_ep_abort+0xfa>
  402626:	2d03      	cmp	r5, #3
  402628:	d027      	beq.n	40267a <udd_ep_abort+0xfa>
  40262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40262c:	9201      	str	r2, [sp, #4]
  40262e:	9a01      	ldr	r2, [sp, #4]
  402630:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402634:	9201      	str	r2, [sp, #4]
  402636:	9a01      	ldr	r2, [sp, #4]
  402638:	f022 0210 	bic.w	r2, r2, #16
  40263c:	9201      	str	r2, [sp, #4]
  40263e:	9a01      	ldr	r2, [sp, #4]
  402640:	631a      	str	r2, [r3, #48]	; 0x30
  402642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402644:	f012 0f10 	tst.w	r2, #16
  402648:	d1fb      	bne.n	402642 <udd_ep_abort+0xc2>
  40264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40264c:	f012 0f10 	tst.w	r2, #16
  402650:	d1fb      	bne.n	40264a <udd_ep_abort+0xca>
  402652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402654:	9202      	str	r2, [sp, #8]
  402656:	9a02      	ldr	r2, [sp, #8]
  402658:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40265c:	9202      	str	r2, [sp, #8]
  40265e:	9a02      	ldr	r2, [sp, #8]
  402660:	f042 0210 	orr.w	r2, r2, #16
  402664:	9202      	str	r2, [sp, #8]
  402666:	9a02      	ldr	r2, [sp, #8]
  402668:	631a      	str	r2, [r3, #48]	; 0x30
  40266a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40266c:	f012 0f10 	tst.w	r2, #16
  402670:	d0fb      	beq.n	40266a <udd_ep_abort+0xea>
  402672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402674:	f012 0f10 	tst.w	r2, #16
  402678:	d0fb      	beq.n	402672 <udd_ep_abort+0xf2>
  40267a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40267c:	9203      	str	r2, [sp, #12]
  40267e:	9a03      	ldr	r2, [sp, #12]
  402680:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402684:	9203      	str	r2, [sp, #12]
  402686:	9a03      	ldr	r2, [sp, #12]
  402688:	f022 0210 	bic.w	r2, r2, #16
  40268c:	9203      	str	r2, [sp, #12]
  40268e:	9a03      	ldr	r2, [sp, #12]
  402690:	631a      	str	r2, [r3, #48]	; 0x30
  402692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402694:	f012 0f10 	tst.w	r2, #16
  402698:	d1fb      	bne.n	402692 <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  40269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40269c:	9204      	str	r2, [sp, #16]
  40269e:	9a04      	ldr	r2, [sp, #16]
  4026a0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4026a4:	9204      	str	r2, [sp, #16]
  4026a6:	9a04      	ldr	r2, [sp, #16]
  4026a8:	f022 0201 	bic.w	r2, r2, #1
  4026ac:	9204      	str	r2, [sp, #16]
  4026ae:	9a04      	ldr	r2, [sp, #16]
  4026b0:	631a      	str	r2, [r3, #48]	; 0x30
  4026b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026b4:	f012 0f01 	tst.w	r2, #1
  4026b8:	d1fb      	bne.n	4026b2 <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  4026ba:	1e6b      	subs	r3, r5, #1
  4026bc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4026c0:	4b06      	ldr	r3, [pc, #24]	; (4026dc <udd_ep_abort+0x15c>)
  4026c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4026c6:	7c5a      	ldrb	r2, [r3, #17]
  4026c8:	f36f 0283 	bfc	r2, #2, #2
  4026cc:	745a      	strb	r2, [r3, #17]
  4026ce:	e788      	b.n	4025e2 <udd_ep_abort+0x62>
  4026d0:	200000a0 	.word	0x200000a0
  4026d4:	40034000 	.word	0x40034000
  4026d8:	00401359 	.word	0x00401359
  4026dc:	20000c4c 	.word	0x20000c4c
  4026e0:	00401319 	.word	0x00401319

004026e4 <PIOA_Handler>:


//This all might be unnecessary


void Wake_Sleep_Handler(){
  4026e4:	b570      	push	{r4, r5, r6, lr}
	uint32_t IStatus = (pio_get_interrupt_status(PIOA));
  4026e6:	4c0f      	ldr	r4, [pc, #60]	; (402724 <PIOA_Handler+0x40>)
  4026e8:	4620      	mov	r0, r4
  4026ea:	4b0f      	ldr	r3, [pc, #60]	; (402728 <PIOA_Handler+0x44>)
  4026ec:	4798      	blx	r3
	bool USBSense = pio_get(USB_SNS_PORT,PIO_TYPE_PIO_INPUT,USB_SNS);
  4026ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4026f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4026f6:	4620      	mov	r0, r4
  4026f8:	4d0c      	ldr	r5, [pc, #48]	; (40272c <PIOA_Handler+0x48>)
  4026fa:	47a8      	blx	r5
  4026fc:	4606      	mov	r6, r0
	bool PWRSwitchSense = pio_get(PWR_SW_PORT,PIO_TYPE_PIO_INPUT,PWR_SW);
  4026fe:	2201      	movs	r2, #1
  402700:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402704:	4620      	mov	r0, r4
  402706:	47a8      	blx	r5

	if(USBSense & !PWRSwitchSense)
  402708:	b106      	cbz	r6, 40270c <PIOA_Handler+0x28>
  40270a:	b110      	cbz	r0, 402712 <PIOA_Handler+0x2e>
		USBWakeUp();
	else if(PWRSwitchSense)
  40270c:	b920      	cbnz	r0, 402718 <PIOA_Handler+0x34>
		PWRSwitchWakeUp();
	else if(!USBSense && !PWRSwitchSense)
  40270e:	b136      	cbz	r6, 40271e <PIOA_Handler+0x3a>
  402710:	bd70      	pop	{r4, r5, r6, pc}
		USBWakeUp();
  402712:	4b07      	ldr	r3, [pc, #28]	; (402730 <PIOA_Handler+0x4c>)
  402714:	4798      	blx	r3
  402716:	bd70      	pop	{r4, r5, r6, pc}
		PWRSwitchWakeUp();
  402718:	4b06      	ldr	r3, [pc, #24]	; (402734 <PIOA_Handler+0x50>)
  40271a:	4798      	blx	r3
  40271c:	bd70      	pop	{r4, r5, r6, pc}
		goToSleep();
  40271e:	4b06      	ldr	r3, [pc, #24]	; (402738 <PIOA_Handler+0x54>)
  402720:	4798      	blx	r3
}
  402722:	e7f5      	b.n	402710 <PIOA_Handler+0x2c>
  402724:	400e0e00 	.word	0x400e0e00
  402728:	00403081 	.word	0x00403081
  40272c:	00402f81 	.word	0x00402f81
  402730:	0040373d 	.word	0x0040373d
  402734:	00403771 	.word	0x00403771
  402738:	004037a5 	.word	0x004037a5

0040273c <RTT_Handler>:


void Wakup_Timer_Handler(){
  40273c:	b508      	push	{r3, lr}
	pio_set(BOARD_LED_PORT,BOARD_LED);
  40273e:	2108      	movs	r1, #8
  402740:	4801      	ldr	r0, [pc, #4]	; (402748 <RTT_Handler+0xc>)
  402742:	4b02      	ldr	r3, [pc, #8]	; (40274c <RTT_Handler+0x10>)
  402744:	4798      	blx	r3
  402746:	bd08      	pop	{r3, pc}
  402748:	400e0e00 	.word	0x400e0e00
  40274c:	00402f79 	.word	0x00402f79

00402750 <readHandler>:
static bool convertToBool(const uint8_t data[1]){
    return data[0];
}


void readHandler(uint8_t* responsePacket, uint16_t start_reg, uint16_t end_reg) {
  402750:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402752:	460c      	mov	r4, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i <= end_reg) {
  402754:	29ff      	cmp	r1, #255	; 0xff
  402756:	dc15      	bgt.n	402784 <readHandler+0x34>
  402758:	4617      	mov	r7, r2
  40275a:	4291      	cmp	r1, r2
  40275c:	dc12      	bgt.n	402784 <readHandler+0x34>
  40275e:	1c83      	adds	r3, r0, #2
  402760:	4d33      	ldr	r5, [pc, #204]	; (402830 <readHandler+0xe0>)
  402762:	eb05 0541 	add.w	r5, r5, r1, lsl #1
		uint16_t data = intRegisters[i-INT_REG_OFFSET];
  402766:	f835 1f02 	ldrh.w	r1, [r5, #2]!
  40276a:	4618      	mov	r0, r3
		responsePacket[0] = (data >> 8) & 0xFF;
  40276c:	0a0e      	lsrs	r6, r1, #8
  40276e:	f803 6c02 	strb.w	r6, [r3, #-2]
		responsePacket[1] = data & 0xFF;
  402772:	f803 1c01 	strb.w	r1, [r3, #-1]
		responsePacket += INT_REG_BYTE_SZ;
		i++;
  402776:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i <= end_reg) {
  402778:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  40277c:	d005      	beq.n	40278a <readHandler+0x3a>
  40277e:	3302      	adds	r3, #2
  402780:	42bc      	cmp	r4, r7
  402782:	ddf0      	ble.n	402766 <readHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i <= end_reg) {
  402784:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  402788:	da21      	bge.n	4027ce <readHandler+0x7e>
  40278a:	4694      	mov	ip, r2
  40278c:	42a2      	cmp	r2, r4
  40278e:	db33      	blt.n	4027f8 <readHandler+0xa8>
  402790:	4b28      	ldr	r3, [pc, #160]	; (402834 <readHandler+0xe4>)
  402792:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  402796:	4e28      	ldr	r6, [pc, #160]	; (402838 <readHandler+0xe8>)
  402798:	e006      	b.n	4027a8 <readHandler+0x58>
		uint8_t* floatConversionBytes = floatToBytes_union(floatRegisters[i-FLOAT_REG_OFFSET]);
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
			responsePacket[j] = floatConversionBytes[j];
		}
		responsePacket += FLOAT_REG_BYTE_SZ;
  40279a:	3004      	adds	r0, #4
		i++;
  40279c:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i <= end_reg) {
  40279e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  4027a2:	d017      	beq.n	4027d4 <readHandler+0x84>
  4027a4:	4564      	cmp	r4, ip
  4027a6:	dc27      	bgt.n	4027f8 <readHandler+0xa8>
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  4027a8:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  4027ac:	0e19      	lsrs	r1, r3, #24
  4027ae:	7031      	strb	r1, [r6, #0]
	floatCoversionBytes[1] = (u.data >> 16) & 0xFF;
  4027b0:	0c19      	lsrs	r1, r3, #16
  4027b2:	7071      	strb	r1, [r6, #1]
	floatCoversionBytes[2] = (u.data >> 8) & 0xFF;
  4027b4:	0a19      	lsrs	r1, r3, #8
  4027b6:	70b1      	strb	r1, [r6, #2]
	floatCoversionBytes[3] = u.data & 0xFF;
  4027b8:	70f3      	strb	r3, [r6, #3]
  4027ba:	4631      	mov	r1, r6
  4027bc:	1e43      	subs	r3, r0, #1
  4027be:	1cc7      	adds	r7, r0, #3
			responsePacket[j] = floatConversionBytes[j];
  4027c0:	f811 5b01 	ldrb.w	r5, [r1], #1
  4027c4:	f803 5f01 	strb.w	r5, [r3, #1]!
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
  4027c8:	42bb      	cmp	r3, r7
  4027ca:	d1f9      	bne.n	4027c0 <readHandler+0x70>
  4027cc:	e7e5      	b.n	40279a <readHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i <= end_reg) {
  4027ce:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  4027d2:	da14      	bge.n	4027fe <readHandler+0xae>
  4027d4:	4616      	mov	r6, r2
  4027d6:	4294      	cmp	r4, r2
  4027d8:	dc28      	bgt.n	40282c <readHandler+0xdc>
  4027da:	4b18      	ldr	r3, [pc, #96]	; (40283c <readHandler+0xec>)
  4027dc:	4423      	add	r3, r4
  4027de:	f5c4 7540 	rsb	r5, r4, #768	; 0x300
  4027e2:	4405      	add	r5, r0
		responsePacket[0] = charRegisters[i-CHAR_REG_OFFSET];
  4027e4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4027e8:	f800 1b01 	strb.w	r1, [r0], #1
		responsePacket += CHAR_REG_BYTE_SZ;
		i++;
  4027ec:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i <= end_reg) {
  4027ee:	42a8      	cmp	r0, r5
  4027f0:	d005      	beq.n	4027fe <readHandler+0xae>
  4027f2:	42b4      	cmp	r4, r6
  4027f4:	ddf6      	ble.n	4027e4 <readHandler+0x94>
  4027f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4027f8:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  4027fc:	db16      	blt.n	40282c <readHandler+0xdc>
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i <= end_reg) {
  4027fe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  402802:	da13      	bge.n	40282c <readHandler+0xdc>
  402804:	4616      	mov	r6, r2
  402806:	4294      	cmp	r4, r2
  402808:	dc10      	bgt.n	40282c <readHandler+0xdc>
  40280a:	4a0d      	ldr	r2, [pc, #52]	; (402840 <readHandler+0xf0>)
  40280c:	4422      	add	r2, r4
  40280e:	f5c4 6580 	rsb	r5, r4, #1024	; 0x400
  402812:	4405      	add	r5, r0
  402814:	4603      	mov	r3, r0
  402816:	1a20      	subs	r0, r4, r0
		responsePacket[0] = boolRegisters[i-BOOL_REG_OFFSET];
  402818:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  40281c:	f803 1b01 	strb.w	r1, [r3], #1
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i <= end_reg) {
  402820:	429d      	cmp	r5, r3
  402822:	d003      	beq.n	40282c <readHandler+0xdc>
  402824:	1819      	adds	r1, r3, r0
  402826:	42b1      	cmp	r1, r6
  402828:	ddf6      	ble.n	402818 <readHandler+0xc8>
  40282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40282e:	bf00      	nop
  402830:	20001f06 	.word	0x20001f06
  402834:	200016f8 	.word	0x200016f8
  402838:	20000c88 	.word	0x20000c88
  40283c:	200012f7 	.word	0x200012f7
  402840:	200012fb 	.word	0x200012fb

00402844 <writeHandler>:
		responsePacket += BOOL_REG_BYTE_SZ;
		i++;
	}
}

void writeHandler(uint8_t* data_packet, uint16_t start_reg, uint16_t end_reg) {
  402844:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402846:	460b      	mov	r3, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402848:	29ff      	cmp	r1, #255	; 0xff
  40284a:	dc16      	bgt.n	40287a <writeHandler+0x36>
  40284c:	4614      	mov	r4, r2
  40284e:	4291      	cmp	r1, r2
  402850:	da13      	bge.n	40287a <writeHandler+0x36>
  402852:	1c85      	adds	r5, r0, #2
  402854:	4837      	ldr	r0, [pc, #220]	; (402934 <writeHandler+0xf0>)
  402856:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  40285a:	4628      	mov	r0, r5
    return (data[0] << 8) | data[1];
  40285c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
  402860:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  402864:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
		intRegisters[i-INT_REG_OFFSET] = convertToInt(data_packet);
  402868:	f821 6f02 	strh.w	r6, [r1, #2]!
		data_packet += INT_REG_BYTE_SZ;
		i++;
  40286c:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  40286e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402872:	d005      	beq.n	402880 <writeHandler+0x3c>
  402874:	3502      	adds	r5, #2
  402876:	42a3      	cmp	r3, r4
  402878:	dbef      	blt.n	40285a <writeHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  40287a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40287e:	da3c      	bge.n	4028fa <writeHandler+0xb6>
  402880:	4696      	mov	lr, r2
  402882:	429a      	cmp	r2, r3
  402884:	dd1b      	ble.n	4028be <writeHandler+0x7a>
  402886:	1d04      	adds	r4, r0, #4
  402888:	4e2b      	ldr	r6, [pc, #172]	; (402938 <writeHandler+0xf4>)
  40288a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
  40288e:	4620      	mov	r0, r4
    u.data = MERGE_FOUR_BYTES(data);
  402890:	f814 7c04 	ldrb.w	r7, [r4, #-4]
  402894:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  402898:	0409      	lsls	r1, r1, #16
  40289a:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
  40289e:	f814 7c01 	ldrb.w	r7, [r4, #-1]
  4028a2:	4339      	orrs	r1, r7
  4028a4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
		floatRegisters[i-FLOAT_REG_OFFSET] = convertToFloat_union(data_packet);
  4028a8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  4028ac:	f846 1f04 	str.w	r1, [r6, #4]!
		data_packet += FLOAT_REG_BYTE_SZ;
		i++;
  4028b0:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  4028b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4028b6:	d023      	beq.n	402900 <writeHandler+0xbc>
  4028b8:	3404      	adds	r4, #4
  4028ba:	4573      	cmp	r3, lr
  4028bc:	d1e7      	bne.n	40288e <writeHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  4028be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  4028c2:	db35      	blt.n	402930 <writeHandler+0xec>
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
		data_packet += CHAR_REG_BYTE_SZ;
		i++;
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  4028c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4028c8:	da32      	bge.n	402930 <writeHandler+0xec>
  4028ca:	4293      	cmp	r3, r2
  4028cc:	da30      	bge.n	402930 <writeHandler+0xec>
  4028ce:	3801      	subs	r0, #1
  4028d0:	f2a3 3301 	subw	r3, r3, #769	; 0x301
  4028d4:	4919      	ldr	r1, [pc, #100]	; (40293c <writeHandler+0xf8>)
  4028d6:	440b      	add	r3, r1
  4028d8:	f101 04ff 	add.w	r4, r1, #255	; 0xff
  4028dc:	f2a2 3201 	subw	r2, r2, #769	; 0x301
  4028e0:	4411      	add	r1, r2
    return data[0];
  4028e2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4028e6:	3200      	adds	r2, #0
  4028e8:	bf18      	it	ne
  4028ea:	2201      	movne	r2, #1
  4028ec:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  4028f0:	42a3      	cmp	r3, r4
  4028f2:	d01d      	beq.n	402930 <writeHandler+0xec>
  4028f4:	428b      	cmp	r3, r1
  4028f6:	d1f4      	bne.n	4028e2 <writeHandler+0x9e>
  4028f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  4028fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  4028fe:	dae1      	bge.n	4028c4 <writeHandler+0x80>
  402900:	429a      	cmp	r2, r3
  402902:	dd15      	ble.n	402930 <writeHandler+0xec>
  402904:	f2a3 2101 	subw	r1, r3, #513	; 0x201
  402908:	4d0d      	ldr	r5, [pc, #52]	; (402940 <writeHandler+0xfc>)
  40290a:	4429      	add	r1, r5
  40290c:	f105 07ff 	add.w	r7, r5, #255	; 0xff
  402910:	f2a2 2401 	subw	r4, r2, #513	; 0x201
  402914:	442c      	add	r4, r5
  402916:	4606      	mov	r6, r0
  402918:	1a1d      	subs	r5, r3, r0
    return data[0];
  40291a:	f816 3b01 	ldrb.w	r3, [r6], #1
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
  40291e:	f801 3f01 	strb.w	r3, [r1, #1]!
		data_packet += CHAR_REG_BYTE_SZ;
  402922:	4630      	mov	r0, r6
  402924:	19ab      	adds	r3, r5, r6
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402926:	42b9      	cmp	r1, r7
  402928:	d0cc      	beq.n	4028c4 <writeHandler+0x80>
  40292a:	42a1      	cmp	r1, r4
  40292c:	d1f5      	bne.n	40291a <writeHandler+0xd6>
  40292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402930:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402932:	bf00      	nop
  402934:	20001f06 	.word	0x20001f06
  402938:	200016f8 	.word	0x200016f8
  40293c:	200015fc 	.word	0x200015fc
  402940:	200014f8 	.word	0x200014f8

00402944 <getReadResponseDataSize>:
}

uint16_t getReadResponseDataSize(uint16_t start_reg, uint16_t end_reg) {
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary

	if(start_reg < REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if starting register is within the data type range
  402944:	28ff      	cmp	r0, #255	; 0xff
  402946:	d824      	bhi.n	402992 <getReadResponseDataSize+0x4e>
		if(end_reg >= REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if the ending register is past the data type range
  402948:	29ff      	cmp	r1, #255	; 0xff
  40294a:	d91d      	bls.n	402988 <getReadResponseDataSize+0x44>
			size += (REGISTER_AR_SIZE+INT_REG_OFFSET-start_reg)*INT_REG_BYTE_SZ;		//add the register size to the size variable
  40294c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
  402950:	0040      	lsls	r0, r0, #1
  402952:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+INT_REG_OFFSET;								//set the new start range to the first float register
  402954:	f44f 7080 	mov.w	r0, #256	; 0x100
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg >= REGISTER_AR_SIZE+FLOAT_REG_OFFSET){								//check if the ending register is past the data type range
  402958:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40295c:	d325      	bcc.n	4029aa <getReadResponseDataSize+0x66>
			size += (REGISTER_AR_SIZE+FLOAT_REG_OFFSET-start_reg)*FLOAT_REG_BYTE_SZ;	//add the register size to the size variable
  40295e:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  402962:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402966:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+FLOAT_REG_OFFSET;								//set the new start range to the first float register
  402968:	f44f 7000 	mov.w	r0, #512	; 0x200
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg >= REGISTER_AR_SIZE+CHAR_REG_OFFSET){								//check if the ending register is past the data type range
  40296c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
  402970:	d323      	bcc.n	4029ba <getReadResponseDataSize+0x76>
  402972:	f503 7340 	add.w	r3, r3, #768	; 0x300
			size += (REGISTER_AR_SIZE+CHAR_REG_OFFSET-start_reg)*CHAR_REG_BYTE_SZ;		//add the register size to the size variable
  402976:	1a18      	subs	r0, r3, r0
  402978:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+CHAR_REG_OFFSET;								//set the new start range to the first float register
  40297a:	f44f 7040 	mov.w	r0, #768	; 0x300
  40297e:	3101      	adds	r1, #1
  402980:	4419      	add	r1, r3
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
		size += ((end_reg+1) - start_reg)*BOOL_REG_BYTE_SZ;								//return the size including this data type's registers
  402982:	1a08      	subs	r0, r1, r0
  402984:	b280      	uxth	r0, r0
		return size;
  402986:	4770      	bx	lr
			size += ((end_reg+1) - start_reg)*INT_REG_BYTE_SZ;							//return the size including this data type's registers
  402988:	3101      	adds	r1, #1
  40298a:	1a08      	subs	r0, r1, r0
  40298c:	0040      	lsls	r0, r0, #1
  40298e:	b280      	uxth	r0, r0
			return size;
  402990:	4770      	bx	lr
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
  402992:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  402996:	d306      	bcc.n	4029a6 <getReadResponseDataSize+0x62>
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
  402998:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  40299c:	d30b      	bcc.n	4029b6 <getReadResponseDataSize+0x72>
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
  40299e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
  4029a2:	d30f      	bcc.n	4029c4 <getReadResponseDataSize+0x80>
	}
		
}
  4029a4:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  4029a6:	2300      	movs	r3, #0
  4029a8:	e7d6      	b.n	402958 <getReadResponseDataSize+0x14>
			size += ((end_reg+1) - start_reg)*FLOAT_REG_BYTE_SZ;						//return the size including this data type's registers
  4029aa:	3101      	adds	r1, #1
  4029ac:	1a08      	subs	r0, r1, r0
  4029ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4029b2:	b280      	uxth	r0, r0
			return size;
  4029b4:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  4029b6:	2300      	movs	r3, #0
  4029b8:	e7d8      	b.n	40296c <getReadResponseDataSize+0x28>
  4029ba:	3101      	adds	r1, #1
  4029bc:	440b      	add	r3, r1
			size += ((end_reg+1) - start_reg)*CHAR_REG_BYTE_SZ;							//return the size including this data type's registers
  4029be:	1a18      	subs	r0, r3, r0
  4029c0:	b280      	uxth	r0, r0
			return size;
  4029c2:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  4029c4:	2300      	movs	r3, #0
  4029c6:	e7da      	b.n	40297e <getReadResponseDataSize+0x3a>

004029c8 <modbus_init>:

void modbus_init(Uart *port485, const uint32_t baud, Pio *enPinPort, const uint32_t enPin, const uint8_t slave_id){
  4029c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4029cc:	b086      	sub	sp, #24
  4029ce:	460f      	mov	r7, r1
  4029d0:	4616      	mov	r6, r2
  4029d2:	461d      	mov	r5, r3
	
	RS485Port = port485;
  4029d4:	4b2e      	ldr	r3, [pc, #184]	; (402a90 <modbus_init+0xc8>)
  4029d6:	6018      	str	r0, [r3, #0]
	slaveID = slave_id;
  4029d8:	4b2e      	ldr	r3, [pc, #184]	; (402a94 <modbus_init+0xcc>)
  4029da:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
  4029de:	701a      	strb	r2, [r3, #0]
	
	if(RS485Port == UART0){
  4029e0:	4b2d      	ldr	r3, [pc, #180]	; (402a98 <modbus_init+0xd0>)
  4029e2:	4298      	cmp	r0, r3
  4029e4:	d027      	beq.n	402a36 <modbus_init+0x6e>
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA9);		//Sets PA9 to RX
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA10);		//Sets PA10 to TX
		NVIC_EnableIRQ(UART0_IRQn);							//enables interrupts related to this port
	}
	
	if(RS485Port == UART1){
  4029e6:	4b2a      	ldr	r3, [pc, #168]	; (402a90 <modbus_init+0xc8>)
  4029e8:	681a      	ldr	r2, [r3, #0]
  4029ea:	4b2c      	ldr	r3, [pc, #176]	; (402a9c <modbus_init+0xd4>)
  4029ec:	429a      	cmp	r2, r3
  4029ee:	d039      	beq.n	402a64 <modbus_init+0x9c>
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB2);		//Sets PB2 to RX
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB3);		//Sets PB3 to TX
		NVIC_EnableIRQ(UART1_IRQn);							//enables interrupts related to this port
	}
	
	uint32_t clockSpeed = sysclk_get_peripheral_bus_hz(RS485Port);		//gets CPU speed to for baud counter
  4029f0:	4c27      	ldr	r4, [pc, #156]	; (402a90 <modbus_init+0xc8>)
	
	sam_uart_opt_t UARTSettings = {
  4029f2:	4b2b      	ldr	r3, [pc, #172]	; (402aa0 <modbus_init+0xd8>)
  4029f4:	9303      	str	r3, [sp, #12]
  4029f6:	9704      	str	r7, [sp, #16]
  4029f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4029fc:	9305      	str	r3, [sp, #20]
		.ul_baudrate = baud,			//sets baudrate
		.ul_mode = UART_MR_CHMODE_NORMAL | UART_MR_PAR_NO,	//sets to normal mode
		.ul_mck = clockSpeed			//sets baud counter clock
	};
	
	uart_init(RS485Port, &UARTSettings);							//init the UART port
  4029fe:	a903      	add	r1, sp, #12
  402a00:	6820      	ldr	r0, [r4, #0]
  402a02:	4b28      	ldr	r3, [pc, #160]	; (402aa4 <modbus_init+0xdc>)
  402a04:	4798      	blx	r3
	uart_enable_rx(RS485Port);
  402a06:	6820      	ldr	r0, [r4, #0]
  402a08:	4b27      	ldr	r3, [pc, #156]	; (402aa8 <modbus_init+0xe0>)
  402a0a:	4798      	blx	r3
	uart_enable_tx(RS485Port);
  402a0c:	6820      	ldr	r0, [r4, #0]
  402a0e:	4b27      	ldr	r3, [pc, #156]	; (402aac <modbus_init+0xe4>)
  402a10:	4798      	blx	r3
	uart_enable_interrupt(RS485Port, UART_IER_RXRDY);				//Enable interrupt for incoming data
  402a12:	2101      	movs	r1, #1
  402a14:	6820      	ldr	r0, [r4, #0]
  402a16:	4b26      	ldr	r3, [pc, #152]	; (402ab0 <modbus_init+0xe8>)
  402a18:	4798      	blx	r3
	
	pio_set_output(enPinPort,enPin,LOW,DISABLE,DISABLE);		//init the enable pin
  402a1a:	2200      	movs	r2, #0
  402a1c:	9200      	str	r2, [sp, #0]
  402a1e:	4613      	mov	r3, r2
  402a20:	4629      	mov	r1, r5
  402a22:	4630      	mov	r0, r6
  402a24:	4c23      	ldr	r4, [pc, #140]	; (402ab4 <modbus_init+0xec>)
  402a26:	47a0      	blx	r4
	globalEnPinPort = enPinPort;
  402a28:	4b23      	ldr	r3, [pc, #140]	; (402ab8 <modbus_init+0xf0>)
  402a2a:	601e      	str	r6, [r3, #0]
	globalEnPin = enPin;
  402a2c:	4b23      	ldr	r3, [pc, #140]	; (402abc <modbus_init+0xf4>)
  402a2e:	601d      	str	r5, [r3, #0]
	/*																//CRC engine cannot be used in the current configuration because the modbus RTU polynomial (0xA001) does not match any of the supported polynomials
	uint8_t CRCMode = CRCCU_MR_ENABLE | CRCCU_MR_PTYPE_CCITT16;
	pmc_enable_periph_clk(ID_CRCCU);							//init CRC Computation Unit
	crccu_configure_mode(CRCCU, CRCMode)
	*/
}
  402a30:	b006      	add	sp, #24
  402a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pmc_enable_periph_clk(ID_UART0);		//Enable the clocks to the UART modules
  402a36:	2008      	movs	r0, #8
  402a38:	4b21      	ldr	r3, [pc, #132]	; (402ac0 <modbus_init+0xf8>)
  402a3a:	4798      	blx	r3
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA9);		//Sets PA9 to RX
  402a3c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 402acc <modbus_init+0x104>
  402a40:	f44f 7200 	mov.w	r2, #512	; 0x200
  402a44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a48:	4640      	mov	r0, r8
  402a4a:	4c1e      	ldr	r4, [pc, #120]	; (402ac4 <modbus_init+0xfc>)
  402a4c:	47a0      	blx	r4
		pio_set_peripheral(PIOA,PIO_PERIPH_A,PIO_PA10);		//Sets PA10 to TX
  402a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402a52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a56:	4640      	mov	r0, r8
  402a58:	47a0      	blx	r4
  402a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
  402a5e:	4b1a      	ldr	r3, [pc, #104]	; (402ac8 <modbus_init+0x100>)
  402a60:	601a      	str	r2, [r3, #0]
  402a62:	e7c0      	b.n	4029e6 <modbus_init+0x1e>
		pmc_enable_periph_clk(ID_UART1);		//Enable the clocks to the UART modules
  402a64:	2009      	movs	r0, #9
  402a66:	4b16      	ldr	r3, [pc, #88]	; (402ac0 <modbus_init+0xf8>)
  402a68:	4798      	blx	r3
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB2);		//Sets PB2 to RX
  402a6a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 402ad0 <modbus_init+0x108>
  402a6e:	2204      	movs	r2, #4
  402a70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a74:	4640      	mov	r0, r8
  402a76:	4c13      	ldr	r4, [pc, #76]	; (402ac4 <modbus_init+0xfc>)
  402a78:	47a0      	blx	r4
		pio_set_peripheral(PIOB,PIO_PERIPH_A,PIO_PB3);		//Sets PB3 to TX
  402a7a:	2208      	movs	r2, #8
  402a7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a80:	4640      	mov	r0, r8
  402a82:	47a0      	blx	r4
  402a84:	f44f 7200 	mov.w	r2, #512	; 0x200
  402a88:	4b0f      	ldr	r3, [pc, #60]	; (402ac8 <modbus_init+0x100>)
  402a8a:	601a      	str	r2, [r3, #0]
  402a8c:	e7b0      	b.n	4029f0 <modbus_init+0x28>
  402a8e:	bf00      	nop
  402a90:	200015f8 	.word	0x200015f8
  402a94:	2000210c 	.word	0x2000210c
  402a98:	400e0600 	.word	0x400e0600
  402a9c:	400e0800 	.word	0x400e0800
  402aa0:	07270e00 	.word	0x07270e00
  402aa4:	004032e9 	.word	0x004032e9
  402aa8:	00403325 	.word	0x00403325
  402aac:	0040331f 	.word	0x0040331f
  402ab0:	0040332b 	.word	0x0040332b
  402ab4:	0040305b 	.word	0x0040305b
  402ab8:	20001efc 	.word	0x20001efc
  402abc:	20001f04 	.word	0x20001f04
  402ac0:	0040320d 	.word	0x0040320d
  402ac4:	00402f99 	.word	0x00402f99
  402ac8:	e000e100 	.word	0xe000e100
  402acc:	400e0e00 	.word	0x400e0e00
  402ad0:	400e1000 	.word	0x400e1000

00402ad4 <UART_Handler>:
	transmitIndex = 0;
	uart_enable_interrupt(RS485Port,UART_IMR_TXRDY);
}

//interrupt handler for incoming data
void UART_Handler(void){
  402ad4:	b510      	push	{r4, lr}
	if(uart_is_rx_ready(RS485Port)){							//confirm there is data ready to be read
  402ad6:	4b1f      	ldr	r3, [pc, #124]	; (402b54 <UART_Handler+0x80>)
  402ad8:	6818      	ldr	r0, [r3, #0]
  402ada:	4b1f      	ldr	r3, [pc, #124]	; (402b58 <UART_Handler+0x84>)
  402adc:	4798      	blx	r3
  402ade:	b980      	cbnz	r0, 402b02 <UART_Handler+0x2e>
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head]));		//move the data into the next index of the rx buffer
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);		//iterate the head through the ring buffer
	}else if(uart_is_tx_ready(RS485Port)){
  402ae0:	4b1c      	ldr	r3, [pc, #112]	; (402b54 <UART_Handler+0x80>)
  402ae2:	6818      	ldr	r0, [r3, #0]
  402ae4:	4b1d      	ldr	r3, [pc, #116]	; (402b5c <UART_Handler+0x88>)
  402ae6:	4798      	blx	r3
  402ae8:	b150      	cbz	r0, 402b00 <UART_Handler+0x2c>
		if(transmitIndex < responsePacketSize){
  402aea:	4b1d      	ldr	r3, [pc, #116]	; (402b60 <UART_Handler+0x8c>)
  402aec:	881b      	ldrh	r3, [r3, #0]
  402aee:	4a1d      	ldr	r2, [pc, #116]	; (402b64 <UART_Handler+0x90>)
  402af0:	8812      	ldrh	r2, [r2, #0]
  402af2:	429a      	cmp	r2, r3
  402af4:	d813      	bhi.n	402b1e <UART_Handler+0x4a>
			uart_write(RS485Port, responsePacket[transmitIndex]);
			transmitIndex++;
		}else if(uart_is_tx_empty(RS485Port)){
  402af6:	4b17      	ldr	r3, [pc, #92]	; (402b54 <UART_Handler+0x80>)
  402af8:	6818      	ldr	r0, [r3, #0]
  402afa:	4b1b      	ldr	r3, [pc, #108]	; (402b68 <UART_Handler+0x94>)
  402afc:	4798      	blx	r3
  402afe:	b9c8      	cbnz	r0, 402b34 <UART_Handler+0x60>
  402b00:	bd10      	pop	{r4, pc}
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head]));		//move the data into the next index of the rx buffer
  402b02:	4c1a      	ldr	r4, [pc, #104]	; (402b6c <UART_Handler+0x98>)
  402b04:	8821      	ldrh	r1, [r4, #0]
  402b06:	3104      	adds	r1, #4
  402b08:	4421      	add	r1, r4
  402b0a:	4b12      	ldr	r3, [pc, #72]	; (402b54 <UART_Handler+0x80>)
  402b0c:	6818      	ldr	r0, [r3, #0]
  402b0e:	4b18      	ldr	r3, [pc, #96]	; (402b70 <UART_Handler+0x9c>)
  402b10:	4798      	blx	r3
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);		//iterate the head through the ring buffer
  402b12:	8823      	ldrh	r3, [r4, #0]
  402b14:	3301      	adds	r3, #1
  402b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402b1a:	8023      	strh	r3, [r4, #0]
  402b1c:	bd10      	pop	{r4, pc}
			uart_write(RS485Port, responsePacket[transmitIndex]);
  402b1e:	4a15      	ldr	r2, [pc, #84]	; (402b74 <UART_Handler+0xa0>)
  402b20:	5cd1      	ldrb	r1, [r2, r3]
  402b22:	4b0c      	ldr	r3, [pc, #48]	; (402b54 <UART_Handler+0x80>)
  402b24:	6818      	ldr	r0, [r3, #0]
  402b26:	4b14      	ldr	r3, [pc, #80]	; (402b78 <UART_Handler+0xa4>)
  402b28:	4798      	blx	r3
			transmitIndex++;
  402b2a:	4a0d      	ldr	r2, [pc, #52]	; (402b60 <UART_Handler+0x8c>)
  402b2c:	8813      	ldrh	r3, [r2, #0]
  402b2e:	3301      	adds	r3, #1
  402b30:	8013      	strh	r3, [r2, #0]
  402b32:	bd10      	pop	{r4, pc}
			pio_clear(globalEnPinPort,globalEnPin);
  402b34:	4b11      	ldr	r3, [pc, #68]	; (402b7c <UART_Handler+0xa8>)
  402b36:	6819      	ldr	r1, [r3, #0]
  402b38:	4b11      	ldr	r3, [pc, #68]	; (402b80 <UART_Handler+0xac>)
  402b3a:	6818      	ldr	r0, [r3, #0]
  402b3c:	4c11      	ldr	r4, [pc, #68]	; (402b84 <UART_Handler+0xb0>)
  402b3e:	47a0      	blx	r4
			pio_clear(RS485_NRE_PORT,RS485_NRE);
  402b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402b44:	4810      	ldr	r0, [pc, #64]	; (402b88 <UART_Handler+0xb4>)
  402b46:	47a0      	blx	r4
			uart_disable_interrupt(RS485Port,UART_IMR_TXRDY);
  402b48:	2102      	movs	r1, #2
  402b4a:	4b02      	ldr	r3, [pc, #8]	; (402b54 <UART_Handler+0x80>)
  402b4c:	6818      	ldr	r0, [r3, #0]
  402b4e:	4b0f      	ldr	r3, [pc, #60]	; (402b8c <UART_Handler+0xb8>)
  402b50:	4798      	blx	r3
		}
	}
}
  402b52:	e7d5      	b.n	402b00 <UART_Handler+0x2c>
  402b54:	200015f8 	.word	0x200015f8
  402b58:	00403343 	.word	0x00403343
  402b5c:	00403333 	.word	0x00403333
  402b60:	20001f02 	.word	0x20001f02
  402b64:	2000210a 	.word	0x2000210a
  402b68:	0040333b 	.word	0x0040333b
  402b6c:	2000108c 	.word	0x2000108c
  402b70:	0040335b 	.word	0x0040335b
  402b74:	200016fc 	.word	0x200016fc
  402b78:	0040334b 	.word	0x0040334b
  402b7c:	20001f04 	.word	0x20001f04
  402b80:	20001efc 	.word	0x20001efc
  402b84:	00402f7d 	.word	0x00402f7d
  402b88:	400e0e00 	.word	0x400e0e00
  402b8c:	0040332f 	.word	0x0040332f

00402b90 <UART0_Handler>:


//Regardless of what UART port triggers the interrupt, the behavior is the same
void UART0_Handler(){
  402b90:	b508      	push	{r3, lr}
	UART_Handler();
  402b92:	4b01      	ldr	r3, [pc, #4]	; (402b98 <UART0_Handler+0x8>)
  402b94:	4798      	blx	r3
  402b96:	bd08      	pop	{r3, pc}
  402b98:	00402ad5 	.word	0x00402ad5

00402b9c <UART1_Handler>:
}

void UART1_Handler(){
  402b9c:	b508      	push	{r3, lr}
	UART_Handler();
  402b9e:	4b01      	ldr	r3, [pc, #4]	; (402ba4 <UART1_Handler+0x8>)
  402ba0:	4798      	blx	r3
  402ba2:	bd08      	pop	{r3, pc}
  402ba4:	00402ad5 	.word	0x00402ad5

00402ba8 <pop_packet>:
}

uint8_t* pop_packet(){
	static uint8_t returnPacket[RX_BUFFER_SIZE];
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402ba8:	4b0d      	ldr	r3, [pc, #52]	; (402be0 <pop_packet+0x38>)
  402baa:	8819      	ldrh	r1, [r3, #0]
  402bac:	b1a9      	cbz	r1, 402bda <pop_packet+0x32>
uint8_t* pop_packet(){
  402bae:	b410      	push	{r4}
  402bb0:	4b0c      	ldr	r3, [pc, #48]	; (402be4 <pop_packet+0x3c>)
  402bb2:	885b      	ldrh	r3, [r3, #2]
  402bb4:	480c      	ldr	r0, [pc, #48]	; (402be8 <pop_packet+0x40>)
  402bb6:	1e42      	subs	r2, r0, #1
  402bb8:	3901      	subs	r1, #1
  402bba:	4408      	add	r0, r1
		returnPacket[i] = rxBuffer.data[rxBuffer.tail];
  402bbc:	4c09      	ldr	r4, [pc, #36]	; (402be4 <pop_packet+0x3c>)
  402bbe:	18e1      	adds	r1, r4, r3
  402bc0:	7909      	ldrb	r1, [r1, #4]
  402bc2:	f802 1f01 	strb.w	r1, [r2, #1]!
		rxBuffer.tail = PKT_WRAP_ARND(rxBuffer.tail + 1);	//iterate the tail
  402bc6:	3301      	adds	r3, #1
  402bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402bcc:	4282      	cmp	r2, r0
  402bce:	d1f6      	bne.n	402bbe <pop_packet+0x16>
  402bd0:	4a04      	ldr	r2, [pc, #16]	; (402be4 <pop_packet+0x3c>)
  402bd2:	8053      	strh	r3, [r2, #2]
	}
	return returnPacket;									//return
}
  402bd4:	4804      	ldr	r0, [pc, #16]	; (402be8 <pop_packet+0x40>)
  402bd6:	bc10      	pop	{r4}
  402bd8:	4770      	bx	lr
  402bda:	4803      	ldr	r0, [pc, #12]	; (402be8 <pop_packet+0x40>)
  402bdc:	4770      	bx	lr
  402bde:	bf00      	nop
  402be0:	20001f00 	.word	0x20001f00
  402be4:	2000108c 	.word	0x2000108c
  402be8:	20000c8c 	.word	0x20000c8c

00402bec <buffer_get_data_sz>:

uint16_t buffer_get_data_sz(void) {
	if (rxBuffer.head >= rxBuffer.tail) {
  402bec:	4b04      	ldr	r3, [pc, #16]	; (402c00 <buffer_get_data_sz+0x14>)
  402bee:	8818      	ldrh	r0, [r3, #0]
  402bf0:	885b      	ldrh	r3, [r3, #2]
  402bf2:	4298      	cmp	r0, r3
		return rxBuffer.head - rxBuffer.tail;
	} else {
		return (RX_BUFFER_SIZE - rxBuffer.tail) + rxBuffer.head;
  402bf4:	bf38      	it	cc
  402bf6:	f500 6080 	addcc.w	r0, r0, #1024	; 0x400
  402bfa:	1ac0      	subs	r0, r0, r3
  402bfc:	b280      	uxth	r0, r0
	}
}
  402bfe:	4770      	bx	lr
  402c00:	2000108c 	.word	0x2000108c

00402c04 <ModRTU_CRC>:

uint16_t ModRTU_CRC(uint8_t* buf, int len)
{
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++) {
  402c04:	2900      	cmp	r1, #0
  402c06:	dd16      	ble.n	402c36 <ModRTU_CRC+0x32>
{
  402c08:	b410      	push	{r4}
  402c0a:	4604      	mov	r4, r0
  402c0c:	4401      	add	r1, r0
	for (int pos = 0; pos < len; pos++) {
  402c0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc

		for (int i = 8; i != 0; i--) {    // Loop over each bit
			if ((crc & 0x0001) != 0) {      // If the LSB is set
				crc >>= 1;                    // Shift right and XOR 0xA001
				crc ^= 0xA001;
  402c12:	f24a 0201 	movw	r2, #40961	; 0xa001
  402c16:	e001      	b.n	402c1c <ModRTU_CRC+0x18>
	for (int pos = 0; pos < len; pos++) {
  402c18:	428c      	cmp	r4, r1
  402c1a:	d00f      	beq.n	402c3c <ModRTU_CRC+0x38>
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc
  402c1c:	f814 3b01 	ldrb.w	r3, [r4], #1
  402c20:	4058      	eors	r0, r3
  402c22:	2308      	movs	r3, #8
			if ((crc & 0x0001) != 0) {      // If the LSB is set
  402c24:	f010 0f01 	tst.w	r0, #1
				crc ^= 0xA001;
  402c28:	bf14      	ite	ne
  402c2a:	ea82 0050 	eorne.w	r0, r2, r0, lsr #1
			}
			else                            // Else LSB is not set
			crc >>= 1;                    // Just shift right
  402c2e:	0840      	lsreq	r0, r0, #1
		for (int i = 8; i != 0; i--) {    // Loop over each bit
  402c30:	3b01      	subs	r3, #1
  402c32:	d1f7      	bne.n	402c24 <ModRTU_CRC+0x20>
  402c34:	e7f0      	b.n	402c18 <ModRTU_CRC+0x14>
	uint16_t crc = 0xFFFF;
  402c36:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402c3a:	4770      	bx	lr
		}
	}
	
	return crc;
  402c3c:	bc10      	pop	{r4}
  402c3e:	4770      	bx	lr

00402c40 <packet_complete>:
bool packet_complete(){
  402c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402c44:	af00      	add	r7, sp, #0
	packetSize = 0;																	// Reset this in case packet is not complete
  402c46:	2200      	movs	r2, #0
  402c48:	4b53      	ldr	r3, [pc, #332]	; (402d98 <packet_complete+0x158>)
  402c4a:	801a      	strh	r2, [r3, #0]
	uint8_t func_code = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + FC_IDX)];
  402c4c:	4b53      	ldr	r3, [pc, #332]	; (402d9c <packet_complete+0x15c>)
  402c4e:	885c      	ldrh	r4, [r3, #2]
  402c50:	1c62      	adds	r2, r4, #1
  402c52:	f3c2 0209 	ubfx	r2, r2, #0, #10
  402c56:	4413      	add	r3, r2
  402c58:	791b      	ldrb	r3, [r3, #4]
	if((func_code != FC_WRITE_MULT) && (func_code != FC_READ_MULT)){				//if the function code isn't write or read, we know somethings fucked up
  402c5a:	2b10      	cmp	r3, #16
  402c5c:	f000 8087 	beq.w	402d6e <packet_complete+0x12e>
  402c60:	2b03      	cmp	r3, #3
  402c62:	d076      	beq.n	402d52 <packet_complete+0x112>
		uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX);
  402c64:	4613      	mov	r3, r2
		while(checkByte != FC_READ_MULT && checkByte != FC_WRITE_MULT && FCLoc != rxBuffer.head){
  402c66:	4a4d      	ldr	r2, [pc, #308]	; (402d9c <packet_complete+0x15c>)
  402c68:	8811      	ldrh	r1, [r2, #0]
  402c6a:	428b      	cmp	r3, r1
  402c6c:	d01a      	beq.n	402ca4 <packet_complete+0x64>
			checkByte = rxBuffer.data[FCLoc];
  402c6e:	4610      	mov	r0, r2
			FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402c70:	3301      	adds	r3, #1
  402c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
			checkByte = rxBuffer.data[FCLoc];
  402c76:	18c2      	adds	r2, r0, r3
  402c78:	7912      	ldrb	r2, [r2, #4]
		while(checkByte != FC_READ_MULT && checkByte != FC_WRITE_MULT && FCLoc != rxBuffer.head){
  402c7a:	2a03      	cmp	r2, #3
  402c7c:	d004      	beq.n	402c88 <packet_complete+0x48>
  402c7e:	2a10      	cmp	r2, #16
  402c80:	d002      	beq.n	402c88 <packet_complete+0x48>
  402c82:	428b      	cmp	r3, r1
  402c84:	d1f4      	bne.n	402c70 <packet_complete+0x30>
			FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402c86:	460b      	mov	r3, r1
		if(PKT_WRAP_ARND(FCLoc-1) >= rxBuffer.tail){
  402c88:	1e5a      	subs	r2, r3, #1
  402c8a:	f3c2 0209 	ubfx	r2, r2, #0, #10
  402c8e:	4294      	cmp	r4, r2
  402c90:	dc0a      	bgt.n	402ca8 <packet_complete+0x68>
			packetSize = PKT_WRAP_ARND(FCLoc-1) - rxBuffer.tail;
  402c92:	1b13      	subs	r3, r2, r4
  402c94:	4a40      	ldr	r2, [pc, #256]	; (402d98 <packet_complete+0x158>)
  402c96:	8013      	strh	r3, [r2, #0]
		pop_packet();
  402c98:	4b41      	ldr	r3, [pc, #260]	; (402da0 <packet_complete+0x160>)
  402c9a:	4798      	blx	r3
		return false;																
  402c9c:	2000      	movs	r0, #0
}
  402c9e:	46bd      	mov	sp, r7
  402ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX);
  402ca4:	460b      	mov	r3, r1
  402ca6:	e7ef      	b.n	402c88 <packet_complete+0x48>
			packetSize = (RX_BUFFER_SIZE - rxBuffer.tail) + PKT_WRAP_ARND(FCLoc-1);
  402ca8:	3b01      	subs	r3, #1
  402caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402cae:	f5c4 6480 	rsb	r4, r4, #1024	; 0x400
  402cb2:	4423      	add	r3, r4
  402cb4:	4a38      	ldr	r2, [pc, #224]	; (402d98 <packet_complete+0x158>)
  402cb6:	8013      	strh	r3, [r2, #0]
  402cb8:	e7ee      	b.n	402c98 <packet_complete+0x58>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  402cba:	4b3a      	ldr	r3, [pc, #232]	; (402da4 <packet_complete+0x164>)
  402cbc:	4798      	blx	r3
  402cbe:	2809      	cmp	r0, #9
  402cc0:	d943      	bls.n	402d4a <packet_complete+0x10a>
		num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + WR_DATA_SIZE_IDX)];		//get supposed number of data bytes from the packet
  402cc2:	1da3      	adds	r3, r4, #6
  402cc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
  402cc8:	4b34      	ldr	r3, [pc, #208]	; (402d9c <packet_complete+0x15c>)
  402cca:	4413      	add	r3, r2
  402ccc:	791b      	ldrb	r3, [r3, #4]
		base_pkt_sz = ABS_MIN_WRITE_PACKET_SIZE - 1;											
  402cce:	2509      	movs	r5, #9
  402cd0:	e05a      	b.n	402d88 <packet_complete+0x148>
	packetSize = full_pkt_sz;															// Set global packetSize to completed packet size
  402cd2:	4b31      	ldr	r3, [pc, #196]	; (402d98 <packet_complete+0x158>)
  402cd4:	801d      	strh	r5, [r3, #0]
	uint8_t packetNoCRC[packetSize - CRC_SIZE];											//pull packet into linear buffer for crc check
  402cd6:	1ea9      	subs	r1, r5, #2
  402cd8:	466e      	mov	r6, sp
  402cda:	1d6b      	adds	r3, r5, #5
  402cdc:	f023 0307 	bic.w	r3, r3, #7
  402ce0:	ebad 0d03 	sub.w	sp, sp, r3
  402ce4:	4668      	mov	r0, sp
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  402ce6:	2900      	cmp	r1, #0
  402ce8:	dd10      	ble.n	402d0c <packet_complete+0xcc>
  402cea:	460d      	mov	r5, r1
  402cec:	446d      	add	r5, sp
  402cee:	466a      	mov	r2, sp
		packetNoCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + i)];
  402cf0:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 402d9c <packet_complete+0x15c>
  402cf4:	eba4 0e00 	sub.w	lr, r4, r0
  402cf8:	eb0e 0302 	add.w	r3, lr, r2
  402cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402d00:	4463      	add	r3, ip
  402d02:	791b      	ldrb	r3, [r3, #4]
  402d04:	f802 3b01 	strb.w	r3, [r2], #1
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  402d08:	42aa      	cmp	r2, r5
  402d0a:	d1f5      	bne.n	402cf8 <packet_complete+0xb8>
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402d0c:	440c      	add	r4, r1
  402d0e:	4d23      	ldr	r5, [pc, #140]	; (402d9c <packet_complete+0x15c>)
  402d10:	f3c4 0309 	ubfx	r3, r4, #0, #10
  402d14:	442b      	add	r3, r5
  402d16:	f893 8004 	ldrb.w	r8, [r3, #4]
	uint16_t expectedCRC = ModRTU_CRC(packetNoCRC, packetSize - CRC_SIZE);				//calculate expected crc
  402d1a:	4b23      	ldr	r3, [pc, #140]	; (402da8 <packet_complete+0x168>)
  402d1c:	4798      	blx	r3
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402d1e:	3401      	adds	r4, #1
  402d20:	f3c4 0409 	ubfx	r4, r4, #0, #10
  402d24:	442c      	add	r4, r5
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  402d26:	7922      	ldrb	r2, [r4, #4]
  402d28:	f3c0 230f 	ubfx	r3, r0, #8, #16
  402d2c:	429a      	cmp	r2, r3
  402d2e:	d007      	beq.n	402d40 <packet_complete+0x100>
		packetSize = 1;
  402d30:	2201      	movs	r2, #1
  402d32:	4b19      	ldr	r3, [pc, #100]	; (402d98 <packet_complete+0x158>)
  402d34:	801a      	strh	r2, [r3, #0]
		pop_packet();
  402d36:	4b1a      	ldr	r3, [pc, #104]	; (402da0 <packet_complete+0x160>)
  402d38:	4798      	blx	r3
		return false;
  402d3a:	2000      	movs	r0, #0
  402d3c:	46b5      	mov	sp, r6
  402d3e:	e7ae      	b.n	402c9e <packet_complete+0x5e>
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  402d40:	b2c0      	uxtb	r0, r0
  402d42:	4540      	cmp	r0, r8
  402d44:	d1f4      	bne.n	402d30 <packet_complete+0xf0>
		return true;																	//packet is complete and passes crc
  402d46:	2001      	movs	r0, #1
  402d48:	e7f8      	b.n	402d3c <packet_complete+0xfc>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  402d4a:	2000      	movs	r0, #0
  402d4c:	e7a7      	b.n	402c9e <packet_complete+0x5e>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  402d4e:	2000      	movs	r0, #0
  402d50:	e7a5      	b.n	402c9e <packet_complete+0x5e>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  402d52:	f3c4 0209 	ubfx	r2, r4, #0, #10
  402d56:	4b11      	ldr	r3, [pc, #68]	; (402d9c <packet_complete+0x15c>)
  402d58:	4413      	add	r3, r2
	((func_code == FC_READ_MULT) && slave_id != 0)) {
  402d5a:	791b      	ldrb	r3, [r3, #4]
  402d5c:	b973      	cbnz	r3, 402d7c <packet_complete+0x13c>
		num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + RD_DATA_SIZE_IDX)];
  402d5e:	1ca3      	adds	r3, r4, #2
  402d60:	f3c3 0209 	ubfx	r2, r3, #0, #10
  402d64:	4b0d      	ldr	r3, [pc, #52]	; (402d9c <packet_complete+0x15c>)
  402d66:	4413      	add	r3, r2
  402d68:	791b      	ldrb	r3, [r3, #4]
		base_pkt_sz = ABS_MIN_READ_RES_PACKET_SIZE - 1;
  402d6a:	2505      	movs	r5, #5
  402d6c:	e00c      	b.n	402d88 <packet_complete+0x148>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  402d6e:	f3c4 0209 	ubfx	r2, r4, #0, #10
  402d72:	4b0a      	ldr	r3, [pc, #40]	; (402d9c <packet_complete+0x15c>)
  402d74:	4413      	add	r3, r2
	if (func_code == FC_WRITE_MULT && slave_id != 0) {
  402d76:	791b      	ldrb	r3, [r3, #4]
  402d78:	2b00      	cmp	r3, #0
  402d7a:	d19e      	bne.n	402cba <packet_complete+0x7a>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  402d7c:	4b09      	ldr	r3, [pc, #36]	; (402da4 <packet_complete+0x164>)
  402d7e:	4798      	blx	r3
  402d80:	2807      	cmp	r0, #7
  402d82:	d9e4      	bls.n	402d4e <packet_complete+0x10e>
		base_pkt_sz = WRITE_RES_PACKET_SIZE;											//we know the final packet size
  402d84:	2508      	movs	r5, #8
	uint8_t num_data_bytes = 0;														// Default 0 for packets with no data bytes
  402d86:	2300      	movs	r3, #0
	uint16_t full_pkt_sz = num_data_bytes + base_pkt_sz;								//calculate full packet size
  402d88:	441d      	add	r5, r3
	if (buffer_get_data_sz() < full_pkt_sz) return false;								//make sure we have a full packet
  402d8a:	4b06      	ldr	r3, [pc, #24]	; (402da4 <packet_complete+0x164>)
  402d8c:	4798      	blx	r3
  402d8e:	4285      	cmp	r5, r0
  402d90:	d99f      	bls.n	402cd2 <packet_complete+0x92>
  402d92:	2000      	movs	r0, #0
  402d94:	e783      	b.n	402c9e <packet_complete+0x5e>
  402d96:	bf00      	nop
  402d98:	20001f00 	.word	0x20001f00
  402d9c:	2000108c 	.word	0x2000108c
  402da0:	00402ba9 	.word	0x00402ba9
  402da4:	00402bed 	.word	0x00402bed
  402da8:	00402c05 	.word	0x00402c05

00402dac <modbus_update>:
void modbus_update(void){
  402dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(buffer_get_data_sz() < ABS_MIN_PACKET_SIZE) return;			//if not enough data has been received just break out
  402dae:	4b34      	ldr	r3, [pc, #208]	; (402e80 <modbus_update+0xd4>)
  402db0:	4798      	blx	r3
  402db2:	2805      	cmp	r0, #5
  402db4:	d800      	bhi.n	402db8 <modbus_update+0xc>
  402db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( !packet_complete()) return;									//check if an entire packet has been received otherwise return, also resolves overflow errors
  402db8:	4b32      	ldr	r3, [pc, #200]	; (402e84 <modbus_update+0xd8>)
  402dba:	4798      	blx	r3
  402dbc:	2800      	cmp	r0, #0
  402dbe:	d0fa      	beq.n	402db6 <modbus_update+0xa>
	uint8_t* packet = pop_packet();									//packet is complete, so pull it out
  402dc0:	4b31      	ldr	r3, [pc, #196]	; (402e88 <modbus_update+0xdc>)
  402dc2:	4798      	blx	r3
  402dc4:	4604      	mov	r4, r0
	if(packet[SLAVE_ID_IDX] != slaveID) return;						//disregard if the packet doesn't apply to this slave
  402dc6:	7802      	ldrb	r2, [r0, #0]
  402dc8:	4b30      	ldr	r3, [pc, #192]	; (402e8c <modbus_update+0xe0>)
  402dca:	781b      	ldrb	r3, [r3, #0]
  402dcc:	429a      	cmp	r2, r3
  402dce:	d1f2      	bne.n	402db6 <modbus_update+0xa>
	uint16_t start_reg = packet[START_REG_H_IDX] << 8 | packet[START_REG_L_IDX];
  402dd0:	7885      	ldrb	r5, [r0, #2]
  402dd2:	78c0      	ldrb	r0, [r0, #3]
  402dd4:	ea40 2605 	orr.w	r6, r0, r5, lsl #8
	uint16_t end_reg = packet[END_REG_H_IDX] << 8 | packet[END_REG_L_IDX];
  402dd8:	7921      	ldrb	r1, [r4, #4]
  402dda:	7962      	ldrb	r2, [r4, #5]
  402ddc:	ea42 2701 	orr.w	r7, r2, r1, lsl #8
	switch(packet[FC_IDX]) {
  402de0:	7863      	ldrb	r3, [r4, #1]
  402de2:	2b03      	cmp	r3, #3
  402de4:	d021      	beq.n	402e2a <modbus_update+0x7e>
  402de6:	2b10      	cmp	r3, #16
  402de8:	d032      	beq.n	402e50 <modbus_update+0xa4>
	uint16_t responceCRC = ModRTU_CRC(responsePacket, responsePacketSize-CRC_SIZE);			//calculate crc
  402dea:	4b29      	ldr	r3, [pc, #164]	; (402e90 <modbus_update+0xe4>)
  402dec:	881d      	ldrh	r5, [r3, #0]
  402dee:	1eae      	subs	r6, r5, #2
  402df0:	4c28      	ldr	r4, [pc, #160]	; (402e94 <modbus_update+0xe8>)
  402df2:	4631      	mov	r1, r6
  402df4:	4620      	mov	r0, r4
  402df6:	4b28      	ldr	r3, [pc, #160]	; (402e98 <modbus_update+0xec>)
  402df8:	4798      	blx	r3
	responsePacket[responsePacketSize-2] = responceCRC & 0xff;								//add CRC
  402dfa:	55a0      	strb	r0, [r4, r6]
	responsePacket[responsePacketSize-1] = (responceCRC>>8) & 0xff;
  402dfc:	442c      	add	r4, r5
  402dfe:	0a00      	lsrs	r0, r0, #8
  402e00:	f804 0c01 	strb.w	r0, [r4, #-1]
	pio_set(globalEnPinPort,globalEnPin);				//transceiver transmit enable
  402e04:	4b25      	ldr	r3, [pc, #148]	; (402e9c <modbus_update+0xf0>)
  402e06:	6819      	ldr	r1, [r3, #0]
  402e08:	4b25      	ldr	r3, [pc, #148]	; (402ea0 <modbus_update+0xf4>)
  402e0a:	6818      	ldr	r0, [r3, #0]
  402e0c:	4c25      	ldr	r4, [pc, #148]	; (402ea4 <modbus_update+0xf8>)
  402e0e:	47a0      	blx	r4
	pio_set(RS485_NRE_PORT,RS485_NRE);
  402e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402e14:	4824      	ldr	r0, [pc, #144]	; (402ea8 <modbus_update+0xfc>)
  402e16:	47a0      	blx	r4
	transmitIndex = 0;
  402e18:	2200      	movs	r2, #0
  402e1a:	4b24      	ldr	r3, [pc, #144]	; (402eac <modbus_update+0x100>)
  402e1c:	801a      	strh	r2, [r3, #0]
	uart_enable_interrupt(RS485Port,UART_IMR_TXRDY);
  402e1e:	2102      	movs	r1, #2
  402e20:	4b23      	ldr	r3, [pc, #140]	; (402eb0 <modbus_update+0x104>)
  402e22:	6818      	ldr	r0, [r3, #0]
  402e24:	4b23      	ldr	r3, [pc, #140]	; (402eb4 <modbus_update+0x108>)
  402e26:	4798      	blx	r3
  402e28:	e7c5      	b.n	402db6 <modbus_update+0xa>
			uint16_t read_num_bytes = getReadResponseDataSize(start_reg, end_reg);
  402e2a:	4639      	mov	r1, r7
  402e2c:	4630      	mov	r0, r6
  402e2e:	4b22      	ldr	r3, [pc, #136]	; (402eb8 <modbus_update+0x10c>)
  402e30:	4798      	blx	r3
			responsePacketSize = RD_RESP_PACKET_MIN_SIZE + read_num_bytes;
  402e32:	1d42      	adds	r2, r0, #5
  402e34:	4b16      	ldr	r3, [pc, #88]	; (402e90 <modbus_update+0xe4>)
  402e36:	801a      	strh	r2, [r3, #0]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;						//this is how the protocol is now to help identify when the master or slave is speaking
  402e38:	4b16      	ldr	r3, [pc, #88]	; (402e94 <modbus_update+0xe8>)
  402e3a:	2200      	movs	r2, #0
  402e3c:	701a      	strb	r2, [r3, #0]
			responsePacket[FC_IDX] = packet[FC_IDX];
  402e3e:	7862      	ldrb	r2, [r4, #1]
  402e40:	705a      	strb	r2, [r3, #1]
			responsePacket[RD_DATA_SIZE_IDX] = read_num_bytes;
  402e42:	7098      	strb	r0, [r3, #2]
			readHandler(responsePacket+RD_DATA_BYTE_START, start_reg, end_reg);
  402e44:	463a      	mov	r2, r7
  402e46:	4631      	mov	r1, r6
  402e48:	1cd8      	adds	r0, r3, #3
  402e4a:	4b1c      	ldr	r3, [pc, #112]	; (402ebc <modbus_update+0x110>)
  402e4c:	4798      	blx	r3
			break;
  402e4e:	e7cc      	b.n	402dea <modbus_update+0x3e>
			responsePacketSize = WR_RESP_PACKET_SIZE;
  402e50:	f04f 0e08 	mov.w	lr, #8
  402e54:	4b0e      	ldr	r3, [pc, #56]	; (402e90 <modbus_update+0xe4>)
  402e56:	f8a3 e000 	strh.w	lr, [r3]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;	
  402e5a:	4b0e      	ldr	r3, [pc, #56]	; (402e94 <modbus_update+0xe8>)
  402e5c:	f04f 0e00 	mov.w	lr, #0
  402e60:	f883 e000 	strb.w	lr, [r3]
			responsePacket[FC_IDX] = packet[FC_IDX];
  402e64:	f894 e001 	ldrb.w	lr, [r4, #1]
  402e68:	f883 e001 	strb.w	lr, [r3, #1]
			responsePacket[START_REG_H_IDX] = packet[START_REG_H_IDX];
  402e6c:	709d      	strb	r5, [r3, #2]
			responsePacket[START_REG_L_IDX] = packet[START_REG_L_IDX];
  402e6e:	70d8      	strb	r0, [r3, #3]
			responsePacket[END_REG_H_IDX] = packet[END_REG_H_IDX];
  402e70:	7119      	strb	r1, [r3, #4]
			responsePacket[END_REG_L_IDX] = packet[END_REG_L_IDX];
  402e72:	715a      	strb	r2, [r3, #5]
			writeHandler(&packet[WR_DATA_BYTE_START], start_reg, end_reg);
  402e74:	463a      	mov	r2, r7
  402e76:	4631      	mov	r1, r6
  402e78:	1de0      	adds	r0, r4, #7
  402e7a:	4b11      	ldr	r3, [pc, #68]	; (402ec0 <modbus_update+0x114>)
  402e7c:	4798      	blx	r3
			break;
  402e7e:	e7b4      	b.n	402dea <modbus_update+0x3e>
  402e80:	00402bed 	.word	0x00402bed
  402e84:	00402c41 	.word	0x00402c41
  402e88:	00402ba9 	.word	0x00402ba9
  402e8c:	2000210c 	.word	0x2000210c
  402e90:	2000210a 	.word	0x2000210a
  402e94:	200016fc 	.word	0x200016fc
  402e98:	00402c05 	.word	0x00402c05
  402e9c:	20001f04 	.word	0x20001f04
  402ea0:	20001efc 	.word	0x20001efc
  402ea4:	00402f79 	.word	0x00402f79
  402ea8:	400e0e00 	.word	0x400e0e00
  402eac:	20001f02 	.word	0x20001f02
  402eb0:	200015f8 	.word	0x200015f8
  402eb4:	0040332b 	.word	0x0040332b
  402eb8:	00402945 	.word	0x00402945
  402ebc:	00402751 	.word	0x00402751
  402ec0:	00402845 	.word	0x00402845

00402ec4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402ec4:	b510      	push	{r4, lr}
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  402ec6:	2020      	movs	r0, #32
  402ec8:	4b0a      	ldr	r3, [pc, #40]	; (402ef4 <sysclk_enable_usb+0x30>)
  402eca:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402ecc:	4c0a      	ldr	r4, [pc, #40]	; (402ef8 <sysclk_enable_usb+0x34>)
  402ece:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402ed0:	2800      	cmp	r0, #0
  402ed2:	d0fc      	beq.n	402ece <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402ed4:	4b09      	ldr	r3, [pc, #36]	; (402efc <sysclk_enable_usb+0x38>)
  402ed6:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402ed8:	4a09      	ldr	r2, [pc, #36]	; (402f00 <sysclk_enable_usb+0x3c>)
  402eda:	4b0a      	ldr	r3, [pc, #40]	; (402f04 <sysclk_enable_usb+0x40>)
  402edc:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  402ede:	4c0a      	ldr	r4, [pc, #40]	; (402f08 <sysclk_enable_usb+0x44>)
  402ee0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402ee2:	2800      	cmp	r0, #0
  402ee4:	d0fc      	beq.n	402ee0 <sysclk_enable_usb+0x1c>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402ee6:	2001      	movs	r0, #1
  402ee8:	4b08      	ldr	r3, [pc, #32]	; (402f0c <sysclk_enable_usb+0x48>)
  402eea:	4798      	blx	r3
		pmc_enable_udpck();
  402eec:	4b08      	ldr	r3, [pc, #32]	; (402f10 <sysclk_enable_usb+0x4c>)
  402eee:	4798      	blx	r3
  402ef0:	bd10      	pop	{r4, pc}
  402ef2:	bf00      	nop
  402ef4:	00403175 	.word	0x00403175
  402ef8:	004031c1 	.word	0x004031c1
  402efc:	004031f1 	.word	0x004031f1
  402f00:	000f3f02 	.word	0x000f3f02
  402f04:	400e0400 	.word	0x400e0400
  402f08:	004031fd 	.word	0x004031fd
  402f0c:	004032b5 	.word	0x004032b5
  402f10:	004032c9 	.word	0x004032c9

00402f14 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402f14:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402f16:	480e      	ldr	r0, [pc, #56]	; (402f50 <sysclk_init+0x3c>)
  402f18:	4b0e      	ldr	r3, [pc, #56]	; (402f54 <sysclk_init+0x40>)
  402f1a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  402f1c:	2020      	movs	r0, #32
  402f1e:	4b0e      	ldr	r3, [pc, #56]	; (402f58 <sysclk_init+0x44>)
  402f20:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  402f22:	4c0e      	ldr	r4, [pc, #56]	; (402f5c <sysclk_init+0x48>)
  402f24:	47a0      	blx	r4
  402f26:	2800      	cmp	r0, #0
  402f28:	d0fc      	beq.n	402f24 <sysclk_init+0x10>
		pmc_disable_pllack(); // Always stop PLL first!
  402f2a:	4b0d      	ldr	r3, [pc, #52]	; (402f60 <sysclk_init+0x4c>)
  402f2c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402f2e:	4a0d      	ldr	r2, [pc, #52]	; (402f64 <sysclk_init+0x50>)
  402f30:	4b0d      	ldr	r3, [pc, #52]	; (402f68 <sysclk_init+0x54>)
  402f32:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  402f34:	4c0d      	ldr	r4, [pc, #52]	; (402f6c <sysclk_init+0x58>)
  402f36:	47a0      	blx	r4
  402f38:	2800      	cmp	r0, #0
  402f3a:	d0fc      	beq.n	402f36 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402f3c:	2010      	movs	r0, #16
  402f3e:	4b0c      	ldr	r3, [pc, #48]	; (402f70 <sysclk_init+0x5c>)
  402f40:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402f42:	4b0c      	ldr	r3, [pc, #48]	; (402f74 <sysclk_init+0x60>)
  402f44:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());									//Might need to add back in
  402f46:	4802      	ldr	r0, [pc, #8]	; (402f50 <sysclk_init+0x3c>)
  402f48:	4b02      	ldr	r3, [pc, #8]	; (402f54 <sysclk_init+0x40>)
  402f4a:	4798      	blx	r3
  402f4c:	bd10      	pop	{r4, pc}
  402f4e:	bf00      	nop
  402f50:	07270e00 	.word	0x07270e00
  402f54:	00403691 	.word	0x00403691
  402f58:	00403175 	.word	0x00403175
  402f5c:	004031c1 	.word	0x004031c1
  402f60:	004031d1 	.word	0x004031d1
  402f64:	20133f01 	.word	0x20133f01
  402f68:	400e0400 	.word	0x400e0400
  402f6c:	004031e1 	.word	0x004031e1
  402f70:	00403111 	.word	0x00403111
  402f74:	0040357d 	.word	0x0040357d

00402f78 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402f78:	6301      	str	r1, [r0, #48]	; 0x30
  402f7a:	4770      	bx	lr

00402f7c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402f7c:	6341      	str	r1, [r0, #52]	; 0x34
  402f7e:	4770      	bx	lr

00402f80 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  402f80:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  402f84:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
  402f88:	bf0c      	ite	eq
  402f8a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
  402f8c:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
  402f8e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  402f90:	bf14      	ite	ne
  402f92:	2001      	movne	r0, #1
  402f94:	2000      	moveq	r0, #0
  402f96:	4770      	bx	lr

00402f98 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402f98:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402f9a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402f9e:	d039      	beq.n	403014 <pio_set_peripheral+0x7c>
  402fa0:	d813      	bhi.n	402fca <pio_set_peripheral+0x32>
  402fa2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402fa6:	d025      	beq.n	402ff4 <pio_set_peripheral+0x5c>
  402fa8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402fac:	d10a      	bne.n	402fc4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402fae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402fb0:	4313      	orrs	r3, r2
  402fb2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402fb4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402fb6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402fb8:	400b      	ands	r3, r1
  402fba:	ea23 0302 	bic.w	r3, r3, r2
  402fbe:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402fc0:	6042      	str	r2, [r0, #4]
  402fc2:	4770      	bx	lr
	switch (ul_type) {
  402fc4:	2900      	cmp	r1, #0
  402fc6:	d1fb      	bne.n	402fc0 <pio_set_peripheral+0x28>
  402fc8:	4770      	bx	lr
  402fca:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402fce:	d020      	beq.n	403012 <pio_set_peripheral+0x7a>
  402fd0:	d809      	bhi.n	402fe6 <pio_set_peripheral+0x4e>
  402fd2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402fd6:	d1f3      	bne.n	402fc0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402fd8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402fda:	4313      	orrs	r3, r2
  402fdc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402fde:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402fe0:	4313      	orrs	r3, r2
  402fe2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402fe4:	e7ec      	b.n	402fc0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  402fe6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402fea:	d012      	beq.n	403012 <pio_set_peripheral+0x7a>
  402fec:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402ff0:	d00f      	beq.n	403012 <pio_set_peripheral+0x7a>
  402ff2:	e7e5      	b.n	402fc0 <pio_set_peripheral+0x28>
{
  402ff4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402ff6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402ff8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402ffa:	43d3      	mvns	r3, r2
  402ffc:	4021      	ands	r1, r4
  402ffe:	461c      	mov	r4, r3
  403000:	4019      	ands	r1, r3
  403002:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403004:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  403006:	6f41      	ldr	r1, [r0, #116]	; 0x74
  403008:	400b      	ands	r3, r1
  40300a:	4023      	ands	r3, r4
  40300c:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40300e:	6042      	str	r2, [r0, #4]
}
  403010:	bc10      	pop	{r4}
  403012:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  403014:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403016:	6f01      	ldr	r1, [r0, #112]	; 0x70
  403018:	400b      	ands	r3, r1
  40301a:	ea23 0302 	bic.w	r3, r3, r2
  40301e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  403020:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  403022:	4313      	orrs	r3, r2
  403024:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403026:	e7cb      	b.n	402fc0 <pio_set_peripheral+0x28>

00403028 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403028:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40302a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40302e:	bf14      	ite	ne
  403030:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  403032:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403034:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  403038:	bf14      	ite	ne
  40303a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  40303c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40303e:	f012 0f02 	tst.w	r2, #2
  403042:	d107      	bne.n	403054 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  403044:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  403048:	bf18      	it	ne
  40304a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40304e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  403050:	6001      	str	r1, [r0, #0]
  403052:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  403054:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  403058:	e7f9      	b.n	40304e <pio_set_input+0x26>

0040305a <pio_set_output>:
{
  40305a:	b410      	push	{r4}
  40305c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40305e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  403060:	b944      	cbnz	r4, 403074 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  403062:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  403064:	b143      	cbz	r3, 403078 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  403066:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  403068:	b942      	cbnz	r2, 40307c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40306a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40306c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40306e:	6001      	str	r1, [r0, #0]
}
  403070:	bc10      	pop	{r4}
  403072:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  403074:	6641      	str	r1, [r0, #100]	; 0x64
  403076:	e7f5      	b.n	403064 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  403078:	6541      	str	r1, [r0, #84]	; 0x54
  40307a:	e7f5      	b.n	403068 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40307c:	6301      	str	r1, [r0, #48]	; 0x30
  40307e:	e7f5      	b.n	40306c <pio_set_output+0x12>

00403080 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  403080:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  403082:	4770      	bx	lr

00403084 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403084:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403086:	4770      	bx	lr

00403088 <pio_toggle_pin_group>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_toggle_pin_group(Pio *p_pio, uint32_t ul_mask)
{
	if (p_pio->PIO_ODSR & ul_mask) {
  403088:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40308a:	420b      	tst	r3, r1
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = ul_mask;
  40308c:	bf14      	ite	ne
  40308e:	6341      	strne	r1, [r0, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = ul_mask;
  403090:	6301      	streq	r1, [r0, #48]	; 0x30
  403092:	4770      	bx	lr

00403094 <pio_enable_pin_interrupt>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  403094:	0943      	lsrs	r3, r0, #5
  403096:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40309a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40309e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_IER = 1 << (ul_pin & 0x1F);
  4030a0:	f000 001f 	and.w	r0, r0, #31
  4030a4:	2201      	movs	r2, #1
  4030a6:	fa02 f000 	lsl.w	r0, r2, r0
  4030aa:	6418      	str	r0, [r3, #64]	; 0x40
  4030ac:	4770      	bx	lr
	...

004030b0 <pmc_switch_mck_to_sclk>:
 */
uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4030b0:	4b16      	ldr	r3, [pc, #88]	; (40310c <pmc_switch_mck_to_sclk+0x5c>)
  4030b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030b4:	f022 0203 	bic.w	r2, r2, #3
  4030b8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4030ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4030bc:	f013 0f08 	tst.w	r3, #8
  4030c0:	d10a      	bne.n	4030d8 <pmc_switch_mck_to_sclk+0x28>
  4030c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4030c6:	4911      	ldr	r1, [pc, #68]	; (40310c <pmc_switch_mck_to_sclk+0x5c>)
  4030c8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4030ca:	f012 0f08 	tst.w	r2, #8
  4030ce:	d103      	bne.n	4030d8 <pmc_switch_mck_to_sclk+0x28>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4030d0:	3b01      	subs	r3, #1
  4030d2:	d1f9      	bne.n	4030c8 <pmc_switch_mck_to_sclk+0x18>
			return 1;
  4030d4:	2001      	movs	r0, #1
  4030d6:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4030d8:	4a0c      	ldr	r2, [pc, #48]	; (40310c <pmc_switch_mck_to_sclk+0x5c>)
  4030da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4030e0:	4318      	orrs	r0, r3
  4030e2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4030e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4030e6:	f013 0f08 	tst.w	r3, #8
  4030ea:	d10a      	bne.n	403102 <pmc_switch_mck_to_sclk+0x52>
  4030ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4030f0:	4906      	ldr	r1, [pc, #24]	; (40310c <pmc_switch_mck_to_sclk+0x5c>)
  4030f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4030f4:	f012 0f08 	tst.w	r2, #8
  4030f8:	d105      	bne.n	403106 <pmc_switch_mck_to_sclk+0x56>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4030fa:	3b01      	subs	r3, #1
  4030fc:	d1f9      	bne.n	4030f2 <pmc_switch_mck_to_sclk+0x42>
			return 1;
  4030fe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403100:	4770      	bx	lr
	return 0;
  403102:	2000      	movs	r0, #0
  403104:	4770      	bx	lr
  403106:	2000      	movs	r0, #0
  403108:	4770      	bx	lr
  40310a:	bf00      	nop
  40310c:	400e0400 	.word	0x400e0400

00403110 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403110:	4a17      	ldr	r2, [pc, #92]	; (403170 <pmc_switch_mck_to_pllack+0x60>)
  403112:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403118:	4318      	orrs	r0, r3
  40311a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40311c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40311e:	f013 0f08 	tst.w	r3, #8
  403122:	d10a      	bne.n	40313a <pmc_switch_mck_to_pllack+0x2a>
  403124:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403128:	4911      	ldr	r1, [pc, #68]	; (403170 <pmc_switch_mck_to_pllack+0x60>)
  40312a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40312c:	f012 0f08 	tst.w	r2, #8
  403130:	d103      	bne.n	40313a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403132:	3b01      	subs	r3, #1
  403134:	d1f9      	bne.n	40312a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  403136:	2001      	movs	r0, #1
  403138:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40313a:	4a0d      	ldr	r2, [pc, #52]	; (403170 <pmc_switch_mck_to_pllack+0x60>)
  40313c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40313e:	f023 0303 	bic.w	r3, r3, #3
  403142:	f043 0302 	orr.w	r3, r3, #2
  403146:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403148:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40314a:	f013 0f08 	tst.w	r3, #8
  40314e:	d10a      	bne.n	403166 <pmc_switch_mck_to_pllack+0x56>
  403150:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403154:	4906      	ldr	r1, [pc, #24]	; (403170 <pmc_switch_mck_to_pllack+0x60>)
  403156:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403158:	f012 0f08 	tst.w	r2, #8
  40315c:	d105      	bne.n	40316a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40315e:	3b01      	subs	r3, #1
  403160:	d1f9      	bne.n	403156 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  403162:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403164:	4770      	bx	lr
	return 0;
  403166:	2000      	movs	r0, #0
  403168:	4770      	bx	lr
  40316a:	2000      	movs	r0, #0
  40316c:	4770      	bx	lr
  40316e:	bf00      	nop
  403170:	400e0400 	.word	0x400e0400

00403174 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  403174:	4911      	ldr	r1, [pc, #68]	; (4031bc <pmc_switch_mainck_to_fastrc+0x48>)
  403176:	6a0a      	ldr	r2, [r1, #32]
  403178:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  40317c:	f042 0208 	orr.w	r2, r2, #8
  403180:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403182:	460a      	mov	r2, r1
  403184:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403186:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40318a:	d0fb      	beq.n	403184 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40318c:	4a0b      	ldr	r2, [pc, #44]	; (4031bc <pmc_switch_mainck_to_fastrc+0x48>)
  40318e:	6a13      	ldr	r3, [r2, #32]
  403190:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  403194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  403198:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40319c:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40319e:	6210      	str	r0, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4031a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4031a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4031a6:	d0fb      	beq.n	4031a0 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4031a8:	4a04      	ldr	r2, [pc, #16]	; (4031bc <pmc_switch_mainck_to_fastrc+0x48>)
  4031aa:	6a13      	ldr	r3, [r2, #32]
  4031ac:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4031b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4031b8:	6213      	str	r3, [r2, #32]
  4031ba:	4770      	bx	lr
  4031bc:	400e0400 	.word	0x400e0400

004031c0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4031c0:	4b02      	ldr	r3, [pc, #8]	; (4031cc <pmc_osc_is_ready_mainck+0xc>)
  4031c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4031c4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4031c8:	4770      	bx	lr
  4031ca:	bf00      	nop
  4031cc:	400e0400 	.word	0x400e0400

004031d0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4031d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4031d4:	4b01      	ldr	r3, [pc, #4]	; (4031dc <pmc_disable_pllack+0xc>)
  4031d6:	629a      	str	r2, [r3, #40]	; 0x28
  4031d8:	4770      	bx	lr
  4031da:	bf00      	nop
  4031dc:	400e0400 	.word	0x400e0400

004031e0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4031e0:	4b02      	ldr	r3, [pc, #8]	; (4031ec <pmc_is_locked_pllack+0xc>)
  4031e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4031e4:	f000 0002 	and.w	r0, r0, #2
  4031e8:	4770      	bx	lr
  4031ea:	bf00      	nop
  4031ec:	400e0400 	.word	0x400e0400

004031f0 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4031f0:	2200      	movs	r2, #0
  4031f2:	4b01      	ldr	r3, [pc, #4]	; (4031f8 <pmc_disable_pllbck+0x8>)
  4031f4:	62da      	str	r2, [r3, #44]	; 0x2c
  4031f6:	4770      	bx	lr
  4031f8:	400e0400 	.word	0x400e0400

004031fc <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4031fc:	4b02      	ldr	r3, [pc, #8]	; (403208 <pmc_is_locked_pllbck+0xc>)
  4031fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403200:	f000 0004 	and.w	r0, r0, #4
  403204:	4770      	bx	lr
  403206:	bf00      	nop
  403208:	400e0400 	.word	0x400e0400

0040320c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  40320c:	2822      	cmp	r0, #34	; 0x22
  40320e:	d81e      	bhi.n	40324e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403210:	281f      	cmp	r0, #31
  403212:	d80c      	bhi.n	40322e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403214:	4b11      	ldr	r3, [pc, #68]	; (40325c <pmc_enable_periph_clk+0x50>)
  403216:	699a      	ldr	r2, [r3, #24]
  403218:	2301      	movs	r3, #1
  40321a:	4083      	lsls	r3, r0
  40321c:	4393      	bics	r3, r2
  40321e:	d018      	beq.n	403252 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403220:	2301      	movs	r3, #1
  403222:	fa03 f000 	lsl.w	r0, r3, r0
  403226:	4b0d      	ldr	r3, [pc, #52]	; (40325c <pmc_enable_periph_clk+0x50>)
  403228:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40322a:	2000      	movs	r0, #0
  40322c:	4770      	bx	lr
		ul_id -= 32;
  40322e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403230:	4b0a      	ldr	r3, [pc, #40]	; (40325c <pmc_enable_periph_clk+0x50>)
  403232:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  403236:	2301      	movs	r3, #1
  403238:	4083      	lsls	r3, r0
  40323a:	4393      	bics	r3, r2
  40323c:	d00b      	beq.n	403256 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40323e:	2301      	movs	r3, #1
  403240:	fa03 f000 	lsl.w	r0, r3, r0
  403244:	4b05      	ldr	r3, [pc, #20]	; (40325c <pmc_enable_periph_clk+0x50>)
  403246:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40324a:	2000      	movs	r0, #0
  40324c:	4770      	bx	lr
		return 1;
  40324e:	2001      	movs	r0, #1
  403250:	4770      	bx	lr
	return 0;
  403252:	2000      	movs	r0, #0
  403254:	4770      	bx	lr
  403256:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403258:	4770      	bx	lr
  40325a:	bf00      	nop
  40325c:	400e0400 	.word	0x400e0400

00403260 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  403260:	2822      	cmp	r0, #34	; 0x22
  403262:	d822      	bhi.n	4032aa <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  403264:	281f      	cmp	r0, #31
  403266:	d80e      	bhi.n	403286 <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  403268:	4b11      	ldr	r3, [pc, #68]	; (4032b0 <pmc_disable_periph_clk+0x50>)
  40326a:	699a      	ldr	r2, [r3, #24]
  40326c:	2301      	movs	r3, #1
  40326e:	4083      	lsls	r3, r0
  403270:	4393      	bics	r3, r2
  403272:	d001      	beq.n	403278 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  403274:	2000      	movs	r0, #0
  403276:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  403278:	2301      	movs	r3, #1
  40327a:	fa03 f000 	lsl.w	r0, r3, r0
  40327e:	4b0c      	ldr	r3, [pc, #48]	; (4032b0 <pmc_disable_periph_clk+0x50>)
  403280:	6158      	str	r0, [r3, #20]
	return 0;
  403282:	2000      	movs	r0, #0
  403284:	4770      	bx	lr
		ul_id -= 32;
  403286:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  403288:	4b09      	ldr	r3, [pc, #36]	; (4032b0 <pmc_disable_periph_clk+0x50>)
  40328a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40328e:	2301      	movs	r3, #1
  403290:	4083      	lsls	r3, r0
  403292:	4393      	bics	r3, r2
  403294:	d001      	beq.n	40329a <pmc_disable_periph_clk+0x3a>
	return 0;
  403296:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403298:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  40329a:	2301      	movs	r3, #1
  40329c:	fa03 f000 	lsl.w	r0, r3, r0
  4032a0:	4b03      	ldr	r3, [pc, #12]	; (4032b0 <pmc_disable_periph_clk+0x50>)
  4032a2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  4032a6:	2000      	movs	r0, #0
  4032a8:	4770      	bx	lr
		return 1;
  4032aa:	2001      	movs	r0, #1
  4032ac:	4770      	bx	lr
  4032ae:	bf00      	nop
  4032b0:	400e0400 	.word	0x400e0400

004032b4 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4032b4:	0200      	lsls	r0, r0, #8
  4032b6:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  4032ba:	f040 0001 	orr.w	r0, r0, #1
  4032be:	4b01      	ldr	r3, [pc, #4]	; (4032c4 <pmc_switch_udpck_to_pllbck+0x10>)
  4032c0:	6398      	str	r0, [r3, #56]	; 0x38
  4032c2:	4770      	bx	lr
  4032c4:	400e0400 	.word	0x400e0400

004032c8 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4032c8:	2280      	movs	r2, #128	; 0x80
  4032ca:	4b01      	ldr	r3, [pc, #4]	; (4032d0 <pmc_enable_udpck+0x8>)
  4032cc:	601a      	str	r2, [r3, #0]
  4032ce:	4770      	bx	lr
  4032d0:	400e0400 	.word	0x400e0400

004032d4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4032d4:	4b03      	ldr	r3, [pc, #12]	; (4032e4 <pmc_set_fast_startup_input+0x10>)
  4032d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4032d8:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4032dc:	4310      	orrs	r0, r2
  4032de:	6718      	str	r0, [r3, #112]	; 0x70
  4032e0:	4770      	bx	lr
  4032e2:	bf00      	nop
  4032e4:	400e0400 	.word	0x400e0400

004032e8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4032e8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4032ea:	23ac      	movs	r3, #172	; 0xac
  4032ec:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4032ee:	680b      	ldr	r3, [r1, #0]
  4032f0:	684a      	ldr	r2, [r1, #4]
  4032f2:	fbb3 f3f2 	udiv	r3, r3, r2
  4032f6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4032f8:	1e5c      	subs	r4, r3, #1
  4032fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4032fe:	4294      	cmp	r4, r2
  403300:	d80b      	bhi.n	40331a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  403302:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  403304:	688b      	ldr	r3, [r1, #8]
  403306:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  403308:	f240 2302 	movw	r3, #514	; 0x202
  40330c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  403310:	2350      	movs	r3, #80	; 0x50
  403312:	6003      	str	r3, [r0, #0]

	return 0;
  403314:	2000      	movs	r0, #0
}
  403316:	bc10      	pop	{r4}
  403318:	4770      	bx	lr
		return 1;
  40331a:	2001      	movs	r0, #1
  40331c:	e7fb      	b.n	403316 <uart_init+0x2e>

0040331e <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  40331e:	2340      	movs	r3, #64	; 0x40
  403320:	6003      	str	r3, [r0, #0]
  403322:	4770      	bx	lr

00403324 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  403324:	2310      	movs	r3, #16
  403326:	6003      	str	r3, [r0, #0]
  403328:	4770      	bx	lr

0040332a <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  40332a:	6081      	str	r1, [r0, #8]
  40332c:	4770      	bx	lr

0040332e <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  40332e:	60c1      	str	r1, [r0, #12]
  403330:	4770      	bx	lr

00403332 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  403332:	6940      	ldr	r0, [r0, #20]
}
  403334:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403338:	4770      	bx	lr

0040333a <uart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  40333a:	6940      	ldr	r0, [r0, #20]
}
  40333c:	f3c0 2040 	ubfx	r0, r0, #9, #1
  403340:	4770      	bx	lr

00403342 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  403342:	6940      	ldr	r0, [r0, #20]
}
  403344:	f000 0001 	and.w	r0, r0, #1
  403348:	4770      	bx	lr

0040334a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40334a:	6943      	ldr	r3, [r0, #20]
  40334c:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  403350:	bf1a      	itte	ne
  403352:	61c1      	strne	r1, [r0, #28]
	return 0;
  403354:	2000      	movne	r0, #0
		return 1;
  403356:	2001      	moveq	r0, #1
}
  403358:	4770      	bx	lr

0040335a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40335a:	6943      	ldr	r3, [r0, #20]
  40335c:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  403360:	bf1d      	ittte	ne
  403362:	6983      	ldrne	r3, [r0, #24]
  403364:	700b      	strbne	r3, [r1, #0]
	return 0;
  403366:	2000      	movne	r0, #0
		return 1;
  403368:	2001      	moveq	r0, #1
}
  40336a:	4770      	bx	lr

0040336c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  40336c:	4b02      	ldr	r3, [pc, #8]	; (403378 <pmc_is_wakeup_clocks_restored+0xc>)
  40336e:	7818      	ldrb	r0, [r3, #0]
}
  403370:	f080 0001 	eor.w	r0, r0, #1
  403374:	4770      	bx	lr
  403376:	bf00      	nop
  403378:	20001490 	.word	0x20001490

0040337c <board_init>:
#include <conf_board.h>
#include <modbus.h>
#include <registers.h>

void board_init(void)
{
  40337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403380:	b082      	sub	sp, #8
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	WDT->WDT_MR |= WDT_MR_WDDIS; // Disable watchdog timer to prevent uC resetting every 15 seconds :)
  403382:	4a47      	ldr	r2, [pc, #284]	; (4034a0 <board_init+0x124>)
  403384:	6853      	ldr	r3, [r2, #4]
  403386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40338a:	6053      	str	r3, [r2, #4]
	
	//Enable USB Comm port so we can send debug data over serial to a computer (could be useful)
	//Configuration for this is in conf_usb.h
	
	udc_start();
  40338c:	4b45      	ldr	r3, [pc, #276]	; (4034a4 <board_init+0x128>)
  40338e:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
  403390:	200b      	movs	r0, #11
  403392:	4c45      	ldr	r4, [pc, #276]	; (4034a8 <board_init+0x12c>)
  403394:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  403396:	200c      	movs	r0, #12
  403398:	47a0      	blx	r4
	
	pio_set_output(RS485_NRE_PORT,RS485_NRE,LOW,DISABLE,DISABLE);			//init modbus receive enable pin		//only necessary for low power mode builds
  40339a:	4d44      	ldr	r5, [pc, #272]	; (4034ac <board_init+0x130>)
  40339c:	2400      	movs	r4, #0
  40339e:	9400      	str	r4, [sp, #0]
  4033a0:	4623      	mov	r3, r4
  4033a2:	4622      	mov	r2, r4
  4033a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4033a8:	4628      	mov	r0, r5
  4033aa:	4e41      	ldr	r6, [pc, #260]	; (4034b0 <board_init+0x134>)
  4033ac:	47b0      	blx	r6
	modbus_init(UART1,500000,RS485_DE_PORT,RS485_DE,SLAVEID);					//init modbus      //note this version of modbus has been modified to support sleep mode
  4033ae:	2701      	movs	r7, #1
  4033b0:	9700      	str	r7, [sp, #0]
  4033b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4033b6:	462a      	mov	r2, r5
  4033b8:	493e      	ldr	r1, [pc, #248]	; (4034b4 <board_init+0x138>)
  4033ba:	483f      	ldr	r0, [pc, #252]	; (4034b8 <board_init+0x13c>)
  4033bc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 4034c8 <board_init+0x14c>
  4033c0:	47c0      	blx	r8
  4033c2:	f44f 6800 	mov.w	r8, #2048	; 0x800
  4033c6:	4b3d      	ldr	r3, [pc, #244]	; (4034bc <board_init+0x140>)
  4033c8:	f8c3 8000 	str.w	r8, [r3]
	
	NVIC_EnableIRQ(PIOA_IRQn);
	pio_set_output(TEMP_SEL0_PORT,TEMP_SEL0,LOW,DISABLE,DISABLE);
  4033cc:	9400      	str	r4, [sp, #0]
  4033ce:	4623      	mov	r3, r4
  4033d0:	4622      	mov	r2, r4
  4033d2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4033d6:	4628      	mov	r0, r5
  4033d8:	47b0      	blx	r6
	pio_set_output(TEMP_SEL1_PORT,TEMP_SEL1,LOW,DISABLE,DISABLE);
  4033da:	9400      	str	r4, [sp, #0]
  4033dc:	4623      	mov	r3, r4
  4033de:	4622      	mov	r2, r4
  4033e0:	f44f 7100 	mov.w	r1, #512	; 0x200
  4033e4:	4628      	mov	r0, r5
  4033e6:	47b0      	blx	r6
	pio_set_output(TEMP_SEL2_PORT,TEMP_SEL2,LOW,DISABLE,DISABLE);
  4033e8:	9400      	str	r4, [sp, #0]
  4033ea:	4623      	mov	r3, r4
  4033ec:	4622      	mov	r2, r4
  4033ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4033f2:	4628      	mov	r0, r5
  4033f4:	47b0      	blx	r6
	
	pio_set_output(CELL_SEL0_PORT,CELL_SEL0,LOW,DISABLE,DISABLE);
  4033f6:	9400      	str	r4, [sp, #0]
  4033f8:	4623      	mov	r3, r4
  4033fa:	4622      	mov	r2, r4
  4033fc:	2110      	movs	r1, #16
  4033fe:	4628      	mov	r0, r5
  403400:	47b0      	blx	r6
	pio_set_output(CELL_SEL1_PORT,CELL_SEL1,LOW,DISABLE,DISABLE);
  403402:	9400      	str	r4, [sp, #0]
  403404:	4623      	mov	r3, r4
  403406:	4622      	mov	r2, r4
  403408:	2120      	movs	r1, #32
  40340a:	4628      	mov	r0, r5
  40340c:	47b0      	blx	r6
	pio_set_output(CELL_SEL2_PORT,CELL_SEL2,LOW,DISABLE,DISABLE);
  40340e:	9400      	str	r4, [sp, #0]
  403410:	4623      	mov	r3, r4
  403412:	4622      	mov	r2, r4
  403414:	2140      	movs	r1, #64	; 0x40
  403416:	4628      	mov	r0, r5
  403418:	47b0      	blx	r6
	
	pio_set_output(AFE_EN_PORT,AFE_EN,HIGH,DISABLE,DISABLE);
  40341a:	9400      	str	r4, [sp, #0]
  40341c:	4623      	mov	r3, r4
  40341e:	463a      	mov	r2, r7
  403420:	2180      	movs	r1, #128	; 0x80
  403422:	4628      	mov	r0, r5
  403424:	47b0      	blx	r6
	
	pio_set_output(NBAT_EN_PORT,NBAT_EN,LOW,DISABLE,DISABLE);
  403426:	9400      	str	r4, [sp, #0]
  403428:	4623      	mov	r3, r4
  40342a:	4622      	mov	r2, r4
  40342c:	4641      	mov	r1, r8
  40342e:	4628      	mov	r0, r5
  403430:	47b0      	blx	r6
	
	pio_set_output(BOARD_LED_PORT,BOARD_LED,HIGH,DISABLE,DISABLE);
  403432:	9400      	str	r4, [sp, #0]
  403434:	4623      	mov	r3, r4
  403436:	463a      	mov	r2, r7
  403438:	2108      	movs	r1, #8
  40343a:	4628      	mov	r0, r5
  40343c:	47b0      	blx	r6
	
	pio_set_input(PWR_SW_PORT,PWR_SW,PIO_DEBOUNCE);
  40343e:	2208      	movs	r2, #8
  403440:	4639      	mov	r1, r7
  403442:	4628      	mov	r0, r5
  403444:	4e1e      	ldr	r6, [pc, #120]	; (4034c0 <board_init+0x144>)
  403446:	47b0      	blx	r6
	
	pio_set_input(USB_SNS_PORT,USB_SNS,PIO_DEBOUNCE);
  403448:	2208      	movs	r2, #8
  40344a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40344e:	4628      	mov	r0, r5
  403450:	47b0      	blx	r6
	
	pio_set_input(CELLV_SNS_PORT,CELLV_SNS,NULL);
  403452:	4622      	mov	r2, r4
  403454:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  403458:	4628      	mov	r0, r5
  40345a:	47b0      	blx	r6
	
	pio_set_input(CURRENT_SNS_PORT,CURRENT_SNS,NULL);
  40345c:	4622      	mov	r2, r4
  40345e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  403462:	4628      	mov	r0, r5
  403464:	47b0      	blx	r6
	
	pio_set_input(STACK_SNS_PORT,STACK_SNS,NULL);
  403466:	4622      	mov	r2, r4
  403468:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40346c:	4628      	mov	r0, r5
  40346e:	47b0      	blx	r6
	
	pio_set_input(EXT_TEMP_SNS_PORT,EXT_TEMP_SNS,NULL);
  403470:	4622      	mov	r2, r4
  403472:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  403476:	4628      	mov	r0, r5
  403478:	47b0      	blx	r6
	
	pio_set_input(FETTEMP_SNS_PORT,FETTEMP_SNS,NULL);
  40347a:	f505 7500 	add.w	r5, r5, #512	; 0x200
  40347e:	4622      	mov	r2, r4
  403480:	4639      	mov	r1, r7
  403482:	4628      	mov	r0, r5
  403484:	47b0      	blx	r6
	
	pio_set_input(SHUNTTEMP_SNS_PORT,SHUNTTEMP_SNS,NULL);
  403486:	4622      	mov	r2, r4
  403488:	2102      	movs	r1, #2
  40348a:	4628      	mov	r0, r5
  40348c:	47b0      	blx	r6
	
	pio_enable_pin_interrupt(0);
  40348e:	4620      	mov	r0, r4
  403490:	4c0c      	ldr	r4, [pc, #48]	; (4034c4 <board_init+0x148>)
  403492:	47a0      	blx	r4
	pio_enable_pin_interrupt(14);
  403494:	200e      	movs	r0, #14
  403496:	47a0      	blx	r4
	
	
	
  403498:	b002      	add	sp, #8
  40349a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40349e:	bf00      	nop
  4034a0:	400e1450 	.word	0x400e1450
  4034a4:	004009a5 	.word	0x004009a5
  4034a8:	0040320d 	.word	0x0040320d
  4034ac:	400e0e00 	.word	0x400e0e00
  4034b0:	0040305b 	.word	0x0040305b
  4034b4:	0007a120 	.word	0x0007a120
  4034b8:	400e0800 	.word	0x400e0800
  4034bc:	e000e100 	.word	0xe000e100
  4034c0:	00403029 	.word	0x00403029
  4034c4:	00403095 	.word	0x00403095
  4034c8:	004029c9 	.word	0x004029c9

004034cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4034cc:	e7fe      	b.n	4034cc <Dummy_Handler>
	...

004034d0 <Reset_Handler>:
{
  4034d0:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4034d2:	4b21      	ldr	r3, [pc, #132]	; (403558 <Reset_Handler+0x88>)
  4034d4:	4a21      	ldr	r2, [pc, #132]	; (40355c <Reset_Handler+0x8c>)
  4034d6:	429a      	cmp	r2, r3
  4034d8:	d928      	bls.n	40352c <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4034da:	4b21      	ldr	r3, [pc, #132]	; (403560 <Reset_Handler+0x90>)
  4034dc:	4a1e      	ldr	r2, [pc, #120]	; (403558 <Reset_Handler+0x88>)
  4034de:	429a      	cmp	r2, r3
  4034e0:	d20c      	bcs.n	4034fc <Reset_Handler+0x2c>
  4034e2:	3b01      	subs	r3, #1
  4034e4:	1a9b      	subs	r3, r3, r2
  4034e6:	f023 0303 	bic.w	r3, r3, #3
  4034ea:	3304      	adds	r3, #4
  4034ec:	4413      	add	r3, r2
  4034ee:	491b      	ldr	r1, [pc, #108]	; (40355c <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4034f0:	f851 0b04 	ldr.w	r0, [r1], #4
  4034f4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4034f8:	429a      	cmp	r2, r3
  4034fa:	d1f9      	bne.n	4034f0 <Reset_Handler+0x20>
	__NOP();
  4034fc:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  4034fe:	4b19      	ldr	r3, [pc, #100]	; (403564 <Reset_Handler+0x94>)
  403500:	4a19      	ldr	r2, [pc, #100]	; (403568 <Reset_Handler+0x98>)
  403502:	429a      	cmp	r2, r3
  403504:	d20a      	bcs.n	40351c <Reset_Handler+0x4c>
  403506:	3b01      	subs	r3, #1
  403508:	1a9b      	subs	r3, r3, r2
  40350a:	f023 0303 	bic.w	r3, r3, #3
  40350e:	3304      	adds	r3, #4
  403510:	4413      	add	r3, r2
		*pDest++ = 0;
  403512:	2100      	movs	r1, #0
  403514:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  403518:	429a      	cmp	r2, r3
  40351a:	d1fb      	bne.n	403514 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  40351c:	4b13      	ldr	r3, [pc, #76]	; (40356c <Reset_Handler+0x9c>)
  40351e:	4a14      	ldr	r2, [pc, #80]	; (403570 <Reset_Handler+0xa0>)
  403520:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  403522:	4b14      	ldr	r3, [pc, #80]	; (403574 <Reset_Handler+0xa4>)
  403524:	4798      	blx	r3
	main();
  403526:	4b14      	ldr	r3, [pc, #80]	; (403578 <Reset_Handler+0xa8>)
  403528:	4798      	blx	r3
  40352a:	e7fe      	b.n	40352a <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  40352c:	4b0a      	ldr	r3, [pc, #40]	; (403558 <Reset_Handler+0x88>)
  40352e:	4a0b      	ldr	r2, [pc, #44]	; (40355c <Reset_Handler+0x8c>)
  403530:	429a      	cmp	r2, r3
  403532:	d2e3      	bcs.n	4034fc <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403534:	4b0a      	ldr	r3, [pc, #40]	; (403560 <Reset_Handler+0x90>)
  403536:	4808      	ldr	r0, [pc, #32]	; (403558 <Reset_Handler+0x88>)
  403538:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40353a:	4611      	mov	r1, r2
  40353c:	3a04      	subs	r2, #4
  40353e:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  403540:	2800      	cmp	r0, #0
  403542:	d0db      	beq.n	4034fc <Reset_Handler+0x2c>
  403544:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  403548:	f852 0904 	ldr.w	r0, [r2], #-4
  40354c:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  403550:	42ca      	cmn	r2, r1
  403552:	d1f9      	bne.n	403548 <Reset_Handler+0x78>
  403554:	e7d2      	b.n	4034fc <Reset_Handler+0x2c>
  403556:	bf00      	nop
  403558:	20000000 	.word	0x20000000
  40355c:	00409df4 	.word	0x00409df4
  403560:	20000a58 	.word	0x20000a58
  403564:	200041d4 	.word	0x200041d4
  403568:	20000a58 	.word	0x20000a58
  40356c:	e000ed00 	.word	0xe000ed00
  403570:	00400000 	.word	0x00400000
  403574:	004057ed 	.word	0x004057ed
  403578:	00404399 	.word	0x00404399

0040357c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40357c:	4b3c      	ldr	r3, [pc, #240]	; (403670 <SystemCoreClockUpdate+0xf4>)
  40357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403580:	f003 0303 	and.w	r3, r3, #3
  403584:	2b03      	cmp	r3, #3
  403586:	d80e      	bhi.n	4035a6 <SystemCoreClockUpdate+0x2a>
  403588:	e8df f003 	tbb	[pc, r3]
  40358c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403590:	4b38      	ldr	r3, [pc, #224]	; (403674 <SystemCoreClockUpdate+0xf8>)
  403592:	695b      	ldr	r3, [r3, #20]
  403594:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403598:	bf14      	ite	ne
  40359a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40359e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4035a2:	4b35      	ldr	r3, [pc, #212]	; (403678 <SystemCoreClockUpdate+0xfc>)
  4035a4:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4035a6:	4b32      	ldr	r3, [pc, #200]	; (403670 <SystemCoreClockUpdate+0xf4>)
  4035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4035aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035ae:	2b70      	cmp	r3, #112	; 0x70
  4035b0:	d055      	beq.n	40365e <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4035b2:	4b2f      	ldr	r3, [pc, #188]	; (403670 <SystemCoreClockUpdate+0xf4>)
  4035b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  4035b6:	4930      	ldr	r1, [pc, #192]	; (403678 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4035b8:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  4035bc:	680b      	ldr	r3, [r1, #0]
  4035be:	40d3      	lsrs	r3, r2
  4035c0:	600b      	str	r3, [r1, #0]
  4035c2:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4035c4:	4b2a      	ldr	r3, [pc, #168]	; (403670 <SystemCoreClockUpdate+0xf4>)
  4035c6:	6a1b      	ldr	r3, [r3, #32]
  4035c8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4035cc:	d003      	beq.n	4035d6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4035ce:	4a2b      	ldr	r2, [pc, #172]	; (40367c <SystemCoreClockUpdate+0x100>)
  4035d0:	4b29      	ldr	r3, [pc, #164]	; (403678 <SystemCoreClockUpdate+0xfc>)
  4035d2:	601a      	str	r2, [r3, #0]
  4035d4:	e7e7      	b.n	4035a6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4035d6:	4a2a      	ldr	r2, [pc, #168]	; (403680 <SystemCoreClockUpdate+0x104>)
  4035d8:	4b27      	ldr	r3, [pc, #156]	; (403678 <SystemCoreClockUpdate+0xfc>)
  4035da:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4035dc:	4b24      	ldr	r3, [pc, #144]	; (403670 <SystemCoreClockUpdate+0xf4>)
  4035de:	6a1b      	ldr	r3, [r3, #32]
  4035e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035e4:	2b10      	cmp	r3, #16
  4035e6:	d005      	beq.n	4035f4 <SystemCoreClockUpdate+0x78>
  4035e8:	2b20      	cmp	r3, #32
  4035ea:	d1dc      	bne.n	4035a6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4035ec:	4a25      	ldr	r2, [pc, #148]	; (403684 <SystemCoreClockUpdate+0x108>)
  4035ee:	4b22      	ldr	r3, [pc, #136]	; (403678 <SystemCoreClockUpdate+0xfc>)
  4035f0:	601a      	str	r2, [r3, #0]
			break;
  4035f2:	e7d8      	b.n	4035a6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4035f4:	4a24      	ldr	r2, [pc, #144]	; (403688 <SystemCoreClockUpdate+0x10c>)
  4035f6:	4b20      	ldr	r3, [pc, #128]	; (403678 <SystemCoreClockUpdate+0xfc>)
  4035f8:	601a      	str	r2, [r3, #0]
			break;
  4035fa:	e7d4      	b.n	4035a6 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4035fc:	4b1c      	ldr	r3, [pc, #112]	; (403670 <SystemCoreClockUpdate+0xf4>)
  4035fe:	6a1b      	ldr	r3, [r3, #32]
  403600:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403604:	d018      	beq.n	403638 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403606:	4a1d      	ldr	r2, [pc, #116]	; (40367c <SystemCoreClockUpdate+0x100>)
  403608:	4b1b      	ldr	r3, [pc, #108]	; (403678 <SystemCoreClockUpdate+0xfc>)
  40360a:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40360c:	4b18      	ldr	r3, [pc, #96]	; (403670 <SystemCoreClockUpdate+0xf4>)
  40360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403610:	f003 0303 	and.w	r3, r3, #3
  403614:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403616:	4a16      	ldr	r2, [pc, #88]	; (403670 <SystemCoreClockUpdate+0xf4>)
  403618:	bf07      	ittee	eq
  40361a:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40361c:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40361e:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403620:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  403622:	4815      	ldr	r0, [pc, #84]	; (403678 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403624:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403628:	6803      	ldr	r3, [r0, #0]
  40362a:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40362e:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403630:	fbb3 f3f2 	udiv	r3, r3, r2
  403634:	6003      	str	r3, [r0, #0]
  403636:	e7b6      	b.n	4035a6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403638:	4a11      	ldr	r2, [pc, #68]	; (403680 <SystemCoreClockUpdate+0x104>)
  40363a:	4b0f      	ldr	r3, [pc, #60]	; (403678 <SystemCoreClockUpdate+0xfc>)
  40363c:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40363e:	4b0c      	ldr	r3, [pc, #48]	; (403670 <SystemCoreClockUpdate+0xf4>)
  403640:	6a1b      	ldr	r3, [r3, #32]
  403642:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403646:	2b10      	cmp	r3, #16
  403648:	d005      	beq.n	403656 <SystemCoreClockUpdate+0xda>
  40364a:	2b20      	cmp	r3, #32
  40364c:	d1de      	bne.n	40360c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40364e:	4a0d      	ldr	r2, [pc, #52]	; (403684 <SystemCoreClockUpdate+0x108>)
  403650:	4b09      	ldr	r3, [pc, #36]	; (403678 <SystemCoreClockUpdate+0xfc>)
  403652:	601a      	str	r2, [r3, #0]
					break;
  403654:	e7da      	b.n	40360c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403656:	4a0c      	ldr	r2, [pc, #48]	; (403688 <SystemCoreClockUpdate+0x10c>)
  403658:	4b07      	ldr	r3, [pc, #28]	; (403678 <SystemCoreClockUpdate+0xfc>)
  40365a:	601a      	str	r2, [r3, #0]
					break;
  40365c:	e7d6      	b.n	40360c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40365e:	4a06      	ldr	r2, [pc, #24]	; (403678 <SystemCoreClockUpdate+0xfc>)
  403660:	6813      	ldr	r3, [r2, #0]
  403662:	490a      	ldr	r1, [pc, #40]	; (40368c <SystemCoreClockUpdate+0x110>)
  403664:	fba1 1303 	umull	r1, r3, r1, r3
  403668:	085b      	lsrs	r3, r3, #1
  40366a:	6013      	str	r3, [r2, #0]
  40366c:	4770      	bx	lr
  40366e:	bf00      	nop
  403670:	400e0400 	.word	0x400e0400
  403674:	400e1410 	.word	0x400e1410
  403678:	200000a4 	.word	0x200000a4
  40367c:	00f42400 	.word	0x00f42400
  403680:	003d0900 	.word	0x003d0900
  403684:	00b71b00 	.word	0x00b71b00
  403688:	007a1200 	.word	0x007a1200
  40368c:	aaaaaaab 	.word	0xaaaaaaab

00403690 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403690:	4b12      	ldr	r3, [pc, #72]	; (4036dc <system_init_flash+0x4c>)
  403692:	4298      	cmp	r0, r3
  403694:	d911      	bls.n	4036ba <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403696:	4b12      	ldr	r3, [pc, #72]	; (4036e0 <system_init_flash+0x50>)
  403698:	4298      	cmp	r0, r3
  40369a:	d913      	bls.n	4036c4 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40369c:	4b11      	ldr	r3, [pc, #68]	; (4036e4 <system_init_flash+0x54>)
  40369e:	4298      	cmp	r0, r3
  4036a0:	d914      	bls.n	4036cc <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4036a2:	4b11      	ldr	r3, [pc, #68]	; (4036e8 <system_init_flash+0x58>)
  4036a4:	4298      	cmp	r0, r3
  4036a6:	d915      	bls.n	4036d4 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4036a8:	4b10      	ldr	r3, [pc, #64]	; (4036ec <system_init_flash+0x5c>)
  4036aa:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4036ac:	bf94      	ite	ls
  4036ae:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4036b2:	4a0f      	ldrhi	r2, [pc, #60]	; (4036f0 <system_init_flash+0x60>)
  4036b4:	4b0f      	ldr	r3, [pc, #60]	; (4036f4 <system_init_flash+0x64>)
  4036b6:	601a      	str	r2, [r3, #0]
  4036b8:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4036ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4036be:	4b0d      	ldr	r3, [pc, #52]	; (4036f4 <system_init_flash+0x64>)
  4036c0:	601a      	str	r2, [r3, #0]
  4036c2:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4036c4:	4a0c      	ldr	r2, [pc, #48]	; (4036f8 <system_init_flash+0x68>)
  4036c6:	4b0b      	ldr	r3, [pc, #44]	; (4036f4 <system_init_flash+0x64>)
  4036c8:	601a      	str	r2, [r3, #0]
  4036ca:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4036cc:	4a0b      	ldr	r2, [pc, #44]	; (4036fc <system_init_flash+0x6c>)
  4036ce:	4b09      	ldr	r3, [pc, #36]	; (4036f4 <system_init_flash+0x64>)
  4036d0:	601a      	str	r2, [r3, #0]
  4036d2:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4036d4:	4a0a      	ldr	r2, [pc, #40]	; (403700 <system_init_flash+0x70>)
  4036d6:	4b07      	ldr	r3, [pc, #28]	; (4036f4 <system_init_flash+0x64>)
  4036d8:	601a      	str	r2, [r3, #0]
  4036da:	4770      	bx	lr
  4036dc:	01312cff 	.word	0x01312cff
  4036e0:	026259ff 	.word	0x026259ff
  4036e4:	039386ff 	.word	0x039386ff
  4036e8:	04c4b3ff 	.word	0x04c4b3ff
  4036ec:	05f5e0ff 	.word	0x05f5e0ff
  4036f0:	04000500 	.word	0x04000500
  4036f4:	400e0a00 	.word	0x400e0a00
  4036f8:	04000100 	.word	0x04000100
  4036fc:	04000200 	.word	0x04000200
  403700:	04000300 	.word	0x04000300

00403704 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403704:	4b0a      	ldr	r3, [pc, #40]	; (403730 <_sbrk+0x2c>)
  403706:	681b      	ldr	r3, [r3, #0]
  403708:	b153      	cbz	r3, 403720 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40370a:	4b09      	ldr	r3, [pc, #36]	; (403730 <_sbrk+0x2c>)
  40370c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40370e:	181a      	adds	r2, r3, r0
  403710:	4908      	ldr	r1, [pc, #32]	; (403734 <_sbrk+0x30>)
  403712:	4291      	cmp	r1, r2
  403714:	db08      	blt.n	403728 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  403716:	4610      	mov	r0, r2
  403718:	4a05      	ldr	r2, [pc, #20]	; (403730 <_sbrk+0x2c>)
  40371a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40371c:	4618      	mov	r0, r3
  40371e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  403720:	4a05      	ldr	r2, [pc, #20]	; (403738 <_sbrk+0x34>)
  403722:	4b03      	ldr	r3, [pc, #12]	; (403730 <_sbrk+0x2c>)
  403724:	601a      	str	r2, [r3, #0]
  403726:	e7f0      	b.n	40370a <_sbrk+0x6>
		return (caddr_t) -1;	
  403728:	f04f 30ff 	mov.w	r0, #4294967295
}
  40372c:	4770      	bx	lr
  40372e:	bf00      	nop
  403730:	20001494 	.word	0x20001494
  403734:	2000fffc 	.word	0x2000fffc
  403738:	200071d8 	.word	0x200071d8

0040373c <USBWakeUp>:

#include <asf.h>
#include <board.h>
#include <sleep_modes.h>

void USBWakeUp(){
  40373c:	b508      	push	{r3, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40373e:	2208      	movs	r2, #8
  403740:	4b07      	ldr	r3, [pc, #28]	; (403760 <USBWakeUp+0x24>)
  403742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  403746:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40374a:	f3bf 8f6f 	isb	sy
	//Get out of sleep mode
	
	//disable RTT
	NVIC_DisableIRQ(RTT_IRQn);
	rtt_disable_interrupt(RTT,RTT_MR_ALMIEN);
  40374e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  403752:	4804      	ldr	r0, [pc, #16]	; (403764 <USBWakeUp+0x28>)
  403754:	4b04      	ldr	r3, [pc, #16]	; (403768 <USBWakeUp+0x2c>)
  403756:	4798      	blx	r3
	pmc_disable_periph_clk(ID_RTT);
  403758:	2003      	movs	r0, #3
  40375a:	4b04      	ldr	r3, [pc, #16]	; (40376c <USBWakeUp+0x30>)
  40375c:	4798      	blx	r3
  40375e:	bd08      	pop	{r3, pc}
  403760:	e000e100 	.word	0xe000e100
  403764:	400e1430 	.word	0x400e1430
  403768:	00400f6d 	.word	0x00400f6d
  40376c:	00403261 	.word	0x00403261

00403770 <PWRSwitchWakeUp>:
	//start shit
	//udc_start();
	
}

void PWRSwitchWakeUp(){
  403770:	b538      	push	{r3, r4, r5, lr}
	//sysclk_init();
	//turn on everything
	pio_clear(NBAT_EN_PORT,NBAT_EN);
  403772:	4c09      	ldr	r4, [pc, #36]	; (403798 <PWRSwitchWakeUp+0x28>)
  403774:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403778:	4620      	mov	r0, r4
  40377a:	4d08      	ldr	r5, [pc, #32]	; (40379c <PWRSwitchWakeUp+0x2c>)
  40377c:	47a8      	blx	r5
	pio_clear(RS485_NRE_PORT,RS485_NRE);
  40377e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403782:	4620      	mov	r0, r4
  403784:	47a8      	blx	r5
	pio_clear(RS485_DE_PORT,RS485_DE);
  403786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40378a:	4620      	mov	r0, r4
  40378c:	47a8      	blx	r5
	pio_set(AFE_EN_PORT,AFE_EN);
  40378e:	2180      	movs	r1, #128	; 0x80
  403790:	4620      	mov	r0, r4
  403792:	4b03      	ldr	r3, [pc, #12]	; (4037a0 <PWRSwitchWakeUp+0x30>)
  403794:	4798      	blx	r3
  403796:	bd38      	pop	{r3, r4, r5, pc}
  403798:	400e0e00 	.word	0x400e0e00
  40379c:	00402f7d 	.word	0x00402f7d
  4037a0:	00402f79 	.word	0x00402f79

004037a4 <goToSleep>:
	
}


void goToSleep(){
  4037a4:	b538      	push	{r3, r4, r5, lr}
	//turn off everything
	pio_set(NBAT_EN_PORT,NBAT_EN);
  4037a6:	4c1f      	ldr	r4, [pc, #124]	; (403824 <goToSleep+0x80>)
  4037a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4037ac:	4620      	mov	r0, r4
  4037ae:	4d1e      	ldr	r5, [pc, #120]	; (403828 <goToSleep+0x84>)
  4037b0:	47a8      	blx	r5
	pio_set(RS485_NRE_PORT,RS485_NRE);
  4037b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4037b6:	4620      	mov	r0, r4
  4037b8:	47a8      	blx	r5
	pio_clear(RS485_DE_PORT,RS485_DE);
  4037ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4037be:	4620      	mov	r0, r4
  4037c0:	4d1a      	ldr	r5, [pc, #104]	; (40382c <goToSleep+0x88>)
  4037c2:	47a8      	blx	r5
	pio_clear(AFE_EN_PORT,AFE_EN);
  4037c4:	2180      	movs	r1, #128	; 0x80
  4037c6:	4620      	mov	r0, r4
  4037c8:	47a8      	blx	r5
	pio_clear(BOARD_LED_PORT,BOARD_LED);
  4037ca:	2108      	movs	r1, #8
  4037cc:	4620      	mov	r0, r4
  4037ce:	47a8      	blx	r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4037d0:	2208      	movs	r2, #8
  4037d2:	4b17      	ldr	r3, [pc, #92]	; (403830 <goToSleep+0x8c>)
  4037d4:	601a      	str	r2, [r3, #0]
	
	
	//enable RTT for periodic wakeups
	NVIC_EnableIRQ(RTT_IRQn);
	pmc_enable_periph_clk(ID_RTT);
  4037d6:	2003      	movs	r0, #3
  4037d8:	4d16      	ldr	r5, [pc, #88]	; (403834 <goToSleep+0x90>)
  4037da:	47a8      	blx	r5
	rtt_write_alarm_time(RTT,PERIODIC_WAKEUP_TIME);
  4037dc:	f504 64c6 	add.w	r4, r4, #1584	; 0x630
  4037e0:	210a      	movs	r1, #10
  4037e2:	4620      	mov	r0, r4
  4037e4:	4b14      	ldr	r3, [pc, #80]	; (403838 <goToSleep+0x94>)
  4037e6:	4798      	blx	r3
	rtt_init(RTT,RTT_MR_ALMIEN);
  4037e8:	2100      	movs	r1, #0
  4037ea:	4620      	mov	r0, r4
  4037ec:	4b13      	ldr	r3, [pc, #76]	; (40383c <goToSleep+0x98>)
  4037ee:	4798      	blx	r3
	rtt_enable_interrupt(RTT,RTT_MR_ALMIEN);
  4037f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4037f4:	4620      	mov	r0, r4
  4037f6:	4b12      	ldr	r3, [pc, #72]	; (403840 <goToSleep+0x9c>)
  4037f8:	4798      	blx	r3
	
	//enter sleep mode
	pmc_enable_periph_clk(ID_SUPC);
  4037fa:	2000      	movs	r0, #0
  4037fc:	47a8      	blx	r5
	supc_set_wakeup_mode(SUPC,SUPC_WUMR_RTTEN_ENABLE | SUPC_WUMR_WKUPDBC_512_SCLK);
  4037fe:	3c20      	subs	r4, #32
  403800:	f243 0104 	movw	r1, #12292	; 0x3004
  403804:	4620      	mov	r0, r4
  403806:	4b0f      	ldr	r3, [pc, #60]	; (403844 <goToSleep+0xa0>)
  403808:	4798      	blx	r3
	supc_set_wakeup_inputs(SUPC,SUPC_WUIR_WKUPEN0 | SUPC_WUIR_WKUPEN8 , SUPC_WUIR_WKUPT0 | SUPC_WUIR_WKUPT8);
  40380a:	4a0f      	ldr	r2, [pc, #60]	; (403848 <goToSleep+0xa4>)
  40380c:	f240 1101 	movw	r1, #257	; 0x101
  403810:	4620      	mov	r0, r4
  403812:	4b0e      	ldr	r3, [pc, #56]	; (40384c <goToSleep+0xa8>)
  403814:	4798      	blx	r3
	pmc_switch_mck_to_sclk(PMC_MCKR_PRES_CLK_1);
  403816:	2000      	movs	r0, #0
  403818:	4b0d      	ldr	r3, [pc, #52]	; (403850 <goToSleep+0xac>)
  40381a:	4798      	blx	r3
	supc_enable_backup_mode(SUPC);
  40381c:	4620      	mov	r0, r4
  40381e:	4b0d      	ldr	r3, [pc, #52]	; (403854 <goToSleep+0xb0>)
  403820:	4798      	blx	r3
  403822:	bd38      	pop	{r3, r4, r5, pc}
  403824:	400e0e00 	.word	0x400e0e00
  403828:	00402f79 	.word	0x00402f79
  40382c:	00402f7d 	.word	0x00402f7d
  403830:	e000e100 	.word	0xe000e100
  403834:	0040320d 	.word	0x0040320d
  403838:	00400f81 	.word	0x00400f81
  40383c:	00400f45 	.word	0x00400f45
  403840:	00400f59 	.word	0x00400f59
  403844:	00400fd9 	.word	0x00400fd9
  403848:	01010000 	.word	0x01010000
  40384c:	00400fdd 	.word	0x00400fdd
  403850:	004030b1 	.word	0x004030b1
  403854:	00400fc5 	.word	0x00400fc5

00403858 <adcSetup>:
int currentExternTempSensor = 0;
int currentExternCell		= 0;
float PCBTempLookUpTable[1024];
float ExtTempLookUpTable[1024];

void adcSetup(){
  403858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40385c:	b083      	sub	sp, #12
  40385e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 403a7c <adcSetup+0x224>
  403862:	f8df 821c 	ldr.w	r8, [pc, #540]	; 403a80 <adcSetup+0x228>
	//Generate temperature lookup tables.
	float PCBBeta = 4700.0;
	float ExBeta = 3950.0;
	for(int i=0;i<1024;i++){
  403866:	2500      	movs	r5, #0
		float voltage = ((float)(i)/1023)*3.3;
  403868:	4628      	mov	r0, r5
  40386a:	4b6d      	ldr	r3, [pc, #436]	; (403a20 <adcSetup+0x1c8>)
  40386c:	4798      	blx	r3
  40386e:	496d      	ldr	r1, [pc, #436]	; (403a24 <adcSetup+0x1cc>)
  403870:	4b6d      	ldr	r3, [pc, #436]	; (403a28 <adcSetup+0x1d0>)
  403872:	4798      	blx	r3
  403874:	4c6d      	ldr	r4, [pc, #436]	; (403a2c <adcSetup+0x1d4>)
  403876:	47a0      	blx	r4
  403878:	a35f      	add	r3, pc, #380	; (adr r3, 4039f8 <adcSetup+0x1a0>)
  40387a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40387e:	4e6c      	ldr	r6, [pc, #432]	; (403a30 <adcSetup+0x1d8>)
  403880:	47b0      	blx	r6
  403882:	4e6c      	ldr	r6, [pc, #432]	; (403a34 <adcSetup+0x1dc>)
  403884:	47b0      	blx	r6
		PCBTempLookUpTable[i] = (1.0/((log(voltage/(3.3-voltage))/PCBBeta)+(1.0/(25.0+273.15))))-273.15;
  403886:	47a0      	blx	r4
  403888:	4682      	mov	sl, r0
  40388a:	468b      	mov	fp, r1
  40388c:	4f6a      	ldr	r7, [pc, #424]	; (403a38 <adcSetup+0x1e0>)
  40388e:	4602      	mov	r2, r0
  403890:	460b      	mov	r3, r1
  403892:	a159      	add	r1, pc, #356	; (adr r1, 4039f8 <adcSetup+0x1a0>)
  403894:	e9d1 0100 	ldrd	r0, r1, [r1]
  403898:	47b8      	blx	r7
  40389a:	4c68      	ldr	r4, [pc, #416]	; (403a3c <adcSetup+0x1e4>)
  40389c:	4602      	mov	r2, r0
  40389e:	460b      	mov	r3, r1
  4038a0:	4650      	mov	r0, sl
  4038a2:	4659      	mov	r1, fp
  4038a4:	47a0      	blx	r4
  4038a6:	e9cd 0100 	strd	r0, r1, [sp]
  4038aa:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 403a84 <adcSetup+0x22c>
  4038ae:	47d8      	blx	fp
  4038b0:	a353      	add	r3, pc, #332	; (adr r3, 403a00 <adcSetup+0x1a8>)
  4038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038b6:	47a0      	blx	r4
  4038b8:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 403a88 <adcSetup+0x230>
  4038bc:	a352      	add	r3, pc, #328	; (adr r3, 403a08 <adcSetup+0x1b0>)
  4038be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038c2:	47d0      	blx	sl
  4038c4:	4602      	mov	r2, r0
  4038c6:	460b      	mov	r3, r1
  4038c8:	2000      	movs	r0, #0
  4038ca:	495d      	ldr	r1, [pc, #372]	; (403a40 <adcSetup+0x1e8>)
  4038cc:	47a0      	blx	r4
  4038ce:	a350      	add	r3, pc, #320	; (adr r3, 403a10 <adcSetup+0x1b8>)
  4038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038d4:	47b8      	blx	r7
  4038d6:	47b0      	blx	r6
  4038d8:	f849 0f04 	str.w	r0, [r9, #4]!
		ExtTempLookUpTable[i] = (1.0/((log(voltage/(3.3-voltage))/ExBeta)+(1.0/(25.0+273.15))))-273.15;
  4038dc:	e9dd 0100 	ldrd	r0, r1, [sp]
  4038e0:	47d8      	blx	fp
  4038e2:	a34d      	add	r3, pc, #308	; (adr r3, 403a18 <adcSetup+0x1c0>)
  4038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038e8:	47a0      	blx	r4
  4038ea:	a347      	add	r3, pc, #284	; (adr r3, 403a08 <adcSetup+0x1b0>)
  4038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
  4038f0:	47d0      	blx	sl
  4038f2:	4602      	mov	r2, r0
  4038f4:	460b      	mov	r3, r1
  4038f6:	2000      	movs	r0, #0
  4038f8:	4951      	ldr	r1, [pc, #324]	; (403a40 <adcSetup+0x1e8>)
  4038fa:	47a0      	blx	r4
  4038fc:	a344      	add	r3, pc, #272	; (adr r3, 403a10 <adcSetup+0x1b8>)
  4038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  403902:	47b8      	blx	r7
  403904:	47b0      	blx	r6
  403906:	f848 0f04 	str.w	r0, [r8, #4]!
	for(int i=0;i<1024;i++){
  40390a:	3501      	adds	r5, #1
  40390c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
  403910:	d1aa      	bne.n	403868 <adcSetup+0x10>
	}
	
	//enable and start adc.
	pmc_enable_periph_clk(ID_ADC);
  403912:	201d      	movs	r0, #29
  403914:	4e4b      	ldr	r6, [pc, #300]	; (403a44 <adcSetup+0x1ec>)
  403916:	47b0      	blx	r6
	adc_init(ADC,sysclk_get_peripheral_hz(),ADC_CLK_FREQ,ADC_STARTUP_TIME_4);
  403918:	4c4b      	ldr	r4, [pc, #300]	; (403a48 <adcSetup+0x1f0>)
  40391a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  40391e:	4a4b      	ldr	r2, [pc, #300]	; (403a4c <adcSetup+0x1f4>)
  403920:	494b      	ldr	r1, [pc, #300]	; (403a50 <adcSetup+0x1f8>)
  403922:	4620      	mov	r0, r4
  403924:	4d4b      	ldr	r5, [pc, #300]	; (403a54 <adcSetup+0x1fc>)
  403926:	47a8      	blx	r5
	adc_configure_timing(ADC, QTY_TRACKING_PERIODS, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  403928:	2302      	movs	r3, #2
  40392a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  40392e:	2101      	movs	r1, #1
  403930:	4620      	mov	r0, r4
  403932:	4d49      	ldr	r5, [pc, #292]	; (403a58 <adcSetup+0x200>)
  403934:	47a8      	blx	r5
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);		//Software Trigger, no freerun (I think this is defauilt)
  403936:	2200      	movs	r2, #0
  403938:	4611      	mov	r1, r2
  40393a:	4620      	mov	r0, r4
  40393c:	4b47      	ldr	r3, [pc, #284]	; (403a5c <adcSetup+0x204>)
  40393e:	4798      	blx	r3
	ADC->ADC_EMR |= ADC_EMR_TAG;					//appends channel tag to last converted data
  403940:	6c23      	ldr	r3, [r4, #64]	; 0x40
  403942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  403946:	6423      	str	r3, [r4, #64]	; 0x40
	ADC->ADC_MR |= ADC_MR_USEQ_REG_ORDER;			//enables manual sequencer
  403948:	6863      	ldr	r3, [r4, #4]
  40394a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40394e:	6063      	str	r3, [r4, #4]
	adc_enable_channel(ADC, CELLV_CHANNEL);
  403950:	2100      	movs	r1, #0
  403952:	4620      	mov	r0, r4
  403954:	4d42      	ldr	r5, [pc, #264]	; (403a60 <adcSetup+0x208>)
  403956:	47a8      	blx	r5
	ADC->ADC_SEQR1 |= CELLV_CHANNEL<<(4*CELLV_CHANNEL);
  403958:	68a3      	ldr	r3, [r4, #8]
  40395a:	60a3      	str	r3, [r4, #8]
	adc_enable_channel(ADC, CURRENT_CHANNEL);
  40395c:	2101      	movs	r1, #1
  40395e:	4620      	mov	r0, r4
  403960:	47a8      	blx	r5
	ADC->ADC_SEQR1 |= CURRENT_CHANNEL<<(4*CURRENT_CHANNEL);
  403962:	68a3      	ldr	r3, [r4, #8]
  403964:	f043 0310 	orr.w	r3, r3, #16
  403968:	60a3      	str	r3, [r4, #8]
	adc_enable_channel(ADC, STACK_CHANNEL);
  40396a:	2102      	movs	r1, #2
  40396c:	4620      	mov	r0, r4
  40396e:	47a8      	blx	r5
	ADC->ADC_SEQR1 |= STACK_CHANNEL<<(4*STACK_CHANNEL);
  403970:	68a3      	ldr	r3, [r4, #8]
  403972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  403976:	60a3      	str	r3, [r4, #8]
	adc_enable_channel(ADC, EXTERN_TEMP_CHANNEL);
  403978:	2103      	movs	r1, #3
  40397a:	4620      	mov	r0, r4
  40397c:	47a8      	blx	r5
	ADC->ADC_SEQR1 |= EXTERN_TEMP_CHANNEL<<(4*EXTERN_TEMP_CHANNEL);
  40397e:	68a3      	ldr	r3, [r4, #8]
  403980:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
  403984:	60a3      	str	r3, [r4, #8]
	adc_enable_channel(ADC, FET_TEMP_CHANNEL);
  403986:	2104      	movs	r1, #4
  403988:	4620      	mov	r0, r4
  40398a:	47a8      	blx	r5
	ADC->ADC_SEQR1 |= FET_TEMP_CHANNEL<<(4*FET_TEMP_CHANNEL);
  40398c:	68a3      	ldr	r3, [r4, #8]
  40398e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  403992:	60a3      	str	r3, [r4, #8]
	adc_enable_channel(ADC, SHUNT_TEMP_CHANNEL);
  403994:	2105      	movs	r1, #5
  403996:	4620      	mov	r0, r4
  403998:	47a8      	blx	r5
	ADC->ADC_SEQR1 |= SHUNT_TEMP_CHANNEL<<(4*SHUNT_TEMP_CHANNEL);
  40399a:	68a3      	ldr	r3, [r4, #8]
  40399c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
  4039a0:	60a3      	str	r3, [r4, #8]
	adc_enable_interrupt(ADC,ADC_IER_DRDY);
  4039a2:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  4039a6:	4620      	mov	r0, r4
  4039a8:	4b2e      	ldr	r3, [pc, #184]	; (403a64 <adcSetup+0x20c>)
  4039aa:	4798      	blx	r3
  4039ac:	4d2e      	ldr	r5, [pc, #184]	; (403a68 <adcSetup+0x210>)
  4039ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  4039b2:	602b      	str	r3, [r5, #0]
	NVIC_EnableIRQ(ADC_IRQn);
	
	pmc_enable_periph_clk(ID_TC0);
  4039b4:	2017      	movs	r0, #23
  4039b6:	47b0      	blx	r6
	tc_init(TC0, ADC_TC,
  4039b8:	f5a4 3420 	sub.w	r4, r4, #163840	; 0x28000
  4039bc:	f24c 0203 	movw	r2, #49155	; 0xc003
  4039c0:	2100      	movs	r1, #0
  4039c2:	4620      	mov	r0, r4
  4039c4:	4b29      	ldr	r3, [pc, #164]	; (403a6c <adcSetup+0x214>)
  4039c6:	4798      	blx	r3
			TC_CMR_WAVSEL_UP_RC
			|TC_CMR_WAVE
			| TC_CMR_TCCLKS_TIMER_CLOCK4);
	tc_write_rc(TC0,ADC_TC,18750);				  //causes timer to reset every 5ms
  4039c8:	f644 123e 	movw	r2, #18750	; 0x493e
  4039cc:	2100      	movs	r1, #0
  4039ce:	4620      	mov	r0, r4
  4039d0:	4b27      	ldr	r3, [pc, #156]	; (403a70 <adcSetup+0x218>)
  4039d2:	4798      	blx	r3
	tc_enable_interrupt(TC0, ADC_TC, TC_IER_CPCS);
  4039d4:	2210      	movs	r2, #16
  4039d6:	2100      	movs	r1, #0
  4039d8:	4620      	mov	r0, r4
  4039da:	4b26      	ldr	r3, [pc, #152]	; (403a74 <adcSetup+0x21c>)
  4039dc:	4798      	blx	r3
  4039de:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4039e2:	602b      	str	r3, [r5, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	tc_start(TC0,ADC_TC);
  4039e4:	2100      	movs	r1, #0
  4039e6:	4620      	mov	r0, r4
  4039e8:	4b23      	ldr	r3, [pc, #140]	; (403a78 <adcSetup+0x220>)
  4039ea:	4798      	blx	r3
}
  4039ec:	b003      	add	sp, #12
  4039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039f2:	bf00      	nop
  4039f4:	f3af 8000 	nop.w
  4039f8:	66666666 	.word	0x66666666
  4039fc:	400a6666 	.word	0x400a6666
  403a00:	00000000 	.word	0x00000000
  403a04:	40b25c00 	.word	0x40b25c00
  403a08:	dcb5db83 	.word	0xdcb5db83
  403a0c:	3f6b79e1 	.word	0x3f6b79e1
  403a10:	66666666 	.word	0x66666666
  403a14:	40711266 	.word	0x40711266
  403a18:	00000000 	.word	0x00000000
  403a1c:	40aedc00 	.word	0x40aedc00
  403a20:	004053ad 	.word	0x004053ad
  403a24:	447fc000 	.word	0x447fc000
  403a28:	004055bd 	.word	0x004055bd
  403a2c:	00404b91 	.word	0x00404b91
  403a30:	00404c39 	.word	0x00404c39
  403a34:	00405199 	.word	0x00405199
  403a38:	004048d1 	.word	0x004048d1
  403a3c:	00404e8d 	.word	0x00404e8d
  403a40:	3ff00000 	.word	0x3ff00000
  403a44:	0040320d 	.word	0x0040320d
  403a48:	40038000 	.word	0x40038000
  403a4c:	0003d090 	.word	0x0003d090
  403a50:	07270e00 	.word	0x07270e00
  403a54:	00400e49 	.word	0x00400e49
  403a58:	00400e8b 	.word	0x00400e8b
  403a5c:	00400e7d 	.word	0x00400e7d
  403a60:	00400ead 	.word	0x00400ead
  403a64:	00400ec5 	.word	0x00400ec5
  403a68:	e000e100 	.word	0xe000e100
  403a6c:	00400fe3 	.word	0x00400fe3
  403a70:	0040100b 	.word	0x0040100b
  403a74:	00401013 	.word	0x00401013
  403a78:	00400ffb 	.word	0x00400ffb
  403a7c:	20002150 	.word	0x20002150
  403a80:	200031a8 	.word	0x200031a8
  403a84:	004043d5 	.word	0x004043d5
  403a88:	004048d5 	.word	0x004048d5
  403a8c:	00000000 	.word	0x00000000

00403a90 <analogCalculate>:
				break;
		};
	}
}

void analogCalculate(){
  403a90:	b570      	push	{r4, r5, r6, lr}
	if( needsProcessing[CELL1IDX] || needsProcessing[CELL2IDX] || needsProcessing[CELL3IDX] || needsProcessing[CELL4IDX] || needsProcessing[CELL5IDX] || needsProcessing[CELL6IDX]){
  403a92:	4b6b      	ldr	r3, [pc, #428]	; (403c40 <analogCalculate+0x1b0>)
  403a94:	781b      	ldrb	r3, [r3, #0]
  403a96:	b93b      	cbnz	r3, 403aa8 <analogCalculate+0x18>
  403a98:	4b69      	ldr	r3, [pc, #420]	; (403c40 <analogCalculate+0x1b0>)
  403a9a:	785b      	ldrb	r3, [r3, #1]
  403a9c:	b923      	cbnz	r3, 403aa8 <analogCalculate+0x18>
  403a9e:	4b68      	ldr	r3, [pc, #416]	; (403c40 <analogCalculate+0x1b0>)
  403aa0:	789b      	ldrb	r3, [r3, #2]
  403aa2:	2b00      	cmp	r3, #0
  403aa4:	f000 809e 	beq.w	403be4 <analogCalculate+0x154>
  403aa8:	4a65      	ldr	r2, [pc, #404]	; (403c40 <analogCalculate+0x1b0>)
void analogCalculate(){
  403aaa:	2300      	movs	r3, #0
		int processIDX;
		for(int i=CELL1IDX;i<=CELL6IDX;i++) if(needsProcessing[i]) processIDX = i;
  403aac:	f812 1b01 	ldrb.w	r1, [r2], #1
  403ab0:	2900      	cmp	r1, #0
  403ab2:	bf18      	it	ne
  403ab4:	461d      	movne	r5, r3
  403ab6:	3301      	adds	r3, #1
  403ab8:	2b06      	cmp	r3, #6
  403aba:	d1f7      	bne.n	403aac <analogCalculate+0x1c>
		processedADCData[processIDX] = (3.3*(rawADCData[processIDX]/4095.0)) * (1.0/0.759);
  403abc:	4b61      	ldr	r3, [pc, #388]	; (403c44 <analogCalculate+0x1b4>)
  403abe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
  403ac2:	4b61      	ldr	r3, [pc, #388]	; (403c48 <analogCalculate+0x1b8>)
  403ac4:	4798      	blx	r3
  403ac6:	a358      	add	r3, pc, #352	; (adr r3, 403c28 <analogCalculate+0x198>)
  403ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
  403acc:	4e5f      	ldr	r6, [pc, #380]	; (403c4c <analogCalculate+0x1bc>)
  403ace:	47b0      	blx	r6
  403ad0:	4e5f      	ldr	r6, [pc, #380]	; (403c50 <analogCalculate+0x1c0>)
  403ad2:	a357      	add	r3, pc, #348	; (adr r3, 403c30 <analogCalculate+0x1a0>)
  403ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ad8:	47b0      	blx	r6
  403ada:	a357      	add	r3, pc, #348	; (adr r3, 403c38 <analogCalculate+0x1a8>)
  403adc:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ae0:	47b0      	blx	r6
  403ae2:	4b5c      	ldr	r3, [pc, #368]	; (403c54 <analogCalculate+0x1c4>)
  403ae4:	4798      	blx	r3
  403ae6:	4b5c      	ldr	r3, [pc, #368]	; (403c58 <analogCalculate+0x1c8>)
  403ae8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
		needsProcessing[processIDX] = false;
  403aec:	2200      	movs	r2, #0
  403aee:	4b54      	ldr	r3, [pc, #336]	; (403c40 <analogCalculate+0x1b0>)
  403af0:	555a      	strb	r2, [r3, r5]
	}
	if(needsProcessing[TEMP1IDX] || needsProcessing[TEMP2IDX] || needsProcessing[TEMP3IDX] || needsProcessing[TEMP4IDX] || needsProcessing[TEMP5IDX] || needsProcessing[TEMP6IDX]){
  403af2:	4b53      	ldr	r3, [pc, #332]	; (403c40 <analogCalculate+0x1b0>)
  403af4:	799b      	ldrb	r3, [r3, #6]
  403af6:	b933      	cbnz	r3, 403b06 <analogCalculate+0x76>
  403af8:	4b51      	ldr	r3, [pc, #324]	; (403c40 <analogCalculate+0x1b0>)
  403afa:	79db      	ldrb	r3, [r3, #7]
  403afc:	b91b      	cbnz	r3, 403b06 <analogCalculate+0x76>
  403afe:	4b50      	ldr	r3, [pc, #320]	; (403c40 <analogCalculate+0x1b0>)
  403b00:	7a1b      	ldrb	r3, [r3, #8]
  403b02:	2b00      	cmp	r3, #0
  403b04:	d07e      	beq.n	403c04 <analogCalculate+0x174>
  403b06:	4a55      	ldr	r2, [pc, #340]	; (403c5c <analogCalculate+0x1cc>)
		for(int i=CELL1IDX;i<=CELL6IDX;i++) if(needsProcessing[i]) processIDX = i;
  403b08:	2306      	movs	r3, #6
		int processIDX;
		for(int i=TEMP1IDX;i<=TEMP6IDX;i++) if(needsProcessing[i]) processIDX = i;
  403b0a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  403b0e:	2900      	cmp	r1, #0
  403b10:	bf18      	it	ne
  403b12:	461c      	movne	r4, r3
  403b14:	3301      	adds	r3, #1
  403b16:	2b0c      	cmp	r3, #12
  403b18:	d1f7      	bne.n	403b0a <analogCalculate+0x7a>
		processedADCData[processIDX] = ExtTempLookUpTable[(int)(rawADCData[processIDX]/4)];
  403b1a:	4b4a      	ldr	r3, [pc, #296]	; (403c44 <analogCalculate+0x1b4>)
  403b1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  403b20:	2b00      	cmp	r3, #0
  403b22:	bfb8      	it	lt
  403b24:	3303      	addlt	r3, #3
  403b26:	109b      	asrs	r3, r3, #2
  403b28:	4a4d      	ldr	r2, [pc, #308]	; (403c60 <analogCalculate+0x1d0>)
  403b2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  403b2e:	4b4a      	ldr	r3, [pc, #296]	; (403c58 <analogCalculate+0x1c8>)
  403b30:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		needsProcessing[processIDX] = false;
  403b34:	2200      	movs	r2, #0
  403b36:	4b42      	ldr	r3, [pc, #264]	; (403c40 <analogCalculate+0x1b0>)
  403b38:	551a      	strb	r2, [r3, r4]
	}
	if(needsProcessing[CURRENTIDX]){
  403b3a:	4b41      	ldr	r3, [pc, #260]	; (403c40 <analogCalculate+0x1b0>)
  403b3c:	7b1b      	ldrb	r3, [r3, #12]
  403b3e:	b1bb      	cbz	r3, 403b70 <analogCalculate+0xe0>
		processedADCData[CURRENTIDX] = (3.3*(rawADCData[CURRENTIDX]/4095.0)) * (1000/20);
  403b40:	4b40      	ldr	r3, [pc, #256]	; (403c44 <analogCalculate+0x1b4>)
  403b42:	6b18      	ldr	r0, [r3, #48]	; 0x30
  403b44:	4b40      	ldr	r3, [pc, #256]	; (403c48 <analogCalculate+0x1b8>)
  403b46:	4798      	blx	r3
  403b48:	a337      	add	r3, pc, #220	; (adr r3, 403c28 <analogCalculate+0x198>)
  403b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b4e:	4c3f      	ldr	r4, [pc, #252]	; (403c4c <analogCalculate+0x1bc>)
  403b50:	47a0      	blx	r4
  403b52:	4c3f      	ldr	r4, [pc, #252]	; (403c50 <analogCalculate+0x1c0>)
  403b54:	a336      	add	r3, pc, #216	; (adr r3, 403c30 <analogCalculate+0x1a0>)
  403b56:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b5a:	47a0      	blx	r4
  403b5c:	2200      	movs	r2, #0
  403b5e:	4b41      	ldr	r3, [pc, #260]	; (403c64 <analogCalculate+0x1d4>)
  403b60:	47a0      	blx	r4
  403b62:	4b3c      	ldr	r3, [pc, #240]	; (403c54 <analogCalculate+0x1c4>)
  403b64:	4798      	blx	r3
  403b66:	4b3c      	ldr	r3, [pc, #240]	; (403c58 <analogCalculate+0x1c8>)
  403b68:	6318      	str	r0, [r3, #48]	; 0x30
		needsProcessing[CURRENTIDX] = false;
  403b6a:	2200      	movs	r2, #0
  403b6c:	4b34      	ldr	r3, [pc, #208]	; (403c40 <analogCalculate+0x1b0>)
  403b6e:	731a      	strb	r2, [r3, #12]
	}
	if(needsProcessing[SHUNTTEMPIDX]){
  403b70:	4b33      	ldr	r3, [pc, #204]	; (403c40 <analogCalculate+0x1b0>)
  403b72:	7b5b      	ldrb	r3, [r3, #13]
  403b74:	b16b      	cbz	r3, 403b92 <analogCalculate+0x102>
		processedADCData[SHUNTTEMPIDX] = PCBTempLookUpTable[(int)(rawADCData[SHUNTTEMPIDX]/4)];
  403b76:	4b33      	ldr	r3, [pc, #204]	; (403c44 <analogCalculate+0x1b4>)
  403b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  403b7a:	2b00      	cmp	r3, #0
  403b7c:	bfb8      	it	lt
  403b7e:	3303      	addlt	r3, #3
  403b80:	109b      	asrs	r3, r3, #2
  403b82:	4a39      	ldr	r2, [pc, #228]	; (403c68 <analogCalculate+0x1d8>)
  403b84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  403b88:	4b33      	ldr	r3, [pc, #204]	; (403c58 <analogCalculate+0x1c8>)
  403b8a:	635a      	str	r2, [r3, #52]	; 0x34
		needsProcessing[SHUNTTEMPIDX] = false;
  403b8c:	2200      	movs	r2, #0
  403b8e:	4b2c      	ldr	r3, [pc, #176]	; (403c40 <analogCalculate+0x1b0>)
  403b90:	735a      	strb	r2, [r3, #13]
	}
	if(needsProcessing[FETTEMPIDX]){
  403b92:	4b2b      	ldr	r3, [pc, #172]	; (403c40 <analogCalculate+0x1b0>)
  403b94:	7b9b      	ldrb	r3, [r3, #14]
  403b96:	b16b      	cbz	r3, 403bb4 <analogCalculate+0x124>
		processedADCData[FETTEMPIDX] = PCBTempLookUpTable[(int)(rawADCData[FETTEMPIDX]/4)];
  403b98:	4b2a      	ldr	r3, [pc, #168]	; (403c44 <analogCalculate+0x1b4>)
  403b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  403b9c:	2b00      	cmp	r3, #0
  403b9e:	bfb8      	it	lt
  403ba0:	3303      	addlt	r3, #3
  403ba2:	109b      	asrs	r3, r3, #2
  403ba4:	4a30      	ldr	r2, [pc, #192]	; (403c68 <analogCalculate+0x1d8>)
  403ba6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  403baa:	4b2b      	ldr	r3, [pc, #172]	; (403c58 <analogCalculate+0x1c8>)
  403bac:	639a      	str	r2, [r3, #56]	; 0x38
		needsProcessing[FETTEMPIDX] = false;
  403bae:	2200      	movs	r2, #0
  403bb0:	4b23      	ldr	r3, [pc, #140]	; (403c40 <analogCalculate+0x1b0>)
  403bb2:	739a      	strb	r2, [r3, #14]
	}
	if(needsProcessing[STACKVOLTIDX]){
  403bb4:	4b22      	ldr	r3, [pc, #136]	; (403c40 <analogCalculate+0x1b0>)
  403bb6:	7bdb      	ldrb	r3, [r3, #15]
  403bb8:	b19b      	cbz	r3, 403be2 <analogCalculate+0x152>
		processedADCData[STACKVOLTIDX] = (rawADCData[STACKVOLTIDX]/4095.0)*33.0;
  403bba:	4b22      	ldr	r3, [pc, #136]	; (403c44 <analogCalculate+0x1b4>)
  403bbc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  403bbe:	4b22      	ldr	r3, [pc, #136]	; (403c48 <analogCalculate+0x1b8>)
  403bc0:	4798      	blx	r3
  403bc2:	a319      	add	r3, pc, #100	; (adr r3, 403c28 <analogCalculate+0x198>)
  403bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
  403bc8:	4c20      	ldr	r4, [pc, #128]	; (403c4c <analogCalculate+0x1bc>)
  403bca:	47a0      	blx	r4
  403bcc:	2200      	movs	r2, #0
  403bce:	4b27      	ldr	r3, [pc, #156]	; (403c6c <analogCalculate+0x1dc>)
  403bd0:	4c1f      	ldr	r4, [pc, #124]	; (403c50 <analogCalculate+0x1c0>)
  403bd2:	47a0      	blx	r4
  403bd4:	4b1f      	ldr	r3, [pc, #124]	; (403c54 <analogCalculate+0x1c4>)
  403bd6:	4798      	blx	r3
  403bd8:	4b1f      	ldr	r3, [pc, #124]	; (403c58 <analogCalculate+0x1c8>)
  403bda:	63d8      	str	r0, [r3, #60]	; 0x3c
		needsProcessing[STACKVOLTIDX] = false;
  403bdc:	2200      	movs	r2, #0
  403bde:	4b18      	ldr	r3, [pc, #96]	; (403c40 <analogCalculate+0x1b0>)
  403be0:	73da      	strb	r2, [r3, #15]
  403be2:	bd70      	pop	{r4, r5, r6, pc}
	if( needsProcessing[CELL1IDX] || needsProcessing[CELL2IDX] || needsProcessing[CELL3IDX] || needsProcessing[CELL4IDX] || needsProcessing[CELL5IDX] || needsProcessing[CELL6IDX]){
  403be4:	4b16      	ldr	r3, [pc, #88]	; (403c40 <analogCalculate+0x1b0>)
  403be6:	78db      	ldrb	r3, [r3, #3]
  403be8:	2b00      	cmp	r3, #0
  403bea:	f47f af5d 	bne.w	403aa8 <analogCalculate+0x18>
  403bee:	4b14      	ldr	r3, [pc, #80]	; (403c40 <analogCalculate+0x1b0>)
  403bf0:	791b      	ldrb	r3, [r3, #4]
  403bf2:	2b00      	cmp	r3, #0
  403bf4:	f47f af58 	bne.w	403aa8 <analogCalculate+0x18>
  403bf8:	4b11      	ldr	r3, [pc, #68]	; (403c40 <analogCalculate+0x1b0>)
  403bfa:	795b      	ldrb	r3, [r3, #5]
  403bfc:	2b00      	cmp	r3, #0
  403bfe:	f47f af53 	bne.w	403aa8 <analogCalculate+0x18>
  403c02:	e776      	b.n	403af2 <analogCalculate+0x62>
	if(needsProcessing[TEMP1IDX] || needsProcessing[TEMP2IDX] || needsProcessing[TEMP3IDX] || needsProcessing[TEMP4IDX] || needsProcessing[TEMP5IDX] || needsProcessing[TEMP6IDX]){
  403c04:	4b0e      	ldr	r3, [pc, #56]	; (403c40 <analogCalculate+0x1b0>)
  403c06:	7a5b      	ldrb	r3, [r3, #9]
  403c08:	2b00      	cmp	r3, #0
  403c0a:	f47f af7c 	bne.w	403b06 <analogCalculate+0x76>
  403c0e:	4b0c      	ldr	r3, [pc, #48]	; (403c40 <analogCalculate+0x1b0>)
  403c10:	7a9b      	ldrb	r3, [r3, #10]
  403c12:	2b00      	cmp	r3, #0
  403c14:	f47f af77 	bne.w	403b06 <analogCalculate+0x76>
  403c18:	4b09      	ldr	r3, [pc, #36]	; (403c40 <analogCalculate+0x1b0>)
  403c1a:	7adb      	ldrb	r3, [r3, #11]
  403c1c:	2b00      	cmp	r3, #0
  403c1e:	f47f af72 	bne.w	403b06 <analogCalculate+0x76>
  403c22:	e78a      	b.n	403b3a <analogCalculate+0xaa>
  403c24:	f3af 8000 	nop.w
  403c28:	00000000 	.word	0x00000000
  403c2c:	40affe00 	.word	0x40affe00
  403c30:	66666666 	.word	0x66666666
  403c34:	400a6666 	.word	0x400a6666
  403c38:	0e80d7dd 	.word	0x0e80d7dd
  403c3c:	3ff51493 	.word	0x3ff51493
  403c40:	2000319c 	.word	0x2000319c
  403c44:	2000315c 	.word	0x2000315c
  403c48:	00404b6d 	.word	0x00404b6d
  403c4c:	00404e8d 	.word	0x00404e8d
  403c50:	00404c39 	.word	0x00404c39
  403c54:	00405199 	.word	0x00405199
  403c58:	20002114 	.word	0x20002114
  403c5c:	200031a1 	.word	0x200031a1
  403c60:	200031ac 	.word	0x200031ac
  403c64:	40490000 	.word	0x40490000
  403c68:	20002154 	.word	0x20002154
  403c6c:	40408000 	.word	0x40408000

00403c70 <overTemp>:
	}else if(batteryStable)
		ignoreProtections = false;
		//pio_clear(BOARD_LED_PORT,BOARD_LED);
}

bool overTemp(){
  403c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
		if(processedADCData[i] >= CELL_OVER_TEMP_THRESHOLD)
  403c72:	4915      	ldr	r1, [pc, #84]	; (403cc8 <overTemp+0x58>)
  403c74:	4b15      	ldr	r3, [pc, #84]	; (403ccc <overTemp+0x5c>)
  403c76:	6998      	ldr	r0, [r3, #24]
  403c78:	4b15      	ldr	r3, [pc, #84]	; (403cd0 <overTemp+0x60>)
  403c7a:	4798      	blx	r3
  403c7c:	b9e8      	cbnz	r0, 403cba <overTemp+0x4a>
  403c7e:	4c15      	ldr	r4, [pc, #84]	; (403cd4 <overTemp+0x64>)
  403c80:	f104 0714 	add.w	r7, r4, #20
  403c84:	4e10      	ldr	r6, [pc, #64]	; (403cc8 <overTemp+0x58>)
  403c86:	4d12      	ldr	r5, [pc, #72]	; (403cd0 <overTemp+0x60>)
  403c88:	4631      	mov	r1, r6
  403c8a:	f854 0b04 	ldr.w	r0, [r4], #4
  403c8e:	47a8      	blx	r5
  403c90:	b9a8      	cbnz	r0, 403cbe <overTemp+0x4e>
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
  403c92:	42bc      	cmp	r4, r7
  403c94:	d1f8      	bne.n	403c88 <overTemp+0x18>
			return true;
	if(processedADCData[SHUNTTEMPIDX] >= PCB_OVER_TEMP_THRESHOLD || processedADCData[FETTEMPIDX] >= PCB_OVER_TEMP_THRESHOLD)
  403c96:	4910      	ldr	r1, [pc, #64]	; (403cd8 <overTemp+0x68>)
  403c98:	4b0c      	ldr	r3, [pc, #48]	; (403ccc <overTemp+0x5c>)
  403c9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
  403c9c:	4b0c      	ldr	r3, [pc, #48]	; (403cd0 <overTemp+0x60>)
  403c9e:	4798      	blx	r3
  403ca0:	b978      	cbnz	r0, 403cc2 <overTemp+0x52>
  403ca2:	f04f 0401 	mov.w	r4, #1
  403ca6:	490c      	ldr	r1, [pc, #48]	; (403cd8 <overTemp+0x68>)
  403ca8:	4b08      	ldr	r3, [pc, #32]	; (403ccc <overTemp+0x5c>)
  403caa:	6b98      	ldr	r0, [r3, #56]	; 0x38
  403cac:	4b08      	ldr	r3, [pc, #32]	; (403cd0 <overTemp+0x60>)
  403cae:	4798      	blx	r3
  403cb0:	b908      	cbnz	r0, 403cb6 <overTemp+0x46>
  403cb2:	f04f 0400 	mov.w	r4, #0
  403cb6:	b2e0      	uxtb	r0, r4
  403cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
  403cba:	2001      	movs	r0, #1
  403cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403cbe:	2001      	movs	r0, #1
  403cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
  403cc2:	2001      	movs	r0, #1
	return false;
}
  403cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403cc6:	bf00      	nop
  403cc8:	42700000 	.word	0x42700000
  403ccc:	20002114 	.word	0x20002114
  403cd0:	004057b9 	.word	0x004057b9
  403cd4:	20002130 	.word	0x20002130
  403cd8:	42a00000 	.word	0x42a00000

00403cdc <underTemp>:
bool underTemp(){
  403cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
		if(processedADCData[i] <= UNDER_TEMP_THRESHOLD)
  403cde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  403ce2:	4b0b      	ldr	r3, [pc, #44]	; (403d10 <underTemp+0x34>)
  403ce4:	6998      	ldr	r0, [r3, #24]
  403ce6:	4b0b      	ldr	r3, [pc, #44]	; (403d14 <underTemp+0x38>)
  403ce8:	4798      	blx	r3
  403cea:	b968      	cbnz	r0, 403d08 <underTemp+0x2c>
  403cec:	4c0a      	ldr	r4, [pc, #40]	; (403d18 <underTemp+0x3c>)
  403cee:	f104 0714 	add.w	r7, r4, #20
  403cf2:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
  403cf6:	4d07      	ldr	r5, [pc, #28]	; (403d14 <underTemp+0x38>)
  403cf8:	4631      	mov	r1, r6
  403cfa:	f854 0b04 	ldr.w	r0, [r4], #4
  403cfe:	47a8      	blx	r5
  403d00:	b920      	cbnz	r0, 403d0c <underTemp+0x30>
	for(int i=TEMP1IDX;i<=TEMP6IDX;i++)
  403d02:	42bc      	cmp	r4, r7
  403d04:	d1f8      	bne.n	403cf8 <underTemp+0x1c>
  403d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
  403d08:	2001      	movs	r0, #1
  403d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403d0c:	2001      	movs	r0, #1
	return false;
}
  403d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403d10:	20002114 	.word	0x20002114
  403d14:	004057a5 	.word	0x004057a5
  403d18:	20002130 	.word	0x20002130

00403d1c <overVolt>:
bool overVolt(){
  403d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
		if(processedADCData[i] >= OVER_VOLTAGE_THRESHOLD)
  403d1e:	490b      	ldr	r1, [pc, #44]	; (403d4c <overVolt+0x30>)
  403d20:	4b0b      	ldr	r3, [pc, #44]	; (403d50 <overVolt+0x34>)
  403d22:	6818      	ldr	r0, [r3, #0]
  403d24:	4b0b      	ldr	r3, [pc, #44]	; (403d54 <overVolt+0x38>)
  403d26:	4798      	blx	r3
  403d28:	b960      	cbnz	r0, 403d44 <overVolt+0x28>
  403d2a:	4c0b      	ldr	r4, [pc, #44]	; (403d58 <overVolt+0x3c>)
  403d2c:	f104 0714 	add.w	r7, r4, #20
  403d30:	4e06      	ldr	r6, [pc, #24]	; (403d4c <overVolt+0x30>)
  403d32:	4d08      	ldr	r5, [pc, #32]	; (403d54 <overVolt+0x38>)
  403d34:	4631      	mov	r1, r6
  403d36:	f854 0b04 	ldr.w	r0, [r4], #4
  403d3a:	47a8      	blx	r5
  403d3c:	b920      	cbnz	r0, 403d48 <overVolt+0x2c>
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
  403d3e:	42bc      	cmp	r4, r7
  403d40:	d1f8      	bne.n	403d34 <overVolt+0x18>
  403d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return true;
  403d44:	2001      	movs	r0, #1
  403d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403d48:	2001      	movs	r0, #1
	return false;
}
  403d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403d4c:	40880000 	.word	0x40880000
  403d50:	20002114 	.word	0x20002114
  403d54:	004057b9 	.word	0x004057b9
  403d58:	20002118 	.word	0x20002118
  403d5c:	00000000 	.word	0x00000000

00403d60 <underVolt>:
bool underVolt(){
  403d60:	e92d 4e78 	stmdb	sp!, {r3, r4, r5, r6, r9, sl, fp, lr}
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
		if(processedADCData[i] <= UNDER_VOLTAGE_THRESHOLD)
  403d64:	4b14      	ldr	r3, [pc, #80]	; (403db8 <underVolt+0x58>)
  403d66:	6818      	ldr	r0, [r3, #0]
  403d68:	4b14      	ldr	r3, [pc, #80]	; (403dbc <underVolt+0x5c>)
  403d6a:	4798      	blx	r3
  403d6c:	a310      	add	r3, pc, #64	; (adr r3, 403db0 <underVolt+0x50>)
  403d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d72:	4c13      	ldr	r4, [pc, #76]	; (403dc0 <underVolt+0x60>)
  403d74:	47a0      	blx	r4
  403d76:	b998      	cbnz	r0, 403da0 <underVolt+0x40>
  403d78:	4c12      	ldr	r4, [pc, #72]	; (403dc4 <underVolt+0x64>)
  403d7a:	f104 0914 	add.w	r9, r4, #20
  403d7e:	4e0f      	ldr	r6, [pc, #60]	; (403dbc <underVolt+0x5c>)
  403d80:	f20f 0b2c 	addw	fp, pc, #44	; 0x2c
  403d84:	e9db ab00 	ldrd	sl, fp, [fp]
  403d88:	4d0d      	ldr	r5, [pc, #52]	; (403dc0 <underVolt+0x60>)
  403d8a:	f854 0b04 	ldr.w	r0, [r4], #4
  403d8e:	47b0      	blx	r6
  403d90:	4652      	mov	r2, sl
  403d92:	465b      	mov	r3, fp
  403d94:	47a8      	blx	r5
  403d96:	b930      	cbnz	r0, 403da6 <underVolt+0x46>
	for(int i=CELL1IDX;i<=CELL6IDX;i++)
  403d98:	454c      	cmp	r4, r9
  403d9a:	d1f6      	bne.n	403d8a <underVolt+0x2a>
  403d9c:	e8bd 8e78 	ldmia.w	sp!, {r3, r4, r5, r6, r9, sl, fp, pc}
			return true;
  403da0:	2001      	movs	r0, #1
  403da2:	e8bd 8e78 	ldmia.w	sp!, {r3, r4, r5, r6, r9, sl, fp, pc}
  403da6:	2001      	movs	r0, #1
	return false;
}
  403da8:	e8bd 8e78 	ldmia.w	sp!, {r3, r4, r5, r6, r9, sl, fp, pc}
  403dac:	f3af 8000 	nop.w
  403db0:	66666666 	.word	0x66666666
  403db4:	400a6666 	.word	0x400a6666
  403db8:	20002114 	.word	0x20002114
  403dbc:	00404b91 	.word	0x00404b91
  403dc0:	00405131 	.word	0x00405131
  403dc4:	20002118 	.word	0x20002118

00403dc8 <overCurrent>:
bool overCurrent(){
  403dc8:	b510      	push	{r4, lr}
	if(processedADCData[CURRENTIDX] >= OVER_CURRENT_THRESHOLD)
  403dca:	f04f 0401 	mov.w	r4, #1
  403dce:	4905      	ldr	r1, [pc, #20]	; (403de4 <overCurrent+0x1c>)
  403dd0:	4b05      	ldr	r3, [pc, #20]	; (403de8 <overCurrent+0x20>)
  403dd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
  403dd4:	4b05      	ldr	r3, [pc, #20]	; (403dec <overCurrent+0x24>)
  403dd6:	4798      	blx	r3
  403dd8:	b908      	cbnz	r0, 403dde <overCurrent+0x16>
  403dda:	f04f 0400 	mov.w	r4, #0
		return true;
	return false;
}
  403dde:	f004 0001 	and.w	r0, r4, #1
  403de2:	bd10      	pop	{r4, pc}
  403de4:	42700000 	.word	0x42700000
  403de8:	20002114 	.word	0x20002114
  403dec:	004057b9 	.word	0x004057b9

00403df0 <cellImbalance>:
bool cellImbalance(){
  403df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403df4:	4d18      	ldr	r5, [pc, #96]	; (403e58 <cellImbalance+0x68>)
  403df6:	f105 0a18 	add.w	sl, r5, #24
	float minCell = 5.0, maxCell = 0;
  403dfa:	2600      	movs	r6, #0
  403dfc:	4f17      	ldr	r7, [pc, #92]	; (403e5c <cellImbalance+0x6c>)
	for(int i=CELL1IDX;i<=CELL6IDX;i++){
		if(processedADCData[i] < minCell) minCell = processedADCData[i];
  403dfe:	f8df 906c 	ldr.w	r9, [pc, #108]	; 403e6c <cellImbalance+0x7c>
		if(processedADCData[i] > maxCell) maxCell = processedADCData[i];
  403e02:	f8df 806c 	ldr.w	r8, [pc, #108]	; 403e70 <cellImbalance+0x80>
  403e06:	e001      	b.n	403e0c <cellImbalance+0x1c>
	for(int i=CELL1IDX;i<=CELL6IDX;i++){
  403e08:	4555      	cmp	r5, sl
  403e0a:	d00d      	beq.n	403e28 <cellImbalance+0x38>
		if(processedADCData[i] < minCell) minCell = processedADCData[i];
  403e0c:	f855 4b04 	ldr.w	r4, [r5], #4
  403e10:	4639      	mov	r1, r7
  403e12:	4620      	mov	r0, r4
  403e14:	47c8      	blx	r9
  403e16:	b100      	cbz	r0, 403e1a <cellImbalance+0x2a>
  403e18:	4627      	mov	r7, r4
		if(processedADCData[i] > maxCell) maxCell = processedADCData[i];
  403e1a:	4631      	mov	r1, r6
  403e1c:	4620      	mov	r0, r4
  403e1e:	47c0      	blx	r8
  403e20:	2800      	cmp	r0, #0
  403e22:	d0f1      	beq.n	403e08 <cellImbalance+0x18>
  403e24:	4626      	mov	r6, r4
  403e26:	e7ef      	b.n	403e08 <cellImbalance+0x18>
	}
	if((maxCell - minCell) > CELL_IMBALANCE_THRESHOLD)
  403e28:	4639      	mov	r1, r7
  403e2a:	4630      	mov	r0, r6
  403e2c:	4b0c      	ldr	r3, [pc, #48]	; (403e60 <cellImbalance+0x70>)
  403e2e:	4798      	blx	r3
  403e30:	4b0c      	ldr	r3, [pc, #48]	; (403e64 <cellImbalance+0x74>)
  403e32:	4798      	blx	r3
  403e34:	f04f 0401 	mov.w	r4, #1
  403e38:	a305      	add	r3, pc, #20	; (adr r3, 403e50 <cellImbalance+0x60>)
  403e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e3e:	4d0a      	ldr	r5, [pc, #40]	; (403e68 <cellImbalance+0x78>)
  403e40:	47a8      	blx	r5
  403e42:	b908      	cbnz	r0, 403e48 <cellImbalance+0x58>
  403e44:	f04f 0400 	mov.w	r4, #0
		return true;
	return false;
}
  403e48:	f004 0001 	and.w	r0, r4, #1
  403e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e50:	9999999a 	.word	0x9999999a
  403e54:	3fc99999 	.word	0x3fc99999
  403e58:	20002114 	.word	0x20002114
  403e5c:	40a00000 	.word	0x40a00000
  403e60:	00405241 	.word	0x00405241
  403e64:	00404b91 	.word	0x00404b91
  403e68:	00405159 	.word	0x00405159
  403e6c:	00405791 	.word	0x00405791
  403e70:	004057cd 	.word	0x004057cd

00403e74 <protec>:

void protec(){
  403e74:	b510      	push	{r4, lr}
	
	pio_set(NBAT_EN_PORT, NBAT_EN);
  403e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403e7a:	4810      	ldr	r0, [pc, #64]	; (403ebc <protec+0x48>)
  403e7c:	4b10      	ldr	r3, [pc, #64]	; (403ec0 <protec+0x4c>)
  403e7e:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_TC1);
  403e80:	2018      	movs	r0, #24
  403e82:	4b10      	ldr	r3, [pc, #64]	; (403ec4 <protec+0x50>)
  403e84:	4798      	blx	r3
	tc_init(TC0, BLINK_TC,
  403e86:	4c10      	ldr	r4, [pc, #64]	; (403ec8 <protec+0x54>)
  403e88:	f24c 0204 	movw	r2, #49156	; 0xc004
  403e8c:	2101      	movs	r1, #1
  403e8e:	4620      	mov	r0, r4
  403e90:	4b0e      	ldr	r3, [pc, #56]	; (403ecc <protec+0x58>)
  403e92:	4798      	blx	r3
			TC_CMR_WAVSEL_UP_RC
			|TC_CMR_WAVE
			| TC_CMR_TCCLKS_TIMER_CLOCK5);
	tc_write_rc(TC0,BLINK_TC,16000);
  403e94:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
  403e98:	2101      	movs	r1, #1
  403e9a:	4620      	mov	r0, r4
  403e9c:	4b0c      	ldr	r3, [pc, #48]	; (403ed0 <protec+0x5c>)
  403e9e:	4798      	blx	r3
	tc_enable_interrupt(TC0, BLINK_TC, TC_IER_CPCS);
  403ea0:	2210      	movs	r2, #16
  403ea2:	2101      	movs	r1, #1
  403ea4:	4620      	mov	r0, r4
  403ea6:	4b0b      	ldr	r3, [pc, #44]	; (403ed4 <protec+0x60>)
  403ea8:	4798      	blx	r3
	tc_start(TC0,BLINK_TC);
  403eaa:	2101      	movs	r1, #1
  403eac:	4620      	mov	r0, r4
  403eae:	4b0a      	ldr	r3, [pc, #40]	; (403ed8 <protec+0x64>)
  403eb0:	4798      	blx	r3
  403eb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403eb6:	4b09      	ldr	r3, [pc, #36]	; (403edc <protec+0x68>)
  403eb8:	601a      	str	r2, [r3, #0]
  403eba:	bd10      	pop	{r4, pc}
  403ebc:	400e0e00 	.word	0x400e0e00
  403ec0:	00402f79 	.word	0x00402f79
  403ec4:	0040320d 	.word	0x0040320d
  403ec8:	40010000 	.word	0x40010000
  403ecc:	00400fe3 	.word	0x00400fe3
  403ed0:	0040100b 	.word	0x0040100b
  403ed4:	00401013 	.word	0x00401013
  403ed8:	00400ffb 	.word	0x00400ffb
  403edc:	e000e100 	.word	0xe000e100

00403ee0 <triggerProtections>:
void triggerProtections(){
  403ee0:	b508      	push	{r3, lr}
	if(overTemp())
  403ee2:	4b27      	ldr	r3, [pc, #156]	; (403f80 <triggerProtections+0xa0>)
  403ee4:	4798      	blx	r3
  403ee6:	b110      	cbz	r0, 403eee <triggerProtections+0xe>
		activeProtections[OVERTEMPIDX] = true;
  403ee8:	2201      	movs	r2, #1
  403eea:	4b26      	ldr	r3, [pc, #152]	; (403f84 <triggerProtections+0xa4>)
  403eec:	701a      	strb	r2, [r3, #0]
	if(underTemp())
  403eee:	4b26      	ldr	r3, [pc, #152]	; (403f88 <triggerProtections+0xa8>)
  403ef0:	4798      	blx	r3
  403ef2:	b110      	cbz	r0, 403efa <triggerProtections+0x1a>
		activeProtections[UNDERTEMPIDX] = true;
  403ef4:	2201      	movs	r2, #1
  403ef6:	4b23      	ldr	r3, [pc, #140]	; (403f84 <triggerProtections+0xa4>)
  403ef8:	705a      	strb	r2, [r3, #1]
	if(overVolt())
  403efa:	4b24      	ldr	r3, [pc, #144]	; (403f8c <triggerProtections+0xac>)
  403efc:	4798      	blx	r3
  403efe:	b110      	cbz	r0, 403f06 <triggerProtections+0x26>
		activeProtections[OVERVOLTIDX] = true;
  403f00:	2201      	movs	r2, #1
  403f02:	4b20      	ldr	r3, [pc, #128]	; (403f84 <triggerProtections+0xa4>)
  403f04:	709a      	strb	r2, [r3, #2]
	if(underVolt())
  403f06:	4b22      	ldr	r3, [pc, #136]	; (403f90 <triggerProtections+0xb0>)
  403f08:	4798      	blx	r3
  403f0a:	b110      	cbz	r0, 403f12 <triggerProtections+0x32>
		activeProtections[UNDERVOLTIDX] = true;
  403f0c:	2201      	movs	r2, #1
  403f0e:	4b1d      	ldr	r3, [pc, #116]	; (403f84 <triggerProtections+0xa4>)
  403f10:	70da      	strb	r2, [r3, #3]
	if(overCurrent())
  403f12:	4b20      	ldr	r3, [pc, #128]	; (403f94 <triggerProtections+0xb4>)
  403f14:	4798      	blx	r3
  403f16:	b110      	cbz	r0, 403f1e <triggerProtections+0x3e>
		activeProtections[OVERCURRENTIDX] = true;
  403f18:	2201      	movs	r2, #1
  403f1a:	4b1a      	ldr	r3, [pc, #104]	; (403f84 <triggerProtections+0xa4>)
  403f1c:	711a      	strb	r2, [r3, #4]
	if(cellImbalance())
  403f1e:	4b1e      	ldr	r3, [pc, #120]	; (403f98 <triggerProtections+0xb8>)
  403f20:	4798      	blx	r3
  403f22:	b110      	cbz	r0, 403f2a <triggerProtections+0x4a>
		activeProtections[CELLIMBALANCEIDX] = true;
  403f24:	2201      	movs	r2, #1
  403f26:	4b17      	ldr	r3, [pc, #92]	; (403f84 <triggerProtections+0xa4>)
  403f28:	715a      	strb	r2, [r3, #5]
	batteryStable = !(activeProtections[OVERTEMPIDX] || activeProtections[UNDERTEMPIDX] || activeProtections[OVERVOLTIDX] || activeProtections[UNDERVOLTIDX] || activeProtections[OVERCURRENTIDX] || activeProtections[CELLIMBALANCEIDX]);
  403f2a:	4b16      	ldr	r3, [pc, #88]	; (403f84 <triggerProtections+0xa4>)
  403f2c:	781b      	ldrb	r3, [r3, #0]
  403f2e:	b9ab      	cbnz	r3, 403f5c <triggerProtections+0x7c>
  403f30:	4b14      	ldr	r3, [pc, #80]	; (403f84 <triggerProtections+0xa4>)
  403f32:	785b      	ldrb	r3, [r3, #1]
  403f34:	b993      	cbnz	r3, 403f5c <triggerProtections+0x7c>
  403f36:	4b13      	ldr	r3, [pc, #76]	; (403f84 <triggerProtections+0xa4>)
  403f38:	789b      	ldrb	r3, [r3, #2]
  403f3a:	b97b      	cbnz	r3, 403f5c <triggerProtections+0x7c>
  403f3c:	4b11      	ldr	r3, [pc, #68]	; (403f84 <triggerProtections+0xa4>)
  403f3e:	78db      	ldrb	r3, [r3, #3]
  403f40:	b963      	cbnz	r3, 403f5c <triggerProtections+0x7c>
  403f42:	4b10      	ldr	r3, [pc, #64]	; (403f84 <triggerProtections+0xa4>)
  403f44:	791b      	ldrb	r3, [r3, #4]
  403f46:	b94b      	cbnz	r3, 403f5c <triggerProtections+0x7c>
  403f48:	4b0e      	ldr	r3, [pc, #56]	; (403f84 <triggerProtections+0xa4>)
  403f4a:	795b      	ldrb	r3, [r3, #5]
  403f4c:	b933      	cbnz	r3, 403f5c <triggerProtections+0x7c>
  403f4e:	2201      	movs	r2, #1
  403f50:	4b12      	ldr	r3, [pc, #72]	; (403f9c <triggerProtections+0xbc>)
  403f52:	701a      	strb	r2, [r3, #0]
		ignoreProtections = false;
  403f54:	2200      	movs	r2, #0
  403f56:	4b12      	ldr	r3, [pc, #72]	; (403fa0 <triggerProtections+0xc0>)
  403f58:	701a      	strb	r2, [r3, #0]
  403f5a:	bd08      	pop	{r3, pc}
	batteryStable = !(activeProtections[OVERTEMPIDX] || activeProtections[UNDERTEMPIDX] || activeProtections[OVERVOLTIDX] || activeProtections[UNDERVOLTIDX] || activeProtections[OVERCURRENTIDX] || activeProtections[CELLIMBALANCEIDX]);
  403f5c:	2200      	movs	r2, #0
  403f5e:	4b0f      	ldr	r3, [pc, #60]	; (403f9c <triggerProtections+0xbc>)
  403f60:	701a      	strb	r2, [r3, #0]
	if(!batteryStable && !ignoreProtections && !protected){
  403f62:	4b0f      	ldr	r3, [pc, #60]	; (403fa0 <triggerProtections+0xc0>)
  403f64:	781b      	ldrb	r3, [r3, #0]
  403f66:	2b00      	cmp	r3, #0
  403f68:	d1f7      	bne.n	403f5a <triggerProtections+0x7a>
  403f6a:	4b0e      	ldr	r3, [pc, #56]	; (403fa4 <triggerProtections+0xc4>)
  403f6c:	781b      	ldrb	r3, [r3, #0]
  403f6e:	2b00      	cmp	r3, #0
  403f70:	d1f3      	bne.n	403f5a <triggerProtections+0x7a>
		protec();
  403f72:	4b0d      	ldr	r3, [pc, #52]	; (403fa8 <triggerProtections+0xc8>)
  403f74:	4798      	blx	r3
		protected = true;
  403f76:	2201      	movs	r2, #1
  403f78:	4b0a      	ldr	r3, [pc, #40]	; (403fa4 <triggerProtections+0xc4>)
  403f7a:	701a      	strb	r2, [r3, #0]
}
  403f7c:	bd08      	pop	{r3, pc}
  403f7e:	bf00      	nop
  403f80:	00403c71 	.word	0x00403c71
  403f84:	20003154 	.word	0x20003154
  403f88:	00403cdd 	.word	0x00403cdd
  403f8c:	00403d1d 	.word	0x00403d1d
  403f90:	00403d61 	.word	0x00403d61
  403f94:	00403dc9 	.word	0x00403dc9
  403f98:	00403df1 	.word	0x00403df1
  403f9c:	200000a8 	.word	0x200000a8
  403fa0:	200014a0 	.word	0x200014a0
  403fa4:	200014a1 	.word	0x200014a1
  403fa8:	00403e75 	.word	0x00403e75

00403fac <clearProtections>:
void printInstructions(){
	char * instructions = "\n\rPlease Type\"s\" to get the current status of the battery\n\rAfter determining the best action type \"c\" to temporarily clear all protections\n\r[WARNING] when the protections are cleared, the BMS will ignore all protections till the battery is stable once again\n\r This is indicated by the red LED turning off.\n\r";
	printString(instructions);
}

void clearProtections(){
  403fac:	b538      	push	{r3, r4, r5, lr}
	ignoreProtections = true;
  403fae:	2501      	movs	r5, #1
  403fb0:	4b08      	ldr	r3, [pc, #32]	; (403fd4 <clearProtections+0x28>)
  403fb2:	701d      	strb	r5, [r3, #0]
	pio_clear(NBAT_EN_PORT, NBAT_EN);
  403fb4:	4c08      	ldr	r4, [pc, #32]	; (403fd8 <clearProtections+0x2c>)
  403fb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403fba:	4620      	mov	r0, r4
  403fbc:	4b07      	ldr	r3, [pc, #28]	; (403fdc <clearProtections+0x30>)
  403fbe:	4798      	blx	r3
	tc_stop(TC0,BLINK_TC);
  403fc0:	4629      	mov	r1, r5
  403fc2:	4807      	ldr	r0, [pc, #28]	; (403fe0 <clearProtections+0x34>)
  403fc4:	4b07      	ldr	r3, [pc, #28]	; (403fe4 <clearProtections+0x38>)
  403fc6:	4798      	blx	r3
	pio_set(BOARD_LED_PORT,BOARD_LED);
  403fc8:	2108      	movs	r1, #8
  403fca:	4620      	mov	r0, r4
  403fcc:	4b06      	ldr	r3, [pc, #24]	; (403fe8 <clearProtections+0x3c>)
  403fce:	4798      	blx	r3
  403fd0:	bd38      	pop	{r3, r4, r5, pc}
  403fd2:	bf00      	nop
  403fd4:	200014a0 	.word	0x200014a0
  403fd8:	400e0e00 	.word	0x400e0e00
  403fdc:	00402f7d 	.word	0x00402f7d
  403fe0:	40010000 	.word	0x40010000
  403fe4:	00401003 	.word	0x00401003
  403fe8:	00402f79 	.word	0x00402f79

00403fec <pinWrite>:


/****************************
*	MISC
*****************************/
void pinWrite(Pio* port, const uint32_t pin_mask, bool logic){
  403fec:	b508      	push	{r3, lr}
	if(logic) pio_set(port,pin_mask);
  403fee:	b912      	cbnz	r2, 403ff6 <pinWrite+0xa>
	else pio_clear(port,pin_mask);
  403ff0:	4b02      	ldr	r3, [pc, #8]	; (403ffc <pinWrite+0x10>)
  403ff2:	4798      	blx	r3
  403ff4:	bd08      	pop	{r3, pc}
	if(logic) pio_set(port,pin_mask);
  403ff6:	4b02      	ldr	r3, [pc, #8]	; (404000 <pinWrite+0x14>)
  403ff8:	4798      	blx	r3
  403ffa:	bd08      	pop	{r3, pc}
  403ffc:	00402f7d 	.word	0x00402f7d
  404000:	00402f79 	.word	0x00402f79

00404004 <ADC_Handler>:
	uint32_t ADCState = ADC->ADC_ISR;
  404004:	4b4a      	ldr	r3, [pc, #296]	; (404130 <ADC_Handler+0x12c>)
  404006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if((ADCState & ADC_ISR_DRDY) == ADC_ISR_DRDY){
  404008:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40400c:	f000 808e 	beq.w	40412c <ADC_Handler+0x128>
void ADC_Handler(){
  404010:	b570      	push	{r4, r5, r6, lr}
		int lastConvertedRaw = ADC->ADC_LCDR;
  404012:	4b47      	ldr	r3, [pc, #284]	; (404130 <ADC_Handler+0x12c>)
  404014:	6a1a      	ldr	r2, [r3, #32]
		int lastConvertedChannel = (lastConvertedRaw & ADC_LCDR_CHNB_Msk) >> ADC_LCDR_CHNB_Pos;
  404016:	f3c2 3303 	ubfx	r3, r2, #12, #4
		switch(lastConvertedChannel){
  40401a:	2b05      	cmp	r3, #5
  40401c:	f200 8085 	bhi.w	40412a <ADC_Handler+0x126>
  404020:	e8df f003 	tbb	[pc, r3]
  404024:	40362c03 	.word	0x40362c03
  404028:	7a70      	.short	0x7a70
				rawADCData[CELLVIDXS + currentExternCell] = lastConvertedData;
  40402a:	4b42      	ldr	r3, [pc, #264]	; (404134 <ADC_Handler+0x130>)
  40402c:	681b      	ldr	r3, [r3, #0]
		int lastConvertedData = lastConvertedRaw & ADC_LCDR_LDATA_Msk;
  40402e:	f3c2 020b 	ubfx	r2, r2, #0, #12
				rawADCData[CELLVIDXS + currentExternCell] = lastConvertedData;
  404032:	4941      	ldr	r1, [pc, #260]	; (404138 <ADC_Handler+0x134>)
  404034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				needsProcessing[CELLVIDXS + currentExternCell] = true;
  404038:	2101      	movs	r1, #1
  40403a:	4a40      	ldr	r2, [pc, #256]	; (40413c <ADC_Handler+0x138>)
  40403c:	54d1      	strb	r1, [r2, r3]
				if(currentExternCell == 5) currentExternCell = 0;
  40403e:	2b05      	cmp	r3, #5
  404040:	d018      	beq.n	404074 <ADC_Handler+0x70>
				else currentExternCell++;
  404042:	3301      	adds	r3, #1
  404044:	4a3b      	ldr	r2, [pc, #236]	; (404134 <ADC_Handler+0x130>)
  404046:	6013      	str	r3, [r2, #0]
				pinWrite(CELL_SEL0_PORT,CELL_SEL0,(bool)(currentExternCell&1));
  404048:	4e3a      	ldr	r6, [pc, #232]	; (404134 <ADC_Handler+0x130>)
  40404a:	6832      	ldr	r2, [r6, #0]
  40404c:	4d3c      	ldr	r5, [pc, #240]	; (404140 <ADC_Handler+0x13c>)
  40404e:	f002 0201 	and.w	r2, r2, #1
  404052:	2110      	movs	r1, #16
  404054:	4628      	mov	r0, r5
  404056:	4c3b      	ldr	r4, [pc, #236]	; (404144 <ADC_Handler+0x140>)
  404058:	47a0      	blx	r4
				pinWrite(CELL_SEL1_PORT,CELL_SEL1,(bool)(currentExternCell&2));
  40405a:	6832      	ldr	r2, [r6, #0]
  40405c:	f3c2 0240 	ubfx	r2, r2, #1, #1
  404060:	2120      	movs	r1, #32
  404062:	4628      	mov	r0, r5
  404064:	47a0      	blx	r4
				pinWrite(CELL_SEL2_PORT,CELL_SEL2,(bool)(currentExternCell&4));
  404066:	6832      	ldr	r2, [r6, #0]
  404068:	f3c2 0280 	ubfx	r2, r2, #2, #1
  40406c:	2140      	movs	r1, #64	; 0x40
  40406e:	4628      	mov	r0, r5
  404070:	47a0      	blx	r4
				break;
  404072:	bd70      	pop	{r4, r5, r6, pc}
				if(currentExternCell == 5) currentExternCell = 0;
  404074:	2200      	movs	r2, #0
  404076:	4b2f      	ldr	r3, [pc, #188]	; (404134 <ADC_Handler+0x130>)
  404078:	601a      	str	r2, [r3, #0]
  40407a:	e7e5      	b.n	404048 <ADC_Handler+0x44>
				rawADCData[CURRENTIDX] = adc_get_channel_value(ADC,CURRENT_CHANNEL);
  40407c:	2101      	movs	r1, #1
  40407e:	482c      	ldr	r0, [pc, #176]	; (404130 <ADC_Handler+0x12c>)
  404080:	4b31      	ldr	r3, [pc, #196]	; (404148 <ADC_Handler+0x144>)
  404082:	4798      	blx	r3
  404084:	4b2c      	ldr	r3, [pc, #176]	; (404138 <ADC_Handler+0x134>)
  404086:	6318      	str	r0, [r3, #48]	; 0x30
				needsProcessing[CURRENTIDX] = true;
  404088:	2201      	movs	r2, #1
  40408a:	4b2c      	ldr	r3, [pc, #176]	; (40413c <ADC_Handler+0x138>)
  40408c:	731a      	strb	r2, [r3, #12]
				break;
  40408e:	bd70      	pop	{r4, r5, r6, pc}
				rawADCData[STACKVOLTIDX] = adc_get_channel_value(ADC,STACK_CHANNEL);
  404090:	2102      	movs	r1, #2
  404092:	4827      	ldr	r0, [pc, #156]	; (404130 <ADC_Handler+0x12c>)
  404094:	4b2c      	ldr	r3, [pc, #176]	; (404148 <ADC_Handler+0x144>)
  404096:	4798      	blx	r3
  404098:	4b27      	ldr	r3, [pc, #156]	; (404138 <ADC_Handler+0x134>)
  40409a:	63d8      	str	r0, [r3, #60]	; 0x3c
				needsProcessing[STACKVOLTIDX] = true;
  40409c:	2201      	movs	r2, #1
  40409e:	4b27      	ldr	r3, [pc, #156]	; (40413c <ADC_Handler+0x138>)
  4040a0:	73da      	strb	r2, [r3, #15]
				break;
  4040a2:	bd70      	pop	{r4, r5, r6, pc}
				rawADCData[TEMPIDXS + currentExternTempSensor] = adc_get_channel_value(ADC,EXTERN_TEMP_CHANNEL);
  4040a4:	4d29      	ldr	r5, [pc, #164]	; (40414c <ADC_Handler+0x148>)
  4040a6:	682c      	ldr	r4, [r5, #0]
  4040a8:	3406      	adds	r4, #6
  4040aa:	2103      	movs	r1, #3
  4040ac:	4820      	ldr	r0, [pc, #128]	; (404130 <ADC_Handler+0x12c>)
  4040ae:	4b26      	ldr	r3, [pc, #152]	; (404148 <ADC_Handler+0x144>)
  4040b0:	4798      	blx	r3
  4040b2:	4b21      	ldr	r3, [pc, #132]	; (404138 <ADC_Handler+0x134>)
  4040b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
				needsProcessing[TEMPIDXS + currentExternTempSensor] = true;
  4040b8:	682b      	ldr	r3, [r5, #0]
  4040ba:	4a20      	ldr	r2, [pc, #128]	; (40413c <ADC_Handler+0x138>)
  4040bc:	441a      	add	r2, r3
  4040be:	2101      	movs	r1, #1
  4040c0:	7191      	strb	r1, [r2, #6]
				if(currentExternTempSensor == 5) currentExternTempSensor = 0;
  4040c2:	2b05      	cmp	r3, #5
  4040c4:	d01b      	beq.n	4040fe <ADC_Handler+0xfa>
				else currentExternTempSensor++;
  4040c6:	3301      	adds	r3, #1
  4040c8:	4a20      	ldr	r2, [pc, #128]	; (40414c <ADC_Handler+0x148>)
  4040ca:	6013      	str	r3, [r2, #0]
				pinWrite(TEMP_SEL0_PORT,TEMP_SEL0,(bool)(currentExternTempSensor&1));
  4040cc:	4e1f      	ldr	r6, [pc, #124]	; (40414c <ADC_Handler+0x148>)
  4040ce:	6832      	ldr	r2, [r6, #0]
  4040d0:	4d1b      	ldr	r5, [pc, #108]	; (404140 <ADC_Handler+0x13c>)
  4040d2:	f002 0201 	and.w	r2, r2, #1
  4040d6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4040da:	4628      	mov	r0, r5
  4040dc:	4c19      	ldr	r4, [pc, #100]	; (404144 <ADC_Handler+0x140>)
  4040de:	47a0      	blx	r4
				pinWrite(TEMP_SEL1_PORT,TEMP_SEL1,(bool)(currentExternTempSensor&2));
  4040e0:	6832      	ldr	r2, [r6, #0]
  4040e2:	f3c2 0240 	ubfx	r2, r2, #1, #1
  4040e6:	f44f 7100 	mov.w	r1, #512	; 0x200
  4040ea:	4628      	mov	r0, r5
  4040ec:	47a0      	blx	r4
				pinWrite(TEMP_SEL2_PORT,TEMP_SEL2,(bool)(currentExternTempSensor&4));
  4040ee:	6832      	ldr	r2, [r6, #0]
  4040f0:	f3c2 0280 	ubfx	r2, r2, #2, #1
  4040f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4040f8:	4628      	mov	r0, r5
  4040fa:	47a0      	blx	r4
				break;
  4040fc:	bd70      	pop	{r4, r5, r6, pc}
				if(currentExternTempSensor == 5) currentExternTempSensor = 0;
  4040fe:	2200      	movs	r2, #0
  404100:	602a      	str	r2, [r5, #0]
  404102:	e7e3      	b.n	4040cc <ADC_Handler+0xc8>
				rawADCData[FETTEMPIDX] = adc_get_channel_value(ADC,FET_TEMP_CHANNEL);
  404104:	2104      	movs	r1, #4
  404106:	480a      	ldr	r0, [pc, #40]	; (404130 <ADC_Handler+0x12c>)
  404108:	4b0f      	ldr	r3, [pc, #60]	; (404148 <ADC_Handler+0x144>)
  40410a:	4798      	blx	r3
  40410c:	4b0a      	ldr	r3, [pc, #40]	; (404138 <ADC_Handler+0x134>)
  40410e:	6398      	str	r0, [r3, #56]	; 0x38
				needsProcessing[FETTEMPIDX] = true;
  404110:	2201      	movs	r2, #1
  404112:	4b0a      	ldr	r3, [pc, #40]	; (40413c <ADC_Handler+0x138>)
  404114:	739a      	strb	r2, [r3, #14]
				break;
  404116:	bd70      	pop	{r4, r5, r6, pc}
				rawADCData[SHUNTTEMPIDX] = adc_get_channel_value(ADC,SHUNT_TEMP_CHANNEL);
  404118:	2105      	movs	r1, #5
  40411a:	4805      	ldr	r0, [pc, #20]	; (404130 <ADC_Handler+0x12c>)
  40411c:	4b0a      	ldr	r3, [pc, #40]	; (404148 <ADC_Handler+0x144>)
  40411e:	4798      	blx	r3
  404120:	4b05      	ldr	r3, [pc, #20]	; (404138 <ADC_Handler+0x134>)
  404122:	6358      	str	r0, [r3, #52]	; 0x34
				needsProcessing[SHUNTTEMPIDX] = true;
  404124:	2201      	movs	r2, #1
  404126:	4b05      	ldr	r3, [pc, #20]	; (40413c <ADC_Handler+0x138>)
  404128:	735a      	strb	r2, [r3, #13]
  40412a:	bd70      	pop	{r4, r5, r6, pc}
  40412c:	4770      	bx	lr
  40412e:	bf00      	nop
  404130:	40038000 	.word	0x40038000
  404134:	20001498 	.word	0x20001498
  404138:	2000315c 	.word	0x2000315c
  40413c:	2000319c 	.word	0x2000319c
  404140:	400e0e00 	.word	0x400e0e00
  404144:	00403fed 	.word	0x00403fed
  404148:	00400eb7 	.word	0x00400eb7
  40414c:	2000149c 	.word	0x2000149c

00404150 <TC0_Handler>:
}


void TC0_Handler(){
  404150:	b508      	push	{r3, lr}
	if( (tc_get_status(TC0,ADC_TC) & TC_SR_CPCS) == TC_SR_CPCS)
  404152:	2100      	movs	r1, #0
  404154:	4805      	ldr	r0, [pc, #20]	; (40416c <TC0_Handler+0x1c>)
  404156:	4b06      	ldr	r3, [pc, #24]	; (404170 <TC0_Handler+0x20>)
  404158:	4798      	blx	r3
  40415a:	f010 0f10 	tst.w	r0, #16
  40415e:	d100      	bne.n	404162 <TC0_Handler+0x12>
  404160:	bd08      	pop	{r3, pc}
		adc_start(ADC);
  404162:	4804      	ldr	r0, [pc, #16]	; (404174 <TC0_Handler+0x24>)
  404164:	4b04      	ldr	r3, [pc, #16]	; (404178 <TC0_Handler+0x28>)
  404166:	4798      	blx	r3
}
  404168:	e7fa      	b.n	404160 <TC0_Handler+0x10>
  40416a:	bf00      	nop
  40416c:	40010000 	.word	0x40010000
  404170:	0040101b 	.word	0x0040101b
  404174:	40038000 	.word	0x40038000
  404178:	00400ea7 	.word	0x00400ea7

0040417c <TC1_Handler>:

void TC1_Handler(){
  40417c:	b508      	push	{r3, lr}
	if( (tc_get_status(TC0,BLINK_TC) & TC_SR_CPCS) == TC_SR_CPCS)
  40417e:	2101      	movs	r1, #1
  404180:	4805      	ldr	r0, [pc, #20]	; (404198 <TC1_Handler+0x1c>)
  404182:	4b06      	ldr	r3, [pc, #24]	; (40419c <TC1_Handler+0x20>)
  404184:	4798      	blx	r3
  404186:	f010 0f10 	tst.w	r0, #16
  40418a:	d100      	bne.n	40418e <TC1_Handler+0x12>
  40418c:	bd08      	pop	{r3, pc}
		pio_toggle_pin_group(BOARD_LED_PORT,BOARD_LED);
  40418e:	2108      	movs	r1, #8
  404190:	4803      	ldr	r0, [pc, #12]	; (4041a0 <TC1_Handler+0x24>)
  404192:	4b04      	ldr	r3, [pc, #16]	; (4041a4 <TC1_Handler+0x28>)
  404194:	4798      	blx	r3
}
  404196:	e7f9      	b.n	40418c <TC1_Handler+0x10>
  404198:	40010000 	.word	0x40010000
  40419c:	0040101b 	.word	0x0040101b
  4041a0:	400e0e00 	.word	0x400e0e00
  4041a4:	00403089 	.word	0x00403089

004041a8 <printString>:

void printString(char* str){
  4041a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4041ac:	4605      	mov	r5, r0
	for(int i=0;i<strlen(str);i++){
  4041ae:	2400      	movs	r4, #0
  4041b0:	4f09      	ldr	r7, [pc, #36]	; (4041d8 <printString+0x30>)
		if(udi_cdc_is_tx_ready())
  4041b2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4041dc <printString+0x34>
			udi_cdc_putc(str[i]);
  4041b6:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4041e0 <printString+0x38>
	for(int i=0;i<strlen(str);i++){
  4041ba:	e000      	b.n	4041be <printString+0x16>
  4041bc:	3401      	adds	r4, #1
  4041be:	4628      	mov	r0, r5
  4041c0:	47b8      	blx	r7
  4041c2:	4626      	mov	r6, r4
  4041c4:	42a0      	cmp	r0, r4
  4041c6:	d905      	bls.n	4041d4 <printString+0x2c>
		if(udi_cdc_is_tx_ready())
  4041c8:	47c0      	blx	r8
  4041ca:	2800      	cmp	r0, #0
  4041cc:	d0f6      	beq.n	4041bc <printString+0x14>
			udi_cdc_putc(str[i]);
  4041ce:	5da8      	ldrb	r0, [r5, r6]
  4041d0:	47c8      	blx	r9
  4041d2:	e7f3      	b.n	4041bc <printString+0x14>
	}
}
  4041d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4041d8:	00405a81 	.word	0x00405a81
  4041dc:	0040074d 	.word	0x0040074d
  4041e0:	004007f9 	.word	0x004007f9

004041e4 <printStatus>:
void printStatus(){
  4041e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4041e8:	b0c7      	sub	sp, #284	; 0x11c
	char str[256] = "\n\rName, Current Value, Smallest lifetime value, largest lifetime value\n\r";
  4041ea:	2249      	movs	r2, #73	; 0x49
  4041ec:	4943      	ldr	r1, [pc, #268]	; (4042fc <printStatus+0x118>)
  4041ee:	a806      	add	r0, sp, #24
  4041f0:	4b43      	ldr	r3, [pc, #268]	; (404300 <printStatus+0x11c>)
  4041f2:	4798      	blx	r3
  4041f4:	22b7      	movs	r2, #183	; 0xb7
  4041f6:	2100      	movs	r1, #0
  4041f8:	f10d 0061 	add.w	r0, sp, #97	; 0x61
  4041fc:	4b41      	ldr	r3, [pc, #260]	; (404304 <printStatus+0x120>)
  4041fe:	4798      	blx	r3
	printString(str);
  404200:	a806      	add	r0, sp, #24
  404202:	4b41      	ldr	r3, [pc, #260]	; (404308 <printStatus+0x124>)
  404204:	4798      	blx	r3
  404206:	4d41      	ldr	r5, [pc, #260]	; (40430c <printStatus+0x128>)
	for (int i=0;i<6;i++){
  404208:	2400      	movs	r4, #0
		sprintf(str, "Cell_%i_voltage,%f,%f,%f\n\r",i+1,processedADCData[CELLVIDXS+i],0.0,0.0);
  40420a:	f8df 911c 	ldr.w	r9, [pc, #284]	; 404328 <printStatus+0x144>
  40420e:	2600      	movs	r6, #0
  404210:	2700      	movs	r7, #0
  404212:	f8df 8118 	ldr.w	r8, [pc, #280]	; 40432c <printStatus+0x148>
  404216:	3401      	adds	r4, #1
  404218:	f855 0b04 	ldr.w	r0, [r5], #4
  40421c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  404220:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404224:	47c0      	blx	r8
  404226:	e9cd 0100 	strd	r0, r1, [sp]
  40422a:	4622      	mov	r2, r4
  40422c:	4649      	mov	r1, r9
  40422e:	a806      	add	r0, sp, #24
  404230:	4b37      	ldr	r3, [pc, #220]	; (404310 <printStatus+0x12c>)
  404232:	4798      	blx	r3
		printString(str);
  404234:	a806      	add	r0, sp, #24
  404236:	4b34      	ldr	r3, [pc, #208]	; (404308 <printStatus+0x124>)
  404238:	4798      	blx	r3
	for (int i=0;i<6;i++){
  40423a:	2c06      	cmp	r4, #6
  40423c:	d1eb      	bne.n	404216 <printStatus+0x32>
  40423e:	4d35      	ldr	r5, [pc, #212]	; (404314 <printStatus+0x130>)
  404240:	2400      	movs	r4, #0
		sprintf(str, "Ext_Temp_%i,%f,%f,%f\n\r",i+1,processedADCData[TEMPIDXS+i],0.0,0.0);
  404242:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 404330 <printStatus+0x14c>
  404246:	2600      	movs	r6, #0
  404248:	2700      	movs	r7, #0
  40424a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 40432c <printStatus+0x148>
  40424e:	3401      	adds	r4, #1
  404250:	e9cd 6704 	strd	r6, r7, [sp, #16]
  404254:	e9cd 6702 	strd	r6, r7, [sp, #8]
  404258:	f855 0f04 	ldr.w	r0, [r5, #4]!
  40425c:	47c0      	blx	r8
  40425e:	e9cd 0100 	strd	r0, r1, [sp]
  404262:	4622      	mov	r2, r4
  404264:	4649      	mov	r1, r9
  404266:	a806      	add	r0, sp, #24
  404268:	4b29      	ldr	r3, [pc, #164]	; (404310 <printStatus+0x12c>)
  40426a:	4798      	blx	r3
		printString(str);
  40426c:	a806      	add	r0, sp, #24
  40426e:	4b26      	ldr	r3, [pc, #152]	; (404308 <printStatus+0x124>)
  404270:	4798      	blx	r3
	for (int i=0;i<6;i++){
  404272:	2c06      	cmp	r4, #6
  404274:	d1eb      	bne.n	40424e <printStatus+0x6a>
	sprintf(str, "Current,%f,%f,%f\n\r",processedADCData[CURRENTIDX],0.0,0.0);
  404276:	f8df 9094 	ldr.w	r9, [pc, #148]	; 40430c <printStatus+0x128>
  40427a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 40432c <printStatus+0x148>
  40427e:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
  404282:	47c0      	blx	r8
  404284:	2400      	movs	r4, #0
  404286:	2500      	movs	r5, #0
  404288:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40428c:	e9cd 4500 	strd	r4, r5, [sp]
  404290:	4602      	mov	r2, r0
  404292:	460b      	mov	r3, r1
  404294:	4920      	ldr	r1, [pc, #128]	; (404318 <printStatus+0x134>)
  404296:	a806      	add	r0, sp, #24
  404298:	4f1d      	ldr	r7, [pc, #116]	; (404310 <printStatus+0x12c>)
  40429a:	47b8      	blx	r7
	printString(str);
  40429c:	a806      	add	r0, sp, #24
  40429e:	4e1a      	ldr	r6, [pc, #104]	; (404308 <printStatus+0x124>)
  4042a0:	47b0      	blx	r6
	sprintf(str, "Shunt_Temp,%f,%f,%f\n\r",processedADCData[SHUNTTEMPIDX],0.0,0.0);
  4042a2:	f8d9 0034 	ldr.w	r0, [r9, #52]	; 0x34
  4042a6:	47c0      	blx	r8
  4042a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4042ac:	e9cd 4500 	strd	r4, r5, [sp]
  4042b0:	4602      	mov	r2, r0
  4042b2:	460b      	mov	r3, r1
  4042b4:	4919      	ldr	r1, [pc, #100]	; (40431c <printStatus+0x138>)
  4042b6:	a806      	add	r0, sp, #24
  4042b8:	47b8      	blx	r7
	printString(str);
  4042ba:	a806      	add	r0, sp, #24
  4042bc:	47b0      	blx	r6
	sprintf(str, "Fet_Temp,%f,%f,%f\n\r",processedADCData[FETTEMPIDX],0.0,0.0);
  4042be:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
  4042c2:	47c0      	blx	r8
  4042c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4042c8:	e9cd 4500 	strd	r4, r5, [sp]
  4042cc:	4602      	mov	r2, r0
  4042ce:	460b      	mov	r3, r1
  4042d0:	4913      	ldr	r1, [pc, #76]	; (404320 <printStatus+0x13c>)
  4042d2:	a806      	add	r0, sp, #24
  4042d4:	47b8      	blx	r7
	printString(str);
  4042d6:	a806      	add	r0, sp, #24
  4042d8:	47b0      	blx	r6
	sprintf(str, "Stack_Voltage,%f,%f,%f\n\r",processedADCData[STACKVOLTIDX],0.0,0.0);
  4042da:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
  4042de:	47c0      	blx	r8
  4042e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4042e4:	e9cd 4500 	strd	r4, r5, [sp]
  4042e8:	4602      	mov	r2, r0
  4042ea:	460b      	mov	r3, r1
  4042ec:	490d      	ldr	r1, [pc, #52]	; (404324 <printStatus+0x140>)
  4042ee:	a806      	add	r0, sp, #24
  4042f0:	47b8      	blx	r7
	printString(str);
  4042f2:	a806      	add	r0, sp, #24
  4042f4:	47b0      	blx	r6
}
  4042f6:	b047      	add	sp, #284	; 0x11c
  4042f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042fc:	00409830 	.word	0x00409830
  404300:	0040583d 	.word	0x0040583d
  404304:	00405971 	.word	0x00405971
  404308:	004041a9 	.word	0x004041a9
  40430c:	20002114 	.word	0x20002114
  404310:	00405a0d 	.word	0x00405a0d
  404314:	20002128 	.word	0x20002128
  404318:	00409ae0 	.word	0x00409ae0
  40431c:	00409af4 	.word	0x00409af4
  404320:	00409b0c 	.word	0x00409b0c
  404324:	00409b20 	.word	0x00409b20
  404328:	00409aac 	.word	0x00409aac
  40432c:	00404b91 	.word	0x00404b91
  404330:	00409ac8 	.word	0x00409ac8

00404334 <printInstructions>:
void printInstructions(){
  404334:	b508      	push	{r3, lr}
	printString(instructions);
  404336:	4802      	ldr	r0, [pc, #8]	; (404340 <printInstructions+0xc>)
  404338:	4b02      	ldr	r3, [pc, #8]	; (404344 <printInstructions+0x10>)
  40433a:	4798      	blx	r3
  40433c:	bd08      	pop	{r3, pc}
  40433e:	bf00      	nop
  404340:	00409978 	.word	0x00409978
  404344:	004041a9 	.word	0x004041a9

00404348 <checkUSB>:
void checkUSB(){
  404348:	b508      	push	{r3, lr}
	if(udi_cdc_get_nb_received_data() > 0){
  40434a:	4b0c      	ldr	r3, [pc, #48]	; (40437c <checkUSB+0x34>)
  40434c:	4798      	blx	r3
  40434e:	b900      	cbnz	r0, 404352 <checkUSB+0xa>
  404350:	bd08      	pop	{r3, pc}
		char inChar = udi_cdc_getc();
  404352:	4b0b      	ldr	r3, [pc, #44]	; (404380 <checkUSB+0x38>)
  404354:	4798      	blx	r3
  404356:	b2c0      	uxtb	r0, r0
		if (inChar == 0) return;
  404358:	2800      	cmp	r0, #0
  40435a:	d0f9      	beq.n	404350 <checkUSB+0x8>
		if(inChar == 's')
  40435c:	2873      	cmp	r0, #115	; 0x73
  40435e:	d004      	beq.n	40436a <checkUSB+0x22>
		else if(inChar == 'c'){
  404360:	2863      	cmp	r0, #99	; 0x63
  404362:	d005      	beq.n	404370 <checkUSB+0x28>
			printInstructions();
  404364:	4b07      	ldr	r3, [pc, #28]	; (404384 <checkUSB+0x3c>)
  404366:	4798      	blx	r3
  404368:	e7f2      	b.n	404350 <checkUSB+0x8>
			printStatus();
  40436a:	4b07      	ldr	r3, [pc, #28]	; (404388 <checkUSB+0x40>)
  40436c:	4798      	blx	r3
  40436e:	bd08      	pop	{r3, pc}
			clearProtections();
  404370:	4b06      	ldr	r3, [pc, #24]	; (40438c <checkUSB+0x44>)
  404372:	4798      	blx	r3
			printString(message);
  404374:	4806      	ldr	r0, [pc, #24]	; (404390 <checkUSB+0x48>)
  404376:	4b07      	ldr	r3, [pc, #28]	; (404394 <checkUSB+0x4c>)
  404378:	4798      	blx	r3
  40437a:	bd08      	pop	{r3, pc}
  40437c:	00400425 	.word	0x00400425
  404380:	004006ad 	.word	0x004006ad
  404384:	00404335 	.word	0x00404335
  404388:	004041e5 	.word	0x004041e5
  40438c:	00403fad 	.word	0x00403fad
  404390:	00409930 	.word	0x00409930
  404394:	004041a9 	.word	0x004041a9

00404398 <main>:
{
  404398:	b508      	push	{r3, lr}
	sysclk_init();
  40439a:	4b07      	ldr	r3, [pc, #28]	; (4043b8 <main+0x20>)
  40439c:	4798      	blx	r3
	board_init();
  40439e:	4b07      	ldr	r3, [pc, #28]	; (4043bc <main+0x24>)
  4043a0:	4798      	blx	r3
	adcSetup();
  4043a2:	4b07      	ldr	r3, [pc, #28]	; (4043c0 <main+0x28>)
  4043a4:	4798      	blx	r3
		modbus_update();
  4043a6:	4e07      	ldr	r6, [pc, #28]	; (4043c4 <main+0x2c>)
		analogCalculate();
  4043a8:	4d07      	ldr	r5, [pc, #28]	; (4043c8 <main+0x30>)
		triggerProtections();
  4043aa:	4c08      	ldr	r4, [pc, #32]	; (4043cc <main+0x34>)
		modbus_update();
  4043ac:	47b0      	blx	r6
		analogCalculate();
  4043ae:	47a8      	blx	r5
		triggerProtections();
  4043b0:	47a0      	blx	r4
		checkUSB();
  4043b2:	4b07      	ldr	r3, [pc, #28]	; (4043d0 <main+0x38>)
  4043b4:	4798      	blx	r3
  4043b6:	e7f9      	b.n	4043ac <main+0x14>
  4043b8:	00402f15 	.word	0x00402f15
  4043bc:	0040337d 	.word	0x0040337d
  4043c0:	00403859 	.word	0x00403859
  4043c4:	00402dad 	.word	0x00402dad
  4043c8:	00403a91 	.word	0x00403a91
  4043cc:	00403ee1 	.word	0x00403ee1
  4043d0:	00404349 	.word	0x00404349

004043d4 <log>:
  4043d4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  4043d8:	b08a      	sub	sp, #40	; 0x28
  4043da:	4604      	mov	r4, r0
  4043dc:	460d      	mov	r5, r1
  4043de:	f000 f877 	bl	4044d0 <__ieee754_log>
  4043e2:	4b35      	ldr	r3, [pc, #212]	; (4044b8 <log+0xe4>)
  4043e4:	f993 6000 	ldrsb.w	r6, [r3]
  4043e8:	1c73      	adds	r3, r6, #1
  4043ea:	4680      	mov	r8, r0
  4043ec:	4689      	mov	r9, r1
  4043ee:	d00d      	beq.n	40440c <log+0x38>
  4043f0:	4622      	mov	r2, r4
  4043f2:	462b      	mov	r3, r5
  4043f4:	4620      	mov	r0, r4
  4043f6:	4629      	mov	r1, r5
  4043f8:	f000 feb8 	bl	40516c <__aeabi_dcmpun>
  4043fc:	b930      	cbnz	r0, 40440c <log+0x38>
  4043fe:	2200      	movs	r2, #0
  404400:	2300      	movs	r3, #0
  404402:	4620      	mov	r0, r4
  404404:	4629      	mov	r1, r5
  404406:	f000 fea7 	bl	405158 <__aeabi_dcmpgt>
  40440a:	b120      	cbz	r0, 404416 <log+0x42>
  40440c:	4640      	mov	r0, r8
  40440e:	4649      	mov	r1, r9
  404410:	b00a      	add	sp, #40	; 0x28
  404412:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  404416:	4b29      	ldr	r3, [pc, #164]	; (4044bc <log+0xe8>)
  404418:	9008      	str	r0, [sp, #32]
  40441a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  40441e:	e9cd 4504 	strd	r4, r5, [sp, #16]
  404422:	9301      	str	r3, [sp, #4]
  404424:	4620      	mov	r0, r4
  404426:	4629      	mov	r1, r5
  404428:	b9ce      	cbnz	r6, 40445e <log+0x8a>
  40442a:	4d25      	ldr	r5, [pc, #148]	; (4044c0 <log+0xec>)
  40442c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
  404430:	2200      	movs	r2, #0
  404432:	2300      	movs	r3, #0
  404434:	e9cd 4506 	strd	r4, r5, [sp, #24]
  404438:	f000 fe66 	bl	405108 <__aeabi_dcmpeq>
  40443c:	2800      	cmp	r0, #0
  40443e:	d033      	beq.n	4044a8 <log+0xd4>
  404440:	2302      	movs	r3, #2
  404442:	9300      	str	r3, [sp, #0]
  404444:	4668      	mov	r0, sp
  404446:	f000 fa37 	bl	4048b8 <matherr>
  40444a:	b1a8      	cbz	r0, 404478 <log+0xa4>
  40444c:	9b08      	ldr	r3, [sp, #32]
  40444e:	b9c3      	cbnz	r3, 404482 <log+0xae>
  404450:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  404454:	4640      	mov	r0, r8
  404456:	4649      	mov	r1, r9
  404458:	b00a      	add	sp, #40	; 0x28
  40445a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  40445e:	4d19      	ldr	r5, [pc, #100]	; (4044c4 <log+0xf0>)
  404460:	2400      	movs	r4, #0
  404462:	2200      	movs	r2, #0
  404464:	2300      	movs	r3, #0
  404466:	e9cd 4506 	strd	r4, r5, [sp, #24]
  40446a:	f000 fe4d 	bl	405108 <__aeabi_dcmpeq>
  40446e:	b168      	cbz	r0, 40448c <log+0xb8>
  404470:	2302      	movs	r3, #2
  404472:	429e      	cmp	r6, r3
  404474:	9300      	str	r3, [sp, #0]
  404476:	d1e5      	bne.n	404444 <log+0x70>
  404478:	f001 f9b2 	bl	4057e0 <__errno>
  40447c:	2322      	movs	r3, #34	; 0x22
  40447e:	6003      	str	r3, [r0, #0]
  404480:	e7e4      	b.n	40444c <log+0x78>
  404482:	f001 f9ad 	bl	4057e0 <__errno>
  404486:	9b08      	ldr	r3, [sp, #32]
  404488:	6003      	str	r3, [r0, #0]
  40448a:	e7e1      	b.n	404450 <log+0x7c>
  40448c:	2301      	movs	r3, #1
  40448e:	2e02      	cmp	r6, #2
  404490:	9300      	str	r3, [sp, #0]
  404492:	d10b      	bne.n	4044ac <log+0xd8>
  404494:	f001 f9a4 	bl	4057e0 <__errno>
  404498:	2321      	movs	r3, #33	; 0x21
  40449a:	6003      	str	r3, [r0, #0]
  40449c:	480a      	ldr	r0, [pc, #40]	; (4044c8 <log+0xf4>)
  40449e:	f000 fa0d 	bl	4048bc <nan>
  4044a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4044a6:	e7d1      	b.n	40444c <log+0x78>
  4044a8:	2301      	movs	r3, #1
  4044aa:	9300      	str	r3, [sp, #0]
  4044ac:	4668      	mov	r0, sp
  4044ae:	f000 fa03 	bl	4048b8 <matherr>
  4044b2:	2800      	cmp	r0, #0
  4044b4:	d1f2      	bne.n	40449c <log+0xc8>
  4044b6:	e7ed      	b.n	404494 <log+0xc0>
  4044b8:	200000a9 	.word	0x200000a9
  4044bc:	00409b3c 	.word	0x00409b3c
  4044c0:	c7efffff 	.word	0xc7efffff
  4044c4:	fff00000 	.word	0xfff00000
  4044c8:	00409b38 	.word	0x00409b38
  4044cc:	00000000 	.word	0x00000000

004044d0 <__ieee754_log>:
  4044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4044d8:	b085      	sub	sp, #20
  4044da:	4606      	mov	r6, r0
  4044dc:	460f      	mov	r7, r1
  4044de:	460b      	mov	r3, r1
  4044e0:	da5a      	bge.n	404598 <__ieee754_log+0xc8>
  4044e2:	4602      	mov	r2, r0
  4044e4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
  4044e8:	4322      	orrs	r2, r4
  4044ea:	f000 80f8 	beq.w	4046de <__ieee754_log+0x20e>
  4044ee:	2900      	cmp	r1, #0
  4044f0:	f2c0 817a 	blt.w	4047e8 <__ieee754_log+0x318>
  4044f4:	2200      	movs	r2, #0
  4044f6:	4bd6      	ldr	r3, [pc, #856]	; (404850 <__ieee754_log+0x380>)
  4044f8:	f000 fb9e 	bl	404c38 <__aeabi_dmul>
  4044fc:	4ad5      	ldr	r2, [pc, #852]	; (404854 <__ieee754_log+0x384>)
  4044fe:	460b      	mov	r3, r1
  404500:	4293      	cmp	r3, r2
  404502:	4606      	mov	r6, r0
  404504:	460f      	mov	r7, r1
  404506:	f06f 0c35 	mvn.w	ip, #53	; 0x35
  40450a:	dc4a      	bgt.n	4045a2 <__ieee754_log+0xd2>
  40450c:	f3c3 0513 	ubfx	r5, r3, #0, #20
  404510:	f505 2e15 	add.w	lr, r5, #610304	; 0x95000
  404514:	f60e 7e64 	addw	lr, lr, #3940	; 0xf64
  404518:	f40e 1e80 	and.w	lr, lr, #1048576	; 0x100000
  40451c:	f08e 527f 	eor.w	r2, lr, #1069547520	; 0x3fc00000
  404520:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
  404524:	151c      	asrs	r4, r3, #20
  404526:	ea42 0705 	orr.w	r7, r2, r5
  40452a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40452e:	4464      	add	r4, ip
  404530:	2200      	movs	r2, #0
  404532:	4bc9      	ldr	r3, [pc, #804]	; (404858 <__ieee754_log+0x388>)
  404534:	4630      	mov	r0, r6
  404536:	4639      	mov	r1, r7
  404538:	eb04 541e 	add.w	r4, r4, lr, lsr #20
  40453c:	f000 f9c8 	bl	4048d0 <__aeabi_dsub>
  404540:	1cab      	adds	r3, r5, #2
  404542:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404546:	2b02      	cmp	r3, #2
  404548:	4682      	mov	sl, r0
  40454a:	468b      	mov	fp, r1
  40454c:	f04f 0200 	mov.w	r2, #0
  404550:	dc30      	bgt.n	4045b4 <__ieee754_log+0xe4>
  404552:	2300      	movs	r3, #0
  404554:	f000 fdd8 	bl	405108 <__aeabi_dcmpeq>
  404558:	2800      	cmp	r0, #0
  40455a:	f000 80c9 	beq.w	4046f0 <__ieee754_log+0x220>
  40455e:	2c00      	cmp	r4, #0
  404560:	f000 814b 	beq.w	4047fa <__ieee754_log+0x32a>
  404564:	4620      	mov	r0, r4
  404566:	f000 fb01 	bl	404b6c <__aeabi_i2d>
  40456a:	a3a5      	add	r3, pc, #660	; (adr r3, 404800 <__ieee754_log+0x330>)
  40456c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404570:	4606      	mov	r6, r0
  404572:	460f      	mov	r7, r1
  404574:	f000 fb60 	bl	404c38 <__aeabi_dmul>
  404578:	a3a3      	add	r3, pc, #652	; (adr r3, 404808 <__ieee754_log+0x338>)
  40457a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40457e:	4604      	mov	r4, r0
  404580:	460d      	mov	r5, r1
  404582:	4630      	mov	r0, r6
  404584:	4639      	mov	r1, r7
  404586:	f000 fb57 	bl	404c38 <__aeabi_dmul>
  40458a:	4602      	mov	r2, r0
  40458c:	460b      	mov	r3, r1
  40458e:	4620      	mov	r0, r4
  404590:	4629      	mov	r1, r5
  404592:	f000 f99f 	bl	4048d4 <__adddf3>
  404596:	e00a      	b.n	4045ae <__ieee754_log+0xde>
  404598:	4aae      	ldr	r2, [pc, #696]	; (404854 <__ieee754_log+0x384>)
  40459a:	4293      	cmp	r3, r2
  40459c:	f04f 0c00 	mov.w	ip, #0
  4045a0:	ddb4      	ble.n	40450c <__ieee754_log+0x3c>
  4045a2:	4632      	mov	r2, r6
  4045a4:	463b      	mov	r3, r7
  4045a6:	4630      	mov	r0, r6
  4045a8:	4639      	mov	r1, r7
  4045aa:	f000 f993 	bl	4048d4 <__adddf3>
  4045ae:	b005      	add	sp, #20
  4045b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4045b8:	f000 f98c 	bl	4048d4 <__adddf3>
  4045bc:	4602      	mov	r2, r0
  4045be:	460b      	mov	r3, r1
  4045c0:	4650      	mov	r0, sl
  4045c2:	4659      	mov	r1, fp
  4045c4:	f000 fc62 	bl	404e8c <__aeabi_ddiv>
  4045c8:	4606      	mov	r6, r0
  4045ca:	4620      	mov	r0, r4
  4045cc:	460f      	mov	r7, r1
  4045ce:	f000 facd 	bl	404b6c <__aeabi_i2d>
  4045d2:	4632      	mov	r2, r6
  4045d4:	e9cd 0100 	strd	r0, r1, [sp]
  4045d8:	463b      	mov	r3, r7
  4045da:	4630      	mov	r0, r6
  4045dc:	4639      	mov	r1, r7
  4045de:	e9cd 6702 	strd	r6, r7, [sp, #8]
  4045e2:	f000 fb29 	bl	404c38 <__aeabi_dmul>
  4045e6:	4602      	mov	r2, r0
  4045e8:	460b      	mov	r3, r1
  4045ea:	4680      	mov	r8, r0
  4045ec:	4689      	mov	r9, r1
  4045ee:	f000 fb23 	bl	404c38 <__aeabi_dmul>
  4045f2:	a387      	add	r3, pc, #540	; (adr r3, 404810 <__ieee754_log+0x340>)
  4045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045f8:	4606      	mov	r6, r0
  4045fa:	460f      	mov	r7, r1
  4045fc:	f000 fb1c 	bl	404c38 <__aeabi_dmul>
  404600:	a385      	add	r3, pc, #532	; (adr r3, 404818 <__ieee754_log+0x348>)
  404602:	e9d3 2300 	ldrd	r2, r3, [r3]
  404606:	f000 f965 	bl	4048d4 <__adddf3>
  40460a:	4632      	mov	r2, r6
  40460c:	463b      	mov	r3, r7
  40460e:	f000 fb13 	bl	404c38 <__aeabi_dmul>
  404612:	a383      	add	r3, pc, #524	; (adr r3, 404820 <__ieee754_log+0x350>)
  404614:	e9d3 2300 	ldrd	r2, r3, [r3]
  404618:	f000 f95c 	bl	4048d4 <__adddf3>
  40461c:	4632      	mov	r2, r6
  40461e:	463b      	mov	r3, r7
  404620:	f000 fb0a 	bl	404c38 <__aeabi_dmul>
  404624:	a380      	add	r3, pc, #512	; (adr r3, 404828 <__ieee754_log+0x358>)
  404626:	e9d3 2300 	ldrd	r2, r3, [r3]
  40462a:	f000 f953 	bl	4048d4 <__adddf3>
  40462e:	4642      	mov	r2, r8
  404630:	464b      	mov	r3, r9
  404632:	f000 fb01 	bl	404c38 <__aeabi_dmul>
  404636:	a37e      	add	r3, pc, #504	; (adr r3, 404830 <__ieee754_log+0x360>)
  404638:	e9d3 2300 	ldrd	r2, r3, [r3]
  40463c:	4680      	mov	r8, r0
  40463e:	4689      	mov	r9, r1
  404640:	4630      	mov	r0, r6
  404642:	4639      	mov	r1, r7
  404644:	f000 faf8 	bl	404c38 <__aeabi_dmul>
  404648:	a37b      	add	r3, pc, #492	; (adr r3, 404838 <__ieee754_log+0x368>)
  40464a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40464e:	f000 f941 	bl	4048d4 <__adddf3>
  404652:	4632      	mov	r2, r6
  404654:	463b      	mov	r3, r7
  404656:	f000 faef 	bl	404c38 <__aeabi_dmul>
  40465a:	a379      	add	r3, pc, #484	; (adr r3, 404840 <__ieee754_log+0x370>)
  40465c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404660:	f000 f938 	bl	4048d4 <__adddf3>
  404664:	4632      	mov	r2, r6
  404666:	463b      	mov	r3, r7
  404668:	f000 fae6 	bl	404c38 <__aeabi_dmul>
  40466c:	460b      	mov	r3, r1
  40466e:	4602      	mov	r2, r0
  404670:	4649      	mov	r1, r9
  404672:	4640      	mov	r0, r8
  404674:	f000 f92e 	bl	4048d4 <__adddf3>
  404678:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
  40467c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
  404680:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
  404684:	3551      	adds	r5, #81	; 0x51
  404686:	431d      	orrs	r5, r3
  404688:	2d00      	cmp	r5, #0
  40468a:	4680      	mov	r8, r0
  40468c:	4689      	mov	r9, r1
  40468e:	dd56      	ble.n	40473e <__ieee754_log+0x26e>
  404690:	2200      	movs	r2, #0
  404692:	4b72      	ldr	r3, [pc, #456]	; (40485c <__ieee754_log+0x38c>)
  404694:	4650      	mov	r0, sl
  404696:	4659      	mov	r1, fp
  404698:	f000 face 	bl	404c38 <__aeabi_dmul>
  40469c:	4652      	mov	r2, sl
  40469e:	465b      	mov	r3, fp
  4046a0:	f000 faca 	bl	404c38 <__aeabi_dmul>
  4046a4:	4606      	mov	r6, r0
  4046a6:	460f      	mov	r7, r1
  4046a8:	2c00      	cmp	r4, #0
  4046aa:	d168      	bne.n	40477e <__ieee754_log+0x2ae>
  4046ac:	4632      	mov	r2, r6
  4046ae:	463b      	mov	r3, r7
  4046b0:	4640      	mov	r0, r8
  4046b2:	4649      	mov	r1, r9
  4046b4:	f000 f90e 	bl	4048d4 <__adddf3>
  4046b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4046bc:	f000 fabc 	bl	404c38 <__aeabi_dmul>
  4046c0:	4602      	mov	r2, r0
  4046c2:	460b      	mov	r3, r1
  4046c4:	4630      	mov	r0, r6
  4046c6:	4639      	mov	r1, r7
  4046c8:	f000 f902 	bl	4048d0 <__aeabi_dsub>
  4046cc:	4602      	mov	r2, r0
  4046ce:	460b      	mov	r3, r1
  4046d0:	4650      	mov	r0, sl
  4046d2:	4659      	mov	r1, fp
  4046d4:	f000 f8fc 	bl	4048d0 <__aeabi_dsub>
  4046d8:	b005      	add	sp, #20
  4046da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046de:	2200      	movs	r2, #0
  4046e0:	2300      	movs	r3, #0
  4046e2:	2000      	movs	r0, #0
  4046e4:	495e      	ldr	r1, [pc, #376]	; (404860 <__ieee754_log+0x390>)
  4046e6:	f000 fbd1 	bl	404e8c <__aeabi_ddiv>
  4046ea:	b005      	add	sp, #20
  4046ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046f0:	a355      	add	r3, pc, #340	; (adr r3, 404848 <__ieee754_log+0x378>)
  4046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046f6:	4650      	mov	r0, sl
  4046f8:	4659      	mov	r1, fp
  4046fa:	f000 fa9d 	bl	404c38 <__aeabi_dmul>
  4046fe:	4602      	mov	r2, r0
  404700:	460b      	mov	r3, r1
  404702:	2000      	movs	r0, #0
  404704:	4955      	ldr	r1, [pc, #340]	; (40485c <__ieee754_log+0x38c>)
  404706:	f000 f8e3 	bl	4048d0 <__aeabi_dsub>
  40470a:	4652      	mov	r2, sl
  40470c:	4606      	mov	r6, r0
  40470e:	460f      	mov	r7, r1
  404710:	465b      	mov	r3, fp
  404712:	4650      	mov	r0, sl
  404714:	4659      	mov	r1, fp
  404716:	f000 fa8f 	bl	404c38 <__aeabi_dmul>
  40471a:	4602      	mov	r2, r0
  40471c:	460b      	mov	r3, r1
  40471e:	4630      	mov	r0, r6
  404720:	4639      	mov	r1, r7
  404722:	f000 fa89 	bl	404c38 <__aeabi_dmul>
  404726:	4606      	mov	r6, r0
  404728:	460f      	mov	r7, r1
  40472a:	2c00      	cmp	r4, #0
  40472c:	f040 809a 	bne.w	404864 <__ieee754_log+0x394>
  404730:	4602      	mov	r2, r0
  404732:	460b      	mov	r3, r1
  404734:	4650      	mov	r0, sl
  404736:	4659      	mov	r1, fp
  404738:	f000 f8ca 	bl	4048d0 <__aeabi_dsub>
  40473c:	e737      	b.n	4045ae <__ieee754_log+0xde>
  40473e:	2c00      	cmp	r4, #0
  404740:	f000 80a4 	beq.w	40488c <__ieee754_log+0x3bc>
  404744:	a32e      	add	r3, pc, #184	; (adr r3, 404800 <__ieee754_log+0x330>)
  404746:	e9d3 2300 	ldrd	r2, r3, [r3]
  40474a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40474e:	f000 fa73 	bl	404c38 <__aeabi_dmul>
  404752:	4642      	mov	r2, r8
  404754:	464b      	mov	r3, r9
  404756:	4604      	mov	r4, r0
  404758:	460d      	mov	r5, r1
  40475a:	4650      	mov	r0, sl
  40475c:	4659      	mov	r1, fp
  40475e:	f000 f8b7 	bl	4048d0 <__aeabi_dsub>
  404762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404766:	f000 fa67 	bl	404c38 <__aeabi_dmul>
  40476a:	a327      	add	r3, pc, #156	; (adr r3, 404808 <__ieee754_log+0x338>)
  40476c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404770:	4606      	mov	r6, r0
  404772:	460f      	mov	r7, r1
  404774:	e9dd 0100 	ldrd	r0, r1, [sp]
  404778:	f000 fa5e 	bl	404c38 <__aeabi_dmul>
  40477c:	e021      	b.n	4047c2 <__ieee754_log+0x2f2>
  40477e:	a320      	add	r3, pc, #128	; (adr r3, 404800 <__ieee754_log+0x330>)
  404780:	e9d3 2300 	ldrd	r2, r3, [r3]
  404784:	e9dd 0100 	ldrd	r0, r1, [sp]
  404788:	f000 fa56 	bl	404c38 <__aeabi_dmul>
  40478c:	4632      	mov	r2, r6
  40478e:	463b      	mov	r3, r7
  404790:	4604      	mov	r4, r0
  404792:	460d      	mov	r5, r1
  404794:	4640      	mov	r0, r8
  404796:	4649      	mov	r1, r9
  404798:	f000 f89c 	bl	4048d4 <__adddf3>
  40479c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4047a0:	f000 fa4a 	bl	404c38 <__aeabi_dmul>
  4047a4:	a318      	add	r3, pc, #96	; (adr r3, 404808 <__ieee754_log+0x338>)
  4047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047aa:	4680      	mov	r8, r0
  4047ac:	4689      	mov	r9, r1
  4047ae:	e9dd 0100 	ldrd	r0, r1, [sp]
  4047b2:	f000 fa41 	bl	404c38 <__aeabi_dmul>
  4047b6:	4602      	mov	r2, r0
  4047b8:	460b      	mov	r3, r1
  4047ba:	4640      	mov	r0, r8
  4047bc:	4649      	mov	r1, r9
  4047be:	f000 f889 	bl	4048d4 <__adddf3>
  4047c2:	4602      	mov	r2, r0
  4047c4:	460b      	mov	r3, r1
  4047c6:	4630      	mov	r0, r6
  4047c8:	4639      	mov	r1, r7
  4047ca:	f000 f881 	bl	4048d0 <__aeabi_dsub>
  4047ce:	4652      	mov	r2, sl
  4047d0:	465b      	mov	r3, fp
  4047d2:	f000 f87d 	bl	4048d0 <__aeabi_dsub>
  4047d6:	4602      	mov	r2, r0
  4047d8:	460b      	mov	r3, r1
  4047da:	4620      	mov	r0, r4
  4047dc:	4629      	mov	r1, r5
  4047de:	f000 f877 	bl	4048d0 <__aeabi_dsub>
  4047e2:	b005      	add	sp, #20
  4047e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047e8:	4602      	mov	r2, r0
  4047ea:	460b      	mov	r3, r1
  4047ec:	f000 f870 	bl	4048d0 <__aeabi_dsub>
  4047f0:	2200      	movs	r2, #0
  4047f2:	2300      	movs	r3, #0
  4047f4:	f000 fb4a 	bl	404e8c <__aeabi_ddiv>
  4047f8:	e6d9      	b.n	4045ae <__ieee754_log+0xde>
  4047fa:	2000      	movs	r0, #0
  4047fc:	2100      	movs	r1, #0
  4047fe:	e6d6      	b.n	4045ae <__ieee754_log+0xde>
  404800:	fee00000 	.word	0xfee00000
  404804:	3fe62e42 	.word	0x3fe62e42
  404808:	35793c76 	.word	0x35793c76
  40480c:	3dea39ef 	.word	0x3dea39ef
  404810:	df3e5244 	.word	0xdf3e5244
  404814:	3fc2f112 	.word	0x3fc2f112
  404818:	96cb03de 	.word	0x96cb03de
  40481c:	3fc74664 	.word	0x3fc74664
  404820:	94229359 	.word	0x94229359
  404824:	3fd24924 	.word	0x3fd24924
  404828:	55555593 	.word	0x55555593
  40482c:	3fe55555 	.word	0x3fe55555
  404830:	d078c69f 	.word	0xd078c69f
  404834:	3fc39a09 	.word	0x3fc39a09
  404838:	1d8e78af 	.word	0x1d8e78af
  40483c:	3fcc71c5 	.word	0x3fcc71c5
  404840:	9997fa04 	.word	0x9997fa04
  404844:	3fd99999 	.word	0x3fd99999
  404848:	55555555 	.word	0x55555555
  40484c:	3fd55555 	.word	0x3fd55555
  404850:	43500000 	.word	0x43500000
  404854:	7fefffff 	.word	0x7fefffff
  404858:	3ff00000 	.word	0x3ff00000
  40485c:	3fe00000 	.word	0x3fe00000
  404860:	c3500000 	.word	0xc3500000
  404864:	4620      	mov	r0, r4
  404866:	f000 f981 	bl	404b6c <__aeabi_i2d>
  40486a:	a30f      	add	r3, pc, #60	; (adr r3, 4048a8 <__ieee754_log+0x3d8>)
  40486c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404870:	4680      	mov	r8, r0
  404872:	4689      	mov	r9, r1
  404874:	f000 f9e0 	bl	404c38 <__aeabi_dmul>
  404878:	a30d      	add	r3, pc, #52	; (adr r3, 4048b0 <__ieee754_log+0x3e0>)
  40487a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40487e:	4604      	mov	r4, r0
  404880:	460d      	mov	r5, r1
  404882:	4640      	mov	r0, r8
  404884:	4649      	mov	r1, r9
  404886:	f000 f9d7 	bl	404c38 <__aeabi_dmul>
  40488a:	e79a      	b.n	4047c2 <__ieee754_log+0x2f2>
  40488c:	4602      	mov	r2, r0
  40488e:	460b      	mov	r3, r1
  404890:	4650      	mov	r0, sl
  404892:	4659      	mov	r1, fp
  404894:	f000 f81c 	bl	4048d0 <__aeabi_dsub>
  404898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40489c:	f000 f9cc 	bl	404c38 <__aeabi_dmul>
  4048a0:	e714      	b.n	4046cc <__ieee754_log+0x1fc>
  4048a2:	bf00      	nop
  4048a4:	f3af 8000 	nop.w
  4048a8:	fee00000 	.word	0xfee00000
  4048ac:	3fe62e42 	.word	0x3fe62e42
  4048b0:	35793c76 	.word	0x35793c76
  4048b4:	3dea39ef 	.word	0x3dea39ef

004048b8 <matherr>:
  4048b8:	2000      	movs	r0, #0
  4048ba:	4770      	bx	lr

004048bc <nan>:
  4048bc:	2000      	movs	r0, #0
  4048be:	4901      	ldr	r1, [pc, #4]	; (4048c4 <nan+0x8>)
  4048c0:	4770      	bx	lr
  4048c2:	bf00      	nop
  4048c4:	7ff80000 	.word	0x7ff80000

004048c8 <__aeabi_drsub>:
  4048c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4048cc:	e002      	b.n	4048d4 <__adddf3>
  4048ce:	bf00      	nop

004048d0 <__aeabi_dsub>:
  4048d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004048d4 <__adddf3>:
  4048d4:	b530      	push	{r4, r5, lr}
  4048d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4048da:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4048de:	ea94 0f05 	teq	r4, r5
  4048e2:	bf08      	it	eq
  4048e4:	ea90 0f02 	teqeq	r0, r2
  4048e8:	bf1f      	itttt	ne
  4048ea:	ea54 0c00 	orrsne.w	ip, r4, r0
  4048ee:	ea55 0c02 	orrsne.w	ip, r5, r2
  4048f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4048f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4048fa:	f000 80e2 	beq.w	404ac2 <__adddf3+0x1ee>
  4048fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404902:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404906:	bfb8      	it	lt
  404908:	426d      	neglt	r5, r5
  40490a:	dd0c      	ble.n	404926 <__adddf3+0x52>
  40490c:	442c      	add	r4, r5
  40490e:	ea80 0202 	eor.w	r2, r0, r2
  404912:	ea81 0303 	eor.w	r3, r1, r3
  404916:	ea82 0000 	eor.w	r0, r2, r0
  40491a:	ea83 0101 	eor.w	r1, r3, r1
  40491e:	ea80 0202 	eor.w	r2, r0, r2
  404922:	ea81 0303 	eor.w	r3, r1, r3
  404926:	2d36      	cmp	r5, #54	; 0x36
  404928:	bf88      	it	hi
  40492a:	bd30      	pophi	{r4, r5, pc}
  40492c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404930:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404934:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404938:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40493c:	d002      	beq.n	404944 <__adddf3+0x70>
  40493e:	4240      	negs	r0, r0
  404940:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404944:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404948:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40494c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404950:	d002      	beq.n	404958 <__adddf3+0x84>
  404952:	4252      	negs	r2, r2
  404954:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  404958:	ea94 0f05 	teq	r4, r5
  40495c:	f000 80a7 	beq.w	404aae <__adddf3+0x1da>
  404960:	f1a4 0401 	sub.w	r4, r4, #1
  404964:	f1d5 0e20 	rsbs	lr, r5, #32
  404968:	db0d      	blt.n	404986 <__adddf3+0xb2>
  40496a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40496e:	fa22 f205 	lsr.w	r2, r2, r5
  404972:	1880      	adds	r0, r0, r2
  404974:	f141 0100 	adc.w	r1, r1, #0
  404978:	fa03 f20e 	lsl.w	r2, r3, lr
  40497c:	1880      	adds	r0, r0, r2
  40497e:	fa43 f305 	asr.w	r3, r3, r5
  404982:	4159      	adcs	r1, r3
  404984:	e00e      	b.n	4049a4 <__adddf3+0xd0>
  404986:	f1a5 0520 	sub.w	r5, r5, #32
  40498a:	f10e 0e20 	add.w	lr, lr, #32
  40498e:	2a01      	cmp	r2, #1
  404990:	fa03 fc0e 	lsl.w	ip, r3, lr
  404994:	bf28      	it	cs
  404996:	f04c 0c02 	orrcs.w	ip, ip, #2
  40499a:	fa43 f305 	asr.w	r3, r3, r5
  40499e:	18c0      	adds	r0, r0, r3
  4049a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4049a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4049a8:	d507      	bpl.n	4049ba <__adddf3+0xe6>
  4049aa:	f04f 0e00 	mov.w	lr, #0
  4049ae:	f1dc 0c00 	rsbs	ip, ip, #0
  4049b2:	eb7e 0000 	sbcs.w	r0, lr, r0
  4049b6:	eb6e 0101 	sbc.w	r1, lr, r1
  4049ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4049be:	d31b      	bcc.n	4049f8 <__adddf3+0x124>
  4049c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4049c4:	d30c      	bcc.n	4049e0 <__adddf3+0x10c>
  4049c6:	0849      	lsrs	r1, r1, #1
  4049c8:	ea5f 0030 	movs.w	r0, r0, rrx
  4049cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4049d0:	f104 0401 	add.w	r4, r4, #1
  4049d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4049d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4049dc:	f080 809a 	bcs.w	404b14 <__adddf3+0x240>
  4049e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4049e4:	bf08      	it	eq
  4049e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4049ea:	f150 0000 	adcs.w	r0, r0, #0
  4049ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4049f2:	ea41 0105 	orr.w	r1, r1, r5
  4049f6:	bd30      	pop	{r4, r5, pc}
  4049f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4049fc:	4140      	adcs	r0, r0
  4049fe:	eb41 0101 	adc.w	r1, r1, r1
  404a02:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404a06:	f1a4 0401 	sub.w	r4, r4, #1
  404a0a:	d1e9      	bne.n	4049e0 <__adddf3+0x10c>
  404a0c:	f091 0f00 	teq	r1, #0
  404a10:	bf04      	itt	eq
  404a12:	4601      	moveq	r1, r0
  404a14:	2000      	moveq	r0, #0
  404a16:	fab1 f381 	clz	r3, r1
  404a1a:	bf08      	it	eq
  404a1c:	3320      	addeq	r3, #32
  404a1e:	f1a3 030b 	sub.w	r3, r3, #11
  404a22:	f1b3 0220 	subs.w	r2, r3, #32
  404a26:	da0c      	bge.n	404a42 <__adddf3+0x16e>
  404a28:	320c      	adds	r2, #12
  404a2a:	dd08      	ble.n	404a3e <__adddf3+0x16a>
  404a2c:	f102 0c14 	add.w	ip, r2, #20
  404a30:	f1c2 020c 	rsb	r2, r2, #12
  404a34:	fa01 f00c 	lsl.w	r0, r1, ip
  404a38:	fa21 f102 	lsr.w	r1, r1, r2
  404a3c:	e00c      	b.n	404a58 <__adddf3+0x184>
  404a3e:	f102 0214 	add.w	r2, r2, #20
  404a42:	bfd8      	it	le
  404a44:	f1c2 0c20 	rsble	ip, r2, #32
  404a48:	fa01 f102 	lsl.w	r1, r1, r2
  404a4c:	fa20 fc0c 	lsr.w	ip, r0, ip
  404a50:	bfdc      	itt	le
  404a52:	ea41 010c 	orrle.w	r1, r1, ip
  404a56:	4090      	lslle	r0, r2
  404a58:	1ae4      	subs	r4, r4, r3
  404a5a:	bfa2      	ittt	ge
  404a5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  404a60:	4329      	orrge	r1, r5
  404a62:	bd30      	popge	{r4, r5, pc}
  404a64:	ea6f 0404 	mvn.w	r4, r4
  404a68:	3c1f      	subs	r4, #31
  404a6a:	da1c      	bge.n	404aa6 <__adddf3+0x1d2>
  404a6c:	340c      	adds	r4, #12
  404a6e:	dc0e      	bgt.n	404a8e <__adddf3+0x1ba>
  404a70:	f104 0414 	add.w	r4, r4, #20
  404a74:	f1c4 0220 	rsb	r2, r4, #32
  404a78:	fa20 f004 	lsr.w	r0, r0, r4
  404a7c:	fa01 f302 	lsl.w	r3, r1, r2
  404a80:	ea40 0003 	orr.w	r0, r0, r3
  404a84:	fa21 f304 	lsr.w	r3, r1, r4
  404a88:	ea45 0103 	orr.w	r1, r5, r3
  404a8c:	bd30      	pop	{r4, r5, pc}
  404a8e:	f1c4 040c 	rsb	r4, r4, #12
  404a92:	f1c4 0220 	rsb	r2, r4, #32
  404a96:	fa20 f002 	lsr.w	r0, r0, r2
  404a9a:	fa01 f304 	lsl.w	r3, r1, r4
  404a9e:	ea40 0003 	orr.w	r0, r0, r3
  404aa2:	4629      	mov	r1, r5
  404aa4:	bd30      	pop	{r4, r5, pc}
  404aa6:	fa21 f004 	lsr.w	r0, r1, r4
  404aaa:	4629      	mov	r1, r5
  404aac:	bd30      	pop	{r4, r5, pc}
  404aae:	f094 0f00 	teq	r4, #0
  404ab2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  404ab6:	bf06      	itte	eq
  404ab8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  404abc:	3401      	addeq	r4, #1
  404abe:	3d01      	subne	r5, #1
  404ac0:	e74e      	b.n	404960 <__adddf3+0x8c>
  404ac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404ac6:	bf18      	it	ne
  404ac8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404acc:	d029      	beq.n	404b22 <__adddf3+0x24e>
  404ace:	ea94 0f05 	teq	r4, r5
  404ad2:	bf08      	it	eq
  404ad4:	ea90 0f02 	teqeq	r0, r2
  404ad8:	d005      	beq.n	404ae6 <__adddf3+0x212>
  404ada:	ea54 0c00 	orrs.w	ip, r4, r0
  404ade:	bf04      	itt	eq
  404ae0:	4619      	moveq	r1, r3
  404ae2:	4610      	moveq	r0, r2
  404ae4:	bd30      	pop	{r4, r5, pc}
  404ae6:	ea91 0f03 	teq	r1, r3
  404aea:	bf1e      	ittt	ne
  404aec:	2100      	movne	r1, #0
  404aee:	2000      	movne	r0, #0
  404af0:	bd30      	popne	{r4, r5, pc}
  404af2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  404af6:	d105      	bne.n	404b04 <__adddf3+0x230>
  404af8:	0040      	lsls	r0, r0, #1
  404afa:	4149      	adcs	r1, r1
  404afc:	bf28      	it	cs
  404afe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  404b02:	bd30      	pop	{r4, r5, pc}
  404b04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  404b08:	bf3c      	itt	cc
  404b0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  404b0e:	bd30      	popcc	{r4, r5, pc}
  404b10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404b14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  404b18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404b1c:	f04f 0000 	mov.w	r0, #0
  404b20:	bd30      	pop	{r4, r5, pc}
  404b22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  404b26:	bf1a      	itte	ne
  404b28:	4619      	movne	r1, r3
  404b2a:	4610      	movne	r0, r2
  404b2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  404b30:	bf1c      	itt	ne
  404b32:	460b      	movne	r3, r1
  404b34:	4602      	movne	r2, r0
  404b36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  404b3a:	bf06      	itte	eq
  404b3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  404b40:	ea91 0f03 	teqeq	r1, r3
  404b44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  404b48:	bd30      	pop	{r4, r5, pc}
  404b4a:	bf00      	nop

00404b4c <__aeabi_ui2d>:
  404b4c:	f090 0f00 	teq	r0, #0
  404b50:	bf04      	itt	eq
  404b52:	2100      	moveq	r1, #0
  404b54:	4770      	bxeq	lr
  404b56:	b530      	push	{r4, r5, lr}
  404b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404b60:	f04f 0500 	mov.w	r5, #0
  404b64:	f04f 0100 	mov.w	r1, #0
  404b68:	e750      	b.n	404a0c <__adddf3+0x138>
  404b6a:	bf00      	nop

00404b6c <__aeabi_i2d>:
  404b6c:	f090 0f00 	teq	r0, #0
  404b70:	bf04      	itt	eq
  404b72:	2100      	moveq	r1, #0
  404b74:	4770      	bxeq	lr
  404b76:	b530      	push	{r4, r5, lr}
  404b78:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404b7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404b80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  404b84:	bf48      	it	mi
  404b86:	4240      	negmi	r0, r0
  404b88:	f04f 0100 	mov.w	r1, #0
  404b8c:	e73e      	b.n	404a0c <__adddf3+0x138>
  404b8e:	bf00      	nop

00404b90 <__aeabi_f2d>:
  404b90:	0042      	lsls	r2, r0, #1
  404b92:	ea4f 01e2 	mov.w	r1, r2, asr #3
  404b96:	ea4f 0131 	mov.w	r1, r1, rrx
  404b9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  404b9e:	bf1f      	itttt	ne
  404ba0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  404ba4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404ba8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  404bac:	4770      	bxne	lr
  404bae:	f092 0f00 	teq	r2, #0
  404bb2:	bf14      	ite	ne
  404bb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  404bb8:	4770      	bxeq	lr
  404bba:	b530      	push	{r4, r5, lr}
  404bbc:	f44f 7460 	mov.w	r4, #896	; 0x380
  404bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  404bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404bc8:	e720      	b.n	404a0c <__adddf3+0x138>
  404bca:	bf00      	nop

00404bcc <__aeabi_ul2d>:
  404bcc:	ea50 0201 	orrs.w	r2, r0, r1
  404bd0:	bf08      	it	eq
  404bd2:	4770      	bxeq	lr
  404bd4:	b530      	push	{r4, r5, lr}
  404bd6:	f04f 0500 	mov.w	r5, #0
  404bda:	e00a      	b.n	404bf2 <__aeabi_l2d+0x16>

00404bdc <__aeabi_l2d>:
  404bdc:	ea50 0201 	orrs.w	r2, r0, r1
  404be0:	bf08      	it	eq
  404be2:	4770      	bxeq	lr
  404be4:	b530      	push	{r4, r5, lr}
  404be6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  404bea:	d502      	bpl.n	404bf2 <__aeabi_l2d+0x16>
  404bec:	4240      	negs	r0, r0
  404bee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404bf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  404bf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  404bfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  404bfe:	f43f aedc 	beq.w	4049ba <__adddf3+0xe6>
  404c02:	f04f 0203 	mov.w	r2, #3
  404c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404c0a:	bf18      	it	ne
  404c0c:	3203      	addne	r2, #3
  404c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  404c12:	bf18      	it	ne
  404c14:	3203      	addne	r2, #3
  404c16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  404c1a:	f1c2 0320 	rsb	r3, r2, #32
  404c1e:	fa00 fc03 	lsl.w	ip, r0, r3
  404c22:	fa20 f002 	lsr.w	r0, r0, r2
  404c26:	fa01 fe03 	lsl.w	lr, r1, r3
  404c2a:	ea40 000e 	orr.w	r0, r0, lr
  404c2e:	fa21 f102 	lsr.w	r1, r1, r2
  404c32:	4414      	add	r4, r2
  404c34:	e6c1      	b.n	4049ba <__adddf3+0xe6>
  404c36:	bf00      	nop

00404c38 <__aeabi_dmul>:
  404c38:	b570      	push	{r4, r5, r6, lr}
  404c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404c46:	bf1d      	ittte	ne
  404c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404c4c:	ea94 0f0c 	teqne	r4, ip
  404c50:	ea95 0f0c 	teqne	r5, ip
  404c54:	f000 f8de 	bleq	404e14 <__aeabi_dmul+0x1dc>
  404c58:	442c      	add	r4, r5
  404c5a:	ea81 0603 	eor.w	r6, r1, r3
  404c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  404c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  404c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  404c6a:	bf18      	it	ne
  404c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  404c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404c78:	d038      	beq.n	404cec <__aeabi_dmul+0xb4>
  404c7a:	fba0 ce02 	umull	ip, lr, r0, r2
  404c7e:	f04f 0500 	mov.w	r5, #0
  404c82:	fbe1 e502 	umlal	lr, r5, r1, r2
  404c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  404c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
  404c8e:	f04f 0600 	mov.w	r6, #0
  404c92:	fbe1 5603 	umlal	r5, r6, r1, r3
  404c96:	f09c 0f00 	teq	ip, #0
  404c9a:	bf18      	it	ne
  404c9c:	f04e 0e01 	orrne.w	lr, lr, #1
  404ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  404ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  404ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  404cac:	d204      	bcs.n	404cb8 <__aeabi_dmul+0x80>
  404cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  404cb2:	416d      	adcs	r5, r5
  404cb4:	eb46 0606 	adc.w	r6, r6, r6
  404cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  404cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  404cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  404cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  404cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  404ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404cd0:	bf88      	it	hi
  404cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404cd6:	d81e      	bhi.n	404d16 <__aeabi_dmul+0xde>
  404cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  404cdc:	bf08      	it	eq
  404cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  404ce2:	f150 0000 	adcs.w	r0, r0, #0
  404ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404cea:	bd70      	pop	{r4, r5, r6, pc}
  404cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404cf0:	ea46 0101 	orr.w	r1, r6, r1
  404cf4:	ea40 0002 	orr.w	r0, r0, r2
  404cf8:	ea81 0103 	eor.w	r1, r1, r3
  404cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404d00:	bfc2      	ittt	gt
  404d02:	ebd4 050c 	rsbsgt	r5, r4, ip
  404d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404d0a:	bd70      	popgt	{r4, r5, r6, pc}
  404d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404d10:	f04f 0e00 	mov.w	lr, #0
  404d14:	3c01      	subs	r4, #1
  404d16:	f300 80ab 	bgt.w	404e70 <__aeabi_dmul+0x238>
  404d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404d1e:	bfde      	ittt	le
  404d20:	2000      	movle	r0, #0
  404d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  404d26:	bd70      	pople	{r4, r5, r6, pc}
  404d28:	f1c4 0400 	rsb	r4, r4, #0
  404d2c:	3c20      	subs	r4, #32
  404d2e:	da35      	bge.n	404d9c <__aeabi_dmul+0x164>
  404d30:	340c      	adds	r4, #12
  404d32:	dc1b      	bgt.n	404d6c <__aeabi_dmul+0x134>
  404d34:	f104 0414 	add.w	r4, r4, #20
  404d38:	f1c4 0520 	rsb	r5, r4, #32
  404d3c:	fa00 f305 	lsl.w	r3, r0, r5
  404d40:	fa20 f004 	lsr.w	r0, r0, r4
  404d44:	fa01 f205 	lsl.w	r2, r1, r5
  404d48:	ea40 0002 	orr.w	r0, r0, r2
  404d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404d58:	fa21 f604 	lsr.w	r6, r1, r4
  404d5c:	eb42 0106 	adc.w	r1, r2, r6
  404d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404d64:	bf08      	it	eq
  404d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404d6a:	bd70      	pop	{r4, r5, r6, pc}
  404d6c:	f1c4 040c 	rsb	r4, r4, #12
  404d70:	f1c4 0520 	rsb	r5, r4, #32
  404d74:	fa00 f304 	lsl.w	r3, r0, r4
  404d78:	fa20 f005 	lsr.w	r0, r0, r5
  404d7c:	fa01 f204 	lsl.w	r2, r1, r4
  404d80:	ea40 0002 	orr.w	r0, r0, r2
  404d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  404d8c:	f141 0100 	adc.w	r1, r1, #0
  404d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404d94:	bf08      	it	eq
  404d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404d9a:	bd70      	pop	{r4, r5, r6, pc}
  404d9c:	f1c4 0520 	rsb	r5, r4, #32
  404da0:	fa00 f205 	lsl.w	r2, r0, r5
  404da4:	ea4e 0e02 	orr.w	lr, lr, r2
  404da8:	fa20 f304 	lsr.w	r3, r0, r4
  404dac:	fa01 f205 	lsl.w	r2, r1, r5
  404db0:	ea43 0302 	orr.w	r3, r3, r2
  404db4:	fa21 f004 	lsr.w	r0, r1, r4
  404db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404dbc:	fa21 f204 	lsr.w	r2, r1, r4
  404dc0:	ea20 0002 	bic.w	r0, r0, r2
  404dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  404dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404dcc:	bf08      	it	eq
  404dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  404dd2:	bd70      	pop	{r4, r5, r6, pc}
  404dd4:	f094 0f00 	teq	r4, #0
  404dd8:	d10f      	bne.n	404dfa <__aeabi_dmul+0x1c2>
  404dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  404dde:	0040      	lsls	r0, r0, #1
  404de0:	eb41 0101 	adc.w	r1, r1, r1
  404de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404de8:	bf08      	it	eq
  404dea:	3c01      	subeq	r4, #1
  404dec:	d0f7      	beq.n	404dde <__aeabi_dmul+0x1a6>
  404dee:	ea41 0106 	orr.w	r1, r1, r6
  404df2:	f095 0f00 	teq	r5, #0
  404df6:	bf18      	it	ne
  404df8:	4770      	bxne	lr
  404dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404dfe:	0052      	lsls	r2, r2, #1
  404e00:	eb43 0303 	adc.w	r3, r3, r3
  404e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  404e08:	bf08      	it	eq
  404e0a:	3d01      	subeq	r5, #1
  404e0c:	d0f7      	beq.n	404dfe <__aeabi_dmul+0x1c6>
  404e0e:	ea43 0306 	orr.w	r3, r3, r6
  404e12:	4770      	bx	lr
  404e14:	ea94 0f0c 	teq	r4, ip
  404e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404e1c:	bf18      	it	ne
  404e1e:	ea95 0f0c 	teqne	r5, ip
  404e22:	d00c      	beq.n	404e3e <__aeabi_dmul+0x206>
  404e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404e28:	bf18      	it	ne
  404e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404e2e:	d1d1      	bne.n	404dd4 <__aeabi_dmul+0x19c>
  404e30:	ea81 0103 	eor.w	r1, r1, r3
  404e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404e38:	f04f 0000 	mov.w	r0, #0
  404e3c:	bd70      	pop	{r4, r5, r6, pc}
  404e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404e42:	bf06      	itte	eq
  404e44:	4610      	moveq	r0, r2
  404e46:	4619      	moveq	r1, r3
  404e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404e4c:	d019      	beq.n	404e82 <__aeabi_dmul+0x24a>
  404e4e:	ea94 0f0c 	teq	r4, ip
  404e52:	d102      	bne.n	404e5a <__aeabi_dmul+0x222>
  404e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  404e58:	d113      	bne.n	404e82 <__aeabi_dmul+0x24a>
  404e5a:	ea95 0f0c 	teq	r5, ip
  404e5e:	d105      	bne.n	404e6c <__aeabi_dmul+0x234>
  404e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404e64:	bf1c      	itt	ne
  404e66:	4610      	movne	r0, r2
  404e68:	4619      	movne	r1, r3
  404e6a:	d10a      	bne.n	404e82 <__aeabi_dmul+0x24a>
  404e6c:	ea81 0103 	eor.w	r1, r1, r3
  404e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404e7c:	f04f 0000 	mov.w	r0, #0
  404e80:	bd70      	pop	{r4, r5, r6, pc}
  404e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  404e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  404e8a:	bd70      	pop	{r4, r5, r6, pc}

00404e8c <__aeabi_ddiv>:
  404e8c:	b570      	push	{r4, r5, r6, lr}
  404e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  404e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  404e9a:	bf1d      	ittte	ne
  404e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  404ea0:	ea94 0f0c 	teqne	r4, ip
  404ea4:	ea95 0f0c 	teqne	r5, ip
  404ea8:	f000 f8a7 	bleq	404ffa <__aeabi_ddiv+0x16e>
  404eac:	eba4 0405 	sub.w	r4, r4, r5
  404eb0:	ea81 0e03 	eor.w	lr, r1, r3
  404eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404ebc:	f000 8088 	beq.w	404fd0 <__aeabi_ddiv+0x144>
  404ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  404ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  404ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  404ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  404ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  404ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  404edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  404ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  404ee4:	429d      	cmp	r5, r3
  404ee6:	bf08      	it	eq
  404ee8:	4296      	cmpeq	r6, r2
  404eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404ef2:	d202      	bcs.n	404efa <__aeabi_ddiv+0x6e>
  404ef4:	085b      	lsrs	r3, r3, #1
  404ef6:	ea4f 0232 	mov.w	r2, r2, rrx
  404efa:	1ab6      	subs	r6, r6, r2
  404efc:	eb65 0503 	sbc.w	r5, r5, r3
  404f00:	085b      	lsrs	r3, r3, #1
  404f02:	ea4f 0232 	mov.w	r2, r2, rrx
  404f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  404f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404f0e:	ebb6 0e02 	subs.w	lr, r6, r2
  404f12:	eb75 0e03 	sbcs.w	lr, r5, r3
  404f16:	bf22      	ittt	cs
  404f18:	1ab6      	subcs	r6, r6, r2
  404f1a:	4675      	movcs	r5, lr
  404f1c:	ea40 000c 	orrcs.w	r0, r0, ip
  404f20:	085b      	lsrs	r3, r3, #1
  404f22:	ea4f 0232 	mov.w	r2, r2, rrx
  404f26:	ebb6 0e02 	subs.w	lr, r6, r2
  404f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
  404f2e:	bf22      	ittt	cs
  404f30:	1ab6      	subcs	r6, r6, r2
  404f32:	4675      	movcs	r5, lr
  404f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404f38:	085b      	lsrs	r3, r3, #1
  404f3a:	ea4f 0232 	mov.w	r2, r2, rrx
  404f3e:	ebb6 0e02 	subs.w	lr, r6, r2
  404f42:	eb75 0e03 	sbcs.w	lr, r5, r3
  404f46:	bf22      	ittt	cs
  404f48:	1ab6      	subcs	r6, r6, r2
  404f4a:	4675      	movcs	r5, lr
  404f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404f50:	085b      	lsrs	r3, r3, #1
  404f52:	ea4f 0232 	mov.w	r2, r2, rrx
  404f56:	ebb6 0e02 	subs.w	lr, r6, r2
  404f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
  404f5e:	bf22      	ittt	cs
  404f60:	1ab6      	subcs	r6, r6, r2
  404f62:	4675      	movcs	r5, lr
  404f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404f68:	ea55 0e06 	orrs.w	lr, r5, r6
  404f6c:	d018      	beq.n	404fa0 <__aeabi_ddiv+0x114>
  404f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  404f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
  404f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  404f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  404f8a:	d1c0      	bne.n	404f0e <__aeabi_ddiv+0x82>
  404f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404f90:	d10b      	bne.n	404faa <__aeabi_ddiv+0x11e>
  404f92:	ea41 0100 	orr.w	r1, r1, r0
  404f96:	f04f 0000 	mov.w	r0, #0
  404f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  404f9e:	e7b6      	b.n	404f0e <__aeabi_ddiv+0x82>
  404fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  404fa4:	bf04      	itt	eq
  404fa6:	4301      	orreq	r1, r0
  404fa8:	2000      	moveq	r0, #0
  404faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  404fae:	bf88      	it	hi
  404fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  404fb4:	f63f aeaf 	bhi.w	404d16 <__aeabi_dmul+0xde>
  404fb8:	ebb5 0c03 	subs.w	ip, r5, r3
  404fbc:	bf04      	itt	eq
  404fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
  404fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  404fc6:	f150 0000 	adcs.w	r0, r0, #0
  404fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  404fce:	bd70      	pop	{r4, r5, r6, pc}
  404fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  404fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  404fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  404fdc:	bfc2      	ittt	gt
  404fde:	ebd4 050c 	rsbsgt	r5, r4, ip
  404fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  404fe6:	bd70      	popgt	{r4, r5, r6, pc}
  404fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404fec:	f04f 0e00 	mov.w	lr, #0
  404ff0:	3c01      	subs	r4, #1
  404ff2:	e690      	b.n	404d16 <__aeabi_dmul+0xde>
  404ff4:	ea45 0e06 	orr.w	lr, r5, r6
  404ff8:	e68d      	b.n	404d16 <__aeabi_dmul+0xde>
  404ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404ffe:	ea94 0f0c 	teq	r4, ip
  405002:	bf08      	it	eq
  405004:	ea95 0f0c 	teqeq	r5, ip
  405008:	f43f af3b 	beq.w	404e82 <__aeabi_dmul+0x24a>
  40500c:	ea94 0f0c 	teq	r4, ip
  405010:	d10a      	bne.n	405028 <__aeabi_ddiv+0x19c>
  405012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405016:	f47f af34 	bne.w	404e82 <__aeabi_dmul+0x24a>
  40501a:	ea95 0f0c 	teq	r5, ip
  40501e:	f47f af25 	bne.w	404e6c <__aeabi_dmul+0x234>
  405022:	4610      	mov	r0, r2
  405024:	4619      	mov	r1, r3
  405026:	e72c      	b.n	404e82 <__aeabi_dmul+0x24a>
  405028:	ea95 0f0c 	teq	r5, ip
  40502c:	d106      	bne.n	40503c <__aeabi_ddiv+0x1b0>
  40502e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405032:	f43f aefd 	beq.w	404e30 <__aeabi_dmul+0x1f8>
  405036:	4610      	mov	r0, r2
  405038:	4619      	mov	r1, r3
  40503a:	e722      	b.n	404e82 <__aeabi_dmul+0x24a>
  40503c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405040:	bf18      	it	ne
  405042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405046:	f47f aec5 	bne.w	404dd4 <__aeabi_dmul+0x19c>
  40504a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40504e:	f47f af0d 	bne.w	404e6c <__aeabi_dmul+0x234>
  405052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405056:	f47f aeeb 	bne.w	404e30 <__aeabi_dmul+0x1f8>
  40505a:	e712      	b.n	404e82 <__aeabi_dmul+0x24a>

0040505c <__gedf2>:
  40505c:	f04f 3cff 	mov.w	ip, #4294967295
  405060:	e006      	b.n	405070 <__cmpdf2+0x4>
  405062:	bf00      	nop

00405064 <__ledf2>:
  405064:	f04f 0c01 	mov.w	ip, #1
  405068:	e002      	b.n	405070 <__cmpdf2+0x4>
  40506a:	bf00      	nop

0040506c <__cmpdf2>:
  40506c:	f04f 0c01 	mov.w	ip, #1
  405070:	f84d cd04 	str.w	ip, [sp, #-4]!
  405074:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405078:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40507c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405080:	bf18      	it	ne
  405082:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405086:	d01b      	beq.n	4050c0 <__cmpdf2+0x54>
  405088:	b001      	add	sp, #4
  40508a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40508e:	bf0c      	ite	eq
  405090:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405094:	ea91 0f03 	teqne	r1, r3
  405098:	bf02      	ittt	eq
  40509a:	ea90 0f02 	teqeq	r0, r2
  40509e:	2000      	moveq	r0, #0
  4050a0:	4770      	bxeq	lr
  4050a2:	f110 0f00 	cmn.w	r0, #0
  4050a6:	ea91 0f03 	teq	r1, r3
  4050aa:	bf58      	it	pl
  4050ac:	4299      	cmppl	r1, r3
  4050ae:	bf08      	it	eq
  4050b0:	4290      	cmpeq	r0, r2
  4050b2:	bf2c      	ite	cs
  4050b4:	17d8      	asrcs	r0, r3, #31
  4050b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4050ba:	f040 0001 	orr.w	r0, r0, #1
  4050be:	4770      	bx	lr
  4050c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4050c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4050c8:	d102      	bne.n	4050d0 <__cmpdf2+0x64>
  4050ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4050ce:	d107      	bne.n	4050e0 <__cmpdf2+0x74>
  4050d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4050d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4050d8:	d1d6      	bne.n	405088 <__cmpdf2+0x1c>
  4050da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4050de:	d0d3      	beq.n	405088 <__cmpdf2+0x1c>
  4050e0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4050e4:	4770      	bx	lr
  4050e6:	bf00      	nop

004050e8 <__aeabi_cdrcmple>:
  4050e8:	4684      	mov	ip, r0
  4050ea:	4610      	mov	r0, r2
  4050ec:	4662      	mov	r2, ip
  4050ee:	468c      	mov	ip, r1
  4050f0:	4619      	mov	r1, r3
  4050f2:	4663      	mov	r3, ip
  4050f4:	e000      	b.n	4050f8 <__aeabi_cdcmpeq>
  4050f6:	bf00      	nop

004050f8 <__aeabi_cdcmpeq>:
  4050f8:	b501      	push	{r0, lr}
  4050fa:	f7ff ffb7 	bl	40506c <__cmpdf2>
  4050fe:	2800      	cmp	r0, #0
  405100:	bf48      	it	mi
  405102:	f110 0f00 	cmnmi.w	r0, #0
  405106:	bd01      	pop	{r0, pc}

00405108 <__aeabi_dcmpeq>:
  405108:	f84d ed08 	str.w	lr, [sp, #-8]!
  40510c:	f7ff fff4 	bl	4050f8 <__aeabi_cdcmpeq>
  405110:	bf0c      	ite	eq
  405112:	2001      	moveq	r0, #1
  405114:	2000      	movne	r0, #0
  405116:	f85d fb08 	ldr.w	pc, [sp], #8
  40511a:	bf00      	nop

0040511c <__aeabi_dcmplt>:
  40511c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405120:	f7ff ffea 	bl	4050f8 <__aeabi_cdcmpeq>
  405124:	bf34      	ite	cc
  405126:	2001      	movcc	r0, #1
  405128:	2000      	movcs	r0, #0
  40512a:	f85d fb08 	ldr.w	pc, [sp], #8
  40512e:	bf00      	nop

00405130 <__aeabi_dcmple>:
  405130:	f84d ed08 	str.w	lr, [sp, #-8]!
  405134:	f7ff ffe0 	bl	4050f8 <__aeabi_cdcmpeq>
  405138:	bf94      	ite	ls
  40513a:	2001      	movls	r0, #1
  40513c:	2000      	movhi	r0, #0
  40513e:	f85d fb08 	ldr.w	pc, [sp], #8
  405142:	bf00      	nop

00405144 <__aeabi_dcmpge>:
  405144:	f84d ed08 	str.w	lr, [sp, #-8]!
  405148:	f7ff ffce 	bl	4050e8 <__aeabi_cdrcmple>
  40514c:	bf94      	ite	ls
  40514e:	2001      	movls	r0, #1
  405150:	2000      	movhi	r0, #0
  405152:	f85d fb08 	ldr.w	pc, [sp], #8
  405156:	bf00      	nop

00405158 <__aeabi_dcmpgt>:
  405158:	f84d ed08 	str.w	lr, [sp, #-8]!
  40515c:	f7ff ffc4 	bl	4050e8 <__aeabi_cdrcmple>
  405160:	bf34      	ite	cc
  405162:	2001      	movcc	r0, #1
  405164:	2000      	movcs	r0, #0
  405166:	f85d fb08 	ldr.w	pc, [sp], #8
  40516a:	bf00      	nop

0040516c <__aeabi_dcmpun>:
  40516c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405170:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405174:	d102      	bne.n	40517c <__aeabi_dcmpun+0x10>
  405176:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40517a:	d10a      	bne.n	405192 <__aeabi_dcmpun+0x26>
  40517c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405184:	d102      	bne.n	40518c <__aeabi_dcmpun+0x20>
  405186:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40518a:	d102      	bne.n	405192 <__aeabi_dcmpun+0x26>
  40518c:	f04f 0000 	mov.w	r0, #0
  405190:	4770      	bx	lr
  405192:	f04f 0001 	mov.w	r0, #1
  405196:	4770      	bx	lr

00405198 <__aeabi_d2f>:
  405198:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40519c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  4051a0:	bf24      	itt	cs
  4051a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  4051a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4051aa:	d90d      	bls.n	4051c8 <__aeabi_d2f+0x30>
  4051ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4051b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4051b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4051b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4051bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4051c0:	bf08      	it	eq
  4051c2:	f020 0001 	biceq.w	r0, r0, #1
  4051c6:	4770      	bx	lr
  4051c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4051cc:	d121      	bne.n	405212 <__aeabi_d2f+0x7a>
  4051ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4051d2:	bfbc      	itt	lt
  4051d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4051d8:	4770      	bxlt	lr
  4051da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4051de:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4051e2:	f1c2 0218 	rsb	r2, r2, #24
  4051e6:	f1c2 0c20 	rsb	ip, r2, #32
  4051ea:	fa10 f30c 	lsls.w	r3, r0, ip
  4051ee:	fa20 f002 	lsr.w	r0, r0, r2
  4051f2:	bf18      	it	ne
  4051f4:	f040 0001 	orrne.w	r0, r0, #1
  4051f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4051fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405200:	fa03 fc0c 	lsl.w	ip, r3, ip
  405204:	ea40 000c 	orr.w	r0, r0, ip
  405208:	fa23 f302 	lsr.w	r3, r3, r2
  40520c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405210:	e7cc      	b.n	4051ac <__aeabi_d2f+0x14>
  405212:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405216:	d107      	bne.n	405228 <__aeabi_d2f+0x90>
  405218:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40521c:	bf1e      	ittt	ne
  40521e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405222:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405226:	4770      	bxne	lr
  405228:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40522c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405230:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405234:	4770      	bx	lr
  405236:	bf00      	nop

00405238 <__aeabi_frsub>:
  405238:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40523c:	e002      	b.n	405244 <__addsf3>
  40523e:	bf00      	nop

00405240 <__aeabi_fsub>:
  405240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405244 <__addsf3>:
  405244:	0042      	lsls	r2, r0, #1
  405246:	bf1f      	itttt	ne
  405248:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40524c:	ea92 0f03 	teqne	r2, r3
  405250:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405254:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405258:	d06a      	beq.n	405330 <__addsf3+0xec>
  40525a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40525e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405262:	bfc1      	itttt	gt
  405264:	18d2      	addgt	r2, r2, r3
  405266:	4041      	eorgt	r1, r0
  405268:	4048      	eorgt	r0, r1
  40526a:	4041      	eorgt	r1, r0
  40526c:	bfb8      	it	lt
  40526e:	425b      	neglt	r3, r3
  405270:	2b19      	cmp	r3, #25
  405272:	bf88      	it	hi
  405274:	4770      	bxhi	lr
  405276:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40527a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40527e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405282:	bf18      	it	ne
  405284:	4240      	negne	r0, r0
  405286:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40528a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40528e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405292:	bf18      	it	ne
  405294:	4249      	negne	r1, r1
  405296:	ea92 0f03 	teq	r2, r3
  40529a:	d03f      	beq.n	40531c <__addsf3+0xd8>
  40529c:	f1a2 0201 	sub.w	r2, r2, #1
  4052a0:	fa41 fc03 	asr.w	ip, r1, r3
  4052a4:	eb10 000c 	adds.w	r0, r0, ip
  4052a8:	f1c3 0320 	rsb	r3, r3, #32
  4052ac:	fa01 f103 	lsl.w	r1, r1, r3
  4052b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4052b4:	d502      	bpl.n	4052bc <__addsf3+0x78>
  4052b6:	4249      	negs	r1, r1
  4052b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4052bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4052c0:	d313      	bcc.n	4052ea <__addsf3+0xa6>
  4052c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4052c6:	d306      	bcc.n	4052d6 <__addsf3+0x92>
  4052c8:	0840      	lsrs	r0, r0, #1
  4052ca:	ea4f 0131 	mov.w	r1, r1, rrx
  4052ce:	f102 0201 	add.w	r2, r2, #1
  4052d2:	2afe      	cmp	r2, #254	; 0xfe
  4052d4:	d251      	bcs.n	40537a <__addsf3+0x136>
  4052d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  4052da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4052de:	bf08      	it	eq
  4052e0:	f020 0001 	biceq.w	r0, r0, #1
  4052e4:	ea40 0003 	orr.w	r0, r0, r3
  4052e8:	4770      	bx	lr
  4052ea:	0049      	lsls	r1, r1, #1
  4052ec:	eb40 0000 	adc.w	r0, r0, r0
  4052f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4052f4:	f1a2 0201 	sub.w	r2, r2, #1
  4052f8:	d1ed      	bne.n	4052d6 <__addsf3+0x92>
  4052fa:	fab0 fc80 	clz	ip, r0
  4052fe:	f1ac 0c08 	sub.w	ip, ip, #8
  405302:	ebb2 020c 	subs.w	r2, r2, ip
  405306:	fa00 f00c 	lsl.w	r0, r0, ip
  40530a:	bfaa      	itet	ge
  40530c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405310:	4252      	neglt	r2, r2
  405312:	4318      	orrge	r0, r3
  405314:	bfbc      	itt	lt
  405316:	40d0      	lsrlt	r0, r2
  405318:	4318      	orrlt	r0, r3
  40531a:	4770      	bx	lr
  40531c:	f092 0f00 	teq	r2, #0
  405320:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405324:	bf06      	itte	eq
  405326:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40532a:	3201      	addeq	r2, #1
  40532c:	3b01      	subne	r3, #1
  40532e:	e7b5      	b.n	40529c <__addsf3+0x58>
  405330:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405334:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405338:	bf18      	it	ne
  40533a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40533e:	d021      	beq.n	405384 <__addsf3+0x140>
  405340:	ea92 0f03 	teq	r2, r3
  405344:	d004      	beq.n	405350 <__addsf3+0x10c>
  405346:	f092 0f00 	teq	r2, #0
  40534a:	bf08      	it	eq
  40534c:	4608      	moveq	r0, r1
  40534e:	4770      	bx	lr
  405350:	ea90 0f01 	teq	r0, r1
  405354:	bf1c      	itt	ne
  405356:	2000      	movne	r0, #0
  405358:	4770      	bxne	lr
  40535a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40535e:	d104      	bne.n	40536a <__addsf3+0x126>
  405360:	0040      	lsls	r0, r0, #1
  405362:	bf28      	it	cs
  405364:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405368:	4770      	bx	lr
  40536a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40536e:	bf3c      	itt	cc
  405370:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405374:	4770      	bxcc	lr
  405376:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40537a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40537e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405382:	4770      	bx	lr
  405384:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405388:	bf16      	itet	ne
  40538a:	4608      	movne	r0, r1
  40538c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405390:	4601      	movne	r1, r0
  405392:	0242      	lsls	r2, r0, #9
  405394:	bf06      	itte	eq
  405396:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40539a:	ea90 0f01 	teqeq	r0, r1
  40539e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4053a2:	4770      	bx	lr

004053a4 <__aeabi_ui2f>:
  4053a4:	f04f 0300 	mov.w	r3, #0
  4053a8:	e004      	b.n	4053b4 <__aeabi_i2f+0x8>
  4053aa:	bf00      	nop

004053ac <__aeabi_i2f>:
  4053ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4053b0:	bf48      	it	mi
  4053b2:	4240      	negmi	r0, r0
  4053b4:	ea5f 0c00 	movs.w	ip, r0
  4053b8:	bf08      	it	eq
  4053ba:	4770      	bxeq	lr
  4053bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4053c0:	4601      	mov	r1, r0
  4053c2:	f04f 0000 	mov.w	r0, #0
  4053c6:	e01c      	b.n	405402 <__aeabi_l2f+0x2a>

004053c8 <__aeabi_ul2f>:
  4053c8:	ea50 0201 	orrs.w	r2, r0, r1
  4053cc:	bf08      	it	eq
  4053ce:	4770      	bxeq	lr
  4053d0:	f04f 0300 	mov.w	r3, #0
  4053d4:	e00a      	b.n	4053ec <__aeabi_l2f+0x14>
  4053d6:	bf00      	nop

004053d8 <__aeabi_l2f>:
  4053d8:	ea50 0201 	orrs.w	r2, r0, r1
  4053dc:	bf08      	it	eq
  4053de:	4770      	bxeq	lr
  4053e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4053e4:	d502      	bpl.n	4053ec <__aeabi_l2f+0x14>
  4053e6:	4240      	negs	r0, r0
  4053e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4053ec:	ea5f 0c01 	movs.w	ip, r1
  4053f0:	bf02      	ittt	eq
  4053f2:	4684      	moveq	ip, r0
  4053f4:	4601      	moveq	r1, r0
  4053f6:	2000      	moveq	r0, #0
  4053f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4053fc:	bf08      	it	eq
  4053fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405402:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405406:	fabc f28c 	clz	r2, ip
  40540a:	3a08      	subs	r2, #8
  40540c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405410:	db10      	blt.n	405434 <__aeabi_l2f+0x5c>
  405412:	fa01 fc02 	lsl.w	ip, r1, r2
  405416:	4463      	add	r3, ip
  405418:	fa00 fc02 	lsl.w	ip, r0, r2
  40541c:	f1c2 0220 	rsb	r2, r2, #32
  405420:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405424:	fa20 f202 	lsr.w	r2, r0, r2
  405428:	eb43 0002 	adc.w	r0, r3, r2
  40542c:	bf08      	it	eq
  40542e:	f020 0001 	biceq.w	r0, r0, #1
  405432:	4770      	bx	lr
  405434:	f102 0220 	add.w	r2, r2, #32
  405438:	fa01 fc02 	lsl.w	ip, r1, r2
  40543c:	f1c2 0220 	rsb	r2, r2, #32
  405440:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405444:	fa21 f202 	lsr.w	r2, r1, r2
  405448:	eb43 0002 	adc.w	r0, r3, r2
  40544c:	bf08      	it	eq
  40544e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405452:	4770      	bx	lr

00405454 <__aeabi_fmul>:
  405454:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405458:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40545c:	bf1e      	ittt	ne
  40545e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405462:	ea92 0f0c 	teqne	r2, ip
  405466:	ea93 0f0c 	teqne	r3, ip
  40546a:	d06f      	beq.n	40554c <__aeabi_fmul+0xf8>
  40546c:	441a      	add	r2, r3
  40546e:	ea80 0c01 	eor.w	ip, r0, r1
  405472:	0240      	lsls	r0, r0, #9
  405474:	bf18      	it	ne
  405476:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40547a:	d01e      	beq.n	4054ba <__aeabi_fmul+0x66>
  40547c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405480:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405484:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  405488:	fba0 3101 	umull	r3, r1, r0, r1
  40548c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405490:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405494:	bf3e      	ittt	cc
  405496:	0049      	lslcc	r1, r1, #1
  405498:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40549c:	005b      	lslcc	r3, r3, #1
  40549e:	ea40 0001 	orr.w	r0, r0, r1
  4054a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4054a6:	2afd      	cmp	r2, #253	; 0xfd
  4054a8:	d81d      	bhi.n	4054e6 <__aeabi_fmul+0x92>
  4054aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4054ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4054b2:	bf08      	it	eq
  4054b4:	f020 0001 	biceq.w	r0, r0, #1
  4054b8:	4770      	bx	lr
  4054ba:	f090 0f00 	teq	r0, #0
  4054be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4054c2:	bf08      	it	eq
  4054c4:	0249      	lsleq	r1, r1, #9
  4054c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4054ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4054ce:	3a7f      	subs	r2, #127	; 0x7f
  4054d0:	bfc2      	ittt	gt
  4054d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4054d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4054da:	4770      	bxgt	lr
  4054dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4054e0:	f04f 0300 	mov.w	r3, #0
  4054e4:	3a01      	subs	r2, #1
  4054e6:	dc5d      	bgt.n	4055a4 <__aeabi_fmul+0x150>
  4054e8:	f112 0f19 	cmn.w	r2, #25
  4054ec:	bfdc      	itt	le
  4054ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4054f2:	4770      	bxle	lr
  4054f4:	f1c2 0200 	rsb	r2, r2, #0
  4054f8:	0041      	lsls	r1, r0, #1
  4054fa:	fa21 f102 	lsr.w	r1, r1, r2
  4054fe:	f1c2 0220 	rsb	r2, r2, #32
  405502:	fa00 fc02 	lsl.w	ip, r0, r2
  405506:	ea5f 0031 	movs.w	r0, r1, rrx
  40550a:	f140 0000 	adc.w	r0, r0, #0
  40550e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405512:	bf08      	it	eq
  405514:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405518:	4770      	bx	lr
  40551a:	f092 0f00 	teq	r2, #0
  40551e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405522:	bf02      	ittt	eq
  405524:	0040      	lsleq	r0, r0, #1
  405526:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40552a:	3a01      	subeq	r2, #1
  40552c:	d0f9      	beq.n	405522 <__aeabi_fmul+0xce>
  40552e:	ea40 000c 	orr.w	r0, r0, ip
  405532:	f093 0f00 	teq	r3, #0
  405536:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40553a:	bf02      	ittt	eq
  40553c:	0049      	lsleq	r1, r1, #1
  40553e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405542:	3b01      	subeq	r3, #1
  405544:	d0f9      	beq.n	40553a <__aeabi_fmul+0xe6>
  405546:	ea41 010c 	orr.w	r1, r1, ip
  40554a:	e78f      	b.n	40546c <__aeabi_fmul+0x18>
  40554c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405550:	ea92 0f0c 	teq	r2, ip
  405554:	bf18      	it	ne
  405556:	ea93 0f0c 	teqne	r3, ip
  40555a:	d00a      	beq.n	405572 <__aeabi_fmul+0x11e>
  40555c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405560:	bf18      	it	ne
  405562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405566:	d1d8      	bne.n	40551a <__aeabi_fmul+0xc6>
  405568:	ea80 0001 	eor.w	r0, r0, r1
  40556c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405570:	4770      	bx	lr
  405572:	f090 0f00 	teq	r0, #0
  405576:	bf17      	itett	ne
  405578:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40557c:	4608      	moveq	r0, r1
  40557e:	f091 0f00 	teqne	r1, #0
  405582:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405586:	d014      	beq.n	4055b2 <__aeabi_fmul+0x15e>
  405588:	ea92 0f0c 	teq	r2, ip
  40558c:	d101      	bne.n	405592 <__aeabi_fmul+0x13e>
  40558e:	0242      	lsls	r2, r0, #9
  405590:	d10f      	bne.n	4055b2 <__aeabi_fmul+0x15e>
  405592:	ea93 0f0c 	teq	r3, ip
  405596:	d103      	bne.n	4055a0 <__aeabi_fmul+0x14c>
  405598:	024b      	lsls	r3, r1, #9
  40559a:	bf18      	it	ne
  40559c:	4608      	movne	r0, r1
  40559e:	d108      	bne.n	4055b2 <__aeabi_fmul+0x15e>
  4055a0:	ea80 0001 	eor.w	r0, r0, r1
  4055a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4055a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4055ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4055b0:	4770      	bx	lr
  4055b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4055b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4055ba:	4770      	bx	lr

004055bc <__aeabi_fdiv>:
  4055bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4055c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4055c4:	bf1e      	ittt	ne
  4055c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4055ca:	ea92 0f0c 	teqne	r2, ip
  4055ce:	ea93 0f0c 	teqne	r3, ip
  4055d2:	d069      	beq.n	4056a8 <__aeabi_fdiv+0xec>
  4055d4:	eba2 0203 	sub.w	r2, r2, r3
  4055d8:	ea80 0c01 	eor.w	ip, r0, r1
  4055dc:	0249      	lsls	r1, r1, #9
  4055de:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4055e2:	d037      	beq.n	405654 <__aeabi_fdiv+0x98>
  4055e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4055e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4055ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4055f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4055f4:	428b      	cmp	r3, r1
  4055f6:	bf38      	it	cc
  4055f8:	005b      	lslcc	r3, r3, #1
  4055fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4055fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405602:	428b      	cmp	r3, r1
  405604:	bf24      	itt	cs
  405606:	1a5b      	subcs	r3, r3, r1
  405608:	ea40 000c 	orrcs.w	r0, r0, ip
  40560c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405610:	bf24      	itt	cs
  405612:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405616:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40561a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40561e:	bf24      	itt	cs
  405620:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405624:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405628:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40562c:	bf24      	itt	cs
  40562e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405632:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405636:	011b      	lsls	r3, r3, #4
  405638:	bf18      	it	ne
  40563a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40563e:	d1e0      	bne.n	405602 <__aeabi_fdiv+0x46>
  405640:	2afd      	cmp	r2, #253	; 0xfd
  405642:	f63f af50 	bhi.w	4054e6 <__aeabi_fmul+0x92>
  405646:	428b      	cmp	r3, r1
  405648:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40564c:	bf08      	it	eq
  40564e:	f020 0001 	biceq.w	r0, r0, #1
  405652:	4770      	bx	lr
  405654:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405658:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40565c:	327f      	adds	r2, #127	; 0x7f
  40565e:	bfc2      	ittt	gt
  405660:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405664:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405668:	4770      	bxgt	lr
  40566a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40566e:	f04f 0300 	mov.w	r3, #0
  405672:	3a01      	subs	r2, #1
  405674:	e737      	b.n	4054e6 <__aeabi_fmul+0x92>
  405676:	f092 0f00 	teq	r2, #0
  40567a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40567e:	bf02      	ittt	eq
  405680:	0040      	lsleq	r0, r0, #1
  405682:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405686:	3a01      	subeq	r2, #1
  405688:	d0f9      	beq.n	40567e <__aeabi_fdiv+0xc2>
  40568a:	ea40 000c 	orr.w	r0, r0, ip
  40568e:	f093 0f00 	teq	r3, #0
  405692:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405696:	bf02      	ittt	eq
  405698:	0049      	lsleq	r1, r1, #1
  40569a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40569e:	3b01      	subeq	r3, #1
  4056a0:	d0f9      	beq.n	405696 <__aeabi_fdiv+0xda>
  4056a2:	ea41 010c 	orr.w	r1, r1, ip
  4056a6:	e795      	b.n	4055d4 <__aeabi_fdiv+0x18>
  4056a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4056ac:	ea92 0f0c 	teq	r2, ip
  4056b0:	d108      	bne.n	4056c4 <__aeabi_fdiv+0x108>
  4056b2:	0242      	lsls	r2, r0, #9
  4056b4:	f47f af7d 	bne.w	4055b2 <__aeabi_fmul+0x15e>
  4056b8:	ea93 0f0c 	teq	r3, ip
  4056bc:	f47f af70 	bne.w	4055a0 <__aeabi_fmul+0x14c>
  4056c0:	4608      	mov	r0, r1
  4056c2:	e776      	b.n	4055b2 <__aeabi_fmul+0x15e>
  4056c4:	ea93 0f0c 	teq	r3, ip
  4056c8:	d104      	bne.n	4056d4 <__aeabi_fdiv+0x118>
  4056ca:	024b      	lsls	r3, r1, #9
  4056cc:	f43f af4c 	beq.w	405568 <__aeabi_fmul+0x114>
  4056d0:	4608      	mov	r0, r1
  4056d2:	e76e      	b.n	4055b2 <__aeabi_fmul+0x15e>
  4056d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4056d8:	bf18      	it	ne
  4056da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4056de:	d1ca      	bne.n	405676 <__aeabi_fdiv+0xba>
  4056e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4056e4:	f47f af5c 	bne.w	4055a0 <__aeabi_fmul+0x14c>
  4056e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4056ec:	f47f af3c 	bne.w	405568 <__aeabi_fmul+0x114>
  4056f0:	e75f      	b.n	4055b2 <__aeabi_fmul+0x15e>
  4056f2:	bf00      	nop

004056f4 <__gesf2>:
  4056f4:	f04f 3cff 	mov.w	ip, #4294967295
  4056f8:	e006      	b.n	405708 <__cmpsf2+0x4>
  4056fa:	bf00      	nop

004056fc <__lesf2>:
  4056fc:	f04f 0c01 	mov.w	ip, #1
  405700:	e002      	b.n	405708 <__cmpsf2+0x4>
  405702:	bf00      	nop

00405704 <__cmpsf2>:
  405704:	f04f 0c01 	mov.w	ip, #1
  405708:	f84d cd04 	str.w	ip, [sp, #-4]!
  40570c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405710:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405714:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405718:	bf18      	it	ne
  40571a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40571e:	d011      	beq.n	405744 <__cmpsf2+0x40>
  405720:	b001      	add	sp, #4
  405722:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  405726:	bf18      	it	ne
  405728:	ea90 0f01 	teqne	r0, r1
  40572c:	bf58      	it	pl
  40572e:	ebb2 0003 	subspl.w	r0, r2, r3
  405732:	bf88      	it	hi
  405734:	17c8      	asrhi	r0, r1, #31
  405736:	bf38      	it	cc
  405738:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40573c:	bf18      	it	ne
  40573e:	f040 0001 	orrne.w	r0, r0, #1
  405742:	4770      	bx	lr
  405744:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405748:	d102      	bne.n	405750 <__cmpsf2+0x4c>
  40574a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40574e:	d105      	bne.n	40575c <__cmpsf2+0x58>
  405750:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405754:	d1e4      	bne.n	405720 <__cmpsf2+0x1c>
  405756:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40575a:	d0e1      	beq.n	405720 <__cmpsf2+0x1c>
  40575c:	f85d 0b04 	ldr.w	r0, [sp], #4
  405760:	4770      	bx	lr
  405762:	bf00      	nop

00405764 <__aeabi_cfrcmple>:
  405764:	4684      	mov	ip, r0
  405766:	4608      	mov	r0, r1
  405768:	4661      	mov	r1, ip
  40576a:	e7ff      	b.n	40576c <__aeabi_cfcmpeq>

0040576c <__aeabi_cfcmpeq>:
  40576c:	b50f      	push	{r0, r1, r2, r3, lr}
  40576e:	f7ff ffc9 	bl	405704 <__cmpsf2>
  405772:	2800      	cmp	r0, #0
  405774:	bf48      	it	mi
  405776:	f110 0f00 	cmnmi.w	r0, #0
  40577a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040577c <__aeabi_fcmpeq>:
  40577c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405780:	f7ff fff4 	bl	40576c <__aeabi_cfcmpeq>
  405784:	bf0c      	ite	eq
  405786:	2001      	moveq	r0, #1
  405788:	2000      	movne	r0, #0
  40578a:	f85d fb08 	ldr.w	pc, [sp], #8
  40578e:	bf00      	nop

00405790 <__aeabi_fcmplt>:
  405790:	f84d ed08 	str.w	lr, [sp, #-8]!
  405794:	f7ff ffea 	bl	40576c <__aeabi_cfcmpeq>
  405798:	bf34      	ite	cc
  40579a:	2001      	movcc	r0, #1
  40579c:	2000      	movcs	r0, #0
  40579e:	f85d fb08 	ldr.w	pc, [sp], #8
  4057a2:	bf00      	nop

004057a4 <__aeabi_fcmple>:
  4057a4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4057a8:	f7ff ffe0 	bl	40576c <__aeabi_cfcmpeq>
  4057ac:	bf94      	ite	ls
  4057ae:	2001      	movls	r0, #1
  4057b0:	2000      	movhi	r0, #0
  4057b2:	f85d fb08 	ldr.w	pc, [sp], #8
  4057b6:	bf00      	nop

004057b8 <__aeabi_fcmpge>:
  4057b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4057bc:	f7ff ffd2 	bl	405764 <__aeabi_cfrcmple>
  4057c0:	bf94      	ite	ls
  4057c2:	2001      	movls	r0, #1
  4057c4:	2000      	movhi	r0, #0
  4057c6:	f85d fb08 	ldr.w	pc, [sp], #8
  4057ca:	bf00      	nop

004057cc <__aeabi_fcmpgt>:
  4057cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4057d0:	f7ff ffc8 	bl	405764 <__aeabi_cfrcmple>
  4057d4:	bf34      	ite	cc
  4057d6:	2001      	movcc	r0, #1
  4057d8:	2000      	movcs	r0, #0
  4057da:	f85d fb08 	ldr.w	pc, [sp], #8
  4057de:	bf00      	nop

004057e0 <__errno>:
  4057e0:	4b01      	ldr	r3, [pc, #4]	; (4057e8 <__errno+0x8>)
  4057e2:	6818      	ldr	r0, [r3, #0]
  4057e4:	4770      	bx	lr
  4057e6:	bf00      	nop
  4057e8:	200000ac 	.word	0x200000ac

004057ec <__libc_init_array>:
  4057ec:	b570      	push	{r4, r5, r6, lr}
  4057ee:	4e0f      	ldr	r6, [pc, #60]	; (40582c <__libc_init_array+0x40>)
  4057f0:	4d0f      	ldr	r5, [pc, #60]	; (405830 <__libc_init_array+0x44>)
  4057f2:	1b76      	subs	r6, r6, r5
  4057f4:	10b6      	asrs	r6, r6, #2
  4057f6:	bf18      	it	ne
  4057f8:	2400      	movne	r4, #0
  4057fa:	d005      	beq.n	405808 <__libc_init_array+0x1c>
  4057fc:	3401      	adds	r4, #1
  4057fe:	f855 3b04 	ldr.w	r3, [r5], #4
  405802:	4798      	blx	r3
  405804:	42a6      	cmp	r6, r4
  405806:	d1f9      	bne.n	4057fc <__libc_init_array+0x10>
  405808:	4e0a      	ldr	r6, [pc, #40]	; (405834 <__libc_init_array+0x48>)
  40580a:	4d0b      	ldr	r5, [pc, #44]	; (405838 <__libc_init_array+0x4c>)
  40580c:	1b76      	subs	r6, r6, r5
  40580e:	f004 fadb 	bl	409dc8 <_init>
  405812:	10b6      	asrs	r6, r6, #2
  405814:	bf18      	it	ne
  405816:	2400      	movne	r4, #0
  405818:	d006      	beq.n	405828 <__libc_init_array+0x3c>
  40581a:	3401      	adds	r4, #1
  40581c:	f855 3b04 	ldr.w	r3, [r5], #4
  405820:	4798      	blx	r3
  405822:	42a6      	cmp	r6, r4
  405824:	d1f9      	bne.n	40581a <__libc_init_array+0x2e>
  405826:	bd70      	pop	{r4, r5, r6, pc}
  405828:	bd70      	pop	{r4, r5, r6, pc}
  40582a:	bf00      	nop
  40582c:	00409dd4 	.word	0x00409dd4
  405830:	00409dd4 	.word	0x00409dd4
  405834:	00409ddc 	.word	0x00409ddc
  405838:	00409dd4 	.word	0x00409dd4

0040583c <memcpy>:
  40583c:	4684      	mov	ip, r0
  40583e:	ea41 0300 	orr.w	r3, r1, r0
  405842:	f013 0303 	ands.w	r3, r3, #3
  405846:	d16d      	bne.n	405924 <memcpy+0xe8>
  405848:	3a40      	subs	r2, #64	; 0x40
  40584a:	d341      	bcc.n	4058d0 <memcpy+0x94>
  40584c:	f851 3b04 	ldr.w	r3, [r1], #4
  405850:	f840 3b04 	str.w	r3, [r0], #4
  405854:	f851 3b04 	ldr.w	r3, [r1], #4
  405858:	f840 3b04 	str.w	r3, [r0], #4
  40585c:	f851 3b04 	ldr.w	r3, [r1], #4
  405860:	f840 3b04 	str.w	r3, [r0], #4
  405864:	f851 3b04 	ldr.w	r3, [r1], #4
  405868:	f840 3b04 	str.w	r3, [r0], #4
  40586c:	f851 3b04 	ldr.w	r3, [r1], #4
  405870:	f840 3b04 	str.w	r3, [r0], #4
  405874:	f851 3b04 	ldr.w	r3, [r1], #4
  405878:	f840 3b04 	str.w	r3, [r0], #4
  40587c:	f851 3b04 	ldr.w	r3, [r1], #4
  405880:	f840 3b04 	str.w	r3, [r0], #4
  405884:	f851 3b04 	ldr.w	r3, [r1], #4
  405888:	f840 3b04 	str.w	r3, [r0], #4
  40588c:	f851 3b04 	ldr.w	r3, [r1], #4
  405890:	f840 3b04 	str.w	r3, [r0], #4
  405894:	f851 3b04 	ldr.w	r3, [r1], #4
  405898:	f840 3b04 	str.w	r3, [r0], #4
  40589c:	f851 3b04 	ldr.w	r3, [r1], #4
  4058a0:	f840 3b04 	str.w	r3, [r0], #4
  4058a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058a8:	f840 3b04 	str.w	r3, [r0], #4
  4058ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4058b0:	f840 3b04 	str.w	r3, [r0], #4
  4058b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058b8:	f840 3b04 	str.w	r3, [r0], #4
  4058bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4058c0:	f840 3b04 	str.w	r3, [r0], #4
  4058c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058c8:	f840 3b04 	str.w	r3, [r0], #4
  4058cc:	3a40      	subs	r2, #64	; 0x40
  4058ce:	d2bd      	bcs.n	40584c <memcpy+0x10>
  4058d0:	3230      	adds	r2, #48	; 0x30
  4058d2:	d311      	bcc.n	4058f8 <memcpy+0xbc>
  4058d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058d8:	f840 3b04 	str.w	r3, [r0], #4
  4058dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4058e0:	f840 3b04 	str.w	r3, [r0], #4
  4058e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4058e8:	f840 3b04 	str.w	r3, [r0], #4
  4058ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4058f0:	f840 3b04 	str.w	r3, [r0], #4
  4058f4:	3a10      	subs	r2, #16
  4058f6:	d2ed      	bcs.n	4058d4 <memcpy+0x98>
  4058f8:	320c      	adds	r2, #12
  4058fa:	d305      	bcc.n	405908 <memcpy+0xcc>
  4058fc:	f851 3b04 	ldr.w	r3, [r1], #4
  405900:	f840 3b04 	str.w	r3, [r0], #4
  405904:	3a04      	subs	r2, #4
  405906:	d2f9      	bcs.n	4058fc <memcpy+0xc0>
  405908:	3204      	adds	r2, #4
  40590a:	d008      	beq.n	40591e <memcpy+0xe2>
  40590c:	07d2      	lsls	r2, r2, #31
  40590e:	bf1c      	itt	ne
  405910:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405914:	f800 3b01 	strbne.w	r3, [r0], #1
  405918:	d301      	bcc.n	40591e <memcpy+0xe2>
  40591a:	880b      	ldrh	r3, [r1, #0]
  40591c:	8003      	strh	r3, [r0, #0]
  40591e:	4660      	mov	r0, ip
  405920:	4770      	bx	lr
  405922:	bf00      	nop
  405924:	2a08      	cmp	r2, #8
  405926:	d313      	bcc.n	405950 <memcpy+0x114>
  405928:	078b      	lsls	r3, r1, #30
  40592a:	d08d      	beq.n	405848 <memcpy+0xc>
  40592c:	f010 0303 	ands.w	r3, r0, #3
  405930:	d08a      	beq.n	405848 <memcpy+0xc>
  405932:	f1c3 0304 	rsb	r3, r3, #4
  405936:	1ad2      	subs	r2, r2, r3
  405938:	07db      	lsls	r3, r3, #31
  40593a:	bf1c      	itt	ne
  40593c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405940:	f800 3b01 	strbne.w	r3, [r0], #1
  405944:	d380      	bcc.n	405848 <memcpy+0xc>
  405946:	f831 3b02 	ldrh.w	r3, [r1], #2
  40594a:	f820 3b02 	strh.w	r3, [r0], #2
  40594e:	e77b      	b.n	405848 <memcpy+0xc>
  405950:	3a04      	subs	r2, #4
  405952:	d3d9      	bcc.n	405908 <memcpy+0xcc>
  405954:	3a01      	subs	r2, #1
  405956:	f811 3b01 	ldrb.w	r3, [r1], #1
  40595a:	f800 3b01 	strb.w	r3, [r0], #1
  40595e:	d2f9      	bcs.n	405954 <memcpy+0x118>
  405960:	780b      	ldrb	r3, [r1, #0]
  405962:	7003      	strb	r3, [r0, #0]
  405964:	784b      	ldrb	r3, [r1, #1]
  405966:	7043      	strb	r3, [r0, #1]
  405968:	788b      	ldrb	r3, [r1, #2]
  40596a:	7083      	strb	r3, [r0, #2]
  40596c:	4660      	mov	r0, ip
  40596e:	4770      	bx	lr

00405970 <memset>:
  405970:	b470      	push	{r4, r5, r6}
  405972:	0786      	lsls	r6, r0, #30
  405974:	d046      	beq.n	405a04 <memset+0x94>
  405976:	1e54      	subs	r4, r2, #1
  405978:	2a00      	cmp	r2, #0
  40597a:	d041      	beq.n	405a00 <memset+0x90>
  40597c:	b2ca      	uxtb	r2, r1
  40597e:	4603      	mov	r3, r0
  405980:	e002      	b.n	405988 <memset+0x18>
  405982:	f114 34ff 	adds.w	r4, r4, #4294967295
  405986:	d33b      	bcc.n	405a00 <memset+0x90>
  405988:	f803 2b01 	strb.w	r2, [r3], #1
  40598c:	079d      	lsls	r5, r3, #30
  40598e:	d1f8      	bne.n	405982 <memset+0x12>
  405990:	2c03      	cmp	r4, #3
  405992:	d92e      	bls.n	4059f2 <memset+0x82>
  405994:	b2cd      	uxtb	r5, r1
  405996:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40599a:	2c0f      	cmp	r4, #15
  40599c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4059a0:	d919      	bls.n	4059d6 <memset+0x66>
  4059a2:	f103 0210 	add.w	r2, r3, #16
  4059a6:	4626      	mov	r6, r4
  4059a8:	3e10      	subs	r6, #16
  4059aa:	2e0f      	cmp	r6, #15
  4059ac:	f842 5c10 	str.w	r5, [r2, #-16]
  4059b0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4059b4:	f842 5c08 	str.w	r5, [r2, #-8]
  4059b8:	f842 5c04 	str.w	r5, [r2, #-4]
  4059bc:	f102 0210 	add.w	r2, r2, #16
  4059c0:	d8f2      	bhi.n	4059a8 <memset+0x38>
  4059c2:	f1a4 0210 	sub.w	r2, r4, #16
  4059c6:	f022 020f 	bic.w	r2, r2, #15
  4059ca:	f004 040f 	and.w	r4, r4, #15
  4059ce:	3210      	adds	r2, #16
  4059d0:	2c03      	cmp	r4, #3
  4059d2:	4413      	add	r3, r2
  4059d4:	d90d      	bls.n	4059f2 <memset+0x82>
  4059d6:	461e      	mov	r6, r3
  4059d8:	4622      	mov	r2, r4
  4059da:	3a04      	subs	r2, #4
  4059dc:	2a03      	cmp	r2, #3
  4059de:	f846 5b04 	str.w	r5, [r6], #4
  4059e2:	d8fa      	bhi.n	4059da <memset+0x6a>
  4059e4:	1f22      	subs	r2, r4, #4
  4059e6:	f022 0203 	bic.w	r2, r2, #3
  4059ea:	3204      	adds	r2, #4
  4059ec:	4413      	add	r3, r2
  4059ee:	f004 0403 	and.w	r4, r4, #3
  4059f2:	b12c      	cbz	r4, 405a00 <memset+0x90>
  4059f4:	b2c9      	uxtb	r1, r1
  4059f6:	441c      	add	r4, r3
  4059f8:	f803 1b01 	strb.w	r1, [r3], #1
  4059fc:	429c      	cmp	r4, r3
  4059fe:	d1fb      	bne.n	4059f8 <memset+0x88>
  405a00:	bc70      	pop	{r4, r5, r6}
  405a02:	4770      	bx	lr
  405a04:	4614      	mov	r4, r2
  405a06:	4603      	mov	r3, r0
  405a08:	e7c2      	b.n	405990 <memset+0x20>
  405a0a:	bf00      	nop

00405a0c <sprintf>:
  405a0c:	b40e      	push	{r1, r2, r3}
  405a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
  405a10:	b09c      	sub	sp, #112	; 0x70
  405a12:	ab21      	add	r3, sp, #132	; 0x84
  405a14:	490f      	ldr	r1, [pc, #60]	; (405a54 <sprintf+0x48>)
  405a16:	f853 2b04 	ldr.w	r2, [r3], #4
  405a1a:	9301      	str	r3, [sp, #4]
  405a1c:	4605      	mov	r5, r0
  405a1e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  405a22:	6808      	ldr	r0, [r1, #0]
  405a24:	9502      	str	r5, [sp, #8]
  405a26:	f44f 7702 	mov.w	r7, #520	; 0x208
  405a2a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  405a2e:	a902      	add	r1, sp, #8
  405a30:	9506      	str	r5, [sp, #24]
  405a32:	f8ad 7014 	strh.w	r7, [sp, #20]
  405a36:	9404      	str	r4, [sp, #16]
  405a38:	9407      	str	r4, [sp, #28]
  405a3a:	f8ad 6016 	strh.w	r6, [sp, #22]
  405a3e:	f000 f88d 	bl	405b5c <_svfprintf_r>
  405a42:	9b02      	ldr	r3, [sp, #8]
  405a44:	2200      	movs	r2, #0
  405a46:	701a      	strb	r2, [r3, #0]
  405a48:	b01c      	add	sp, #112	; 0x70
  405a4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  405a4e:	b003      	add	sp, #12
  405a50:	4770      	bx	lr
  405a52:	bf00      	nop
  405a54:	200000ac 	.word	0x200000ac
	...

00405a80 <strlen>:
  405a80:	f890 f000 	pld	[r0]
  405a84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405a88:	f020 0107 	bic.w	r1, r0, #7
  405a8c:	f06f 0c00 	mvn.w	ip, #0
  405a90:	f010 0407 	ands.w	r4, r0, #7
  405a94:	f891 f020 	pld	[r1, #32]
  405a98:	f040 8049 	bne.w	405b2e <strlen+0xae>
  405a9c:	f04f 0400 	mov.w	r4, #0
  405aa0:	f06f 0007 	mvn.w	r0, #7
  405aa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  405aa8:	f891 f040 	pld	[r1, #64]	; 0x40
  405aac:	f100 0008 	add.w	r0, r0, #8
  405ab0:	fa82 f24c 	uadd8	r2, r2, ip
  405ab4:	faa4 f28c 	sel	r2, r4, ip
  405ab8:	fa83 f34c 	uadd8	r3, r3, ip
  405abc:	faa2 f38c 	sel	r3, r2, ip
  405ac0:	bb4b      	cbnz	r3, 405b16 <strlen+0x96>
  405ac2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405ac6:	fa82 f24c 	uadd8	r2, r2, ip
  405aca:	f100 0008 	add.w	r0, r0, #8
  405ace:	faa4 f28c 	sel	r2, r4, ip
  405ad2:	fa83 f34c 	uadd8	r3, r3, ip
  405ad6:	faa2 f38c 	sel	r3, r2, ip
  405ada:	b9e3      	cbnz	r3, 405b16 <strlen+0x96>
  405adc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405ae0:	fa82 f24c 	uadd8	r2, r2, ip
  405ae4:	f100 0008 	add.w	r0, r0, #8
  405ae8:	faa4 f28c 	sel	r2, r4, ip
  405aec:	fa83 f34c 	uadd8	r3, r3, ip
  405af0:	faa2 f38c 	sel	r3, r2, ip
  405af4:	b97b      	cbnz	r3, 405b16 <strlen+0x96>
  405af6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  405afa:	f101 0120 	add.w	r1, r1, #32
  405afe:	fa82 f24c 	uadd8	r2, r2, ip
  405b02:	f100 0008 	add.w	r0, r0, #8
  405b06:	faa4 f28c 	sel	r2, r4, ip
  405b0a:	fa83 f34c 	uadd8	r3, r3, ip
  405b0e:	faa2 f38c 	sel	r3, r2, ip
  405b12:	2b00      	cmp	r3, #0
  405b14:	d0c6      	beq.n	405aa4 <strlen+0x24>
  405b16:	2a00      	cmp	r2, #0
  405b18:	bf04      	itt	eq
  405b1a:	3004      	addeq	r0, #4
  405b1c:	461a      	moveq	r2, r3
  405b1e:	ba12      	rev	r2, r2
  405b20:	fab2 f282 	clz	r2, r2
  405b24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405b28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  405b2c:	4770      	bx	lr
  405b2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405b32:	f004 0503 	and.w	r5, r4, #3
  405b36:	f1c4 0000 	rsb	r0, r4, #0
  405b3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  405b3e:	f014 0f04 	tst.w	r4, #4
  405b42:	f891 f040 	pld	[r1, #64]	; 0x40
  405b46:	fa0c f505 	lsl.w	r5, ip, r5
  405b4a:	ea62 0205 	orn	r2, r2, r5
  405b4e:	bf1c      	itt	ne
  405b50:	ea63 0305 	ornne	r3, r3, r5
  405b54:	4662      	movne	r2, ip
  405b56:	f04f 0400 	mov.w	r4, #0
  405b5a:	e7a9      	b.n	405ab0 <strlen+0x30>

00405b5c <_svfprintf_r>:
  405b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b60:	b0c3      	sub	sp, #268	; 0x10c
  405b62:	460c      	mov	r4, r1
  405b64:	910b      	str	r1, [sp, #44]	; 0x2c
  405b66:	4692      	mov	sl, r2
  405b68:	930f      	str	r3, [sp, #60]	; 0x3c
  405b6a:	900c      	str	r0, [sp, #48]	; 0x30
  405b6c:	f002 fb42 	bl	4081f4 <_localeconv_r>
  405b70:	6803      	ldr	r3, [r0, #0]
  405b72:	931a      	str	r3, [sp, #104]	; 0x68
  405b74:	4618      	mov	r0, r3
  405b76:	f7ff ff83 	bl	405a80 <strlen>
  405b7a:	89a3      	ldrh	r3, [r4, #12]
  405b7c:	9019      	str	r0, [sp, #100]	; 0x64
  405b7e:	0619      	lsls	r1, r3, #24
  405b80:	d503      	bpl.n	405b8a <_svfprintf_r+0x2e>
  405b82:	6923      	ldr	r3, [r4, #16]
  405b84:	2b00      	cmp	r3, #0
  405b86:	f001 8003 	beq.w	406b90 <_svfprintf_r+0x1034>
  405b8a:	2300      	movs	r3, #0
  405b8c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  405b90:	9313      	str	r3, [sp, #76]	; 0x4c
  405b92:	9315      	str	r3, [sp, #84]	; 0x54
  405b94:	9314      	str	r3, [sp, #80]	; 0x50
  405b96:	9327      	str	r3, [sp, #156]	; 0x9c
  405b98:	9326      	str	r3, [sp, #152]	; 0x98
  405b9a:	9318      	str	r3, [sp, #96]	; 0x60
  405b9c:	931b      	str	r3, [sp, #108]	; 0x6c
  405b9e:	9309      	str	r3, [sp, #36]	; 0x24
  405ba0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  405ba4:	46c8      	mov	r8, r9
  405ba6:	9316      	str	r3, [sp, #88]	; 0x58
  405ba8:	9317      	str	r3, [sp, #92]	; 0x5c
  405baa:	f89a 3000 	ldrb.w	r3, [sl]
  405bae:	4654      	mov	r4, sl
  405bb0:	b1e3      	cbz	r3, 405bec <_svfprintf_r+0x90>
  405bb2:	2b25      	cmp	r3, #37	; 0x25
  405bb4:	d102      	bne.n	405bbc <_svfprintf_r+0x60>
  405bb6:	e019      	b.n	405bec <_svfprintf_r+0x90>
  405bb8:	2b25      	cmp	r3, #37	; 0x25
  405bba:	d003      	beq.n	405bc4 <_svfprintf_r+0x68>
  405bbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405bc0:	2b00      	cmp	r3, #0
  405bc2:	d1f9      	bne.n	405bb8 <_svfprintf_r+0x5c>
  405bc4:	eba4 050a 	sub.w	r5, r4, sl
  405bc8:	b185      	cbz	r5, 405bec <_svfprintf_r+0x90>
  405bca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405bcc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405bce:	f8c8 a000 	str.w	sl, [r8]
  405bd2:	3301      	adds	r3, #1
  405bd4:	442a      	add	r2, r5
  405bd6:	2b07      	cmp	r3, #7
  405bd8:	f8c8 5004 	str.w	r5, [r8, #4]
  405bdc:	9227      	str	r2, [sp, #156]	; 0x9c
  405bde:	9326      	str	r3, [sp, #152]	; 0x98
  405be0:	dc7f      	bgt.n	405ce2 <_svfprintf_r+0x186>
  405be2:	f108 0808 	add.w	r8, r8, #8
  405be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405be8:	442b      	add	r3, r5
  405bea:	9309      	str	r3, [sp, #36]	; 0x24
  405bec:	7823      	ldrb	r3, [r4, #0]
  405bee:	2b00      	cmp	r3, #0
  405bf0:	d07f      	beq.n	405cf2 <_svfprintf_r+0x196>
  405bf2:	2300      	movs	r3, #0
  405bf4:	461a      	mov	r2, r3
  405bf6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  405bfa:	4619      	mov	r1, r3
  405bfc:	930d      	str	r3, [sp, #52]	; 0x34
  405bfe:	469b      	mov	fp, r3
  405c00:	f04f 30ff 	mov.w	r0, #4294967295
  405c04:	7863      	ldrb	r3, [r4, #1]
  405c06:	900a      	str	r0, [sp, #40]	; 0x28
  405c08:	f104 0a01 	add.w	sl, r4, #1
  405c0c:	f10a 0a01 	add.w	sl, sl, #1
  405c10:	f1a3 0020 	sub.w	r0, r3, #32
  405c14:	2858      	cmp	r0, #88	; 0x58
  405c16:	f200 83c1 	bhi.w	40639c <_svfprintf_r+0x840>
  405c1a:	e8df f010 	tbh	[pc, r0, lsl #1]
  405c1e:	0238      	.short	0x0238
  405c20:	03bf03bf 	.word	0x03bf03bf
  405c24:	03bf0240 	.word	0x03bf0240
  405c28:	03bf03bf 	.word	0x03bf03bf
  405c2c:	03bf03bf 	.word	0x03bf03bf
  405c30:	024503bf 	.word	0x024503bf
  405c34:	03bf0203 	.word	0x03bf0203
  405c38:	026b005d 	.word	0x026b005d
  405c3c:	028603bf 	.word	0x028603bf
  405c40:	039d039d 	.word	0x039d039d
  405c44:	039d039d 	.word	0x039d039d
  405c48:	039d039d 	.word	0x039d039d
  405c4c:	039d039d 	.word	0x039d039d
  405c50:	03bf039d 	.word	0x03bf039d
  405c54:	03bf03bf 	.word	0x03bf03bf
  405c58:	03bf03bf 	.word	0x03bf03bf
  405c5c:	03bf03bf 	.word	0x03bf03bf
  405c60:	03bf03bf 	.word	0x03bf03bf
  405c64:	033703bf 	.word	0x033703bf
  405c68:	03bf0357 	.word	0x03bf0357
  405c6c:	03bf0357 	.word	0x03bf0357
  405c70:	03bf03bf 	.word	0x03bf03bf
  405c74:	039803bf 	.word	0x039803bf
  405c78:	03bf03bf 	.word	0x03bf03bf
  405c7c:	03bf03ad 	.word	0x03bf03ad
  405c80:	03bf03bf 	.word	0x03bf03bf
  405c84:	03bf03bf 	.word	0x03bf03bf
  405c88:	03bf0259 	.word	0x03bf0259
  405c8c:	031e03bf 	.word	0x031e03bf
  405c90:	03bf03bf 	.word	0x03bf03bf
  405c94:	03bf03bf 	.word	0x03bf03bf
  405c98:	03bf03bf 	.word	0x03bf03bf
  405c9c:	03bf03bf 	.word	0x03bf03bf
  405ca0:	03bf03bf 	.word	0x03bf03bf
  405ca4:	02db02c6 	.word	0x02db02c6
  405ca8:	03570357 	.word	0x03570357
  405cac:	028b0357 	.word	0x028b0357
  405cb0:	03bf02db 	.word	0x03bf02db
  405cb4:	029003bf 	.word	0x029003bf
  405cb8:	029d03bf 	.word	0x029d03bf
  405cbc:	02b401cc 	.word	0x02b401cc
  405cc0:	03bf0208 	.word	0x03bf0208
  405cc4:	03bf01e1 	.word	0x03bf01e1
  405cc8:	03bf007e 	.word	0x03bf007e
  405ccc:	020d03bf 	.word	0x020d03bf
  405cd0:	980d      	ldr	r0, [sp, #52]	; 0x34
  405cd2:	930f      	str	r3, [sp, #60]	; 0x3c
  405cd4:	4240      	negs	r0, r0
  405cd6:	900d      	str	r0, [sp, #52]	; 0x34
  405cd8:	f04b 0b04 	orr.w	fp, fp, #4
  405cdc:	f89a 3000 	ldrb.w	r3, [sl]
  405ce0:	e794      	b.n	405c0c <_svfprintf_r+0xb0>
  405ce2:	aa25      	add	r2, sp, #148	; 0x94
  405ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405ce6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405ce8:	f003 fad4 	bl	409294 <__ssprint_r>
  405cec:	b940      	cbnz	r0, 405d00 <_svfprintf_r+0x1a4>
  405cee:	46c8      	mov	r8, r9
  405cf0:	e779      	b.n	405be6 <_svfprintf_r+0x8a>
  405cf2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  405cf4:	b123      	cbz	r3, 405d00 <_svfprintf_r+0x1a4>
  405cf6:	980c      	ldr	r0, [sp, #48]	; 0x30
  405cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405cfa:	aa25      	add	r2, sp, #148	; 0x94
  405cfc:	f003 faca 	bl	409294 <__ssprint_r>
  405d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405d02:	899b      	ldrh	r3, [r3, #12]
  405d04:	f013 0f40 	tst.w	r3, #64	; 0x40
  405d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d0a:	bf18      	it	ne
  405d0c:	f04f 33ff 	movne.w	r3, #4294967295
  405d10:	9309      	str	r3, [sp, #36]	; 0x24
  405d12:	9809      	ldr	r0, [sp, #36]	; 0x24
  405d14:	b043      	add	sp, #268	; 0x10c
  405d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d1a:	f01b 0f20 	tst.w	fp, #32
  405d1e:	9311      	str	r3, [sp, #68]	; 0x44
  405d20:	f040 81dd 	bne.w	4060de <_svfprintf_r+0x582>
  405d24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d26:	f01b 0f10 	tst.w	fp, #16
  405d2a:	4613      	mov	r3, r2
  405d2c:	f040 856e 	bne.w	40680c <_svfprintf_r+0xcb0>
  405d30:	f01b 0f40 	tst.w	fp, #64	; 0x40
  405d34:	f000 856a 	beq.w	40680c <_svfprintf_r+0xcb0>
  405d38:	8814      	ldrh	r4, [r2, #0]
  405d3a:	3204      	adds	r2, #4
  405d3c:	2500      	movs	r5, #0
  405d3e:	2301      	movs	r3, #1
  405d40:	920f      	str	r2, [sp, #60]	; 0x3c
  405d42:	2700      	movs	r7, #0
  405d44:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405d48:	990a      	ldr	r1, [sp, #40]	; 0x28
  405d4a:	1c4a      	adds	r2, r1, #1
  405d4c:	f000 8265 	beq.w	40621a <_svfprintf_r+0x6be>
  405d50:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  405d54:	9207      	str	r2, [sp, #28]
  405d56:	ea54 0205 	orrs.w	r2, r4, r5
  405d5a:	f040 8264 	bne.w	406226 <_svfprintf_r+0x6ca>
  405d5e:	2900      	cmp	r1, #0
  405d60:	f040 843c 	bne.w	4065dc <_svfprintf_r+0xa80>
  405d64:	2b00      	cmp	r3, #0
  405d66:	f040 84d7 	bne.w	406718 <_svfprintf_r+0xbbc>
  405d6a:	f01b 0301 	ands.w	r3, fp, #1
  405d6e:	930e      	str	r3, [sp, #56]	; 0x38
  405d70:	f000 8604 	beq.w	40697c <_svfprintf_r+0xe20>
  405d74:	ae42      	add	r6, sp, #264	; 0x108
  405d76:	2330      	movs	r3, #48	; 0x30
  405d78:	f806 3d41 	strb.w	r3, [r6, #-65]!
  405d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405d7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405d80:	4293      	cmp	r3, r2
  405d82:	bfb8      	it	lt
  405d84:	4613      	movlt	r3, r2
  405d86:	9308      	str	r3, [sp, #32]
  405d88:	2300      	movs	r3, #0
  405d8a:	9312      	str	r3, [sp, #72]	; 0x48
  405d8c:	b117      	cbz	r7, 405d94 <_svfprintf_r+0x238>
  405d8e:	9b08      	ldr	r3, [sp, #32]
  405d90:	3301      	adds	r3, #1
  405d92:	9308      	str	r3, [sp, #32]
  405d94:	9b07      	ldr	r3, [sp, #28]
  405d96:	f013 0302 	ands.w	r3, r3, #2
  405d9a:	9310      	str	r3, [sp, #64]	; 0x40
  405d9c:	d002      	beq.n	405da4 <_svfprintf_r+0x248>
  405d9e:	9b08      	ldr	r3, [sp, #32]
  405da0:	3302      	adds	r3, #2
  405da2:	9308      	str	r3, [sp, #32]
  405da4:	9b07      	ldr	r3, [sp, #28]
  405da6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  405daa:	f040 830e 	bne.w	4063ca <_svfprintf_r+0x86e>
  405dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405db0:	9a08      	ldr	r2, [sp, #32]
  405db2:	eba3 0b02 	sub.w	fp, r3, r2
  405db6:	f1bb 0f00 	cmp.w	fp, #0
  405dba:	f340 8306 	ble.w	4063ca <_svfprintf_r+0x86e>
  405dbe:	f1bb 0f10 	cmp.w	fp, #16
  405dc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405dc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405dc6:	dd29      	ble.n	405e1c <_svfprintf_r+0x2c0>
  405dc8:	4643      	mov	r3, r8
  405dca:	4621      	mov	r1, r4
  405dcc:	46a8      	mov	r8, r5
  405dce:	2710      	movs	r7, #16
  405dd0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405dd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405dd4:	e006      	b.n	405de4 <_svfprintf_r+0x288>
  405dd6:	f1ab 0b10 	sub.w	fp, fp, #16
  405dda:	f1bb 0f10 	cmp.w	fp, #16
  405dde:	f103 0308 	add.w	r3, r3, #8
  405de2:	dd18      	ble.n	405e16 <_svfprintf_r+0x2ba>
  405de4:	3201      	adds	r2, #1
  405de6:	48b7      	ldr	r0, [pc, #732]	; (4060c4 <_svfprintf_r+0x568>)
  405de8:	9226      	str	r2, [sp, #152]	; 0x98
  405dea:	3110      	adds	r1, #16
  405dec:	2a07      	cmp	r2, #7
  405dee:	9127      	str	r1, [sp, #156]	; 0x9c
  405df0:	e883 0081 	stmia.w	r3, {r0, r7}
  405df4:	ddef      	ble.n	405dd6 <_svfprintf_r+0x27a>
  405df6:	aa25      	add	r2, sp, #148	; 0x94
  405df8:	4629      	mov	r1, r5
  405dfa:	4620      	mov	r0, r4
  405dfc:	f003 fa4a 	bl	409294 <__ssprint_r>
  405e00:	2800      	cmp	r0, #0
  405e02:	f47f af7d 	bne.w	405d00 <_svfprintf_r+0x1a4>
  405e06:	f1ab 0b10 	sub.w	fp, fp, #16
  405e0a:	f1bb 0f10 	cmp.w	fp, #16
  405e0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405e10:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e12:	464b      	mov	r3, r9
  405e14:	dce6      	bgt.n	405de4 <_svfprintf_r+0x288>
  405e16:	4645      	mov	r5, r8
  405e18:	460c      	mov	r4, r1
  405e1a:	4698      	mov	r8, r3
  405e1c:	3201      	adds	r2, #1
  405e1e:	4ba9      	ldr	r3, [pc, #676]	; (4060c4 <_svfprintf_r+0x568>)
  405e20:	9226      	str	r2, [sp, #152]	; 0x98
  405e22:	445c      	add	r4, fp
  405e24:	2a07      	cmp	r2, #7
  405e26:	9427      	str	r4, [sp, #156]	; 0x9c
  405e28:	e888 0808 	stmia.w	r8, {r3, fp}
  405e2c:	f300 8498 	bgt.w	406760 <_svfprintf_r+0xc04>
  405e30:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405e34:	f108 0808 	add.w	r8, r8, #8
  405e38:	b177      	cbz	r7, 405e58 <_svfprintf_r+0x2fc>
  405e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e3c:	3301      	adds	r3, #1
  405e3e:	3401      	adds	r4, #1
  405e40:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  405e44:	2201      	movs	r2, #1
  405e46:	2b07      	cmp	r3, #7
  405e48:	9427      	str	r4, [sp, #156]	; 0x9c
  405e4a:	9326      	str	r3, [sp, #152]	; 0x98
  405e4c:	e888 0006 	stmia.w	r8, {r1, r2}
  405e50:	f300 83db 	bgt.w	40660a <_svfprintf_r+0xaae>
  405e54:	f108 0808 	add.w	r8, r8, #8
  405e58:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405e5a:	b16b      	cbz	r3, 405e78 <_svfprintf_r+0x31c>
  405e5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e5e:	3301      	adds	r3, #1
  405e60:	3402      	adds	r4, #2
  405e62:	a91e      	add	r1, sp, #120	; 0x78
  405e64:	2202      	movs	r2, #2
  405e66:	2b07      	cmp	r3, #7
  405e68:	9427      	str	r4, [sp, #156]	; 0x9c
  405e6a:	9326      	str	r3, [sp, #152]	; 0x98
  405e6c:	e888 0006 	stmia.w	r8, {r1, r2}
  405e70:	f300 83d6 	bgt.w	406620 <_svfprintf_r+0xac4>
  405e74:	f108 0808 	add.w	r8, r8, #8
  405e78:	2d80      	cmp	r5, #128	; 0x80
  405e7a:	f000 8315 	beq.w	4064a8 <_svfprintf_r+0x94c>
  405e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405e82:	1a9f      	subs	r7, r3, r2
  405e84:	2f00      	cmp	r7, #0
  405e86:	dd36      	ble.n	405ef6 <_svfprintf_r+0x39a>
  405e88:	2f10      	cmp	r7, #16
  405e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405e8c:	4d8e      	ldr	r5, [pc, #568]	; (4060c8 <_svfprintf_r+0x56c>)
  405e8e:	dd27      	ble.n	405ee0 <_svfprintf_r+0x384>
  405e90:	4642      	mov	r2, r8
  405e92:	4621      	mov	r1, r4
  405e94:	46b0      	mov	r8, r6
  405e96:	f04f 0b10 	mov.w	fp, #16
  405e9a:	462e      	mov	r6, r5
  405e9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405e9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405ea0:	e004      	b.n	405eac <_svfprintf_r+0x350>
  405ea2:	3f10      	subs	r7, #16
  405ea4:	2f10      	cmp	r7, #16
  405ea6:	f102 0208 	add.w	r2, r2, #8
  405eaa:	dd15      	ble.n	405ed8 <_svfprintf_r+0x37c>
  405eac:	3301      	adds	r3, #1
  405eae:	3110      	adds	r1, #16
  405eb0:	2b07      	cmp	r3, #7
  405eb2:	9127      	str	r1, [sp, #156]	; 0x9c
  405eb4:	9326      	str	r3, [sp, #152]	; 0x98
  405eb6:	e882 0840 	stmia.w	r2, {r6, fp}
  405eba:	ddf2      	ble.n	405ea2 <_svfprintf_r+0x346>
  405ebc:	aa25      	add	r2, sp, #148	; 0x94
  405ebe:	4629      	mov	r1, r5
  405ec0:	4620      	mov	r0, r4
  405ec2:	f003 f9e7 	bl	409294 <__ssprint_r>
  405ec6:	2800      	cmp	r0, #0
  405ec8:	f47f af1a 	bne.w	405d00 <_svfprintf_r+0x1a4>
  405ecc:	3f10      	subs	r7, #16
  405ece:	2f10      	cmp	r7, #16
  405ed0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405ed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405ed4:	464a      	mov	r2, r9
  405ed6:	dce9      	bgt.n	405eac <_svfprintf_r+0x350>
  405ed8:	4635      	mov	r5, r6
  405eda:	460c      	mov	r4, r1
  405edc:	4646      	mov	r6, r8
  405ede:	4690      	mov	r8, r2
  405ee0:	3301      	adds	r3, #1
  405ee2:	443c      	add	r4, r7
  405ee4:	2b07      	cmp	r3, #7
  405ee6:	9427      	str	r4, [sp, #156]	; 0x9c
  405ee8:	9326      	str	r3, [sp, #152]	; 0x98
  405eea:	e888 00a0 	stmia.w	r8, {r5, r7}
  405eee:	f300 8381 	bgt.w	4065f4 <_svfprintf_r+0xa98>
  405ef2:	f108 0808 	add.w	r8, r8, #8
  405ef6:	9b07      	ldr	r3, [sp, #28]
  405ef8:	05df      	lsls	r7, r3, #23
  405efa:	f100 8268 	bmi.w	4063ce <_svfprintf_r+0x872>
  405efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f00:	990e      	ldr	r1, [sp, #56]	; 0x38
  405f02:	f8c8 6000 	str.w	r6, [r8]
  405f06:	3301      	adds	r3, #1
  405f08:	440c      	add	r4, r1
  405f0a:	2b07      	cmp	r3, #7
  405f0c:	9427      	str	r4, [sp, #156]	; 0x9c
  405f0e:	f8c8 1004 	str.w	r1, [r8, #4]
  405f12:	9326      	str	r3, [sp, #152]	; 0x98
  405f14:	f300 834d 	bgt.w	4065b2 <_svfprintf_r+0xa56>
  405f18:	f108 0808 	add.w	r8, r8, #8
  405f1c:	9b07      	ldr	r3, [sp, #28]
  405f1e:	075b      	lsls	r3, r3, #29
  405f20:	d53a      	bpl.n	405f98 <_svfprintf_r+0x43c>
  405f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f24:	9a08      	ldr	r2, [sp, #32]
  405f26:	1a9d      	subs	r5, r3, r2
  405f28:	2d00      	cmp	r5, #0
  405f2a:	dd35      	ble.n	405f98 <_svfprintf_r+0x43c>
  405f2c:	2d10      	cmp	r5, #16
  405f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f30:	dd20      	ble.n	405f74 <_svfprintf_r+0x418>
  405f32:	2610      	movs	r6, #16
  405f34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405f36:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  405f3a:	e004      	b.n	405f46 <_svfprintf_r+0x3ea>
  405f3c:	3d10      	subs	r5, #16
  405f3e:	2d10      	cmp	r5, #16
  405f40:	f108 0808 	add.w	r8, r8, #8
  405f44:	dd16      	ble.n	405f74 <_svfprintf_r+0x418>
  405f46:	3301      	adds	r3, #1
  405f48:	4a5e      	ldr	r2, [pc, #376]	; (4060c4 <_svfprintf_r+0x568>)
  405f4a:	9326      	str	r3, [sp, #152]	; 0x98
  405f4c:	3410      	adds	r4, #16
  405f4e:	2b07      	cmp	r3, #7
  405f50:	9427      	str	r4, [sp, #156]	; 0x9c
  405f52:	e888 0044 	stmia.w	r8, {r2, r6}
  405f56:	ddf1      	ble.n	405f3c <_svfprintf_r+0x3e0>
  405f58:	aa25      	add	r2, sp, #148	; 0x94
  405f5a:	4659      	mov	r1, fp
  405f5c:	4638      	mov	r0, r7
  405f5e:	f003 f999 	bl	409294 <__ssprint_r>
  405f62:	2800      	cmp	r0, #0
  405f64:	f47f aecc 	bne.w	405d00 <_svfprintf_r+0x1a4>
  405f68:	3d10      	subs	r5, #16
  405f6a:	2d10      	cmp	r5, #16
  405f6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405f6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405f70:	46c8      	mov	r8, r9
  405f72:	dce8      	bgt.n	405f46 <_svfprintf_r+0x3ea>
  405f74:	3301      	adds	r3, #1
  405f76:	4a53      	ldr	r2, [pc, #332]	; (4060c4 <_svfprintf_r+0x568>)
  405f78:	9326      	str	r3, [sp, #152]	; 0x98
  405f7a:	442c      	add	r4, r5
  405f7c:	2b07      	cmp	r3, #7
  405f7e:	9427      	str	r4, [sp, #156]	; 0x9c
  405f80:	e888 0024 	stmia.w	r8, {r2, r5}
  405f84:	dd08      	ble.n	405f98 <_svfprintf_r+0x43c>
  405f86:	aa25      	add	r2, sp, #148	; 0x94
  405f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405f8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405f8c:	f003 f982 	bl	409294 <__ssprint_r>
  405f90:	2800      	cmp	r0, #0
  405f92:	f47f aeb5 	bne.w	405d00 <_svfprintf_r+0x1a4>
  405f96:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405f9c:	9908      	ldr	r1, [sp, #32]
  405f9e:	428a      	cmp	r2, r1
  405fa0:	bfac      	ite	ge
  405fa2:	189b      	addge	r3, r3, r2
  405fa4:	185b      	addlt	r3, r3, r1
  405fa6:	9309      	str	r3, [sp, #36]	; 0x24
  405fa8:	2c00      	cmp	r4, #0
  405faa:	f040 830d 	bne.w	4065c8 <_svfprintf_r+0xa6c>
  405fae:	2300      	movs	r3, #0
  405fb0:	9326      	str	r3, [sp, #152]	; 0x98
  405fb2:	46c8      	mov	r8, r9
  405fb4:	e5f9      	b.n	405baa <_svfprintf_r+0x4e>
  405fb6:	9311      	str	r3, [sp, #68]	; 0x44
  405fb8:	f01b 0320 	ands.w	r3, fp, #32
  405fbc:	f040 81e3 	bne.w	406386 <_svfprintf_r+0x82a>
  405fc0:	f01b 0210 	ands.w	r2, fp, #16
  405fc4:	f040 842e 	bne.w	406824 <_svfprintf_r+0xcc8>
  405fc8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  405fcc:	f000 842a 	beq.w	406824 <_svfprintf_r+0xcc8>
  405fd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  405fd2:	4613      	mov	r3, r2
  405fd4:	460a      	mov	r2, r1
  405fd6:	3204      	adds	r2, #4
  405fd8:	880c      	ldrh	r4, [r1, #0]
  405fda:	920f      	str	r2, [sp, #60]	; 0x3c
  405fdc:	2500      	movs	r5, #0
  405fde:	e6b0      	b.n	405d42 <_svfprintf_r+0x1e6>
  405fe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405fe2:	9311      	str	r3, [sp, #68]	; 0x44
  405fe4:	6816      	ldr	r6, [r2, #0]
  405fe6:	2400      	movs	r4, #0
  405fe8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  405fec:	1d15      	adds	r5, r2, #4
  405fee:	2e00      	cmp	r6, #0
  405ff0:	f000 86a7 	beq.w	406d42 <_svfprintf_r+0x11e6>
  405ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405ff6:	1c53      	adds	r3, r2, #1
  405ff8:	f000 8609 	beq.w	406c0e <_svfprintf_r+0x10b2>
  405ffc:	4621      	mov	r1, r4
  405ffe:	4630      	mov	r0, r6
  406000:	f002 fbd6 	bl	4087b0 <memchr>
  406004:	2800      	cmp	r0, #0
  406006:	f000 86e1 	beq.w	406dcc <_svfprintf_r+0x1270>
  40600a:	1b83      	subs	r3, r0, r6
  40600c:	930e      	str	r3, [sp, #56]	; 0x38
  40600e:	940a      	str	r4, [sp, #40]	; 0x28
  406010:	950f      	str	r5, [sp, #60]	; 0x3c
  406012:	f8cd b01c 	str.w	fp, [sp, #28]
  406016:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40601a:	9308      	str	r3, [sp, #32]
  40601c:	9412      	str	r4, [sp, #72]	; 0x48
  40601e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406022:	e6b3      	b.n	405d8c <_svfprintf_r+0x230>
  406024:	f89a 3000 	ldrb.w	r3, [sl]
  406028:	2201      	movs	r2, #1
  40602a:	212b      	movs	r1, #43	; 0x2b
  40602c:	e5ee      	b.n	405c0c <_svfprintf_r+0xb0>
  40602e:	f04b 0b20 	orr.w	fp, fp, #32
  406032:	f89a 3000 	ldrb.w	r3, [sl]
  406036:	e5e9      	b.n	405c0c <_svfprintf_r+0xb0>
  406038:	9311      	str	r3, [sp, #68]	; 0x44
  40603a:	2a00      	cmp	r2, #0
  40603c:	f040 8795 	bne.w	406f6a <_svfprintf_r+0x140e>
  406040:	4b22      	ldr	r3, [pc, #136]	; (4060cc <_svfprintf_r+0x570>)
  406042:	9318      	str	r3, [sp, #96]	; 0x60
  406044:	f01b 0f20 	tst.w	fp, #32
  406048:	f040 8111 	bne.w	40626e <_svfprintf_r+0x712>
  40604c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40604e:	f01b 0f10 	tst.w	fp, #16
  406052:	4613      	mov	r3, r2
  406054:	f040 83e1 	bne.w	40681a <_svfprintf_r+0xcbe>
  406058:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40605c:	f000 83dd 	beq.w	40681a <_svfprintf_r+0xcbe>
  406060:	3304      	adds	r3, #4
  406062:	8814      	ldrh	r4, [r2, #0]
  406064:	930f      	str	r3, [sp, #60]	; 0x3c
  406066:	2500      	movs	r5, #0
  406068:	f01b 0f01 	tst.w	fp, #1
  40606c:	f000 810c 	beq.w	406288 <_svfprintf_r+0x72c>
  406070:	ea54 0305 	orrs.w	r3, r4, r5
  406074:	f000 8108 	beq.w	406288 <_svfprintf_r+0x72c>
  406078:	2330      	movs	r3, #48	; 0x30
  40607a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40607e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  406082:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  406086:	f04b 0b02 	orr.w	fp, fp, #2
  40608a:	2302      	movs	r3, #2
  40608c:	e659      	b.n	405d42 <_svfprintf_r+0x1e6>
  40608e:	f89a 3000 	ldrb.w	r3, [sl]
  406092:	2900      	cmp	r1, #0
  406094:	f47f adba 	bne.w	405c0c <_svfprintf_r+0xb0>
  406098:	2201      	movs	r2, #1
  40609a:	2120      	movs	r1, #32
  40609c:	e5b6      	b.n	405c0c <_svfprintf_r+0xb0>
  40609e:	f04b 0b01 	orr.w	fp, fp, #1
  4060a2:	f89a 3000 	ldrb.w	r3, [sl]
  4060a6:	e5b1      	b.n	405c0c <_svfprintf_r+0xb0>
  4060a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4060aa:	6823      	ldr	r3, [r4, #0]
  4060ac:	930d      	str	r3, [sp, #52]	; 0x34
  4060ae:	4618      	mov	r0, r3
  4060b0:	2800      	cmp	r0, #0
  4060b2:	4623      	mov	r3, r4
  4060b4:	f103 0304 	add.w	r3, r3, #4
  4060b8:	f6ff ae0a 	blt.w	405cd0 <_svfprintf_r+0x174>
  4060bc:	930f      	str	r3, [sp, #60]	; 0x3c
  4060be:	f89a 3000 	ldrb.w	r3, [sl]
  4060c2:	e5a3      	b.n	405c0c <_svfprintf_r+0xb0>
  4060c4:	00409b88 	.word	0x00409b88
  4060c8:	00409b98 	.word	0x00409b98
  4060cc:	00409b68 	.word	0x00409b68
  4060d0:	f04b 0b10 	orr.w	fp, fp, #16
  4060d4:	f01b 0f20 	tst.w	fp, #32
  4060d8:	9311      	str	r3, [sp, #68]	; 0x44
  4060da:	f43f ae23 	beq.w	405d24 <_svfprintf_r+0x1c8>
  4060de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4060e0:	3507      	adds	r5, #7
  4060e2:	f025 0307 	bic.w	r3, r5, #7
  4060e6:	f103 0208 	add.w	r2, r3, #8
  4060ea:	e9d3 4500 	ldrd	r4, r5, [r3]
  4060ee:	920f      	str	r2, [sp, #60]	; 0x3c
  4060f0:	2301      	movs	r3, #1
  4060f2:	e626      	b.n	405d42 <_svfprintf_r+0x1e6>
  4060f4:	f89a 3000 	ldrb.w	r3, [sl]
  4060f8:	2b2a      	cmp	r3, #42	; 0x2a
  4060fa:	f10a 0401 	add.w	r4, sl, #1
  4060fe:	f000 8727 	beq.w	406f50 <_svfprintf_r+0x13f4>
  406102:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406106:	2809      	cmp	r0, #9
  406108:	46a2      	mov	sl, r4
  40610a:	f200 86ad 	bhi.w	406e68 <_svfprintf_r+0x130c>
  40610e:	2300      	movs	r3, #0
  406110:	461c      	mov	r4, r3
  406112:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406116:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40611a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40611e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406122:	2809      	cmp	r0, #9
  406124:	d9f5      	bls.n	406112 <_svfprintf_r+0x5b6>
  406126:	940a      	str	r4, [sp, #40]	; 0x28
  406128:	e572      	b.n	405c10 <_svfprintf_r+0xb4>
  40612a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40612e:	f89a 3000 	ldrb.w	r3, [sl]
  406132:	e56b      	b.n	405c0c <_svfprintf_r+0xb0>
  406134:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406138:	f89a 3000 	ldrb.w	r3, [sl]
  40613c:	e566      	b.n	405c0c <_svfprintf_r+0xb0>
  40613e:	f89a 3000 	ldrb.w	r3, [sl]
  406142:	2b6c      	cmp	r3, #108	; 0x6c
  406144:	bf03      	ittte	eq
  406146:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40614a:	f04b 0b20 	orreq.w	fp, fp, #32
  40614e:	f10a 0a01 	addeq.w	sl, sl, #1
  406152:	f04b 0b10 	orrne.w	fp, fp, #16
  406156:	e559      	b.n	405c0c <_svfprintf_r+0xb0>
  406158:	2a00      	cmp	r2, #0
  40615a:	f040 8711 	bne.w	406f80 <_svfprintf_r+0x1424>
  40615e:	f01b 0f20 	tst.w	fp, #32
  406162:	f040 84f9 	bne.w	406b58 <_svfprintf_r+0xffc>
  406166:	f01b 0f10 	tst.w	fp, #16
  40616a:	f040 84ac 	bne.w	406ac6 <_svfprintf_r+0xf6a>
  40616e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406172:	f000 84a8 	beq.w	406ac6 <_svfprintf_r+0xf6a>
  406176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406178:	6813      	ldr	r3, [r2, #0]
  40617a:	3204      	adds	r2, #4
  40617c:	920f      	str	r2, [sp, #60]	; 0x3c
  40617e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  406182:	801a      	strh	r2, [r3, #0]
  406184:	e511      	b.n	405baa <_svfprintf_r+0x4e>
  406186:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406188:	4bb3      	ldr	r3, [pc, #716]	; (406458 <_svfprintf_r+0x8fc>)
  40618a:	680c      	ldr	r4, [r1, #0]
  40618c:	9318      	str	r3, [sp, #96]	; 0x60
  40618e:	2230      	movs	r2, #48	; 0x30
  406190:	2378      	movs	r3, #120	; 0x78
  406192:	3104      	adds	r1, #4
  406194:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  406198:	9311      	str	r3, [sp, #68]	; 0x44
  40619a:	f04b 0b02 	orr.w	fp, fp, #2
  40619e:	910f      	str	r1, [sp, #60]	; 0x3c
  4061a0:	2500      	movs	r5, #0
  4061a2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4061a6:	2302      	movs	r3, #2
  4061a8:	e5cb      	b.n	405d42 <_svfprintf_r+0x1e6>
  4061aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4061ac:	9311      	str	r3, [sp, #68]	; 0x44
  4061ae:	680a      	ldr	r2, [r1, #0]
  4061b0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4061b4:	2300      	movs	r3, #0
  4061b6:	460a      	mov	r2, r1
  4061b8:	461f      	mov	r7, r3
  4061ba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4061be:	3204      	adds	r2, #4
  4061c0:	2301      	movs	r3, #1
  4061c2:	9308      	str	r3, [sp, #32]
  4061c4:	f8cd b01c 	str.w	fp, [sp, #28]
  4061c8:	970a      	str	r7, [sp, #40]	; 0x28
  4061ca:	9712      	str	r7, [sp, #72]	; 0x48
  4061cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4061ce:	930e      	str	r3, [sp, #56]	; 0x38
  4061d0:	ae28      	add	r6, sp, #160	; 0xa0
  4061d2:	e5df      	b.n	405d94 <_svfprintf_r+0x238>
  4061d4:	9311      	str	r3, [sp, #68]	; 0x44
  4061d6:	2a00      	cmp	r2, #0
  4061d8:	f040 86ea 	bne.w	406fb0 <_svfprintf_r+0x1454>
  4061dc:	f01b 0f20 	tst.w	fp, #32
  4061e0:	d15d      	bne.n	40629e <_svfprintf_r+0x742>
  4061e2:	f01b 0f10 	tst.w	fp, #16
  4061e6:	f040 8308 	bne.w	4067fa <_svfprintf_r+0xc9e>
  4061ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4061ee:	f000 8304 	beq.w	4067fa <_svfprintf_r+0xc9e>
  4061f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4061f4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4061f8:	3104      	adds	r1, #4
  4061fa:	17e5      	asrs	r5, r4, #31
  4061fc:	4622      	mov	r2, r4
  4061fe:	462b      	mov	r3, r5
  406200:	910f      	str	r1, [sp, #60]	; 0x3c
  406202:	2a00      	cmp	r2, #0
  406204:	f173 0300 	sbcs.w	r3, r3, #0
  406208:	db58      	blt.n	4062bc <_svfprintf_r+0x760>
  40620a:	990a      	ldr	r1, [sp, #40]	; 0x28
  40620c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406210:	1c4a      	adds	r2, r1, #1
  406212:	f04f 0301 	mov.w	r3, #1
  406216:	f47f ad9b 	bne.w	405d50 <_svfprintf_r+0x1f4>
  40621a:	ea54 0205 	orrs.w	r2, r4, r5
  40621e:	f000 81df 	beq.w	4065e0 <_svfprintf_r+0xa84>
  406222:	f8cd b01c 	str.w	fp, [sp, #28]
  406226:	2b01      	cmp	r3, #1
  406228:	f000 827b 	beq.w	406722 <_svfprintf_r+0xbc6>
  40622c:	2b02      	cmp	r3, #2
  40622e:	f040 8206 	bne.w	40663e <_svfprintf_r+0xae2>
  406232:	9818      	ldr	r0, [sp, #96]	; 0x60
  406234:	464e      	mov	r6, r9
  406236:	0923      	lsrs	r3, r4, #4
  406238:	f004 010f 	and.w	r1, r4, #15
  40623c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406240:	092a      	lsrs	r2, r5, #4
  406242:	461c      	mov	r4, r3
  406244:	4615      	mov	r5, r2
  406246:	5c43      	ldrb	r3, [r0, r1]
  406248:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40624c:	ea54 0305 	orrs.w	r3, r4, r5
  406250:	d1f1      	bne.n	406236 <_svfprintf_r+0x6da>
  406252:	eba9 0306 	sub.w	r3, r9, r6
  406256:	930e      	str	r3, [sp, #56]	; 0x38
  406258:	e590      	b.n	405d7c <_svfprintf_r+0x220>
  40625a:	9311      	str	r3, [sp, #68]	; 0x44
  40625c:	2a00      	cmp	r2, #0
  40625e:	f040 86a3 	bne.w	406fa8 <_svfprintf_r+0x144c>
  406262:	4b7e      	ldr	r3, [pc, #504]	; (40645c <_svfprintf_r+0x900>)
  406264:	9318      	str	r3, [sp, #96]	; 0x60
  406266:	f01b 0f20 	tst.w	fp, #32
  40626a:	f43f aeef 	beq.w	40604c <_svfprintf_r+0x4f0>
  40626e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406270:	3507      	adds	r5, #7
  406272:	f025 0307 	bic.w	r3, r5, #7
  406276:	f103 0208 	add.w	r2, r3, #8
  40627a:	f01b 0f01 	tst.w	fp, #1
  40627e:	920f      	str	r2, [sp, #60]	; 0x3c
  406280:	e9d3 4500 	ldrd	r4, r5, [r3]
  406284:	f47f aef4 	bne.w	406070 <_svfprintf_r+0x514>
  406288:	2302      	movs	r3, #2
  40628a:	e55a      	b.n	405d42 <_svfprintf_r+0x1e6>
  40628c:	9311      	str	r3, [sp, #68]	; 0x44
  40628e:	2a00      	cmp	r2, #0
  406290:	f040 8686 	bne.w	406fa0 <_svfprintf_r+0x1444>
  406294:	f04b 0b10 	orr.w	fp, fp, #16
  406298:	f01b 0f20 	tst.w	fp, #32
  40629c:	d0a1      	beq.n	4061e2 <_svfprintf_r+0x686>
  40629e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4062a0:	3507      	adds	r5, #7
  4062a2:	f025 0507 	bic.w	r5, r5, #7
  4062a6:	e9d5 2300 	ldrd	r2, r3, [r5]
  4062aa:	2a00      	cmp	r2, #0
  4062ac:	f105 0108 	add.w	r1, r5, #8
  4062b0:	461d      	mov	r5, r3
  4062b2:	f173 0300 	sbcs.w	r3, r3, #0
  4062b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4062b8:	4614      	mov	r4, r2
  4062ba:	daa6      	bge.n	40620a <_svfprintf_r+0x6ae>
  4062bc:	272d      	movs	r7, #45	; 0x2d
  4062be:	4264      	negs	r4, r4
  4062c0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4062c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4062c8:	2301      	movs	r3, #1
  4062ca:	e53d      	b.n	405d48 <_svfprintf_r+0x1ec>
  4062cc:	9311      	str	r3, [sp, #68]	; 0x44
  4062ce:	2a00      	cmp	r2, #0
  4062d0:	f040 8662 	bne.w	406f98 <_svfprintf_r+0x143c>
  4062d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4062d6:	3507      	adds	r5, #7
  4062d8:	f025 0307 	bic.w	r3, r5, #7
  4062dc:	f103 0208 	add.w	r2, r3, #8
  4062e0:	920f      	str	r2, [sp, #60]	; 0x3c
  4062e2:	681a      	ldr	r2, [r3, #0]
  4062e4:	9215      	str	r2, [sp, #84]	; 0x54
  4062e6:	685b      	ldr	r3, [r3, #4]
  4062e8:	9314      	str	r3, [sp, #80]	; 0x50
  4062ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4062ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4062ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4062f2:	4628      	mov	r0, r5
  4062f4:	4621      	mov	r1, r4
  4062f6:	f04f 32ff 	mov.w	r2, #4294967295
  4062fa:	4b59      	ldr	r3, [pc, #356]	; (406460 <_svfprintf_r+0x904>)
  4062fc:	f7fe ff36 	bl	40516c <__aeabi_dcmpun>
  406300:	2800      	cmp	r0, #0
  406302:	f040 834a 	bne.w	40699a <_svfprintf_r+0xe3e>
  406306:	4628      	mov	r0, r5
  406308:	4621      	mov	r1, r4
  40630a:	f04f 32ff 	mov.w	r2, #4294967295
  40630e:	4b54      	ldr	r3, [pc, #336]	; (406460 <_svfprintf_r+0x904>)
  406310:	f7fe ff0e 	bl	405130 <__aeabi_dcmple>
  406314:	2800      	cmp	r0, #0
  406316:	f040 8340 	bne.w	40699a <_svfprintf_r+0xe3e>
  40631a:	a815      	add	r0, sp, #84	; 0x54
  40631c:	c80d      	ldmia	r0, {r0, r2, r3}
  40631e:	9914      	ldr	r1, [sp, #80]	; 0x50
  406320:	f7fe fefc 	bl	40511c <__aeabi_dcmplt>
  406324:	2800      	cmp	r0, #0
  406326:	f040 8530 	bne.w	406d8a <_svfprintf_r+0x122e>
  40632a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40632e:	4e4d      	ldr	r6, [pc, #308]	; (406464 <_svfprintf_r+0x908>)
  406330:	4b4d      	ldr	r3, [pc, #308]	; (406468 <_svfprintf_r+0x90c>)
  406332:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  406336:	9007      	str	r0, [sp, #28]
  406338:	9811      	ldr	r0, [sp, #68]	; 0x44
  40633a:	2203      	movs	r2, #3
  40633c:	2100      	movs	r1, #0
  40633e:	9208      	str	r2, [sp, #32]
  406340:	910a      	str	r1, [sp, #40]	; 0x28
  406342:	2847      	cmp	r0, #71	; 0x47
  406344:	bfd8      	it	le
  406346:	461e      	movle	r6, r3
  406348:	920e      	str	r2, [sp, #56]	; 0x38
  40634a:	9112      	str	r1, [sp, #72]	; 0x48
  40634c:	e51e      	b.n	405d8c <_svfprintf_r+0x230>
  40634e:	f04b 0b08 	orr.w	fp, fp, #8
  406352:	f89a 3000 	ldrb.w	r3, [sl]
  406356:	e459      	b.n	405c0c <_svfprintf_r+0xb0>
  406358:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40635c:	2300      	movs	r3, #0
  40635e:	461c      	mov	r4, r3
  406360:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406364:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406368:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40636c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406370:	2809      	cmp	r0, #9
  406372:	d9f5      	bls.n	406360 <_svfprintf_r+0x804>
  406374:	940d      	str	r4, [sp, #52]	; 0x34
  406376:	e44b      	b.n	405c10 <_svfprintf_r+0xb4>
  406378:	f04b 0b10 	orr.w	fp, fp, #16
  40637c:	9311      	str	r3, [sp, #68]	; 0x44
  40637e:	f01b 0320 	ands.w	r3, fp, #32
  406382:	f43f ae1d 	beq.w	405fc0 <_svfprintf_r+0x464>
  406386:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406388:	3507      	adds	r5, #7
  40638a:	f025 0307 	bic.w	r3, r5, #7
  40638e:	f103 0208 	add.w	r2, r3, #8
  406392:	e9d3 4500 	ldrd	r4, r5, [r3]
  406396:	920f      	str	r2, [sp, #60]	; 0x3c
  406398:	2300      	movs	r3, #0
  40639a:	e4d2      	b.n	405d42 <_svfprintf_r+0x1e6>
  40639c:	9311      	str	r3, [sp, #68]	; 0x44
  40639e:	2a00      	cmp	r2, #0
  4063a0:	f040 85e7 	bne.w	406f72 <_svfprintf_r+0x1416>
  4063a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063a6:	2a00      	cmp	r2, #0
  4063a8:	f43f aca3 	beq.w	405cf2 <_svfprintf_r+0x196>
  4063ac:	2300      	movs	r3, #0
  4063ae:	2101      	movs	r1, #1
  4063b0:	461f      	mov	r7, r3
  4063b2:	9108      	str	r1, [sp, #32]
  4063b4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4063b8:	f8cd b01c 	str.w	fp, [sp, #28]
  4063bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4063c0:	930a      	str	r3, [sp, #40]	; 0x28
  4063c2:	9312      	str	r3, [sp, #72]	; 0x48
  4063c4:	910e      	str	r1, [sp, #56]	; 0x38
  4063c6:	ae28      	add	r6, sp, #160	; 0xa0
  4063c8:	e4e4      	b.n	405d94 <_svfprintf_r+0x238>
  4063ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4063cc:	e534      	b.n	405e38 <_svfprintf_r+0x2dc>
  4063ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4063d0:	2b65      	cmp	r3, #101	; 0x65
  4063d2:	f340 80a7 	ble.w	406524 <_svfprintf_r+0x9c8>
  4063d6:	a815      	add	r0, sp, #84	; 0x54
  4063d8:	c80d      	ldmia	r0, {r0, r2, r3}
  4063da:	9914      	ldr	r1, [sp, #80]	; 0x50
  4063dc:	f7fe fe94 	bl	405108 <__aeabi_dcmpeq>
  4063e0:	2800      	cmp	r0, #0
  4063e2:	f000 8150 	beq.w	406686 <_svfprintf_r+0xb2a>
  4063e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4063e8:	4a20      	ldr	r2, [pc, #128]	; (40646c <_svfprintf_r+0x910>)
  4063ea:	f8c8 2000 	str.w	r2, [r8]
  4063ee:	3301      	adds	r3, #1
  4063f0:	3401      	adds	r4, #1
  4063f2:	2201      	movs	r2, #1
  4063f4:	2b07      	cmp	r3, #7
  4063f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4063f8:	9326      	str	r3, [sp, #152]	; 0x98
  4063fa:	f8c8 2004 	str.w	r2, [r8, #4]
  4063fe:	f300 836a 	bgt.w	406ad6 <_svfprintf_r+0xf7a>
  406402:	f108 0808 	add.w	r8, r8, #8
  406406:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40640a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40640c:	4293      	cmp	r3, r2
  40640e:	db03      	blt.n	406418 <_svfprintf_r+0x8bc>
  406410:	9b07      	ldr	r3, [sp, #28]
  406412:	07dd      	lsls	r5, r3, #31
  406414:	f57f ad82 	bpl.w	405f1c <_svfprintf_r+0x3c0>
  406418:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40641a:	9919      	ldr	r1, [sp, #100]	; 0x64
  40641c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40641e:	f8c8 2000 	str.w	r2, [r8]
  406422:	3301      	adds	r3, #1
  406424:	440c      	add	r4, r1
  406426:	2b07      	cmp	r3, #7
  406428:	f8c8 1004 	str.w	r1, [r8, #4]
  40642c:	9427      	str	r4, [sp, #156]	; 0x9c
  40642e:	9326      	str	r3, [sp, #152]	; 0x98
  406430:	f300 839e 	bgt.w	406b70 <_svfprintf_r+0x1014>
  406434:	f108 0808 	add.w	r8, r8, #8
  406438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40643a:	1e5e      	subs	r6, r3, #1
  40643c:	2e00      	cmp	r6, #0
  40643e:	f77f ad6d 	ble.w	405f1c <_svfprintf_r+0x3c0>
  406442:	2e10      	cmp	r6, #16
  406444:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406446:	4d0a      	ldr	r5, [pc, #40]	; (406470 <_svfprintf_r+0x914>)
  406448:	f340 81f5 	ble.w	406836 <_svfprintf_r+0xcda>
  40644c:	4622      	mov	r2, r4
  40644e:	2710      	movs	r7, #16
  406450:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  406454:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  406456:	e013      	b.n	406480 <_svfprintf_r+0x924>
  406458:	00409b68 	.word	0x00409b68
  40645c:	00409b54 	.word	0x00409b54
  406460:	7fefffff 	.word	0x7fefffff
  406464:	00409b48 	.word	0x00409b48
  406468:	00409b44 	.word	0x00409b44
  40646c:	00409b84 	.word	0x00409b84
  406470:	00409b98 	.word	0x00409b98
  406474:	f108 0808 	add.w	r8, r8, #8
  406478:	3e10      	subs	r6, #16
  40647a:	2e10      	cmp	r6, #16
  40647c:	f340 81da 	ble.w	406834 <_svfprintf_r+0xcd8>
  406480:	3301      	adds	r3, #1
  406482:	3210      	adds	r2, #16
  406484:	2b07      	cmp	r3, #7
  406486:	9227      	str	r2, [sp, #156]	; 0x9c
  406488:	9326      	str	r3, [sp, #152]	; 0x98
  40648a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40648e:	ddf1      	ble.n	406474 <_svfprintf_r+0x918>
  406490:	aa25      	add	r2, sp, #148	; 0x94
  406492:	4621      	mov	r1, r4
  406494:	4658      	mov	r0, fp
  406496:	f002 fefd 	bl	409294 <__ssprint_r>
  40649a:	2800      	cmp	r0, #0
  40649c:	f47f ac30 	bne.w	405d00 <_svfprintf_r+0x1a4>
  4064a0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4064a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4064a4:	46c8      	mov	r8, r9
  4064a6:	e7e7      	b.n	406478 <_svfprintf_r+0x91c>
  4064a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4064aa:	9a08      	ldr	r2, [sp, #32]
  4064ac:	1a9f      	subs	r7, r3, r2
  4064ae:	2f00      	cmp	r7, #0
  4064b0:	f77f ace5 	ble.w	405e7e <_svfprintf_r+0x322>
  4064b4:	2f10      	cmp	r7, #16
  4064b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4064b8:	4db6      	ldr	r5, [pc, #728]	; (406794 <_svfprintf_r+0xc38>)
  4064ba:	dd27      	ble.n	40650c <_svfprintf_r+0x9b0>
  4064bc:	4642      	mov	r2, r8
  4064be:	4621      	mov	r1, r4
  4064c0:	46b0      	mov	r8, r6
  4064c2:	f04f 0b10 	mov.w	fp, #16
  4064c6:	462e      	mov	r6, r5
  4064c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4064ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4064cc:	e004      	b.n	4064d8 <_svfprintf_r+0x97c>
  4064ce:	3f10      	subs	r7, #16
  4064d0:	2f10      	cmp	r7, #16
  4064d2:	f102 0208 	add.w	r2, r2, #8
  4064d6:	dd15      	ble.n	406504 <_svfprintf_r+0x9a8>
  4064d8:	3301      	adds	r3, #1
  4064da:	3110      	adds	r1, #16
  4064dc:	2b07      	cmp	r3, #7
  4064de:	9127      	str	r1, [sp, #156]	; 0x9c
  4064e0:	9326      	str	r3, [sp, #152]	; 0x98
  4064e2:	e882 0840 	stmia.w	r2, {r6, fp}
  4064e6:	ddf2      	ble.n	4064ce <_svfprintf_r+0x972>
  4064e8:	aa25      	add	r2, sp, #148	; 0x94
  4064ea:	4629      	mov	r1, r5
  4064ec:	4620      	mov	r0, r4
  4064ee:	f002 fed1 	bl	409294 <__ssprint_r>
  4064f2:	2800      	cmp	r0, #0
  4064f4:	f47f ac04 	bne.w	405d00 <_svfprintf_r+0x1a4>
  4064f8:	3f10      	subs	r7, #16
  4064fa:	2f10      	cmp	r7, #16
  4064fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4064fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406500:	464a      	mov	r2, r9
  406502:	dce9      	bgt.n	4064d8 <_svfprintf_r+0x97c>
  406504:	4635      	mov	r5, r6
  406506:	460c      	mov	r4, r1
  406508:	4646      	mov	r6, r8
  40650a:	4690      	mov	r8, r2
  40650c:	3301      	adds	r3, #1
  40650e:	443c      	add	r4, r7
  406510:	2b07      	cmp	r3, #7
  406512:	9427      	str	r4, [sp, #156]	; 0x9c
  406514:	9326      	str	r3, [sp, #152]	; 0x98
  406516:	e888 00a0 	stmia.w	r8, {r5, r7}
  40651a:	f300 8232 	bgt.w	406982 <_svfprintf_r+0xe26>
  40651e:	f108 0808 	add.w	r8, r8, #8
  406522:	e4ac      	b.n	405e7e <_svfprintf_r+0x322>
  406524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406526:	9f26      	ldr	r7, [sp, #152]	; 0x98
  406528:	2b01      	cmp	r3, #1
  40652a:	f340 81fe 	ble.w	40692a <_svfprintf_r+0xdce>
  40652e:	3701      	adds	r7, #1
  406530:	3401      	adds	r4, #1
  406532:	2301      	movs	r3, #1
  406534:	2f07      	cmp	r7, #7
  406536:	9427      	str	r4, [sp, #156]	; 0x9c
  406538:	9726      	str	r7, [sp, #152]	; 0x98
  40653a:	f8c8 6000 	str.w	r6, [r8]
  40653e:	f8c8 3004 	str.w	r3, [r8, #4]
  406542:	f300 8203 	bgt.w	40694c <_svfprintf_r+0xdf0>
  406546:	f108 0808 	add.w	r8, r8, #8
  40654a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40654c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40654e:	f8c8 3000 	str.w	r3, [r8]
  406552:	3701      	adds	r7, #1
  406554:	4414      	add	r4, r2
  406556:	2f07      	cmp	r7, #7
  406558:	9427      	str	r4, [sp, #156]	; 0x9c
  40655a:	9726      	str	r7, [sp, #152]	; 0x98
  40655c:	f8c8 2004 	str.w	r2, [r8, #4]
  406560:	f300 8200 	bgt.w	406964 <_svfprintf_r+0xe08>
  406564:	f108 0808 	add.w	r8, r8, #8
  406568:	a815      	add	r0, sp, #84	; 0x54
  40656a:	c80d      	ldmia	r0, {r0, r2, r3}
  40656c:	9914      	ldr	r1, [sp, #80]	; 0x50
  40656e:	f7fe fdcb 	bl	405108 <__aeabi_dcmpeq>
  406572:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406574:	2800      	cmp	r0, #0
  406576:	f040 8101 	bne.w	40677c <_svfprintf_r+0xc20>
  40657a:	3b01      	subs	r3, #1
  40657c:	3701      	adds	r7, #1
  40657e:	3601      	adds	r6, #1
  406580:	441c      	add	r4, r3
  406582:	2f07      	cmp	r7, #7
  406584:	9726      	str	r7, [sp, #152]	; 0x98
  406586:	9427      	str	r4, [sp, #156]	; 0x9c
  406588:	f8c8 6000 	str.w	r6, [r8]
  40658c:	f8c8 3004 	str.w	r3, [r8, #4]
  406590:	f300 8127 	bgt.w	4067e2 <_svfprintf_r+0xc86>
  406594:	f108 0808 	add.w	r8, r8, #8
  406598:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40659a:	f8c8 2004 	str.w	r2, [r8, #4]
  40659e:	3701      	adds	r7, #1
  4065a0:	4414      	add	r4, r2
  4065a2:	ab21      	add	r3, sp, #132	; 0x84
  4065a4:	2f07      	cmp	r7, #7
  4065a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4065a8:	9726      	str	r7, [sp, #152]	; 0x98
  4065aa:	f8c8 3000 	str.w	r3, [r8]
  4065ae:	f77f acb3 	ble.w	405f18 <_svfprintf_r+0x3bc>
  4065b2:	aa25      	add	r2, sp, #148	; 0x94
  4065b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4065b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4065b8:	f002 fe6c 	bl	409294 <__ssprint_r>
  4065bc:	2800      	cmp	r0, #0
  4065be:	f47f ab9f 	bne.w	405d00 <_svfprintf_r+0x1a4>
  4065c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4065c4:	46c8      	mov	r8, r9
  4065c6:	e4a9      	b.n	405f1c <_svfprintf_r+0x3c0>
  4065c8:	aa25      	add	r2, sp, #148	; 0x94
  4065ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4065cc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4065ce:	f002 fe61 	bl	409294 <__ssprint_r>
  4065d2:	2800      	cmp	r0, #0
  4065d4:	f43f aceb 	beq.w	405fae <_svfprintf_r+0x452>
  4065d8:	f7ff bb92 	b.w	405d00 <_svfprintf_r+0x1a4>
  4065dc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4065e0:	2b01      	cmp	r3, #1
  4065e2:	f000 8134 	beq.w	40684e <_svfprintf_r+0xcf2>
  4065e6:	2b02      	cmp	r3, #2
  4065e8:	d125      	bne.n	406636 <_svfprintf_r+0xada>
  4065ea:	f8cd b01c 	str.w	fp, [sp, #28]
  4065ee:	2400      	movs	r4, #0
  4065f0:	2500      	movs	r5, #0
  4065f2:	e61e      	b.n	406232 <_svfprintf_r+0x6d6>
  4065f4:	aa25      	add	r2, sp, #148	; 0x94
  4065f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4065f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4065fa:	f002 fe4b 	bl	409294 <__ssprint_r>
  4065fe:	2800      	cmp	r0, #0
  406600:	f47f ab7e 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406604:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406606:	46c8      	mov	r8, r9
  406608:	e475      	b.n	405ef6 <_svfprintf_r+0x39a>
  40660a:	aa25      	add	r2, sp, #148	; 0x94
  40660c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40660e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406610:	f002 fe40 	bl	409294 <__ssprint_r>
  406614:	2800      	cmp	r0, #0
  406616:	f47f ab73 	bne.w	405d00 <_svfprintf_r+0x1a4>
  40661a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40661c:	46c8      	mov	r8, r9
  40661e:	e41b      	b.n	405e58 <_svfprintf_r+0x2fc>
  406620:	aa25      	add	r2, sp, #148	; 0x94
  406622:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406624:	980c      	ldr	r0, [sp, #48]	; 0x30
  406626:	f002 fe35 	bl	409294 <__ssprint_r>
  40662a:	2800      	cmp	r0, #0
  40662c:	f47f ab68 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406630:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406632:	46c8      	mov	r8, r9
  406634:	e420      	b.n	405e78 <_svfprintf_r+0x31c>
  406636:	f8cd b01c 	str.w	fp, [sp, #28]
  40663a:	2400      	movs	r4, #0
  40663c:	2500      	movs	r5, #0
  40663e:	4649      	mov	r1, r9
  406640:	e000      	b.n	406644 <_svfprintf_r+0xae8>
  406642:	4631      	mov	r1, r6
  406644:	08e2      	lsrs	r2, r4, #3
  406646:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40664a:	08e8      	lsrs	r0, r5, #3
  40664c:	f004 0307 	and.w	r3, r4, #7
  406650:	4605      	mov	r5, r0
  406652:	4614      	mov	r4, r2
  406654:	3330      	adds	r3, #48	; 0x30
  406656:	ea54 0205 	orrs.w	r2, r4, r5
  40665a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40665e:	f101 36ff 	add.w	r6, r1, #4294967295
  406662:	d1ee      	bne.n	406642 <_svfprintf_r+0xae6>
  406664:	9a07      	ldr	r2, [sp, #28]
  406666:	07d2      	lsls	r2, r2, #31
  406668:	f57f adf3 	bpl.w	406252 <_svfprintf_r+0x6f6>
  40666c:	2b30      	cmp	r3, #48	; 0x30
  40666e:	f43f adf0 	beq.w	406252 <_svfprintf_r+0x6f6>
  406672:	3902      	subs	r1, #2
  406674:	2330      	movs	r3, #48	; 0x30
  406676:	f806 3c01 	strb.w	r3, [r6, #-1]
  40667a:	eba9 0301 	sub.w	r3, r9, r1
  40667e:	930e      	str	r3, [sp, #56]	; 0x38
  406680:	460e      	mov	r6, r1
  406682:	f7ff bb7b 	b.w	405d7c <_svfprintf_r+0x220>
  406686:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406688:	2900      	cmp	r1, #0
  40668a:	f340 822e 	ble.w	406aea <_svfprintf_r+0xf8e>
  40668e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406692:	4293      	cmp	r3, r2
  406694:	bfa8      	it	ge
  406696:	4613      	movge	r3, r2
  406698:	2b00      	cmp	r3, #0
  40669a:	461f      	mov	r7, r3
  40669c:	dd0d      	ble.n	4066ba <_svfprintf_r+0xb5e>
  40669e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4066a0:	f8c8 6000 	str.w	r6, [r8]
  4066a4:	3301      	adds	r3, #1
  4066a6:	443c      	add	r4, r7
  4066a8:	2b07      	cmp	r3, #7
  4066aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4066ac:	f8c8 7004 	str.w	r7, [r8, #4]
  4066b0:	9326      	str	r3, [sp, #152]	; 0x98
  4066b2:	f300 831f 	bgt.w	406cf4 <_svfprintf_r+0x1198>
  4066b6:	f108 0808 	add.w	r8, r8, #8
  4066ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066bc:	2f00      	cmp	r7, #0
  4066be:	bfa8      	it	ge
  4066c0:	1bdb      	subge	r3, r3, r7
  4066c2:	2b00      	cmp	r3, #0
  4066c4:	461f      	mov	r7, r3
  4066c6:	f340 80d6 	ble.w	406876 <_svfprintf_r+0xd1a>
  4066ca:	2f10      	cmp	r7, #16
  4066cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4066ce:	4d31      	ldr	r5, [pc, #196]	; (406794 <_svfprintf_r+0xc38>)
  4066d0:	f340 81ed 	ble.w	406aae <_svfprintf_r+0xf52>
  4066d4:	4642      	mov	r2, r8
  4066d6:	4621      	mov	r1, r4
  4066d8:	46b0      	mov	r8, r6
  4066da:	f04f 0b10 	mov.w	fp, #16
  4066de:	462e      	mov	r6, r5
  4066e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4066e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4066e4:	e004      	b.n	4066f0 <_svfprintf_r+0xb94>
  4066e6:	3208      	adds	r2, #8
  4066e8:	3f10      	subs	r7, #16
  4066ea:	2f10      	cmp	r7, #16
  4066ec:	f340 81db 	ble.w	406aa6 <_svfprintf_r+0xf4a>
  4066f0:	3301      	adds	r3, #1
  4066f2:	3110      	adds	r1, #16
  4066f4:	2b07      	cmp	r3, #7
  4066f6:	9127      	str	r1, [sp, #156]	; 0x9c
  4066f8:	9326      	str	r3, [sp, #152]	; 0x98
  4066fa:	e882 0840 	stmia.w	r2, {r6, fp}
  4066fe:	ddf2      	ble.n	4066e6 <_svfprintf_r+0xb8a>
  406700:	aa25      	add	r2, sp, #148	; 0x94
  406702:	4629      	mov	r1, r5
  406704:	4620      	mov	r0, r4
  406706:	f002 fdc5 	bl	409294 <__ssprint_r>
  40670a:	2800      	cmp	r0, #0
  40670c:	f47f aaf8 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406710:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406712:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406714:	464a      	mov	r2, r9
  406716:	e7e7      	b.n	4066e8 <_svfprintf_r+0xb8c>
  406718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40671a:	930e      	str	r3, [sp, #56]	; 0x38
  40671c:	464e      	mov	r6, r9
  40671e:	f7ff bb2d 	b.w	405d7c <_svfprintf_r+0x220>
  406722:	2d00      	cmp	r5, #0
  406724:	bf08      	it	eq
  406726:	2c0a      	cmpeq	r4, #10
  406728:	f0c0 808f 	bcc.w	40684a <_svfprintf_r+0xcee>
  40672c:	464e      	mov	r6, r9
  40672e:	4620      	mov	r0, r4
  406730:	4629      	mov	r1, r5
  406732:	220a      	movs	r2, #10
  406734:	2300      	movs	r3, #0
  406736:	f002 fef3 	bl	409520 <__aeabi_uldivmod>
  40673a:	3230      	adds	r2, #48	; 0x30
  40673c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  406740:	4620      	mov	r0, r4
  406742:	4629      	mov	r1, r5
  406744:	2300      	movs	r3, #0
  406746:	220a      	movs	r2, #10
  406748:	f002 feea 	bl	409520 <__aeabi_uldivmod>
  40674c:	4604      	mov	r4, r0
  40674e:	460d      	mov	r5, r1
  406750:	ea54 0305 	orrs.w	r3, r4, r5
  406754:	d1eb      	bne.n	40672e <_svfprintf_r+0xbd2>
  406756:	eba9 0306 	sub.w	r3, r9, r6
  40675a:	930e      	str	r3, [sp, #56]	; 0x38
  40675c:	f7ff bb0e 	b.w	405d7c <_svfprintf_r+0x220>
  406760:	aa25      	add	r2, sp, #148	; 0x94
  406762:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406764:	980c      	ldr	r0, [sp, #48]	; 0x30
  406766:	f002 fd95 	bl	409294 <__ssprint_r>
  40676a:	2800      	cmp	r0, #0
  40676c:	f47f aac8 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406770:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406774:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406776:	46c8      	mov	r8, r9
  406778:	f7ff bb5e 	b.w	405e38 <_svfprintf_r+0x2dc>
  40677c:	1e5e      	subs	r6, r3, #1
  40677e:	2e00      	cmp	r6, #0
  406780:	f77f af0a 	ble.w	406598 <_svfprintf_r+0xa3c>
  406784:	2e10      	cmp	r6, #16
  406786:	4d03      	ldr	r5, [pc, #12]	; (406794 <_svfprintf_r+0xc38>)
  406788:	dd22      	ble.n	4067d0 <_svfprintf_r+0xc74>
  40678a:	4622      	mov	r2, r4
  40678c:	f04f 0b10 	mov.w	fp, #16
  406790:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406792:	e006      	b.n	4067a2 <_svfprintf_r+0xc46>
  406794:	00409b98 	.word	0x00409b98
  406798:	3e10      	subs	r6, #16
  40679a:	2e10      	cmp	r6, #16
  40679c:	f108 0808 	add.w	r8, r8, #8
  4067a0:	dd15      	ble.n	4067ce <_svfprintf_r+0xc72>
  4067a2:	3701      	adds	r7, #1
  4067a4:	3210      	adds	r2, #16
  4067a6:	2f07      	cmp	r7, #7
  4067a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4067aa:	9726      	str	r7, [sp, #152]	; 0x98
  4067ac:	e888 0820 	stmia.w	r8, {r5, fp}
  4067b0:	ddf2      	ble.n	406798 <_svfprintf_r+0xc3c>
  4067b2:	aa25      	add	r2, sp, #148	; 0x94
  4067b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4067b6:	4620      	mov	r0, r4
  4067b8:	f002 fd6c 	bl	409294 <__ssprint_r>
  4067bc:	2800      	cmp	r0, #0
  4067be:	f47f aa9f 	bne.w	405d00 <_svfprintf_r+0x1a4>
  4067c2:	3e10      	subs	r6, #16
  4067c4:	2e10      	cmp	r6, #16
  4067c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4067c8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4067ca:	46c8      	mov	r8, r9
  4067cc:	dce9      	bgt.n	4067a2 <_svfprintf_r+0xc46>
  4067ce:	4614      	mov	r4, r2
  4067d0:	3701      	adds	r7, #1
  4067d2:	4434      	add	r4, r6
  4067d4:	2f07      	cmp	r7, #7
  4067d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4067d8:	9726      	str	r7, [sp, #152]	; 0x98
  4067da:	e888 0060 	stmia.w	r8, {r5, r6}
  4067de:	f77f aed9 	ble.w	406594 <_svfprintf_r+0xa38>
  4067e2:	aa25      	add	r2, sp, #148	; 0x94
  4067e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4067e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4067e8:	f002 fd54 	bl	409294 <__ssprint_r>
  4067ec:	2800      	cmp	r0, #0
  4067ee:	f47f aa87 	bne.w	405d00 <_svfprintf_r+0x1a4>
  4067f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4067f4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4067f6:	46c8      	mov	r8, r9
  4067f8:	e6ce      	b.n	406598 <_svfprintf_r+0xa3c>
  4067fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4067fc:	6814      	ldr	r4, [r2, #0]
  4067fe:	4613      	mov	r3, r2
  406800:	3304      	adds	r3, #4
  406802:	17e5      	asrs	r5, r4, #31
  406804:	930f      	str	r3, [sp, #60]	; 0x3c
  406806:	4622      	mov	r2, r4
  406808:	462b      	mov	r3, r5
  40680a:	e4fa      	b.n	406202 <_svfprintf_r+0x6a6>
  40680c:	3204      	adds	r2, #4
  40680e:	681c      	ldr	r4, [r3, #0]
  406810:	920f      	str	r2, [sp, #60]	; 0x3c
  406812:	2301      	movs	r3, #1
  406814:	2500      	movs	r5, #0
  406816:	f7ff ba94 	b.w	405d42 <_svfprintf_r+0x1e6>
  40681a:	681c      	ldr	r4, [r3, #0]
  40681c:	3304      	adds	r3, #4
  40681e:	930f      	str	r3, [sp, #60]	; 0x3c
  406820:	2500      	movs	r5, #0
  406822:	e421      	b.n	406068 <_svfprintf_r+0x50c>
  406824:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406826:	460a      	mov	r2, r1
  406828:	3204      	adds	r2, #4
  40682a:	680c      	ldr	r4, [r1, #0]
  40682c:	920f      	str	r2, [sp, #60]	; 0x3c
  40682e:	2500      	movs	r5, #0
  406830:	f7ff ba87 	b.w	405d42 <_svfprintf_r+0x1e6>
  406834:	4614      	mov	r4, r2
  406836:	3301      	adds	r3, #1
  406838:	4434      	add	r4, r6
  40683a:	2b07      	cmp	r3, #7
  40683c:	9427      	str	r4, [sp, #156]	; 0x9c
  40683e:	9326      	str	r3, [sp, #152]	; 0x98
  406840:	e888 0060 	stmia.w	r8, {r5, r6}
  406844:	f77f ab68 	ble.w	405f18 <_svfprintf_r+0x3bc>
  406848:	e6b3      	b.n	4065b2 <_svfprintf_r+0xa56>
  40684a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40684e:	f8cd b01c 	str.w	fp, [sp, #28]
  406852:	ae42      	add	r6, sp, #264	; 0x108
  406854:	3430      	adds	r4, #48	; 0x30
  406856:	2301      	movs	r3, #1
  406858:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40685c:	930e      	str	r3, [sp, #56]	; 0x38
  40685e:	f7ff ba8d 	b.w	405d7c <_svfprintf_r+0x220>
  406862:	aa25      	add	r2, sp, #148	; 0x94
  406864:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406866:	980c      	ldr	r0, [sp, #48]	; 0x30
  406868:	f002 fd14 	bl	409294 <__ssprint_r>
  40686c:	2800      	cmp	r0, #0
  40686e:	f47f aa47 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406872:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406874:	46c8      	mov	r8, r9
  406876:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40687a:	429a      	cmp	r2, r3
  40687c:	db44      	blt.n	406908 <_svfprintf_r+0xdac>
  40687e:	9b07      	ldr	r3, [sp, #28]
  406880:	07d9      	lsls	r1, r3, #31
  406882:	d441      	bmi.n	406908 <_svfprintf_r+0xdac>
  406884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406886:	9812      	ldr	r0, [sp, #72]	; 0x48
  406888:	1a9a      	subs	r2, r3, r2
  40688a:	1a1d      	subs	r5, r3, r0
  40688c:	4295      	cmp	r5, r2
  40688e:	bfa8      	it	ge
  406890:	4615      	movge	r5, r2
  406892:	2d00      	cmp	r5, #0
  406894:	dd0e      	ble.n	4068b4 <_svfprintf_r+0xd58>
  406896:	9926      	ldr	r1, [sp, #152]	; 0x98
  406898:	f8c8 5004 	str.w	r5, [r8, #4]
  40689c:	3101      	adds	r1, #1
  40689e:	4406      	add	r6, r0
  4068a0:	442c      	add	r4, r5
  4068a2:	2907      	cmp	r1, #7
  4068a4:	f8c8 6000 	str.w	r6, [r8]
  4068a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4068aa:	9126      	str	r1, [sp, #152]	; 0x98
  4068ac:	f300 823b 	bgt.w	406d26 <_svfprintf_r+0x11ca>
  4068b0:	f108 0808 	add.w	r8, r8, #8
  4068b4:	2d00      	cmp	r5, #0
  4068b6:	bfac      	ite	ge
  4068b8:	1b56      	subge	r6, r2, r5
  4068ba:	4616      	movlt	r6, r2
  4068bc:	2e00      	cmp	r6, #0
  4068be:	f77f ab2d 	ble.w	405f1c <_svfprintf_r+0x3c0>
  4068c2:	2e10      	cmp	r6, #16
  4068c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4068c6:	4db0      	ldr	r5, [pc, #704]	; (406b88 <_svfprintf_r+0x102c>)
  4068c8:	ddb5      	ble.n	406836 <_svfprintf_r+0xcda>
  4068ca:	4622      	mov	r2, r4
  4068cc:	2710      	movs	r7, #16
  4068ce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4068d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4068d4:	e004      	b.n	4068e0 <_svfprintf_r+0xd84>
  4068d6:	f108 0808 	add.w	r8, r8, #8
  4068da:	3e10      	subs	r6, #16
  4068dc:	2e10      	cmp	r6, #16
  4068de:	dda9      	ble.n	406834 <_svfprintf_r+0xcd8>
  4068e0:	3301      	adds	r3, #1
  4068e2:	3210      	adds	r2, #16
  4068e4:	2b07      	cmp	r3, #7
  4068e6:	9227      	str	r2, [sp, #156]	; 0x9c
  4068e8:	9326      	str	r3, [sp, #152]	; 0x98
  4068ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4068ee:	ddf2      	ble.n	4068d6 <_svfprintf_r+0xd7a>
  4068f0:	aa25      	add	r2, sp, #148	; 0x94
  4068f2:	4621      	mov	r1, r4
  4068f4:	4658      	mov	r0, fp
  4068f6:	f002 fccd 	bl	409294 <__ssprint_r>
  4068fa:	2800      	cmp	r0, #0
  4068fc:	f47f aa00 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406900:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406902:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406904:	46c8      	mov	r8, r9
  406906:	e7e8      	b.n	4068da <_svfprintf_r+0xd7e>
  406908:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40690a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40690c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40690e:	f8c8 1000 	str.w	r1, [r8]
  406912:	3301      	adds	r3, #1
  406914:	4404      	add	r4, r0
  406916:	2b07      	cmp	r3, #7
  406918:	9427      	str	r4, [sp, #156]	; 0x9c
  40691a:	f8c8 0004 	str.w	r0, [r8, #4]
  40691e:	9326      	str	r3, [sp, #152]	; 0x98
  406920:	f300 81f5 	bgt.w	406d0e <_svfprintf_r+0x11b2>
  406924:	f108 0808 	add.w	r8, r8, #8
  406928:	e7ac      	b.n	406884 <_svfprintf_r+0xd28>
  40692a:	9b07      	ldr	r3, [sp, #28]
  40692c:	07da      	lsls	r2, r3, #31
  40692e:	f53f adfe 	bmi.w	40652e <_svfprintf_r+0x9d2>
  406932:	3701      	adds	r7, #1
  406934:	3401      	adds	r4, #1
  406936:	2301      	movs	r3, #1
  406938:	2f07      	cmp	r7, #7
  40693a:	9427      	str	r4, [sp, #156]	; 0x9c
  40693c:	9726      	str	r7, [sp, #152]	; 0x98
  40693e:	f8c8 6000 	str.w	r6, [r8]
  406942:	f8c8 3004 	str.w	r3, [r8, #4]
  406946:	f77f ae25 	ble.w	406594 <_svfprintf_r+0xa38>
  40694a:	e74a      	b.n	4067e2 <_svfprintf_r+0xc86>
  40694c:	aa25      	add	r2, sp, #148	; 0x94
  40694e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406950:	980c      	ldr	r0, [sp, #48]	; 0x30
  406952:	f002 fc9f 	bl	409294 <__ssprint_r>
  406956:	2800      	cmp	r0, #0
  406958:	f47f a9d2 	bne.w	405d00 <_svfprintf_r+0x1a4>
  40695c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40695e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  406960:	46c8      	mov	r8, r9
  406962:	e5f2      	b.n	40654a <_svfprintf_r+0x9ee>
  406964:	aa25      	add	r2, sp, #148	; 0x94
  406966:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406968:	980c      	ldr	r0, [sp, #48]	; 0x30
  40696a:	f002 fc93 	bl	409294 <__ssprint_r>
  40696e:	2800      	cmp	r0, #0
  406970:	f47f a9c6 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406974:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406976:	9f26      	ldr	r7, [sp, #152]	; 0x98
  406978:	46c8      	mov	r8, r9
  40697a:	e5f5      	b.n	406568 <_svfprintf_r+0xa0c>
  40697c:	464e      	mov	r6, r9
  40697e:	f7ff b9fd 	b.w	405d7c <_svfprintf_r+0x220>
  406982:	aa25      	add	r2, sp, #148	; 0x94
  406984:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406986:	980c      	ldr	r0, [sp, #48]	; 0x30
  406988:	f002 fc84 	bl	409294 <__ssprint_r>
  40698c:	2800      	cmp	r0, #0
  40698e:	f47f a9b7 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406992:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406994:	46c8      	mov	r8, r9
  406996:	f7ff ba72 	b.w	405e7e <_svfprintf_r+0x322>
  40699a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40699c:	4622      	mov	r2, r4
  40699e:	4620      	mov	r0, r4
  4069a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4069a2:	4623      	mov	r3, r4
  4069a4:	4621      	mov	r1, r4
  4069a6:	f7fe fbe1 	bl	40516c <__aeabi_dcmpun>
  4069aa:	2800      	cmp	r0, #0
  4069ac:	f040 8286 	bne.w	406ebc <_svfprintf_r+0x1360>
  4069b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4069b2:	3301      	adds	r3, #1
  4069b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4069b6:	f023 0320 	bic.w	r3, r3, #32
  4069ba:	930e      	str	r3, [sp, #56]	; 0x38
  4069bc:	f000 81e2 	beq.w	406d84 <_svfprintf_r+0x1228>
  4069c0:	2b47      	cmp	r3, #71	; 0x47
  4069c2:	f000 811e 	beq.w	406c02 <_svfprintf_r+0x10a6>
  4069c6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4069ca:	9307      	str	r3, [sp, #28]
  4069cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4069ce:	1e1f      	subs	r7, r3, #0
  4069d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4069d2:	9308      	str	r3, [sp, #32]
  4069d4:	bfbb      	ittet	lt
  4069d6:	463b      	movlt	r3, r7
  4069d8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4069dc:	2300      	movge	r3, #0
  4069de:	232d      	movlt	r3, #45	; 0x2d
  4069e0:	9310      	str	r3, [sp, #64]	; 0x40
  4069e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4069e4:	2b66      	cmp	r3, #102	; 0x66
  4069e6:	f000 81bb 	beq.w	406d60 <_svfprintf_r+0x1204>
  4069ea:	2b46      	cmp	r3, #70	; 0x46
  4069ec:	f000 80df 	beq.w	406bae <_svfprintf_r+0x1052>
  4069f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4069f2:	9a08      	ldr	r2, [sp, #32]
  4069f4:	2b45      	cmp	r3, #69	; 0x45
  4069f6:	bf0c      	ite	eq
  4069f8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4069fa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4069fc:	a823      	add	r0, sp, #140	; 0x8c
  4069fe:	a920      	add	r1, sp, #128	; 0x80
  406a00:	bf08      	it	eq
  406a02:	1c5d      	addeq	r5, r3, #1
  406a04:	9004      	str	r0, [sp, #16]
  406a06:	9103      	str	r1, [sp, #12]
  406a08:	a81f      	add	r0, sp, #124	; 0x7c
  406a0a:	2102      	movs	r1, #2
  406a0c:	463b      	mov	r3, r7
  406a0e:	9002      	str	r0, [sp, #8]
  406a10:	9501      	str	r5, [sp, #4]
  406a12:	9100      	str	r1, [sp, #0]
  406a14:	980c      	ldr	r0, [sp, #48]	; 0x30
  406a16:	f000 fb73 	bl	407100 <_dtoa_r>
  406a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a1c:	2b67      	cmp	r3, #103	; 0x67
  406a1e:	4606      	mov	r6, r0
  406a20:	f040 81e0 	bne.w	406de4 <_svfprintf_r+0x1288>
  406a24:	f01b 0f01 	tst.w	fp, #1
  406a28:	f000 8246 	beq.w	406eb8 <_svfprintf_r+0x135c>
  406a2c:	1974      	adds	r4, r6, r5
  406a2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406a30:	9808      	ldr	r0, [sp, #32]
  406a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406a34:	4639      	mov	r1, r7
  406a36:	f7fe fb67 	bl	405108 <__aeabi_dcmpeq>
  406a3a:	2800      	cmp	r0, #0
  406a3c:	f040 8165 	bne.w	406d0a <_svfprintf_r+0x11ae>
  406a40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406a42:	42a3      	cmp	r3, r4
  406a44:	d206      	bcs.n	406a54 <_svfprintf_r+0xef8>
  406a46:	2130      	movs	r1, #48	; 0x30
  406a48:	1c5a      	adds	r2, r3, #1
  406a4a:	9223      	str	r2, [sp, #140]	; 0x8c
  406a4c:	7019      	strb	r1, [r3, #0]
  406a4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406a50:	429c      	cmp	r4, r3
  406a52:	d8f9      	bhi.n	406a48 <_svfprintf_r+0xeec>
  406a54:	1b9b      	subs	r3, r3, r6
  406a56:	9313      	str	r3, [sp, #76]	; 0x4c
  406a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406a5a:	2b47      	cmp	r3, #71	; 0x47
  406a5c:	f000 80e9 	beq.w	406c32 <_svfprintf_r+0x10d6>
  406a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a62:	2b65      	cmp	r3, #101	; 0x65
  406a64:	f340 81cd 	ble.w	406e02 <_svfprintf_r+0x12a6>
  406a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a6a:	2b66      	cmp	r3, #102	; 0x66
  406a6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406a6e:	9312      	str	r3, [sp, #72]	; 0x48
  406a70:	f000 819e 	beq.w	406db0 <_svfprintf_r+0x1254>
  406a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406a76:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406a78:	4619      	mov	r1, r3
  406a7a:	4291      	cmp	r1, r2
  406a7c:	f300 818a 	bgt.w	406d94 <_svfprintf_r+0x1238>
  406a80:	f01b 0f01 	tst.w	fp, #1
  406a84:	f040 8213 	bne.w	406eae <_svfprintf_r+0x1352>
  406a88:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406a8c:	9308      	str	r3, [sp, #32]
  406a8e:	2367      	movs	r3, #103	; 0x67
  406a90:	920e      	str	r2, [sp, #56]	; 0x38
  406a92:	9311      	str	r3, [sp, #68]	; 0x44
  406a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406a96:	2b00      	cmp	r3, #0
  406a98:	f040 80c4 	bne.w	406c24 <_svfprintf_r+0x10c8>
  406a9c:	930a      	str	r3, [sp, #40]	; 0x28
  406a9e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406aa2:	f7ff b973 	b.w	405d8c <_svfprintf_r+0x230>
  406aa6:	4635      	mov	r5, r6
  406aa8:	460c      	mov	r4, r1
  406aaa:	4646      	mov	r6, r8
  406aac:	4690      	mov	r8, r2
  406aae:	3301      	adds	r3, #1
  406ab0:	443c      	add	r4, r7
  406ab2:	2b07      	cmp	r3, #7
  406ab4:	9427      	str	r4, [sp, #156]	; 0x9c
  406ab6:	9326      	str	r3, [sp, #152]	; 0x98
  406ab8:	e888 00a0 	stmia.w	r8, {r5, r7}
  406abc:	f73f aed1 	bgt.w	406862 <_svfprintf_r+0xd06>
  406ac0:	f108 0808 	add.w	r8, r8, #8
  406ac4:	e6d7      	b.n	406876 <_svfprintf_r+0xd1a>
  406ac6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406ac8:	6813      	ldr	r3, [r2, #0]
  406aca:	3204      	adds	r2, #4
  406acc:	920f      	str	r2, [sp, #60]	; 0x3c
  406ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
  406ad0:	601a      	str	r2, [r3, #0]
  406ad2:	f7ff b86a 	b.w	405baa <_svfprintf_r+0x4e>
  406ad6:	aa25      	add	r2, sp, #148	; 0x94
  406ad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406ada:	980c      	ldr	r0, [sp, #48]	; 0x30
  406adc:	f002 fbda 	bl	409294 <__ssprint_r>
  406ae0:	2800      	cmp	r0, #0
  406ae2:	f47f a90d 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406ae6:	46c8      	mov	r8, r9
  406ae8:	e48d      	b.n	406406 <_svfprintf_r+0x8aa>
  406aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406aec:	4a27      	ldr	r2, [pc, #156]	; (406b8c <_svfprintf_r+0x1030>)
  406aee:	f8c8 2000 	str.w	r2, [r8]
  406af2:	3301      	adds	r3, #1
  406af4:	3401      	adds	r4, #1
  406af6:	2201      	movs	r2, #1
  406af8:	2b07      	cmp	r3, #7
  406afa:	9427      	str	r4, [sp, #156]	; 0x9c
  406afc:	9326      	str	r3, [sp, #152]	; 0x98
  406afe:	f8c8 2004 	str.w	r2, [r8, #4]
  406b02:	dc72      	bgt.n	406bea <_svfprintf_r+0x108e>
  406b04:	f108 0808 	add.w	r8, r8, #8
  406b08:	b929      	cbnz	r1, 406b16 <_svfprintf_r+0xfba>
  406b0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406b0c:	b91b      	cbnz	r3, 406b16 <_svfprintf_r+0xfba>
  406b0e:	9b07      	ldr	r3, [sp, #28]
  406b10:	07d8      	lsls	r0, r3, #31
  406b12:	f57f aa03 	bpl.w	405f1c <_svfprintf_r+0x3c0>
  406b16:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406b18:	9819      	ldr	r0, [sp, #100]	; 0x64
  406b1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  406b1c:	f8c8 2000 	str.w	r2, [r8]
  406b20:	3301      	adds	r3, #1
  406b22:	4602      	mov	r2, r0
  406b24:	4422      	add	r2, r4
  406b26:	2b07      	cmp	r3, #7
  406b28:	9227      	str	r2, [sp, #156]	; 0x9c
  406b2a:	f8c8 0004 	str.w	r0, [r8, #4]
  406b2e:	9326      	str	r3, [sp, #152]	; 0x98
  406b30:	f300 818d 	bgt.w	406e4e <_svfprintf_r+0x12f2>
  406b34:	f108 0808 	add.w	r8, r8, #8
  406b38:	2900      	cmp	r1, #0
  406b3a:	f2c0 8165 	blt.w	406e08 <_svfprintf_r+0x12ac>
  406b3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  406b40:	f8c8 6000 	str.w	r6, [r8]
  406b44:	3301      	adds	r3, #1
  406b46:	188c      	adds	r4, r1, r2
  406b48:	2b07      	cmp	r3, #7
  406b4a:	9427      	str	r4, [sp, #156]	; 0x9c
  406b4c:	9326      	str	r3, [sp, #152]	; 0x98
  406b4e:	f8c8 1004 	str.w	r1, [r8, #4]
  406b52:	f77f a9e1 	ble.w	405f18 <_svfprintf_r+0x3bc>
  406b56:	e52c      	b.n	4065b2 <_svfprintf_r+0xa56>
  406b58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  406b5c:	6813      	ldr	r3, [r2, #0]
  406b5e:	17cd      	asrs	r5, r1, #31
  406b60:	4608      	mov	r0, r1
  406b62:	3204      	adds	r2, #4
  406b64:	4629      	mov	r1, r5
  406b66:	920f      	str	r2, [sp, #60]	; 0x3c
  406b68:	e9c3 0100 	strd	r0, r1, [r3]
  406b6c:	f7ff b81d 	b.w	405baa <_svfprintf_r+0x4e>
  406b70:	aa25      	add	r2, sp, #148	; 0x94
  406b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406b74:	980c      	ldr	r0, [sp, #48]	; 0x30
  406b76:	f002 fb8d 	bl	409294 <__ssprint_r>
  406b7a:	2800      	cmp	r0, #0
  406b7c:	f47f a8c0 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406b80:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406b82:	46c8      	mov	r8, r9
  406b84:	e458      	b.n	406438 <_svfprintf_r+0x8dc>
  406b86:	bf00      	nop
  406b88:	00409b98 	.word	0x00409b98
  406b8c:	00409b84 	.word	0x00409b84
  406b90:	2140      	movs	r1, #64	; 0x40
  406b92:	980c      	ldr	r0, [sp, #48]	; 0x30
  406b94:	f001 fb40 	bl	408218 <_malloc_r>
  406b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406b9a:	6010      	str	r0, [r2, #0]
  406b9c:	6110      	str	r0, [r2, #16]
  406b9e:	2800      	cmp	r0, #0
  406ba0:	f000 81f2 	beq.w	406f88 <_svfprintf_r+0x142c>
  406ba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406ba6:	2340      	movs	r3, #64	; 0x40
  406ba8:	6153      	str	r3, [r2, #20]
  406baa:	f7fe bfee 	b.w	405b8a <_svfprintf_r+0x2e>
  406bae:	a823      	add	r0, sp, #140	; 0x8c
  406bb0:	a920      	add	r1, sp, #128	; 0x80
  406bb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  406bb4:	9004      	str	r0, [sp, #16]
  406bb6:	9103      	str	r1, [sp, #12]
  406bb8:	a81f      	add	r0, sp, #124	; 0x7c
  406bba:	2103      	movs	r1, #3
  406bbc:	9002      	str	r0, [sp, #8]
  406bbe:	9a08      	ldr	r2, [sp, #32]
  406bc0:	9401      	str	r4, [sp, #4]
  406bc2:	463b      	mov	r3, r7
  406bc4:	9100      	str	r1, [sp, #0]
  406bc6:	980c      	ldr	r0, [sp, #48]	; 0x30
  406bc8:	f000 fa9a 	bl	407100 <_dtoa_r>
  406bcc:	4625      	mov	r5, r4
  406bce:	4606      	mov	r6, r0
  406bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406bd2:	2b46      	cmp	r3, #70	; 0x46
  406bd4:	eb06 0405 	add.w	r4, r6, r5
  406bd8:	f47f af29 	bne.w	406a2e <_svfprintf_r+0xed2>
  406bdc:	7833      	ldrb	r3, [r6, #0]
  406bde:	2b30      	cmp	r3, #48	; 0x30
  406be0:	f000 8178 	beq.w	406ed4 <_svfprintf_r+0x1378>
  406be4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  406be6:	442c      	add	r4, r5
  406be8:	e721      	b.n	406a2e <_svfprintf_r+0xed2>
  406bea:	aa25      	add	r2, sp, #148	; 0x94
  406bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406bee:	980c      	ldr	r0, [sp, #48]	; 0x30
  406bf0:	f002 fb50 	bl	409294 <__ssprint_r>
  406bf4:	2800      	cmp	r0, #0
  406bf6:	f47f a883 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406bfa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406bfc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406bfe:	46c8      	mov	r8, r9
  406c00:	e782      	b.n	406b08 <_svfprintf_r+0xfac>
  406c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c04:	2b00      	cmp	r3, #0
  406c06:	bf08      	it	eq
  406c08:	2301      	moveq	r3, #1
  406c0a:	930a      	str	r3, [sp, #40]	; 0x28
  406c0c:	e6db      	b.n	4069c6 <_svfprintf_r+0xe6a>
  406c0e:	4630      	mov	r0, r6
  406c10:	940a      	str	r4, [sp, #40]	; 0x28
  406c12:	f7fe ff35 	bl	405a80 <strlen>
  406c16:	950f      	str	r5, [sp, #60]	; 0x3c
  406c18:	900e      	str	r0, [sp, #56]	; 0x38
  406c1a:	f8cd b01c 	str.w	fp, [sp, #28]
  406c1e:	4603      	mov	r3, r0
  406c20:	f7ff b9f9 	b.w	406016 <_svfprintf_r+0x4ba>
  406c24:	272d      	movs	r7, #45	; 0x2d
  406c26:	2300      	movs	r3, #0
  406c28:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406c2c:	930a      	str	r3, [sp, #40]	; 0x28
  406c2e:	f7ff b8ae 	b.w	405d8e <_svfprintf_r+0x232>
  406c32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406c34:	9312      	str	r3, [sp, #72]	; 0x48
  406c36:	461a      	mov	r2, r3
  406c38:	3303      	adds	r3, #3
  406c3a:	db04      	blt.n	406c46 <_svfprintf_r+0x10ea>
  406c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c3e:	4619      	mov	r1, r3
  406c40:	4291      	cmp	r1, r2
  406c42:	f6bf af17 	bge.w	406a74 <_svfprintf_r+0xf18>
  406c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406c48:	3b02      	subs	r3, #2
  406c4a:	9311      	str	r3, [sp, #68]	; 0x44
  406c4c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  406c50:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  406c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406c56:	3b01      	subs	r3, #1
  406c58:	2b00      	cmp	r3, #0
  406c5a:	931f      	str	r3, [sp, #124]	; 0x7c
  406c5c:	bfbd      	ittte	lt
  406c5e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  406c60:	f1c3 0301 	rsblt	r3, r3, #1
  406c64:	222d      	movlt	r2, #45	; 0x2d
  406c66:	222b      	movge	r2, #43	; 0x2b
  406c68:	2b09      	cmp	r3, #9
  406c6a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  406c6e:	f340 8116 	ble.w	406e9e <_svfprintf_r+0x1342>
  406c72:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  406c76:	4620      	mov	r0, r4
  406c78:	4dab      	ldr	r5, [pc, #684]	; (406f28 <_svfprintf_r+0x13cc>)
  406c7a:	e000      	b.n	406c7e <_svfprintf_r+0x1122>
  406c7c:	4610      	mov	r0, r2
  406c7e:	fb85 1203 	smull	r1, r2, r5, r3
  406c82:	17d9      	asrs	r1, r3, #31
  406c84:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  406c88:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  406c8c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  406c90:	3230      	adds	r2, #48	; 0x30
  406c92:	2909      	cmp	r1, #9
  406c94:	f800 2c01 	strb.w	r2, [r0, #-1]
  406c98:	460b      	mov	r3, r1
  406c9a:	f100 32ff 	add.w	r2, r0, #4294967295
  406c9e:	dced      	bgt.n	406c7c <_svfprintf_r+0x1120>
  406ca0:	3330      	adds	r3, #48	; 0x30
  406ca2:	3802      	subs	r0, #2
  406ca4:	b2d9      	uxtb	r1, r3
  406ca6:	4284      	cmp	r4, r0
  406ca8:	f802 1c01 	strb.w	r1, [r2, #-1]
  406cac:	f240 8165 	bls.w	406f7a <_svfprintf_r+0x141e>
  406cb0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  406cb4:	4613      	mov	r3, r2
  406cb6:	e001      	b.n	406cbc <_svfprintf_r+0x1160>
  406cb8:	f813 1b01 	ldrb.w	r1, [r3], #1
  406cbc:	f800 1b01 	strb.w	r1, [r0], #1
  406cc0:	42a3      	cmp	r3, r4
  406cc2:	d1f9      	bne.n	406cb8 <_svfprintf_r+0x115c>
  406cc4:	3301      	adds	r3, #1
  406cc6:	1a9b      	subs	r3, r3, r2
  406cc8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  406ccc:	4413      	add	r3, r2
  406cce:	aa21      	add	r2, sp, #132	; 0x84
  406cd0:	1a9b      	subs	r3, r3, r2
  406cd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406cd4:	931b      	str	r3, [sp, #108]	; 0x6c
  406cd6:	2a01      	cmp	r2, #1
  406cd8:	4413      	add	r3, r2
  406cda:	930e      	str	r3, [sp, #56]	; 0x38
  406cdc:	f340 8119 	ble.w	406f12 <_svfprintf_r+0x13b6>
  406ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406ce2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406ce4:	4413      	add	r3, r2
  406ce6:	930e      	str	r3, [sp, #56]	; 0x38
  406ce8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406cec:	9308      	str	r3, [sp, #32]
  406cee:	2300      	movs	r3, #0
  406cf0:	9312      	str	r3, [sp, #72]	; 0x48
  406cf2:	e6cf      	b.n	406a94 <_svfprintf_r+0xf38>
  406cf4:	aa25      	add	r2, sp, #148	; 0x94
  406cf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406cf8:	980c      	ldr	r0, [sp, #48]	; 0x30
  406cfa:	f002 facb 	bl	409294 <__ssprint_r>
  406cfe:	2800      	cmp	r0, #0
  406d00:	f47e affe 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406d04:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406d06:	46c8      	mov	r8, r9
  406d08:	e4d7      	b.n	4066ba <_svfprintf_r+0xb5e>
  406d0a:	4623      	mov	r3, r4
  406d0c:	e6a2      	b.n	406a54 <_svfprintf_r+0xef8>
  406d0e:	aa25      	add	r2, sp, #148	; 0x94
  406d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d12:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d14:	f002 fabe 	bl	409294 <__ssprint_r>
  406d18:	2800      	cmp	r0, #0
  406d1a:	f47e aff1 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406d1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406d20:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406d22:	46c8      	mov	r8, r9
  406d24:	e5ae      	b.n	406884 <_svfprintf_r+0xd28>
  406d26:	aa25      	add	r2, sp, #148	; 0x94
  406d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406d2a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d2c:	f002 fab2 	bl	409294 <__ssprint_r>
  406d30:	2800      	cmp	r0, #0
  406d32:	f47e afe5 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406d36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  406d38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406d3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406d3c:	1a9a      	subs	r2, r3, r2
  406d3e:	46c8      	mov	r8, r9
  406d40:	e5b8      	b.n	4068b4 <_svfprintf_r+0xd58>
  406d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d44:	9612      	str	r6, [sp, #72]	; 0x48
  406d46:	2b06      	cmp	r3, #6
  406d48:	bf28      	it	cs
  406d4a:	2306      	movcs	r3, #6
  406d4c:	960a      	str	r6, [sp, #40]	; 0x28
  406d4e:	4637      	mov	r7, r6
  406d50:	9308      	str	r3, [sp, #32]
  406d52:	950f      	str	r5, [sp, #60]	; 0x3c
  406d54:	f8cd b01c 	str.w	fp, [sp, #28]
  406d58:	930e      	str	r3, [sp, #56]	; 0x38
  406d5a:	4e74      	ldr	r6, [pc, #464]	; (406f2c <_svfprintf_r+0x13d0>)
  406d5c:	f7ff b816 	b.w	405d8c <_svfprintf_r+0x230>
  406d60:	a823      	add	r0, sp, #140	; 0x8c
  406d62:	a920      	add	r1, sp, #128	; 0x80
  406d64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  406d66:	9004      	str	r0, [sp, #16]
  406d68:	9103      	str	r1, [sp, #12]
  406d6a:	a81f      	add	r0, sp, #124	; 0x7c
  406d6c:	2103      	movs	r1, #3
  406d6e:	9002      	str	r0, [sp, #8]
  406d70:	9a08      	ldr	r2, [sp, #32]
  406d72:	9501      	str	r5, [sp, #4]
  406d74:	463b      	mov	r3, r7
  406d76:	9100      	str	r1, [sp, #0]
  406d78:	980c      	ldr	r0, [sp, #48]	; 0x30
  406d7a:	f000 f9c1 	bl	407100 <_dtoa_r>
  406d7e:	4606      	mov	r6, r0
  406d80:	1944      	adds	r4, r0, r5
  406d82:	e72b      	b.n	406bdc <_svfprintf_r+0x1080>
  406d84:	2306      	movs	r3, #6
  406d86:	930a      	str	r3, [sp, #40]	; 0x28
  406d88:	e61d      	b.n	4069c6 <_svfprintf_r+0xe6a>
  406d8a:	272d      	movs	r7, #45	; 0x2d
  406d8c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406d90:	f7ff bacd 	b.w	40632e <_svfprintf_r+0x7d2>
  406d94:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406d96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406d98:	4413      	add	r3, r2
  406d9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406d9c:	930e      	str	r3, [sp, #56]	; 0x38
  406d9e:	2a00      	cmp	r2, #0
  406da0:	f340 80b0 	ble.w	406f04 <_svfprintf_r+0x13a8>
  406da4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406da8:	9308      	str	r3, [sp, #32]
  406daa:	2367      	movs	r3, #103	; 0x67
  406dac:	9311      	str	r3, [sp, #68]	; 0x44
  406dae:	e671      	b.n	406a94 <_svfprintf_r+0xf38>
  406db0:	2b00      	cmp	r3, #0
  406db2:	f340 80c3 	ble.w	406f3c <_svfprintf_r+0x13e0>
  406db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406db8:	2a00      	cmp	r2, #0
  406dba:	f040 8099 	bne.w	406ef0 <_svfprintf_r+0x1394>
  406dbe:	f01b 0f01 	tst.w	fp, #1
  406dc2:	f040 8095 	bne.w	406ef0 <_svfprintf_r+0x1394>
  406dc6:	9308      	str	r3, [sp, #32]
  406dc8:	930e      	str	r3, [sp, #56]	; 0x38
  406dca:	e663      	b.n	406a94 <_svfprintf_r+0xf38>
  406dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406dce:	9308      	str	r3, [sp, #32]
  406dd0:	930e      	str	r3, [sp, #56]	; 0x38
  406dd2:	900a      	str	r0, [sp, #40]	; 0x28
  406dd4:	950f      	str	r5, [sp, #60]	; 0x3c
  406dd6:	f8cd b01c 	str.w	fp, [sp, #28]
  406dda:	9012      	str	r0, [sp, #72]	; 0x48
  406ddc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406de0:	f7fe bfd4 	b.w	405d8c <_svfprintf_r+0x230>
  406de4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406de6:	2b47      	cmp	r3, #71	; 0x47
  406de8:	f47f ae20 	bne.w	406a2c <_svfprintf_r+0xed0>
  406dec:	f01b 0f01 	tst.w	fp, #1
  406df0:	f47f aeee 	bne.w	406bd0 <_svfprintf_r+0x1074>
  406df4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406df6:	1b9b      	subs	r3, r3, r6
  406df8:	9313      	str	r3, [sp, #76]	; 0x4c
  406dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406dfc:	2b47      	cmp	r3, #71	; 0x47
  406dfe:	f43f af18 	beq.w	406c32 <_svfprintf_r+0x10d6>
  406e02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406e04:	9312      	str	r3, [sp, #72]	; 0x48
  406e06:	e721      	b.n	406c4c <_svfprintf_r+0x10f0>
  406e08:	424f      	negs	r7, r1
  406e0a:	3110      	adds	r1, #16
  406e0c:	4d48      	ldr	r5, [pc, #288]	; (406f30 <_svfprintf_r+0x13d4>)
  406e0e:	da2f      	bge.n	406e70 <_svfprintf_r+0x1314>
  406e10:	2410      	movs	r4, #16
  406e12:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  406e16:	e004      	b.n	406e22 <_svfprintf_r+0x12c6>
  406e18:	f108 0808 	add.w	r8, r8, #8
  406e1c:	3f10      	subs	r7, #16
  406e1e:	2f10      	cmp	r7, #16
  406e20:	dd26      	ble.n	406e70 <_svfprintf_r+0x1314>
  406e22:	3301      	adds	r3, #1
  406e24:	3210      	adds	r2, #16
  406e26:	2b07      	cmp	r3, #7
  406e28:	9227      	str	r2, [sp, #156]	; 0x9c
  406e2a:	9326      	str	r3, [sp, #152]	; 0x98
  406e2c:	f8c8 5000 	str.w	r5, [r8]
  406e30:	f8c8 4004 	str.w	r4, [r8, #4]
  406e34:	ddf0      	ble.n	406e18 <_svfprintf_r+0x12bc>
  406e36:	aa25      	add	r2, sp, #148	; 0x94
  406e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406e3a:	4658      	mov	r0, fp
  406e3c:	f002 fa2a 	bl	409294 <__ssprint_r>
  406e40:	2800      	cmp	r0, #0
  406e42:	f47e af5d 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406e46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e4a:	46c8      	mov	r8, r9
  406e4c:	e7e6      	b.n	406e1c <_svfprintf_r+0x12c0>
  406e4e:	aa25      	add	r2, sp, #148	; 0x94
  406e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406e52:	980c      	ldr	r0, [sp, #48]	; 0x30
  406e54:	f002 fa1e 	bl	409294 <__ssprint_r>
  406e58:	2800      	cmp	r0, #0
  406e5a:	f47e af51 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406e5e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  406e60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e64:	46c8      	mov	r8, r9
  406e66:	e667      	b.n	406b38 <_svfprintf_r+0xfdc>
  406e68:	2000      	movs	r0, #0
  406e6a:	900a      	str	r0, [sp, #40]	; 0x28
  406e6c:	f7fe bed0 	b.w	405c10 <_svfprintf_r+0xb4>
  406e70:	3301      	adds	r3, #1
  406e72:	443a      	add	r2, r7
  406e74:	2b07      	cmp	r3, #7
  406e76:	e888 00a0 	stmia.w	r8, {r5, r7}
  406e7a:	9227      	str	r2, [sp, #156]	; 0x9c
  406e7c:	9326      	str	r3, [sp, #152]	; 0x98
  406e7e:	f108 0808 	add.w	r8, r8, #8
  406e82:	f77f ae5c 	ble.w	406b3e <_svfprintf_r+0xfe2>
  406e86:	aa25      	add	r2, sp, #148	; 0x94
  406e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406e8a:	980c      	ldr	r0, [sp, #48]	; 0x30
  406e8c:	f002 fa02 	bl	409294 <__ssprint_r>
  406e90:	2800      	cmp	r0, #0
  406e92:	f47e af35 	bne.w	405d00 <_svfprintf_r+0x1a4>
  406e96:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406e98:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e9a:	46c8      	mov	r8, r9
  406e9c:	e64f      	b.n	406b3e <_svfprintf_r+0xfe2>
  406e9e:	3330      	adds	r3, #48	; 0x30
  406ea0:	2230      	movs	r2, #48	; 0x30
  406ea2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  406ea6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  406eaa:	ab22      	add	r3, sp, #136	; 0x88
  406eac:	e70f      	b.n	406cce <_svfprintf_r+0x1172>
  406eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406eb2:	4413      	add	r3, r2
  406eb4:	930e      	str	r3, [sp, #56]	; 0x38
  406eb6:	e775      	b.n	406da4 <_svfprintf_r+0x1248>
  406eb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  406eba:	e5cb      	b.n	406a54 <_svfprintf_r+0xef8>
  406ebc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406ebe:	4e1d      	ldr	r6, [pc, #116]	; (406f34 <_svfprintf_r+0x13d8>)
  406ec0:	2b00      	cmp	r3, #0
  406ec2:	bfb6      	itet	lt
  406ec4:	272d      	movlt	r7, #45	; 0x2d
  406ec6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  406eca:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  406ece:	4b1a      	ldr	r3, [pc, #104]	; (406f38 <_svfprintf_r+0x13dc>)
  406ed0:	f7ff ba2f 	b.w	406332 <_svfprintf_r+0x7d6>
  406ed4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  406ed6:	9808      	ldr	r0, [sp, #32]
  406ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  406eda:	4639      	mov	r1, r7
  406edc:	f7fe f914 	bl	405108 <__aeabi_dcmpeq>
  406ee0:	2800      	cmp	r0, #0
  406ee2:	f47f ae7f 	bne.w	406be4 <_svfprintf_r+0x1088>
  406ee6:	f1c5 0501 	rsb	r5, r5, #1
  406eea:	951f      	str	r5, [sp, #124]	; 0x7c
  406eec:	442c      	add	r4, r5
  406eee:	e59e      	b.n	406a2e <_svfprintf_r+0xed2>
  406ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406ef2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406ef4:	4413      	add	r3, r2
  406ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406ef8:	441a      	add	r2, r3
  406efa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  406efe:	920e      	str	r2, [sp, #56]	; 0x38
  406f00:	9308      	str	r3, [sp, #32]
  406f02:	e5c7      	b.n	406a94 <_svfprintf_r+0xf38>
  406f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406f08:	f1c3 0301 	rsb	r3, r3, #1
  406f0c:	441a      	add	r2, r3
  406f0e:	4613      	mov	r3, r2
  406f10:	e7d0      	b.n	406eb4 <_svfprintf_r+0x1358>
  406f12:	f01b 0301 	ands.w	r3, fp, #1
  406f16:	9312      	str	r3, [sp, #72]	; 0x48
  406f18:	f47f aee2 	bne.w	406ce0 <_svfprintf_r+0x1184>
  406f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406f1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406f22:	9308      	str	r3, [sp, #32]
  406f24:	e5b6      	b.n	406a94 <_svfprintf_r+0xf38>
  406f26:	bf00      	nop
  406f28:	66666667 	.word	0x66666667
  406f2c:	00409b7c 	.word	0x00409b7c
  406f30:	00409b98 	.word	0x00409b98
  406f34:	00409b50 	.word	0x00409b50
  406f38:	00409b4c 	.word	0x00409b4c
  406f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406f3e:	b913      	cbnz	r3, 406f46 <_svfprintf_r+0x13ea>
  406f40:	f01b 0f01 	tst.w	fp, #1
  406f44:	d002      	beq.n	406f4c <_svfprintf_r+0x13f0>
  406f46:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406f48:	3301      	adds	r3, #1
  406f4a:	e7d4      	b.n	406ef6 <_svfprintf_r+0x139a>
  406f4c:	2301      	movs	r3, #1
  406f4e:	e73a      	b.n	406dc6 <_svfprintf_r+0x126a>
  406f50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406f52:	f89a 3001 	ldrb.w	r3, [sl, #1]
  406f56:	6828      	ldr	r0, [r5, #0]
  406f58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  406f5c:	900a      	str	r0, [sp, #40]	; 0x28
  406f5e:	4628      	mov	r0, r5
  406f60:	3004      	adds	r0, #4
  406f62:	46a2      	mov	sl, r4
  406f64:	900f      	str	r0, [sp, #60]	; 0x3c
  406f66:	f7fe be51 	b.w	405c0c <_svfprintf_r+0xb0>
  406f6a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406f6e:	f7ff b867 	b.w	406040 <_svfprintf_r+0x4e4>
  406f72:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406f76:	f7ff ba15 	b.w	4063a4 <_svfprintf_r+0x848>
  406f7a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  406f7e:	e6a6      	b.n	406cce <_svfprintf_r+0x1172>
  406f80:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406f84:	f7ff b8eb 	b.w	40615e <_svfprintf_r+0x602>
  406f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406f8a:	230c      	movs	r3, #12
  406f8c:	6013      	str	r3, [r2, #0]
  406f8e:	f04f 33ff 	mov.w	r3, #4294967295
  406f92:	9309      	str	r3, [sp, #36]	; 0x24
  406f94:	f7fe bebd 	b.w	405d12 <_svfprintf_r+0x1b6>
  406f98:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406f9c:	f7ff b99a 	b.w	4062d4 <_svfprintf_r+0x778>
  406fa0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406fa4:	f7ff b976 	b.w	406294 <_svfprintf_r+0x738>
  406fa8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406fac:	f7ff b959 	b.w	406262 <_svfprintf_r+0x706>
  406fb0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  406fb4:	f7ff b912 	b.w	4061dc <_svfprintf_r+0x680>

00406fb8 <register_fini>:
  406fb8:	4b02      	ldr	r3, [pc, #8]	; (406fc4 <register_fini+0xc>)
  406fba:	b113      	cbz	r3, 406fc2 <register_fini+0xa>
  406fbc:	4802      	ldr	r0, [pc, #8]	; (406fc8 <register_fini+0x10>)
  406fbe:	f000 b805 	b.w	406fcc <atexit>
  406fc2:	4770      	bx	lr
  406fc4:	00000000 	.word	0x00000000
  406fc8:	00407f55 	.word	0x00407f55

00406fcc <atexit>:
  406fcc:	2300      	movs	r3, #0
  406fce:	4601      	mov	r1, r0
  406fd0:	461a      	mov	r2, r3
  406fd2:	4618      	mov	r0, r3
  406fd4:	f002 b9ea 	b.w	4093ac <__register_exitproc>

00406fd8 <quorem>:
  406fd8:	6902      	ldr	r2, [r0, #16]
  406fda:	690b      	ldr	r3, [r1, #16]
  406fdc:	4293      	cmp	r3, r2
  406fde:	f300 808d 	bgt.w	4070fc <quorem+0x124>
  406fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fe6:	f103 38ff 	add.w	r8, r3, #4294967295
  406fea:	f101 0714 	add.w	r7, r1, #20
  406fee:	f100 0b14 	add.w	fp, r0, #20
  406ff2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406ff6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406ffa:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406ffe:	b083      	sub	sp, #12
  407000:	3201      	adds	r2, #1
  407002:	fbb3 f9f2 	udiv	r9, r3, r2
  407006:	eb0b 0304 	add.w	r3, fp, r4
  40700a:	9400      	str	r4, [sp, #0]
  40700c:	eb07 0a04 	add.w	sl, r7, r4
  407010:	9301      	str	r3, [sp, #4]
  407012:	f1b9 0f00 	cmp.w	r9, #0
  407016:	d039      	beq.n	40708c <quorem+0xb4>
  407018:	2500      	movs	r5, #0
  40701a:	462e      	mov	r6, r5
  40701c:	46bc      	mov	ip, r7
  40701e:	46de      	mov	lr, fp
  407020:	f85c 4b04 	ldr.w	r4, [ip], #4
  407024:	f8de 3000 	ldr.w	r3, [lr]
  407028:	b2a2      	uxth	r2, r4
  40702a:	fb09 5502 	mla	r5, r9, r2, r5
  40702e:	0c22      	lsrs	r2, r4, #16
  407030:	0c2c      	lsrs	r4, r5, #16
  407032:	fb09 4202 	mla	r2, r9, r2, r4
  407036:	b2ad      	uxth	r5, r5
  407038:	1b75      	subs	r5, r6, r5
  40703a:	b296      	uxth	r6, r2
  40703c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  407040:	fa15 f383 	uxtah	r3, r5, r3
  407044:	eb06 4623 	add.w	r6, r6, r3, asr #16
  407048:	b29b      	uxth	r3, r3
  40704a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40704e:	45e2      	cmp	sl, ip
  407050:	ea4f 4512 	mov.w	r5, r2, lsr #16
  407054:	f84e 3b04 	str.w	r3, [lr], #4
  407058:	ea4f 4626 	mov.w	r6, r6, asr #16
  40705c:	d2e0      	bcs.n	407020 <quorem+0x48>
  40705e:	9b00      	ldr	r3, [sp, #0]
  407060:	f85b 3003 	ldr.w	r3, [fp, r3]
  407064:	b993      	cbnz	r3, 40708c <quorem+0xb4>
  407066:	9c01      	ldr	r4, [sp, #4]
  407068:	1f23      	subs	r3, r4, #4
  40706a:	459b      	cmp	fp, r3
  40706c:	d20c      	bcs.n	407088 <quorem+0xb0>
  40706e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407072:	b94b      	cbnz	r3, 407088 <quorem+0xb0>
  407074:	f1a4 0308 	sub.w	r3, r4, #8
  407078:	e002      	b.n	407080 <quorem+0xa8>
  40707a:	681a      	ldr	r2, [r3, #0]
  40707c:	3b04      	subs	r3, #4
  40707e:	b91a      	cbnz	r2, 407088 <quorem+0xb0>
  407080:	459b      	cmp	fp, r3
  407082:	f108 38ff 	add.w	r8, r8, #4294967295
  407086:	d3f8      	bcc.n	40707a <quorem+0xa2>
  407088:	f8c0 8010 	str.w	r8, [r0, #16]
  40708c:	4604      	mov	r4, r0
  40708e:	f001 fe4d 	bl	408d2c <__mcmp>
  407092:	2800      	cmp	r0, #0
  407094:	db2e      	blt.n	4070f4 <quorem+0x11c>
  407096:	f109 0901 	add.w	r9, r9, #1
  40709a:	465d      	mov	r5, fp
  40709c:	2300      	movs	r3, #0
  40709e:	f857 1b04 	ldr.w	r1, [r7], #4
  4070a2:	6828      	ldr	r0, [r5, #0]
  4070a4:	b28a      	uxth	r2, r1
  4070a6:	1a9a      	subs	r2, r3, r2
  4070a8:	0c0b      	lsrs	r3, r1, #16
  4070aa:	fa12 f280 	uxtah	r2, r2, r0
  4070ae:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4070b2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4070b6:	b292      	uxth	r2, r2
  4070b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4070bc:	45ba      	cmp	sl, r7
  4070be:	f845 2b04 	str.w	r2, [r5], #4
  4070c2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4070c6:	d2ea      	bcs.n	40709e <quorem+0xc6>
  4070c8:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4070cc:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4070d0:	b982      	cbnz	r2, 4070f4 <quorem+0x11c>
  4070d2:	1f1a      	subs	r2, r3, #4
  4070d4:	4593      	cmp	fp, r2
  4070d6:	d20b      	bcs.n	4070f0 <quorem+0x118>
  4070d8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4070dc:	b942      	cbnz	r2, 4070f0 <quorem+0x118>
  4070de:	3b08      	subs	r3, #8
  4070e0:	e002      	b.n	4070e8 <quorem+0x110>
  4070e2:	681a      	ldr	r2, [r3, #0]
  4070e4:	3b04      	subs	r3, #4
  4070e6:	b91a      	cbnz	r2, 4070f0 <quorem+0x118>
  4070e8:	459b      	cmp	fp, r3
  4070ea:	f108 38ff 	add.w	r8, r8, #4294967295
  4070ee:	d3f8      	bcc.n	4070e2 <quorem+0x10a>
  4070f0:	f8c4 8010 	str.w	r8, [r4, #16]
  4070f4:	4648      	mov	r0, r9
  4070f6:	b003      	add	sp, #12
  4070f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4070fc:	2000      	movs	r0, #0
  4070fe:	4770      	bx	lr

00407100 <_dtoa_r>:
  407100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407104:	6c01      	ldr	r1, [r0, #64]	; 0x40
  407106:	b09b      	sub	sp, #108	; 0x6c
  407108:	4604      	mov	r4, r0
  40710a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40710c:	4692      	mov	sl, r2
  40710e:	469b      	mov	fp, r3
  407110:	b141      	cbz	r1, 407124 <_dtoa_r+0x24>
  407112:	6c42      	ldr	r2, [r0, #68]	; 0x44
  407114:	604a      	str	r2, [r1, #4]
  407116:	2301      	movs	r3, #1
  407118:	4093      	lsls	r3, r2
  40711a:	608b      	str	r3, [r1, #8]
  40711c:	f001 fc2e 	bl	40897c <_Bfree>
  407120:	2300      	movs	r3, #0
  407122:	6423      	str	r3, [r4, #64]	; 0x40
  407124:	f1bb 0f00 	cmp.w	fp, #0
  407128:	465d      	mov	r5, fp
  40712a:	db35      	blt.n	407198 <_dtoa_r+0x98>
  40712c:	2300      	movs	r3, #0
  40712e:	6033      	str	r3, [r6, #0]
  407130:	4b9d      	ldr	r3, [pc, #628]	; (4073a8 <_dtoa_r+0x2a8>)
  407132:	43ab      	bics	r3, r5
  407134:	d015      	beq.n	407162 <_dtoa_r+0x62>
  407136:	4650      	mov	r0, sl
  407138:	4659      	mov	r1, fp
  40713a:	2200      	movs	r2, #0
  40713c:	2300      	movs	r3, #0
  40713e:	f7fd ffe3 	bl	405108 <__aeabi_dcmpeq>
  407142:	4680      	mov	r8, r0
  407144:	2800      	cmp	r0, #0
  407146:	d02d      	beq.n	4071a4 <_dtoa_r+0xa4>
  407148:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40714a:	2301      	movs	r3, #1
  40714c:	6013      	str	r3, [r2, #0]
  40714e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407150:	2b00      	cmp	r3, #0
  407152:	f000 80bd 	beq.w	4072d0 <_dtoa_r+0x1d0>
  407156:	4895      	ldr	r0, [pc, #596]	; (4073ac <_dtoa_r+0x2ac>)
  407158:	6018      	str	r0, [r3, #0]
  40715a:	3801      	subs	r0, #1
  40715c:	b01b      	add	sp, #108	; 0x6c
  40715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407162:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407164:	f242 730f 	movw	r3, #9999	; 0x270f
  407168:	6013      	str	r3, [r2, #0]
  40716a:	f1ba 0f00 	cmp.w	sl, #0
  40716e:	d10d      	bne.n	40718c <_dtoa_r+0x8c>
  407170:	f3c5 0513 	ubfx	r5, r5, #0, #20
  407174:	b955      	cbnz	r5, 40718c <_dtoa_r+0x8c>
  407176:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  407178:	488d      	ldr	r0, [pc, #564]	; (4073b0 <_dtoa_r+0x2b0>)
  40717a:	2b00      	cmp	r3, #0
  40717c:	d0ee      	beq.n	40715c <_dtoa_r+0x5c>
  40717e:	f100 0308 	add.w	r3, r0, #8
  407182:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  407184:	6013      	str	r3, [r2, #0]
  407186:	b01b      	add	sp, #108	; 0x6c
  407188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40718c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40718e:	4889      	ldr	r0, [pc, #548]	; (4073b4 <_dtoa_r+0x2b4>)
  407190:	2b00      	cmp	r3, #0
  407192:	d0e3      	beq.n	40715c <_dtoa_r+0x5c>
  407194:	1cc3      	adds	r3, r0, #3
  407196:	e7f4      	b.n	407182 <_dtoa_r+0x82>
  407198:	2301      	movs	r3, #1
  40719a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40719e:	6033      	str	r3, [r6, #0]
  4071a0:	46ab      	mov	fp, r5
  4071a2:	e7c5      	b.n	407130 <_dtoa_r+0x30>
  4071a4:	aa18      	add	r2, sp, #96	; 0x60
  4071a6:	ab19      	add	r3, sp, #100	; 0x64
  4071a8:	9201      	str	r2, [sp, #4]
  4071aa:	9300      	str	r3, [sp, #0]
  4071ac:	4652      	mov	r2, sl
  4071ae:	465b      	mov	r3, fp
  4071b0:	4620      	mov	r0, r4
  4071b2:	f001 fe5b 	bl	408e6c <__d2b>
  4071b6:	0d2b      	lsrs	r3, r5, #20
  4071b8:	4681      	mov	r9, r0
  4071ba:	d071      	beq.n	4072a0 <_dtoa_r+0x1a0>
  4071bc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4071c0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4071c4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4071c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4071ca:	4650      	mov	r0, sl
  4071cc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4071d0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4071d4:	2200      	movs	r2, #0
  4071d6:	4b78      	ldr	r3, [pc, #480]	; (4073b8 <_dtoa_r+0x2b8>)
  4071d8:	f7fd fb7a 	bl	4048d0 <__aeabi_dsub>
  4071dc:	a36c      	add	r3, pc, #432	; (adr r3, 407390 <_dtoa_r+0x290>)
  4071de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4071e2:	f7fd fd29 	bl	404c38 <__aeabi_dmul>
  4071e6:	a36c      	add	r3, pc, #432	; (adr r3, 407398 <_dtoa_r+0x298>)
  4071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4071ec:	f7fd fb72 	bl	4048d4 <__adddf3>
  4071f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4071f4:	4630      	mov	r0, r6
  4071f6:	f7fd fcb9 	bl	404b6c <__aeabi_i2d>
  4071fa:	a369      	add	r3, pc, #420	; (adr r3, 4073a0 <_dtoa_r+0x2a0>)
  4071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  407200:	f7fd fd1a 	bl	404c38 <__aeabi_dmul>
  407204:	4602      	mov	r2, r0
  407206:	460b      	mov	r3, r1
  407208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40720c:	f7fd fb62 	bl	4048d4 <__adddf3>
  407210:	e9cd 0104 	strd	r0, r1, [sp, #16]
  407214:	f002 f95c 	bl	4094d0 <__aeabi_d2iz>
  407218:	2200      	movs	r2, #0
  40721a:	9002      	str	r0, [sp, #8]
  40721c:	2300      	movs	r3, #0
  40721e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407222:	f7fd ff7b 	bl	40511c <__aeabi_dcmplt>
  407226:	2800      	cmp	r0, #0
  407228:	f040 8173 	bne.w	407512 <_dtoa_r+0x412>
  40722c:	9d02      	ldr	r5, [sp, #8]
  40722e:	2d16      	cmp	r5, #22
  407230:	f200 815d 	bhi.w	4074ee <_dtoa_r+0x3ee>
  407234:	4b61      	ldr	r3, [pc, #388]	; (4073bc <_dtoa_r+0x2bc>)
  407236:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40723a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40723e:	4652      	mov	r2, sl
  407240:	465b      	mov	r3, fp
  407242:	f7fd ff89 	bl	405158 <__aeabi_dcmpgt>
  407246:	2800      	cmp	r0, #0
  407248:	f000 81c5 	beq.w	4075d6 <_dtoa_r+0x4d6>
  40724c:	1e6b      	subs	r3, r5, #1
  40724e:	9302      	str	r3, [sp, #8]
  407250:	2300      	movs	r3, #0
  407252:	930e      	str	r3, [sp, #56]	; 0x38
  407254:	1bbf      	subs	r7, r7, r6
  407256:	1e7b      	subs	r3, r7, #1
  407258:	9306      	str	r3, [sp, #24]
  40725a:	f100 8154 	bmi.w	407506 <_dtoa_r+0x406>
  40725e:	2300      	movs	r3, #0
  407260:	9308      	str	r3, [sp, #32]
  407262:	9b02      	ldr	r3, [sp, #8]
  407264:	2b00      	cmp	r3, #0
  407266:	f2c0 8145 	blt.w	4074f4 <_dtoa_r+0x3f4>
  40726a:	9a06      	ldr	r2, [sp, #24]
  40726c:	930d      	str	r3, [sp, #52]	; 0x34
  40726e:	4611      	mov	r1, r2
  407270:	4419      	add	r1, r3
  407272:	2300      	movs	r3, #0
  407274:	9106      	str	r1, [sp, #24]
  407276:	930c      	str	r3, [sp, #48]	; 0x30
  407278:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40727a:	2b09      	cmp	r3, #9
  40727c:	d82a      	bhi.n	4072d4 <_dtoa_r+0x1d4>
  40727e:	2b05      	cmp	r3, #5
  407280:	f340 865b 	ble.w	407f3a <_dtoa_r+0xe3a>
  407284:	3b04      	subs	r3, #4
  407286:	9324      	str	r3, [sp, #144]	; 0x90
  407288:	2500      	movs	r5, #0
  40728a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40728c:	3b02      	subs	r3, #2
  40728e:	2b03      	cmp	r3, #3
  407290:	f200 8642 	bhi.w	407f18 <_dtoa_r+0xe18>
  407294:	e8df f013 	tbh	[pc, r3, lsl #1]
  407298:	02c903d4 	.word	0x02c903d4
  40729c:	046103df 	.word	0x046103df
  4072a0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4072a2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4072a4:	443e      	add	r6, r7
  4072a6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4072aa:	2b20      	cmp	r3, #32
  4072ac:	f340 818e 	ble.w	4075cc <_dtoa_r+0x4cc>
  4072b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4072b4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4072b8:	409d      	lsls	r5, r3
  4072ba:	fa2a f000 	lsr.w	r0, sl, r0
  4072be:	4328      	orrs	r0, r5
  4072c0:	f7fd fc44 	bl	404b4c <__aeabi_ui2d>
  4072c4:	2301      	movs	r3, #1
  4072c6:	3e01      	subs	r6, #1
  4072c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4072cc:	9314      	str	r3, [sp, #80]	; 0x50
  4072ce:	e781      	b.n	4071d4 <_dtoa_r+0xd4>
  4072d0:	483b      	ldr	r0, [pc, #236]	; (4073c0 <_dtoa_r+0x2c0>)
  4072d2:	e743      	b.n	40715c <_dtoa_r+0x5c>
  4072d4:	2100      	movs	r1, #0
  4072d6:	6461      	str	r1, [r4, #68]	; 0x44
  4072d8:	4620      	mov	r0, r4
  4072da:	9125      	str	r1, [sp, #148]	; 0x94
  4072dc:	f001 fb28 	bl	408930 <_Balloc>
  4072e0:	f04f 33ff 	mov.w	r3, #4294967295
  4072e4:	930a      	str	r3, [sp, #40]	; 0x28
  4072e6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4072e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4072ea:	2301      	movs	r3, #1
  4072ec:	9004      	str	r0, [sp, #16]
  4072ee:	6420      	str	r0, [r4, #64]	; 0x40
  4072f0:	9224      	str	r2, [sp, #144]	; 0x90
  4072f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4072f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4072f6:	2b00      	cmp	r3, #0
  4072f8:	f2c0 80d9 	blt.w	4074ae <_dtoa_r+0x3ae>
  4072fc:	9a02      	ldr	r2, [sp, #8]
  4072fe:	2a0e      	cmp	r2, #14
  407300:	f300 80d5 	bgt.w	4074ae <_dtoa_r+0x3ae>
  407304:	4b2d      	ldr	r3, [pc, #180]	; (4073bc <_dtoa_r+0x2bc>)
  407306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40730a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40730e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  407312:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407314:	2b00      	cmp	r3, #0
  407316:	f2c0 83ba 	blt.w	407a8e <_dtoa_r+0x98e>
  40731a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40731e:	4650      	mov	r0, sl
  407320:	462a      	mov	r2, r5
  407322:	4633      	mov	r3, r6
  407324:	4659      	mov	r1, fp
  407326:	f7fd fdb1 	bl	404e8c <__aeabi_ddiv>
  40732a:	f002 f8d1 	bl	4094d0 <__aeabi_d2iz>
  40732e:	4680      	mov	r8, r0
  407330:	f7fd fc1c 	bl	404b6c <__aeabi_i2d>
  407334:	462a      	mov	r2, r5
  407336:	4633      	mov	r3, r6
  407338:	f7fd fc7e 	bl	404c38 <__aeabi_dmul>
  40733c:	460b      	mov	r3, r1
  40733e:	4602      	mov	r2, r0
  407340:	4659      	mov	r1, fp
  407342:	4650      	mov	r0, sl
  407344:	f7fd fac4 	bl	4048d0 <__aeabi_dsub>
  407348:	9d04      	ldr	r5, [sp, #16]
  40734a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40734e:	702b      	strb	r3, [r5, #0]
  407350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407352:	2b01      	cmp	r3, #1
  407354:	4606      	mov	r6, r0
  407356:	460f      	mov	r7, r1
  407358:	f105 0501 	add.w	r5, r5, #1
  40735c:	d068      	beq.n	407430 <_dtoa_r+0x330>
  40735e:	2200      	movs	r2, #0
  407360:	4b18      	ldr	r3, [pc, #96]	; (4073c4 <_dtoa_r+0x2c4>)
  407362:	f7fd fc69 	bl	404c38 <__aeabi_dmul>
  407366:	2200      	movs	r2, #0
  407368:	2300      	movs	r3, #0
  40736a:	4606      	mov	r6, r0
  40736c:	460f      	mov	r7, r1
  40736e:	f7fd fecb 	bl	405108 <__aeabi_dcmpeq>
  407372:	2800      	cmp	r0, #0
  407374:	f040 8088 	bne.w	407488 <_dtoa_r+0x388>
  407378:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40737c:	f04f 0a00 	mov.w	sl, #0
  407380:	f8df b040 	ldr.w	fp, [pc, #64]	; 4073c4 <_dtoa_r+0x2c4>
  407384:	940c      	str	r4, [sp, #48]	; 0x30
  407386:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40738a:	e028      	b.n	4073de <_dtoa_r+0x2de>
  40738c:	f3af 8000 	nop.w
  407390:	636f4361 	.word	0x636f4361
  407394:	3fd287a7 	.word	0x3fd287a7
  407398:	8b60c8b3 	.word	0x8b60c8b3
  40739c:	3fc68a28 	.word	0x3fc68a28
  4073a0:	509f79fb 	.word	0x509f79fb
  4073a4:	3fd34413 	.word	0x3fd34413
  4073a8:	7ff00000 	.word	0x7ff00000
  4073ac:	00409b85 	.word	0x00409b85
  4073b0:	00409ba8 	.word	0x00409ba8
  4073b4:	00409bb4 	.word	0x00409bb4
  4073b8:	3ff80000 	.word	0x3ff80000
  4073bc:	00409bf0 	.word	0x00409bf0
  4073c0:	00409b84 	.word	0x00409b84
  4073c4:	40240000 	.word	0x40240000
  4073c8:	f7fd fc36 	bl	404c38 <__aeabi_dmul>
  4073cc:	2200      	movs	r2, #0
  4073ce:	2300      	movs	r3, #0
  4073d0:	4606      	mov	r6, r0
  4073d2:	460f      	mov	r7, r1
  4073d4:	f7fd fe98 	bl	405108 <__aeabi_dcmpeq>
  4073d8:	2800      	cmp	r0, #0
  4073da:	f040 83c1 	bne.w	407b60 <_dtoa_r+0xa60>
  4073de:	4642      	mov	r2, r8
  4073e0:	464b      	mov	r3, r9
  4073e2:	4630      	mov	r0, r6
  4073e4:	4639      	mov	r1, r7
  4073e6:	f7fd fd51 	bl	404e8c <__aeabi_ddiv>
  4073ea:	f002 f871 	bl	4094d0 <__aeabi_d2iz>
  4073ee:	4604      	mov	r4, r0
  4073f0:	f7fd fbbc 	bl	404b6c <__aeabi_i2d>
  4073f4:	4642      	mov	r2, r8
  4073f6:	464b      	mov	r3, r9
  4073f8:	f7fd fc1e 	bl	404c38 <__aeabi_dmul>
  4073fc:	4602      	mov	r2, r0
  4073fe:	460b      	mov	r3, r1
  407400:	4630      	mov	r0, r6
  407402:	4639      	mov	r1, r7
  407404:	f7fd fa64 	bl	4048d0 <__aeabi_dsub>
  407408:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40740c:	9e04      	ldr	r6, [sp, #16]
  40740e:	f805 eb01 	strb.w	lr, [r5], #1
  407412:	eba5 0e06 	sub.w	lr, r5, r6
  407416:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  407418:	45b6      	cmp	lr, r6
  40741a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40741e:	4652      	mov	r2, sl
  407420:	465b      	mov	r3, fp
  407422:	d1d1      	bne.n	4073c8 <_dtoa_r+0x2c8>
  407424:	46a0      	mov	r8, r4
  407426:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40742a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40742c:	4606      	mov	r6, r0
  40742e:	460f      	mov	r7, r1
  407430:	4632      	mov	r2, r6
  407432:	463b      	mov	r3, r7
  407434:	4630      	mov	r0, r6
  407436:	4639      	mov	r1, r7
  407438:	f7fd fa4c 	bl	4048d4 <__adddf3>
  40743c:	4606      	mov	r6, r0
  40743e:	460f      	mov	r7, r1
  407440:	4602      	mov	r2, r0
  407442:	460b      	mov	r3, r1
  407444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407448:	f7fd fe68 	bl	40511c <__aeabi_dcmplt>
  40744c:	b948      	cbnz	r0, 407462 <_dtoa_r+0x362>
  40744e:	4632      	mov	r2, r6
  407450:	463b      	mov	r3, r7
  407452:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407456:	f7fd fe57 	bl	405108 <__aeabi_dcmpeq>
  40745a:	b1a8      	cbz	r0, 407488 <_dtoa_r+0x388>
  40745c:	f018 0f01 	tst.w	r8, #1
  407460:	d012      	beq.n	407488 <_dtoa_r+0x388>
  407462:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407466:	9a04      	ldr	r2, [sp, #16]
  407468:	1e6b      	subs	r3, r5, #1
  40746a:	e004      	b.n	407476 <_dtoa_r+0x376>
  40746c:	429a      	cmp	r2, r3
  40746e:	f000 8401 	beq.w	407c74 <_dtoa_r+0xb74>
  407472:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  407476:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40747a:	f103 0501 	add.w	r5, r3, #1
  40747e:	d0f5      	beq.n	40746c <_dtoa_r+0x36c>
  407480:	f108 0801 	add.w	r8, r8, #1
  407484:	f883 8000 	strb.w	r8, [r3]
  407488:	4649      	mov	r1, r9
  40748a:	4620      	mov	r0, r4
  40748c:	f001 fa76 	bl	40897c <_Bfree>
  407490:	2200      	movs	r2, #0
  407492:	9b02      	ldr	r3, [sp, #8]
  407494:	702a      	strb	r2, [r5, #0]
  407496:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407498:	3301      	adds	r3, #1
  40749a:	6013      	str	r3, [r2, #0]
  40749c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40749e:	2b00      	cmp	r3, #0
  4074a0:	f000 839e 	beq.w	407be0 <_dtoa_r+0xae0>
  4074a4:	9804      	ldr	r0, [sp, #16]
  4074a6:	601d      	str	r5, [r3, #0]
  4074a8:	b01b      	add	sp, #108	; 0x6c
  4074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4074b0:	2a00      	cmp	r2, #0
  4074b2:	d03e      	beq.n	407532 <_dtoa_r+0x432>
  4074b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4074b6:	2a01      	cmp	r2, #1
  4074b8:	f340 8311 	ble.w	407ade <_dtoa_r+0x9de>
  4074bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4074be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4074c0:	1e5f      	subs	r7, r3, #1
  4074c2:	42ba      	cmp	r2, r7
  4074c4:	f2c0 838f 	blt.w	407be6 <_dtoa_r+0xae6>
  4074c8:	1bd7      	subs	r7, r2, r7
  4074ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4074cc:	2b00      	cmp	r3, #0
  4074ce:	f2c0 848b 	blt.w	407de8 <_dtoa_r+0xce8>
  4074d2:	9d08      	ldr	r5, [sp, #32]
  4074d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4074d6:	9a08      	ldr	r2, [sp, #32]
  4074d8:	441a      	add	r2, r3
  4074da:	9208      	str	r2, [sp, #32]
  4074dc:	9a06      	ldr	r2, [sp, #24]
  4074de:	2101      	movs	r1, #1
  4074e0:	441a      	add	r2, r3
  4074e2:	4620      	mov	r0, r4
  4074e4:	9206      	str	r2, [sp, #24]
  4074e6:	f001 fae3 	bl	408ab0 <__i2b>
  4074ea:	4606      	mov	r6, r0
  4074ec:	e024      	b.n	407538 <_dtoa_r+0x438>
  4074ee:	2301      	movs	r3, #1
  4074f0:	930e      	str	r3, [sp, #56]	; 0x38
  4074f2:	e6af      	b.n	407254 <_dtoa_r+0x154>
  4074f4:	9a08      	ldr	r2, [sp, #32]
  4074f6:	9b02      	ldr	r3, [sp, #8]
  4074f8:	1ad2      	subs	r2, r2, r3
  4074fa:	425b      	negs	r3, r3
  4074fc:	930c      	str	r3, [sp, #48]	; 0x30
  4074fe:	2300      	movs	r3, #0
  407500:	9208      	str	r2, [sp, #32]
  407502:	930d      	str	r3, [sp, #52]	; 0x34
  407504:	e6b8      	b.n	407278 <_dtoa_r+0x178>
  407506:	f1c7 0301 	rsb	r3, r7, #1
  40750a:	9308      	str	r3, [sp, #32]
  40750c:	2300      	movs	r3, #0
  40750e:	9306      	str	r3, [sp, #24]
  407510:	e6a7      	b.n	407262 <_dtoa_r+0x162>
  407512:	9d02      	ldr	r5, [sp, #8]
  407514:	4628      	mov	r0, r5
  407516:	f7fd fb29 	bl	404b6c <__aeabi_i2d>
  40751a:	4602      	mov	r2, r0
  40751c:	460b      	mov	r3, r1
  40751e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  407522:	f7fd fdf1 	bl	405108 <__aeabi_dcmpeq>
  407526:	2800      	cmp	r0, #0
  407528:	f47f ae80 	bne.w	40722c <_dtoa_r+0x12c>
  40752c:	1e6b      	subs	r3, r5, #1
  40752e:	9302      	str	r3, [sp, #8]
  407530:	e67c      	b.n	40722c <_dtoa_r+0x12c>
  407532:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407534:	9d08      	ldr	r5, [sp, #32]
  407536:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  407538:	2d00      	cmp	r5, #0
  40753a:	dd0c      	ble.n	407556 <_dtoa_r+0x456>
  40753c:	9906      	ldr	r1, [sp, #24]
  40753e:	2900      	cmp	r1, #0
  407540:	460b      	mov	r3, r1
  407542:	dd08      	ble.n	407556 <_dtoa_r+0x456>
  407544:	42a9      	cmp	r1, r5
  407546:	9a08      	ldr	r2, [sp, #32]
  407548:	bfa8      	it	ge
  40754a:	462b      	movge	r3, r5
  40754c:	1ad2      	subs	r2, r2, r3
  40754e:	1aed      	subs	r5, r5, r3
  407550:	1acb      	subs	r3, r1, r3
  407552:	9208      	str	r2, [sp, #32]
  407554:	9306      	str	r3, [sp, #24]
  407556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407558:	b1d3      	cbz	r3, 407590 <_dtoa_r+0x490>
  40755a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40755c:	2b00      	cmp	r3, #0
  40755e:	f000 82b7 	beq.w	407ad0 <_dtoa_r+0x9d0>
  407562:	2f00      	cmp	r7, #0
  407564:	dd10      	ble.n	407588 <_dtoa_r+0x488>
  407566:	4631      	mov	r1, r6
  407568:	463a      	mov	r2, r7
  40756a:	4620      	mov	r0, r4
  40756c:	f001 fb3c 	bl	408be8 <__pow5mult>
  407570:	464a      	mov	r2, r9
  407572:	4601      	mov	r1, r0
  407574:	4606      	mov	r6, r0
  407576:	4620      	mov	r0, r4
  407578:	f001 faa4 	bl	408ac4 <__multiply>
  40757c:	4649      	mov	r1, r9
  40757e:	4680      	mov	r8, r0
  407580:	4620      	mov	r0, r4
  407582:	f001 f9fb 	bl	40897c <_Bfree>
  407586:	46c1      	mov	r9, r8
  407588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40758a:	1bda      	subs	r2, r3, r7
  40758c:	f040 82a1 	bne.w	407ad2 <_dtoa_r+0x9d2>
  407590:	2101      	movs	r1, #1
  407592:	4620      	mov	r0, r4
  407594:	f001 fa8c 	bl	408ab0 <__i2b>
  407598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40759a:	2b00      	cmp	r3, #0
  40759c:	4680      	mov	r8, r0
  40759e:	dd1c      	ble.n	4075da <_dtoa_r+0x4da>
  4075a0:	4601      	mov	r1, r0
  4075a2:	461a      	mov	r2, r3
  4075a4:	4620      	mov	r0, r4
  4075a6:	f001 fb1f 	bl	408be8 <__pow5mult>
  4075aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4075ac:	2b01      	cmp	r3, #1
  4075ae:	4680      	mov	r8, r0
  4075b0:	f340 8254 	ble.w	407a5c <_dtoa_r+0x95c>
  4075b4:	2300      	movs	r3, #0
  4075b6:	930c      	str	r3, [sp, #48]	; 0x30
  4075b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4075bc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4075c0:	6918      	ldr	r0, [r3, #16]
  4075c2:	f001 fa25 	bl	408a10 <__hi0bits>
  4075c6:	f1c0 0020 	rsb	r0, r0, #32
  4075ca:	e010      	b.n	4075ee <_dtoa_r+0x4ee>
  4075cc:	f1c3 0520 	rsb	r5, r3, #32
  4075d0:	fa0a f005 	lsl.w	r0, sl, r5
  4075d4:	e674      	b.n	4072c0 <_dtoa_r+0x1c0>
  4075d6:	900e      	str	r0, [sp, #56]	; 0x38
  4075d8:	e63c      	b.n	407254 <_dtoa_r+0x154>
  4075da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4075dc:	2b01      	cmp	r3, #1
  4075de:	f340 8287 	ble.w	407af0 <_dtoa_r+0x9f0>
  4075e2:	2300      	movs	r3, #0
  4075e4:	930c      	str	r3, [sp, #48]	; 0x30
  4075e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4075e8:	2001      	movs	r0, #1
  4075ea:	2b00      	cmp	r3, #0
  4075ec:	d1e4      	bne.n	4075b8 <_dtoa_r+0x4b8>
  4075ee:	9a06      	ldr	r2, [sp, #24]
  4075f0:	4410      	add	r0, r2
  4075f2:	f010 001f 	ands.w	r0, r0, #31
  4075f6:	f000 80a1 	beq.w	40773c <_dtoa_r+0x63c>
  4075fa:	f1c0 0320 	rsb	r3, r0, #32
  4075fe:	2b04      	cmp	r3, #4
  407600:	f340 849e 	ble.w	407f40 <_dtoa_r+0xe40>
  407604:	9b08      	ldr	r3, [sp, #32]
  407606:	f1c0 001c 	rsb	r0, r0, #28
  40760a:	4403      	add	r3, r0
  40760c:	9308      	str	r3, [sp, #32]
  40760e:	4613      	mov	r3, r2
  407610:	4403      	add	r3, r0
  407612:	4405      	add	r5, r0
  407614:	9306      	str	r3, [sp, #24]
  407616:	9b08      	ldr	r3, [sp, #32]
  407618:	2b00      	cmp	r3, #0
  40761a:	dd05      	ble.n	407628 <_dtoa_r+0x528>
  40761c:	4649      	mov	r1, r9
  40761e:	461a      	mov	r2, r3
  407620:	4620      	mov	r0, r4
  407622:	f001 fb31 	bl	408c88 <__lshift>
  407626:	4681      	mov	r9, r0
  407628:	9b06      	ldr	r3, [sp, #24]
  40762a:	2b00      	cmp	r3, #0
  40762c:	dd05      	ble.n	40763a <_dtoa_r+0x53a>
  40762e:	4641      	mov	r1, r8
  407630:	461a      	mov	r2, r3
  407632:	4620      	mov	r0, r4
  407634:	f001 fb28 	bl	408c88 <__lshift>
  407638:	4680      	mov	r8, r0
  40763a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40763c:	2b00      	cmp	r3, #0
  40763e:	f040 8086 	bne.w	40774e <_dtoa_r+0x64e>
  407642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407644:	2b00      	cmp	r3, #0
  407646:	f340 8266 	ble.w	407b16 <_dtoa_r+0xa16>
  40764a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40764c:	2b00      	cmp	r3, #0
  40764e:	f000 8098 	beq.w	407782 <_dtoa_r+0x682>
  407652:	2d00      	cmp	r5, #0
  407654:	dd05      	ble.n	407662 <_dtoa_r+0x562>
  407656:	4631      	mov	r1, r6
  407658:	462a      	mov	r2, r5
  40765a:	4620      	mov	r0, r4
  40765c:	f001 fb14 	bl	408c88 <__lshift>
  407660:	4606      	mov	r6, r0
  407662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407664:	2b00      	cmp	r3, #0
  407666:	f040 8337 	bne.w	407cd8 <_dtoa_r+0xbd8>
  40766a:	9606      	str	r6, [sp, #24]
  40766c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40766e:	9a04      	ldr	r2, [sp, #16]
  407670:	f8dd b018 	ldr.w	fp, [sp, #24]
  407674:	3b01      	subs	r3, #1
  407676:	18d3      	adds	r3, r2, r3
  407678:	930b      	str	r3, [sp, #44]	; 0x2c
  40767a:	f00a 0301 	and.w	r3, sl, #1
  40767e:	930c      	str	r3, [sp, #48]	; 0x30
  407680:	4617      	mov	r7, r2
  407682:	46c2      	mov	sl, r8
  407684:	4651      	mov	r1, sl
  407686:	4648      	mov	r0, r9
  407688:	f7ff fca6 	bl	406fd8 <quorem>
  40768c:	4631      	mov	r1, r6
  40768e:	4605      	mov	r5, r0
  407690:	4648      	mov	r0, r9
  407692:	f001 fb4b 	bl	408d2c <__mcmp>
  407696:	465a      	mov	r2, fp
  407698:	900a      	str	r0, [sp, #40]	; 0x28
  40769a:	4651      	mov	r1, sl
  40769c:	4620      	mov	r0, r4
  40769e:	f001 fb61 	bl	408d64 <__mdiff>
  4076a2:	68c2      	ldr	r2, [r0, #12]
  4076a4:	4680      	mov	r8, r0
  4076a6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4076aa:	2a00      	cmp	r2, #0
  4076ac:	f040 822b 	bne.w	407b06 <_dtoa_r+0xa06>
  4076b0:	4601      	mov	r1, r0
  4076b2:	4648      	mov	r0, r9
  4076b4:	9308      	str	r3, [sp, #32]
  4076b6:	f001 fb39 	bl	408d2c <__mcmp>
  4076ba:	4641      	mov	r1, r8
  4076bc:	9006      	str	r0, [sp, #24]
  4076be:	4620      	mov	r0, r4
  4076c0:	f001 f95c 	bl	40897c <_Bfree>
  4076c4:	9a06      	ldr	r2, [sp, #24]
  4076c6:	9b08      	ldr	r3, [sp, #32]
  4076c8:	b932      	cbnz	r2, 4076d8 <_dtoa_r+0x5d8>
  4076ca:	9924      	ldr	r1, [sp, #144]	; 0x90
  4076cc:	b921      	cbnz	r1, 4076d8 <_dtoa_r+0x5d8>
  4076ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4076d0:	2a00      	cmp	r2, #0
  4076d2:	f000 83ef 	beq.w	407eb4 <_dtoa_r+0xdb4>
  4076d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4076d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4076da:	2900      	cmp	r1, #0
  4076dc:	f2c0 829f 	blt.w	407c1e <_dtoa_r+0xb1e>
  4076e0:	d105      	bne.n	4076ee <_dtoa_r+0x5ee>
  4076e2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4076e4:	b919      	cbnz	r1, 4076ee <_dtoa_r+0x5ee>
  4076e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4076e8:	2900      	cmp	r1, #0
  4076ea:	f000 8298 	beq.w	407c1e <_dtoa_r+0xb1e>
  4076ee:	2a00      	cmp	r2, #0
  4076f0:	f300 8306 	bgt.w	407d00 <_dtoa_r+0xc00>
  4076f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4076f6:	703b      	strb	r3, [r7, #0]
  4076f8:	f107 0801 	add.w	r8, r7, #1
  4076fc:	4297      	cmp	r7, r2
  4076fe:	4645      	mov	r5, r8
  407700:	f000 830c 	beq.w	407d1c <_dtoa_r+0xc1c>
  407704:	4649      	mov	r1, r9
  407706:	2300      	movs	r3, #0
  407708:	220a      	movs	r2, #10
  40770a:	4620      	mov	r0, r4
  40770c:	f001 f940 	bl	408990 <__multadd>
  407710:	455e      	cmp	r6, fp
  407712:	4681      	mov	r9, r0
  407714:	4631      	mov	r1, r6
  407716:	f04f 0300 	mov.w	r3, #0
  40771a:	f04f 020a 	mov.w	r2, #10
  40771e:	4620      	mov	r0, r4
  407720:	f000 81eb 	beq.w	407afa <_dtoa_r+0x9fa>
  407724:	f001 f934 	bl	408990 <__multadd>
  407728:	4659      	mov	r1, fp
  40772a:	4606      	mov	r6, r0
  40772c:	2300      	movs	r3, #0
  40772e:	220a      	movs	r2, #10
  407730:	4620      	mov	r0, r4
  407732:	f001 f92d 	bl	408990 <__multadd>
  407736:	4647      	mov	r7, r8
  407738:	4683      	mov	fp, r0
  40773a:	e7a3      	b.n	407684 <_dtoa_r+0x584>
  40773c:	201c      	movs	r0, #28
  40773e:	9b08      	ldr	r3, [sp, #32]
  407740:	4403      	add	r3, r0
  407742:	9308      	str	r3, [sp, #32]
  407744:	9b06      	ldr	r3, [sp, #24]
  407746:	4403      	add	r3, r0
  407748:	4405      	add	r5, r0
  40774a:	9306      	str	r3, [sp, #24]
  40774c:	e763      	b.n	407616 <_dtoa_r+0x516>
  40774e:	4641      	mov	r1, r8
  407750:	4648      	mov	r0, r9
  407752:	f001 faeb 	bl	408d2c <__mcmp>
  407756:	2800      	cmp	r0, #0
  407758:	f6bf af73 	bge.w	407642 <_dtoa_r+0x542>
  40775c:	9f02      	ldr	r7, [sp, #8]
  40775e:	4649      	mov	r1, r9
  407760:	2300      	movs	r3, #0
  407762:	220a      	movs	r2, #10
  407764:	4620      	mov	r0, r4
  407766:	3f01      	subs	r7, #1
  407768:	9702      	str	r7, [sp, #8]
  40776a:	f001 f911 	bl	408990 <__multadd>
  40776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407770:	4681      	mov	r9, r0
  407772:	2b00      	cmp	r3, #0
  407774:	f040 83b6 	bne.w	407ee4 <_dtoa_r+0xde4>
  407778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40777a:	2b00      	cmp	r3, #0
  40777c:	f340 83bf 	ble.w	407efe <_dtoa_r+0xdfe>
  407780:	930a      	str	r3, [sp, #40]	; 0x28
  407782:	f8dd b010 	ldr.w	fp, [sp, #16]
  407786:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407788:	465d      	mov	r5, fp
  40778a:	e002      	b.n	407792 <_dtoa_r+0x692>
  40778c:	f001 f900 	bl	408990 <__multadd>
  407790:	4681      	mov	r9, r0
  407792:	4641      	mov	r1, r8
  407794:	4648      	mov	r0, r9
  407796:	f7ff fc1f 	bl	406fd8 <quorem>
  40779a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40779e:	f805 ab01 	strb.w	sl, [r5], #1
  4077a2:	eba5 030b 	sub.w	r3, r5, fp
  4077a6:	42bb      	cmp	r3, r7
  4077a8:	f04f 020a 	mov.w	r2, #10
  4077ac:	f04f 0300 	mov.w	r3, #0
  4077b0:	4649      	mov	r1, r9
  4077b2:	4620      	mov	r0, r4
  4077b4:	dbea      	blt.n	40778c <_dtoa_r+0x68c>
  4077b6:	9b04      	ldr	r3, [sp, #16]
  4077b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4077ba:	2a01      	cmp	r2, #1
  4077bc:	bfac      	ite	ge
  4077be:	189b      	addge	r3, r3, r2
  4077c0:	3301      	addlt	r3, #1
  4077c2:	461d      	mov	r5, r3
  4077c4:	f04f 0b00 	mov.w	fp, #0
  4077c8:	4649      	mov	r1, r9
  4077ca:	2201      	movs	r2, #1
  4077cc:	4620      	mov	r0, r4
  4077ce:	f001 fa5b 	bl	408c88 <__lshift>
  4077d2:	4641      	mov	r1, r8
  4077d4:	4681      	mov	r9, r0
  4077d6:	f001 faa9 	bl	408d2c <__mcmp>
  4077da:	2800      	cmp	r0, #0
  4077dc:	f340 823d 	ble.w	407c5a <_dtoa_r+0xb5a>
  4077e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4077e4:	9904      	ldr	r1, [sp, #16]
  4077e6:	1e6b      	subs	r3, r5, #1
  4077e8:	e004      	b.n	4077f4 <_dtoa_r+0x6f4>
  4077ea:	428b      	cmp	r3, r1
  4077ec:	f000 81ae 	beq.w	407b4c <_dtoa_r+0xa4c>
  4077f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4077f4:	2a39      	cmp	r2, #57	; 0x39
  4077f6:	f103 0501 	add.w	r5, r3, #1
  4077fa:	d0f6      	beq.n	4077ea <_dtoa_r+0x6ea>
  4077fc:	3201      	adds	r2, #1
  4077fe:	701a      	strb	r2, [r3, #0]
  407800:	4641      	mov	r1, r8
  407802:	4620      	mov	r0, r4
  407804:	f001 f8ba 	bl	40897c <_Bfree>
  407808:	2e00      	cmp	r6, #0
  40780a:	f43f ae3d 	beq.w	407488 <_dtoa_r+0x388>
  40780e:	f1bb 0f00 	cmp.w	fp, #0
  407812:	d005      	beq.n	407820 <_dtoa_r+0x720>
  407814:	45b3      	cmp	fp, r6
  407816:	d003      	beq.n	407820 <_dtoa_r+0x720>
  407818:	4659      	mov	r1, fp
  40781a:	4620      	mov	r0, r4
  40781c:	f001 f8ae 	bl	40897c <_Bfree>
  407820:	4631      	mov	r1, r6
  407822:	4620      	mov	r0, r4
  407824:	f001 f8aa 	bl	40897c <_Bfree>
  407828:	e62e      	b.n	407488 <_dtoa_r+0x388>
  40782a:	2300      	movs	r3, #0
  40782c:	930b      	str	r3, [sp, #44]	; 0x2c
  40782e:	9b02      	ldr	r3, [sp, #8]
  407830:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407832:	4413      	add	r3, r2
  407834:	930f      	str	r3, [sp, #60]	; 0x3c
  407836:	3301      	adds	r3, #1
  407838:	2b01      	cmp	r3, #1
  40783a:	461f      	mov	r7, r3
  40783c:	461e      	mov	r6, r3
  40783e:	930a      	str	r3, [sp, #40]	; 0x28
  407840:	bfb8      	it	lt
  407842:	2701      	movlt	r7, #1
  407844:	2100      	movs	r1, #0
  407846:	2f17      	cmp	r7, #23
  407848:	6461      	str	r1, [r4, #68]	; 0x44
  40784a:	d90a      	bls.n	407862 <_dtoa_r+0x762>
  40784c:	2201      	movs	r2, #1
  40784e:	2304      	movs	r3, #4
  407850:	005b      	lsls	r3, r3, #1
  407852:	f103 0014 	add.w	r0, r3, #20
  407856:	4287      	cmp	r7, r0
  407858:	4611      	mov	r1, r2
  40785a:	f102 0201 	add.w	r2, r2, #1
  40785e:	d2f7      	bcs.n	407850 <_dtoa_r+0x750>
  407860:	6461      	str	r1, [r4, #68]	; 0x44
  407862:	4620      	mov	r0, r4
  407864:	f001 f864 	bl	408930 <_Balloc>
  407868:	2e0e      	cmp	r6, #14
  40786a:	9004      	str	r0, [sp, #16]
  40786c:	6420      	str	r0, [r4, #64]	; 0x40
  40786e:	f63f ad41 	bhi.w	4072f4 <_dtoa_r+0x1f4>
  407872:	2d00      	cmp	r5, #0
  407874:	f43f ad3e 	beq.w	4072f4 <_dtoa_r+0x1f4>
  407878:	9902      	ldr	r1, [sp, #8]
  40787a:	2900      	cmp	r1, #0
  40787c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407880:	f340 8202 	ble.w	407c88 <_dtoa_r+0xb88>
  407884:	4bb8      	ldr	r3, [pc, #736]	; (407b68 <_dtoa_r+0xa68>)
  407886:	f001 020f 	and.w	r2, r1, #15
  40788a:	110d      	asrs	r5, r1, #4
  40788c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407890:	06e9      	lsls	r1, r5, #27
  407892:	e9d3 6700 	ldrd	r6, r7, [r3]
  407896:	f140 81ae 	bpl.w	407bf6 <_dtoa_r+0xaf6>
  40789a:	4bb4      	ldr	r3, [pc, #720]	; (407b6c <_dtoa_r+0xa6c>)
  40789c:	4650      	mov	r0, sl
  40789e:	4659      	mov	r1, fp
  4078a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4078a4:	f7fd faf2 	bl	404e8c <__aeabi_ddiv>
  4078a8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4078ac:	f005 050f 	and.w	r5, r5, #15
  4078b0:	f04f 0a03 	mov.w	sl, #3
  4078b4:	b18d      	cbz	r5, 4078da <_dtoa_r+0x7da>
  4078b6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 407b6c <_dtoa_r+0xa6c>
  4078ba:	07ea      	lsls	r2, r5, #31
  4078bc:	d509      	bpl.n	4078d2 <_dtoa_r+0x7d2>
  4078be:	4630      	mov	r0, r6
  4078c0:	4639      	mov	r1, r7
  4078c2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4078c6:	f7fd f9b7 	bl	404c38 <__aeabi_dmul>
  4078ca:	f10a 0a01 	add.w	sl, sl, #1
  4078ce:	4606      	mov	r6, r0
  4078d0:	460f      	mov	r7, r1
  4078d2:	106d      	asrs	r5, r5, #1
  4078d4:	f108 0808 	add.w	r8, r8, #8
  4078d8:	d1ef      	bne.n	4078ba <_dtoa_r+0x7ba>
  4078da:	463b      	mov	r3, r7
  4078dc:	4632      	mov	r2, r6
  4078de:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4078e2:	f7fd fad3 	bl	404e8c <__aeabi_ddiv>
  4078e6:	4607      	mov	r7, r0
  4078e8:	4688      	mov	r8, r1
  4078ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4078ec:	b143      	cbz	r3, 407900 <_dtoa_r+0x800>
  4078ee:	2200      	movs	r2, #0
  4078f0:	4b9f      	ldr	r3, [pc, #636]	; (407b70 <_dtoa_r+0xa70>)
  4078f2:	4638      	mov	r0, r7
  4078f4:	4641      	mov	r1, r8
  4078f6:	f7fd fc11 	bl	40511c <__aeabi_dcmplt>
  4078fa:	2800      	cmp	r0, #0
  4078fc:	f040 8286 	bne.w	407e0c <_dtoa_r+0xd0c>
  407900:	4650      	mov	r0, sl
  407902:	f7fd f933 	bl	404b6c <__aeabi_i2d>
  407906:	463a      	mov	r2, r7
  407908:	4643      	mov	r3, r8
  40790a:	f7fd f995 	bl	404c38 <__aeabi_dmul>
  40790e:	4b99      	ldr	r3, [pc, #612]	; (407b74 <_dtoa_r+0xa74>)
  407910:	2200      	movs	r2, #0
  407912:	f7fc ffdf 	bl	4048d4 <__adddf3>
  407916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407918:	4605      	mov	r5, r0
  40791a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40791e:	2b00      	cmp	r3, #0
  407920:	f000 813e 	beq.w	407ba0 <_dtoa_r+0xaa0>
  407924:	9b02      	ldr	r3, [sp, #8]
  407926:	9315      	str	r3, [sp, #84]	; 0x54
  407928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40792a:	9312      	str	r3, [sp, #72]	; 0x48
  40792c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40792e:	2b00      	cmp	r3, #0
  407930:	f000 81fa 	beq.w	407d28 <_dtoa_r+0xc28>
  407934:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407936:	4b8c      	ldr	r3, [pc, #560]	; (407b68 <_dtoa_r+0xa68>)
  407938:	498f      	ldr	r1, [pc, #572]	; (407b78 <_dtoa_r+0xa78>)
  40793a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40793e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407942:	2000      	movs	r0, #0
  407944:	f7fd faa2 	bl	404e8c <__aeabi_ddiv>
  407948:	462a      	mov	r2, r5
  40794a:	4633      	mov	r3, r6
  40794c:	f7fc ffc0 	bl	4048d0 <__aeabi_dsub>
  407950:	4682      	mov	sl, r0
  407952:	468b      	mov	fp, r1
  407954:	4638      	mov	r0, r7
  407956:	4641      	mov	r1, r8
  407958:	f001 fdba 	bl	4094d0 <__aeabi_d2iz>
  40795c:	4605      	mov	r5, r0
  40795e:	f7fd f905 	bl	404b6c <__aeabi_i2d>
  407962:	4602      	mov	r2, r0
  407964:	460b      	mov	r3, r1
  407966:	4638      	mov	r0, r7
  407968:	4641      	mov	r1, r8
  40796a:	f7fc ffb1 	bl	4048d0 <__aeabi_dsub>
  40796e:	3530      	adds	r5, #48	; 0x30
  407970:	fa5f f885 	uxtb.w	r8, r5
  407974:	9d04      	ldr	r5, [sp, #16]
  407976:	4606      	mov	r6, r0
  407978:	460f      	mov	r7, r1
  40797a:	f885 8000 	strb.w	r8, [r5]
  40797e:	4602      	mov	r2, r0
  407980:	460b      	mov	r3, r1
  407982:	4650      	mov	r0, sl
  407984:	4659      	mov	r1, fp
  407986:	3501      	adds	r5, #1
  407988:	f7fd fbe6 	bl	405158 <__aeabi_dcmpgt>
  40798c:	2800      	cmp	r0, #0
  40798e:	d154      	bne.n	407a3a <_dtoa_r+0x93a>
  407990:	4632      	mov	r2, r6
  407992:	463b      	mov	r3, r7
  407994:	2000      	movs	r0, #0
  407996:	4976      	ldr	r1, [pc, #472]	; (407b70 <_dtoa_r+0xa70>)
  407998:	f7fc ff9a 	bl	4048d0 <__aeabi_dsub>
  40799c:	4602      	mov	r2, r0
  40799e:	460b      	mov	r3, r1
  4079a0:	4650      	mov	r0, sl
  4079a2:	4659      	mov	r1, fp
  4079a4:	f7fd fbd8 	bl	405158 <__aeabi_dcmpgt>
  4079a8:	2800      	cmp	r0, #0
  4079aa:	f040 8270 	bne.w	407e8e <_dtoa_r+0xd8e>
  4079ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4079b0:	2a01      	cmp	r2, #1
  4079b2:	f000 8111 	beq.w	407bd8 <_dtoa_r+0xad8>
  4079b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4079b8:	9a04      	ldr	r2, [sp, #16]
  4079ba:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4079be:	4413      	add	r3, r2
  4079c0:	4699      	mov	r9, r3
  4079c2:	e00d      	b.n	4079e0 <_dtoa_r+0x8e0>
  4079c4:	2000      	movs	r0, #0
  4079c6:	496a      	ldr	r1, [pc, #424]	; (407b70 <_dtoa_r+0xa70>)
  4079c8:	f7fc ff82 	bl	4048d0 <__aeabi_dsub>
  4079cc:	4652      	mov	r2, sl
  4079ce:	465b      	mov	r3, fp
  4079d0:	f7fd fba4 	bl	40511c <__aeabi_dcmplt>
  4079d4:	2800      	cmp	r0, #0
  4079d6:	f040 8258 	bne.w	407e8a <_dtoa_r+0xd8a>
  4079da:	454d      	cmp	r5, r9
  4079dc:	f000 80fa 	beq.w	407bd4 <_dtoa_r+0xad4>
  4079e0:	4650      	mov	r0, sl
  4079e2:	4659      	mov	r1, fp
  4079e4:	2200      	movs	r2, #0
  4079e6:	4b65      	ldr	r3, [pc, #404]	; (407b7c <_dtoa_r+0xa7c>)
  4079e8:	f7fd f926 	bl	404c38 <__aeabi_dmul>
  4079ec:	2200      	movs	r2, #0
  4079ee:	4b63      	ldr	r3, [pc, #396]	; (407b7c <_dtoa_r+0xa7c>)
  4079f0:	4682      	mov	sl, r0
  4079f2:	468b      	mov	fp, r1
  4079f4:	4630      	mov	r0, r6
  4079f6:	4639      	mov	r1, r7
  4079f8:	f7fd f91e 	bl	404c38 <__aeabi_dmul>
  4079fc:	460f      	mov	r7, r1
  4079fe:	4606      	mov	r6, r0
  407a00:	f001 fd66 	bl	4094d0 <__aeabi_d2iz>
  407a04:	4680      	mov	r8, r0
  407a06:	f7fd f8b1 	bl	404b6c <__aeabi_i2d>
  407a0a:	4602      	mov	r2, r0
  407a0c:	460b      	mov	r3, r1
  407a0e:	4630      	mov	r0, r6
  407a10:	4639      	mov	r1, r7
  407a12:	f7fc ff5d 	bl	4048d0 <__aeabi_dsub>
  407a16:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407a1a:	fa5f f888 	uxtb.w	r8, r8
  407a1e:	4652      	mov	r2, sl
  407a20:	465b      	mov	r3, fp
  407a22:	f805 8b01 	strb.w	r8, [r5], #1
  407a26:	4606      	mov	r6, r0
  407a28:	460f      	mov	r7, r1
  407a2a:	f7fd fb77 	bl	40511c <__aeabi_dcmplt>
  407a2e:	4632      	mov	r2, r6
  407a30:	463b      	mov	r3, r7
  407a32:	2800      	cmp	r0, #0
  407a34:	d0c6      	beq.n	4079c4 <_dtoa_r+0x8c4>
  407a36:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407a3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407a3c:	9302      	str	r3, [sp, #8]
  407a3e:	e523      	b.n	407488 <_dtoa_r+0x388>
  407a40:	2300      	movs	r3, #0
  407a42:	930b      	str	r3, [sp, #44]	; 0x2c
  407a44:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407a46:	2b00      	cmp	r3, #0
  407a48:	f340 80dc 	ble.w	407c04 <_dtoa_r+0xb04>
  407a4c:	461f      	mov	r7, r3
  407a4e:	461e      	mov	r6, r3
  407a50:	930f      	str	r3, [sp, #60]	; 0x3c
  407a52:	930a      	str	r3, [sp, #40]	; 0x28
  407a54:	e6f6      	b.n	407844 <_dtoa_r+0x744>
  407a56:	2301      	movs	r3, #1
  407a58:	930b      	str	r3, [sp, #44]	; 0x2c
  407a5a:	e7f3      	b.n	407a44 <_dtoa_r+0x944>
  407a5c:	f1ba 0f00 	cmp.w	sl, #0
  407a60:	f47f ada8 	bne.w	4075b4 <_dtoa_r+0x4b4>
  407a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407a68:	2b00      	cmp	r3, #0
  407a6a:	f47f adba 	bne.w	4075e2 <_dtoa_r+0x4e2>
  407a6e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407a72:	0d3f      	lsrs	r7, r7, #20
  407a74:	053f      	lsls	r7, r7, #20
  407a76:	2f00      	cmp	r7, #0
  407a78:	f000 820d 	beq.w	407e96 <_dtoa_r+0xd96>
  407a7c:	9b08      	ldr	r3, [sp, #32]
  407a7e:	3301      	adds	r3, #1
  407a80:	9308      	str	r3, [sp, #32]
  407a82:	9b06      	ldr	r3, [sp, #24]
  407a84:	3301      	adds	r3, #1
  407a86:	9306      	str	r3, [sp, #24]
  407a88:	2301      	movs	r3, #1
  407a8a:	930c      	str	r3, [sp, #48]	; 0x30
  407a8c:	e5ab      	b.n	4075e6 <_dtoa_r+0x4e6>
  407a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407a90:	2b00      	cmp	r3, #0
  407a92:	f73f ac42 	bgt.w	40731a <_dtoa_r+0x21a>
  407a96:	f040 8221 	bne.w	407edc <_dtoa_r+0xddc>
  407a9a:	2200      	movs	r2, #0
  407a9c:	4b38      	ldr	r3, [pc, #224]	; (407b80 <_dtoa_r+0xa80>)
  407a9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407aa2:	f7fd f8c9 	bl	404c38 <__aeabi_dmul>
  407aa6:	4652      	mov	r2, sl
  407aa8:	465b      	mov	r3, fp
  407aaa:	f7fd fb4b 	bl	405144 <__aeabi_dcmpge>
  407aae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407ab2:	4646      	mov	r6, r8
  407ab4:	2800      	cmp	r0, #0
  407ab6:	d041      	beq.n	407b3c <_dtoa_r+0xa3c>
  407ab8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407aba:	9d04      	ldr	r5, [sp, #16]
  407abc:	43db      	mvns	r3, r3
  407abe:	9302      	str	r3, [sp, #8]
  407ac0:	4641      	mov	r1, r8
  407ac2:	4620      	mov	r0, r4
  407ac4:	f000 ff5a 	bl	40897c <_Bfree>
  407ac8:	2e00      	cmp	r6, #0
  407aca:	f43f acdd 	beq.w	407488 <_dtoa_r+0x388>
  407ace:	e6a7      	b.n	407820 <_dtoa_r+0x720>
  407ad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407ad2:	4649      	mov	r1, r9
  407ad4:	4620      	mov	r0, r4
  407ad6:	f001 f887 	bl	408be8 <__pow5mult>
  407ada:	4681      	mov	r9, r0
  407adc:	e558      	b.n	407590 <_dtoa_r+0x490>
  407ade:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407ae0:	2a00      	cmp	r2, #0
  407ae2:	f000 8187 	beq.w	407df4 <_dtoa_r+0xcf4>
  407ae6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407aea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407aec:	9d08      	ldr	r5, [sp, #32]
  407aee:	e4f2      	b.n	4074d6 <_dtoa_r+0x3d6>
  407af0:	f1ba 0f00 	cmp.w	sl, #0
  407af4:	f47f ad75 	bne.w	4075e2 <_dtoa_r+0x4e2>
  407af8:	e7b4      	b.n	407a64 <_dtoa_r+0x964>
  407afa:	f000 ff49 	bl	408990 <__multadd>
  407afe:	4647      	mov	r7, r8
  407b00:	4606      	mov	r6, r0
  407b02:	4683      	mov	fp, r0
  407b04:	e5be      	b.n	407684 <_dtoa_r+0x584>
  407b06:	4601      	mov	r1, r0
  407b08:	4620      	mov	r0, r4
  407b0a:	9306      	str	r3, [sp, #24]
  407b0c:	f000 ff36 	bl	40897c <_Bfree>
  407b10:	2201      	movs	r2, #1
  407b12:	9b06      	ldr	r3, [sp, #24]
  407b14:	e5e0      	b.n	4076d8 <_dtoa_r+0x5d8>
  407b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407b18:	2b02      	cmp	r3, #2
  407b1a:	f77f ad96 	ble.w	40764a <_dtoa_r+0x54a>
  407b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407b20:	2b00      	cmp	r3, #0
  407b22:	d1c9      	bne.n	407ab8 <_dtoa_r+0x9b8>
  407b24:	4641      	mov	r1, r8
  407b26:	2205      	movs	r2, #5
  407b28:	4620      	mov	r0, r4
  407b2a:	f000 ff31 	bl	408990 <__multadd>
  407b2e:	4601      	mov	r1, r0
  407b30:	4680      	mov	r8, r0
  407b32:	4648      	mov	r0, r9
  407b34:	f001 f8fa 	bl	408d2c <__mcmp>
  407b38:	2800      	cmp	r0, #0
  407b3a:	ddbd      	ble.n	407ab8 <_dtoa_r+0x9b8>
  407b3c:	9a02      	ldr	r2, [sp, #8]
  407b3e:	9904      	ldr	r1, [sp, #16]
  407b40:	2331      	movs	r3, #49	; 0x31
  407b42:	3201      	adds	r2, #1
  407b44:	9202      	str	r2, [sp, #8]
  407b46:	700b      	strb	r3, [r1, #0]
  407b48:	1c4d      	adds	r5, r1, #1
  407b4a:	e7b9      	b.n	407ac0 <_dtoa_r+0x9c0>
  407b4c:	9a02      	ldr	r2, [sp, #8]
  407b4e:	3201      	adds	r2, #1
  407b50:	9202      	str	r2, [sp, #8]
  407b52:	9a04      	ldr	r2, [sp, #16]
  407b54:	2331      	movs	r3, #49	; 0x31
  407b56:	7013      	strb	r3, [r2, #0]
  407b58:	e652      	b.n	407800 <_dtoa_r+0x700>
  407b5a:	2301      	movs	r3, #1
  407b5c:	930b      	str	r3, [sp, #44]	; 0x2c
  407b5e:	e666      	b.n	40782e <_dtoa_r+0x72e>
  407b60:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407b64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407b66:	e48f      	b.n	407488 <_dtoa_r+0x388>
  407b68:	00409bf0 	.word	0x00409bf0
  407b6c:	00409bc8 	.word	0x00409bc8
  407b70:	3ff00000 	.word	0x3ff00000
  407b74:	401c0000 	.word	0x401c0000
  407b78:	3fe00000 	.word	0x3fe00000
  407b7c:	40240000 	.word	0x40240000
  407b80:	40140000 	.word	0x40140000
  407b84:	4650      	mov	r0, sl
  407b86:	f7fc fff1 	bl	404b6c <__aeabi_i2d>
  407b8a:	463a      	mov	r2, r7
  407b8c:	4643      	mov	r3, r8
  407b8e:	f7fd f853 	bl	404c38 <__aeabi_dmul>
  407b92:	2200      	movs	r2, #0
  407b94:	4bc1      	ldr	r3, [pc, #772]	; (407e9c <_dtoa_r+0xd9c>)
  407b96:	f7fc fe9d 	bl	4048d4 <__adddf3>
  407b9a:	4605      	mov	r5, r0
  407b9c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407ba0:	4641      	mov	r1, r8
  407ba2:	2200      	movs	r2, #0
  407ba4:	4bbe      	ldr	r3, [pc, #760]	; (407ea0 <_dtoa_r+0xda0>)
  407ba6:	4638      	mov	r0, r7
  407ba8:	f7fc fe92 	bl	4048d0 <__aeabi_dsub>
  407bac:	462a      	mov	r2, r5
  407bae:	4633      	mov	r3, r6
  407bb0:	4682      	mov	sl, r0
  407bb2:	468b      	mov	fp, r1
  407bb4:	f7fd fad0 	bl	405158 <__aeabi_dcmpgt>
  407bb8:	4680      	mov	r8, r0
  407bba:	2800      	cmp	r0, #0
  407bbc:	f040 8110 	bne.w	407de0 <_dtoa_r+0xce0>
  407bc0:	462a      	mov	r2, r5
  407bc2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  407bc6:	4650      	mov	r0, sl
  407bc8:	4659      	mov	r1, fp
  407bca:	f7fd faa7 	bl	40511c <__aeabi_dcmplt>
  407bce:	b118      	cbz	r0, 407bd8 <_dtoa_r+0xad8>
  407bd0:	4646      	mov	r6, r8
  407bd2:	e771      	b.n	407ab8 <_dtoa_r+0x9b8>
  407bd4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407bd8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  407bdc:	f7ff bb8a 	b.w	4072f4 <_dtoa_r+0x1f4>
  407be0:	9804      	ldr	r0, [sp, #16]
  407be2:	f7ff babb 	b.w	40715c <_dtoa_r+0x5c>
  407be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407be8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  407bea:	970c      	str	r7, [sp, #48]	; 0x30
  407bec:	1afb      	subs	r3, r7, r3
  407bee:	441a      	add	r2, r3
  407bf0:	920d      	str	r2, [sp, #52]	; 0x34
  407bf2:	2700      	movs	r7, #0
  407bf4:	e469      	b.n	4074ca <_dtoa_r+0x3ca>
  407bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  407bfa:	f04f 0a02 	mov.w	sl, #2
  407bfe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  407c02:	e657      	b.n	4078b4 <_dtoa_r+0x7b4>
  407c04:	2100      	movs	r1, #0
  407c06:	2301      	movs	r3, #1
  407c08:	6461      	str	r1, [r4, #68]	; 0x44
  407c0a:	4620      	mov	r0, r4
  407c0c:	9325      	str	r3, [sp, #148]	; 0x94
  407c0e:	f000 fe8f 	bl	408930 <_Balloc>
  407c12:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407c14:	9004      	str	r0, [sp, #16]
  407c16:	6420      	str	r0, [r4, #64]	; 0x40
  407c18:	930a      	str	r3, [sp, #40]	; 0x28
  407c1a:	930f      	str	r3, [sp, #60]	; 0x3c
  407c1c:	e629      	b.n	407872 <_dtoa_r+0x772>
  407c1e:	2a00      	cmp	r2, #0
  407c20:	46d0      	mov	r8, sl
  407c22:	f8cd b018 	str.w	fp, [sp, #24]
  407c26:	469a      	mov	sl, r3
  407c28:	dd11      	ble.n	407c4e <_dtoa_r+0xb4e>
  407c2a:	4649      	mov	r1, r9
  407c2c:	2201      	movs	r2, #1
  407c2e:	4620      	mov	r0, r4
  407c30:	f001 f82a 	bl	408c88 <__lshift>
  407c34:	4641      	mov	r1, r8
  407c36:	4681      	mov	r9, r0
  407c38:	f001 f878 	bl	408d2c <__mcmp>
  407c3c:	2800      	cmp	r0, #0
  407c3e:	f340 8146 	ble.w	407ece <_dtoa_r+0xdce>
  407c42:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407c46:	f000 8106 	beq.w	407e56 <_dtoa_r+0xd56>
  407c4a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  407c4e:	46b3      	mov	fp, r6
  407c50:	f887 a000 	strb.w	sl, [r7]
  407c54:	1c7d      	adds	r5, r7, #1
  407c56:	9e06      	ldr	r6, [sp, #24]
  407c58:	e5d2      	b.n	407800 <_dtoa_r+0x700>
  407c5a:	d104      	bne.n	407c66 <_dtoa_r+0xb66>
  407c5c:	f01a 0f01 	tst.w	sl, #1
  407c60:	d001      	beq.n	407c66 <_dtoa_r+0xb66>
  407c62:	e5bd      	b.n	4077e0 <_dtoa_r+0x6e0>
  407c64:	4615      	mov	r5, r2
  407c66:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407c6a:	2b30      	cmp	r3, #48	; 0x30
  407c6c:	f105 32ff 	add.w	r2, r5, #4294967295
  407c70:	d0f8      	beq.n	407c64 <_dtoa_r+0xb64>
  407c72:	e5c5      	b.n	407800 <_dtoa_r+0x700>
  407c74:	9904      	ldr	r1, [sp, #16]
  407c76:	2230      	movs	r2, #48	; 0x30
  407c78:	700a      	strb	r2, [r1, #0]
  407c7a:	9a02      	ldr	r2, [sp, #8]
  407c7c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407c80:	3201      	adds	r2, #1
  407c82:	9202      	str	r2, [sp, #8]
  407c84:	f7ff bbfc 	b.w	407480 <_dtoa_r+0x380>
  407c88:	f000 80bb 	beq.w	407e02 <_dtoa_r+0xd02>
  407c8c:	9b02      	ldr	r3, [sp, #8]
  407c8e:	425d      	negs	r5, r3
  407c90:	4b84      	ldr	r3, [pc, #528]	; (407ea4 <_dtoa_r+0xda4>)
  407c92:	f005 020f 	and.w	r2, r5, #15
  407c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  407c9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407ca2:	f7fc ffc9 	bl	404c38 <__aeabi_dmul>
  407ca6:	112d      	asrs	r5, r5, #4
  407ca8:	4607      	mov	r7, r0
  407caa:	4688      	mov	r8, r1
  407cac:	f000 812c 	beq.w	407f08 <_dtoa_r+0xe08>
  407cb0:	4e7d      	ldr	r6, [pc, #500]	; (407ea8 <_dtoa_r+0xda8>)
  407cb2:	f04f 0a02 	mov.w	sl, #2
  407cb6:	07eb      	lsls	r3, r5, #31
  407cb8:	d509      	bpl.n	407cce <_dtoa_r+0xbce>
  407cba:	4638      	mov	r0, r7
  407cbc:	4641      	mov	r1, r8
  407cbe:	e9d6 2300 	ldrd	r2, r3, [r6]
  407cc2:	f7fc ffb9 	bl	404c38 <__aeabi_dmul>
  407cc6:	f10a 0a01 	add.w	sl, sl, #1
  407cca:	4607      	mov	r7, r0
  407ccc:	4688      	mov	r8, r1
  407cce:	106d      	asrs	r5, r5, #1
  407cd0:	f106 0608 	add.w	r6, r6, #8
  407cd4:	d1ef      	bne.n	407cb6 <_dtoa_r+0xbb6>
  407cd6:	e608      	b.n	4078ea <_dtoa_r+0x7ea>
  407cd8:	6871      	ldr	r1, [r6, #4]
  407cda:	4620      	mov	r0, r4
  407cdc:	f000 fe28 	bl	408930 <_Balloc>
  407ce0:	6933      	ldr	r3, [r6, #16]
  407ce2:	3302      	adds	r3, #2
  407ce4:	009a      	lsls	r2, r3, #2
  407ce6:	4605      	mov	r5, r0
  407ce8:	f106 010c 	add.w	r1, r6, #12
  407cec:	300c      	adds	r0, #12
  407cee:	f7fd fda5 	bl	40583c <memcpy>
  407cf2:	4629      	mov	r1, r5
  407cf4:	2201      	movs	r2, #1
  407cf6:	4620      	mov	r0, r4
  407cf8:	f000 ffc6 	bl	408c88 <__lshift>
  407cfc:	9006      	str	r0, [sp, #24]
  407cfe:	e4b5      	b.n	40766c <_dtoa_r+0x56c>
  407d00:	2b39      	cmp	r3, #57	; 0x39
  407d02:	f8cd b018 	str.w	fp, [sp, #24]
  407d06:	46d0      	mov	r8, sl
  407d08:	f000 80a5 	beq.w	407e56 <_dtoa_r+0xd56>
  407d0c:	f103 0a01 	add.w	sl, r3, #1
  407d10:	46b3      	mov	fp, r6
  407d12:	f887 a000 	strb.w	sl, [r7]
  407d16:	1c7d      	adds	r5, r7, #1
  407d18:	9e06      	ldr	r6, [sp, #24]
  407d1a:	e571      	b.n	407800 <_dtoa_r+0x700>
  407d1c:	465a      	mov	r2, fp
  407d1e:	46d0      	mov	r8, sl
  407d20:	46b3      	mov	fp, r6
  407d22:	469a      	mov	sl, r3
  407d24:	4616      	mov	r6, r2
  407d26:	e54f      	b.n	4077c8 <_dtoa_r+0x6c8>
  407d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407d2a:	495e      	ldr	r1, [pc, #376]	; (407ea4 <_dtoa_r+0xda4>)
  407d2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407d30:	462a      	mov	r2, r5
  407d32:	4633      	mov	r3, r6
  407d34:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407d38:	f7fc ff7e 	bl	404c38 <__aeabi_dmul>
  407d3c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407d40:	4638      	mov	r0, r7
  407d42:	4641      	mov	r1, r8
  407d44:	f001 fbc4 	bl	4094d0 <__aeabi_d2iz>
  407d48:	4605      	mov	r5, r0
  407d4a:	f7fc ff0f 	bl	404b6c <__aeabi_i2d>
  407d4e:	460b      	mov	r3, r1
  407d50:	4602      	mov	r2, r0
  407d52:	4641      	mov	r1, r8
  407d54:	4638      	mov	r0, r7
  407d56:	f7fc fdbb 	bl	4048d0 <__aeabi_dsub>
  407d5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407d5c:	460f      	mov	r7, r1
  407d5e:	9904      	ldr	r1, [sp, #16]
  407d60:	3530      	adds	r5, #48	; 0x30
  407d62:	2b01      	cmp	r3, #1
  407d64:	700d      	strb	r5, [r1, #0]
  407d66:	4606      	mov	r6, r0
  407d68:	f101 0501 	add.w	r5, r1, #1
  407d6c:	d026      	beq.n	407dbc <_dtoa_r+0xcbc>
  407d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407d70:	9a04      	ldr	r2, [sp, #16]
  407d72:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407eb0 <_dtoa_r+0xdb0>
  407d76:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  407d7a:	4413      	add	r3, r2
  407d7c:	f04f 0a00 	mov.w	sl, #0
  407d80:	4699      	mov	r9, r3
  407d82:	4652      	mov	r2, sl
  407d84:	465b      	mov	r3, fp
  407d86:	4630      	mov	r0, r6
  407d88:	4639      	mov	r1, r7
  407d8a:	f7fc ff55 	bl	404c38 <__aeabi_dmul>
  407d8e:	460f      	mov	r7, r1
  407d90:	4606      	mov	r6, r0
  407d92:	f001 fb9d 	bl	4094d0 <__aeabi_d2iz>
  407d96:	4680      	mov	r8, r0
  407d98:	f7fc fee8 	bl	404b6c <__aeabi_i2d>
  407d9c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407da0:	4602      	mov	r2, r0
  407da2:	460b      	mov	r3, r1
  407da4:	4630      	mov	r0, r6
  407da6:	4639      	mov	r1, r7
  407da8:	f7fc fd92 	bl	4048d0 <__aeabi_dsub>
  407dac:	f805 8b01 	strb.w	r8, [r5], #1
  407db0:	454d      	cmp	r5, r9
  407db2:	4606      	mov	r6, r0
  407db4:	460f      	mov	r7, r1
  407db6:	d1e4      	bne.n	407d82 <_dtoa_r+0xc82>
  407db8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407dbc:	4b3b      	ldr	r3, [pc, #236]	; (407eac <_dtoa_r+0xdac>)
  407dbe:	2200      	movs	r2, #0
  407dc0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  407dc4:	f7fc fd86 	bl	4048d4 <__adddf3>
  407dc8:	4632      	mov	r2, r6
  407dca:	463b      	mov	r3, r7
  407dcc:	f7fd f9a6 	bl	40511c <__aeabi_dcmplt>
  407dd0:	2800      	cmp	r0, #0
  407dd2:	d046      	beq.n	407e62 <_dtoa_r+0xd62>
  407dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407dd6:	9302      	str	r3, [sp, #8]
  407dd8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407ddc:	f7ff bb43 	b.w	407466 <_dtoa_r+0x366>
  407de0:	f04f 0800 	mov.w	r8, #0
  407de4:	4646      	mov	r6, r8
  407de6:	e6a9      	b.n	407b3c <_dtoa_r+0xa3c>
  407de8:	9b08      	ldr	r3, [sp, #32]
  407dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407dec:	1a9d      	subs	r5, r3, r2
  407dee:	2300      	movs	r3, #0
  407df0:	f7ff bb71 	b.w	4074d6 <_dtoa_r+0x3d6>
  407df4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407df6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407df8:	9d08      	ldr	r5, [sp, #32]
  407dfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407dfe:	f7ff bb6a 	b.w	4074d6 <_dtoa_r+0x3d6>
  407e02:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  407e06:	f04f 0a02 	mov.w	sl, #2
  407e0a:	e56e      	b.n	4078ea <_dtoa_r+0x7ea>
  407e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e0e:	2b00      	cmp	r3, #0
  407e10:	f43f aeb8 	beq.w	407b84 <_dtoa_r+0xa84>
  407e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407e16:	2b00      	cmp	r3, #0
  407e18:	f77f aede 	ble.w	407bd8 <_dtoa_r+0xad8>
  407e1c:	2200      	movs	r2, #0
  407e1e:	4b24      	ldr	r3, [pc, #144]	; (407eb0 <_dtoa_r+0xdb0>)
  407e20:	4638      	mov	r0, r7
  407e22:	4641      	mov	r1, r8
  407e24:	f7fc ff08 	bl	404c38 <__aeabi_dmul>
  407e28:	4607      	mov	r7, r0
  407e2a:	4688      	mov	r8, r1
  407e2c:	f10a 0001 	add.w	r0, sl, #1
  407e30:	f7fc fe9c 	bl	404b6c <__aeabi_i2d>
  407e34:	463a      	mov	r2, r7
  407e36:	4643      	mov	r3, r8
  407e38:	f7fc fefe 	bl	404c38 <__aeabi_dmul>
  407e3c:	2200      	movs	r2, #0
  407e3e:	4b17      	ldr	r3, [pc, #92]	; (407e9c <_dtoa_r+0xd9c>)
  407e40:	f7fc fd48 	bl	4048d4 <__adddf3>
  407e44:	9a02      	ldr	r2, [sp, #8]
  407e46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407e48:	9312      	str	r3, [sp, #72]	; 0x48
  407e4a:	3a01      	subs	r2, #1
  407e4c:	4605      	mov	r5, r0
  407e4e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407e52:	9215      	str	r2, [sp, #84]	; 0x54
  407e54:	e56a      	b.n	40792c <_dtoa_r+0x82c>
  407e56:	2239      	movs	r2, #57	; 0x39
  407e58:	46b3      	mov	fp, r6
  407e5a:	703a      	strb	r2, [r7, #0]
  407e5c:	9e06      	ldr	r6, [sp, #24]
  407e5e:	1c7d      	adds	r5, r7, #1
  407e60:	e4c0      	b.n	4077e4 <_dtoa_r+0x6e4>
  407e62:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407e66:	2000      	movs	r0, #0
  407e68:	4910      	ldr	r1, [pc, #64]	; (407eac <_dtoa_r+0xdac>)
  407e6a:	f7fc fd31 	bl	4048d0 <__aeabi_dsub>
  407e6e:	4632      	mov	r2, r6
  407e70:	463b      	mov	r3, r7
  407e72:	f7fd f971 	bl	405158 <__aeabi_dcmpgt>
  407e76:	b908      	cbnz	r0, 407e7c <_dtoa_r+0xd7c>
  407e78:	e6ae      	b.n	407bd8 <_dtoa_r+0xad8>
  407e7a:	4615      	mov	r5, r2
  407e7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407e80:	2b30      	cmp	r3, #48	; 0x30
  407e82:	f105 32ff 	add.w	r2, r5, #4294967295
  407e86:	d0f8      	beq.n	407e7a <_dtoa_r+0xd7a>
  407e88:	e5d7      	b.n	407a3a <_dtoa_r+0x93a>
  407e8a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407e90:	9302      	str	r3, [sp, #8]
  407e92:	f7ff bae8 	b.w	407466 <_dtoa_r+0x366>
  407e96:	970c      	str	r7, [sp, #48]	; 0x30
  407e98:	f7ff bba5 	b.w	4075e6 <_dtoa_r+0x4e6>
  407e9c:	401c0000 	.word	0x401c0000
  407ea0:	40140000 	.word	0x40140000
  407ea4:	00409bf0 	.word	0x00409bf0
  407ea8:	00409bc8 	.word	0x00409bc8
  407eac:	3fe00000 	.word	0x3fe00000
  407eb0:	40240000 	.word	0x40240000
  407eb4:	2b39      	cmp	r3, #57	; 0x39
  407eb6:	f8cd b018 	str.w	fp, [sp, #24]
  407eba:	46d0      	mov	r8, sl
  407ebc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  407ec0:	469a      	mov	sl, r3
  407ec2:	d0c8      	beq.n	407e56 <_dtoa_r+0xd56>
  407ec4:	f1bb 0f00 	cmp.w	fp, #0
  407ec8:	f73f aebf 	bgt.w	407c4a <_dtoa_r+0xb4a>
  407ecc:	e6bf      	b.n	407c4e <_dtoa_r+0xb4e>
  407ece:	f47f aebe 	bne.w	407c4e <_dtoa_r+0xb4e>
  407ed2:	f01a 0f01 	tst.w	sl, #1
  407ed6:	f43f aeba 	beq.w	407c4e <_dtoa_r+0xb4e>
  407eda:	e6b2      	b.n	407c42 <_dtoa_r+0xb42>
  407edc:	f04f 0800 	mov.w	r8, #0
  407ee0:	4646      	mov	r6, r8
  407ee2:	e5e9      	b.n	407ab8 <_dtoa_r+0x9b8>
  407ee4:	4631      	mov	r1, r6
  407ee6:	2300      	movs	r3, #0
  407ee8:	220a      	movs	r2, #10
  407eea:	4620      	mov	r0, r4
  407eec:	f000 fd50 	bl	408990 <__multadd>
  407ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407ef2:	2b00      	cmp	r3, #0
  407ef4:	4606      	mov	r6, r0
  407ef6:	dd0a      	ble.n	407f0e <_dtoa_r+0xe0e>
  407ef8:	930a      	str	r3, [sp, #40]	; 0x28
  407efa:	f7ff bbaa 	b.w	407652 <_dtoa_r+0x552>
  407efe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f00:	2b02      	cmp	r3, #2
  407f02:	dc23      	bgt.n	407f4c <_dtoa_r+0xe4c>
  407f04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407f06:	e43b      	b.n	407780 <_dtoa_r+0x680>
  407f08:	f04f 0a02 	mov.w	sl, #2
  407f0c:	e4ed      	b.n	4078ea <_dtoa_r+0x7ea>
  407f0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407f10:	2b02      	cmp	r3, #2
  407f12:	dc1b      	bgt.n	407f4c <_dtoa_r+0xe4c>
  407f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407f16:	e7ef      	b.n	407ef8 <_dtoa_r+0xdf8>
  407f18:	2500      	movs	r5, #0
  407f1a:	6465      	str	r5, [r4, #68]	; 0x44
  407f1c:	4629      	mov	r1, r5
  407f1e:	4620      	mov	r0, r4
  407f20:	f000 fd06 	bl	408930 <_Balloc>
  407f24:	f04f 33ff 	mov.w	r3, #4294967295
  407f28:	930a      	str	r3, [sp, #40]	; 0x28
  407f2a:	930f      	str	r3, [sp, #60]	; 0x3c
  407f2c:	2301      	movs	r3, #1
  407f2e:	9004      	str	r0, [sp, #16]
  407f30:	9525      	str	r5, [sp, #148]	; 0x94
  407f32:	6420      	str	r0, [r4, #64]	; 0x40
  407f34:	930b      	str	r3, [sp, #44]	; 0x2c
  407f36:	f7ff b9dd 	b.w	4072f4 <_dtoa_r+0x1f4>
  407f3a:	2501      	movs	r5, #1
  407f3c:	f7ff b9a5 	b.w	40728a <_dtoa_r+0x18a>
  407f40:	f43f ab69 	beq.w	407616 <_dtoa_r+0x516>
  407f44:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407f48:	f7ff bbf9 	b.w	40773e <_dtoa_r+0x63e>
  407f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407f4e:	930a      	str	r3, [sp, #40]	; 0x28
  407f50:	e5e5      	b.n	407b1e <_dtoa_r+0xa1e>
  407f52:	bf00      	nop

00407f54 <__libc_fini_array>:
  407f54:	b538      	push	{r3, r4, r5, lr}
  407f56:	4c0a      	ldr	r4, [pc, #40]	; (407f80 <__libc_fini_array+0x2c>)
  407f58:	4d0a      	ldr	r5, [pc, #40]	; (407f84 <__libc_fini_array+0x30>)
  407f5a:	1b64      	subs	r4, r4, r5
  407f5c:	10a4      	asrs	r4, r4, #2
  407f5e:	d00a      	beq.n	407f76 <__libc_fini_array+0x22>
  407f60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407f64:	3b01      	subs	r3, #1
  407f66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407f6a:	3c01      	subs	r4, #1
  407f6c:	f855 3904 	ldr.w	r3, [r5], #-4
  407f70:	4798      	blx	r3
  407f72:	2c00      	cmp	r4, #0
  407f74:	d1f9      	bne.n	407f6a <__libc_fini_array+0x16>
  407f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407f7a:	f001 bf2f 	b.w	409ddc <_fini>
  407f7e:	bf00      	nop
  407f80:	00409dec 	.word	0x00409dec
  407f84:	00409de8 	.word	0x00409de8

00407f88 <_malloc_trim_r>:
  407f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407f8a:	4f24      	ldr	r7, [pc, #144]	; (40801c <_malloc_trim_r+0x94>)
  407f8c:	460c      	mov	r4, r1
  407f8e:	4606      	mov	r6, r0
  407f90:	f000 fcc2 	bl	408918 <__malloc_lock>
  407f94:	68bb      	ldr	r3, [r7, #8]
  407f96:	685d      	ldr	r5, [r3, #4]
  407f98:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407f9c:	310f      	adds	r1, #15
  407f9e:	f025 0503 	bic.w	r5, r5, #3
  407fa2:	4429      	add	r1, r5
  407fa4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407fa8:	f021 010f 	bic.w	r1, r1, #15
  407fac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407fb0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407fb4:	db07      	blt.n	407fc6 <_malloc_trim_r+0x3e>
  407fb6:	2100      	movs	r1, #0
  407fb8:	4630      	mov	r0, r6
  407fba:	f001 f959 	bl	409270 <_sbrk_r>
  407fbe:	68bb      	ldr	r3, [r7, #8]
  407fc0:	442b      	add	r3, r5
  407fc2:	4298      	cmp	r0, r3
  407fc4:	d004      	beq.n	407fd0 <_malloc_trim_r+0x48>
  407fc6:	4630      	mov	r0, r6
  407fc8:	f000 fcac 	bl	408924 <__malloc_unlock>
  407fcc:	2000      	movs	r0, #0
  407fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407fd0:	4261      	negs	r1, r4
  407fd2:	4630      	mov	r0, r6
  407fd4:	f001 f94c 	bl	409270 <_sbrk_r>
  407fd8:	3001      	adds	r0, #1
  407fda:	d00d      	beq.n	407ff8 <_malloc_trim_r+0x70>
  407fdc:	4b10      	ldr	r3, [pc, #64]	; (408020 <_malloc_trim_r+0x98>)
  407fde:	68ba      	ldr	r2, [r7, #8]
  407fe0:	6819      	ldr	r1, [r3, #0]
  407fe2:	1b2d      	subs	r5, r5, r4
  407fe4:	f045 0501 	orr.w	r5, r5, #1
  407fe8:	4630      	mov	r0, r6
  407fea:	1b09      	subs	r1, r1, r4
  407fec:	6055      	str	r5, [r2, #4]
  407fee:	6019      	str	r1, [r3, #0]
  407ff0:	f000 fc98 	bl	408924 <__malloc_unlock>
  407ff4:	2001      	movs	r0, #1
  407ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407ff8:	2100      	movs	r1, #0
  407ffa:	4630      	mov	r0, r6
  407ffc:	f001 f938 	bl	409270 <_sbrk_r>
  408000:	68ba      	ldr	r2, [r7, #8]
  408002:	1a83      	subs	r3, r0, r2
  408004:	2b0f      	cmp	r3, #15
  408006:	ddde      	ble.n	407fc6 <_malloc_trim_r+0x3e>
  408008:	4c06      	ldr	r4, [pc, #24]	; (408024 <_malloc_trim_r+0x9c>)
  40800a:	4905      	ldr	r1, [pc, #20]	; (408020 <_malloc_trim_r+0x98>)
  40800c:	6824      	ldr	r4, [r4, #0]
  40800e:	f043 0301 	orr.w	r3, r3, #1
  408012:	1b00      	subs	r0, r0, r4
  408014:	6053      	str	r3, [r2, #4]
  408016:	6008      	str	r0, [r1, #0]
  408018:	e7d5      	b.n	407fc6 <_malloc_trim_r+0x3e>
  40801a:	bf00      	nop
  40801c:	20000648 	.word	0x20000648
  408020:	200014a4 	.word	0x200014a4
  408024:	20000a50 	.word	0x20000a50

00408028 <_free_r>:
  408028:	2900      	cmp	r1, #0
  40802a:	d044      	beq.n	4080b6 <_free_r+0x8e>
  40802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408030:	460d      	mov	r5, r1
  408032:	4680      	mov	r8, r0
  408034:	f000 fc70 	bl	408918 <__malloc_lock>
  408038:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40803c:	4969      	ldr	r1, [pc, #420]	; (4081e4 <_free_r+0x1bc>)
  40803e:	f027 0301 	bic.w	r3, r7, #1
  408042:	f1a5 0408 	sub.w	r4, r5, #8
  408046:	18e2      	adds	r2, r4, r3
  408048:	688e      	ldr	r6, [r1, #8]
  40804a:	6850      	ldr	r0, [r2, #4]
  40804c:	42b2      	cmp	r2, r6
  40804e:	f020 0003 	bic.w	r0, r0, #3
  408052:	d05e      	beq.n	408112 <_free_r+0xea>
  408054:	07fe      	lsls	r6, r7, #31
  408056:	6050      	str	r0, [r2, #4]
  408058:	d40b      	bmi.n	408072 <_free_r+0x4a>
  40805a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40805e:	1be4      	subs	r4, r4, r7
  408060:	f101 0e08 	add.w	lr, r1, #8
  408064:	68a5      	ldr	r5, [r4, #8]
  408066:	4575      	cmp	r5, lr
  408068:	443b      	add	r3, r7
  40806a:	d06d      	beq.n	408148 <_free_r+0x120>
  40806c:	68e7      	ldr	r7, [r4, #12]
  40806e:	60ef      	str	r7, [r5, #12]
  408070:	60bd      	str	r5, [r7, #8]
  408072:	1815      	adds	r5, r2, r0
  408074:	686d      	ldr	r5, [r5, #4]
  408076:	07ed      	lsls	r5, r5, #31
  408078:	d53e      	bpl.n	4080f8 <_free_r+0xd0>
  40807a:	f043 0201 	orr.w	r2, r3, #1
  40807e:	6062      	str	r2, [r4, #4]
  408080:	50e3      	str	r3, [r4, r3]
  408082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408086:	d217      	bcs.n	4080b8 <_free_r+0x90>
  408088:	08db      	lsrs	r3, r3, #3
  40808a:	1c58      	adds	r0, r3, #1
  40808c:	109a      	asrs	r2, r3, #2
  40808e:	684d      	ldr	r5, [r1, #4]
  408090:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408094:	60a7      	str	r7, [r4, #8]
  408096:	2301      	movs	r3, #1
  408098:	4093      	lsls	r3, r2
  40809a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40809e:	432b      	orrs	r3, r5
  4080a0:	3a08      	subs	r2, #8
  4080a2:	60e2      	str	r2, [r4, #12]
  4080a4:	604b      	str	r3, [r1, #4]
  4080a6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4080aa:	60fc      	str	r4, [r7, #12]
  4080ac:	4640      	mov	r0, r8
  4080ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4080b2:	f000 bc37 	b.w	408924 <__malloc_unlock>
  4080b6:	4770      	bx	lr
  4080b8:	0a5a      	lsrs	r2, r3, #9
  4080ba:	2a04      	cmp	r2, #4
  4080bc:	d852      	bhi.n	408164 <_free_r+0x13c>
  4080be:	099a      	lsrs	r2, r3, #6
  4080c0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4080c4:	00ff      	lsls	r7, r7, #3
  4080c6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4080ca:	19c8      	adds	r0, r1, r7
  4080cc:	59ca      	ldr	r2, [r1, r7]
  4080ce:	3808      	subs	r0, #8
  4080d0:	4290      	cmp	r0, r2
  4080d2:	d04f      	beq.n	408174 <_free_r+0x14c>
  4080d4:	6851      	ldr	r1, [r2, #4]
  4080d6:	f021 0103 	bic.w	r1, r1, #3
  4080da:	428b      	cmp	r3, r1
  4080dc:	d232      	bcs.n	408144 <_free_r+0x11c>
  4080de:	6892      	ldr	r2, [r2, #8]
  4080e0:	4290      	cmp	r0, r2
  4080e2:	d1f7      	bne.n	4080d4 <_free_r+0xac>
  4080e4:	68c3      	ldr	r3, [r0, #12]
  4080e6:	60a0      	str	r0, [r4, #8]
  4080e8:	60e3      	str	r3, [r4, #12]
  4080ea:	609c      	str	r4, [r3, #8]
  4080ec:	60c4      	str	r4, [r0, #12]
  4080ee:	4640      	mov	r0, r8
  4080f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4080f4:	f000 bc16 	b.w	408924 <__malloc_unlock>
  4080f8:	6895      	ldr	r5, [r2, #8]
  4080fa:	4f3b      	ldr	r7, [pc, #236]	; (4081e8 <_free_r+0x1c0>)
  4080fc:	42bd      	cmp	r5, r7
  4080fe:	4403      	add	r3, r0
  408100:	d040      	beq.n	408184 <_free_r+0x15c>
  408102:	68d0      	ldr	r0, [r2, #12]
  408104:	60e8      	str	r0, [r5, #12]
  408106:	f043 0201 	orr.w	r2, r3, #1
  40810a:	6085      	str	r5, [r0, #8]
  40810c:	6062      	str	r2, [r4, #4]
  40810e:	50e3      	str	r3, [r4, r3]
  408110:	e7b7      	b.n	408082 <_free_r+0x5a>
  408112:	07ff      	lsls	r7, r7, #31
  408114:	4403      	add	r3, r0
  408116:	d407      	bmi.n	408128 <_free_r+0x100>
  408118:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40811c:	1aa4      	subs	r4, r4, r2
  40811e:	4413      	add	r3, r2
  408120:	68a0      	ldr	r0, [r4, #8]
  408122:	68e2      	ldr	r2, [r4, #12]
  408124:	60c2      	str	r2, [r0, #12]
  408126:	6090      	str	r0, [r2, #8]
  408128:	4a30      	ldr	r2, [pc, #192]	; (4081ec <_free_r+0x1c4>)
  40812a:	6812      	ldr	r2, [r2, #0]
  40812c:	f043 0001 	orr.w	r0, r3, #1
  408130:	4293      	cmp	r3, r2
  408132:	6060      	str	r0, [r4, #4]
  408134:	608c      	str	r4, [r1, #8]
  408136:	d3b9      	bcc.n	4080ac <_free_r+0x84>
  408138:	4b2d      	ldr	r3, [pc, #180]	; (4081f0 <_free_r+0x1c8>)
  40813a:	4640      	mov	r0, r8
  40813c:	6819      	ldr	r1, [r3, #0]
  40813e:	f7ff ff23 	bl	407f88 <_malloc_trim_r>
  408142:	e7b3      	b.n	4080ac <_free_r+0x84>
  408144:	4610      	mov	r0, r2
  408146:	e7cd      	b.n	4080e4 <_free_r+0xbc>
  408148:	1811      	adds	r1, r2, r0
  40814a:	6849      	ldr	r1, [r1, #4]
  40814c:	07c9      	lsls	r1, r1, #31
  40814e:	d444      	bmi.n	4081da <_free_r+0x1b2>
  408150:	6891      	ldr	r1, [r2, #8]
  408152:	68d2      	ldr	r2, [r2, #12]
  408154:	60ca      	str	r2, [r1, #12]
  408156:	4403      	add	r3, r0
  408158:	f043 0001 	orr.w	r0, r3, #1
  40815c:	6091      	str	r1, [r2, #8]
  40815e:	6060      	str	r0, [r4, #4]
  408160:	50e3      	str	r3, [r4, r3]
  408162:	e7a3      	b.n	4080ac <_free_r+0x84>
  408164:	2a14      	cmp	r2, #20
  408166:	d816      	bhi.n	408196 <_free_r+0x16e>
  408168:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40816c:	00ff      	lsls	r7, r7, #3
  40816e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408172:	e7aa      	b.n	4080ca <_free_r+0xa2>
  408174:	10aa      	asrs	r2, r5, #2
  408176:	2301      	movs	r3, #1
  408178:	684d      	ldr	r5, [r1, #4]
  40817a:	4093      	lsls	r3, r2
  40817c:	432b      	orrs	r3, r5
  40817e:	604b      	str	r3, [r1, #4]
  408180:	4603      	mov	r3, r0
  408182:	e7b0      	b.n	4080e6 <_free_r+0xbe>
  408184:	f043 0201 	orr.w	r2, r3, #1
  408188:	614c      	str	r4, [r1, #20]
  40818a:	610c      	str	r4, [r1, #16]
  40818c:	60e5      	str	r5, [r4, #12]
  40818e:	60a5      	str	r5, [r4, #8]
  408190:	6062      	str	r2, [r4, #4]
  408192:	50e3      	str	r3, [r4, r3]
  408194:	e78a      	b.n	4080ac <_free_r+0x84>
  408196:	2a54      	cmp	r2, #84	; 0x54
  408198:	d806      	bhi.n	4081a8 <_free_r+0x180>
  40819a:	0b1a      	lsrs	r2, r3, #12
  40819c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4081a0:	00ff      	lsls	r7, r7, #3
  4081a2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4081a6:	e790      	b.n	4080ca <_free_r+0xa2>
  4081a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4081ac:	d806      	bhi.n	4081bc <_free_r+0x194>
  4081ae:	0bda      	lsrs	r2, r3, #15
  4081b0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4081b4:	00ff      	lsls	r7, r7, #3
  4081b6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4081ba:	e786      	b.n	4080ca <_free_r+0xa2>
  4081bc:	f240 5054 	movw	r0, #1364	; 0x554
  4081c0:	4282      	cmp	r2, r0
  4081c2:	d806      	bhi.n	4081d2 <_free_r+0x1aa>
  4081c4:	0c9a      	lsrs	r2, r3, #18
  4081c6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4081ca:	00ff      	lsls	r7, r7, #3
  4081cc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4081d0:	e77b      	b.n	4080ca <_free_r+0xa2>
  4081d2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4081d6:	257e      	movs	r5, #126	; 0x7e
  4081d8:	e777      	b.n	4080ca <_free_r+0xa2>
  4081da:	f043 0101 	orr.w	r1, r3, #1
  4081de:	6061      	str	r1, [r4, #4]
  4081e0:	6013      	str	r3, [r2, #0]
  4081e2:	e763      	b.n	4080ac <_free_r+0x84>
  4081e4:	20000648 	.word	0x20000648
  4081e8:	20000650 	.word	0x20000650
  4081ec:	20000a54 	.word	0x20000a54
  4081f0:	200014d4 	.word	0x200014d4

004081f4 <_localeconv_r>:
  4081f4:	4a04      	ldr	r2, [pc, #16]	; (408208 <_localeconv_r+0x14>)
  4081f6:	4b05      	ldr	r3, [pc, #20]	; (40820c <_localeconv_r+0x18>)
  4081f8:	6812      	ldr	r2, [r2, #0]
  4081fa:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4081fc:	2800      	cmp	r0, #0
  4081fe:	bf08      	it	eq
  408200:	4618      	moveq	r0, r3
  408202:	30f0      	adds	r0, #240	; 0xf0
  408204:	4770      	bx	lr
  408206:	bf00      	nop
  408208:	200000ac 	.word	0x200000ac
  40820c:	200004dc 	.word	0x200004dc

00408210 <__retarget_lock_acquire_recursive>:
  408210:	4770      	bx	lr
  408212:	bf00      	nop

00408214 <__retarget_lock_release_recursive>:
  408214:	4770      	bx	lr
  408216:	bf00      	nop

00408218 <_malloc_r>:
  408218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40821c:	f101 060b 	add.w	r6, r1, #11
  408220:	2e16      	cmp	r6, #22
  408222:	b083      	sub	sp, #12
  408224:	4605      	mov	r5, r0
  408226:	f240 809e 	bls.w	408366 <_malloc_r+0x14e>
  40822a:	f036 0607 	bics.w	r6, r6, #7
  40822e:	f100 80bd 	bmi.w	4083ac <_malloc_r+0x194>
  408232:	42b1      	cmp	r1, r6
  408234:	f200 80ba 	bhi.w	4083ac <_malloc_r+0x194>
  408238:	f000 fb6e 	bl	408918 <__malloc_lock>
  40823c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  408240:	f0c0 8293 	bcc.w	40876a <_malloc_r+0x552>
  408244:	0a73      	lsrs	r3, r6, #9
  408246:	f000 80b8 	beq.w	4083ba <_malloc_r+0x1a2>
  40824a:	2b04      	cmp	r3, #4
  40824c:	f200 8179 	bhi.w	408542 <_malloc_r+0x32a>
  408250:	09b3      	lsrs	r3, r6, #6
  408252:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408256:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40825a:	00c3      	lsls	r3, r0, #3
  40825c:	4fbf      	ldr	r7, [pc, #764]	; (40855c <_malloc_r+0x344>)
  40825e:	443b      	add	r3, r7
  408260:	f1a3 0108 	sub.w	r1, r3, #8
  408264:	685c      	ldr	r4, [r3, #4]
  408266:	42a1      	cmp	r1, r4
  408268:	d106      	bne.n	408278 <_malloc_r+0x60>
  40826a:	e00c      	b.n	408286 <_malloc_r+0x6e>
  40826c:	2a00      	cmp	r2, #0
  40826e:	f280 80aa 	bge.w	4083c6 <_malloc_r+0x1ae>
  408272:	68e4      	ldr	r4, [r4, #12]
  408274:	42a1      	cmp	r1, r4
  408276:	d006      	beq.n	408286 <_malloc_r+0x6e>
  408278:	6863      	ldr	r3, [r4, #4]
  40827a:	f023 0303 	bic.w	r3, r3, #3
  40827e:	1b9a      	subs	r2, r3, r6
  408280:	2a0f      	cmp	r2, #15
  408282:	ddf3      	ble.n	40826c <_malloc_r+0x54>
  408284:	4670      	mov	r0, lr
  408286:	693c      	ldr	r4, [r7, #16]
  408288:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 408570 <_malloc_r+0x358>
  40828c:	4574      	cmp	r4, lr
  40828e:	f000 81ab 	beq.w	4085e8 <_malloc_r+0x3d0>
  408292:	6863      	ldr	r3, [r4, #4]
  408294:	f023 0303 	bic.w	r3, r3, #3
  408298:	1b9a      	subs	r2, r3, r6
  40829a:	2a0f      	cmp	r2, #15
  40829c:	f300 8190 	bgt.w	4085c0 <_malloc_r+0x3a8>
  4082a0:	2a00      	cmp	r2, #0
  4082a2:	f8c7 e014 	str.w	lr, [r7, #20]
  4082a6:	f8c7 e010 	str.w	lr, [r7, #16]
  4082aa:	f280 809d 	bge.w	4083e8 <_malloc_r+0x1d0>
  4082ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4082b2:	f080 8161 	bcs.w	408578 <_malloc_r+0x360>
  4082b6:	08db      	lsrs	r3, r3, #3
  4082b8:	f103 0c01 	add.w	ip, r3, #1
  4082bc:	1099      	asrs	r1, r3, #2
  4082be:	687a      	ldr	r2, [r7, #4]
  4082c0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4082c4:	f8c4 8008 	str.w	r8, [r4, #8]
  4082c8:	2301      	movs	r3, #1
  4082ca:	408b      	lsls	r3, r1
  4082cc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4082d0:	4313      	orrs	r3, r2
  4082d2:	3908      	subs	r1, #8
  4082d4:	60e1      	str	r1, [r4, #12]
  4082d6:	607b      	str	r3, [r7, #4]
  4082d8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4082dc:	f8c8 400c 	str.w	r4, [r8, #12]
  4082e0:	1082      	asrs	r2, r0, #2
  4082e2:	2401      	movs	r4, #1
  4082e4:	4094      	lsls	r4, r2
  4082e6:	429c      	cmp	r4, r3
  4082e8:	f200 808b 	bhi.w	408402 <_malloc_r+0x1ea>
  4082ec:	421c      	tst	r4, r3
  4082ee:	d106      	bne.n	4082fe <_malloc_r+0xe6>
  4082f0:	f020 0003 	bic.w	r0, r0, #3
  4082f4:	0064      	lsls	r4, r4, #1
  4082f6:	421c      	tst	r4, r3
  4082f8:	f100 0004 	add.w	r0, r0, #4
  4082fc:	d0fa      	beq.n	4082f4 <_malloc_r+0xdc>
  4082fe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  408302:	46cc      	mov	ip, r9
  408304:	4680      	mov	r8, r0
  408306:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40830a:	459c      	cmp	ip, r3
  40830c:	d107      	bne.n	40831e <_malloc_r+0x106>
  40830e:	e16d      	b.n	4085ec <_malloc_r+0x3d4>
  408310:	2a00      	cmp	r2, #0
  408312:	f280 817b 	bge.w	40860c <_malloc_r+0x3f4>
  408316:	68db      	ldr	r3, [r3, #12]
  408318:	459c      	cmp	ip, r3
  40831a:	f000 8167 	beq.w	4085ec <_malloc_r+0x3d4>
  40831e:	6859      	ldr	r1, [r3, #4]
  408320:	f021 0103 	bic.w	r1, r1, #3
  408324:	1b8a      	subs	r2, r1, r6
  408326:	2a0f      	cmp	r2, #15
  408328:	ddf2      	ble.n	408310 <_malloc_r+0xf8>
  40832a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40832e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  408332:	9300      	str	r3, [sp, #0]
  408334:	199c      	adds	r4, r3, r6
  408336:	4628      	mov	r0, r5
  408338:	f046 0601 	orr.w	r6, r6, #1
  40833c:	f042 0501 	orr.w	r5, r2, #1
  408340:	605e      	str	r6, [r3, #4]
  408342:	f8c8 c00c 	str.w	ip, [r8, #12]
  408346:	f8cc 8008 	str.w	r8, [ip, #8]
  40834a:	617c      	str	r4, [r7, #20]
  40834c:	613c      	str	r4, [r7, #16]
  40834e:	f8c4 e00c 	str.w	lr, [r4, #12]
  408352:	f8c4 e008 	str.w	lr, [r4, #8]
  408356:	6065      	str	r5, [r4, #4]
  408358:	505a      	str	r2, [r3, r1]
  40835a:	f000 fae3 	bl	408924 <__malloc_unlock>
  40835e:	9b00      	ldr	r3, [sp, #0]
  408360:	f103 0408 	add.w	r4, r3, #8
  408364:	e01e      	b.n	4083a4 <_malloc_r+0x18c>
  408366:	2910      	cmp	r1, #16
  408368:	d820      	bhi.n	4083ac <_malloc_r+0x194>
  40836a:	f000 fad5 	bl	408918 <__malloc_lock>
  40836e:	2610      	movs	r6, #16
  408370:	2318      	movs	r3, #24
  408372:	2002      	movs	r0, #2
  408374:	4f79      	ldr	r7, [pc, #484]	; (40855c <_malloc_r+0x344>)
  408376:	443b      	add	r3, r7
  408378:	f1a3 0208 	sub.w	r2, r3, #8
  40837c:	685c      	ldr	r4, [r3, #4]
  40837e:	4294      	cmp	r4, r2
  408380:	f000 813d 	beq.w	4085fe <_malloc_r+0x3e6>
  408384:	6863      	ldr	r3, [r4, #4]
  408386:	68e1      	ldr	r1, [r4, #12]
  408388:	68a6      	ldr	r6, [r4, #8]
  40838a:	f023 0303 	bic.w	r3, r3, #3
  40838e:	4423      	add	r3, r4
  408390:	4628      	mov	r0, r5
  408392:	685a      	ldr	r2, [r3, #4]
  408394:	60f1      	str	r1, [r6, #12]
  408396:	f042 0201 	orr.w	r2, r2, #1
  40839a:	608e      	str	r6, [r1, #8]
  40839c:	605a      	str	r2, [r3, #4]
  40839e:	f000 fac1 	bl	408924 <__malloc_unlock>
  4083a2:	3408      	adds	r4, #8
  4083a4:	4620      	mov	r0, r4
  4083a6:	b003      	add	sp, #12
  4083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083ac:	2400      	movs	r4, #0
  4083ae:	230c      	movs	r3, #12
  4083b0:	4620      	mov	r0, r4
  4083b2:	602b      	str	r3, [r5, #0]
  4083b4:	b003      	add	sp, #12
  4083b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083ba:	2040      	movs	r0, #64	; 0x40
  4083bc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4083c0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4083c4:	e74a      	b.n	40825c <_malloc_r+0x44>
  4083c6:	4423      	add	r3, r4
  4083c8:	68e1      	ldr	r1, [r4, #12]
  4083ca:	685a      	ldr	r2, [r3, #4]
  4083cc:	68a6      	ldr	r6, [r4, #8]
  4083ce:	f042 0201 	orr.w	r2, r2, #1
  4083d2:	60f1      	str	r1, [r6, #12]
  4083d4:	4628      	mov	r0, r5
  4083d6:	608e      	str	r6, [r1, #8]
  4083d8:	605a      	str	r2, [r3, #4]
  4083da:	f000 faa3 	bl	408924 <__malloc_unlock>
  4083de:	3408      	adds	r4, #8
  4083e0:	4620      	mov	r0, r4
  4083e2:	b003      	add	sp, #12
  4083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083e8:	4423      	add	r3, r4
  4083ea:	4628      	mov	r0, r5
  4083ec:	685a      	ldr	r2, [r3, #4]
  4083ee:	f042 0201 	orr.w	r2, r2, #1
  4083f2:	605a      	str	r2, [r3, #4]
  4083f4:	f000 fa96 	bl	408924 <__malloc_unlock>
  4083f8:	3408      	adds	r4, #8
  4083fa:	4620      	mov	r0, r4
  4083fc:	b003      	add	sp, #12
  4083fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408402:	68bc      	ldr	r4, [r7, #8]
  408404:	6863      	ldr	r3, [r4, #4]
  408406:	f023 0803 	bic.w	r8, r3, #3
  40840a:	45b0      	cmp	r8, r6
  40840c:	d304      	bcc.n	408418 <_malloc_r+0x200>
  40840e:	eba8 0306 	sub.w	r3, r8, r6
  408412:	2b0f      	cmp	r3, #15
  408414:	f300 8085 	bgt.w	408522 <_malloc_r+0x30a>
  408418:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408574 <_malloc_r+0x35c>
  40841c:	4b50      	ldr	r3, [pc, #320]	; (408560 <_malloc_r+0x348>)
  40841e:	f8d9 2000 	ldr.w	r2, [r9]
  408422:	681b      	ldr	r3, [r3, #0]
  408424:	3201      	adds	r2, #1
  408426:	4433      	add	r3, r6
  408428:	eb04 0a08 	add.w	sl, r4, r8
  40842c:	f000 8155 	beq.w	4086da <_malloc_r+0x4c2>
  408430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  408434:	330f      	adds	r3, #15
  408436:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40843a:	f02b 0b0f 	bic.w	fp, fp, #15
  40843e:	4659      	mov	r1, fp
  408440:	4628      	mov	r0, r5
  408442:	f000 ff15 	bl	409270 <_sbrk_r>
  408446:	1c41      	adds	r1, r0, #1
  408448:	4602      	mov	r2, r0
  40844a:	f000 80fc 	beq.w	408646 <_malloc_r+0x42e>
  40844e:	4582      	cmp	sl, r0
  408450:	f200 80f7 	bhi.w	408642 <_malloc_r+0x42a>
  408454:	4b43      	ldr	r3, [pc, #268]	; (408564 <_malloc_r+0x34c>)
  408456:	6819      	ldr	r1, [r3, #0]
  408458:	4459      	add	r1, fp
  40845a:	6019      	str	r1, [r3, #0]
  40845c:	f000 814d 	beq.w	4086fa <_malloc_r+0x4e2>
  408460:	f8d9 0000 	ldr.w	r0, [r9]
  408464:	3001      	adds	r0, #1
  408466:	bf1b      	ittet	ne
  408468:	eba2 0a0a 	subne.w	sl, r2, sl
  40846c:	4451      	addne	r1, sl
  40846e:	f8c9 2000 	streq.w	r2, [r9]
  408472:	6019      	strne	r1, [r3, #0]
  408474:	f012 0107 	ands.w	r1, r2, #7
  408478:	f000 8115 	beq.w	4086a6 <_malloc_r+0x48e>
  40847c:	f1c1 0008 	rsb	r0, r1, #8
  408480:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408484:	4402      	add	r2, r0
  408486:	3108      	adds	r1, #8
  408488:	eb02 090b 	add.w	r9, r2, fp
  40848c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  408490:	eba1 0909 	sub.w	r9, r1, r9
  408494:	4649      	mov	r1, r9
  408496:	4628      	mov	r0, r5
  408498:	9301      	str	r3, [sp, #4]
  40849a:	9200      	str	r2, [sp, #0]
  40849c:	f000 fee8 	bl	409270 <_sbrk_r>
  4084a0:	1c43      	adds	r3, r0, #1
  4084a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4084a6:	f000 8143 	beq.w	408730 <_malloc_r+0x518>
  4084aa:	1a80      	subs	r0, r0, r2
  4084ac:	4448      	add	r0, r9
  4084ae:	f040 0001 	orr.w	r0, r0, #1
  4084b2:	6819      	ldr	r1, [r3, #0]
  4084b4:	60ba      	str	r2, [r7, #8]
  4084b6:	4449      	add	r1, r9
  4084b8:	42bc      	cmp	r4, r7
  4084ba:	6050      	str	r0, [r2, #4]
  4084bc:	6019      	str	r1, [r3, #0]
  4084be:	d017      	beq.n	4084f0 <_malloc_r+0x2d8>
  4084c0:	f1b8 0f0f 	cmp.w	r8, #15
  4084c4:	f240 80fb 	bls.w	4086be <_malloc_r+0x4a6>
  4084c8:	6860      	ldr	r0, [r4, #4]
  4084ca:	f1a8 020c 	sub.w	r2, r8, #12
  4084ce:	f022 0207 	bic.w	r2, r2, #7
  4084d2:	eb04 0e02 	add.w	lr, r4, r2
  4084d6:	f000 0001 	and.w	r0, r0, #1
  4084da:	f04f 0c05 	mov.w	ip, #5
  4084de:	4310      	orrs	r0, r2
  4084e0:	2a0f      	cmp	r2, #15
  4084e2:	6060      	str	r0, [r4, #4]
  4084e4:	f8ce c004 	str.w	ip, [lr, #4]
  4084e8:	f8ce c008 	str.w	ip, [lr, #8]
  4084ec:	f200 8117 	bhi.w	40871e <_malloc_r+0x506>
  4084f0:	4b1d      	ldr	r3, [pc, #116]	; (408568 <_malloc_r+0x350>)
  4084f2:	68bc      	ldr	r4, [r7, #8]
  4084f4:	681a      	ldr	r2, [r3, #0]
  4084f6:	4291      	cmp	r1, r2
  4084f8:	bf88      	it	hi
  4084fa:	6019      	strhi	r1, [r3, #0]
  4084fc:	4b1b      	ldr	r3, [pc, #108]	; (40856c <_malloc_r+0x354>)
  4084fe:	681a      	ldr	r2, [r3, #0]
  408500:	4291      	cmp	r1, r2
  408502:	6862      	ldr	r2, [r4, #4]
  408504:	bf88      	it	hi
  408506:	6019      	strhi	r1, [r3, #0]
  408508:	f022 0203 	bic.w	r2, r2, #3
  40850c:	4296      	cmp	r6, r2
  40850e:	eba2 0306 	sub.w	r3, r2, r6
  408512:	d801      	bhi.n	408518 <_malloc_r+0x300>
  408514:	2b0f      	cmp	r3, #15
  408516:	dc04      	bgt.n	408522 <_malloc_r+0x30a>
  408518:	4628      	mov	r0, r5
  40851a:	f000 fa03 	bl	408924 <__malloc_unlock>
  40851e:	2400      	movs	r4, #0
  408520:	e740      	b.n	4083a4 <_malloc_r+0x18c>
  408522:	19a2      	adds	r2, r4, r6
  408524:	f043 0301 	orr.w	r3, r3, #1
  408528:	f046 0601 	orr.w	r6, r6, #1
  40852c:	6066      	str	r6, [r4, #4]
  40852e:	4628      	mov	r0, r5
  408530:	60ba      	str	r2, [r7, #8]
  408532:	6053      	str	r3, [r2, #4]
  408534:	f000 f9f6 	bl	408924 <__malloc_unlock>
  408538:	3408      	adds	r4, #8
  40853a:	4620      	mov	r0, r4
  40853c:	b003      	add	sp, #12
  40853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408542:	2b14      	cmp	r3, #20
  408544:	d971      	bls.n	40862a <_malloc_r+0x412>
  408546:	2b54      	cmp	r3, #84	; 0x54
  408548:	f200 80a3 	bhi.w	408692 <_malloc_r+0x47a>
  40854c:	0b33      	lsrs	r3, r6, #12
  40854e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  408552:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  408556:	00c3      	lsls	r3, r0, #3
  408558:	e680      	b.n	40825c <_malloc_r+0x44>
  40855a:	bf00      	nop
  40855c:	20000648 	.word	0x20000648
  408560:	200014d4 	.word	0x200014d4
  408564:	200014a4 	.word	0x200014a4
  408568:	200014cc 	.word	0x200014cc
  40856c:	200014d0 	.word	0x200014d0
  408570:	20000650 	.word	0x20000650
  408574:	20000a50 	.word	0x20000a50
  408578:	0a5a      	lsrs	r2, r3, #9
  40857a:	2a04      	cmp	r2, #4
  40857c:	d95b      	bls.n	408636 <_malloc_r+0x41e>
  40857e:	2a14      	cmp	r2, #20
  408580:	f200 80ae 	bhi.w	4086e0 <_malloc_r+0x4c8>
  408584:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  408588:	00c9      	lsls	r1, r1, #3
  40858a:	325b      	adds	r2, #91	; 0x5b
  40858c:	eb07 0c01 	add.w	ip, r7, r1
  408590:	5879      	ldr	r1, [r7, r1]
  408592:	f1ac 0c08 	sub.w	ip, ip, #8
  408596:	458c      	cmp	ip, r1
  408598:	f000 8088 	beq.w	4086ac <_malloc_r+0x494>
  40859c:	684a      	ldr	r2, [r1, #4]
  40859e:	f022 0203 	bic.w	r2, r2, #3
  4085a2:	4293      	cmp	r3, r2
  4085a4:	d273      	bcs.n	40868e <_malloc_r+0x476>
  4085a6:	6889      	ldr	r1, [r1, #8]
  4085a8:	458c      	cmp	ip, r1
  4085aa:	d1f7      	bne.n	40859c <_malloc_r+0x384>
  4085ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4085b0:	687b      	ldr	r3, [r7, #4]
  4085b2:	60e2      	str	r2, [r4, #12]
  4085b4:	f8c4 c008 	str.w	ip, [r4, #8]
  4085b8:	6094      	str	r4, [r2, #8]
  4085ba:	f8cc 400c 	str.w	r4, [ip, #12]
  4085be:	e68f      	b.n	4082e0 <_malloc_r+0xc8>
  4085c0:	19a1      	adds	r1, r4, r6
  4085c2:	f046 0c01 	orr.w	ip, r6, #1
  4085c6:	f042 0601 	orr.w	r6, r2, #1
  4085ca:	f8c4 c004 	str.w	ip, [r4, #4]
  4085ce:	4628      	mov	r0, r5
  4085d0:	6179      	str	r1, [r7, #20]
  4085d2:	6139      	str	r1, [r7, #16]
  4085d4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4085d8:	f8c1 e008 	str.w	lr, [r1, #8]
  4085dc:	604e      	str	r6, [r1, #4]
  4085de:	50e2      	str	r2, [r4, r3]
  4085e0:	f000 f9a0 	bl	408924 <__malloc_unlock>
  4085e4:	3408      	adds	r4, #8
  4085e6:	e6dd      	b.n	4083a4 <_malloc_r+0x18c>
  4085e8:	687b      	ldr	r3, [r7, #4]
  4085ea:	e679      	b.n	4082e0 <_malloc_r+0xc8>
  4085ec:	f108 0801 	add.w	r8, r8, #1
  4085f0:	f018 0f03 	tst.w	r8, #3
  4085f4:	f10c 0c08 	add.w	ip, ip, #8
  4085f8:	f47f ae85 	bne.w	408306 <_malloc_r+0xee>
  4085fc:	e02d      	b.n	40865a <_malloc_r+0x442>
  4085fe:	68dc      	ldr	r4, [r3, #12]
  408600:	42a3      	cmp	r3, r4
  408602:	bf08      	it	eq
  408604:	3002      	addeq	r0, #2
  408606:	f43f ae3e 	beq.w	408286 <_malloc_r+0x6e>
  40860a:	e6bb      	b.n	408384 <_malloc_r+0x16c>
  40860c:	4419      	add	r1, r3
  40860e:	461c      	mov	r4, r3
  408610:	684a      	ldr	r2, [r1, #4]
  408612:	68db      	ldr	r3, [r3, #12]
  408614:	f854 6f08 	ldr.w	r6, [r4, #8]!
  408618:	f042 0201 	orr.w	r2, r2, #1
  40861c:	604a      	str	r2, [r1, #4]
  40861e:	4628      	mov	r0, r5
  408620:	60f3      	str	r3, [r6, #12]
  408622:	609e      	str	r6, [r3, #8]
  408624:	f000 f97e 	bl	408924 <__malloc_unlock>
  408628:	e6bc      	b.n	4083a4 <_malloc_r+0x18c>
  40862a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40862e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  408632:	00c3      	lsls	r3, r0, #3
  408634:	e612      	b.n	40825c <_malloc_r+0x44>
  408636:	099a      	lsrs	r2, r3, #6
  408638:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40863c:	00c9      	lsls	r1, r1, #3
  40863e:	3238      	adds	r2, #56	; 0x38
  408640:	e7a4      	b.n	40858c <_malloc_r+0x374>
  408642:	42bc      	cmp	r4, r7
  408644:	d054      	beq.n	4086f0 <_malloc_r+0x4d8>
  408646:	68bc      	ldr	r4, [r7, #8]
  408648:	6862      	ldr	r2, [r4, #4]
  40864a:	f022 0203 	bic.w	r2, r2, #3
  40864e:	e75d      	b.n	40850c <_malloc_r+0x2f4>
  408650:	f859 3908 	ldr.w	r3, [r9], #-8
  408654:	4599      	cmp	r9, r3
  408656:	f040 8086 	bne.w	408766 <_malloc_r+0x54e>
  40865a:	f010 0f03 	tst.w	r0, #3
  40865e:	f100 30ff 	add.w	r0, r0, #4294967295
  408662:	d1f5      	bne.n	408650 <_malloc_r+0x438>
  408664:	687b      	ldr	r3, [r7, #4]
  408666:	ea23 0304 	bic.w	r3, r3, r4
  40866a:	607b      	str	r3, [r7, #4]
  40866c:	0064      	lsls	r4, r4, #1
  40866e:	429c      	cmp	r4, r3
  408670:	f63f aec7 	bhi.w	408402 <_malloc_r+0x1ea>
  408674:	2c00      	cmp	r4, #0
  408676:	f43f aec4 	beq.w	408402 <_malloc_r+0x1ea>
  40867a:	421c      	tst	r4, r3
  40867c:	4640      	mov	r0, r8
  40867e:	f47f ae3e 	bne.w	4082fe <_malloc_r+0xe6>
  408682:	0064      	lsls	r4, r4, #1
  408684:	421c      	tst	r4, r3
  408686:	f100 0004 	add.w	r0, r0, #4
  40868a:	d0fa      	beq.n	408682 <_malloc_r+0x46a>
  40868c:	e637      	b.n	4082fe <_malloc_r+0xe6>
  40868e:	468c      	mov	ip, r1
  408690:	e78c      	b.n	4085ac <_malloc_r+0x394>
  408692:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408696:	d815      	bhi.n	4086c4 <_malloc_r+0x4ac>
  408698:	0bf3      	lsrs	r3, r6, #15
  40869a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40869e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4086a2:	00c3      	lsls	r3, r0, #3
  4086a4:	e5da      	b.n	40825c <_malloc_r+0x44>
  4086a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4086aa:	e6ed      	b.n	408488 <_malloc_r+0x270>
  4086ac:	687b      	ldr	r3, [r7, #4]
  4086ae:	1092      	asrs	r2, r2, #2
  4086b0:	2101      	movs	r1, #1
  4086b2:	fa01 f202 	lsl.w	r2, r1, r2
  4086b6:	4313      	orrs	r3, r2
  4086b8:	607b      	str	r3, [r7, #4]
  4086ba:	4662      	mov	r2, ip
  4086bc:	e779      	b.n	4085b2 <_malloc_r+0x39a>
  4086be:	2301      	movs	r3, #1
  4086c0:	6053      	str	r3, [r2, #4]
  4086c2:	e729      	b.n	408518 <_malloc_r+0x300>
  4086c4:	f240 5254 	movw	r2, #1364	; 0x554
  4086c8:	4293      	cmp	r3, r2
  4086ca:	d822      	bhi.n	408712 <_malloc_r+0x4fa>
  4086cc:	0cb3      	lsrs	r3, r6, #18
  4086ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4086d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4086d6:	00c3      	lsls	r3, r0, #3
  4086d8:	e5c0      	b.n	40825c <_malloc_r+0x44>
  4086da:	f103 0b10 	add.w	fp, r3, #16
  4086de:	e6ae      	b.n	40843e <_malloc_r+0x226>
  4086e0:	2a54      	cmp	r2, #84	; 0x54
  4086e2:	d829      	bhi.n	408738 <_malloc_r+0x520>
  4086e4:	0b1a      	lsrs	r2, r3, #12
  4086e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4086ea:	00c9      	lsls	r1, r1, #3
  4086ec:	326e      	adds	r2, #110	; 0x6e
  4086ee:	e74d      	b.n	40858c <_malloc_r+0x374>
  4086f0:	4b20      	ldr	r3, [pc, #128]	; (408774 <_malloc_r+0x55c>)
  4086f2:	6819      	ldr	r1, [r3, #0]
  4086f4:	4459      	add	r1, fp
  4086f6:	6019      	str	r1, [r3, #0]
  4086f8:	e6b2      	b.n	408460 <_malloc_r+0x248>
  4086fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4086fe:	2800      	cmp	r0, #0
  408700:	f47f aeae 	bne.w	408460 <_malloc_r+0x248>
  408704:	eb08 030b 	add.w	r3, r8, fp
  408708:	68ba      	ldr	r2, [r7, #8]
  40870a:	f043 0301 	orr.w	r3, r3, #1
  40870e:	6053      	str	r3, [r2, #4]
  408710:	e6ee      	b.n	4084f0 <_malloc_r+0x2d8>
  408712:	207f      	movs	r0, #127	; 0x7f
  408714:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  408718:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40871c:	e59e      	b.n	40825c <_malloc_r+0x44>
  40871e:	f104 0108 	add.w	r1, r4, #8
  408722:	4628      	mov	r0, r5
  408724:	9300      	str	r3, [sp, #0]
  408726:	f7ff fc7f 	bl	408028 <_free_r>
  40872a:	9b00      	ldr	r3, [sp, #0]
  40872c:	6819      	ldr	r1, [r3, #0]
  40872e:	e6df      	b.n	4084f0 <_malloc_r+0x2d8>
  408730:	2001      	movs	r0, #1
  408732:	f04f 0900 	mov.w	r9, #0
  408736:	e6bc      	b.n	4084b2 <_malloc_r+0x29a>
  408738:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40873c:	d805      	bhi.n	40874a <_malloc_r+0x532>
  40873e:	0bda      	lsrs	r2, r3, #15
  408740:	f102 0178 	add.w	r1, r2, #120	; 0x78
  408744:	00c9      	lsls	r1, r1, #3
  408746:	3277      	adds	r2, #119	; 0x77
  408748:	e720      	b.n	40858c <_malloc_r+0x374>
  40874a:	f240 5154 	movw	r1, #1364	; 0x554
  40874e:	428a      	cmp	r2, r1
  408750:	d805      	bhi.n	40875e <_malloc_r+0x546>
  408752:	0c9a      	lsrs	r2, r3, #18
  408754:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408758:	00c9      	lsls	r1, r1, #3
  40875a:	327c      	adds	r2, #124	; 0x7c
  40875c:	e716      	b.n	40858c <_malloc_r+0x374>
  40875e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  408762:	227e      	movs	r2, #126	; 0x7e
  408764:	e712      	b.n	40858c <_malloc_r+0x374>
  408766:	687b      	ldr	r3, [r7, #4]
  408768:	e780      	b.n	40866c <_malloc_r+0x454>
  40876a:	08f0      	lsrs	r0, r6, #3
  40876c:	f106 0308 	add.w	r3, r6, #8
  408770:	e600      	b.n	408374 <_malloc_r+0x15c>
  408772:	bf00      	nop
  408774:	200014a4 	.word	0x200014a4

00408778 <__ascii_mbtowc>:
  408778:	b082      	sub	sp, #8
  40877a:	b149      	cbz	r1, 408790 <__ascii_mbtowc+0x18>
  40877c:	b15a      	cbz	r2, 408796 <__ascii_mbtowc+0x1e>
  40877e:	b16b      	cbz	r3, 40879c <__ascii_mbtowc+0x24>
  408780:	7813      	ldrb	r3, [r2, #0]
  408782:	600b      	str	r3, [r1, #0]
  408784:	7812      	ldrb	r2, [r2, #0]
  408786:	1c10      	adds	r0, r2, #0
  408788:	bf18      	it	ne
  40878a:	2001      	movne	r0, #1
  40878c:	b002      	add	sp, #8
  40878e:	4770      	bx	lr
  408790:	a901      	add	r1, sp, #4
  408792:	2a00      	cmp	r2, #0
  408794:	d1f3      	bne.n	40877e <__ascii_mbtowc+0x6>
  408796:	4610      	mov	r0, r2
  408798:	b002      	add	sp, #8
  40879a:	4770      	bx	lr
  40879c:	f06f 0001 	mvn.w	r0, #1
  4087a0:	e7f4      	b.n	40878c <__ascii_mbtowc+0x14>
  4087a2:	bf00      	nop
	...

004087b0 <memchr>:
  4087b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4087b4:	2a10      	cmp	r2, #16
  4087b6:	db2b      	blt.n	408810 <memchr+0x60>
  4087b8:	f010 0f07 	tst.w	r0, #7
  4087bc:	d008      	beq.n	4087d0 <memchr+0x20>
  4087be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4087c2:	3a01      	subs	r2, #1
  4087c4:	428b      	cmp	r3, r1
  4087c6:	d02d      	beq.n	408824 <memchr+0x74>
  4087c8:	f010 0f07 	tst.w	r0, #7
  4087cc:	b342      	cbz	r2, 408820 <memchr+0x70>
  4087ce:	d1f6      	bne.n	4087be <memchr+0xe>
  4087d0:	b4f0      	push	{r4, r5, r6, r7}
  4087d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4087d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4087da:	f022 0407 	bic.w	r4, r2, #7
  4087de:	f07f 0700 	mvns.w	r7, #0
  4087e2:	2300      	movs	r3, #0
  4087e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4087e8:	3c08      	subs	r4, #8
  4087ea:	ea85 0501 	eor.w	r5, r5, r1
  4087ee:	ea86 0601 	eor.w	r6, r6, r1
  4087f2:	fa85 f547 	uadd8	r5, r5, r7
  4087f6:	faa3 f587 	sel	r5, r3, r7
  4087fa:	fa86 f647 	uadd8	r6, r6, r7
  4087fe:	faa5 f687 	sel	r6, r5, r7
  408802:	b98e      	cbnz	r6, 408828 <memchr+0x78>
  408804:	d1ee      	bne.n	4087e4 <memchr+0x34>
  408806:	bcf0      	pop	{r4, r5, r6, r7}
  408808:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40880c:	f002 0207 	and.w	r2, r2, #7
  408810:	b132      	cbz	r2, 408820 <memchr+0x70>
  408812:	f810 3b01 	ldrb.w	r3, [r0], #1
  408816:	3a01      	subs	r2, #1
  408818:	ea83 0301 	eor.w	r3, r3, r1
  40881c:	b113      	cbz	r3, 408824 <memchr+0x74>
  40881e:	d1f8      	bne.n	408812 <memchr+0x62>
  408820:	2000      	movs	r0, #0
  408822:	4770      	bx	lr
  408824:	3801      	subs	r0, #1
  408826:	4770      	bx	lr
  408828:	2d00      	cmp	r5, #0
  40882a:	bf06      	itte	eq
  40882c:	4635      	moveq	r5, r6
  40882e:	3803      	subeq	r0, #3
  408830:	3807      	subne	r0, #7
  408832:	f015 0f01 	tst.w	r5, #1
  408836:	d107      	bne.n	408848 <memchr+0x98>
  408838:	3001      	adds	r0, #1
  40883a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40883e:	bf02      	ittt	eq
  408840:	3001      	addeq	r0, #1
  408842:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408846:	3001      	addeq	r0, #1
  408848:	bcf0      	pop	{r4, r5, r6, r7}
  40884a:	3801      	subs	r0, #1
  40884c:	4770      	bx	lr
  40884e:	bf00      	nop

00408850 <memmove>:
  408850:	4288      	cmp	r0, r1
  408852:	b5f0      	push	{r4, r5, r6, r7, lr}
  408854:	d90d      	bls.n	408872 <memmove+0x22>
  408856:	188b      	adds	r3, r1, r2
  408858:	4298      	cmp	r0, r3
  40885a:	d20a      	bcs.n	408872 <memmove+0x22>
  40885c:	1884      	adds	r4, r0, r2
  40885e:	2a00      	cmp	r2, #0
  408860:	d051      	beq.n	408906 <memmove+0xb6>
  408862:	4622      	mov	r2, r4
  408864:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408868:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40886c:	4299      	cmp	r1, r3
  40886e:	d1f9      	bne.n	408864 <memmove+0x14>
  408870:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408872:	2a0f      	cmp	r2, #15
  408874:	d948      	bls.n	408908 <memmove+0xb8>
  408876:	ea41 0300 	orr.w	r3, r1, r0
  40887a:	079b      	lsls	r3, r3, #30
  40887c:	d146      	bne.n	40890c <memmove+0xbc>
  40887e:	f100 0410 	add.w	r4, r0, #16
  408882:	f101 0310 	add.w	r3, r1, #16
  408886:	4615      	mov	r5, r2
  408888:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40888c:	f844 6c10 	str.w	r6, [r4, #-16]
  408890:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408894:	f844 6c0c 	str.w	r6, [r4, #-12]
  408898:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40889c:	f844 6c08 	str.w	r6, [r4, #-8]
  4088a0:	3d10      	subs	r5, #16
  4088a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4088a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4088aa:	2d0f      	cmp	r5, #15
  4088ac:	f103 0310 	add.w	r3, r3, #16
  4088b0:	f104 0410 	add.w	r4, r4, #16
  4088b4:	d8e8      	bhi.n	408888 <memmove+0x38>
  4088b6:	f1a2 0310 	sub.w	r3, r2, #16
  4088ba:	f023 030f 	bic.w	r3, r3, #15
  4088be:	f002 0e0f 	and.w	lr, r2, #15
  4088c2:	3310      	adds	r3, #16
  4088c4:	f1be 0f03 	cmp.w	lr, #3
  4088c8:	4419      	add	r1, r3
  4088ca:	4403      	add	r3, r0
  4088cc:	d921      	bls.n	408912 <memmove+0xc2>
  4088ce:	1f1e      	subs	r6, r3, #4
  4088d0:	460d      	mov	r5, r1
  4088d2:	4674      	mov	r4, lr
  4088d4:	3c04      	subs	r4, #4
  4088d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4088da:	f846 7f04 	str.w	r7, [r6, #4]!
  4088de:	2c03      	cmp	r4, #3
  4088e0:	d8f8      	bhi.n	4088d4 <memmove+0x84>
  4088e2:	f1ae 0404 	sub.w	r4, lr, #4
  4088e6:	f024 0403 	bic.w	r4, r4, #3
  4088ea:	3404      	adds	r4, #4
  4088ec:	4421      	add	r1, r4
  4088ee:	4423      	add	r3, r4
  4088f0:	f002 0203 	and.w	r2, r2, #3
  4088f4:	b162      	cbz	r2, 408910 <memmove+0xc0>
  4088f6:	3b01      	subs	r3, #1
  4088f8:	440a      	add	r2, r1
  4088fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4088fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  408902:	428a      	cmp	r2, r1
  408904:	d1f9      	bne.n	4088fa <memmove+0xaa>
  408906:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408908:	4603      	mov	r3, r0
  40890a:	e7f3      	b.n	4088f4 <memmove+0xa4>
  40890c:	4603      	mov	r3, r0
  40890e:	e7f2      	b.n	4088f6 <memmove+0xa6>
  408910:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408912:	4672      	mov	r2, lr
  408914:	e7ee      	b.n	4088f4 <memmove+0xa4>
  408916:	bf00      	nop

00408918 <__malloc_lock>:
  408918:	4801      	ldr	r0, [pc, #4]	; (408920 <__malloc_lock+0x8>)
  40891a:	f7ff bc79 	b.w	408210 <__retarget_lock_acquire_recursive>
  40891e:	bf00      	nop
  408920:	200041bc 	.word	0x200041bc

00408924 <__malloc_unlock>:
  408924:	4801      	ldr	r0, [pc, #4]	; (40892c <__malloc_unlock+0x8>)
  408926:	f7ff bc75 	b.w	408214 <__retarget_lock_release_recursive>
  40892a:	bf00      	nop
  40892c:	200041bc 	.word	0x200041bc

00408930 <_Balloc>:
  408930:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408932:	b570      	push	{r4, r5, r6, lr}
  408934:	4605      	mov	r5, r0
  408936:	460c      	mov	r4, r1
  408938:	b14b      	cbz	r3, 40894e <_Balloc+0x1e>
  40893a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40893e:	b180      	cbz	r0, 408962 <_Balloc+0x32>
  408940:	6802      	ldr	r2, [r0, #0]
  408942:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  408946:	2300      	movs	r3, #0
  408948:	6103      	str	r3, [r0, #16]
  40894a:	60c3      	str	r3, [r0, #12]
  40894c:	bd70      	pop	{r4, r5, r6, pc}
  40894e:	2221      	movs	r2, #33	; 0x21
  408950:	2104      	movs	r1, #4
  408952:	f000 fd8d 	bl	409470 <_calloc_r>
  408956:	64e8      	str	r0, [r5, #76]	; 0x4c
  408958:	4603      	mov	r3, r0
  40895a:	2800      	cmp	r0, #0
  40895c:	d1ed      	bne.n	40893a <_Balloc+0xa>
  40895e:	2000      	movs	r0, #0
  408960:	bd70      	pop	{r4, r5, r6, pc}
  408962:	2101      	movs	r1, #1
  408964:	fa01 f604 	lsl.w	r6, r1, r4
  408968:	1d72      	adds	r2, r6, #5
  40896a:	4628      	mov	r0, r5
  40896c:	0092      	lsls	r2, r2, #2
  40896e:	f000 fd7f 	bl	409470 <_calloc_r>
  408972:	2800      	cmp	r0, #0
  408974:	d0f3      	beq.n	40895e <_Balloc+0x2e>
  408976:	6044      	str	r4, [r0, #4]
  408978:	6086      	str	r6, [r0, #8]
  40897a:	e7e4      	b.n	408946 <_Balloc+0x16>

0040897c <_Bfree>:
  40897c:	b131      	cbz	r1, 40898c <_Bfree+0x10>
  40897e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  408980:	684a      	ldr	r2, [r1, #4]
  408982:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  408986:	6008      	str	r0, [r1, #0]
  408988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40898c:	4770      	bx	lr
  40898e:	bf00      	nop

00408990 <__multadd>:
  408990:	b5f0      	push	{r4, r5, r6, r7, lr}
  408992:	690c      	ldr	r4, [r1, #16]
  408994:	b083      	sub	sp, #12
  408996:	460d      	mov	r5, r1
  408998:	4606      	mov	r6, r0
  40899a:	f101 0e14 	add.w	lr, r1, #20
  40899e:	2700      	movs	r7, #0
  4089a0:	f8de 0000 	ldr.w	r0, [lr]
  4089a4:	b281      	uxth	r1, r0
  4089a6:	fb02 3301 	mla	r3, r2, r1, r3
  4089aa:	0c01      	lsrs	r1, r0, #16
  4089ac:	0c18      	lsrs	r0, r3, #16
  4089ae:	fb02 0101 	mla	r1, r2, r1, r0
  4089b2:	b29b      	uxth	r3, r3
  4089b4:	3701      	adds	r7, #1
  4089b6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4089ba:	42bc      	cmp	r4, r7
  4089bc:	f84e 3b04 	str.w	r3, [lr], #4
  4089c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4089c4:	dcec      	bgt.n	4089a0 <__multadd+0x10>
  4089c6:	b13b      	cbz	r3, 4089d8 <__multadd+0x48>
  4089c8:	68aa      	ldr	r2, [r5, #8]
  4089ca:	4294      	cmp	r4, r2
  4089cc:	da07      	bge.n	4089de <__multadd+0x4e>
  4089ce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4089d2:	3401      	adds	r4, #1
  4089d4:	6153      	str	r3, [r2, #20]
  4089d6:	612c      	str	r4, [r5, #16]
  4089d8:	4628      	mov	r0, r5
  4089da:	b003      	add	sp, #12
  4089dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4089de:	6869      	ldr	r1, [r5, #4]
  4089e0:	9301      	str	r3, [sp, #4]
  4089e2:	3101      	adds	r1, #1
  4089e4:	4630      	mov	r0, r6
  4089e6:	f7ff ffa3 	bl	408930 <_Balloc>
  4089ea:	692a      	ldr	r2, [r5, #16]
  4089ec:	3202      	adds	r2, #2
  4089ee:	f105 010c 	add.w	r1, r5, #12
  4089f2:	4607      	mov	r7, r0
  4089f4:	0092      	lsls	r2, r2, #2
  4089f6:	300c      	adds	r0, #12
  4089f8:	f7fc ff20 	bl	40583c <memcpy>
  4089fc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4089fe:	6869      	ldr	r1, [r5, #4]
  408a00:	9b01      	ldr	r3, [sp, #4]
  408a02:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  408a06:	6028      	str	r0, [r5, #0]
  408a08:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408a0c:	463d      	mov	r5, r7
  408a0e:	e7de      	b.n	4089ce <__multadd+0x3e>

00408a10 <__hi0bits>:
  408a10:	0c02      	lsrs	r2, r0, #16
  408a12:	0412      	lsls	r2, r2, #16
  408a14:	4603      	mov	r3, r0
  408a16:	b9b2      	cbnz	r2, 408a46 <__hi0bits+0x36>
  408a18:	0403      	lsls	r3, r0, #16
  408a1a:	2010      	movs	r0, #16
  408a1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408a20:	bf04      	itt	eq
  408a22:	021b      	lsleq	r3, r3, #8
  408a24:	3008      	addeq	r0, #8
  408a26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408a2a:	bf04      	itt	eq
  408a2c:	011b      	lsleq	r3, r3, #4
  408a2e:	3004      	addeq	r0, #4
  408a30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  408a34:	bf04      	itt	eq
  408a36:	009b      	lsleq	r3, r3, #2
  408a38:	3002      	addeq	r0, #2
  408a3a:	2b00      	cmp	r3, #0
  408a3c:	db02      	blt.n	408a44 <__hi0bits+0x34>
  408a3e:	005b      	lsls	r3, r3, #1
  408a40:	d403      	bmi.n	408a4a <__hi0bits+0x3a>
  408a42:	2020      	movs	r0, #32
  408a44:	4770      	bx	lr
  408a46:	2000      	movs	r0, #0
  408a48:	e7e8      	b.n	408a1c <__hi0bits+0xc>
  408a4a:	3001      	adds	r0, #1
  408a4c:	4770      	bx	lr
  408a4e:	bf00      	nop

00408a50 <__lo0bits>:
  408a50:	6803      	ldr	r3, [r0, #0]
  408a52:	f013 0207 	ands.w	r2, r3, #7
  408a56:	4601      	mov	r1, r0
  408a58:	d007      	beq.n	408a6a <__lo0bits+0x1a>
  408a5a:	07da      	lsls	r2, r3, #31
  408a5c:	d421      	bmi.n	408aa2 <__lo0bits+0x52>
  408a5e:	0798      	lsls	r0, r3, #30
  408a60:	d421      	bmi.n	408aa6 <__lo0bits+0x56>
  408a62:	089b      	lsrs	r3, r3, #2
  408a64:	600b      	str	r3, [r1, #0]
  408a66:	2002      	movs	r0, #2
  408a68:	4770      	bx	lr
  408a6a:	b298      	uxth	r0, r3
  408a6c:	b198      	cbz	r0, 408a96 <__lo0bits+0x46>
  408a6e:	4610      	mov	r0, r2
  408a70:	f013 0fff 	tst.w	r3, #255	; 0xff
  408a74:	bf04      	itt	eq
  408a76:	0a1b      	lsreq	r3, r3, #8
  408a78:	3008      	addeq	r0, #8
  408a7a:	071a      	lsls	r2, r3, #28
  408a7c:	bf04      	itt	eq
  408a7e:	091b      	lsreq	r3, r3, #4
  408a80:	3004      	addeq	r0, #4
  408a82:	079a      	lsls	r2, r3, #30
  408a84:	bf04      	itt	eq
  408a86:	089b      	lsreq	r3, r3, #2
  408a88:	3002      	addeq	r0, #2
  408a8a:	07da      	lsls	r2, r3, #31
  408a8c:	d407      	bmi.n	408a9e <__lo0bits+0x4e>
  408a8e:	085b      	lsrs	r3, r3, #1
  408a90:	d104      	bne.n	408a9c <__lo0bits+0x4c>
  408a92:	2020      	movs	r0, #32
  408a94:	4770      	bx	lr
  408a96:	0c1b      	lsrs	r3, r3, #16
  408a98:	2010      	movs	r0, #16
  408a9a:	e7e9      	b.n	408a70 <__lo0bits+0x20>
  408a9c:	3001      	adds	r0, #1
  408a9e:	600b      	str	r3, [r1, #0]
  408aa0:	4770      	bx	lr
  408aa2:	2000      	movs	r0, #0
  408aa4:	4770      	bx	lr
  408aa6:	085b      	lsrs	r3, r3, #1
  408aa8:	600b      	str	r3, [r1, #0]
  408aaa:	2001      	movs	r0, #1
  408aac:	4770      	bx	lr
  408aae:	bf00      	nop

00408ab0 <__i2b>:
  408ab0:	b510      	push	{r4, lr}
  408ab2:	460c      	mov	r4, r1
  408ab4:	2101      	movs	r1, #1
  408ab6:	f7ff ff3b 	bl	408930 <_Balloc>
  408aba:	2201      	movs	r2, #1
  408abc:	6144      	str	r4, [r0, #20]
  408abe:	6102      	str	r2, [r0, #16]
  408ac0:	bd10      	pop	{r4, pc}
  408ac2:	bf00      	nop

00408ac4 <__multiply>:
  408ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ac8:	690c      	ldr	r4, [r1, #16]
  408aca:	6915      	ldr	r5, [r2, #16]
  408acc:	42ac      	cmp	r4, r5
  408ace:	b083      	sub	sp, #12
  408ad0:	468b      	mov	fp, r1
  408ad2:	4616      	mov	r6, r2
  408ad4:	da04      	bge.n	408ae0 <__multiply+0x1c>
  408ad6:	4622      	mov	r2, r4
  408ad8:	46b3      	mov	fp, r6
  408ada:	462c      	mov	r4, r5
  408adc:	460e      	mov	r6, r1
  408ade:	4615      	mov	r5, r2
  408ae0:	f8db 3008 	ldr.w	r3, [fp, #8]
  408ae4:	f8db 1004 	ldr.w	r1, [fp, #4]
  408ae8:	eb04 0805 	add.w	r8, r4, r5
  408aec:	4598      	cmp	r8, r3
  408aee:	bfc8      	it	gt
  408af0:	3101      	addgt	r1, #1
  408af2:	f7ff ff1d 	bl	408930 <_Balloc>
  408af6:	f100 0914 	add.w	r9, r0, #20
  408afa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408afe:	45d1      	cmp	r9, sl
  408b00:	9000      	str	r0, [sp, #0]
  408b02:	d205      	bcs.n	408b10 <__multiply+0x4c>
  408b04:	464b      	mov	r3, r9
  408b06:	2100      	movs	r1, #0
  408b08:	f843 1b04 	str.w	r1, [r3], #4
  408b0c:	459a      	cmp	sl, r3
  408b0e:	d8fb      	bhi.n	408b08 <__multiply+0x44>
  408b10:	f106 0c14 	add.w	ip, r6, #20
  408b14:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408b18:	f10b 0b14 	add.w	fp, fp, #20
  408b1c:	459c      	cmp	ip, r3
  408b1e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  408b22:	d24c      	bcs.n	408bbe <__multiply+0xfa>
  408b24:	f8cd a004 	str.w	sl, [sp, #4]
  408b28:	469a      	mov	sl, r3
  408b2a:	f8dc 5000 	ldr.w	r5, [ip]
  408b2e:	b2af      	uxth	r7, r5
  408b30:	b1ef      	cbz	r7, 408b6e <__multiply+0xaa>
  408b32:	2100      	movs	r1, #0
  408b34:	464d      	mov	r5, r9
  408b36:	465e      	mov	r6, fp
  408b38:	460c      	mov	r4, r1
  408b3a:	f856 2b04 	ldr.w	r2, [r6], #4
  408b3e:	6828      	ldr	r0, [r5, #0]
  408b40:	b293      	uxth	r3, r2
  408b42:	b281      	uxth	r1, r0
  408b44:	fb07 1303 	mla	r3, r7, r3, r1
  408b48:	0c12      	lsrs	r2, r2, #16
  408b4a:	0c01      	lsrs	r1, r0, #16
  408b4c:	4423      	add	r3, r4
  408b4e:	fb07 1102 	mla	r1, r7, r2, r1
  408b52:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  408b56:	b29b      	uxth	r3, r3
  408b58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408b5c:	45b6      	cmp	lr, r6
  408b5e:	f845 3b04 	str.w	r3, [r5], #4
  408b62:	ea4f 4411 	mov.w	r4, r1, lsr #16
  408b66:	d8e8      	bhi.n	408b3a <__multiply+0x76>
  408b68:	602c      	str	r4, [r5, #0]
  408b6a:	f8dc 5000 	ldr.w	r5, [ip]
  408b6e:	0c2d      	lsrs	r5, r5, #16
  408b70:	d01d      	beq.n	408bae <__multiply+0xea>
  408b72:	f8d9 3000 	ldr.w	r3, [r9]
  408b76:	4648      	mov	r0, r9
  408b78:	461c      	mov	r4, r3
  408b7a:	4659      	mov	r1, fp
  408b7c:	2200      	movs	r2, #0
  408b7e:	880e      	ldrh	r6, [r1, #0]
  408b80:	0c24      	lsrs	r4, r4, #16
  408b82:	fb05 4406 	mla	r4, r5, r6, r4
  408b86:	4422      	add	r2, r4
  408b88:	b29b      	uxth	r3, r3
  408b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408b8e:	f840 3b04 	str.w	r3, [r0], #4
  408b92:	f851 3b04 	ldr.w	r3, [r1], #4
  408b96:	6804      	ldr	r4, [r0, #0]
  408b98:	0c1b      	lsrs	r3, r3, #16
  408b9a:	b2a6      	uxth	r6, r4
  408b9c:	fb05 6303 	mla	r3, r5, r3, r6
  408ba0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  408ba4:	458e      	cmp	lr, r1
  408ba6:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408baa:	d8e8      	bhi.n	408b7e <__multiply+0xba>
  408bac:	6003      	str	r3, [r0, #0]
  408bae:	f10c 0c04 	add.w	ip, ip, #4
  408bb2:	45e2      	cmp	sl, ip
  408bb4:	f109 0904 	add.w	r9, r9, #4
  408bb8:	d8b7      	bhi.n	408b2a <__multiply+0x66>
  408bba:	f8dd a004 	ldr.w	sl, [sp, #4]
  408bbe:	f1b8 0f00 	cmp.w	r8, #0
  408bc2:	dd0b      	ble.n	408bdc <__multiply+0x118>
  408bc4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408bc8:	f1aa 0a04 	sub.w	sl, sl, #4
  408bcc:	b11b      	cbz	r3, 408bd6 <__multiply+0x112>
  408bce:	e005      	b.n	408bdc <__multiply+0x118>
  408bd0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  408bd4:	b913      	cbnz	r3, 408bdc <__multiply+0x118>
  408bd6:	f1b8 0801 	subs.w	r8, r8, #1
  408bda:	d1f9      	bne.n	408bd0 <__multiply+0x10c>
  408bdc:	9800      	ldr	r0, [sp, #0]
  408bde:	f8c0 8010 	str.w	r8, [r0, #16]
  408be2:	b003      	add	sp, #12
  408be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408be8 <__pow5mult>:
  408be8:	f012 0303 	ands.w	r3, r2, #3
  408bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408bf0:	4614      	mov	r4, r2
  408bf2:	4607      	mov	r7, r0
  408bf4:	d12e      	bne.n	408c54 <__pow5mult+0x6c>
  408bf6:	460d      	mov	r5, r1
  408bf8:	10a4      	asrs	r4, r4, #2
  408bfa:	d01c      	beq.n	408c36 <__pow5mult+0x4e>
  408bfc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408bfe:	b396      	cbz	r6, 408c66 <__pow5mult+0x7e>
  408c00:	07e3      	lsls	r3, r4, #31
  408c02:	f04f 0800 	mov.w	r8, #0
  408c06:	d406      	bmi.n	408c16 <__pow5mult+0x2e>
  408c08:	1064      	asrs	r4, r4, #1
  408c0a:	d014      	beq.n	408c36 <__pow5mult+0x4e>
  408c0c:	6830      	ldr	r0, [r6, #0]
  408c0e:	b1a8      	cbz	r0, 408c3c <__pow5mult+0x54>
  408c10:	4606      	mov	r6, r0
  408c12:	07e3      	lsls	r3, r4, #31
  408c14:	d5f8      	bpl.n	408c08 <__pow5mult+0x20>
  408c16:	4632      	mov	r2, r6
  408c18:	4629      	mov	r1, r5
  408c1a:	4638      	mov	r0, r7
  408c1c:	f7ff ff52 	bl	408ac4 <__multiply>
  408c20:	b1b5      	cbz	r5, 408c50 <__pow5mult+0x68>
  408c22:	686a      	ldr	r2, [r5, #4]
  408c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408c26:	1064      	asrs	r4, r4, #1
  408c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408c2c:	6029      	str	r1, [r5, #0]
  408c2e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  408c32:	4605      	mov	r5, r0
  408c34:	d1ea      	bne.n	408c0c <__pow5mult+0x24>
  408c36:	4628      	mov	r0, r5
  408c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408c3c:	4632      	mov	r2, r6
  408c3e:	4631      	mov	r1, r6
  408c40:	4638      	mov	r0, r7
  408c42:	f7ff ff3f 	bl	408ac4 <__multiply>
  408c46:	6030      	str	r0, [r6, #0]
  408c48:	f8c0 8000 	str.w	r8, [r0]
  408c4c:	4606      	mov	r6, r0
  408c4e:	e7e0      	b.n	408c12 <__pow5mult+0x2a>
  408c50:	4605      	mov	r5, r0
  408c52:	e7d9      	b.n	408c08 <__pow5mult+0x20>
  408c54:	1e5a      	subs	r2, r3, #1
  408c56:	4d0b      	ldr	r5, [pc, #44]	; (408c84 <__pow5mult+0x9c>)
  408c58:	2300      	movs	r3, #0
  408c5a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408c5e:	f7ff fe97 	bl	408990 <__multadd>
  408c62:	4605      	mov	r5, r0
  408c64:	e7c8      	b.n	408bf8 <__pow5mult+0x10>
  408c66:	2101      	movs	r1, #1
  408c68:	4638      	mov	r0, r7
  408c6a:	f7ff fe61 	bl	408930 <_Balloc>
  408c6e:	f240 2171 	movw	r1, #625	; 0x271
  408c72:	2201      	movs	r2, #1
  408c74:	2300      	movs	r3, #0
  408c76:	6141      	str	r1, [r0, #20]
  408c78:	6102      	str	r2, [r0, #16]
  408c7a:	4606      	mov	r6, r0
  408c7c:	64b8      	str	r0, [r7, #72]	; 0x48
  408c7e:	6003      	str	r3, [r0, #0]
  408c80:	e7be      	b.n	408c00 <__pow5mult+0x18>
  408c82:	bf00      	nop
  408c84:	00409cb8 	.word	0x00409cb8

00408c88 <__lshift>:
  408c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408c8c:	4691      	mov	r9, r2
  408c8e:	690a      	ldr	r2, [r1, #16]
  408c90:	688b      	ldr	r3, [r1, #8]
  408c92:	ea4f 1469 	mov.w	r4, r9, asr #5
  408c96:	eb04 0802 	add.w	r8, r4, r2
  408c9a:	f108 0501 	add.w	r5, r8, #1
  408c9e:	429d      	cmp	r5, r3
  408ca0:	460e      	mov	r6, r1
  408ca2:	4607      	mov	r7, r0
  408ca4:	6849      	ldr	r1, [r1, #4]
  408ca6:	dd04      	ble.n	408cb2 <__lshift+0x2a>
  408ca8:	005b      	lsls	r3, r3, #1
  408caa:	429d      	cmp	r5, r3
  408cac:	f101 0101 	add.w	r1, r1, #1
  408cb0:	dcfa      	bgt.n	408ca8 <__lshift+0x20>
  408cb2:	4638      	mov	r0, r7
  408cb4:	f7ff fe3c 	bl	408930 <_Balloc>
  408cb8:	2c00      	cmp	r4, #0
  408cba:	f100 0314 	add.w	r3, r0, #20
  408cbe:	dd06      	ble.n	408cce <__lshift+0x46>
  408cc0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  408cc4:	2100      	movs	r1, #0
  408cc6:	f843 1b04 	str.w	r1, [r3], #4
  408cca:	429a      	cmp	r2, r3
  408ccc:	d1fb      	bne.n	408cc6 <__lshift+0x3e>
  408cce:	6934      	ldr	r4, [r6, #16]
  408cd0:	f106 0114 	add.w	r1, r6, #20
  408cd4:	f019 091f 	ands.w	r9, r9, #31
  408cd8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408cdc:	d01d      	beq.n	408d1a <__lshift+0x92>
  408cde:	f1c9 0c20 	rsb	ip, r9, #32
  408ce2:	2200      	movs	r2, #0
  408ce4:	680c      	ldr	r4, [r1, #0]
  408ce6:	fa04 f409 	lsl.w	r4, r4, r9
  408cea:	4314      	orrs	r4, r2
  408cec:	f843 4b04 	str.w	r4, [r3], #4
  408cf0:	f851 2b04 	ldr.w	r2, [r1], #4
  408cf4:	458e      	cmp	lr, r1
  408cf6:	fa22 f20c 	lsr.w	r2, r2, ip
  408cfa:	d8f3      	bhi.n	408ce4 <__lshift+0x5c>
  408cfc:	601a      	str	r2, [r3, #0]
  408cfe:	b10a      	cbz	r2, 408d04 <__lshift+0x7c>
  408d00:	f108 0502 	add.w	r5, r8, #2
  408d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  408d06:	6872      	ldr	r2, [r6, #4]
  408d08:	3d01      	subs	r5, #1
  408d0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408d0e:	6105      	str	r5, [r0, #16]
  408d10:	6031      	str	r1, [r6, #0]
  408d12:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  408d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408d1a:	3b04      	subs	r3, #4
  408d1c:	f851 2b04 	ldr.w	r2, [r1], #4
  408d20:	f843 2f04 	str.w	r2, [r3, #4]!
  408d24:	458e      	cmp	lr, r1
  408d26:	d8f9      	bhi.n	408d1c <__lshift+0x94>
  408d28:	e7ec      	b.n	408d04 <__lshift+0x7c>
  408d2a:	bf00      	nop

00408d2c <__mcmp>:
  408d2c:	b430      	push	{r4, r5}
  408d2e:	690b      	ldr	r3, [r1, #16]
  408d30:	4605      	mov	r5, r0
  408d32:	6900      	ldr	r0, [r0, #16]
  408d34:	1ac0      	subs	r0, r0, r3
  408d36:	d10f      	bne.n	408d58 <__mcmp+0x2c>
  408d38:	009b      	lsls	r3, r3, #2
  408d3a:	3514      	adds	r5, #20
  408d3c:	3114      	adds	r1, #20
  408d3e:	4419      	add	r1, r3
  408d40:	442b      	add	r3, r5
  408d42:	e001      	b.n	408d48 <__mcmp+0x1c>
  408d44:	429d      	cmp	r5, r3
  408d46:	d207      	bcs.n	408d58 <__mcmp+0x2c>
  408d48:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408d4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408d50:	4294      	cmp	r4, r2
  408d52:	d0f7      	beq.n	408d44 <__mcmp+0x18>
  408d54:	d302      	bcc.n	408d5c <__mcmp+0x30>
  408d56:	2001      	movs	r0, #1
  408d58:	bc30      	pop	{r4, r5}
  408d5a:	4770      	bx	lr
  408d5c:	f04f 30ff 	mov.w	r0, #4294967295
  408d60:	e7fa      	b.n	408d58 <__mcmp+0x2c>
  408d62:	bf00      	nop

00408d64 <__mdiff>:
  408d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408d68:	690f      	ldr	r7, [r1, #16]
  408d6a:	460e      	mov	r6, r1
  408d6c:	6911      	ldr	r1, [r2, #16]
  408d6e:	1a7f      	subs	r7, r7, r1
  408d70:	2f00      	cmp	r7, #0
  408d72:	4690      	mov	r8, r2
  408d74:	d117      	bne.n	408da6 <__mdiff+0x42>
  408d76:	0089      	lsls	r1, r1, #2
  408d78:	f106 0514 	add.w	r5, r6, #20
  408d7c:	f102 0e14 	add.w	lr, r2, #20
  408d80:	186b      	adds	r3, r5, r1
  408d82:	4471      	add	r1, lr
  408d84:	e001      	b.n	408d8a <__mdiff+0x26>
  408d86:	429d      	cmp	r5, r3
  408d88:	d25c      	bcs.n	408e44 <__mdiff+0xe0>
  408d8a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408d8e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  408d92:	42a2      	cmp	r2, r4
  408d94:	d0f7      	beq.n	408d86 <__mdiff+0x22>
  408d96:	d25e      	bcs.n	408e56 <__mdiff+0xf2>
  408d98:	4633      	mov	r3, r6
  408d9a:	462c      	mov	r4, r5
  408d9c:	4646      	mov	r6, r8
  408d9e:	4675      	mov	r5, lr
  408da0:	4698      	mov	r8, r3
  408da2:	2701      	movs	r7, #1
  408da4:	e005      	b.n	408db2 <__mdiff+0x4e>
  408da6:	db58      	blt.n	408e5a <__mdiff+0xf6>
  408da8:	f106 0514 	add.w	r5, r6, #20
  408dac:	f108 0414 	add.w	r4, r8, #20
  408db0:	2700      	movs	r7, #0
  408db2:	6871      	ldr	r1, [r6, #4]
  408db4:	f7ff fdbc 	bl	408930 <_Balloc>
  408db8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408dbc:	6936      	ldr	r6, [r6, #16]
  408dbe:	60c7      	str	r7, [r0, #12]
  408dc0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  408dc4:	46a6      	mov	lr, r4
  408dc6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408dca:	f100 0414 	add.w	r4, r0, #20
  408dce:	2300      	movs	r3, #0
  408dd0:	f85e 1b04 	ldr.w	r1, [lr], #4
  408dd4:	f855 8b04 	ldr.w	r8, [r5], #4
  408dd8:	b28a      	uxth	r2, r1
  408dda:	fa13 f388 	uxtah	r3, r3, r8
  408dde:	0c09      	lsrs	r1, r1, #16
  408de0:	1a9a      	subs	r2, r3, r2
  408de2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  408de6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408dea:	b292      	uxth	r2, r2
  408dec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408df0:	45f4      	cmp	ip, lr
  408df2:	f844 2b04 	str.w	r2, [r4], #4
  408df6:	ea4f 4323 	mov.w	r3, r3, asr #16
  408dfa:	d8e9      	bhi.n	408dd0 <__mdiff+0x6c>
  408dfc:	42af      	cmp	r7, r5
  408dfe:	d917      	bls.n	408e30 <__mdiff+0xcc>
  408e00:	46a4      	mov	ip, r4
  408e02:	46ae      	mov	lr, r5
  408e04:	f85e 2b04 	ldr.w	r2, [lr], #4
  408e08:	fa13 f382 	uxtah	r3, r3, r2
  408e0c:	1419      	asrs	r1, r3, #16
  408e0e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  408e12:	b29b      	uxth	r3, r3
  408e14:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408e18:	4577      	cmp	r7, lr
  408e1a:	f84c 2b04 	str.w	r2, [ip], #4
  408e1e:	ea4f 4321 	mov.w	r3, r1, asr #16
  408e22:	d8ef      	bhi.n	408e04 <__mdiff+0xa0>
  408e24:	43ed      	mvns	r5, r5
  408e26:	442f      	add	r7, r5
  408e28:	f027 0703 	bic.w	r7, r7, #3
  408e2c:	3704      	adds	r7, #4
  408e2e:	443c      	add	r4, r7
  408e30:	3c04      	subs	r4, #4
  408e32:	b922      	cbnz	r2, 408e3e <__mdiff+0xda>
  408e34:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408e38:	3e01      	subs	r6, #1
  408e3a:	2b00      	cmp	r3, #0
  408e3c:	d0fa      	beq.n	408e34 <__mdiff+0xd0>
  408e3e:	6106      	str	r6, [r0, #16]
  408e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408e44:	2100      	movs	r1, #0
  408e46:	f7ff fd73 	bl	408930 <_Balloc>
  408e4a:	2201      	movs	r2, #1
  408e4c:	2300      	movs	r3, #0
  408e4e:	6102      	str	r2, [r0, #16]
  408e50:	6143      	str	r3, [r0, #20]
  408e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408e56:	4674      	mov	r4, lr
  408e58:	e7ab      	b.n	408db2 <__mdiff+0x4e>
  408e5a:	4633      	mov	r3, r6
  408e5c:	f106 0414 	add.w	r4, r6, #20
  408e60:	f102 0514 	add.w	r5, r2, #20
  408e64:	4616      	mov	r6, r2
  408e66:	2701      	movs	r7, #1
  408e68:	4698      	mov	r8, r3
  408e6a:	e7a2      	b.n	408db2 <__mdiff+0x4e>

00408e6c <__d2b>:
  408e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408e70:	b082      	sub	sp, #8
  408e72:	2101      	movs	r1, #1
  408e74:	461c      	mov	r4, r3
  408e76:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408e7a:	4615      	mov	r5, r2
  408e7c:	9e08      	ldr	r6, [sp, #32]
  408e7e:	f7ff fd57 	bl	408930 <_Balloc>
  408e82:	f3c4 0413 	ubfx	r4, r4, #0, #20
  408e86:	4680      	mov	r8, r0
  408e88:	b10f      	cbz	r7, 408e8e <__d2b+0x22>
  408e8a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408e8e:	9401      	str	r4, [sp, #4]
  408e90:	b31d      	cbz	r5, 408eda <__d2b+0x6e>
  408e92:	a802      	add	r0, sp, #8
  408e94:	f840 5d08 	str.w	r5, [r0, #-8]!
  408e98:	f7ff fdda 	bl	408a50 <__lo0bits>
  408e9c:	2800      	cmp	r0, #0
  408e9e:	d134      	bne.n	408f0a <__d2b+0x9e>
  408ea0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408ea4:	f8c8 2014 	str.w	r2, [r8, #20]
  408ea8:	2b00      	cmp	r3, #0
  408eaa:	bf0c      	ite	eq
  408eac:	2101      	moveq	r1, #1
  408eae:	2102      	movne	r1, #2
  408eb0:	f8c8 3018 	str.w	r3, [r8, #24]
  408eb4:	f8c8 1010 	str.w	r1, [r8, #16]
  408eb8:	b9df      	cbnz	r7, 408ef2 <__d2b+0x86>
  408eba:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408ebe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  408ec2:	6030      	str	r0, [r6, #0]
  408ec4:	6918      	ldr	r0, [r3, #16]
  408ec6:	f7ff fda3 	bl	408a10 <__hi0bits>
  408eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ecc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408ed0:	6018      	str	r0, [r3, #0]
  408ed2:	4640      	mov	r0, r8
  408ed4:	b002      	add	sp, #8
  408ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408eda:	a801      	add	r0, sp, #4
  408edc:	f7ff fdb8 	bl	408a50 <__lo0bits>
  408ee0:	9b01      	ldr	r3, [sp, #4]
  408ee2:	f8c8 3014 	str.w	r3, [r8, #20]
  408ee6:	2101      	movs	r1, #1
  408ee8:	3020      	adds	r0, #32
  408eea:	f8c8 1010 	str.w	r1, [r8, #16]
  408eee:	2f00      	cmp	r7, #0
  408ef0:	d0e3      	beq.n	408eba <__d2b+0x4e>
  408ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408ef4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408ef8:	4407      	add	r7, r0
  408efa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408efe:	6037      	str	r7, [r6, #0]
  408f00:	6018      	str	r0, [r3, #0]
  408f02:	4640      	mov	r0, r8
  408f04:	b002      	add	sp, #8
  408f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408f0a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408f0e:	f1c0 0220 	rsb	r2, r0, #32
  408f12:	fa03 f202 	lsl.w	r2, r3, r2
  408f16:	430a      	orrs	r2, r1
  408f18:	40c3      	lsrs	r3, r0
  408f1a:	9301      	str	r3, [sp, #4]
  408f1c:	f8c8 2014 	str.w	r2, [r8, #20]
  408f20:	e7c2      	b.n	408ea8 <__d2b+0x3c>
  408f22:	bf00      	nop

00408f24 <_realloc_r>:
  408f24:	2900      	cmp	r1, #0
  408f26:	f000 8095 	beq.w	409054 <_realloc_r+0x130>
  408f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f2e:	460d      	mov	r5, r1
  408f30:	4616      	mov	r6, r2
  408f32:	b083      	sub	sp, #12
  408f34:	4680      	mov	r8, r0
  408f36:	f106 070b 	add.w	r7, r6, #11
  408f3a:	f7ff fced 	bl	408918 <__malloc_lock>
  408f3e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408f42:	2f16      	cmp	r7, #22
  408f44:	f02e 0403 	bic.w	r4, lr, #3
  408f48:	f1a5 0908 	sub.w	r9, r5, #8
  408f4c:	d83c      	bhi.n	408fc8 <_realloc_r+0xa4>
  408f4e:	2210      	movs	r2, #16
  408f50:	4617      	mov	r7, r2
  408f52:	42be      	cmp	r6, r7
  408f54:	d83d      	bhi.n	408fd2 <_realloc_r+0xae>
  408f56:	4294      	cmp	r4, r2
  408f58:	da43      	bge.n	408fe2 <_realloc_r+0xbe>
  408f5a:	4bc4      	ldr	r3, [pc, #784]	; (40926c <_realloc_r+0x348>)
  408f5c:	6899      	ldr	r1, [r3, #8]
  408f5e:	eb09 0004 	add.w	r0, r9, r4
  408f62:	4288      	cmp	r0, r1
  408f64:	f000 80b4 	beq.w	4090d0 <_realloc_r+0x1ac>
  408f68:	6843      	ldr	r3, [r0, #4]
  408f6a:	f023 0101 	bic.w	r1, r3, #1
  408f6e:	4401      	add	r1, r0
  408f70:	6849      	ldr	r1, [r1, #4]
  408f72:	07c9      	lsls	r1, r1, #31
  408f74:	d54c      	bpl.n	409010 <_realloc_r+0xec>
  408f76:	f01e 0f01 	tst.w	lr, #1
  408f7a:	f000 809b 	beq.w	4090b4 <_realloc_r+0x190>
  408f7e:	4631      	mov	r1, r6
  408f80:	4640      	mov	r0, r8
  408f82:	f7ff f949 	bl	408218 <_malloc_r>
  408f86:	4606      	mov	r6, r0
  408f88:	2800      	cmp	r0, #0
  408f8a:	d03a      	beq.n	409002 <_realloc_r+0xde>
  408f8c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408f90:	f023 0301 	bic.w	r3, r3, #1
  408f94:	444b      	add	r3, r9
  408f96:	f1a0 0208 	sub.w	r2, r0, #8
  408f9a:	429a      	cmp	r2, r3
  408f9c:	f000 8121 	beq.w	4091e2 <_realloc_r+0x2be>
  408fa0:	1f22      	subs	r2, r4, #4
  408fa2:	2a24      	cmp	r2, #36	; 0x24
  408fa4:	f200 8107 	bhi.w	4091b6 <_realloc_r+0x292>
  408fa8:	2a13      	cmp	r2, #19
  408faa:	f200 80db 	bhi.w	409164 <_realloc_r+0x240>
  408fae:	4603      	mov	r3, r0
  408fb0:	462a      	mov	r2, r5
  408fb2:	6811      	ldr	r1, [r2, #0]
  408fb4:	6019      	str	r1, [r3, #0]
  408fb6:	6851      	ldr	r1, [r2, #4]
  408fb8:	6059      	str	r1, [r3, #4]
  408fba:	6892      	ldr	r2, [r2, #8]
  408fbc:	609a      	str	r2, [r3, #8]
  408fbe:	4629      	mov	r1, r5
  408fc0:	4640      	mov	r0, r8
  408fc2:	f7ff f831 	bl	408028 <_free_r>
  408fc6:	e01c      	b.n	409002 <_realloc_r+0xde>
  408fc8:	f027 0707 	bic.w	r7, r7, #7
  408fcc:	2f00      	cmp	r7, #0
  408fce:	463a      	mov	r2, r7
  408fd0:	dabf      	bge.n	408f52 <_realloc_r+0x2e>
  408fd2:	2600      	movs	r6, #0
  408fd4:	230c      	movs	r3, #12
  408fd6:	4630      	mov	r0, r6
  408fd8:	f8c8 3000 	str.w	r3, [r8]
  408fdc:	b003      	add	sp, #12
  408fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fe2:	462e      	mov	r6, r5
  408fe4:	1be3      	subs	r3, r4, r7
  408fe6:	2b0f      	cmp	r3, #15
  408fe8:	d81e      	bhi.n	409028 <_realloc_r+0x104>
  408fea:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408fee:	f003 0301 	and.w	r3, r3, #1
  408ff2:	4323      	orrs	r3, r4
  408ff4:	444c      	add	r4, r9
  408ff6:	f8c9 3004 	str.w	r3, [r9, #4]
  408ffa:	6863      	ldr	r3, [r4, #4]
  408ffc:	f043 0301 	orr.w	r3, r3, #1
  409000:	6063      	str	r3, [r4, #4]
  409002:	4640      	mov	r0, r8
  409004:	f7ff fc8e 	bl	408924 <__malloc_unlock>
  409008:	4630      	mov	r0, r6
  40900a:	b003      	add	sp, #12
  40900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409010:	f023 0303 	bic.w	r3, r3, #3
  409014:	18e1      	adds	r1, r4, r3
  409016:	4291      	cmp	r1, r2
  409018:	db1f      	blt.n	40905a <_realloc_r+0x136>
  40901a:	68c3      	ldr	r3, [r0, #12]
  40901c:	6882      	ldr	r2, [r0, #8]
  40901e:	462e      	mov	r6, r5
  409020:	60d3      	str	r3, [r2, #12]
  409022:	460c      	mov	r4, r1
  409024:	609a      	str	r2, [r3, #8]
  409026:	e7dd      	b.n	408fe4 <_realloc_r+0xc0>
  409028:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40902c:	eb09 0107 	add.w	r1, r9, r7
  409030:	f002 0201 	and.w	r2, r2, #1
  409034:	444c      	add	r4, r9
  409036:	f043 0301 	orr.w	r3, r3, #1
  40903a:	4317      	orrs	r7, r2
  40903c:	f8c9 7004 	str.w	r7, [r9, #4]
  409040:	604b      	str	r3, [r1, #4]
  409042:	6863      	ldr	r3, [r4, #4]
  409044:	f043 0301 	orr.w	r3, r3, #1
  409048:	3108      	adds	r1, #8
  40904a:	6063      	str	r3, [r4, #4]
  40904c:	4640      	mov	r0, r8
  40904e:	f7fe ffeb 	bl	408028 <_free_r>
  409052:	e7d6      	b.n	409002 <_realloc_r+0xde>
  409054:	4611      	mov	r1, r2
  409056:	f7ff b8df 	b.w	408218 <_malloc_r>
  40905a:	f01e 0f01 	tst.w	lr, #1
  40905e:	d18e      	bne.n	408f7e <_realloc_r+0x5a>
  409060:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409064:	eba9 0a01 	sub.w	sl, r9, r1
  409068:	f8da 1004 	ldr.w	r1, [sl, #4]
  40906c:	f021 0103 	bic.w	r1, r1, #3
  409070:	440b      	add	r3, r1
  409072:	4423      	add	r3, r4
  409074:	4293      	cmp	r3, r2
  409076:	db25      	blt.n	4090c4 <_realloc_r+0x1a0>
  409078:	68c2      	ldr	r2, [r0, #12]
  40907a:	6881      	ldr	r1, [r0, #8]
  40907c:	4656      	mov	r6, sl
  40907e:	60ca      	str	r2, [r1, #12]
  409080:	6091      	str	r1, [r2, #8]
  409082:	f8da 100c 	ldr.w	r1, [sl, #12]
  409086:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40908a:	1f22      	subs	r2, r4, #4
  40908c:	2a24      	cmp	r2, #36	; 0x24
  40908e:	60c1      	str	r1, [r0, #12]
  409090:	6088      	str	r0, [r1, #8]
  409092:	f200 8094 	bhi.w	4091be <_realloc_r+0x29a>
  409096:	2a13      	cmp	r2, #19
  409098:	d96f      	bls.n	40917a <_realloc_r+0x256>
  40909a:	6829      	ldr	r1, [r5, #0]
  40909c:	f8ca 1008 	str.w	r1, [sl, #8]
  4090a0:	6869      	ldr	r1, [r5, #4]
  4090a2:	f8ca 100c 	str.w	r1, [sl, #12]
  4090a6:	2a1b      	cmp	r2, #27
  4090a8:	f200 80a2 	bhi.w	4091f0 <_realloc_r+0x2cc>
  4090ac:	3508      	adds	r5, #8
  4090ae:	f10a 0210 	add.w	r2, sl, #16
  4090b2:	e063      	b.n	40917c <_realloc_r+0x258>
  4090b4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4090b8:	eba9 0a03 	sub.w	sl, r9, r3
  4090bc:	f8da 1004 	ldr.w	r1, [sl, #4]
  4090c0:	f021 0103 	bic.w	r1, r1, #3
  4090c4:	1863      	adds	r3, r4, r1
  4090c6:	4293      	cmp	r3, r2
  4090c8:	f6ff af59 	blt.w	408f7e <_realloc_r+0x5a>
  4090cc:	4656      	mov	r6, sl
  4090ce:	e7d8      	b.n	409082 <_realloc_r+0x15e>
  4090d0:	6841      	ldr	r1, [r0, #4]
  4090d2:	f021 0b03 	bic.w	fp, r1, #3
  4090d6:	44a3      	add	fp, r4
  4090d8:	f107 0010 	add.w	r0, r7, #16
  4090dc:	4583      	cmp	fp, r0
  4090de:	da56      	bge.n	40918e <_realloc_r+0x26a>
  4090e0:	f01e 0f01 	tst.w	lr, #1
  4090e4:	f47f af4b 	bne.w	408f7e <_realloc_r+0x5a>
  4090e8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4090ec:	eba9 0a01 	sub.w	sl, r9, r1
  4090f0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4090f4:	f021 0103 	bic.w	r1, r1, #3
  4090f8:	448b      	add	fp, r1
  4090fa:	4558      	cmp	r0, fp
  4090fc:	dce2      	bgt.n	4090c4 <_realloc_r+0x1a0>
  4090fe:	4656      	mov	r6, sl
  409100:	f8da 100c 	ldr.w	r1, [sl, #12]
  409104:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409108:	1f22      	subs	r2, r4, #4
  40910a:	2a24      	cmp	r2, #36	; 0x24
  40910c:	60c1      	str	r1, [r0, #12]
  40910e:	6088      	str	r0, [r1, #8]
  409110:	f200 808f 	bhi.w	409232 <_realloc_r+0x30e>
  409114:	2a13      	cmp	r2, #19
  409116:	f240 808a 	bls.w	40922e <_realloc_r+0x30a>
  40911a:	6829      	ldr	r1, [r5, #0]
  40911c:	f8ca 1008 	str.w	r1, [sl, #8]
  409120:	6869      	ldr	r1, [r5, #4]
  409122:	f8ca 100c 	str.w	r1, [sl, #12]
  409126:	2a1b      	cmp	r2, #27
  409128:	f200 808a 	bhi.w	409240 <_realloc_r+0x31c>
  40912c:	3508      	adds	r5, #8
  40912e:	f10a 0210 	add.w	r2, sl, #16
  409132:	6829      	ldr	r1, [r5, #0]
  409134:	6011      	str	r1, [r2, #0]
  409136:	6869      	ldr	r1, [r5, #4]
  409138:	6051      	str	r1, [r2, #4]
  40913a:	68a9      	ldr	r1, [r5, #8]
  40913c:	6091      	str	r1, [r2, #8]
  40913e:	eb0a 0107 	add.w	r1, sl, r7
  409142:	ebab 0207 	sub.w	r2, fp, r7
  409146:	f042 0201 	orr.w	r2, r2, #1
  40914a:	6099      	str	r1, [r3, #8]
  40914c:	604a      	str	r2, [r1, #4]
  40914e:	f8da 3004 	ldr.w	r3, [sl, #4]
  409152:	f003 0301 	and.w	r3, r3, #1
  409156:	431f      	orrs	r7, r3
  409158:	4640      	mov	r0, r8
  40915a:	f8ca 7004 	str.w	r7, [sl, #4]
  40915e:	f7ff fbe1 	bl	408924 <__malloc_unlock>
  409162:	e751      	b.n	409008 <_realloc_r+0xe4>
  409164:	682b      	ldr	r3, [r5, #0]
  409166:	6003      	str	r3, [r0, #0]
  409168:	686b      	ldr	r3, [r5, #4]
  40916a:	6043      	str	r3, [r0, #4]
  40916c:	2a1b      	cmp	r2, #27
  40916e:	d82d      	bhi.n	4091cc <_realloc_r+0x2a8>
  409170:	f100 0308 	add.w	r3, r0, #8
  409174:	f105 0208 	add.w	r2, r5, #8
  409178:	e71b      	b.n	408fb2 <_realloc_r+0x8e>
  40917a:	4632      	mov	r2, r6
  40917c:	6829      	ldr	r1, [r5, #0]
  40917e:	6011      	str	r1, [r2, #0]
  409180:	6869      	ldr	r1, [r5, #4]
  409182:	6051      	str	r1, [r2, #4]
  409184:	68a9      	ldr	r1, [r5, #8]
  409186:	6091      	str	r1, [r2, #8]
  409188:	461c      	mov	r4, r3
  40918a:	46d1      	mov	r9, sl
  40918c:	e72a      	b.n	408fe4 <_realloc_r+0xc0>
  40918e:	eb09 0107 	add.w	r1, r9, r7
  409192:	ebab 0b07 	sub.w	fp, fp, r7
  409196:	f04b 0201 	orr.w	r2, fp, #1
  40919a:	6099      	str	r1, [r3, #8]
  40919c:	604a      	str	r2, [r1, #4]
  40919e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4091a2:	f003 0301 	and.w	r3, r3, #1
  4091a6:	431f      	orrs	r7, r3
  4091a8:	4640      	mov	r0, r8
  4091aa:	f845 7c04 	str.w	r7, [r5, #-4]
  4091ae:	f7ff fbb9 	bl	408924 <__malloc_unlock>
  4091b2:	462e      	mov	r6, r5
  4091b4:	e728      	b.n	409008 <_realloc_r+0xe4>
  4091b6:	4629      	mov	r1, r5
  4091b8:	f7ff fb4a 	bl	408850 <memmove>
  4091bc:	e6ff      	b.n	408fbe <_realloc_r+0x9a>
  4091be:	4629      	mov	r1, r5
  4091c0:	4630      	mov	r0, r6
  4091c2:	461c      	mov	r4, r3
  4091c4:	46d1      	mov	r9, sl
  4091c6:	f7ff fb43 	bl	408850 <memmove>
  4091ca:	e70b      	b.n	408fe4 <_realloc_r+0xc0>
  4091cc:	68ab      	ldr	r3, [r5, #8]
  4091ce:	6083      	str	r3, [r0, #8]
  4091d0:	68eb      	ldr	r3, [r5, #12]
  4091d2:	60c3      	str	r3, [r0, #12]
  4091d4:	2a24      	cmp	r2, #36	; 0x24
  4091d6:	d017      	beq.n	409208 <_realloc_r+0x2e4>
  4091d8:	f100 0310 	add.w	r3, r0, #16
  4091dc:	f105 0210 	add.w	r2, r5, #16
  4091e0:	e6e7      	b.n	408fb2 <_realloc_r+0x8e>
  4091e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4091e6:	f023 0303 	bic.w	r3, r3, #3
  4091ea:	441c      	add	r4, r3
  4091ec:	462e      	mov	r6, r5
  4091ee:	e6f9      	b.n	408fe4 <_realloc_r+0xc0>
  4091f0:	68a9      	ldr	r1, [r5, #8]
  4091f2:	f8ca 1010 	str.w	r1, [sl, #16]
  4091f6:	68e9      	ldr	r1, [r5, #12]
  4091f8:	f8ca 1014 	str.w	r1, [sl, #20]
  4091fc:	2a24      	cmp	r2, #36	; 0x24
  4091fe:	d00c      	beq.n	40921a <_realloc_r+0x2f6>
  409200:	3510      	adds	r5, #16
  409202:	f10a 0218 	add.w	r2, sl, #24
  409206:	e7b9      	b.n	40917c <_realloc_r+0x258>
  409208:	692b      	ldr	r3, [r5, #16]
  40920a:	6103      	str	r3, [r0, #16]
  40920c:	696b      	ldr	r3, [r5, #20]
  40920e:	6143      	str	r3, [r0, #20]
  409210:	f105 0218 	add.w	r2, r5, #24
  409214:	f100 0318 	add.w	r3, r0, #24
  409218:	e6cb      	b.n	408fb2 <_realloc_r+0x8e>
  40921a:	692a      	ldr	r2, [r5, #16]
  40921c:	f8ca 2018 	str.w	r2, [sl, #24]
  409220:	696a      	ldr	r2, [r5, #20]
  409222:	f8ca 201c 	str.w	r2, [sl, #28]
  409226:	3518      	adds	r5, #24
  409228:	f10a 0220 	add.w	r2, sl, #32
  40922c:	e7a6      	b.n	40917c <_realloc_r+0x258>
  40922e:	4632      	mov	r2, r6
  409230:	e77f      	b.n	409132 <_realloc_r+0x20e>
  409232:	4629      	mov	r1, r5
  409234:	4630      	mov	r0, r6
  409236:	9301      	str	r3, [sp, #4]
  409238:	f7ff fb0a 	bl	408850 <memmove>
  40923c:	9b01      	ldr	r3, [sp, #4]
  40923e:	e77e      	b.n	40913e <_realloc_r+0x21a>
  409240:	68a9      	ldr	r1, [r5, #8]
  409242:	f8ca 1010 	str.w	r1, [sl, #16]
  409246:	68e9      	ldr	r1, [r5, #12]
  409248:	f8ca 1014 	str.w	r1, [sl, #20]
  40924c:	2a24      	cmp	r2, #36	; 0x24
  40924e:	d003      	beq.n	409258 <_realloc_r+0x334>
  409250:	3510      	adds	r5, #16
  409252:	f10a 0218 	add.w	r2, sl, #24
  409256:	e76c      	b.n	409132 <_realloc_r+0x20e>
  409258:	692a      	ldr	r2, [r5, #16]
  40925a:	f8ca 2018 	str.w	r2, [sl, #24]
  40925e:	696a      	ldr	r2, [r5, #20]
  409260:	f8ca 201c 	str.w	r2, [sl, #28]
  409264:	3518      	adds	r5, #24
  409266:	f10a 0220 	add.w	r2, sl, #32
  40926a:	e762      	b.n	409132 <_realloc_r+0x20e>
  40926c:	20000648 	.word	0x20000648

00409270 <_sbrk_r>:
  409270:	b538      	push	{r3, r4, r5, lr}
  409272:	4c07      	ldr	r4, [pc, #28]	; (409290 <_sbrk_r+0x20>)
  409274:	2300      	movs	r3, #0
  409276:	4605      	mov	r5, r0
  409278:	4608      	mov	r0, r1
  40927a:	6023      	str	r3, [r4, #0]
  40927c:	f7fa fa42 	bl	403704 <_sbrk>
  409280:	1c43      	adds	r3, r0, #1
  409282:	d000      	beq.n	409286 <_sbrk_r+0x16>
  409284:	bd38      	pop	{r3, r4, r5, pc}
  409286:	6823      	ldr	r3, [r4, #0]
  409288:	2b00      	cmp	r3, #0
  40928a:	d0fb      	beq.n	409284 <_sbrk_r+0x14>
  40928c:	602b      	str	r3, [r5, #0]
  40928e:	bd38      	pop	{r3, r4, r5, pc}
  409290:	200041d0 	.word	0x200041d0

00409294 <__ssprint_r>:
  409294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409298:	6893      	ldr	r3, [r2, #8]
  40929a:	b083      	sub	sp, #12
  40929c:	4690      	mov	r8, r2
  40929e:	2b00      	cmp	r3, #0
  4092a0:	d070      	beq.n	409384 <__ssprint_r+0xf0>
  4092a2:	4682      	mov	sl, r0
  4092a4:	460c      	mov	r4, r1
  4092a6:	6817      	ldr	r7, [r2, #0]
  4092a8:	688d      	ldr	r5, [r1, #8]
  4092aa:	6808      	ldr	r0, [r1, #0]
  4092ac:	e042      	b.n	409334 <__ssprint_r+0xa0>
  4092ae:	89a3      	ldrh	r3, [r4, #12]
  4092b0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4092b4:	d02e      	beq.n	409314 <__ssprint_r+0x80>
  4092b6:	6965      	ldr	r5, [r4, #20]
  4092b8:	6921      	ldr	r1, [r4, #16]
  4092ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4092be:	eba0 0b01 	sub.w	fp, r0, r1
  4092c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4092c6:	f10b 0001 	add.w	r0, fp, #1
  4092ca:	106d      	asrs	r5, r5, #1
  4092cc:	4430      	add	r0, r6
  4092ce:	42a8      	cmp	r0, r5
  4092d0:	462a      	mov	r2, r5
  4092d2:	bf84      	itt	hi
  4092d4:	4605      	movhi	r5, r0
  4092d6:	462a      	movhi	r2, r5
  4092d8:	055b      	lsls	r3, r3, #21
  4092da:	d538      	bpl.n	40934e <__ssprint_r+0xba>
  4092dc:	4611      	mov	r1, r2
  4092de:	4650      	mov	r0, sl
  4092e0:	f7fe ff9a 	bl	408218 <_malloc_r>
  4092e4:	2800      	cmp	r0, #0
  4092e6:	d03c      	beq.n	409362 <__ssprint_r+0xce>
  4092e8:	465a      	mov	r2, fp
  4092ea:	6921      	ldr	r1, [r4, #16]
  4092ec:	9001      	str	r0, [sp, #4]
  4092ee:	f7fc faa5 	bl	40583c <memcpy>
  4092f2:	89a2      	ldrh	r2, [r4, #12]
  4092f4:	9b01      	ldr	r3, [sp, #4]
  4092f6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4092fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4092fe:	81a2      	strh	r2, [r4, #12]
  409300:	eba5 020b 	sub.w	r2, r5, fp
  409304:	eb03 000b 	add.w	r0, r3, fp
  409308:	6165      	str	r5, [r4, #20]
  40930a:	6123      	str	r3, [r4, #16]
  40930c:	6020      	str	r0, [r4, #0]
  40930e:	60a2      	str	r2, [r4, #8]
  409310:	4635      	mov	r5, r6
  409312:	46b3      	mov	fp, r6
  409314:	465a      	mov	r2, fp
  409316:	4649      	mov	r1, r9
  409318:	f7ff fa9a 	bl	408850 <memmove>
  40931c:	f8d8 3008 	ldr.w	r3, [r8, #8]
  409320:	68a2      	ldr	r2, [r4, #8]
  409322:	6820      	ldr	r0, [r4, #0]
  409324:	1b55      	subs	r5, r2, r5
  409326:	4458      	add	r0, fp
  409328:	1b9e      	subs	r6, r3, r6
  40932a:	60a5      	str	r5, [r4, #8]
  40932c:	6020      	str	r0, [r4, #0]
  40932e:	f8c8 6008 	str.w	r6, [r8, #8]
  409332:	b33e      	cbz	r6, 409384 <__ssprint_r+0xf0>
  409334:	687e      	ldr	r6, [r7, #4]
  409336:	463b      	mov	r3, r7
  409338:	3708      	adds	r7, #8
  40933a:	2e00      	cmp	r6, #0
  40933c:	d0fa      	beq.n	409334 <__ssprint_r+0xa0>
  40933e:	42ae      	cmp	r6, r5
  409340:	f8d3 9000 	ldr.w	r9, [r3]
  409344:	46ab      	mov	fp, r5
  409346:	d2b2      	bcs.n	4092ae <__ssprint_r+0x1a>
  409348:	4635      	mov	r5, r6
  40934a:	46b3      	mov	fp, r6
  40934c:	e7e2      	b.n	409314 <__ssprint_r+0x80>
  40934e:	4650      	mov	r0, sl
  409350:	f7ff fde8 	bl	408f24 <_realloc_r>
  409354:	4603      	mov	r3, r0
  409356:	2800      	cmp	r0, #0
  409358:	d1d2      	bne.n	409300 <__ssprint_r+0x6c>
  40935a:	6921      	ldr	r1, [r4, #16]
  40935c:	4650      	mov	r0, sl
  40935e:	f7fe fe63 	bl	408028 <_free_r>
  409362:	230c      	movs	r3, #12
  409364:	f8ca 3000 	str.w	r3, [sl]
  409368:	89a3      	ldrh	r3, [r4, #12]
  40936a:	2200      	movs	r2, #0
  40936c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409370:	f04f 30ff 	mov.w	r0, #4294967295
  409374:	81a3      	strh	r3, [r4, #12]
  409376:	f8c8 2008 	str.w	r2, [r8, #8]
  40937a:	f8c8 2004 	str.w	r2, [r8, #4]
  40937e:	b003      	add	sp, #12
  409380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409384:	2000      	movs	r0, #0
  409386:	f8c8 0004 	str.w	r0, [r8, #4]
  40938a:	b003      	add	sp, #12
  40938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409390 <__ascii_wctomb>:
  409390:	b121      	cbz	r1, 40939c <__ascii_wctomb+0xc>
  409392:	2aff      	cmp	r2, #255	; 0xff
  409394:	d804      	bhi.n	4093a0 <__ascii_wctomb+0x10>
  409396:	700a      	strb	r2, [r1, #0]
  409398:	2001      	movs	r0, #1
  40939a:	4770      	bx	lr
  40939c:	4608      	mov	r0, r1
  40939e:	4770      	bx	lr
  4093a0:	238a      	movs	r3, #138	; 0x8a
  4093a2:	6003      	str	r3, [r0, #0]
  4093a4:	f04f 30ff 	mov.w	r0, #4294967295
  4093a8:	4770      	bx	lr
  4093aa:	bf00      	nop

004093ac <__register_exitproc>:
  4093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4093b0:	4d2c      	ldr	r5, [pc, #176]	; (409464 <__register_exitproc+0xb8>)
  4093b2:	4606      	mov	r6, r0
  4093b4:	6828      	ldr	r0, [r5, #0]
  4093b6:	4698      	mov	r8, r3
  4093b8:	460f      	mov	r7, r1
  4093ba:	4691      	mov	r9, r2
  4093bc:	f7fe ff28 	bl	408210 <__retarget_lock_acquire_recursive>
  4093c0:	4b29      	ldr	r3, [pc, #164]	; (409468 <__register_exitproc+0xbc>)
  4093c2:	681c      	ldr	r4, [r3, #0]
  4093c4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4093c8:	2b00      	cmp	r3, #0
  4093ca:	d03e      	beq.n	40944a <__register_exitproc+0x9e>
  4093cc:	685a      	ldr	r2, [r3, #4]
  4093ce:	2a1f      	cmp	r2, #31
  4093d0:	dc1c      	bgt.n	40940c <__register_exitproc+0x60>
  4093d2:	f102 0e01 	add.w	lr, r2, #1
  4093d6:	b176      	cbz	r6, 4093f6 <__register_exitproc+0x4a>
  4093d8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4093dc:	2401      	movs	r4, #1
  4093de:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4093e2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4093e6:	4094      	lsls	r4, r2
  4093e8:	4320      	orrs	r0, r4
  4093ea:	2e02      	cmp	r6, #2
  4093ec:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4093f0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4093f4:	d023      	beq.n	40943e <__register_exitproc+0x92>
  4093f6:	3202      	adds	r2, #2
  4093f8:	f8c3 e004 	str.w	lr, [r3, #4]
  4093fc:	6828      	ldr	r0, [r5, #0]
  4093fe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409402:	f7fe ff07 	bl	408214 <__retarget_lock_release_recursive>
  409406:	2000      	movs	r0, #0
  409408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40940c:	4b17      	ldr	r3, [pc, #92]	; (40946c <__register_exitproc+0xc0>)
  40940e:	b30b      	cbz	r3, 409454 <__register_exitproc+0xa8>
  409410:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409414:	f3af 8000 	nop.w
  409418:	4603      	mov	r3, r0
  40941a:	b1d8      	cbz	r0, 409454 <__register_exitproc+0xa8>
  40941c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409420:	6002      	str	r2, [r0, #0]
  409422:	2100      	movs	r1, #0
  409424:	6041      	str	r1, [r0, #4]
  409426:	460a      	mov	r2, r1
  409428:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40942c:	f04f 0e01 	mov.w	lr, #1
  409430:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409434:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409438:	2e00      	cmp	r6, #0
  40943a:	d0dc      	beq.n	4093f6 <__register_exitproc+0x4a>
  40943c:	e7cc      	b.n	4093d8 <__register_exitproc+0x2c>
  40943e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409442:	430c      	orrs	r4, r1
  409444:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409448:	e7d5      	b.n	4093f6 <__register_exitproc+0x4a>
  40944a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40944e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409452:	e7bb      	b.n	4093cc <__register_exitproc+0x20>
  409454:	6828      	ldr	r0, [r5, #0]
  409456:	f7fe fedd 	bl	408214 <__retarget_lock_release_recursive>
  40945a:	f04f 30ff 	mov.w	r0, #4294967295
  40945e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409462:	bf00      	nop
  409464:	200004d8 	.word	0x200004d8
  409468:	00409b40 	.word	0x00409b40
  40946c:	00000000 	.word	0x00000000

00409470 <_calloc_r>:
  409470:	b510      	push	{r4, lr}
  409472:	fb02 f101 	mul.w	r1, r2, r1
  409476:	f7fe fecf 	bl	408218 <_malloc_r>
  40947a:	4604      	mov	r4, r0
  40947c:	b1d8      	cbz	r0, 4094b6 <_calloc_r+0x46>
  40947e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409482:	f022 0203 	bic.w	r2, r2, #3
  409486:	3a04      	subs	r2, #4
  409488:	2a24      	cmp	r2, #36	; 0x24
  40948a:	d818      	bhi.n	4094be <_calloc_r+0x4e>
  40948c:	2a13      	cmp	r2, #19
  40948e:	d914      	bls.n	4094ba <_calloc_r+0x4a>
  409490:	2300      	movs	r3, #0
  409492:	2a1b      	cmp	r2, #27
  409494:	6003      	str	r3, [r0, #0]
  409496:	6043      	str	r3, [r0, #4]
  409498:	d916      	bls.n	4094c8 <_calloc_r+0x58>
  40949a:	2a24      	cmp	r2, #36	; 0x24
  40949c:	6083      	str	r3, [r0, #8]
  40949e:	60c3      	str	r3, [r0, #12]
  4094a0:	bf11      	iteee	ne
  4094a2:	f100 0210 	addne.w	r2, r0, #16
  4094a6:	6103      	streq	r3, [r0, #16]
  4094a8:	6143      	streq	r3, [r0, #20]
  4094aa:	f100 0218 	addeq.w	r2, r0, #24
  4094ae:	2300      	movs	r3, #0
  4094b0:	6013      	str	r3, [r2, #0]
  4094b2:	6053      	str	r3, [r2, #4]
  4094b4:	6093      	str	r3, [r2, #8]
  4094b6:	4620      	mov	r0, r4
  4094b8:	bd10      	pop	{r4, pc}
  4094ba:	4602      	mov	r2, r0
  4094bc:	e7f7      	b.n	4094ae <_calloc_r+0x3e>
  4094be:	2100      	movs	r1, #0
  4094c0:	f7fc fa56 	bl	405970 <memset>
  4094c4:	4620      	mov	r0, r4
  4094c6:	bd10      	pop	{r4, pc}
  4094c8:	f100 0208 	add.w	r2, r0, #8
  4094cc:	e7ef      	b.n	4094ae <_calloc_r+0x3e>
  4094ce:	bf00      	nop

004094d0 <__aeabi_d2iz>:
  4094d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4094d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4094d8:	d215      	bcs.n	409506 <__aeabi_d2iz+0x36>
  4094da:	d511      	bpl.n	409500 <__aeabi_d2iz+0x30>
  4094dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4094e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4094e4:	d912      	bls.n	40950c <__aeabi_d2iz+0x3c>
  4094e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4094ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4094ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4094f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4094f6:	fa23 f002 	lsr.w	r0, r3, r2
  4094fa:	bf18      	it	ne
  4094fc:	4240      	negne	r0, r0
  4094fe:	4770      	bx	lr
  409500:	f04f 0000 	mov.w	r0, #0
  409504:	4770      	bx	lr
  409506:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40950a:	d105      	bne.n	409518 <__aeabi_d2iz+0x48>
  40950c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409510:	bf08      	it	eq
  409512:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409516:	4770      	bx	lr
  409518:	f04f 0000 	mov.w	r0, #0
  40951c:	4770      	bx	lr
  40951e:	bf00      	nop

00409520 <__aeabi_uldivmod>:
  409520:	b953      	cbnz	r3, 409538 <__aeabi_uldivmod+0x18>
  409522:	b94a      	cbnz	r2, 409538 <__aeabi_uldivmod+0x18>
  409524:	2900      	cmp	r1, #0
  409526:	bf08      	it	eq
  409528:	2800      	cmpeq	r0, #0
  40952a:	bf1c      	itt	ne
  40952c:	f04f 31ff 	movne.w	r1, #4294967295
  409530:	f04f 30ff 	movne.w	r0, #4294967295
  409534:	f000 b97a 	b.w	40982c <__aeabi_idiv0>
  409538:	f1ad 0c08 	sub.w	ip, sp, #8
  40953c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409540:	f000 f806 	bl	409550 <__udivmoddi4>
  409544:	f8dd e004 	ldr.w	lr, [sp, #4]
  409548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40954c:	b004      	add	sp, #16
  40954e:	4770      	bx	lr

00409550 <__udivmoddi4>:
  409550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409554:	468c      	mov	ip, r1
  409556:	460d      	mov	r5, r1
  409558:	4604      	mov	r4, r0
  40955a:	9e08      	ldr	r6, [sp, #32]
  40955c:	2b00      	cmp	r3, #0
  40955e:	d151      	bne.n	409604 <__udivmoddi4+0xb4>
  409560:	428a      	cmp	r2, r1
  409562:	4617      	mov	r7, r2
  409564:	d96d      	bls.n	409642 <__udivmoddi4+0xf2>
  409566:	fab2 fe82 	clz	lr, r2
  40956a:	f1be 0f00 	cmp.w	lr, #0
  40956e:	d00b      	beq.n	409588 <__udivmoddi4+0x38>
  409570:	f1ce 0c20 	rsb	ip, lr, #32
  409574:	fa01 f50e 	lsl.w	r5, r1, lr
  409578:	fa20 fc0c 	lsr.w	ip, r0, ip
  40957c:	fa02 f70e 	lsl.w	r7, r2, lr
  409580:	ea4c 0c05 	orr.w	ip, ip, r5
  409584:	fa00 f40e 	lsl.w	r4, r0, lr
  409588:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40958c:	0c25      	lsrs	r5, r4, #16
  40958e:	fbbc f8fa 	udiv	r8, ip, sl
  409592:	fa1f f987 	uxth.w	r9, r7
  409596:	fb0a cc18 	mls	ip, sl, r8, ip
  40959a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40959e:	fb08 f309 	mul.w	r3, r8, r9
  4095a2:	42ab      	cmp	r3, r5
  4095a4:	d90a      	bls.n	4095bc <__udivmoddi4+0x6c>
  4095a6:	19ed      	adds	r5, r5, r7
  4095a8:	f108 32ff 	add.w	r2, r8, #4294967295
  4095ac:	f080 8123 	bcs.w	4097f6 <__udivmoddi4+0x2a6>
  4095b0:	42ab      	cmp	r3, r5
  4095b2:	f240 8120 	bls.w	4097f6 <__udivmoddi4+0x2a6>
  4095b6:	f1a8 0802 	sub.w	r8, r8, #2
  4095ba:	443d      	add	r5, r7
  4095bc:	1aed      	subs	r5, r5, r3
  4095be:	b2a4      	uxth	r4, r4
  4095c0:	fbb5 f0fa 	udiv	r0, r5, sl
  4095c4:	fb0a 5510 	mls	r5, sl, r0, r5
  4095c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4095cc:	fb00 f909 	mul.w	r9, r0, r9
  4095d0:	45a1      	cmp	r9, r4
  4095d2:	d909      	bls.n	4095e8 <__udivmoddi4+0x98>
  4095d4:	19e4      	adds	r4, r4, r7
  4095d6:	f100 33ff 	add.w	r3, r0, #4294967295
  4095da:	f080 810a 	bcs.w	4097f2 <__udivmoddi4+0x2a2>
  4095de:	45a1      	cmp	r9, r4
  4095e0:	f240 8107 	bls.w	4097f2 <__udivmoddi4+0x2a2>
  4095e4:	3802      	subs	r0, #2
  4095e6:	443c      	add	r4, r7
  4095e8:	eba4 0409 	sub.w	r4, r4, r9
  4095ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4095f0:	2100      	movs	r1, #0
  4095f2:	2e00      	cmp	r6, #0
  4095f4:	d061      	beq.n	4096ba <__udivmoddi4+0x16a>
  4095f6:	fa24 f40e 	lsr.w	r4, r4, lr
  4095fa:	2300      	movs	r3, #0
  4095fc:	6034      	str	r4, [r6, #0]
  4095fe:	6073      	str	r3, [r6, #4]
  409600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409604:	428b      	cmp	r3, r1
  409606:	d907      	bls.n	409618 <__udivmoddi4+0xc8>
  409608:	2e00      	cmp	r6, #0
  40960a:	d054      	beq.n	4096b6 <__udivmoddi4+0x166>
  40960c:	2100      	movs	r1, #0
  40960e:	e886 0021 	stmia.w	r6, {r0, r5}
  409612:	4608      	mov	r0, r1
  409614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409618:	fab3 f183 	clz	r1, r3
  40961c:	2900      	cmp	r1, #0
  40961e:	f040 808e 	bne.w	40973e <__udivmoddi4+0x1ee>
  409622:	42ab      	cmp	r3, r5
  409624:	d302      	bcc.n	40962c <__udivmoddi4+0xdc>
  409626:	4282      	cmp	r2, r0
  409628:	f200 80fa 	bhi.w	409820 <__udivmoddi4+0x2d0>
  40962c:	1a84      	subs	r4, r0, r2
  40962e:	eb65 0503 	sbc.w	r5, r5, r3
  409632:	2001      	movs	r0, #1
  409634:	46ac      	mov	ip, r5
  409636:	2e00      	cmp	r6, #0
  409638:	d03f      	beq.n	4096ba <__udivmoddi4+0x16a>
  40963a:	e886 1010 	stmia.w	r6, {r4, ip}
  40963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409642:	b912      	cbnz	r2, 40964a <__udivmoddi4+0xfa>
  409644:	2701      	movs	r7, #1
  409646:	fbb7 f7f2 	udiv	r7, r7, r2
  40964a:	fab7 fe87 	clz	lr, r7
  40964e:	f1be 0f00 	cmp.w	lr, #0
  409652:	d134      	bne.n	4096be <__udivmoddi4+0x16e>
  409654:	1beb      	subs	r3, r5, r7
  409656:	0c3a      	lsrs	r2, r7, #16
  409658:	fa1f fc87 	uxth.w	ip, r7
  40965c:	2101      	movs	r1, #1
  40965e:	fbb3 f8f2 	udiv	r8, r3, r2
  409662:	0c25      	lsrs	r5, r4, #16
  409664:	fb02 3318 	mls	r3, r2, r8, r3
  409668:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40966c:	fb0c f308 	mul.w	r3, ip, r8
  409670:	42ab      	cmp	r3, r5
  409672:	d907      	bls.n	409684 <__udivmoddi4+0x134>
  409674:	19ed      	adds	r5, r5, r7
  409676:	f108 30ff 	add.w	r0, r8, #4294967295
  40967a:	d202      	bcs.n	409682 <__udivmoddi4+0x132>
  40967c:	42ab      	cmp	r3, r5
  40967e:	f200 80d1 	bhi.w	409824 <__udivmoddi4+0x2d4>
  409682:	4680      	mov	r8, r0
  409684:	1aed      	subs	r5, r5, r3
  409686:	b2a3      	uxth	r3, r4
  409688:	fbb5 f0f2 	udiv	r0, r5, r2
  40968c:	fb02 5510 	mls	r5, r2, r0, r5
  409690:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409694:	fb0c fc00 	mul.w	ip, ip, r0
  409698:	45a4      	cmp	ip, r4
  40969a:	d907      	bls.n	4096ac <__udivmoddi4+0x15c>
  40969c:	19e4      	adds	r4, r4, r7
  40969e:	f100 33ff 	add.w	r3, r0, #4294967295
  4096a2:	d202      	bcs.n	4096aa <__udivmoddi4+0x15a>
  4096a4:	45a4      	cmp	ip, r4
  4096a6:	f200 80b8 	bhi.w	40981a <__udivmoddi4+0x2ca>
  4096aa:	4618      	mov	r0, r3
  4096ac:	eba4 040c 	sub.w	r4, r4, ip
  4096b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4096b4:	e79d      	b.n	4095f2 <__udivmoddi4+0xa2>
  4096b6:	4631      	mov	r1, r6
  4096b8:	4630      	mov	r0, r6
  4096ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4096be:	f1ce 0420 	rsb	r4, lr, #32
  4096c2:	fa05 f30e 	lsl.w	r3, r5, lr
  4096c6:	fa07 f70e 	lsl.w	r7, r7, lr
  4096ca:	fa20 f804 	lsr.w	r8, r0, r4
  4096ce:	0c3a      	lsrs	r2, r7, #16
  4096d0:	fa25 f404 	lsr.w	r4, r5, r4
  4096d4:	ea48 0803 	orr.w	r8, r8, r3
  4096d8:	fbb4 f1f2 	udiv	r1, r4, r2
  4096dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4096e0:	fb02 4411 	mls	r4, r2, r1, r4
  4096e4:	fa1f fc87 	uxth.w	ip, r7
  4096e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4096ec:	fb01 f30c 	mul.w	r3, r1, ip
  4096f0:	42ab      	cmp	r3, r5
  4096f2:	fa00 f40e 	lsl.w	r4, r0, lr
  4096f6:	d909      	bls.n	40970c <__udivmoddi4+0x1bc>
  4096f8:	19ed      	adds	r5, r5, r7
  4096fa:	f101 30ff 	add.w	r0, r1, #4294967295
  4096fe:	f080 808a 	bcs.w	409816 <__udivmoddi4+0x2c6>
  409702:	42ab      	cmp	r3, r5
  409704:	f240 8087 	bls.w	409816 <__udivmoddi4+0x2c6>
  409708:	3902      	subs	r1, #2
  40970a:	443d      	add	r5, r7
  40970c:	1aeb      	subs	r3, r5, r3
  40970e:	fa1f f588 	uxth.w	r5, r8
  409712:	fbb3 f0f2 	udiv	r0, r3, r2
  409716:	fb02 3310 	mls	r3, r2, r0, r3
  40971a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40971e:	fb00 f30c 	mul.w	r3, r0, ip
  409722:	42ab      	cmp	r3, r5
  409724:	d907      	bls.n	409736 <__udivmoddi4+0x1e6>
  409726:	19ed      	adds	r5, r5, r7
  409728:	f100 38ff 	add.w	r8, r0, #4294967295
  40972c:	d26f      	bcs.n	40980e <__udivmoddi4+0x2be>
  40972e:	42ab      	cmp	r3, r5
  409730:	d96d      	bls.n	40980e <__udivmoddi4+0x2be>
  409732:	3802      	subs	r0, #2
  409734:	443d      	add	r5, r7
  409736:	1aeb      	subs	r3, r5, r3
  409738:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40973c:	e78f      	b.n	40965e <__udivmoddi4+0x10e>
  40973e:	f1c1 0720 	rsb	r7, r1, #32
  409742:	fa22 f807 	lsr.w	r8, r2, r7
  409746:	408b      	lsls	r3, r1
  409748:	fa05 f401 	lsl.w	r4, r5, r1
  40974c:	ea48 0303 	orr.w	r3, r8, r3
  409750:	fa20 fe07 	lsr.w	lr, r0, r7
  409754:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409758:	40fd      	lsrs	r5, r7
  40975a:	ea4e 0e04 	orr.w	lr, lr, r4
  40975e:	fbb5 f9fc 	udiv	r9, r5, ip
  409762:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409766:	fb0c 5519 	mls	r5, ip, r9, r5
  40976a:	fa1f f883 	uxth.w	r8, r3
  40976e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409772:	fb09 f408 	mul.w	r4, r9, r8
  409776:	42ac      	cmp	r4, r5
  409778:	fa02 f201 	lsl.w	r2, r2, r1
  40977c:	fa00 fa01 	lsl.w	sl, r0, r1
  409780:	d908      	bls.n	409794 <__udivmoddi4+0x244>
  409782:	18ed      	adds	r5, r5, r3
  409784:	f109 30ff 	add.w	r0, r9, #4294967295
  409788:	d243      	bcs.n	409812 <__udivmoddi4+0x2c2>
  40978a:	42ac      	cmp	r4, r5
  40978c:	d941      	bls.n	409812 <__udivmoddi4+0x2c2>
  40978e:	f1a9 0902 	sub.w	r9, r9, #2
  409792:	441d      	add	r5, r3
  409794:	1b2d      	subs	r5, r5, r4
  409796:	fa1f fe8e 	uxth.w	lr, lr
  40979a:	fbb5 f0fc 	udiv	r0, r5, ip
  40979e:	fb0c 5510 	mls	r5, ip, r0, r5
  4097a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4097a6:	fb00 f808 	mul.w	r8, r0, r8
  4097aa:	45a0      	cmp	r8, r4
  4097ac:	d907      	bls.n	4097be <__udivmoddi4+0x26e>
  4097ae:	18e4      	adds	r4, r4, r3
  4097b0:	f100 35ff 	add.w	r5, r0, #4294967295
  4097b4:	d229      	bcs.n	40980a <__udivmoddi4+0x2ba>
  4097b6:	45a0      	cmp	r8, r4
  4097b8:	d927      	bls.n	40980a <__udivmoddi4+0x2ba>
  4097ba:	3802      	subs	r0, #2
  4097bc:	441c      	add	r4, r3
  4097be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4097c2:	eba4 0408 	sub.w	r4, r4, r8
  4097c6:	fba0 8902 	umull	r8, r9, r0, r2
  4097ca:	454c      	cmp	r4, r9
  4097cc:	46c6      	mov	lr, r8
  4097ce:	464d      	mov	r5, r9
  4097d0:	d315      	bcc.n	4097fe <__udivmoddi4+0x2ae>
  4097d2:	d012      	beq.n	4097fa <__udivmoddi4+0x2aa>
  4097d4:	b156      	cbz	r6, 4097ec <__udivmoddi4+0x29c>
  4097d6:	ebba 030e 	subs.w	r3, sl, lr
  4097da:	eb64 0405 	sbc.w	r4, r4, r5
  4097de:	fa04 f707 	lsl.w	r7, r4, r7
  4097e2:	40cb      	lsrs	r3, r1
  4097e4:	431f      	orrs	r7, r3
  4097e6:	40cc      	lsrs	r4, r1
  4097e8:	6037      	str	r7, [r6, #0]
  4097ea:	6074      	str	r4, [r6, #4]
  4097ec:	2100      	movs	r1, #0
  4097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4097f2:	4618      	mov	r0, r3
  4097f4:	e6f8      	b.n	4095e8 <__udivmoddi4+0x98>
  4097f6:	4690      	mov	r8, r2
  4097f8:	e6e0      	b.n	4095bc <__udivmoddi4+0x6c>
  4097fa:	45c2      	cmp	sl, r8
  4097fc:	d2ea      	bcs.n	4097d4 <__udivmoddi4+0x284>
  4097fe:	ebb8 0e02 	subs.w	lr, r8, r2
  409802:	eb69 0503 	sbc.w	r5, r9, r3
  409806:	3801      	subs	r0, #1
  409808:	e7e4      	b.n	4097d4 <__udivmoddi4+0x284>
  40980a:	4628      	mov	r0, r5
  40980c:	e7d7      	b.n	4097be <__udivmoddi4+0x26e>
  40980e:	4640      	mov	r0, r8
  409810:	e791      	b.n	409736 <__udivmoddi4+0x1e6>
  409812:	4681      	mov	r9, r0
  409814:	e7be      	b.n	409794 <__udivmoddi4+0x244>
  409816:	4601      	mov	r1, r0
  409818:	e778      	b.n	40970c <__udivmoddi4+0x1bc>
  40981a:	3802      	subs	r0, #2
  40981c:	443c      	add	r4, r7
  40981e:	e745      	b.n	4096ac <__udivmoddi4+0x15c>
  409820:	4608      	mov	r0, r1
  409822:	e708      	b.n	409636 <__udivmoddi4+0xe6>
  409824:	f1a8 0802 	sub.w	r8, r8, #2
  409828:	443d      	add	r5, r7
  40982a:	e72b      	b.n	409684 <__udivmoddi4+0x134>

0040982c <__aeabi_idiv0>:
  40982c:	4770      	bx	lr
  40982e:	bf00      	nop
  409830:	614e0d0a 	.word	0x614e0d0a
  409834:	202c656d 	.word	0x202c656d
  409838:	72727543 	.word	0x72727543
  40983c:	20746e65 	.word	0x20746e65
  409840:	756c6156 	.word	0x756c6156
  409844:	53202c65 	.word	0x53202c65
  409848:	6c6c616d 	.word	0x6c6c616d
  40984c:	20747365 	.word	0x20747365
  409850:	6566696c 	.word	0x6566696c
  409854:	656d6974 	.word	0x656d6974
  409858:	6c617620 	.word	0x6c617620
  40985c:	202c6575 	.word	0x202c6575
  409860:	6772616c 	.word	0x6772616c
  409864:	20747365 	.word	0x20747365
  409868:	6566696c 	.word	0x6566696c
  40986c:	656d6974 	.word	0x656d6974
  409870:	6c617620 	.word	0x6c617620
  409874:	0d0a6575 	.word	0x0d0a6575
	...
  409930:	6c410d0a 	.word	0x6c410d0a
  409934:	7270206c 	.word	0x7270206c
  409938:	6365746f 	.word	0x6365746f
  40993c:	6e6f6974 	.word	0x6e6f6974
  409940:	69772073 	.word	0x69772073
  409944:	62206c6c 	.word	0x62206c6c
  409948:	67692065 	.word	0x67692065
  40994c:	65726f6e 	.word	0x65726f6e
  409950:	69742064 	.word	0x69742064
  409954:	74206c6c 	.word	0x74206c6c
  409958:	62206568 	.word	0x62206568
  40995c:	65747461 	.word	0x65747461
  409960:	69207972 	.word	0x69207972
  409964:	74732073 	.word	0x74732073
  409968:	656c6261 	.word	0x656c6261
  40996c:	61676120 	.word	0x61676120
  409970:	0d0a6e69 	.word	0x0d0a6e69
  409974:	00000000 	.word	0x00000000
  409978:	6c500d0a 	.word	0x6c500d0a
  40997c:	65736165 	.word	0x65736165
  409980:	70795420 	.word	0x70795420
  409984:	22732265 	.word	0x22732265
  409988:	206f7420 	.word	0x206f7420
  40998c:	20746567 	.word	0x20746567
  409990:	20656874 	.word	0x20656874
  409994:	72727563 	.word	0x72727563
  409998:	20746e65 	.word	0x20746e65
  40999c:	74617473 	.word	0x74617473
  4099a0:	6f207375 	.word	0x6f207375
  4099a4:	68742066 	.word	0x68742066
  4099a8:	61622065 	.word	0x61622065
  4099ac:	72657474 	.word	0x72657474
  4099b0:	410d0a79 	.word	0x410d0a79
  4099b4:	72657466 	.word	0x72657466
  4099b8:	74656420 	.word	0x74656420
  4099bc:	696d7265 	.word	0x696d7265
  4099c0:	676e696e 	.word	0x676e696e
  4099c4:	65687420 	.word	0x65687420
  4099c8:	73656220 	.word	0x73656220
  4099cc:	63612074 	.word	0x63612074
  4099d0:	6e6f6974 	.word	0x6e6f6974
  4099d4:	70797420 	.word	0x70797420
  4099d8:	63222065 	.word	0x63222065
  4099dc:	6f742022 	.word	0x6f742022
  4099e0:	6d657420 	.word	0x6d657420
  4099e4:	61726f70 	.word	0x61726f70
  4099e8:	796c6972 	.word	0x796c6972
  4099ec:	656c6320 	.word	0x656c6320
  4099f0:	61207261 	.word	0x61207261
  4099f4:	70206c6c 	.word	0x70206c6c
  4099f8:	65746f72 	.word	0x65746f72
  4099fc:	6f697463 	.word	0x6f697463
  409a00:	0d0a736e 	.word	0x0d0a736e
  409a04:	5241575b 	.word	0x5241575b
  409a08:	474e494e 	.word	0x474e494e
  409a0c:	6877205d 	.word	0x6877205d
  409a10:	74206e65 	.word	0x74206e65
  409a14:	70206568 	.word	0x70206568
  409a18:	65746f72 	.word	0x65746f72
  409a1c:	6f697463 	.word	0x6f697463
  409a20:	6120736e 	.word	0x6120736e
  409a24:	63206572 	.word	0x63206572
  409a28:	7261656c 	.word	0x7261656c
  409a2c:	202c6465 	.word	0x202c6465
  409a30:	20656874 	.word	0x20656874
  409a34:	20534d42 	.word	0x20534d42
  409a38:	6c6c6977 	.word	0x6c6c6977
  409a3c:	6e676920 	.word	0x6e676920
  409a40:	2065726f 	.word	0x2065726f
  409a44:	206c6c61 	.word	0x206c6c61
  409a48:	746f7270 	.word	0x746f7270
  409a4c:	69746365 	.word	0x69746365
  409a50:	20736e6f 	.word	0x20736e6f
  409a54:	6c6c6974 	.word	0x6c6c6974
  409a58:	65687420 	.word	0x65687420
  409a5c:	74616220 	.word	0x74616220
  409a60:	79726574 	.word	0x79726574
  409a64:	20736920 	.word	0x20736920
  409a68:	62617473 	.word	0x62617473
  409a6c:	6f20656c 	.word	0x6f20656c
  409a70:	2065636e 	.word	0x2065636e
  409a74:	69616761 	.word	0x69616761
  409a78:	200d0a6e 	.word	0x200d0a6e
  409a7c:	73696854 	.word	0x73696854
  409a80:	20736920 	.word	0x20736920
  409a84:	69646e69 	.word	0x69646e69
  409a88:	65746163 	.word	0x65746163
  409a8c:	79622064 	.word	0x79622064
  409a90:	65687420 	.word	0x65687420
  409a94:	64657220 	.word	0x64657220
  409a98:	44454c20 	.word	0x44454c20
  409a9c:	72757420 	.word	0x72757420
  409aa0:	676e696e 	.word	0x676e696e
  409aa4:	66666f20 	.word	0x66666f20
  409aa8:	000d0a2e 	.word	0x000d0a2e
  409aac:	6c6c6543 	.word	0x6c6c6543
  409ab0:	5f69255f 	.word	0x5f69255f
  409ab4:	746c6f76 	.word	0x746c6f76
  409ab8:	2c656761 	.word	0x2c656761
  409abc:	252c6625 	.word	0x252c6625
  409ac0:	66252c66 	.word	0x66252c66
  409ac4:	00000d0a 	.word	0x00000d0a
  409ac8:	5f747845 	.word	0x5f747845
  409acc:	706d6554 	.word	0x706d6554
  409ad0:	2c69255f 	.word	0x2c69255f
  409ad4:	252c6625 	.word	0x252c6625
  409ad8:	66252c66 	.word	0x66252c66
  409adc:	00000d0a 	.word	0x00000d0a
  409ae0:	72727543 	.word	0x72727543
  409ae4:	2c746e65 	.word	0x2c746e65
  409ae8:	252c6625 	.word	0x252c6625
  409aec:	66252c66 	.word	0x66252c66
  409af0:	00000d0a 	.word	0x00000d0a
  409af4:	6e756853 	.word	0x6e756853
  409af8:	65545f74 	.word	0x65545f74
  409afc:	252c706d 	.word	0x252c706d
  409b00:	66252c66 	.word	0x66252c66
  409b04:	0a66252c 	.word	0x0a66252c
  409b08:	0000000d 	.word	0x0000000d
  409b0c:	5f746546 	.word	0x5f746546
  409b10:	706d6554 	.word	0x706d6554
  409b14:	2c66252c 	.word	0x2c66252c
  409b18:	252c6625 	.word	0x252c6625
  409b1c:	000d0a66 	.word	0x000d0a66
  409b20:	63617453 	.word	0x63617453
  409b24:	6f565f6b 	.word	0x6f565f6b
  409b28:	6761746c 	.word	0x6761746c
  409b2c:	66252c65 	.word	0x66252c65
  409b30:	2c66252c 	.word	0x2c66252c
  409b34:	0d0a6625 	.word	0x0d0a6625
  409b38:	00000000 	.word	0x00000000
  409b3c:	00676f6c 	.word	0x00676f6c

00409b40 <_global_impure_ptr>:
  409b40:	200000b0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  409b50:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  409b60:	46454443 00000000 33323130 37363534     CDEF....01234567
  409b70:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409b80:	0000296c 00000030                       l)..0...

00409b88 <blanks.7223>:
  409b88:	20202020 20202020 20202020 20202020                     

00409b98 <zeroes.7224>:
  409b98:	30303030 30303030 30303030 30303030     0000000000000000
  409ba8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409bb8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409bc8 <__mprec_bigtens>:
  409bc8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409bd8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409be8:	7f73bf3c 75154fdd                       <.s..O.u

00409bf0 <__mprec_tens>:
  409bf0:	00000000 3ff00000 00000000 40240000     .......?......$@
  409c00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409c10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409c20:	00000000 412e8480 00000000 416312d0     .......A......cA
  409c30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409c40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409c50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409c60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409c70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409c80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409c90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409ca0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409cb0:	79d99db4 44ea7843                       ...yCx.D

00409cb8 <p05.6055>:
  409cb8:	00000005 00000019 0000007d              ........}...

00409cc4 <_ctype_>:
  409cc4:	20202000 20202020 28282020 20282828     .         ((((( 
  409cd4:	20202020 20202020 20202020 20202020                     
  409ce4:	10108820 10101010 10101010 10101010      ...............
  409cf4:	04040410 04040404 10040404 10101010     ................
  409d04:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409d14:	01010101 01010101 01010101 10101010     ................
  409d24:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409d34:	02020202 02020202 02020202 10101010     ................
  409d44:	00000020 00000000 00000000 00000000      ...............
	...

00409dc8 <_init>:
  409dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409dca:	bf00      	nop
  409dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409dce:	bc08      	pop	{r3}
  409dd0:	469e      	mov	lr, r3
  409dd2:	4770      	bx	lr

00409dd4 <__init_array_start>:
  409dd4:	00406fb9 	.word	0x00406fb9

00409dd8 <__frame_dummy_init_array_entry>:
  409dd8:	004000f1                                ..@.

00409ddc <_fini>:
  409ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409dde:	bf00      	nop
  409de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409de2:	bc08      	pop	{r3}
  409de4:	469e      	mov	lr, r3
  409de6:	4770      	bx	lr

00409de8 <__fini_array_start>:
  409de8:	004000cd 	.word	0x004000cd
