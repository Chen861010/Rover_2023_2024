
Science-Mech.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000408c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004d4  20000000  0040408c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006aa8  200004d4  00404560  000204d4  2**2
                  ALLOC
  3 .stack        00003004  20006f7c  0040b008  000204d4  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204fe  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d7f3  00000000  00000000  00020557  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ceb  00000000  00000000  0003dd4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000b80  00000000  00000000  00041a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0001547c  00000000  00000000  000425b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00010485  00000000  00000000  00057a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00052bcb  00000000  00000000  00067eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007cae  00000000  00000000  000baa81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c10  00000000  00000000  000c272f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001de8  00000000  00000000  000c3340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 9f 00 20 51 33 40 00 4d 33 40 00 4d 33 40 00     ... Q3@.M3@.M3@.
  400010:	4d 33 40 00 4d 33 40 00 4d 33 40 00 00 00 00 00     M3@.M3@.M3@.....
	...
  40002c:	4d 33 40 00 4d 33 40 00 00 00 00 00 4d 33 40 00     M3@.M3@.....M3@.
  40003c:	4d 33 40 00 4d 33 40 00 4d 33 40 00 4d 33 40 00     M3@.M3@.M3@.M3@.
  40004c:	4d 33 40 00 4d 33 40 00 4d 33 40 00 4d 33 40 00     M3@.M3@.M3@.M3@.
  40005c:	00 00 00 00 e1 2b 40 00 4d 33 40 00 00 00 00 00     .....+@.M3@.....
  40006c:	89 0c 40 00 9d 0c 40 00 00 00 00 00 4d 33 40 00     ..@...@.....M3@.
	...
  40008c:	4d 33 40 00 4d 33 40 00 4d 33 40 00 4d 33 40 00     M3@.M3@.M3@.M3@.
  40009c:	71 29 40 00 4d 33 40 00 4d 33 40 00 00 00 00 00     q)@.M3@.M3@.....
	...
  4000b4:	4d 33 40 00 00 00 00 00 4d 33 40 00 4d 33 40 00     M3@.....M3@.M3@.
  4000c4:	4d 33 40 00 6d 12 40 00                             M3@.m.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200004d4 	.word	0x200004d4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040408c 	.word	0x0040408c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040408c 	.word	0x0040408c
  40012c:	200004d8 	.word	0x200004d8
  400130:	0040408c 	.word	0x0040408c
  400134:	00000000 	.word	0x00000000

00400138 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400138:	490e      	ldr	r1, [pc, #56]	; (400174 <udi_cdc_comm_enable+0x3c>)
  40013a:	2300      	movs	r3, #0
  40013c:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40013e:	4a0e      	ldr	r2, [pc, #56]	; (400178 <udi_cdc_comm_enable+0x40>)
  400140:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400142:	4a0e      	ldr	r2, [pc, #56]	; (40017c <udi_cdc_comm_enable+0x44>)
  400144:	20a1      	movs	r0, #161	; 0xa1
  400146:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400148:	2020      	movs	r0, #32
  40014a:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40014c:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40014e:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400150:	2002      	movs	r0, #2
  400152:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400154:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400156:	4a0a      	ldr	r2, [pc, #40]	; (400180 <udi_cdc_comm_enable+0x48>)
  400158:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  40015c:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40015e:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400160:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400162:	2308      	movs	r3, #8
  400164:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400166:	780b      	ldrb	r3, [r1, #0]
  400168:	3301      	adds	r3, #1
  40016a:	b2db      	uxtb	r3, r3
  40016c:	700b      	strb	r3, [r1, #0]
	return true;
}
  40016e:	2001      	movs	r0, #1
  400170:	4770      	bx	lr
  400172:	bf00      	nop
  400174:	200004fb 	.word	0x200004fb
  400178:	20000590 	.word	0x20000590
  40017c:	20000628 	.word	0x20000628
  400180:	200004f4 	.word	0x200004f4

00400184 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400184:	4a02      	ldr	r2, [pc, #8]	; (400190 <udi_cdc_comm_disable+0xc>)
  400186:	7813      	ldrb	r3, [r2, #0]
  400188:	3b01      	subs	r3, #1
  40018a:	b2db      	uxtb	r3, r3
  40018c:	7013      	strb	r3, [r2, #0]
  40018e:	4770      	bx	lr
  400190:	200004fb 	.word	0x200004fb

00400194 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400194:	4a04      	ldr	r2, [pc, #16]	; (4001a8 <udi_cdc_data_disable+0x14>)
  400196:	7813      	ldrb	r3, [r2, #0]
  400198:	3b01      	subs	r3, #1
  40019a:	b2db      	uxtb	r3, r3
  40019c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  40019e:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4001a0:	2200      	movs	r2, #0
  4001a2:	4b02      	ldr	r3, [pc, #8]	; (4001ac <udi_cdc_data_disable+0x18>)
  4001a4:	701a      	strb	r2, [r3, #0]
  4001a6:	4770      	bx	lr
  4001a8:	200004fc 	.word	0x200004fc
  4001ac:	200004f2 	.word	0x200004f2

004001b0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4001b0:	2000      	movs	r0, #0
  4001b2:	4770      	bx	lr

004001b4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4001b4:	2000      	movs	r0, #0
  4001b6:	4770      	bx	lr

004001b8 <udi_cdc_comm_setup>:
	if (Udd_setup_is_in()) {
  4001b8:	4b1d      	ldr	r3, [pc, #116]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001ba:	781b      	ldrb	r3, [r3, #0]
  4001bc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4001c0:	d105      	bne.n	4001ce <udi_cdc_comm_setup+0x16>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001c6:	2b20      	cmp	r3, #32
  4001c8:	d018      	beq.n	4001fc <udi_cdc_comm_setup+0x44>
	return false;  // request Not supported
  4001ca:	2000      	movs	r0, #0
  4001cc:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4001ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4001d2:	2b20      	cmp	r3, #32
  4001d4:	d001      	beq.n	4001da <udi_cdc_comm_setup+0x22>
	return false;  // request Not supported
  4001d6:	2000      	movs	r0, #0
  4001d8:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001da:	4b15      	ldr	r3, [pc, #84]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001dc:	785b      	ldrb	r3, [r3, #1]
  4001de:	2b21      	cmp	r3, #33	; 0x21
  4001e0:	d124      	bne.n	40022c <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
  4001e2:	4b13      	ldr	r3, [pc, #76]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  4001e4:	88db      	ldrh	r3, [r3, #6]
  4001e6:	2b07      	cmp	r3, #7
  4001e8:	d001      	beq.n	4001ee <udi_cdc_comm_setup+0x36>
					return false; // Error for USB host
  4001ea:	2000      	movs	r0, #0
  4001ec:	4770      	bx	lr
				udd_g_ctrlreq.payload =
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <udi_cdc_comm_setup+0x7c>)
  4001f2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  4001f4:	2207      	movs	r2, #7
  4001f6:	819a      	strh	r2, [r3, #12]
				return true;
  4001f8:	2001      	movs	r0, #1
  4001fa:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
  4001fc:	4b0c      	ldr	r3, [pc, #48]	; (400230 <udi_cdc_comm_setup+0x78>)
  4001fe:	7858      	ldrb	r0, [r3, #1]
  400200:	2820      	cmp	r0, #32
  400202:	d004      	beq.n	40020e <udi_cdc_comm_setup+0x56>
	return false;  // request Not supported
  400204:	2822      	cmp	r0, #34	; 0x22
  400206:	bf14      	ite	ne
  400208:	2000      	movne	r0, #0
  40020a:	2001      	moveq	r0, #1
  40020c:	4770      	bx	lr
						udd_g_ctrlreq.req.wLength)
  40020e:	4b08      	ldr	r3, [pc, #32]	; (400230 <udi_cdc_comm_setup+0x78>)
				if (sizeof(usb_cdc_line_coding_t) !=
  400210:	88db      	ldrh	r3, [r3, #6]
  400212:	2b07      	cmp	r3, #7
  400214:	d001      	beq.n	40021a <udi_cdc_comm_setup+0x62>
					return false; // Error for USB host
  400216:	2000      	movs	r0, #0
}
  400218:	4770      	bx	lr
				udd_g_ctrlreq.callback =
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <udi_cdc_comm_setup+0x78>)
  40021c:	4a06      	ldr	r2, [pc, #24]	; (400238 <udi_cdc_comm_setup+0x80>)
  40021e:	611a      	str	r2, [r3, #16]
				udd_g_ctrlreq.payload =
  400220:	4a04      	ldr	r2, [pc, #16]	; (400234 <udi_cdc_comm_setup+0x7c>)
  400222:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
  400224:	2207      	movs	r2, #7
  400226:	819a      	strh	r2, [r3, #12]
				return true;
  400228:	2001      	movs	r0, #1
  40022a:	4770      	bx	lr
	return false;  // request Not supported
  40022c:	2000      	movs	r0, #0
  40022e:	4770      	bx	lr
  400230:	20002718 	.word	0x20002718
  400234:	200004f4 	.word	0x200004f4
  400238:	0040023d 	.word	0x0040023d

0040023c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  40023c:	4770      	bx	lr
	...

00400240 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400240:	4b44      	ldr	r3, [pc, #272]	; (400354 <udi_cdc_tx_send+0x114>)
  400242:	781b      	ldrb	r3, [r3, #0]
  400244:	b103      	cbz	r3, 400248 <udi_cdc_tx_send+0x8>
  400246:	4770      	bx	lr
{
  400248:	b570      	push	{r4, r5, r6, lr}
  40024a:	b084      	sub	sp, #16
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40024c:	4b42      	ldr	r3, [pc, #264]	; (400358 <udi_cdc_tx_send+0x118>)
  40024e:	4798      	blx	r3
  400250:	2800      	cmp	r0, #0
  400252:	d041      	beq.n	4002d8 <udi_cdc_tx_send+0x98>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400254:	4b41      	ldr	r3, [pc, #260]	; (40035c <udi_cdc_tx_send+0x11c>)
  400256:	881c      	ldrh	r4, [r3, #0]
  400258:	4b41      	ldr	r3, [pc, #260]	; (400360 <udi_cdc_tx_send+0x120>)
  40025a:	4798      	blx	r3
  40025c:	4284      	cmp	r4, r0
  40025e:	d076      	beq.n	40034e <udi_cdc_tx_send+0x10e>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400260:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400264:	fab3 f383 	clz	r3, r3
  400268:	095b      	lsrs	r3, r3, #5
  40026a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  40026c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40026e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400272:	2200      	movs	r2, #0
  400274:	4b3b      	ldr	r3, [pc, #236]	; (400364 <udi_cdc_tx_send+0x124>)
  400276:	701a      	strb	r2, [r3, #0]
	return flags;
  400278:	9d03      	ldr	r5, [sp, #12]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40027a:	4b3b      	ldr	r3, [pc, #236]	; (400368 <udi_cdc_tx_send+0x128>)
  40027c:	781c      	ldrb	r4, [r3, #0]
  40027e:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400280:	4b3a      	ldr	r3, [pc, #232]	; (40036c <udi_cdc_tx_send+0x12c>)
  400282:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400286:	2b00      	cmp	r3, #0
  400288:	d02d      	beq.n	4002e6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40028a:	2200      	movs	r2, #0
  40028c:	4b38      	ldr	r3, [pc, #224]	; (400370 <udi_cdc_tx_send+0x130>)
  40028e:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400290:	4b38      	ldr	r3, [pc, #224]	; (400374 <udi_cdc_tx_send+0x134>)
  400292:	781b      	ldrb	r3, [r3, #0]
  400294:	2b00      	cmp	r3, #0
  400296:	d142      	bne.n	40031e <udi_cdc_tx_send+0xde>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400298:	fab4 f384 	clz	r3, r4
  40029c:	095b      	lsrs	r3, r3, #5
  40029e:	4a32      	ldr	r2, [pc, #200]	; (400368 <udi_cdc_tx_send+0x128>)
  4002a0:	7013      	strb	r3, [r2, #0]
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002a2:	2201      	movs	r2, #1
  4002a4:	4b2b      	ldr	r3, [pc, #172]	; (400354 <udi_cdc_tx_send+0x114>)
  4002a6:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002a8:	b125      	cbz	r5, 4002b4 <udi_cdc_tx_send+0x74>
		cpu_irq_enable();
  4002aa:	4b2e      	ldr	r3, [pc, #184]	; (400364 <udi_cdc_tx_send+0x124>)
  4002ac:	701a      	strb	r2, [r3, #0]
  4002ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4002b2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4002b4:	4626      	mov	r6, r4
  4002b6:	4b2d      	ldr	r3, [pc, #180]	; (40036c <udi_cdc_tx_send+0x12c>)
  4002b8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4002bc:	2b40      	cmp	r3, #64	; 0x40
  4002be:	bf14      	ite	ne
  4002c0:	2501      	movne	r5, #1
  4002c2:	2500      	moveq	r5, #0
	if (b_short_packet) {
  4002c4:	d034      	beq.n	400330 <udi_cdc_tx_send+0xf0>
		if (udd_is_high_speed()) {
  4002c6:	4b24      	ldr	r3, [pc, #144]	; (400358 <udi_cdc_tx_send+0x118>)
  4002c8:	4798      	blx	r3
  4002ca:	2800      	cmp	r0, #0
  4002cc:	d02b      	beq.n	400326 <udi_cdc_tx_send+0xe6>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4002ce:	4b24      	ldr	r3, [pc, #144]	; (400360 <udi_cdc_tx_send+0x120>)
  4002d0:	4798      	blx	r3
  4002d2:	4b22      	ldr	r3, [pc, #136]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002d4:	8018      	strh	r0, [r3, #0]
  4002d6:	e02e      	b.n	400336 <udi_cdc_tx_send+0xf6>
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4002d8:	4b20      	ldr	r3, [pc, #128]	; (40035c <udi_cdc_tx_send+0x11c>)
  4002da:	881c      	ldrh	r4, [r3, #0]
  4002dc:	4b26      	ldr	r3, [pc, #152]	; (400378 <udi_cdc_tx_send+0x138>)
  4002de:	4798      	blx	r3
  4002e0:	4284      	cmp	r4, r0
  4002e2:	d1bd      	bne.n	400260 <udi_cdc_tx_send+0x20>
  4002e4:	e033      	b.n	40034e <udi_cdc_tx_send+0x10e>
		sof_zlp_counter++;
  4002e6:	4a22      	ldr	r2, [pc, #136]	; (400370 <udi_cdc_tx_send+0x130>)
  4002e8:	8813      	ldrh	r3, [r2, #0]
  4002ea:	3301      	adds	r3, #1
  4002ec:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002ee:	4b1a      	ldr	r3, [pc, #104]	; (400358 <udi_cdc_tx_send+0x118>)
  4002f0:	4798      	blx	r3
  4002f2:	b918      	cbnz	r0, 4002fc <udi_cdc_tx_send+0xbc>
  4002f4:	4b1e      	ldr	r3, [pc, #120]	; (400370 <udi_cdc_tx_send+0x130>)
  4002f6:	881b      	ldrh	r3, [r3, #0]
  4002f8:	2b63      	cmp	r3, #99	; 0x63
  4002fa:	d908      	bls.n	40030e <udi_cdc_tx_send+0xce>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4002fc:	4b16      	ldr	r3, [pc, #88]	; (400358 <udi_cdc_tx_send+0x118>)
  4002fe:	4798      	blx	r3
  400300:	2800      	cmp	r0, #0
  400302:	d0c2      	beq.n	40028a <udi_cdc_tx_send+0x4a>
  400304:	4b1a      	ldr	r3, [pc, #104]	; (400370 <udi_cdc_tx_send+0x130>)
  400306:	881b      	ldrh	r3, [r3, #0]
  400308:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40030c:	d2bd      	bcs.n	40028a <udi_cdc_tx_send+0x4a>
	if (cpu_irq_is_enabled_flags(flags))
  40030e:	b1f5      	cbz	r5, 40034e <udi_cdc_tx_send+0x10e>
		cpu_irq_enable();
  400310:	2201      	movs	r2, #1
  400312:	4b14      	ldr	r3, [pc, #80]	; (400364 <udi_cdc_tx_send+0x124>)
  400314:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400316:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40031a:	b662      	cpsie	i
  40031c:	e017      	b.n	40034e <udi_cdc_tx_send+0x10e>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40031e:	fab4 f484 	clz	r4, r4
  400322:	0964      	lsrs	r4, r4, #5
  400324:	e7bd      	b.n	4002a2 <udi_cdc_tx_send+0x62>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400326:	4b14      	ldr	r3, [pc, #80]	; (400378 <udi_cdc_tx_send+0x138>)
  400328:	4798      	blx	r3
  40032a:	4b0c      	ldr	r3, [pc, #48]	; (40035c <udi_cdc_tx_send+0x11c>)
  40032c:	8018      	strh	r0, [r3, #0]
  40032e:	e002      	b.n	400336 <udi_cdc_tx_send+0xf6>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400330:	2200      	movs	r2, #0
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <udi_cdc_tx_send+0x11c>)
  400334:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400336:	4b0d      	ldr	r3, [pc, #52]	; (40036c <udi_cdc_tx_send+0x12c>)
	udd_ep_run( ep,
  400338:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
  40033c:	4a0f      	ldr	r2, [pc, #60]	; (40037c <udi_cdc_tx_send+0x13c>)
  40033e:	9200      	str	r2, [sp, #0]
  400340:	4a0f      	ldr	r2, [pc, #60]	; (400380 <udi_cdc_tx_send+0x140>)
  400342:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400346:	4629      	mov	r1, r5
  400348:	2081      	movs	r0, #129	; 0x81
  40034a:	4c0e      	ldr	r4, [pc, #56]	; (400384 <udi_cdc_tx_send+0x144>)
  40034c:	47a0      	blx	r4
			udi_cdc_data_sent);
}
  40034e:	b004      	add	sp, #16
  400350:	bd70      	pop	{r4, r5, r6, pc}
  400352:	bf00      	nop
  400354:	20000624 	.word	0x20000624
  400358:	00401ccd 	.word	0x00401ccd
  40035c:	20000620 	.word	0x20000620
  400360:	00401d39 	.word	0x00401d39
  400364:	200000a0 	.word	0x200000a0
  400368:	2000061c 	.word	0x2000061c
  40036c:	20000618 	.word	0x20000618
  400370:	200004f0 	.word	0x200004f0
  400374:	20000594 	.word	0x20000594
  400378:	00401d29 	.word	0x00401d29
  40037c:	00400389 	.word	0x00400389
  400380:	20000598 	.word	0x20000598
  400384:	00402091 	.word	0x00402091

00400388 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
  400388:	b100      	cbz	r0, 40038c <udi_cdc_data_sent+0x4>
  40038a:	4770      	bx	lr
{
  40038c:	b508      	push	{r3, lr}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40038e:	4b07      	ldr	r3, [pc, #28]	; (4003ac <udi_cdc_data_sent+0x24>)
  400390:	781b      	ldrb	r3, [r3, #0]
  400392:	fab3 f383 	clz	r3, r3
  400396:	095b      	lsrs	r3, r3, #5
  400398:	4a05      	ldr	r2, [pc, #20]	; (4003b0 <udi_cdc_data_sent+0x28>)
  40039a:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40039e:	4b05      	ldr	r3, [pc, #20]	; (4003b4 <udi_cdc_data_sent+0x2c>)
  4003a0:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003a2:	4b05      	ldr	r3, [pc, #20]	; (4003b8 <udi_cdc_data_sent+0x30>)
  4003a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_send(port);
  4003a6:	4b05      	ldr	r3, [pc, #20]	; (4003bc <udi_cdc_data_sent+0x34>)
  4003a8:	4798      	blx	r3
  4003aa:	bd08      	pop	{r3, pc}
  4003ac:	2000061c 	.word	0x2000061c
  4003b0:	20000618 	.word	0x20000618
  4003b4:	20000594 	.word	0x20000594
  4003b8:	20000624 	.word	0x20000624
  4003bc:	00400241 	.word	0x00400241

004003c0 <udi_cdc_data_sof_notify>:
{
  4003c0:	b508      	push	{r3, lr}
	udi_cdc_tx_send(port_notify);
  4003c2:	2000      	movs	r0, #0
  4003c4:	4b01      	ldr	r3, [pc, #4]	; (4003cc <udi_cdc_data_sof_notify+0xc>)
  4003c6:	4798      	blx	r3
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	00400241 	.word	0x00400241

004003d0 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  4003d0:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003d2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4003d6:	fab3 f383 	clz	r3, r3
  4003da:	095b      	lsrs	r3, r3, #5
  4003dc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4003de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4003e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4003e4:	2200      	movs	r2, #0
  4003e6:	4b0b      	ldr	r3, [pc, #44]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  4003e8:	701a      	strb	r2, [r3, #0]
	return flags;
  4003ea:	9901      	ldr	r1, [sp, #4]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4003ec:	4b0a      	ldr	r3, [pc, #40]	; (400418 <udi_cdc_multi_get_nb_received_data+0x48>)
  4003ee:	8818      	ldrh	r0, [r3, #0]
  4003f0:	b283      	uxth	r3, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4003f2:	4a0a      	ldr	r2, [pc, #40]	; (40041c <udi_cdc_multi_get_nb_received_data+0x4c>)
  4003f4:	7812      	ldrb	r2, [r2, #0]
  4003f6:	b2d2      	uxtb	r2, r2
  4003f8:	4809      	ldr	r0, [pc, #36]	; (400420 <udi_cdc_multi_get_nb_received_data+0x50>)
  4003fa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
  4003fe:	b280      	uxth	r0, r0
  400400:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
  400402:	b129      	cbz	r1, 400410 <udi_cdc_multi_get_nb_received_data+0x40>
		cpu_irq_enable();
  400404:	2201      	movs	r2, #1
  400406:	4b03      	ldr	r3, [pc, #12]	; (400414 <udi_cdc_multi_get_nb_received_data+0x44>)
  400408:	701a      	strb	r2, [r3, #0]
  40040a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40040e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400410:	b002      	add	sp, #8
  400412:	4770      	bx	lr
  400414:	200000a0 	.word	0x200000a0
  400418:	20000588 	.word	0x20000588
  40041c:	20000584 	.word	0x20000584
  400420:	20000580 	.word	0x20000580

00400424 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400424:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400426:	4b03      	ldr	r3, [pc, #12]	; (400434 <udi_cdc_multi_is_rx_ready+0x10>)
  400428:	4798      	blx	r3
}
  40042a:	3000      	adds	r0, #0
  40042c:	bf18      	it	ne
  40042e:	2001      	movne	r0, #1
  400430:	bd08      	pop	{r3, pc}
  400432:	bf00      	nop
  400434:	004003d1 	.word	0x004003d1

00400438 <udi_cdc_rx_start>:
{
  400438:	b510      	push	{r4, lr}
  40043a:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40043c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400440:	fab3 f383 	clz	r3, r3
  400444:	095b      	lsrs	r3, r3, #5
  400446:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  400448:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40044a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40044e:	2200      	movs	r2, #0
  400450:	4b1e      	ldr	r3, [pc, #120]	; (4004cc <udi_cdc_rx_start+0x94>)
  400452:	701a      	strb	r2, [r3, #0]
	return flags;
  400454:	9b03      	ldr	r3, [sp, #12]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400456:	4a1e      	ldr	r2, [pc, #120]	; (4004d0 <udi_cdc_rx_start+0x98>)
  400458:	7814      	ldrb	r4, [r2, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
  40045a:	4a1e      	ldr	r2, [pc, #120]	; (4004d4 <udi_cdc_rx_start+0x9c>)
  40045c:	7812      	ldrb	r2, [r2, #0]
  40045e:	b94a      	cbnz	r2, 400474 <udi_cdc_rx_start+0x3c>
  400460:	b2e4      	uxtb	r4, r4
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400462:	4a1d      	ldr	r2, [pc, #116]	; (4004d8 <udi_cdc_rx_start+0xa0>)
  400464:	8811      	ldrh	r1, [r2, #0]
  400466:	b289      	uxth	r1, r1
  400468:	4a1c      	ldr	r2, [pc, #112]	; (4004dc <udi_cdc_rx_start+0xa4>)
  40046a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  40046e:	b292      	uxth	r2, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  400470:	4291      	cmp	r1, r2
  400472:	d209      	bcs.n	400488 <udi_cdc_rx_start+0x50>
	if (cpu_irq_is_enabled_flags(flags))
  400474:	b33b      	cbz	r3, 4004c6 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400476:	2201      	movs	r2, #1
  400478:	4b14      	ldr	r3, [pc, #80]	; (4004cc <udi_cdc_rx_start+0x94>)
  40047a:	701a      	strb	r2, [r3, #0]
  40047c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400480:	b662      	cpsie	i
		return false;
  400482:	2000      	movs	r0, #0
}
  400484:	b004      	add	sp, #16
  400486:	bd10      	pop	{r4, pc}
	udi_cdc_rx_pos[port] = 0;
  400488:	2100      	movs	r1, #0
  40048a:	4a13      	ldr	r2, [pc, #76]	; (4004d8 <udi_cdc_rx_start+0xa0>)
  40048c:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40048e:	fab4 f284 	clz	r2, r4
  400492:	0952      	lsrs	r2, r2, #5
  400494:	490e      	ldr	r1, [pc, #56]	; (4004d0 <udi_cdc_rx_start+0x98>)
  400496:	700a      	strb	r2, [r1, #0]
	udi_cdc_rx_trans_ongoing[port] = true;
  400498:	2101      	movs	r1, #1
  40049a:	4a0e      	ldr	r2, [pc, #56]	; (4004d4 <udi_cdc_rx_start+0x9c>)
  40049c:	7011      	strb	r1, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  40049e:	b123      	cbz	r3, 4004aa <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004a0:	4b0a      	ldr	r3, [pc, #40]	; (4004cc <udi_cdc_rx_start+0x94>)
  4004a2:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4004a4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004a8:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
  4004aa:	2000      	movs	r0, #0
  4004ac:	4b0c      	ldr	r3, [pc, #48]	; (4004e0 <udi_cdc_rx_start+0xa8>)
  4004ae:	4798      	blx	r3
	return udd_ep_run(ep,
  4004b0:	4b0c      	ldr	r3, [pc, #48]	; (4004e4 <udi_cdc_rx_start+0xac>)
  4004b2:	9300      	str	r3, [sp, #0]
  4004b4:	2340      	movs	r3, #64	; 0x40
  4004b6:	4a0c      	ldr	r2, [pc, #48]	; (4004e8 <udi_cdc_rx_start+0xb0>)
  4004b8:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004bc:	2101      	movs	r1, #1
  4004be:	2002      	movs	r0, #2
  4004c0:	4c0a      	ldr	r4, [pc, #40]	; (4004ec <udi_cdc_rx_start+0xb4>)
  4004c2:	47a0      	blx	r4
  4004c4:	e7de      	b.n	400484 <udi_cdc_rx_start+0x4c>
		return false;
  4004c6:	2000      	movs	r0, #0
  4004c8:	e7dc      	b.n	400484 <udi_cdc_rx_start+0x4c>
  4004ca:	bf00      	nop
  4004cc:	200000a0 	.word	0x200000a0
  4004d0:	20000584 	.word	0x20000584
  4004d4:	2000058c 	.word	0x2000058c
  4004d8:	20000588 	.word	0x20000588
  4004dc:	20000580 	.word	0x20000580
  4004e0:	00400425 	.word	0x00400425
  4004e4:	00400585 	.word	0x00400585
  4004e8:	20000500 	.word	0x20000500
  4004ec:	00402091 	.word	0x00402091

004004f0 <udi_cdc_data_enable>:
{
  4004f0:	b510      	push	{r4, lr}
	udi_cdc_nb_data_enabled = 0;
  4004f2:	2400      	movs	r4, #0
  4004f4:	4b16      	ldr	r3, [pc, #88]	; (400550 <udi_cdc_data_enable+0x60>)
  4004f6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4004f8:	4b16      	ldr	r3, [pc, #88]	; (400554 <udi_cdc_data_enable+0x64>)
  4004fa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4004fc:	4b16      	ldr	r3, [pc, #88]	; (400558 <udi_cdc_data_enable+0x68>)
  4004fe:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400500:	4b16      	ldr	r3, [pc, #88]	; (40055c <udi_cdc_data_enable+0x6c>)
  400502:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400504:	4b16      	ldr	r3, [pc, #88]	; (400560 <udi_cdc_data_enable+0x70>)
  400506:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400508:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40050a:	4b16      	ldr	r3, [pc, #88]	; (400564 <udi_cdc_data_enable+0x74>)
  40050c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40050e:	4620      	mov	r0, r4
  400510:	4b15      	ldr	r3, [pc, #84]	; (400568 <udi_cdc_data_enable+0x78>)
  400512:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
  400514:	4b15      	ldr	r3, [pc, #84]	; (40056c <udi_cdc_data_enable+0x7c>)
  400516:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400518:	4b15      	ldr	r3, [pc, #84]	; (400570 <udi_cdc_data_enable+0x80>)
  40051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40051c:	4b15      	ldr	r3, [pc, #84]	; (400574 <udi_cdc_data_enable+0x84>)
  40051e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  400520:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  400522:	4b15      	ldr	r3, [pc, #84]	; (400578 <udi_cdc_data_enable+0x88>)
  400524:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400526:	4620      	mov	r0, r4
  400528:	4b14      	ldr	r3, [pc, #80]	; (40057c <udi_cdc_data_enable+0x8c>)
  40052a:	4798      	blx	r3
  40052c:	4601      	mov	r1, r0
  40052e:	b140      	cbz	r0, 400542 <udi_cdc_data_enable+0x52>
	udi_cdc_nb_data_enabled++;
  400530:	4a07      	ldr	r2, [pc, #28]	; (400550 <udi_cdc_data_enable+0x60>)
  400532:	7813      	ldrb	r3, [r2, #0]
  400534:	3301      	adds	r3, #1
  400536:	b2db      	uxtb	r3, r3
  400538:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  40053a:	7813      	ldrb	r3, [r2, #0]
  40053c:	b2db      	uxtb	r3, r3
  40053e:	2b01      	cmp	r3, #1
  400540:	d001      	beq.n	400546 <udi_cdc_data_enable+0x56>
}
  400542:	4608      	mov	r0, r1
  400544:	bd10      	pop	{r4, pc}
		udi_cdc_data_running = true;
  400546:	2201      	movs	r2, #1
  400548:	4b0d      	ldr	r3, [pc, #52]	; (400580 <udi_cdc_data_enable+0x90>)
  40054a:	701a      	strb	r2, [r3, #0]
  40054c:	e7f9      	b.n	400542 <udi_cdc_data_enable+0x52>
  40054e:	bf00      	nop
  400550:	200004fc 	.word	0x200004fc
  400554:	20000624 	.word	0x20000624
  400558:	20000594 	.word	0x20000594
  40055c:	2000061c 	.word	0x2000061c
  400560:	20000618 	.word	0x20000618
  400564:	20000620 	.word	0x20000620
  400568:	00400241 	.word	0x00400241
  40056c:	2000058c 	.word	0x2000058c
  400570:	20000584 	.word	0x20000584
  400574:	20000580 	.word	0x20000580
  400578:	20000588 	.word	0x20000588
  40057c:	00400439 	.word	0x00400439
  400580:	200004f2 	.word	0x200004f2

00400584 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
  400584:	b9e8      	cbnz	r0, 4005c2 <udi_cdc_data_received+0x3e>
{
  400586:	b510      	push	{r4, lr}
  400588:	b082      	sub	sp, #8
  40058a:	4610      	mov	r0, r2
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  40058c:	4b0d      	ldr	r3, [pc, #52]	; (4005c4 <udi_cdc_data_received+0x40>)
  40058e:	781c      	ldrb	r4, [r3, #0]
  400590:	fab4 f484 	clz	r4, r4
  400594:	0964      	lsrs	r4, r4, #5
	if (!n) {
  400596:	b151      	cbz	r1, 4005ae <udi_cdc_data_received+0x2a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400598:	b289      	uxth	r1, r1
  40059a:	4b0b      	ldr	r3, [pc, #44]	; (4005c8 <udi_cdc_data_received+0x44>)
  40059c:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005a0:	2000      	movs	r0, #0
  4005a2:	4b0a      	ldr	r3, [pc, #40]	; (4005cc <udi_cdc_data_received+0x48>)
  4005a4:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005a6:	4b0a      	ldr	r3, [pc, #40]	; (4005d0 <udi_cdc_data_received+0x4c>)
  4005a8:	4798      	blx	r3
}
  4005aa:	b002      	add	sp, #8
  4005ac:	bd10      	pop	{r4, pc}
		udd_ep_run( ep,
  4005ae:	4b09      	ldr	r3, [pc, #36]	; (4005d4 <udi_cdc_data_received+0x50>)
  4005b0:	9300      	str	r3, [sp, #0]
  4005b2:	2340      	movs	r3, #64	; 0x40
  4005b4:	4a08      	ldr	r2, [pc, #32]	; (4005d8 <udi_cdc_data_received+0x54>)
  4005b6:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4005ba:	2101      	movs	r1, #1
  4005bc:	4c07      	ldr	r4, [pc, #28]	; (4005dc <udi_cdc_data_received+0x58>)
  4005be:	47a0      	blx	r4
		return;
  4005c0:	e7f3      	b.n	4005aa <udi_cdc_data_received+0x26>
  4005c2:	4770      	bx	lr
  4005c4:	20000584 	.word	0x20000584
  4005c8:	20000580 	.word	0x20000580
  4005cc:	2000058c 	.word	0x2000058c
  4005d0:	00400439 	.word	0x00400439
  4005d4:	00400585 	.word	0x00400585
  4005d8:	20000500 	.word	0x20000500
  4005dc:	00402091 	.word	0x00402091

004005e0 <udc_next_desc_in_iface>:
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  4005e0:	4b10      	ldr	r3, [pc, #64]	; (400624 <udc_next_desc_in_iface+0x44>)
  4005e2:	681b      	ldr	r3, [r3, #0]
  4005e4:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4005e6:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4005e8:	441a      	add	r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  4005ea:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4005ec:	4418      	add	r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4005ee:	4290      	cmp	r0, r2
  4005f0:	d211      	bcs.n	400616 <udc_next_desc_in_iface+0x36>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4005f2:	7843      	ldrb	r3, [r0, #1]
  4005f4:	2b04      	cmp	r3, #4
  4005f6:	d010      	beq.n	40061a <udc_next_desc_in_iface+0x3a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  4005f8:	428b      	cmp	r3, r1
  4005fa:	d009      	beq.n	400610 <udc_next_desc_in_iface+0x30>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  4005fc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4005fe:	4418      	add	r0, r3
	while (ptr_eof_desc > desc) {
  400600:	4290      	cmp	r0, r2
  400602:	d206      	bcs.n	400612 <udc_next_desc_in_iface+0x32>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400604:	7843      	ldrb	r3, [r0, #1]
  400606:	2b04      	cmp	r3, #4
  400608:	d009      	beq.n	40061e <udc_next_desc_in_iface+0x3e>
		if (desc_id == desc->bDescriptorType) {
  40060a:	428b      	cmp	r3, r1
  40060c:	d1f6      	bne.n	4005fc <udc_next_desc_in_iface+0x1c>
  40060e:	e007      	b.n	400620 <udc_next_desc_in_iface+0x40>
  400610:	4770      	bx	lr
	}
	return NULL; // No specific descriptor found
  400612:	2000      	movs	r0, #0
  400614:	4770      	bx	lr
  400616:	2000      	movs	r0, #0
  400618:	4770      	bx	lr
  40061a:	2000      	movs	r0, #0
  40061c:	4770      	bx	lr
  40061e:	2000      	movs	r0, #0
}
  400620:	4770      	bx	lr
  400622:	bf00      	nop
  400624:	20000640 	.word	0x20000640

00400628 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400628:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  40062a:	4b03      	ldr	r3, [pc, #12]	; (400638 <udc_valid_address+0x10>)
  40062c:	7898      	ldrb	r0, [r3, #2]
  40062e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400632:	4b02      	ldr	r3, [pc, #8]	; (40063c <udc_valid_address+0x14>)
  400634:	4798      	blx	r3
  400636:	bd08      	pop	{r3, pc}
  400638:	20002718 	.word	0x20002718
  40063c:	00401cd1 	.word	0x00401cd1

00400640 <udc_update_iface_desc>:
	if (0 == udc_num_configuration) {
  400640:	4b19      	ldr	r3, [pc, #100]	; (4006a8 <udc_update_iface_desc+0x68>)
  400642:	781b      	ldrb	r3, [r3, #0]
  400644:	b34b      	cbz	r3, 40069a <udc_update_iface_desc+0x5a>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400646:	4b19      	ldr	r3, [pc, #100]	; (4006ac <udc_update_iface_desc+0x6c>)
  400648:	681b      	ldr	r3, [r3, #0]
  40064a:	681b      	ldr	r3, [r3, #0]
  40064c:	791a      	ldrb	r2, [r3, #4]
  40064e:	4282      	cmp	r2, r0
  400650:	d925      	bls.n	40069e <udc_update_iface_desc+0x5e>
{
  400652:	b470      	push	{r4, r5, r6}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400654:	4a16      	ldr	r2, [pc, #88]	; (4006b0 <udc_update_iface_desc+0x70>)
  400656:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400658:	885c      	ldrh	r4, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40065a:	441c      	add	r4, r3
	while (ptr_end_desc >
  40065c:	42a3      	cmp	r3, r4
  40065e:	d220      	bcs.n	4006a2 <udc_update_iface_desc+0x62>
  400660:	2500      	movs	r5, #0
  400662:	2601      	movs	r6, #1
  400664:	e007      	b.n	400676 <udc_update_iface_desc+0x36>
  400666:	4a12      	ldr	r2, [pc, #72]	; (4006b0 <udc_update_iface_desc+0x70>)
  400668:	6013      	str	r3, [r2, #0]
  40066a:	e00f      	b.n	40068c <udc_update_iface_desc+0x4c>
				udc_ptr_iface->bLength);
  40066c:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  40066e:	4413      	add	r3, r2
  400670:	4635      	mov	r5, r6
	while (ptr_end_desc >
  400672:	42a3      	cmp	r3, r4
  400674:	d20c      	bcs.n	400690 <udc_update_iface_desc+0x50>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400676:	785a      	ldrb	r2, [r3, #1]
  400678:	2a04      	cmp	r2, #4
  40067a:	d1f7      	bne.n	40066c <udc_update_iface_desc+0x2c>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40067c:	789a      	ldrb	r2, [r3, #2]
  40067e:	4282      	cmp	r2, r0
  400680:	d1f4      	bne.n	40066c <udc_update_iface_desc+0x2c>
  400682:	78da      	ldrb	r2, [r3, #3]
  400684:	428a      	cmp	r2, r1
  400686:	d1f1      	bne.n	40066c <udc_update_iface_desc+0x2c>
  400688:	2d00      	cmp	r5, #0
  40068a:	d1ec      	bne.n	400666 <udc_update_iface_desc+0x26>
				return true; // Interface found
  40068c:	2001      	movs	r0, #1
  40068e:	e002      	b.n	400696 <udc_update_iface_desc+0x56>
  400690:	4a07      	ldr	r2, [pc, #28]	; (4006b0 <udc_update_iface_desc+0x70>)
  400692:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
  400694:	2000      	movs	r0, #0
}
  400696:	bc70      	pop	{r4, r5, r6}
  400698:	4770      	bx	lr
		return false;
  40069a:	2000      	movs	r0, #0
  40069c:	4770      	bx	lr
		return false;
  40069e:	2000      	movs	r0, #0
  4006a0:	4770      	bx	lr
	return false; // Interface not found
  4006a2:	2000      	movs	r0, #0
  4006a4:	e7f7      	b.n	400696 <udc_update_iface_desc+0x56>
  4006a6:	bf00      	nop
  4006a8:	2000063c 	.word	0x2000063c
  4006ac:	20000640 	.word	0x20000640
  4006b0:	20000644 	.word	0x20000644

004006b4 <udc_iface_disable>:
{
  4006b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006b8:	4604      	mov	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
  4006ba:	2100      	movs	r1, #0
  4006bc:	4b13      	ldr	r3, [pc, #76]	; (40070c <udc_iface_disable+0x58>)
  4006be:	4798      	blx	r3
  4006c0:	4680      	mov	r8, r0
  4006c2:	b910      	cbnz	r0, 4006ca <udc_iface_disable+0x16>
}
  4006c4:	4640      	mov	r0, r8
  4006c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4006ca:	4b11      	ldr	r3, [pc, #68]	; (400710 <udc_iface_disable+0x5c>)
  4006cc:	681b      	ldr	r3, [r3, #0]
  4006ce:	685b      	ldr	r3, [r3, #4]
  4006d0:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4006d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4006d8:	4798      	blx	r3
  4006da:	4601      	mov	r1, r0
  4006dc:	4620      	mov	r0, r4
  4006de:	4b0b      	ldr	r3, [pc, #44]	; (40070c <udc_iface_disable+0x58>)
  4006e0:	4798      	blx	r3
  4006e2:	4680      	mov	r8, r0
  4006e4:	2800      	cmp	r0, #0
  4006e6:	d0ed      	beq.n	4006c4 <udc_iface_disable+0x10>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4006e8:	4b0a      	ldr	r3, [pc, #40]	; (400714 <udc_iface_disable+0x60>)
  4006ea:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4006ec:	2605      	movs	r6, #5
  4006ee:	4d0a      	ldr	r5, [pc, #40]	; (400718 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
  4006f0:	4f0a      	ldr	r7, [pc, #40]	; (40071c <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4006f2:	4631      	mov	r1, r6
  4006f4:	4620      	mov	r0, r4
  4006f6:	47a8      	blx	r5
			if (NULL == ep_desc) {
  4006f8:	4604      	mov	r4, r0
  4006fa:	b110      	cbz	r0, 400702 <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
  4006fc:	7880      	ldrb	r0, [r0, #2]
  4006fe:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400700:	e7f7      	b.n	4006f2 <udc_iface_disable+0x3e>
	udi_api->disable();
  400702:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400706:	4798      	blx	r3
	return true;
  400708:	e7dc      	b.n	4006c4 <udc_iface_disable+0x10>
  40070a:	bf00      	nop
  40070c:	00400641 	.word	0x00400641
  400710:	20000640 	.word	0x20000640
  400714:	20000644 	.word	0x20000644
  400718:	004005e1 	.word	0x004005e1
  40071c:	00401e41 	.word	0x00401e41

00400720 <udc_iface_enable>:
{
  400720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400724:	4680      	mov	r8, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400726:	4b10      	ldr	r3, [pc, #64]	; (400768 <udc_iface_enable+0x48>)
  400728:	4798      	blx	r3
  40072a:	4603      	mov	r3, r0
  40072c:	b1c8      	cbz	r0, 400762 <udc_iface_enable+0x42>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40072e:	4b0f      	ldr	r3, [pc, #60]	; (40076c <udc_iface_enable+0x4c>)
  400730:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400732:	2605      	movs	r6, #5
  400734:	4d0e      	ldr	r5, [pc, #56]	; (400770 <udc_iface_enable+0x50>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400736:	4f0f      	ldr	r7, [pc, #60]	; (400774 <udc_iface_enable+0x54>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400738:	4631      	mov	r1, r6
  40073a:	4620      	mov	r0, r4
  40073c:	47a8      	blx	r5
		if (NULL == ep_desc)
  40073e:	4604      	mov	r4, r0
  400740:	b138      	cbz	r0, 400752 <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400742:	8882      	ldrh	r2, [r0, #4]
  400744:	78c1      	ldrb	r1, [r0, #3]
  400746:	7880      	ldrb	r0, [r0, #2]
  400748:	47b8      	blx	r7
  40074a:	4603      	mov	r3, r0
  40074c:	2800      	cmp	r0, #0
  40074e:	d1f3      	bne.n	400738 <udc_iface_enable+0x18>
  400750:	e007      	b.n	400762 <udc_iface_enable+0x42>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400752:	4b09      	ldr	r3, [pc, #36]	; (400778 <udc_iface_enable+0x58>)
  400754:	681b      	ldr	r3, [r3, #0]
  400756:	685b      	ldr	r3, [r3, #4]
  400758:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	4798      	blx	r3
  400760:	4603      	mov	r3, r0
}
  400762:	4618      	mov	r0, r3
  400764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400768:	00400641 	.word	0x00400641
  40076c:	20000644 	.word	0x20000644
  400770:	004005e1 	.word	0x004005e1
  400774:	00401d49 	.word	0x00401d49
  400778:	20000640 	.word	0x20000640

0040077c <udc_start>:
{
  40077c:	b508      	push	{r3, lr}
	udd_enable();
  40077e:	4b01      	ldr	r3, [pc, #4]	; (400784 <udc_start+0x8>)
  400780:	4798      	blx	r3
  400782:	bd08      	pop	{r3, pc}
  400784:	00401bf1 	.word	0x00401bf1

00400788 <udc_reset>:
{
  400788:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
  40078a:	4b0d      	ldr	r3, [pc, #52]	; (4007c0 <udc_reset+0x38>)
  40078c:	781b      	ldrb	r3, [r3, #0]
  40078e:	b183      	cbz	r3, 4007b2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400790:	4b0c      	ldr	r3, [pc, #48]	; (4007c4 <udc_reset+0x3c>)
  400792:	681b      	ldr	r3, [r3, #0]
  400794:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  400796:	791b      	ldrb	r3, [r3, #4]
  400798:	b15b      	cbz	r3, 4007b2 <udc_reset+0x2a>
  40079a:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
  40079c:	4e0a      	ldr	r6, [pc, #40]	; (4007c8 <udc_reset+0x40>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40079e:	4d09      	ldr	r5, [pc, #36]	; (4007c4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
  4007a0:	4620      	mov	r0, r4
  4007a2:	47b0      	blx	r6
				iface_num++) {
  4007a4:	3401      	adds	r4, #1
  4007a6:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007a8:	682b      	ldr	r3, [r5, #0]
  4007aa:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
  4007ac:	791b      	ldrb	r3, [r3, #4]
  4007ae:	42a3      	cmp	r3, r4
  4007b0:	d8f6      	bhi.n	4007a0 <udc_reset+0x18>
	udc_num_configuration = 0;
  4007b2:	2200      	movs	r2, #0
  4007b4:	4b02      	ldr	r3, [pc, #8]	; (4007c0 <udc_reset+0x38>)
  4007b6:	701a      	strb	r2, [r3, #0]
	udc_device_status =
  4007b8:	2201      	movs	r2, #1
  4007ba:	4b04      	ldr	r3, [pc, #16]	; (4007cc <udc_reset+0x44>)
  4007bc:	801a      	strh	r2, [r3, #0]
  4007be:	bd70      	pop	{r4, r5, r6, pc}
  4007c0:	2000063c 	.word	0x2000063c
  4007c4:	20000640 	.word	0x20000640
  4007c8:	004006b5 	.word	0x004006b5
  4007cc:	20000632 	.word	0x20000632

004007d0 <udc_sof_notify>:
{
  4007d0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
  4007d2:	4b0d      	ldr	r3, [pc, #52]	; (400808 <udc_sof_notify+0x38>)
  4007d4:	781b      	ldrb	r3, [r3, #0]
  4007d6:	b1b3      	cbz	r3, 400806 <udc_sof_notify+0x36>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007d8:	4b0c      	ldr	r3, [pc, #48]	; (40080c <udc_sof_notify+0x3c>)
  4007da:	681b      	ldr	r3, [r3, #0]
  4007dc:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4007de:	7912      	ldrb	r2, [r2, #4]
  4007e0:	b18a      	cbz	r2, 400806 <udc_sof_notify+0x36>
  4007e2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007e4:	4d09      	ldr	r5, [pc, #36]	; (40080c <udc_sof_notify+0x3c>)
  4007e6:	e006      	b.n	4007f6 <udc_sof_notify+0x26>
				iface_num++) {
  4007e8:	3401      	adds	r4, #1
  4007ea:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4007ec:	682b      	ldr	r3, [r5, #0]
  4007ee:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
  4007f0:	7912      	ldrb	r2, [r2, #4]
  4007f2:	42a2      	cmp	r2, r4
  4007f4:	d907      	bls.n	400806 <udc_sof_notify+0x36>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4007f6:	685b      	ldr	r3, [r3, #4]
  4007f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4007fc:	691b      	ldr	r3, [r3, #16]
  4007fe:	2b00      	cmp	r3, #0
  400800:	d0f2      	beq.n	4007e8 <udc_sof_notify+0x18>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400802:	4798      	blx	r3
  400804:	e7f0      	b.n	4007e8 <udc_sof_notify+0x18>
  400806:	bd38      	pop	{r3, r4, r5, pc}
  400808:	2000063c 	.word	0x2000063c
  40080c:	20000640 	.word	0x20000640

00400810 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400812:	4b96      	ldr	r3, [pc, #600]	; (400a6c <udc_process_setup+0x25c>)
  400814:	2200      	movs	r2, #0
  400816:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400818:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40081a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  40081c:	781b      	ldrb	r3, [r3, #0]
  40081e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400822:	d114      	bne.n	40084e <udc_process_setup+0x3e>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400824:	f013 0f60 	tst.w	r3, #96	; 0x60
  400828:	f000 80b8 	beq.w	40099c <udc_process_setup+0x18c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  40082c:	4b8f      	ldr	r3, [pc, #572]	; (400a6c <udc_process_setup+0x25c>)
  40082e:	781b      	ldrb	r3, [r3, #0]
  400830:	f003 031f 	and.w	r3, r3, #31
  400834:	2b01      	cmp	r3, #1
  400836:	f000 818b 	beq.w	400b50 <udc_process_setup+0x340>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  40083a:	4b8c      	ldr	r3, [pc, #560]	; (400a6c <udc_process_setup+0x25c>)
  40083c:	781b      	ldrb	r3, [r3, #0]
  40083e:	f003 031f 	and.w	r3, r3, #31
  400842:	2b02      	cmp	r3, #2
  400844:	f000 81ac 	beq.w	400ba0 <udc_process_setup+0x390>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400848:	2300      	movs	r3, #0
#endif
}
  40084a:	4618      	mov	r0, r3
  40084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
  40084e:	4a87      	ldr	r2, [pc, #540]	; (400a6c <udc_process_setup+0x25c>)
  400850:	88d2      	ldrh	r2, [r2, #6]
  400852:	2a00      	cmp	r2, #0
  400854:	f000 81cd 	beq.w	400bf2 <udc_process_setup+0x3e2>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400858:	f013 0f60 	tst.w	r3, #96	; 0x60
  40085c:	d1e6      	bne.n	40082c <udc_process_setup+0x1c>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40085e:	f013 031f 	ands.w	r3, r3, #31
  400862:	d106      	bne.n	400872 <udc_process_setup+0x62>
			switch (udd_g_ctrlreq.req.bRequest) {
  400864:	4981      	ldr	r1, [pc, #516]	; (400a6c <udc_process_setup+0x25c>)
  400866:	7849      	ldrb	r1, [r1, #1]
  400868:	2906      	cmp	r1, #6
  40086a:	d013      	beq.n	400894 <udc_process_setup+0x84>
  40086c:	2908      	cmp	r1, #8
  40086e:	d058      	beq.n	400922 <udc_process_setup+0x112>
  400870:	b149      	cbz	r1, 400886 <udc_process_setup+0x76>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400872:	2b01      	cmp	r3, #1
  400874:	d05c      	beq.n	400930 <udc_process_setup+0x120>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400876:	2b02      	cmp	r3, #2
  400878:	d1d8      	bne.n	40082c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  40087a:	4b7c      	ldr	r3, [pc, #496]	; (400a6c <udc_process_setup+0x25c>)
  40087c:	785b      	ldrb	r3, [r3, #1]
  40087e:	2b00      	cmp	r3, #0
  400880:	d07e      	beq.n	400980 <udc_process_setup+0x170>
	return false;
  400882:	2300      	movs	r3, #0
  400884:	e160      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400886:	2a02      	cmp	r2, #2
  400888:	d1d0      	bne.n	40082c <udc_process_setup+0x1c>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  40088a:	2102      	movs	r1, #2
  40088c:	4878      	ldr	r0, [pc, #480]	; (400a70 <udc_process_setup+0x260>)
  40088e:	4b79      	ldr	r3, [pc, #484]	; (400a74 <udc_process_setup+0x264>)
  400890:	4798      	blx	r3
  400892:	e09f      	b.n	4009d4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400894:	4b75      	ldr	r3, [pc, #468]	; (400a6c <udc_process_setup+0x25c>)
  400896:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400898:	0a13      	lsrs	r3, r2, #8
  40089a:	3b01      	subs	r3, #1
  40089c:	2b0e      	cmp	r3, #14
  40089e:	f200 8150 	bhi.w	400b42 <udc_process_setup+0x332>
  4008a2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4008a6:	000f      	.short	0x000f
  4008a8:	0036001c 	.word	0x0036001c
  4008ac:	014e014e 	.word	0x014e014e
  4008b0:	014e014e 	.word	0x014e014e
  4008b4:	014e014e 	.word	0x014e014e
  4008b8:	014e014e 	.word	0x014e014e
  4008bc:	014e014e 	.word	0x014e014e
  4008c0:	002e014e 	.word	0x002e014e
				(uint8_t *) udc_config.confdev_lsfs,
  4008c4:	4b6c      	ldr	r3, [pc, #432]	; (400a78 <udc_process_setup+0x268>)
  4008c6:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
  4008c8:	7801      	ldrb	r1, [r0, #0]
  4008ca:	4b6a      	ldr	r3, [pc, #424]	; (400a74 <udc_process_setup+0x264>)
  4008cc:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4008ce:	4b67      	ldr	r3, [pc, #412]	; (400a6c <udc_process_setup+0x25c>)
  4008d0:	88da      	ldrh	r2, [r3, #6]
  4008d2:	899b      	ldrh	r3, [r3, #12]
  4008d4:	4293      	cmp	r3, r2
  4008d6:	d97d      	bls.n	4009d4 <udc_process_setup+0x1c4>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4008d8:	4b64      	ldr	r3, [pc, #400]	; (400a6c <udc_process_setup+0x25c>)
  4008da:	819a      	strh	r2, [r3, #12]
  4008dc:	e07a      	b.n	4009d4 <udc_process_setup+0x1c4>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4008de:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
  4008e0:	4b65      	ldr	r3, [pc, #404]	; (400a78 <udc_process_setup+0x268>)
  4008e2:	681b      	ldr	r3, [r3, #0]
  4008e4:	7c5b      	ldrb	r3, [r3, #17]
  4008e6:	4293      	cmp	r3, r2
  4008e8:	d9a0      	bls.n	40082c <udc_process_setup+0x1c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  4008ea:	4b63      	ldr	r3, [pc, #396]	; (400a78 <udc_process_setup+0x268>)
  4008ec:	685b      	ldr	r3, [r3, #4]
  4008ee:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
			udd_set_setup_payload(
  4008f2:	8841      	ldrh	r1, [r0, #2]
  4008f4:	4b5f      	ldr	r3, [pc, #380]	; (400a74 <udc_process_setup+0x264>)
  4008f6:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  4008f8:	4b5c      	ldr	r3, [pc, #368]	; (400a6c <udc_process_setup+0x25c>)
  4008fa:	689b      	ldr	r3, [r3, #8]
  4008fc:	2202      	movs	r2, #2
  4008fe:	705a      	strb	r2, [r3, #1]
  400900:	e7e5      	b.n	4008ce <udc_process_setup+0xbe>
		if (udc_config.conf_bos == NULL) {
  400902:	4b5d      	ldr	r3, [pc, #372]	; (400a78 <udc_process_setup+0x268>)
  400904:	6898      	ldr	r0, [r3, #8]
  400906:	2800      	cmp	r0, #0
  400908:	d090      	beq.n	40082c <udc_process_setup+0x1c>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  40090a:	8841      	ldrh	r1, [r0, #2]
  40090c:	4b59      	ldr	r3, [pc, #356]	; (400a74 <udc_process_setup+0x264>)
  40090e:	4798      	blx	r3
  400910:	e7dd      	b.n	4008ce <udc_process_setup+0xbe>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400912:	f012 0fff 	tst.w	r2, #255	; 0xff
  400916:	d189      	bne.n	40082c <udc_process_setup+0x1c>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400918:	2104      	movs	r1, #4
  40091a:	4858      	ldr	r0, [pc, #352]	; (400a7c <udc_process_setup+0x26c>)
  40091c:	4b55      	ldr	r3, [pc, #340]	; (400a74 <udc_process_setup+0x264>)
  40091e:	4798      	blx	r3
  400920:	e7d5      	b.n	4008ce <udc_process_setup+0xbe>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400922:	2a01      	cmp	r2, #1
  400924:	d182      	bne.n	40082c <udc_process_setup+0x1c>
	udd_set_setup_payload(&udc_num_configuration,1);
  400926:	2101      	movs	r1, #1
  400928:	4855      	ldr	r0, [pc, #340]	; (400a80 <udc_process_setup+0x270>)
  40092a:	4b52      	ldr	r3, [pc, #328]	; (400a74 <udc_process_setup+0x264>)
  40092c:	4798      	blx	r3
  40092e:	e051      	b.n	4009d4 <udc_process_setup+0x1c4>
			switch (udd_g_ctrlreq.req.bRequest) {
  400930:	494e      	ldr	r1, [pc, #312]	; (400a6c <udc_process_setup+0x25c>)
  400932:	7849      	ldrb	r1, [r1, #1]
  400934:	290a      	cmp	r1, #10
  400936:	d19e      	bne.n	400876 <udc_process_setup+0x66>
	if (udd_g_ctrlreq.req.wLength != 1) {
  400938:	2a01      	cmp	r2, #1
  40093a:	f47f af77 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  40093e:	4b50      	ldr	r3, [pc, #320]	; (400a80 <udc_process_setup+0x270>)
  400940:	781b      	ldrb	r3, [r3, #0]
  400942:	2b00      	cmp	r3, #0
  400944:	f43f af72 	beq.w	40082c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400948:	4b48      	ldr	r3, [pc, #288]	; (400a6c <udc_process_setup+0x25c>)
  40094a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  40094c:	4b4d      	ldr	r3, [pc, #308]	; (400a84 <udc_process_setup+0x274>)
  40094e:	681d      	ldr	r5, [r3, #0]
  400950:	682b      	ldr	r3, [r5, #0]
  400952:	791b      	ldrb	r3, [r3, #4]
  400954:	42a3      	cmp	r3, r4
  400956:	f67f af69 	bls.w	40082c <udc_process_setup+0x1c>
	if (!udc_update_iface_desc(iface_num, 0)) {
  40095a:	2100      	movs	r1, #0
  40095c:	4620      	mov	r0, r4
  40095e:	4b4a      	ldr	r3, [pc, #296]	; (400a88 <udc_process_setup+0x278>)
  400960:	4798      	blx	r3
  400962:	2800      	cmp	r0, #0
  400964:	f43f af62 	beq.w	40082c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400968:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  40096a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  40096e:	68db      	ldr	r3, [r3, #12]
  400970:	4798      	blx	r3
  400972:	4b46      	ldr	r3, [pc, #280]	; (400a8c <udc_process_setup+0x27c>)
  400974:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
  400976:	2101      	movs	r1, #1
  400978:	4618      	mov	r0, r3
  40097a:	4b3e      	ldr	r3, [pc, #248]	; (400a74 <udc_process_setup+0x264>)
  40097c:	4798      	blx	r3
  40097e:	e029      	b.n	4009d4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400980:	2a02      	cmp	r2, #2
  400982:	f47f af53 	bne.w	40082c <udc_process_setup+0x1c>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400986:	4b39      	ldr	r3, [pc, #228]	; (400a6c <udc_process_setup+0x25c>)
  400988:	7918      	ldrb	r0, [r3, #4]
  40098a:	4b41      	ldr	r3, [pc, #260]	; (400a90 <udc_process_setup+0x280>)
  40098c:	4798      	blx	r3
  40098e:	4b41      	ldr	r3, [pc, #260]	; (400a94 <udc_process_setup+0x284>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  400990:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400992:	2102      	movs	r1, #2
  400994:	4618      	mov	r0, r3
  400996:	4b37      	ldr	r3, [pc, #220]	; (400a74 <udc_process_setup+0x264>)
  400998:	4798      	blx	r3
  40099a:	e01b      	b.n	4009d4 <udc_process_setup+0x1c4>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40099c:	f013 031f 	ands.w	r3, r3, #31
  4009a0:	f040 8082 	bne.w	400aa8 <udc_process_setup+0x298>
			switch (udd_g_ctrlreq.req.bRequest) {
  4009a4:	4a31      	ldr	r2, [pc, #196]	; (400a6c <udc_process_setup+0x25c>)
  4009a6:	7852      	ldrb	r2, [r2, #1]
  4009a8:	3a01      	subs	r2, #1
  4009aa:	2a08      	cmp	r2, #8
  4009ac:	d87c      	bhi.n	400aa8 <udc_process_setup+0x298>
  4009ae:	e8df f012 	tbh	[pc, r2, lsl #1]
  4009b2:	0013      	.short	0x0013
  4009b4:	00ca007b 	.word	0x00ca007b
  4009b8:	0009007b 	.word	0x0009007b
  4009bc:	007b007b 	.word	0x007b007b
  4009c0:	0023007b 	.word	0x0023007b
	if (udd_g_ctrlreq.req.wLength) {
  4009c4:	4b29      	ldr	r3, [pc, #164]	; (400a6c <udc_process_setup+0x25c>)
  4009c6:	88db      	ldrh	r3, [r3, #6]
  4009c8:	2b00      	cmp	r3, #0
  4009ca:	f47f af2f 	bne.w	40082c <udc_process_setup+0x1c>
	udd_g_ctrlreq.callback = udc_valid_address;
  4009ce:	4a32      	ldr	r2, [pc, #200]	; (400a98 <udc_process_setup+0x288>)
  4009d0:	4b26      	ldr	r3, [pc, #152]	; (400a6c <udc_process_setup+0x25c>)
  4009d2:	611a      	str	r2, [r3, #16]
			return true;
  4009d4:	2301      	movs	r3, #1
  4009d6:	e738      	b.n	40084a <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
  4009d8:	4b24      	ldr	r3, [pc, #144]	; (400a6c <udc_process_setup+0x25c>)
  4009da:	88db      	ldrh	r3, [r3, #6]
  4009dc:	2b00      	cmp	r3, #0
  4009de:	f47f af25 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4009e2:	4b22      	ldr	r3, [pc, #136]	; (400a6c <udc_process_setup+0x25c>)
  4009e4:	885b      	ldrh	r3, [r3, #2]
  4009e6:	2b01      	cmp	r3, #1
  4009e8:	f47f af20 	bne.w	40082c <udc_process_setup+0x1c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4009ec:	4a20      	ldr	r2, [pc, #128]	; (400a70 <udc_process_setup+0x260>)
  4009ee:	8813      	ldrh	r3, [r2, #0]
  4009f0:	f023 0302 	bic.w	r3, r3, #2
  4009f4:	8013      	strh	r3, [r2, #0]
  4009f6:	e7ed      	b.n	4009d4 <udc_process_setup+0x1c4>
	if (udd_g_ctrlreq.req.wLength) {
  4009f8:	4b1c      	ldr	r3, [pc, #112]	; (400a6c <udc_process_setup+0x25c>)
  4009fa:	88db      	ldrh	r3, [r3, #6]
  4009fc:	2b00      	cmp	r3, #0
  4009fe:	f47f af15 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udd_getaddress()) {
  400a02:	4b26      	ldr	r3, [pc, #152]	; (400a9c <udc_process_setup+0x28c>)
  400a04:	4798      	blx	r3
  400a06:	2800      	cmp	r0, #0
  400a08:	f43f af10 	beq.w	40082c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a0c:	4b17      	ldr	r3, [pc, #92]	; (400a6c <udc_process_setup+0x25c>)
  400a0e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400a10:	4b19      	ldr	r3, [pc, #100]	; (400a78 <udc_process_setup+0x268>)
  400a12:	681b      	ldr	r3, [r3, #0]
  400a14:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400a16:	429a      	cmp	r2, r3
  400a18:	f73f af08 	bgt.w	40082c <udc_process_setup+0x1c>
	udc_reset();
  400a1c:	4b20      	ldr	r3, [pc, #128]	; (400aa0 <udc_process_setup+0x290>)
  400a1e:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400a20:	4b12      	ldr	r3, [pc, #72]	; (400a6c <udc_process_setup+0x25c>)
  400a22:	789b      	ldrb	r3, [r3, #2]
  400a24:	4a16      	ldr	r2, [pc, #88]	; (400a80 <udc_process_setup+0x270>)
  400a26:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400a28:	2b00      	cmp	r3, #0
  400a2a:	d0d3      	beq.n	4009d4 <udc_process_setup+0x1c4>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400a2c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400a30:	3b01      	subs	r3, #1
  400a32:	4a11      	ldr	r2, [pc, #68]	; (400a78 <udc_process_setup+0x268>)
  400a34:	6852      	ldr	r2, [r2, #4]
  400a36:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400a3a:	4912      	ldr	r1, [pc, #72]	; (400a84 <udc_process_setup+0x274>)
  400a3c:	6008      	str	r0, [r1, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400a42:	791b      	ldrb	r3, [r3, #4]
  400a44:	2b00      	cmp	r3, #0
  400a46:	d0c5      	beq.n	4009d4 <udc_process_setup+0x1c4>
  400a48:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
  400a4a:	4626      	mov	r6, r4
  400a4c:	4d15      	ldr	r5, [pc, #84]	; (400aa4 <udc_process_setup+0x294>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a4e:	460f      	mov	r7, r1
		if (!udc_iface_enable(iface_num, 0)) {
  400a50:	4631      	mov	r1, r6
  400a52:	4620      	mov	r0, r4
  400a54:	47a8      	blx	r5
  400a56:	2800      	cmp	r0, #0
  400a58:	f43f aee8 	beq.w	40082c <udc_process_setup+0x1c>
			iface_num++) {
  400a5c:	3401      	adds	r4, #1
  400a5e:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a60:	683b      	ldr	r3, [r7, #0]
  400a62:	681b      	ldr	r3, [r3, #0]
  400a64:	791b      	ldrb	r3, [r3, #4]
  400a66:	42a3      	cmp	r3, r4
  400a68:	d8f2      	bhi.n	400a50 <udc_process_setup+0x240>
  400a6a:	e7b3      	b.n	4009d4 <udc_process_setup+0x1c4>
  400a6c:	20002718 	.word	0x20002718
  400a70:	20000632 	.word	0x20000632
  400a74:	00401d3d 	.word	0x00401d3d
  400a78:	2000002c 	.word	0x2000002c
  400a7c:	20000028 	.word	0x20000028
  400a80:	2000063c 	.word	0x2000063c
  400a84:	20000640 	.word	0x20000640
  400a88:	00400641 	.word	0x00400641
  400a8c:	20000638 	.word	0x20000638
  400a90:	00401e99 	.word	0x00401e99
  400a94:	20000634 	.word	0x20000634
  400a98:	00400629 	.word	0x00400629
  400a9c:	00401d0d 	.word	0x00401d0d
  400aa0:	00400789 	.word	0x00400789
  400aa4:	00400721 	.word	0x00400721
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400aa8:	2b01      	cmp	r3, #1
  400aaa:	d00a      	beq.n	400ac2 <udc_process_setup+0x2b2>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400aac:	2b02      	cmp	r3, #2
  400aae:	f47f aebd 	bne.w	40082c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ab2:	4b52      	ldr	r3, [pc, #328]	; (400bfc <udc_process_setup+0x3ec>)
  400ab4:	785b      	ldrb	r3, [r3, #1]
  400ab6:	2b01      	cmp	r3, #1
  400ab8:	d020      	beq.n	400afc <udc_process_setup+0x2ec>
  400aba:	2b03      	cmp	r3, #3
  400abc:	d02e      	beq.n	400b1c <udc_process_setup+0x30c>
	return false;
  400abe:	2300      	movs	r3, #0
  400ac0:	e042      	b.n	400b48 <udc_process_setup+0x338>
			switch (udd_g_ctrlreq.req.bRequest) {
  400ac2:	4a4e      	ldr	r2, [pc, #312]	; (400bfc <udc_process_setup+0x3ec>)
  400ac4:	7852      	ldrb	r2, [r2, #1]
  400ac6:	2a0b      	cmp	r2, #11
  400ac8:	d1f0      	bne.n	400aac <udc_process_setup+0x29c>
	if (udd_g_ctrlreq.req.wLength) {
  400aca:	4b4c      	ldr	r3, [pc, #304]	; (400bfc <udc_process_setup+0x3ec>)
  400acc:	88db      	ldrh	r3, [r3, #6]
  400ace:	2b00      	cmp	r3, #0
  400ad0:	f47f aeac 	bne.w	40082c <udc_process_setup+0x1c>
	if (!udc_num_configuration) {
  400ad4:	4b4a      	ldr	r3, [pc, #296]	; (400c00 <udc_process_setup+0x3f0>)
  400ad6:	781b      	ldrb	r3, [r3, #0]
  400ad8:	2b00      	cmp	r3, #0
  400ada:	f43f aea7 	beq.w	40082c <udc_process_setup+0x1c>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400ade:	4b47      	ldr	r3, [pc, #284]	; (400bfc <udc_process_setup+0x3ec>)
  400ae0:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400ae2:	885d      	ldrh	r5, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
  400ae4:	4620      	mov	r0, r4
  400ae6:	4b47      	ldr	r3, [pc, #284]	; (400c04 <udc_process_setup+0x3f4>)
  400ae8:	4798      	blx	r3
  400aea:	2800      	cmp	r0, #0
  400aec:	f43f ae9e 	beq.w	40082c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
  400af0:	b2e9      	uxtb	r1, r5
  400af2:	4620      	mov	r0, r4
  400af4:	4b44      	ldr	r3, [pc, #272]	; (400c08 <udc_process_setup+0x3f8>)
  400af6:	4798      	blx	r3
  400af8:	4603      	mov	r3, r0
  400afa:	e025      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400afc:	4b3f      	ldr	r3, [pc, #252]	; (400bfc <udc_process_setup+0x3ec>)
  400afe:	88db      	ldrh	r3, [r3, #6]
  400b00:	2b00      	cmp	r3, #0
  400b02:	f47f ae93 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b06:	4b3d      	ldr	r3, [pc, #244]	; (400bfc <udc_process_setup+0x3ec>)
  400b08:	885b      	ldrh	r3, [r3, #2]
  400b0a:	2b00      	cmp	r3, #0
  400b0c:	f47f ae8e 	bne.w	40082c <udc_process_setup+0x1c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b10:	4b3a      	ldr	r3, [pc, #232]	; (400bfc <udc_process_setup+0x3ec>)
  400b12:	7918      	ldrb	r0, [r3, #4]
  400b14:	4b3d      	ldr	r3, [pc, #244]	; (400c0c <udc_process_setup+0x3fc>)
  400b16:	4798      	blx	r3
  400b18:	4603      	mov	r3, r0
  400b1a:	e015      	b.n	400b48 <udc_process_setup+0x338>
	if (udd_g_ctrlreq.req.wLength) {
  400b1c:	4b37      	ldr	r3, [pc, #220]	; (400bfc <udc_process_setup+0x3ec>)
  400b1e:	88db      	ldrh	r3, [r3, #6]
  400b20:	2b00      	cmp	r3, #0
  400b22:	f47f ae83 	bne.w	40082c <udc_process_setup+0x1c>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400b26:	4b35      	ldr	r3, [pc, #212]	; (400bfc <udc_process_setup+0x3ec>)
  400b28:	885b      	ldrh	r3, [r3, #2]
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	f47f ae7e 	bne.w	40082c <udc_process_setup+0x1c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b30:	4c32      	ldr	r4, [pc, #200]	; (400bfc <udc_process_setup+0x3ec>)
  400b32:	7920      	ldrb	r0, [r4, #4]
  400b34:	4b36      	ldr	r3, [pc, #216]	; (400c10 <udc_process_setup+0x400>)
  400b36:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400b38:	7920      	ldrb	r0, [r4, #4]
  400b3a:	4b36      	ldr	r3, [pc, #216]	; (400c14 <udc_process_setup+0x404>)
  400b3c:	4798      	blx	r3
  400b3e:	4603      	mov	r3, r0
  400b40:	e002      	b.n	400b48 <udc_process_setup+0x338>
		return false;
  400b42:	2300      	movs	r3, #0
  400b44:	e000      	b.n	400b48 <udc_process_setup+0x338>
				return udc_req_std_dev_set_feature();
  400b46:	2300      	movs	r3, #0
		if (udc_reqstd()) {
  400b48:	2b00      	cmp	r3, #0
  400b4a:	f47f ae7e 	bne.w	40084a <udc_process_setup+0x3a>
  400b4e:	e66d      	b.n	40082c <udc_process_setup+0x1c>
	if (0 == udc_num_configuration) {
  400b50:	4b2b      	ldr	r3, [pc, #172]	; (400c00 <udc_process_setup+0x3f0>)
  400b52:	781b      	ldrb	r3, [r3, #0]
  400b54:	2b00      	cmp	r3, #0
  400b56:	d04e      	beq.n	400bf6 <udc_process_setup+0x3e6>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b58:	4b28      	ldr	r3, [pc, #160]	; (400bfc <udc_process_setup+0x3ec>)
  400b5a:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b5c:	4b2e      	ldr	r3, [pc, #184]	; (400c18 <udc_process_setup+0x408>)
  400b5e:	681d      	ldr	r5, [r3, #0]
  400b60:	682b      	ldr	r3, [r5, #0]
  400b62:	791b      	ldrb	r3, [r3, #4]
  400b64:	42a3      	cmp	r3, r4
  400b66:	d801      	bhi.n	400b6c <udc_process_setup+0x35c>
	return false;
  400b68:	2300      	movs	r3, #0
  400b6a:	e66e      	b.n	40084a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b6c:	2100      	movs	r1, #0
  400b6e:	4620      	mov	r0, r4
  400b70:	4b2a      	ldr	r3, [pc, #168]	; (400c1c <udc_process_setup+0x40c>)
  400b72:	4798      	blx	r3
  400b74:	2800      	cmp	r0, #0
  400b76:	f43f ae60 	beq.w	40083a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b7a:	686b      	ldr	r3, [r5, #4]
  400b7c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400b80:	68eb      	ldr	r3, [r5, #12]
  400b82:	4798      	blx	r3
  400b84:	4601      	mov	r1, r0
  400b86:	4620      	mov	r0, r4
  400b88:	4b24      	ldr	r3, [pc, #144]	; (400c1c <udc_process_setup+0x40c>)
  400b8a:	4798      	blx	r3
  400b8c:	2800      	cmp	r0, #0
  400b8e:	f43f ae54 	beq.w	40083a <udc_process_setup+0x2a>
	return udi_api->setup();
  400b92:	68ab      	ldr	r3, [r5, #8]
  400b94:	4798      	blx	r3
		if (udc_req_iface()) {
  400b96:	4603      	mov	r3, r0
  400b98:	2800      	cmp	r0, #0
  400b9a:	f47f ae56 	bne.w	40084a <udc_process_setup+0x3a>
  400b9e:	e64c      	b.n	40083a <udc_process_setup+0x2a>
	if (0 == udc_num_configuration) {
  400ba0:	4b17      	ldr	r3, [pc, #92]	; (400c00 <udc_process_setup+0x3f0>)
  400ba2:	781b      	ldrb	r3, [r3, #0]
  400ba4:	b30b      	cbz	r3, 400bea <udc_process_setup+0x3da>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ba6:	4b1c      	ldr	r3, [pc, #112]	; (400c18 <udc_process_setup+0x408>)
  400ba8:	681a      	ldr	r2, [r3, #0]
  400baa:	6813      	ldr	r3, [r2, #0]
  400bac:	791b      	ldrb	r3, [r3, #4]
  400bae:	b1f3      	cbz	r3, 400bee <udc_process_setup+0x3de>
  400bb0:	2400      	movs	r4, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bb2:	4e1a      	ldr	r6, [pc, #104]	; (400c1c <udc_process_setup+0x40c>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bb4:	4f18      	ldr	r7, [pc, #96]	; (400c18 <udc_process_setup+0x408>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400bb6:	6853      	ldr	r3, [r2, #4]
  400bb8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400bbc:	68eb      	ldr	r3, [r5, #12]
  400bbe:	4798      	blx	r3
  400bc0:	4601      	mov	r1, r0
  400bc2:	4620      	mov	r0, r4
  400bc4:	47b0      	blx	r6
  400bc6:	4603      	mov	r3, r0
  400bc8:	2800      	cmp	r0, #0
  400bca:	f43f ae3e 	beq.w	40084a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
  400bce:	68ab      	ldr	r3, [r5, #8]
  400bd0:	4798      	blx	r3
  400bd2:	4603      	mov	r3, r0
  400bd4:	2800      	cmp	r0, #0
  400bd6:	f47f ae38 	bne.w	40084a <udc_process_setup+0x3a>
			iface_num++) {
  400bda:	3401      	adds	r4, #1
  400bdc:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400bde:	683a      	ldr	r2, [r7, #0]
  400be0:	6811      	ldr	r1, [r2, #0]
  400be2:	7909      	ldrb	r1, [r1, #4]
  400be4:	42a1      	cmp	r1, r4
  400be6:	d8e6      	bhi.n	400bb6 <udc_process_setup+0x3a6>
  400be8:	e62f      	b.n	40084a <udc_process_setup+0x3a>
		return false; // The device is not is configured state yet
  400bea:	2300      	movs	r3, #0
  400bec:	e62d      	b.n	40084a <udc_process_setup+0x3a>
	return false;
  400bee:	2300      	movs	r3, #0
  400bf0:	e62b      	b.n	40084a <udc_process_setup+0x3a>
			return false; // Error from USB host
  400bf2:	2300      	movs	r3, #0
  400bf4:	e629      	b.n	40084a <udc_process_setup+0x3a>
	return false;
  400bf6:	2300      	movs	r3, #0
  400bf8:	e627      	b.n	40084a <udc_process_setup+0x3a>
  400bfa:	bf00      	nop
  400bfc:	20002718 	.word	0x20002718
  400c00:	2000063c 	.word	0x2000063c
  400c04:	004006b5 	.word	0x004006b5
  400c08:	00400721 	.word	0x00400721
  400c0c:	00401fb9 	.word	0x00401fb9
  400c10:	0040220d 	.word	0x0040220d
  400c14:	00401ed9 	.word	0x00401ed9
  400c18:	20000640 	.word	0x20000640
  400c1c:	00400641 	.word	0x00400641

00400c20 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c24:	4681      	mov	r9, r0
  400c26:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c28:	4b12      	ldr	r3, [pc, #72]	; (400c74 <pio_handler_process+0x54>)
  400c2a:	4798      	blx	r3
  400c2c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c2e:	4648      	mov	r0, r9
  400c30:	4b11      	ldr	r3, [pc, #68]	; (400c78 <pio_handler_process+0x58>)
  400c32:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c34:	4005      	ands	r5, r0
  400c36:	d013      	beq.n	400c60 <pio_handler_process+0x40>
  400c38:	4c10      	ldr	r4, [pc, #64]	; (400c7c <pio_handler_process+0x5c>)
  400c3a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c3e:	e003      	b.n	400c48 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c40:	42b4      	cmp	r4, r6
  400c42:	d00d      	beq.n	400c60 <pio_handler_process+0x40>
  400c44:	3410      	adds	r4, #16
		while (status != 0) {
  400c46:	b15d      	cbz	r5, 400c60 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c48:	6820      	ldr	r0, [r4, #0]
  400c4a:	42b8      	cmp	r0, r7
  400c4c:	d1f8      	bne.n	400c40 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c4e:	6861      	ldr	r1, [r4, #4]
  400c50:	4229      	tst	r1, r5
  400c52:	d0f5      	beq.n	400c40 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c54:	68e3      	ldr	r3, [r4, #12]
  400c56:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c58:	6863      	ldr	r3, [r4, #4]
  400c5a:	ea25 0503 	bic.w	r5, r5, r3
  400c5e:	e7ef      	b.n	400c40 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c60:	4b07      	ldr	r3, [pc, #28]	; (400c80 <pio_handler_process+0x60>)
  400c62:	681b      	ldr	r3, [r3, #0]
  400c64:	b123      	cbz	r3, 400c70 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400c66:	4b07      	ldr	r3, [pc, #28]	; (400c84 <pio_handler_process+0x64>)
  400c68:	681b      	ldr	r3, [r3, #0]
  400c6a:	b10b      	cbz	r3, 400c70 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400c6c:	4648      	mov	r0, r9
  400c6e:	4798      	blx	r3
  400c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c74:	00402eb9 	.word	0x00402eb9
  400c78:	00402ebd 	.word	0x00402ebd
  400c7c:	20000648 	.word	0x20000648
  400c80:	20006f54 	.word	0x20006f54
  400c84:	200006b8 	.word	0x200006b8

00400c88 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c88:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400c8a:	210b      	movs	r1, #11
  400c8c:	4801      	ldr	r0, [pc, #4]	; (400c94 <PIOA_Handler+0xc>)
  400c8e:	4b02      	ldr	r3, [pc, #8]	; (400c98 <PIOA_Handler+0x10>)
  400c90:	4798      	blx	r3
  400c92:	bd08      	pop	{r3, pc}
  400c94:	400e0e00 	.word	0x400e0e00
  400c98:	00400c21 	.word	0x00400c21

00400c9c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400c9c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400c9e:	210c      	movs	r1, #12
  400ca0:	4801      	ldr	r0, [pc, #4]	; (400ca8 <PIOB_Handler+0xc>)
  400ca2:	4b02      	ldr	r3, [pc, #8]	; (400cac <PIOB_Handler+0x10>)
  400ca4:	4798      	blx	r3
  400ca6:	bd08      	pop	{r3, pc}
  400ca8:	400e1000 	.word	0x400e1000
  400cac:	00400c21 	.word	0x00400c21

00400cb0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  400cb0:	b082      	sub	sp, #8
	if (!b_idle && udd_b_idle) {
  400cb2:	4601      	mov	r1, r0
  400cb4:	bb28      	cbnz	r0, 400d02 <udd_sleep_mode+0x52>
  400cb6:	4b24      	ldr	r3, [pc, #144]	; (400d48 <udd_sleep_mode+0x98>)
  400cb8:	781b      	ldrb	r3, [r3, #0]
  400cba:	b91b      	cbnz	r3, 400cc4 <udd_sleep_mode+0x14>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  400cbc:	4b22      	ldr	r3, [pc, #136]	; (400d48 <udd_sleep_mode+0x98>)
  400cbe:	7019      	strb	r1, [r3, #0]
}
  400cc0:	b002      	add	sp, #8
  400cc2:	4770      	bx	lr
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  400cc4:	4b21      	ldr	r3, [pc, #132]	; (400d4c <udd_sleep_mode+0x9c>)
  400cc6:	789b      	ldrb	r3, [r3, #2]
  400cc8:	b903      	cbnz	r3, 400ccc <udd_sleep_mode+0x1c>
  400cca:	e7fe      	b.n	400cca <udd_sleep_mode+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400ccc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400cd0:	fab3 f383 	clz	r3, r3
  400cd4:	095b      	lsrs	r3, r3, #5
  400cd6:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400cd8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400cda:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400cde:	2200      	movs	r2, #0
  400ce0:	4b1b      	ldr	r3, [pc, #108]	; (400d50 <udd_sleep_mode+0xa0>)
  400ce2:	701a      	strb	r2, [r3, #0]
	return flags;
  400ce4:	9800      	ldr	r0, [sp, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  400ce6:	4a19      	ldr	r2, [pc, #100]	; (400d4c <udd_sleep_mode+0x9c>)
  400ce8:	7893      	ldrb	r3, [r2, #2]
  400cea:	3b01      	subs	r3, #1
  400cec:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400cee:	2800      	cmp	r0, #0
  400cf0:	d0e4      	beq.n	400cbc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400cf2:	2201      	movs	r2, #1
  400cf4:	4b16      	ldr	r3, [pc, #88]	; (400d50 <udd_sleep_mode+0xa0>)
  400cf6:	701a      	strb	r2, [r3, #0]
  400cf8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400cfc:	b662      	cpsie	i
  400cfe:	e7dd      	b.n	400cbc <udd_sleep_mode+0xc>
  400d00:	e7fe      	b.n	400d00 <udd_sleep_mode+0x50>
	if (b_idle && !udd_b_idle) {
  400d02:	4b11      	ldr	r3, [pc, #68]	; (400d48 <udd_sleep_mode+0x98>)
  400d04:	781b      	ldrb	r3, [r3, #0]
  400d06:	2b00      	cmp	r3, #0
  400d08:	d1d8      	bne.n	400cbc <udd_sleep_mode+0xc>
	if(sleepmgr_locks[mode] >= 0xff) {
  400d0a:	4b10      	ldr	r3, [pc, #64]	; (400d4c <udd_sleep_mode+0x9c>)
  400d0c:	789b      	ldrb	r3, [r3, #2]
  400d0e:	2bff      	cmp	r3, #255	; 0xff
  400d10:	d0f6      	beq.n	400d00 <udd_sleep_mode+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d12:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d16:	fab3 f383 	clz	r3, r3
  400d1a:	095b      	lsrs	r3, r3, #5
  400d1c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d1e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d20:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d24:	2200      	movs	r2, #0
  400d26:	4b0a      	ldr	r3, [pc, #40]	; (400d50 <udd_sleep_mode+0xa0>)
  400d28:	701a      	strb	r2, [r3, #0]
	return flags;
  400d2a:	9801      	ldr	r0, [sp, #4]
	++sleepmgr_locks[mode];
  400d2c:	4a07      	ldr	r2, [pc, #28]	; (400d4c <udd_sleep_mode+0x9c>)
  400d2e:	7893      	ldrb	r3, [r2, #2]
  400d30:	3301      	adds	r3, #1
  400d32:	7093      	strb	r3, [r2, #2]
	if (cpu_irq_is_enabled_flags(flags))
  400d34:	2800      	cmp	r0, #0
  400d36:	d0c1      	beq.n	400cbc <udd_sleep_mode+0xc>
		cpu_irq_enable();
  400d38:	2201      	movs	r2, #1
  400d3a:	4b05      	ldr	r3, [pc, #20]	; (400d50 <udd_sleep_mode+0xa0>)
  400d3c:	701a      	strb	r2, [r3, #0]
  400d3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d42:	b662      	cpsie	i
  400d44:	e7ba      	b.n	400cbc <udd_sleep_mode+0xc>
  400d46:	bf00      	nop
  400d48:	200006bd 	.word	0x200006bd
  400d4c:	20002710 	.word	0x20002710
  400d50:	200000a0 	.word	0x200000a0

00400d54 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  400d54:	4a03      	ldr	r2, [pc, #12]	; (400d64 <udd_ctrl_init+0x10>)
  400d56:	2300      	movs	r3, #0
  400d58:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400d5a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  400d5c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  400d5e:	4a02      	ldr	r2, [pc, #8]	; (400d68 <udd_ctrl_init+0x14>)
  400d60:	7013      	strb	r3, [r2, #0]
  400d62:	4770      	bx	lr
  400d64:	20002718 	.word	0x20002718
  400d68:	200006c2 	.word	0x200006c2

00400d6c <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  400d6c:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  400d6e:	2205      	movs	r2, #5
  400d70:	4b0a      	ldr	r3, [pc, #40]	; (400d9c <udd_ctrl_stall_data+0x30>)
  400d72:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  400d74:	4a0a      	ldr	r2, [pc, #40]	; (400da0 <udd_ctrl_stall_data+0x34>)
  400d76:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d78:	9301      	str	r3, [sp, #4]
  400d7a:	9b01      	ldr	r3, [sp, #4]
  400d7c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400d80:	9301      	str	r3, [sp, #4]
  400d82:	9b01      	ldr	r3, [sp, #4]
  400d84:	f043 0320 	orr.w	r3, r3, #32
  400d88:	9301      	str	r3, [sp, #4]
  400d8a:	9b01      	ldr	r3, [sp, #4]
  400d8c:	6313      	str	r3, [r2, #48]	; 0x30
  400d8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d90:	f013 0f20 	tst.w	r3, #32
  400d94:	d0fb      	beq.n	400d8e <udd_ctrl_stall_data+0x22>
}
  400d96:	b002      	add	sp, #8
  400d98:	4770      	bx	lr
  400d9a:	bf00      	nop
  400d9c:	200006c2 	.word	0x200006c2
  400da0:	40034000 	.word	0x40034000

00400da4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  400da4:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  400da6:	2203      	movs	r2, #3
  400da8:	4b0a      	ldr	r3, [pc, #40]	; (400dd4 <udd_ctrl_send_zlp_in+0x30>)
  400daa:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  400dac:	4a0a      	ldr	r2, [pc, #40]	; (400dd8 <udd_ctrl_send_zlp_in+0x34>)
  400dae:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400db0:	9301      	str	r3, [sp, #4]
  400db2:	9b01      	ldr	r3, [sp, #4]
  400db4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400db8:	9301      	str	r3, [sp, #4]
  400dba:	9b01      	ldr	r3, [sp, #4]
  400dbc:	f043 0310 	orr.w	r3, r3, #16
  400dc0:	9301      	str	r3, [sp, #4]
  400dc2:	9b01      	ldr	r3, [sp, #4]
  400dc4:	6313      	str	r3, [r2, #48]	; 0x30
  400dc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dc8:	f013 0f10 	tst.w	r3, #16
  400dcc:	d0fb      	beq.n	400dc6 <udd_ctrl_send_zlp_in+0x22>
}
  400dce:	b002      	add	sp, #8
  400dd0:	4770      	bx	lr
  400dd2:	bf00      	nop
  400dd4:	200006c2 	.word	0x200006c2
  400dd8:	40034000 	.word	0x40034000

00400ddc <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  400ddc:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  400dde:	4b02      	ldr	r3, [pc, #8]	; (400de8 <udd_ctrl_endofrequest+0xc>)
  400de0:	691b      	ldr	r3, [r3, #16]
  400de2:	b103      	cbz	r3, 400de6 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  400de4:	4798      	blx	r3
  400de6:	bd08      	pop	{r3, pc}
  400de8:	20002718 	.word	0x20002718

00400dec <udd_ctrl_in_sent>:
{
  400dec:	b530      	push	{r4, r5, lr}
  400dee:	b087      	sub	sp, #28
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  400df0:	4b63      	ldr	r3, [pc, #396]	; (400f80 <udd_ctrl_in_sent+0x194>)
  400df2:	781b      	ldrb	r3, [r3, #0]
  400df4:	2b03      	cmp	r3, #3
  400df6:	d029      	beq.n	400e4c <udd_ctrl_in_sent+0x60>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  400df8:	4b62      	ldr	r3, [pc, #392]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400dfa:	881b      	ldrh	r3, [r3, #0]
  400dfc:	4a62      	ldr	r2, [pc, #392]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400dfe:	8994      	ldrh	r4, [r2, #12]
  400e00:	1ae4      	subs	r4, r4, r3
  400e02:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  400e04:	2c00      	cmp	r4, #0
  400e06:	d144      	bne.n	400e92 <udd_ctrl_in_sent+0xa6>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  400e08:	4a60      	ldr	r2, [pc, #384]	; (400f8c <udd_ctrl_in_sent+0x1a0>)
  400e0a:	8811      	ldrh	r1, [r2, #0]
  400e0c:	440b      	add	r3, r1
  400e0e:	b29b      	uxth	r3, r3
  400e10:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  400e12:	4a5d      	ldr	r2, [pc, #372]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400e14:	88d2      	ldrh	r2, [r2, #6]
  400e16:	429a      	cmp	r2, r3
  400e18:	d003      	beq.n	400e22 <udd_ctrl_in_sent+0x36>
				|| b_shortpacket) {
  400e1a:	4b5d      	ldr	r3, [pc, #372]	; (400f90 <udd_ctrl_in_sent+0x1a4>)
  400e1c:	781b      	ldrb	r3, [r3, #0]
  400e1e:	2b00      	cmp	r3, #0
  400e20:	d02b      	beq.n	400e7a <udd_ctrl_in_sent+0x8e>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400e22:	2204      	movs	r2, #4
  400e24:	4b56      	ldr	r3, [pc, #344]	; (400f80 <udd_ctrl_in_sent+0x194>)
  400e26:	701a      	strb	r2, [r3, #0]
			udd_ack_in_sent(0);
  400e28:	4a5a      	ldr	r2, [pc, #360]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400e2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e2c:	9301      	str	r3, [sp, #4]
  400e2e:	9b01      	ldr	r3, [sp, #4]
  400e30:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400e34:	9301      	str	r3, [sp, #4]
  400e36:	9b01      	ldr	r3, [sp, #4]
  400e38:	f023 0301 	bic.w	r3, r3, #1
  400e3c:	9301      	str	r3, [sp, #4]
  400e3e:	9b01      	ldr	r3, [sp, #4]
  400e40:	6313      	str	r3, [r2, #48]	; 0x30
  400e42:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e44:	f013 0f01 	tst.w	r3, #1
  400e48:	d1fb      	bne.n	400e42 <udd_ctrl_in_sent+0x56>
  400e4a:	e014      	b.n	400e76 <udd_ctrl_in_sent+0x8a>
		udd_ack_in_sent(0);
  400e4c:	4a51      	ldr	r2, [pc, #324]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400e4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e50:	9300      	str	r3, [sp, #0]
  400e52:	9b00      	ldr	r3, [sp, #0]
  400e54:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400e58:	9300      	str	r3, [sp, #0]
  400e5a:	9b00      	ldr	r3, [sp, #0]
  400e5c:	f023 0301 	bic.w	r3, r3, #1
  400e60:	9300      	str	r3, [sp, #0]
  400e62:	9b00      	ldr	r3, [sp, #0]
  400e64:	6313      	str	r3, [r2, #48]	; 0x30
  400e66:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e68:	f013 0f01 	tst.w	r3, #1
  400e6c:	d1fb      	bne.n	400e66 <udd_ctrl_in_sent+0x7a>
		udd_ctrl_endofrequest();
  400e6e:	4b4a      	ldr	r3, [pc, #296]	; (400f98 <udd_ctrl_in_sent+0x1ac>)
  400e70:	4798      	blx	r3
		udd_ctrl_init();
  400e72:	4b4a      	ldr	r3, [pc, #296]	; (400f9c <udd_ctrl_in_sent+0x1b0>)
  400e74:	4798      	blx	r3
}
  400e76:	b007      	add	sp, #28
  400e78:	bd30      	pop	{r4, r5, pc}
		if ((!udd_g_ctrlreq.over_under_run)
  400e7a:	4b43      	ldr	r3, [pc, #268]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400e7c:	695b      	ldr	r3, [r3, #20]
  400e7e:	2b00      	cmp	r3, #0
  400e80:	d05d      	beq.n	400f3e <udd_ctrl_in_sent+0x152>
				|| (!udd_g_ctrlreq.over_under_run())) {
  400e82:	4798      	blx	r3
  400e84:	2800      	cmp	r0, #0
  400e86:	d05a      	beq.n	400f3e <udd_ctrl_in_sent+0x152>
			udd_ctrl_payload_nb_trans = 0;
  400e88:	2200      	movs	r2, #0
  400e8a:	4b3e      	ldr	r3, [pc, #248]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400e8c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  400e8e:	4b3e      	ldr	r3, [pc, #248]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400e90:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  400e92:	2c3f      	cmp	r4, #63	; 0x3f
  400e94:	d953      	bls.n	400f3e <udd_ctrl_in_sent+0x152>
		b_shortpacket = false;
  400e96:	2200      	movs	r2, #0
  400e98:	4b3d      	ldr	r3, [pc, #244]	; (400f90 <udd_ctrl_in_sent+0x1a4>)
  400e9a:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  400e9c:	2440      	movs	r4, #64	; 0x40
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400e9e:	4b3a      	ldr	r3, [pc, #232]	; (400f88 <udd_ctrl_in_sent+0x19c>)
  400ea0:	6899      	ldr	r1, [r3, #8]
  400ea2:	4b38      	ldr	r3, [pc, #224]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400ea4:	8818      	ldrh	r0, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400ea6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400eaa:	fab3 f383 	clz	r3, r3
  400eae:	095b      	lsrs	r3, r3, #5
  400eb0:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  400eb2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400eb4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400eb8:	2200      	movs	r2, #0
  400eba:	4b39      	ldr	r3, [pc, #228]	; (400fa0 <udd_ctrl_in_sent+0x1b4>)
  400ebc:	701a      	strb	r2, [r3, #0]
	return flags;
  400ebe:	9d05      	ldr	r5, [sp, #20]
	if (Is_udd_bank0_received(0)) {
  400ec0:	4b34      	ldr	r3, [pc, #208]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ec4:	f013 0f02 	tst.w	r3, #2
  400ec8:	d13d      	bne.n	400f46 <udd_ctrl_in_sent+0x15a>
	for (i = 0; i < nb_remain; i++) {
  400eca:	b14c      	cbz	r4, 400ee0 <udd_ctrl_in_sent+0xf4>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  400ecc:	4401      	add	r1, r0
  400ece:	460a      	mov	r2, r1
		udd_endpoint_fifo_write(0, *ptr_src++);
  400ed0:	4830      	ldr	r0, [pc, #192]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400ed2:	f812 3b01 	ldrb.w	r3, [r2], #1
  400ed6:	6503      	str	r3, [r0, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  400ed8:	1a53      	subs	r3, r2, r1
  400eda:	b2db      	uxtb	r3, r3
  400edc:	42a3      	cmp	r3, r4
  400ede:	d3f8      	bcc.n	400ed2 <udd_ctrl_in_sent+0xe6>
	udd_ctrl_payload_nb_trans += nb_remain;
  400ee0:	4b28      	ldr	r3, [pc, #160]	; (400f84 <udd_ctrl_in_sent+0x198>)
  400ee2:	881a      	ldrh	r2, [r3, #0]
  400ee4:	4414      	add	r4, r2
  400ee6:	801c      	strh	r4, [r3, #0]
	udd_set_transmit_ready(0);
  400ee8:	4a2a      	ldr	r2, [pc, #168]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400eea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400eec:	9303      	str	r3, [sp, #12]
  400eee:	9b03      	ldr	r3, [sp, #12]
  400ef0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400ef4:	9303      	str	r3, [sp, #12]
  400ef6:	9b03      	ldr	r3, [sp, #12]
  400ef8:	f043 0310 	orr.w	r3, r3, #16
  400efc:	9303      	str	r3, [sp, #12]
  400efe:	9b03      	ldr	r3, [sp, #12]
  400f00:	6313      	str	r3, [r2, #48]	; 0x30
  400f02:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f04:	f013 0f10 	tst.w	r3, #16
  400f08:	d0fb      	beq.n	400f02 <udd_ctrl_in_sent+0x116>
	udd_ack_in_sent(0);
  400f0a:	4a22      	ldr	r2, [pc, #136]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400f0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f0e:	9304      	str	r3, [sp, #16]
  400f10:	9b04      	ldr	r3, [sp, #16]
  400f12:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f16:	9304      	str	r3, [sp, #16]
  400f18:	9b04      	ldr	r3, [sp, #16]
  400f1a:	f023 0301 	bic.w	r3, r3, #1
  400f1e:	9304      	str	r3, [sp, #16]
  400f20:	9b04      	ldr	r3, [sp, #16]
  400f22:	6313      	str	r3, [r2, #48]	; 0x30
  400f24:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f26:	f013 0f01 	tst.w	r3, #1
  400f2a:	d1fb      	bne.n	400f24 <udd_ctrl_in_sent+0x138>
	if (cpu_irq_is_enabled_flags(flags))
  400f2c:	2d00      	cmp	r5, #0
  400f2e:	d0a2      	beq.n	400e76 <udd_ctrl_in_sent+0x8a>
		cpu_irq_enable();
  400f30:	2201      	movs	r2, #1
  400f32:	4b1b      	ldr	r3, [pc, #108]	; (400fa0 <udd_ctrl_in_sent+0x1b4>)
  400f34:	701a      	strb	r2, [r3, #0]
  400f36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f3a:	b662      	cpsie	i
  400f3c:	e79b      	b.n	400e76 <udd_ctrl_in_sent+0x8a>
		b_shortpacket = true;
  400f3e:	2201      	movs	r2, #1
  400f40:	4b13      	ldr	r3, [pc, #76]	; (400f90 <udd_ctrl_in_sent+0x1a4>)
  400f42:	701a      	strb	r2, [r3, #0]
  400f44:	e7ab      	b.n	400e9e <udd_ctrl_in_sent+0xb2>
	if (cpu_irq_is_enabled_flags(flags))
  400f46:	b12d      	cbz	r5, 400f54 <udd_ctrl_in_sent+0x168>
		cpu_irq_enable();
  400f48:	2201      	movs	r2, #1
  400f4a:	4b15      	ldr	r3, [pc, #84]	; (400fa0 <udd_ctrl_in_sent+0x1b4>)
  400f4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400f4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400f52:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  400f54:	2204      	movs	r2, #4
  400f56:	4b0a      	ldr	r3, [pc, #40]	; (400f80 <udd_ctrl_in_sent+0x194>)
  400f58:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  400f5a:	4a0e      	ldr	r2, [pc, #56]	; (400f94 <udd_ctrl_in_sent+0x1a8>)
  400f5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f5e:	9302      	str	r3, [sp, #8]
  400f60:	9b02      	ldr	r3, [sp, #8]
  400f62:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  400f66:	9302      	str	r3, [sp, #8]
  400f68:	9b02      	ldr	r3, [sp, #8]
  400f6a:	f023 0301 	bic.w	r3, r3, #1
  400f6e:	9302      	str	r3, [sp, #8]
  400f70:	9b02      	ldr	r3, [sp, #8]
  400f72:	6313      	str	r3, [r2, #48]	; 0x30
  400f74:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f76:	f013 0f01 	tst.w	r3, #1
  400f7a:	d1fb      	bne.n	400f74 <udd_ctrl_in_sent+0x188>
  400f7c:	e77b      	b.n	400e76 <udd_ctrl_in_sent+0x8a>
  400f7e:	bf00      	nop
  400f80:	200006c2 	.word	0x200006c2
  400f84:	200006be 	.word	0x200006be
  400f88:	20002718 	.word	0x20002718
  400f8c:	200006c0 	.word	0x200006c0
  400f90:	200006bc 	.word	0x200006bc
  400f94:	40034000 	.word	0x40034000
  400f98:	00400ddd 	.word	0x00400ddd
  400f9c:	00400d55 	.word	0x00400d55
  400fa0:	200000a0 	.word	0x200000a0

00400fa4 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  400fa4:	b538      	push	{r3, r4, r5, lr}
	if (ptr_job->busy == false) {
  400fa6:	7c43      	ldrb	r3, [r0, #17]
  400fa8:	f013 0f10 	tst.w	r3, #16
  400fac:	d016      	beq.n	400fdc <udd_ep_finish_job+0x38>
  400fae:	460d      	mov	r5, r1
		return; // No on-going job
	}
	ptr_job->busy = false;
  400fb0:	7c43      	ldrb	r3, [r0, #17]
  400fb2:	f36f 1304 	bfc	r3, #4, #1
  400fb6:	7443      	strb	r3, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  400fb8:	6804      	ldr	r4, [r0, #0]
  400fba:	b17c      	cbz	r4, 400fdc <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  400fbc:	f102 030c 	add.w	r3, r2, #12
  400fc0:	4907      	ldr	r1, [pc, #28]	; (400fe0 <udd_ep_finish_job+0x3c>)
  400fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  400fc6:	f413 6f80 	tst.w	r3, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  400fca:	bf18      	it	ne
  400fcc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  400fd0:	6881      	ldr	r1, [r0, #8]
  400fd2:	2d01      	cmp	r5, #1
  400fd4:	bf14      	ite	ne
  400fd6:	2000      	movne	r0, #0
  400fd8:	2001      	moveq	r0, #1
  400fda:	47a0      	blx	r4
  400fdc:	bd38      	pop	{r3, r4, r5, pc}
  400fde:	bf00      	nop
  400fe0:	40034000 	.word	0x40034000

00400fe4 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  400fe4:	b430      	push	{r4, r5}
  400fe6:	b082      	sub	sp, #8
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  400fe8:	1e41      	subs	r1, r0, #1
  400fea:	0083      	lsls	r3, r0, #2
  400fec:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  400ff0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  400ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  400ff6:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  400ff8:	f012 0f02 	tst.w	r2, #2
  400ffc:	d032      	beq.n	401064 <udd_ep_ack_out_received+0x80>
  400ffe:	f014 0f40 	tst.w	r4, #64	; 0x40
  401002:	d108      	bne.n	401016 <udd_ep_ack_out_received+0x32>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  401004:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401008:	4c2a      	ldr	r4, [pc, #168]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  40100a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40100e:	7c54      	ldrb	r4, [r2, #17]
  401010:	f36f 0483 	bfc	r4, #2, #2
  401014:	7454      	strb	r4, [r2, #17]
	} else {
		// Must be bank1
		ptr_job->bank = 1;
	}
	if (ptr_job->bank == 0) {
  401016:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40101a:	4c26      	ldr	r4, [pc, #152]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  40101c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  401020:	7c52      	ldrb	r2, [r2, #17]
  401022:	f012 0f0c 	tst.w	r2, #12
  401026:	d128      	bne.n	40107a <udd_ep_ack_out_received+0x96>
		udd_ack_bank0_received(ep);
  401028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40102a:	9200      	str	r2, [sp, #0]
  40102c:	9a00      	ldr	r2, [sp, #0]
  40102e:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401032:	9200      	str	r2, [sp, #0]
  401034:	9a00      	ldr	r2, [sp, #0]
  401036:	f022 0202 	bic.w	r2, r2, #2
  40103a:	9200      	str	r2, [sp, #0]
  40103c:	9a00      	ldr	r2, [sp, #0]
  40103e:	631a      	str	r2, [r3, #48]	; 0x30
  401040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401042:	f012 0f02 	tst.w	r2, #2
  401046:	d1fb      	bne.n	401040 <udd_ep_ack_out_received+0x5c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401048:	b380      	cbz	r0, 4010ac <udd_ep_ack_out_received+0xc8>
  40104a:	2803      	cmp	r0, #3
  40104c:	d02e      	beq.n	4010ac <udd_ep_ack_out_received+0xc8>
			ptr_job->bank = 1;
  40104e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  401052:	4b18      	ldr	r3, [pc, #96]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  401054:	eb03 0381 	add.w	r3, r3, r1, lsl #2
  401058:	7c5a      	ldrb	r2, [r3, #17]
  40105a:	2101      	movs	r1, #1
  40105c:	f361 0283 	bfi	r2, r1, #2, #2
  401060:	745a      	strb	r2, [r3, #17]
  401062:	e023      	b.n	4010ac <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 1;
  401064:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401068:	4c12      	ldr	r4, [pc, #72]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  40106a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  40106e:	7c54      	ldrb	r4, [r2, #17]
  401070:	2501      	movs	r5, #1
  401072:	f365 0483 	bfi	r4, r5, #2, #2
  401076:	7454      	strb	r4, [r2, #17]
  401078:	e7cd      	b.n	401016 <udd_ep_ack_out_received+0x32>
		}
	} else {
		udd_ack_bank1_received(ep);
  40107a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40107c:	9201      	str	r2, [sp, #4]
  40107e:	9a01      	ldr	r2, [sp, #4]
  401080:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401084:	9201      	str	r2, [sp, #4]
  401086:	9a01      	ldr	r2, [sp, #4]
  401088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  40108c:	9201      	str	r2, [sp, #4]
  40108e:	9a01      	ldr	r2, [sp, #4]
  401090:	631a      	str	r2, [r3, #48]	; 0x30
  401092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401094:	f012 0f40 	tst.w	r2, #64	; 0x40
  401098:	d1fb      	bne.n	401092 <udd_ep_ack_out_received+0xae>
		ptr_job->bank = 0;
  40109a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40109e:	4b05      	ldr	r3, [pc, #20]	; (4010b4 <udd_ep_ack_out_received+0xd0>)
  4010a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4010a4:	7c4b      	ldrb	r3, [r1, #17]
  4010a6:	f36f 0383 	bfc	r3, #2, #2
  4010aa:	744b      	strb	r3, [r1, #17]
	}
}
  4010ac:	b002      	add	sp, #8
  4010ae:	bc30      	pop	{r4, r5}
  4010b0:	4770      	bx	lr
  4010b2:	bf00      	nop
  4010b4:	200006c4 	.word	0x200006c4

004010b8 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4010b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4010bc:	b083      	sub	sp, #12
  4010be:	4688      	mov	r8, r1
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4010c0:	4681      	mov	r9, r0
  4010c2:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4010c4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  4010c8:	4b66      	ldr	r3, [pc, #408]	; (401264 <udd_ep_in_sent+0x1ac>)
  4010ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4010ce:	f893 c011 	ldrb.w	ip, [r3, #17]
  4010d2:	f3cc 0c81 	ubfx	ip, ip, #2, #2
  4010d6:	2800      	cmp	r0, #0
  4010d8:	f000 80b7 	beq.w	40124a <udd_ep_in_sent+0x192>
  4010dc:	2803      	cmp	r0, #3
  4010de:	bf0c      	ite	eq
  4010e0:	2301      	moveq	r3, #1
  4010e2:	2302      	movne	r3, #2
  4010e4:	4563      	cmp	r3, ip
  4010e6:	f340 80b2 	ble.w	40124e <udd_ep_in_sent+0x196>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4010ea:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4010ee:	4a5d      	ldr	r2, [pc, #372]	; (401264 <udd_ep_in_sent+0x1ac>)
  4010f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4010f4:	68da      	ldr	r2, [r3, #12]
  4010f6:	689b      	ldr	r3, [r3, #8]
  4010f8:	429a      	cmp	r2, r3
  4010fa:	d309      	bcc.n	401110 <udd_ep_in_sent+0x58>
  4010fc:	eb06 0186 	add.w	r1, r6, r6, lsl #2
  401100:	4c58      	ldr	r4, [pc, #352]	; (401264 <udd_ep_in_sent+0x1ac>)
  401102:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  401106:	7c49      	ldrb	r1, [r1, #17]
  401108:	f011 0f40 	tst.w	r1, #64	; 0x40
  40110c:	f000 80a3 	beq.w	401256 <udd_ep_in_sent+0x19e>
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401110:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  401114:	4953      	ldr	r1, [pc, #332]	; (401264 <udd_ep_in_sent+0x1ac>)
  401116:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  40111a:	686c      	ldr	r4, [r5, #4]
  40111c:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40111e:	1a99      	subs	r1, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401120:	8a2b      	ldrh	r3, [r5, #16]
  401122:	f3c3 0709 	ubfx	r7, r3, #0, #10
	if (nb_remain < pkt_size) {
  401126:	42b9      	cmp	r1, r7
		pkt_size = nb_remain;
  401128:	bf3a      	itte	cc
  40112a:	460f      	movcc	r7, r1
		is_short_pkt = true;
  40112c:	f04f 0e01 	movcc.w	lr, #1
	bool is_short_pkt = false;
  401130:	f04f 0e00 	movcs.w	lr, #0
	ptr_job->buf_cnt += pkt_size;
  401134:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401138:	494a      	ldr	r1, [pc, #296]	; (401264 <udd_ep_in_sent+0x1ac>)
  40113a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40113e:	443a      	add	r2, r7
  401140:	60da      	str	r2, [r3, #12]
	for (; pkt_size >= 8; pkt_size -= 8) {
  401142:	2f07      	cmp	r7, #7
  401144:	d92b      	bls.n	40119e <udd_ep_in_sent+0xe6>
  401146:	f104 0308 	add.w	r3, r4, #8
  40114a:	463d      	mov	r5, r7
  40114c:	0082      	lsls	r2, r0, #2
  40114e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401152:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401156:	f813 1c08 	ldrb.w	r1, [r3, #-8]
  40115a:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40115c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
  401160:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401162:	f813 1c06 	ldrb.w	r1, [r3, #-6]
  401166:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401168:	f813 1c05 	ldrb.w	r1, [r3, #-5]
  40116c:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40116e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
  401172:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401174:	f813 1c03 	ldrb.w	r1, [r3, #-3]
  401178:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40117a:	f813 1c02 	ldrb.w	r1, [r3, #-2]
  40117e:	6511      	str	r1, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401180:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  401184:	6511      	str	r1, [r2, #80]	; 0x50
	for (; pkt_size >= 8; pkt_size -= 8) {
  401186:	3d08      	subs	r5, #8
  401188:	3308      	adds	r3, #8
  40118a:	2d07      	cmp	r5, #7
  40118c:	d8e3      	bhi.n	401156 <udd_ep_in_sent+0x9e>
  40118e:	f1a7 0308 	sub.w	r3, r7, #8
  401192:	f023 0307 	bic.w	r3, r3, #7
  401196:	3308      	adds	r3, #8
  401198:	441c      	add	r4, r3
  40119a:	f007 0707 	and.w	r7, r7, #7
	for (; pkt_size; pkt_size--) {
  40119e:	b14f      	cbz	r7, 4011b4 <udd_ep_in_sent+0xfc>
  4011a0:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4011a2:	4931      	ldr	r1, [pc, #196]	; (401268 <udd_ep_in_sent+0x1b0>)
  4011a4:	f109 0914 	add.w	r9, r9, #20
  4011a8:	f814 2b01 	ldrb.w	r2, [r4], #1
  4011ac:	f841 2029 	str.w	r2, [r1, r9, lsl #2]
	for (; pkt_size; pkt_size--) {
  4011b0:	429c      	cmp	r4, r3
  4011b2:	d1f9      	bne.n	4011a8 <udd_ep_in_sent+0xf0>
	ptr_job->bank++;
  4011b4:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  4011b8:	4a2a      	ldr	r2, [pc, #168]	; (401264 <udd_ep_in_sent+0x1ac>)
  4011ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4011be:	f10c 0c01 	add.w	ip, ip, #1
  4011c2:	7c5a      	ldrb	r2, [r3, #17]
  4011c4:	f36c 0283 	bfi	r2, ip, #2, #2
  4011c8:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  4011ca:	f1b8 0f00 	cmp.w	r8, #0
  4011ce:	d014      	beq.n	4011fa <udd_ep_in_sent+0x142>
  4011d0:	0080      	lsls	r0, r0, #2
  4011d2:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  4011d6:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  4011da:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4011dc:	9301      	str	r3, [sp, #4]
  4011de:	9b01      	ldr	r3, [sp, #4]
  4011e0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4011e4:	9301      	str	r3, [sp, #4]
  4011e6:	9b01      	ldr	r3, [sp, #4]
  4011e8:	f043 0310 	orr.w	r3, r3, #16
  4011ec:	9301      	str	r3, [sp, #4]
  4011ee:	9b01      	ldr	r3, [sp, #4]
  4011f0:	6303      	str	r3, [r0, #48]	; 0x30
  4011f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4011f4:	f013 0f10 	tst.w	r3, #16
  4011f8:	d0fb      	beq.n	4011f2 <udd_ep_in_sent+0x13a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4011fa:	f1be 0f00 	cmp.w	lr, #0
  4011fe:	d008      	beq.n	401212 <udd_ep_in_sent+0x15a>
		ptr_job->b_shortpacket = false;
  401200:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401204:	4a17      	ldr	r2, [pc, #92]	; (401264 <udd_ep_in_sent+0x1ac>)
  401206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40120a:	7c5a      	ldrb	r2, [r3, #17]
  40120c:	f36f 1286 	bfc	r2, #6, #1
  401210:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401212:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401216:	4a13      	ldr	r2, [pc, #76]	; (401264 <udd_ep_in_sent+0x1ac>)
  401218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40121c:	68da      	ldr	r2, [r3, #12]
  40121e:	689b      	ldr	r3, [r3, #8]
  401220:	429a      	cmp	r2, r3
  401222:	d31a      	bcc.n	40125a <udd_ep_in_sent+0x1a2>
			&& (!ptr_job->b_shortpacket)) {
  401224:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  401228:	4a0e      	ldr	r2, [pc, #56]	; (401264 <udd_ep_in_sent+0x1ac>)
  40122a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40122e:	7c5b      	ldrb	r3, [r3, #17]
  401230:	f013 0f40 	tst.w	r3, #64	; 0x40
  401234:	d113      	bne.n	40125e <udd_ep_in_sent+0x1a6>
		ptr_job->b_buf_end = true;
  401236:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40123a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  40123e:	7c73      	ldrb	r3, [r6, #17]
  401240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401244:	7473      	strb	r3, [r6, #17]
		return false;
  401246:	2000      	movs	r0, #0
  401248:	e002      	b.n	401250 <udd_ep_in_sent+0x198>
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40124a:	2301      	movs	r3, #1
  40124c:	e74a      	b.n	4010e4 <udd_ep_in_sent+0x2c>
		return true; // Data pending
  40124e:	2001      	movs	r0, #1
	}
	return true; // Pending
}
  401250:	b003      	add	sp, #12
  401252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
  401256:	2000      	movs	r0, #0
  401258:	e7fa      	b.n	401250 <udd_ep_in_sent+0x198>
	return true; // Pending
  40125a:	2001      	movs	r0, #1
  40125c:	e7f8      	b.n	401250 <udd_ep_in_sent+0x198>
  40125e:	2001      	movs	r0, #1
  401260:	e7f6      	b.n	401250 <udd_ep_in_sent+0x198>
  401262:	bf00      	nop
  401264:	200006c4 	.word	0x200006c4
  401268:	40034000 	.word	0x40034000

0040126c <UDP_Handler>:
{
  40126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401270:	b09b      	sub	sp, #108	; 0x6c
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401272:	4b86      	ldr	r3, [pc, #536]	; (40148c <UDP_Handler+0x220>)
  401274:	4798      	blx	r3
  401276:	b920      	cbnz	r0, 401282 <UDP_Handler+0x16>
  401278:	4b85      	ldr	r3, [pc, #532]	; (401490 <UDP_Handler+0x224>)
  40127a:	69db      	ldr	r3, [r3, #28]
  40127c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401280:	d03b      	beq.n	4012fa <UDP_Handler+0x8e>
	udd_enable_periph_ck();
  401282:	2022      	movs	r0, #34	; 0x22
  401284:	4b83      	ldr	r3, [pc, #524]	; (401494 <UDP_Handler+0x228>)
  401286:	4798      	blx	r3
	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401288:	4b81      	ldr	r3, [pc, #516]	; (401490 <UDP_Handler+0x224>)
  40128a:	699b      	ldr	r3, [r3, #24]
  40128c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401290:	d004      	beq.n	40129c <UDP_Handler+0x30>
  401292:	4b7f      	ldr	r3, [pc, #508]	; (401490 <UDP_Handler+0x224>)
  401294:	69db      	ldr	r3, [r3, #28]
  401296:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40129a:	d137      	bne.n	40130c <UDP_Handler+0xa0>
	if (!Is_udd_endpoint_interrupt(0))
  40129c:	4b7c      	ldr	r3, [pc, #496]	; (401490 <UDP_Handler+0x224>)
  40129e:	69db      	ldr	r3, [r3, #28]
  4012a0:	f013 0f01 	tst.w	r3, #1
  4012a4:	f000 81b6 	beq.w	401614 <UDP_Handler+0x3a8>
	if (Is_udd_setup_received(0)) {
  4012a8:	4b79      	ldr	r3, [pc, #484]	; (401490 <UDP_Handler+0x224>)
  4012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012ac:	f013 0f04 	tst.w	r3, #4
  4012b0:	d133      	bne.n	40131a <UDP_Handler+0xae>
	if (Is_udd_in_sent(0)) {
  4012b2:	4b77      	ldr	r3, [pc, #476]	; (401490 <UDP_Handler+0x224>)
  4012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012b6:	f013 0f01 	tst.w	r3, #1
  4012ba:	f040 80c3 	bne.w	401444 <UDP_Handler+0x1d8>
	if (Is_udd_bank0_received(0)) {
  4012be:	4b74      	ldr	r3, [pc, #464]	; (401490 <UDP_Handler+0x224>)
  4012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012c2:	f013 0f02 	tst.w	r3, #2
  4012c6:	f040 80c0 	bne.w	40144a <UDP_Handler+0x1de>
	if (Is_udd_stall(0)) {
  4012ca:	4b71      	ldr	r3, [pc, #452]	; (401490 <UDP_Handler+0x224>)
  4012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012ce:	f013 0f08 	tst.w	r3, #8
  4012d2:	f000 819f 	beq.w	401614 <UDP_Handler+0x3a8>
		udd_ack_stall(0);
  4012d6:	4a6e      	ldr	r2, [pc, #440]	; (401490 <UDP_Handler+0x224>)
  4012d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012da:	9300      	str	r3, [sp, #0]
  4012dc:	9b00      	ldr	r3, [sp, #0]
  4012de:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4012e2:	9300      	str	r3, [sp, #0]
  4012e4:	9b00      	ldr	r3, [sp, #0]
  4012e6:	f023 0308 	bic.w	r3, r3, #8
  4012ea:	9300      	str	r3, [sp, #0]
  4012ec:	9b00      	ldr	r3, [sp, #0]
  4012ee:	6313      	str	r3, [r2, #48]	; 0x30
  4012f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012f2:	f013 0f08 	tst.w	r3, #8
  4012f6:	d1fb      	bne.n	4012f0 <UDP_Handler+0x84>
  4012f8:	e005      	b.n	401306 <UDP_Handler+0x9a>
  __ASM volatile ("cpsid i" : : : "memory");
  4012fa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4012fc:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401300:	2200      	movs	r2, #0
  401302:	4b65      	ldr	r3, [pc, #404]	; (401498 <UDP_Handler+0x22c>)
  401304:	701a      	strb	r2, [r3, #0]
}
  401306:	b01b      	add	sp, #108	; 0x6c
  401308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udd_ack_sof();
  40130c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401310:	4b5f      	ldr	r3, [pc, #380]	; (401490 <UDP_Handler+0x224>)
  401312:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401314:	4b61      	ldr	r3, [pc, #388]	; (40149c <UDP_Handler+0x230>)
  401316:	4798      	blx	r3
		goto udd_interrupt_sof_end;
  401318:	e7f5      	b.n	401306 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40131a:	4b61      	ldr	r3, [pc, #388]	; (4014a0 <UDP_Handler+0x234>)
  40131c:	781b      	ldrb	r3, [r3, #0]
  40131e:	b9cb      	cbnz	r3, 401354 <UDP_Handler+0xe8>
	if (8 != udd_byte_count(0)) {
  401320:	4b5b      	ldr	r3, [pc, #364]	; (401490 <UDP_Handler+0x224>)
  401322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401324:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401328:	2b08      	cmp	r3, #8
  40132a:	d018      	beq.n	40135e <UDP_Handler+0xf2>
		udd_ack_setup_received(0);
  40132c:	4a58      	ldr	r2, [pc, #352]	; (401490 <UDP_Handler+0x224>)
  40132e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401330:	9301      	str	r3, [sp, #4]
  401332:	9b01      	ldr	r3, [sp, #4]
  401334:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401338:	9301      	str	r3, [sp, #4]
  40133a:	9b01      	ldr	r3, [sp, #4]
  40133c:	f023 0304 	bic.w	r3, r3, #4
  401340:	9301      	str	r3, [sp, #4]
  401342:	9b01      	ldr	r3, [sp, #4]
  401344:	6313      	str	r3, [r2, #48]	; 0x30
  401346:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401348:	f013 0f04 	tst.w	r3, #4
  40134c:	d1fb      	bne.n	401346 <UDP_Handler+0xda>
		udd_ctrl_stall_data();
  40134e:	4b55      	ldr	r3, [pc, #340]	; (4014a4 <UDP_Handler+0x238>)
  401350:	4798      	blx	r3
  401352:	e7d8      	b.n	401306 <UDP_Handler+0x9a>
		udd_ctrl_endofrequest();
  401354:	4b54      	ldr	r3, [pc, #336]	; (4014a8 <UDP_Handler+0x23c>)
  401356:	4798      	blx	r3
		udd_ctrl_init();
  401358:	4b54      	ldr	r3, [pc, #336]	; (4014ac <UDP_Handler+0x240>)
  40135a:	4798      	blx	r3
  40135c:	e7e0      	b.n	401320 <UDP_Handler+0xb4>
  40135e:	4b54      	ldr	r3, [pc, #336]	; (4014b0 <UDP_Handler+0x244>)
  401360:	f103 0008 	add.w	r0, r3, #8
			udd_endpoint_fifo_read(0);
  401364:	494a      	ldr	r1, [pc, #296]	; (401490 <UDP_Handler+0x224>)
  401366:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401368:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (i = 0; i < 8; i++) {
  40136c:	4283      	cmp	r3, r0
  40136e:	d1fa      	bne.n	401366 <UDP_Handler+0xfa>
	if (udc_process_setup() == false) {
  401370:	4b50      	ldr	r3, [pc, #320]	; (4014b4 <UDP_Handler+0x248>)
  401372:	4798      	blx	r3
  401374:	b998      	cbnz	r0, 40139e <UDP_Handler+0x132>
		udd_ack_setup_received(0);
  401376:	4a46      	ldr	r2, [pc, #280]	; (401490 <UDP_Handler+0x224>)
  401378:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40137a:	9302      	str	r3, [sp, #8]
  40137c:	9b02      	ldr	r3, [sp, #8]
  40137e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401382:	9302      	str	r3, [sp, #8]
  401384:	9b02      	ldr	r3, [sp, #8]
  401386:	f023 0304 	bic.w	r3, r3, #4
  40138a:	9302      	str	r3, [sp, #8]
  40138c:	9b02      	ldr	r3, [sp, #8]
  40138e:	6313      	str	r3, [r2, #48]	; 0x30
  401390:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401392:	f013 0f04 	tst.w	r3, #4
  401396:	d1fb      	bne.n	401390 <UDP_Handler+0x124>
		udd_ctrl_stall_data();
  401398:	4b42      	ldr	r3, [pc, #264]	; (4014a4 <UDP_Handler+0x238>)
  40139a:	4798      	blx	r3
  40139c:	e7b3      	b.n	401306 <UDP_Handler+0x9a>
	if (Udd_setup_is_in()) {
  40139e:	4b46      	ldr	r3, [pc, #280]	; (4014b8 <UDP_Handler+0x24c>)
  4013a0:	f993 3000 	ldrsb.w	r3, [r3]
  4013a4:	2b00      	cmp	r3, #0
  4013a6:	db1d      	blt.n	4013e4 <UDP_Handler+0x178>
		udd_ack_setup_received(0);
  4013a8:	4a39      	ldr	r2, [pc, #228]	; (401490 <UDP_Handler+0x224>)
  4013aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013ac:	9305      	str	r3, [sp, #20]
  4013ae:	9b05      	ldr	r3, [sp, #20]
  4013b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013b4:	9305      	str	r3, [sp, #20]
  4013b6:	9b05      	ldr	r3, [sp, #20]
  4013b8:	f023 0304 	bic.w	r3, r3, #4
  4013bc:	9305      	str	r3, [sp, #20]
  4013be:	9b05      	ldr	r3, [sp, #20]
  4013c0:	6313      	str	r3, [r2, #48]	; 0x30
  4013c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013c4:	f013 0f04 	tst.w	r3, #4
  4013c8:	d1fb      	bne.n	4013c2 <UDP_Handler+0x156>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4013ca:	4b3b      	ldr	r3, [pc, #236]	; (4014b8 <UDP_Handler+0x24c>)
  4013cc:	88db      	ldrh	r3, [r3, #6]
  4013ce:	2b00      	cmp	r3, #0
  4013d0:	d035      	beq.n	40143e <UDP_Handler+0x1d2>
		udd_ctrl_prev_payload_nb_trans = 0;
  4013d2:	2300      	movs	r3, #0
  4013d4:	4a39      	ldr	r2, [pc, #228]	; (4014bc <UDP_Handler+0x250>)
  4013d6:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4013d8:	4a39      	ldr	r2, [pc, #228]	; (4014c0 <UDP_Handler+0x254>)
  4013da:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4013dc:	2201      	movs	r2, #1
  4013de:	4b30      	ldr	r3, [pc, #192]	; (4014a0 <UDP_Handler+0x234>)
  4013e0:	701a      	strb	r2, [r3, #0]
  4013e2:	e790      	b.n	401306 <UDP_Handler+0x9a>
		udd_set_endpoint_direction_in(0);
  4013e4:	4a2a      	ldr	r2, [pc, #168]	; (401490 <UDP_Handler+0x224>)
  4013e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013e8:	9303      	str	r3, [sp, #12]
  4013ea:	9b03      	ldr	r3, [sp, #12]
  4013ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4013f0:	9303      	str	r3, [sp, #12]
  4013f2:	9b03      	ldr	r3, [sp, #12]
  4013f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4013f8:	9303      	str	r3, [sp, #12]
  4013fa:	9b03      	ldr	r3, [sp, #12]
  4013fc:	6313      	str	r3, [r2, #48]	; 0x30
  4013fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401400:	f013 0f80 	tst.w	r3, #128	; 0x80
  401404:	d0fb      	beq.n	4013fe <UDP_Handler+0x192>
		udd_ack_setup_received(0);
  401406:	4a22      	ldr	r2, [pc, #136]	; (401490 <UDP_Handler+0x224>)
  401408:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40140a:	9304      	str	r3, [sp, #16]
  40140c:	9b04      	ldr	r3, [sp, #16]
  40140e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401412:	9304      	str	r3, [sp, #16]
  401414:	9b04      	ldr	r3, [sp, #16]
  401416:	f023 0304 	bic.w	r3, r3, #4
  40141a:	9304      	str	r3, [sp, #16]
  40141c:	9b04      	ldr	r3, [sp, #16]
  40141e:	6313      	str	r3, [r2, #48]	; 0x30
  401420:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401422:	f013 0f04 	tst.w	r3, #4
  401426:	d1fb      	bne.n	401420 <UDP_Handler+0x1b4>
		udd_ctrl_prev_payload_nb_trans = 0;
  401428:	2300      	movs	r3, #0
  40142a:	4a24      	ldr	r2, [pc, #144]	; (4014bc <UDP_Handler+0x250>)
  40142c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40142e:	4a24      	ldr	r2, [pc, #144]	; (4014c0 <UDP_Handler+0x254>)
  401430:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401432:	2202      	movs	r2, #2
  401434:	4b1a      	ldr	r3, [pc, #104]	; (4014a0 <UDP_Handler+0x234>)
  401436:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401438:	4b22      	ldr	r3, [pc, #136]	; (4014c4 <UDP_Handler+0x258>)
  40143a:	4798      	blx	r3
  40143c:	e763      	b.n	401306 <UDP_Handler+0x9a>
			udd_ctrl_send_zlp_in();
  40143e:	4b22      	ldr	r3, [pc, #136]	; (4014c8 <UDP_Handler+0x25c>)
  401440:	4798      	blx	r3
  401442:	e760      	b.n	401306 <UDP_Handler+0x9a>
		udd_ctrl_in_sent();
  401444:	4b1f      	ldr	r3, [pc, #124]	; (4014c4 <UDP_Handler+0x258>)
  401446:	4798      	blx	r3
  401448:	e75d      	b.n	401306 <UDP_Handler+0x9a>
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40144a:	4b15      	ldr	r3, [pc, #84]	; (4014a0 <UDP_Handler+0x234>)
  40144c:	781b      	ldrb	r3, [r3, #0]
  40144e:	2b01      	cmp	r3, #1
  401450:	d03c      	beq.n	4014cc <UDP_Handler+0x260>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401452:	2b02      	cmp	r3, #2
  401454:	d004      	beq.n	401460 <UDP_Handler+0x1f4>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401456:	2b04      	cmp	r3, #4
  401458:	d002      	beq.n	401460 <UDP_Handler+0x1f4>
			udd_ctrl_stall_data();
  40145a:	4b12      	ldr	r3, [pc, #72]	; (4014a4 <UDP_Handler+0x238>)
  40145c:	4798      	blx	r3
  40145e:	e001      	b.n	401464 <UDP_Handler+0x1f8>
			udd_ctrl_endofrequest();
  401460:	4b11      	ldr	r3, [pc, #68]	; (4014a8 <UDP_Handler+0x23c>)
  401462:	4798      	blx	r3
		udd_ack_bank0_received(0);
  401464:	4a0a      	ldr	r2, [pc, #40]	; (401490 <UDP_Handler+0x224>)
  401466:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401468:	9306      	str	r3, [sp, #24]
  40146a:	9b06      	ldr	r3, [sp, #24]
  40146c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401470:	9306      	str	r3, [sp, #24]
  401472:	9b06      	ldr	r3, [sp, #24]
  401474:	f023 0302 	bic.w	r3, r3, #2
  401478:	9306      	str	r3, [sp, #24]
  40147a:	9b06      	ldr	r3, [sp, #24]
  40147c:	6313      	str	r3, [r2, #48]	; 0x30
  40147e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401480:	f013 0f02 	tst.w	r3, #2
  401484:	d1fb      	bne.n	40147e <UDP_Handler+0x212>
		udd_ctrl_init();
  401486:	4b09      	ldr	r3, [pc, #36]	; (4014ac <UDP_Handler+0x240>)
  401488:	4798      	blx	r3
  40148a:	e73c      	b.n	401306 <UDP_Handler+0x9a>
  40148c:	004032b1 	.word	0x004032b1
  401490:	40034000 	.word	0x40034000
  401494:	00402fbd 	.word	0x00402fbd
  401498:	200000a0 	.word	0x200000a0
  40149c:	004007d1 	.word	0x004007d1
  4014a0:	200006c2 	.word	0x200006c2
  4014a4:	00400d6d 	.word	0x00400d6d
  4014a8:	00400ddd 	.word	0x00400ddd
  4014ac:	00400d55 	.word	0x00400d55
  4014b0:	20002717 	.word	0x20002717
  4014b4:	00400811 	.word	0x00400811
  4014b8:	20002718 	.word	0x20002718
  4014bc:	200006c0 	.word	0x200006c0
  4014c0:	200006be 	.word	0x200006be
  4014c4:	00400ded 	.word	0x00400ded
  4014c8:	00400da5 	.word	0x00400da5
	nb_data = udd_byte_count(0);
  4014cc:	4b93      	ldr	r3, [pc, #588]	; (40171c <UDP_Handler+0x4b0>)
  4014ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4014d0:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4014d4:	4b92      	ldr	r3, [pc, #584]	; (401720 <UDP_Handler+0x4b4>)
  4014d6:	899b      	ldrh	r3, [r3, #12]
  4014d8:	4a92      	ldr	r2, [pc, #584]	; (401724 <UDP_Handler+0x4b8>)
  4014da:	8815      	ldrh	r5, [r2, #0]
  4014dc:	186a      	adds	r2, r5, r1
  4014de:	4293      	cmp	r3, r2
		nb_data = udd_g_ctrlreq.payload_size -
  4014e0:	bfbc      	itt	lt
  4014e2:	1b5b      	sublt	r3, r3, r5
  4014e4:	b299      	uxthlt	r1, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4014e6:	4b8e      	ldr	r3, [pc, #568]	; (401720 <UDP_Handler+0x4b4>)
  4014e8:	6898      	ldr	r0, [r3, #8]
  4014ea:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4014ec:	b171      	cbz	r1, 40150c <UDP_Handler+0x2a0>
  4014ee:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4014f0:	4c8a      	ldr	r4, [pc, #552]	; (40171c <UDP_Handler+0x4b0>)
  4014f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4014f4:	f802 3b01 	strb.w	r3, [r2], #1
	for (i = 0; i < nb_data; i++) {
  4014f8:	1a13      	subs	r3, r2, r0
  4014fa:	b2db      	uxtb	r3, r3
  4014fc:	428b      	cmp	r3, r1
  4014fe:	d3f8      	bcc.n	4014f2 <UDP_Handler+0x286>
	udd_ctrl_payload_nb_trans += nb_data;
  401500:	440d      	add	r5, r1
  401502:	b2ad      	uxth	r5, r5
  401504:	4b87      	ldr	r3, [pc, #540]	; (401724 <UDP_Handler+0x4b8>)
  401506:	801d      	strh	r5, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401508:	2940      	cmp	r1, #64	; 0x40
  40150a:	d01a      	beq.n	401542 <UDP_Handler+0x2d6>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  40150c:	4b84      	ldr	r3, [pc, #528]	; (401720 <UDP_Handler+0x4b4>)
  40150e:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401510:	695b      	ldr	r3, [r3, #20]
  401512:	b113      	cbz	r3, 40151a <UDP_Handler+0x2ae>
			if (!udd_g_ctrlreq.over_under_run()) {
  401514:	4798      	blx	r3
  401516:	2800      	cmp	r0, #0
  401518:	d030      	beq.n	40157c <UDP_Handler+0x310>
		udd_ack_bank0_received(0);
  40151a:	4a80      	ldr	r2, [pc, #512]	; (40171c <UDP_Handler+0x4b0>)
  40151c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40151e:	9308      	str	r3, [sp, #32]
  401520:	9b08      	ldr	r3, [sp, #32]
  401522:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401526:	9308      	str	r3, [sp, #32]
  401528:	9b08      	ldr	r3, [sp, #32]
  40152a:	f023 0302 	bic.w	r3, r3, #2
  40152e:	9308      	str	r3, [sp, #32]
  401530:	9b08      	ldr	r3, [sp, #32]
  401532:	6313      	str	r3, [r2, #48]	; 0x30
  401534:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401536:	f013 0f02 	tst.w	r3, #2
  40153a:	d1fb      	bne.n	401534 <UDP_Handler+0x2c8>
		udd_ctrl_send_zlp_in();
  40153c:	4b7a      	ldr	r3, [pc, #488]	; (401728 <UDP_Handler+0x4bc>)
  40153e:	4798      	blx	r3
  401540:	e6e1      	b.n	401306 <UDP_Handler+0x9a>
			|| (udd_g_ctrlreq.req.wLength <=
  401542:	4b77      	ldr	r3, [pc, #476]	; (401720 <UDP_Handler+0x4b4>)
  401544:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401546:	4b79      	ldr	r3, [pc, #484]	; (40172c <UDP_Handler+0x4c0>)
  401548:	881b      	ldrh	r3, [r3, #0]
  40154a:	442b      	add	r3, r5
			|| (udd_g_ctrlreq.req.wLength <=
  40154c:	429a      	cmp	r2, r3
  40154e:	dddd      	ble.n	40150c <UDP_Handler+0x2a0>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401550:	4b73      	ldr	r3, [pc, #460]	; (401720 <UDP_Handler+0x4b4>)
  401552:	899b      	ldrh	r3, [r3, #12]
  401554:	42ab      	cmp	r3, r5
  401556:	d025      	beq.n	4015a4 <UDP_Handler+0x338>
	udd_ack_bank0_received(0);
  401558:	4a70      	ldr	r2, [pc, #448]	; (40171c <UDP_Handler+0x4b0>)
  40155a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40155c:	930b      	str	r3, [sp, #44]	; 0x2c
  40155e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401560:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401564:	930b      	str	r3, [sp, #44]	; 0x2c
  401566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401568:	f023 0302 	bic.w	r3, r3, #2
  40156c:	930b      	str	r3, [sp, #44]	; 0x2c
  40156e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401570:	6313      	str	r3, [r2, #48]	; 0x30
  401572:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401574:	f013 0f02 	tst.w	r3, #2
  401578:	d1fb      	bne.n	401572 <UDP_Handler+0x306>
  40157a:	e6c4      	b.n	401306 <UDP_Handler+0x9a>
				udd_ctrl_stall_data();
  40157c:	4b6c      	ldr	r3, [pc, #432]	; (401730 <UDP_Handler+0x4c4>)
  40157e:	4798      	blx	r3
				udd_ack_bank0_received(0);
  401580:	4a66      	ldr	r2, [pc, #408]	; (40171c <UDP_Handler+0x4b0>)
  401582:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401584:	9307      	str	r3, [sp, #28]
  401586:	9b07      	ldr	r3, [sp, #28]
  401588:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40158c:	9307      	str	r3, [sp, #28]
  40158e:	9b07      	ldr	r3, [sp, #28]
  401590:	f023 0302 	bic.w	r3, r3, #2
  401594:	9307      	str	r3, [sp, #28]
  401596:	9b07      	ldr	r3, [sp, #28]
  401598:	6313      	str	r3, [r2, #48]	; 0x30
  40159a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40159c:	f013 0f02 	tst.w	r3, #2
  4015a0:	d1fb      	bne.n	40159a <UDP_Handler+0x32e>
  4015a2:	e6b0      	b.n	401306 <UDP_Handler+0x9a>
		if (!udd_g_ctrlreq.over_under_run) {
  4015a4:	4b5e      	ldr	r3, [pc, #376]	; (401720 <UDP_Handler+0x4b4>)
  4015a6:	695b      	ldr	r3, [r3, #20]
  4015a8:	b153      	cbz	r3, 4015c0 <UDP_Handler+0x354>
		if (!udd_g_ctrlreq.over_under_run()) {
  4015aa:	4798      	blx	r3
  4015ac:	b1e8      	cbz	r0, 4015ea <UDP_Handler+0x37e>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4015ae:	495f      	ldr	r1, [pc, #380]	; (40172c <UDP_Handler+0x4c0>)
  4015b0:	4a5c      	ldr	r2, [pc, #368]	; (401724 <UDP_Handler+0x4b8>)
  4015b2:	880b      	ldrh	r3, [r1, #0]
  4015b4:	8810      	ldrh	r0, [r2, #0]
  4015b6:	4403      	add	r3, r0
  4015b8:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
  4015ba:	2300      	movs	r3, #0
  4015bc:	8013      	strh	r3, [r2, #0]
  4015be:	e7cb      	b.n	401558 <UDP_Handler+0x2ec>
			udd_ctrl_stall_data();
  4015c0:	4b5b      	ldr	r3, [pc, #364]	; (401730 <UDP_Handler+0x4c4>)
  4015c2:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4015c4:	4a55      	ldr	r2, [pc, #340]	; (40171c <UDP_Handler+0x4b0>)
  4015c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015c8:	9309      	str	r3, [sp, #36]	; 0x24
  4015ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015d0:	9309      	str	r3, [sp, #36]	; 0x24
  4015d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015d4:	f023 0302 	bic.w	r3, r3, #2
  4015d8:	9309      	str	r3, [sp, #36]	; 0x24
  4015da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4015dc:	6313      	str	r3, [r2, #48]	; 0x30
  4015de:	4613      	mov	r3, r2
  4015e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4015e2:	f012 0f02 	tst.w	r2, #2
  4015e6:	d1fb      	bne.n	4015e0 <UDP_Handler+0x374>
  4015e8:	e68d      	b.n	401306 <UDP_Handler+0x9a>
			udd_ctrl_stall_data();
  4015ea:	4b51      	ldr	r3, [pc, #324]	; (401730 <UDP_Handler+0x4c4>)
  4015ec:	4798      	blx	r3
			udd_ack_bank0_received(0);
  4015ee:	4a4b      	ldr	r2, [pc, #300]	; (40171c <UDP_Handler+0x4b0>)
  4015f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015f2:	930a      	str	r3, [sp, #40]	; 0x28
  4015f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4015f6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4015fa:	930a      	str	r3, [sp, #40]	; 0x28
  4015fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4015fe:	f023 0302 	bic.w	r3, r3, #2
  401602:	930a      	str	r3, [sp, #40]	; 0x28
  401604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401606:	6313      	str	r3, [r2, #48]	; 0x30
  401608:	4613      	mov	r3, r2
  40160a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40160c:	f012 0f02 	tst.w	r2, #2
  401610:	d1fb      	bne.n	40160a <UDP_Handler+0x39e>
  401612:	e678      	b.n	401306 <UDP_Handler+0x9a>
  401614:	4a47      	ldr	r2, [pc, #284]	; (401734 <UDP_Handler+0x4c8>)
	for (i = 0; i < nb_data; i++) {
  401616:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401618:	f8df e100 	ldr.w	lr, [pc, #256]	; 40171c <UDP_Handler+0x4b0>
  40161c:	4618      	mov	r0, r3
  40161e:	e17f      	b.n	401920 <UDP_Handler+0x6b4>
	uint32_t pkt_size = ptr_job->size;
  401620:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  401624:	4b43      	ldr	r3, [pc, #268]	; (401734 <UDP_Handler+0x4c8>)
  401626:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40162a:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  40162e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	nb_data = udd_byte_count(ep);
  401632:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401634:	f3c3 490a 	ubfx	r9, r3, #16, #11
	if (nb_data > 0) {
  401638:	f1b9 0f00 	cmp.w	r9, #0
  40163c:	f000 81df 	beq.w	4019fe <UDP_Handler+0x792>
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401640:	4b3c      	ldr	r3, [pc, #240]	; (401734 <UDP_Handler+0x4c8>)
  401642:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401646:	f8d3 e008 	ldr.w	lr, [r3, #8]
  40164a:	68da      	ldr	r2, [r3, #12]
  40164c:	ebae 0002 	sub.w	r0, lr, r2
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401650:	6859      	ldr	r1, [r3, #4]
		if (nb_data >= nb_remain) {
  401652:	4548      	cmp	r0, r9
  401654:	f240 81c7 	bls.w	4019e6 <UDP_Handler+0x77a>
		ptr_job->buf_cnt += nb_data;
  401658:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  40165c:	4b35      	ldr	r3, [pc, #212]	; (401734 <UDP_Handler+0x4c8>)
  40165e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401662:	eb02 0009 	add.w	r0, r2, r9
  401666:	60d8      	str	r0, [r3, #12]
	nb_data = udd_byte_count(ep);
  401668:	4648      	mov	r0, r9
	bool b_full = false, b_short;
  40166a:	f04f 0b00 	mov.w	fp, #0
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40166e:	4411      	add	r1, r2
  401670:	460b      	mov	r3, r1
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401672:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401674:	f803 2b01 	strb.w	r2, [r3], #1
		for (i = 0; i < nb_data; i++) {
  401678:	1a5a      	subs	r2, r3, r1
  40167a:	4282      	cmp	r2, r0
  40167c:	d3f9      	bcc.n	401672 <UDP_Handler+0x406>
	udd_ep_ack_out_received(ep);
  40167e:	4630      	mov	r0, r6
  401680:	4b2d      	ldr	r3, [pc, #180]	; (401738 <UDP_Handler+0x4cc>)
  401682:	4798      	blx	r3
	if ((b_full || b_short) &&
  401684:	f1bb 0f00 	cmp.w	fp, #0
  401688:	f000 81bc 	beq.w	401a04 <UDP_Handler+0x798>
			!Is_udd_endpoint_stall_requested(ep)) {
  40168c:	6b23      	ldr	r3, [r4, #48]	; 0x30
	if ((b_full || b_short) &&
  40168e:	f013 0f20 	tst.w	r3, #32
  401692:	f47f ae38 	bne.w	401306 <UDP_Handler+0x9a>
		udd_disable_endpoint_interrupt(ep);
  401696:	4b21      	ldr	r3, [pc, #132]	; (40171c <UDP_Handler+0x4b0>)
  401698:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40169a:	4b26      	ldr	r3, [pc, #152]	; (401734 <UDP_Handler+0x4c8>)
  40169c:	00ba      	lsls	r2, r7, #2
  40169e:	19d1      	adds	r1, r2, r7
  4016a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4016a4:	68cb      	ldr	r3, [r1, #12]
  4016a6:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4016a8:	4632      	mov	r2, r6
  4016aa:	2100      	movs	r1, #0
  4016ac:	4640      	mov	r0, r8
  4016ae:	4b23      	ldr	r3, [pc, #140]	; (40173c <UDP_Handler+0x4d0>)
  4016b0:	4798      	blx	r3
  4016b2:	e628      	b.n	401306 <UDP_Handler+0x9a>
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {

			ptr_job->bank--;
  4016b4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4016b8:	4b1e      	ldr	r3, [pc, #120]	; (401734 <UDP_Handler+0x4c8>)
  4016ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4016be:	7c53      	ldrb	r3, [r2, #17]
  4016c0:	f3c3 0181 	ubfx	r1, r3, #2, #2
  4016c4:	3103      	adds	r1, #3
  4016c6:	f361 0383 	bfi	r3, r1, #2, #2
  4016ca:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4016cc:	7c53      	ldrb	r3, [r2, #17]
  4016ce:	f013 0f20 	tst.w	r3, #32
  4016d2:	d05f      	beq.n	401794 <UDP_Handler+0x528>
				if (ptr_job->bank) {
  4016d4:	f013 0f0c 	tst.w	r3, #12
  4016d8:	d032      	beq.n	401740 <UDP_Handler+0x4d4>
					// Send remaining
					udd_set_transmit_ready(ep);
  4016da:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4016dc:	930c      	str	r3, [sp, #48]	; 0x30
  4016de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4016e0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4016e4:	930c      	str	r3, [sp, #48]	; 0x30
  4016e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4016e8:	f043 0310 	orr.w	r3, r3, #16
  4016ec:	930c      	str	r3, [sp, #48]	; 0x30
  4016ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4016f0:	6323      	str	r3, [r4, #48]	; 0x30
  4016f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4016f4:	f013 0f10 	tst.w	r3, #16
  4016f8:	d0fb      	beq.n	4016f2 <UDP_Handler+0x486>
					udd_ack_in_sent(ep);
  4016fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4016fc:	930d      	str	r3, [sp, #52]	; 0x34
  4016fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401700:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401704:	930d      	str	r3, [sp, #52]	; 0x34
  401706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401708:	f023 0301 	bic.w	r3, r3, #1
  40170c:	930d      	str	r3, [sp, #52]	; 0x34
  40170e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401710:	6323      	str	r3, [r4, #48]	; 0x30
  401712:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401714:	f013 0f01 	tst.w	r3, #1
  401718:	d1fb      	bne.n	401712 <UDP_Handler+0x4a6>
  40171a:	e5f4      	b.n	401306 <UDP_Handler+0x9a>
  40171c:	40034000 	.word	0x40034000
  401720:	20002718 	.word	0x20002718
  401724:	200006be 	.word	0x200006be
  401728:	00400da5 	.word	0x00400da5
  40172c:	200006c0 	.word	0x200006c0
  401730:	00400d6d 	.word	0x00400d6d
  401734:	200006c4 	.word	0x200006c4
  401738:	00400fe5 	.word	0x00400fe5
  40173c:	00400fa5 	.word	0x00400fa5
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401740:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401742:	930e      	str	r3, [sp, #56]	; 0x38
  401744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401746:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40174a:	930e      	str	r3, [sp, #56]	; 0x38
  40174c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40174e:	f023 0301 	bic.w	r3, r3, #1
  401752:	930e      	str	r3, [sp, #56]	; 0x38
  401754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  401756:	6323      	str	r3, [r4, #48]	; 0x30
  401758:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40175a:	f013 0f01 	tst.w	r3, #1
  40175e:	d1fb      	bne.n	401758 <UDP_Handler+0x4ec>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401760:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401762:	930f      	str	r3, [sp, #60]	; 0x3c
  401764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401766:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40176a:	930f      	str	r3, [sp, #60]	; 0x3c
  40176c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40176e:	f043 0320 	orr.w	r3, r3, #32
  401772:	930f      	str	r3, [sp, #60]	; 0x3c
  401774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401776:	6323      	str	r3, [r4, #48]	; 0x30
  401778:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40177a:	f013 0f20 	tst.w	r3, #32
  40177e:	d0fb      	beq.n	401778 <UDP_Handler+0x50c>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401780:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  401784:	4ba1      	ldr	r3, [pc, #644]	; (401a0c <UDP_Handler+0x7a0>)
  401786:	eb03 0387 	add.w	r3, r3, r7, lsl #2
  40178a:	7c5a      	ldrb	r2, [r3, #17]
  40178c:	f36f 1245 	bfc	r2, #5, #1
  401790:	745a      	strb	r2, [r3, #17]
  401792:	e5b8      	b.n	401306 <UDP_Handler+0x9a>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401794:	f013 0f80 	tst.w	r3, #128	; 0x80
  401798:	d138      	bne.n	40180c <UDP_Handler+0x5a0>
				ptr_job->b_buf_end = false;
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                udd_disable_endpoint_interrupt(ep);
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40179a:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40179e:	4b9b      	ldr	r3, [pc, #620]	; (401a0c <UDP_Handler+0x7a0>)
  4017a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4017a4:	68da      	ldr	r2, [r3, #12]
  4017a6:	689b      	ldr	r3, [r3, #8]
  4017a8:	429a      	cmp	r2, r3
  4017aa:	d341      	bcc.n	401830 <UDP_Handler+0x5c4>
					!ptr_job->b_shortpacket &&
  4017ac:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  4017b0:	4b96      	ldr	r3, [pc, #600]	; (401a0c <UDP_Handler+0x7a0>)
  4017b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4017b6:	7c5b      	ldrb	r3, [r3, #17]
  4017b8:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  4017bc:	d138      	bne.n	401830 <UDP_Handler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4017be:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4017c2:	fab3 f383 	clz	r3, r3
  4017c6:	095b      	lsrs	r3, r3, #5
  4017c8:	9310      	str	r3, [sp, #64]	; 0x40
  __ASM volatile ("cpsid i" : : : "memory");
  4017ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4017cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4017d0:	2200      	movs	r2, #0
  4017d2:	4b8f      	ldr	r3, [pc, #572]	; (401a10 <UDP_Handler+0x7a4>)
  4017d4:	701a      	strb	r2, [r3, #0]
	return flags;
  4017d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  4017d8:	4a8e      	ldr	r2, [pc, #568]	; (401a14 <UDP_Handler+0x7a8>)
  4017da:	6155      	str	r5, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  4017dc:	b12b      	cbz	r3, 4017ea <UDP_Handler+0x57e>
		cpu_irq_enable();
  4017de:	2201      	movs	r2, #1
  4017e0:	4b8b      	ldr	r3, [pc, #556]	; (401a10 <UDP_Handler+0x7a4>)
  4017e2:	701a      	strb	r2, [r3, #0]
  4017e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4017e8:	b662      	cpsie	i
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  4017ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4017ec:	9311      	str	r3, [sp, #68]	; 0x44
  4017ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4017f0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4017f4:	9311      	str	r3, [sp, #68]	; 0x44
  4017f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4017f8:	f023 0301 	bic.w	r3, r3, #1
  4017fc:	9311      	str	r3, [sp, #68]	; 0x44
  4017fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401800:	6323      	str	r3, [r4, #48]	; 0x30
  401802:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401804:	f013 0f01 	tst.w	r3, #1
  401808:	d1fb      	bne.n	401802 <UDP_Handler+0x596>
  40180a:	e57c      	b.n	401306 <UDP_Handler+0x9a>
				ptr_job->b_buf_end = false;
  40180c:	2314      	movs	r3, #20
  40180e:	4a7f      	ldr	r2, [pc, #508]	; (401a0c <UDP_Handler+0x7a0>)
  401810:	fb03 2307 	mla	r3, r3, r7, r2
  401814:	7c59      	ldrb	r1, [r3, #17]
  401816:	f36f 11c7 	bfc	r1, #7, #1
  40181a:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40181c:	68da      	ldr	r2, [r3, #12]
  40181e:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  401820:	4b7c      	ldr	r3, [pc, #496]	; (401a14 <UDP_Handler+0x7a8>)
  401822:	615d      	str	r5, [r3, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401824:	4632      	mov	r2, r6
  401826:	2100      	movs	r1, #0
  401828:	4640      	mov	r0, r8
  40182a:	4b7b      	ldr	r3, [pc, #492]	; (401a18 <UDP_Handler+0x7ac>)
  40182c:	4798      	blx	r3
  40182e:	e7b4      	b.n	40179a <UDP_Handler+0x52e>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401830:	2e00      	cmp	r6, #0
  401832:	d05b      	beq.n	4018ec <UDP_Handler+0x680>
  401834:	2e03      	cmp	r6, #3
  401836:	d059      	beq.n	4018ec <UDP_Handler+0x680>
					&& ptr_job->bank > 0) {
  401838:	eb07 0287 	add.w	r2, r7, r7, lsl #2
  40183c:	4b73      	ldr	r3, [pc, #460]	; (401a0c <UDP_Handler+0x7a0>)
  40183e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401842:	7c5b      	ldrb	r3, [r3, #17]
  401844:	f013 0f0c 	tst.w	r3, #12
  401848:	d024      	beq.n	401894 <UDP_Handler+0x628>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  40184a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40184c:	9312      	str	r3, [sp, #72]	; 0x48
  40184e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401850:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401854:	9312      	str	r3, [sp, #72]	; 0x48
  401856:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401858:	f043 0310 	orr.w	r3, r3, #16
  40185c:	9312      	str	r3, [sp, #72]	; 0x48
  40185e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  401860:	6323      	str	r3, [r4, #48]	; 0x30
  401862:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401864:	f013 0f10 	tst.w	r3, #16
  401868:	d0fb      	beq.n	401862 <UDP_Handler+0x5f6>
				udd_ack_in_sent(ep);
  40186a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40186c:	9313      	str	r3, [sp, #76]	; 0x4c
  40186e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401870:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401874:	9313      	str	r3, [sp, #76]	; 0x4c
  401876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401878:	f023 0301 	bic.w	r3, r3, #1
  40187c:	9313      	str	r3, [sp, #76]	; 0x4c
  40187e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401880:	6323      	str	r3, [r4, #48]	; 0x30
  401882:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401884:	f013 0f01 	tst.w	r3, #1
  401888:	d1fb      	bne.n	401882 <UDP_Handler+0x616>
				udd_ep_in_sent(ep, false);
  40188a:	2100      	movs	r1, #0
  40188c:	4630      	mov	r0, r6
  40188e:	4b63      	ldr	r3, [pc, #396]	; (401a1c <UDP_Handler+0x7b0>)
  401890:	4798      	blx	r3
  401892:	e538      	b.n	401306 <UDP_Handler+0x9a>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401894:	2101      	movs	r1, #1
  401896:	4630      	mov	r0, r6
  401898:	4b60      	ldr	r3, [pc, #384]	; (401a1c <UDP_Handler+0x7b0>)
  40189a:	4798      	blx	r3
  40189c:	b1a0      	cbz	r0, 4018c8 <UDP_Handler+0x65c>
					ptr_job->b_buf_end = false;
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
                    udd_disable_endpoint_interrupt(ep);
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
				}
				udd_ack_in_sent(ep);
  40189e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018a0:	9314      	str	r3, [sp, #80]	; 0x50
  4018a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4018a4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018a8:	9314      	str	r3, [sp, #80]	; 0x50
  4018aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4018ac:	f023 0301 	bic.w	r3, r3, #1
  4018b0:	9314      	str	r3, [sp, #80]	; 0x50
  4018b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4018b4:	6323      	str	r3, [r4, #48]	; 0x30
  4018b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018b8:	f013 0f01 	tst.w	r3, #1
  4018bc:	d1fb      	bne.n	4018b6 <UDP_Handler+0x64a>
				udd_ep_in_sent(ep, false);
  4018be:	2100      	movs	r1, #0
  4018c0:	4630      	mov	r0, r6
  4018c2:	4b56      	ldr	r3, [pc, #344]	; (401a1c <UDP_Handler+0x7b0>)
  4018c4:	4798      	blx	r3
  4018c6:	e51e      	b.n	401306 <UDP_Handler+0x9a>
					ptr_job->b_buf_end = false;
  4018c8:	2314      	movs	r3, #20
  4018ca:	4a50      	ldr	r2, [pc, #320]	; (401a0c <UDP_Handler+0x7a0>)
  4018cc:	fb03 2707 	mla	r7, r3, r7, r2
  4018d0:	7c7a      	ldrb	r2, [r7, #17]
  4018d2:	f36f 12c7 	bfc	r2, #7, #1
  4018d6:	747a      	strb	r2, [r7, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4018d8:	68fb      	ldr	r3, [r7, #12]
  4018da:	60bb      	str	r3, [r7, #8]
                    udd_disable_endpoint_interrupt(ep);
  4018dc:	4b4d      	ldr	r3, [pc, #308]	; (401a14 <UDP_Handler+0x7a8>)
  4018de:	615d      	str	r5, [r3, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4018e0:	4632      	mov	r2, r6
  4018e2:	2100      	movs	r1, #0
  4018e4:	4640      	mov	r0, r8
  4018e6:	4b4c      	ldr	r3, [pc, #304]	; (401a18 <UDP_Handler+0x7ac>)
  4018e8:	4798      	blx	r3
  4018ea:	e7d8      	b.n	40189e <UDP_Handler+0x632>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4018ec:	2101      	movs	r1, #1
  4018ee:	4630      	mov	r0, r6
  4018f0:	4b4a      	ldr	r3, [pc, #296]	; (401a1c <UDP_Handler+0x7b0>)
  4018f2:	4798      	blx	r3
				udd_ack_in_sent(ep);
  4018f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018f6:	9315      	str	r3, [sp, #84]	; 0x54
  4018f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4018fa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018fe:	9315      	str	r3, [sp, #84]	; 0x54
  401900:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401902:	f023 0301 	bic.w	r3, r3, #1
  401906:	9315      	str	r3, [sp, #84]	; 0x54
  401908:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40190a:	6323      	str	r3, [r4, #48]	; 0x30
  40190c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40190e:	f013 0f01 	tst.w	r3, #1
  401912:	d1fb      	bne.n	40190c <UDP_Handler+0x6a0>
  401914:	e4f7      	b.n	401306 <UDP_Handler+0x9a>
  401916:	3301      	adds	r3, #1
  401918:	3214      	adds	r2, #20
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40191a:	2b04      	cmp	r3, #4
  40191c:	f000 8086 	beq.w	401a2c <UDP_Handler+0x7c0>
  401920:	b2de      	uxtb	r6, r3
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401922:	f8de 1018 	ldr.w	r1, [lr, #24]
  401926:	fa00 f503 	lsl.w	r5, r0, r3
  40192a:	4229      	tst	r1, r5
  40192c:	d0f3      	beq.n	401916 <UDP_Handler+0x6aa>
  40192e:	1e5f      	subs	r7, r3, #1
		ptr_job = &udd_ep_job[ep - 1];
  401930:	4690      	mov	r8, r2
  401932:	009c      	lsls	r4, r3, #2
  401934:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  401938:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		if (Is_udd_any_bank_received(ep)) {
  40193c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40193e:	f011 0f42 	tst.w	r1, #66	; 0x42
  401942:	f47f ae6d 	bne.w	401620 <UDP_Handler+0x3b4>
		if (Is_udd_in_sent(ep)) {
  401946:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401948:	f011 0f01 	tst.w	r1, #1
  40194c:	f47f aeb2 	bne.w	4016b4 <UDP_Handler+0x448>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401950:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401952:	f011 0f08 	tst.w	r1, #8
  401956:	d0de      	beq.n	401916 <UDP_Handler+0x6aa>
			udd_ack_stall(ep);
  401958:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40195a:	9316      	str	r3, [sp, #88]	; 0x58
  40195c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40195e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401962:	9316      	str	r3, [sp, #88]	; 0x58
  401964:	9b16      	ldr	r3, [sp, #88]	; 0x58
  401966:	f023 0308 	bic.w	r3, r3, #8
  40196a:	9316      	str	r3, [sp, #88]	; 0x58
  40196c:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40196e:	6323      	str	r3, [r4, #48]	; 0x30
  401970:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401972:	f013 0f08 	tst.w	r3, #8
  401976:	d1fb      	bne.n	401970 <UDP_Handler+0x704>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401978:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40197a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40197e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401982:	f43f acc0 	beq.w	401306 <UDP_Handler+0x9a>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401986:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401988:	e4bd      	b.n	401306 <UDP_Handler+0x9a>
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40198a:	4b22      	ldr	r3, [pc, #136]	; (401a14 <UDP_Handler+0x7a8>)
  40198c:	69db      	ldr	r3, [r3, #28]
  40198e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401992:	d050      	beq.n	401a36 <UDP_Handler+0x7ca>
		udd_ack_wakeups();
  401994:	4c1f      	ldr	r4, [pc, #124]	; (401a14 <UDP_Handler+0x7a8>)
  401996:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  40199a:	6223      	str	r3, [r4, #32]
		udd_disable_wakeups();
  40199c:	6163      	str	r3, [r4, #20]
		udd_sleep_mode(true); // Enter in IDLE mode
  40199e:	2001      	movs	r0, #1
  4019a0:	4b1f      	ldr	r3, [pc, #124]	; (401a20 <UDP_Handler+0x7b4>)
  4019a2:	4798      	blx	r3
		udd_ack_suspend();
  4019a4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4019a8:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  4019aa:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  4019ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019b0:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  4019b2:	e4a8      	b.n	401306 <UDP_Handler+0x9a>
		udd_ack_suspend();
  4019b4:	4b17      	ldr	r3, [pc, #92]	; (401a14 <UDP_Handler+0x7a8>)
  4019b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4019ba:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4019bc:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4019be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4019c2:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4019c8:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4019ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4019ce:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  4019d0:	2022      	movs	r0, #34	; 0x22
  4019d2:	4b14      	ldr	r3, [pc, #80]	; (401a24 <UDP_Handler+0x7b8>)
  4019d4:	4798      	blx	r3
		udd_sleep_mode(false); // Enter in SUSPEND mode
  4019d6:	2000      	movs	r0, #0
  4019d8:	4b11      	ldr	r3, [pc, #68]	; (401a20 <UDP_Handler+0x7b4>)
  4019da:	4798      	blx	r3
		goto udd_interrupt_end;
  4019dc:	e493      	b.n	401306 <UDP_Handler+0x9a>
	udd_ep_ack_out_received(ep);
  4019de:	4630      	mov	r0, r6
  4019e0:	4b11      	ldr	r3, [pc, #68]	; (401a28 <UDP_Handler+0x7bc>)
  4019e2:	4798      	blx	r3
  4019e4:	e652      	b.n	40168c <UDP_Handler+0x420>
		ptr_job->buf_cnt += nb_data;
  4019e6:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
  4019ea:	4b08      	ldr	r3, [pc, #32]	; (401a0c <UDP_Handler+0x7a0>)
  4019ec:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  4019f0:	f8c3 e00c 	str.w	lr, [r3, #12]
		for (i = 0; i < nb_data; i++) {
  4019f4:	2800      	cmp	r0, #0
  4019f6:	d0f2      	beq.n	4019de <UDP_Handler+0x772>
			b_full = true;
  4019f8:	f04f 0b01 	mov.w	fp, #1
  4019fc:	e637      	b.n	40166e <UDP_Handler+0x402>
	udd_ep_ack_out_received(ep);
  4019fe:	4630      	mov	r0, r6
  401a00:	4b09      	ldr	r3, [pc, #36]	; (401a28 <UDP_Handler+0x7bc>)
  401a02:	4798      	blx	r3
	if ((b_full || b_short) &&
  401a04:	45ca      	cmp	sl, r9
  401a06:	f63f ae41 	bhi.w	40168c <UDP_Handler+0x420>
  401a0a:	e47c      	b.n	401306 <UDP_Handler+0x9a>
  401a0c:	200006c4 	.word	0x200006c4
  401a10:	200000a0 	.word	0x200000a0
  401a14:	40034000 	.word	0x40034000
  401a18:	00400fa5 	.word	0x00400fa5
  401a1c:	004010b9 	.word	0x004010b9
  401a20:	00400cb1 	.word	0x00400cb1
  401a24:	00403011 	.word	0x00403011
  401a28:	00400fe5 	.word	0x00400fe5
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a2c:	4b4b      	ldr	r3, [pc, #300]	; (401b5c <UDP_Handler+0x8f0>)
  401a2e:	699b      	ldr	r3, [r3, #24]
  401a30:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401a34:	d1a9      	bne.n	40198a <UDP_Handler+0x71e>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a36:	4b49      	ldr	r3, [pc, #292]	; (401b5c <UDP_Handler+0x8f0>)
  401a38:	699b      	ldr	r3, [r3, #24]
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401a3a:	f413 7f00 	tst.w	r3, #512	; 0x200
  401a3e:	d004      	beq.n	401a4a <UDP_Handler+0x7de>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a40:	4b46      	ldr	r3, [pc, #280]	; (401b5c <UDP_Handler+0x8f0>)
  401a42:	69db      	ldr	r3, [r3, #28]
  401a44:	f413 7f00 	tst.w	r3, #512	; 0x200
  401a48:	d1a4      	bne.n	401994 <UDP_Handler+0x728>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401a4a:	4b44      	ldr	r3, [pc, #272]	; (401b5c <UDP_Handler+0x8f0>)
  401a4c:	699b      	ldr	r3, [r3, #24]
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401a4e:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401a52:	d004      	beq.n	401a5e <UDP_Handler+0x7f2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401a54:	4b41      	ldr	r3, [pc, #260]	; (401b5c <UDP_Handler+0x8f0>)
  401a56:	69db      	ldr	r3, [r3, #28]
  401a58:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401a5c:	d19a      	bne.n	401994 <UDP_Handler+0x728>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401a5e:	4b3f      	ldr	r3, [pc, #252]	; (401b5c <UDP_Handler+0x8f0>)
  401a60:	699b      	ldr	r3, [r3, #24]
  401a62:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a66:	d004      	beq.n	401a72 <UDP_Handler+0x806>
  401a68:	4b3c      	ldr	r3, [pc, #240]	; (401b5c <UDP_Handler+0x8f0>)
  401a6a:	69db      	ldr	r3, [r3, #28]
  401a6c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401a70:	d1a0      	bne.n	4019b4 <UDP_Handler+0x748>
	if (Is_udd_reset()) {
  401a72:	4b3a      	ldr	r3, [pc, #232]	; (401b5c <UDP_Handler+0x8f0>)
  401a74:	69db      	ldr	r3, [r3, #28]
  401a76:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401a7a:	f43f ac44 	beq.w	401306 <UDP_Handler+0x9a>
		udd_ack_reset();
  401a7e:	4c37      	ldr	r4, [pc, #220]	; (401b5c <UDP_Handler+0x8f0>)
  401a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401a84:	6223      	str	r3, [r4, #32]
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401a86:	4e36      	ldr	r6, [pc, #216]	; (401b60 <UDP_Handler+0x8f4>)
  401a88:	2201      	movs	r2, #1
  401a8a:	4611      	mov	r1, r2
  401a8c:	4630      	mov	r0, r6
  401a8e:	4d35      	ldr	r5, [pc, #212]	; (401b64 <UDP_Handler+0x8f8>)
  401a90:	47a8      	blx	r5
  401a92:	2202      	movs	r2, #2
  401a94:	2101      	movs	r1, #1
  401a96:	f106 0014 	add.w	r0, r6, #20
  401a9a:	47a8      	blx	r5
  401a9c:	2203      	movs	r2, #3
  401a9e:	2101      	movs	r1, #1
  401aa0:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401aa4:	47a8      	blx	r5
		udc_reset();
  401aa6:	4b30      	ldr	r3, [pc, #192]	; (401b68 <UDP_Handler+0x8fc>)
  401aa8:	4798      	blx	r3
		udd_disable_address_state();
  401aaa:	6863      	ldr	r3, [r4, #4]
  401aac:	f023 0301 	bic.w	r3, r3, #1
  401ab0:	6063      	str	r3, [r4, #4]
		udd_disable_configured_state();
  401ab2:	6863      	ldr	r3, [r4, #4]
  401ab4:	f023 0302 	bic.w	r3, r3, #2
  401ab8:	6063      	str	r3, [r4, #4]
	udd_enable_address();
  401aba:	68a3      	ldr	r3, [r4, #8]
  401abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401ac0:	60a3      	str	r3, [r4, #8]
	udd_configure_address(0);
  401ac2:	68a3      	ldr	r3, [r4, #8]
  401ac4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ac8:	60a3      	str	r3, [r4, #8]
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  401aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401acc:	9318      	str	r3, [sp, #96]	; 0x60
  401ace:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ad0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ad4:	9318      	str	r3, [sp, #96]	; 0x60
  401ad6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ad8:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  401adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401ae0:	9318      	str	r3, [sp, #96]	; 0x60
  401ae2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401ae8:	9318      	str	r3, [sp, #96]	; 0x60
  401aea:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401aec:	6323      	str	r3, [r4, #48]	; 0x30
  401aee:	4622      	mov	r2, r4
  401af0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401af2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401af6:	d0fb      	beq.n	401af0 <UDP_Handler+0x884>
	udd_enable_endpoint(0);
  401af8:	4a18      	ldr	r2, [pc, #96]	; (401b5c <UDP_Handler+0x8f0>)
  401afa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401afc:	9319      	str	r3, [sp, #100]	; 0x64
  401afe:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b00:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401b04:	9319      	str	r3, [sp, #100]	; 0x64
  401b06:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  401b0c:	9319      	str	r3, [sp, #100]	; 0x64
  401b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401b10:	6313      	str	r3, [r2, #48]	; 0x30
  401b12:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401b14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401b18:	d0fb      	beq.n	401b12 <UDP_Handler+0x8a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401b1a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b1e:	fab3 f383 	clz	r3, r3
  401b22:	095b      	lsrs	r3, r3, #5
  401b24:	9317      	str	r3, [sp, #92]	; 0x5c
  __ASM volatile ("cpsid i" : : : "memory");
  401b26:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401b28:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b2c:	2200      	movs	r2, #0
  401b2e:	4b0f      	ldr	r3, [pc, #60]	; (401b6c <UDP_Handler+0x900>)
  401b30:	701a      	strb	r2, [r3, #0]
	return flags;
  401b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	udd_enable_endpoint_interrupt(0);
  401b34:	2101      	movs	r1, #1
  401b36:	4a09      	ldr	r2, [pc, #36]	; (401b5c <UDP_Handler+0x8f0>)
  401b38:	6111      	str	r1, [r2, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401b3a:	b123      	cbz	r3, 401b46 <UDP_Handler+0x8da>
		cpu_irq_enable();
  401b3c:	4b0b      	ldr	r3, [pc, #44]	; (401b6c <UDP_Handler+0x900>)
  401b3e:	7019      	strb	r1, [r3, #0]
  401b40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b44:	b662      	cpsie	i
		udd_ctrl_init();
  401b46:	4b0a      	ldr	r3, [pc, #40]	; (401b70 <UDP_Handler+0x904>)
  401b48:	4798      	blx	r3
		udd_enable_suspend_interrupt();
  401b4a:	4b04      	ldr	r3, [pc, #16]	; (401b5c <UDP_Handler+0x8f0>)
  401b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401b50:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  401b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401b56:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  401b58:	f7ff bbd5 	b.w	401306 <UDP_Handler+0x9a>
  401b5c:	40034000 	.word	0x40034000
  401b60:	200006c4 	.word	0x200006c4
  401b64:	00400fa5 	.word	0x00400fa5
  401b68:	00400789 	.word	0x00400789
  401b6c:	200000a0 	.word	0x200000a0
  401b70:	00400d55 	.word	0x00400d55

00401b74 <udd_attach>:
{
  401b74:	b510      	push	{r4, lr}
  401b76:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401b78:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b7c:	fab3 f383 	clz	r3, r3
  401b80:	095b      	lsrs	r3, r3, #5
  401b82:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401b84:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401b86:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b8a:	2200      	movs	r2, #0
  401b8c:	4b14      	ldr	r3, [pc, #80]	; (401be0 <udd_attach+0x6c>)
  401b8e:	701a      	strb	r2, [r3, #0]
	return flags;
  401b90:	9c01      	ldr	r4, [sp, #4]
	udd_sleep_mode(true);
  401b92:	2001      	movs	r0, #1
  401b94:	4b13      	ldr	r3, [pc, #76]	; (401be4 <udd_attach+0x70>)
  401b96:	4798      	blx	r3
	udd_enable_periph_ck();
  401b98:	2022      	movs	r0, #34	; 0x22
  401b9a:	4b13      	ldr	r3, [pc, #76]	; (401be8 <udd_attach+0x74>)
  401b9c:	4798      	blx	r3
	udd_enable_transceiver();
  401b9e:	4b13      	ldr	r3, [pc, #76]	; (401bec <udd_attach+0x78>)
  401ba0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401ba6:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  401ba8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  401bae:	675a      	str	r2, [r3, #116]	; 0x74
	udd_enable_suspend_interrupt();
  401bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
  401bb4:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  401bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401bba:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  401bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
  401bc0:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  401bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401bc6:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  401bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401bcc:	611a      	str	r2, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401bce:	b12c      	cbz	r4, 401bdc <udd_attach+0x68>
		cpu_irq_enable();
  401bd0:	2201      	movs	r2, #1
  401bd2:	4b03      	ldr	r3, [pc, #12]	; (401be0 <udd_attach+0x6c>)
  401bd4:	701a      	strb	r2, [r3, #0]
  401bd6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401bda:	b662      	cpsie	i
}
  401bdc:	b002      	add	sp, #8
  401bde:	bd10      	pop	{r4, pc}
  401be0:	200000a0 	.word	0x200000a0
  401be4:	00400cb1 	.word	0x00400cb1
  401be8:	00402fbd 	.word	0x00402fbd
  401bec:	40034000 	.word	0x40034000

00401bf0 <udd_enable>:
{
  401bf0:	b530      	push	{r4, r5, lr}
  401bf2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401bf4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401bf8:	fab3 f383 	clz	r3, r3
  401bfc:	095b      	lsrs	r3, r3, #5
  401bfe:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401c00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401c02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c06:	2400      	movs	r4, #0
  401c08:	4b27      	ldr	r3, [pc, #156]	; (401ca8 <udd_enable+0xb8>)
  401c0a:	701c      	strb	r4, [r3, #0]
	return flags;
  401c0c:	9d00      	ldr	r5, [sp, #0]
	udd_enable_periph_ck();
  401c0e:	2022      	movs	r0, #34	; 0x22
  401c10:	4b26      	ldr	r3, [pc, #152]	; (401cac <udd_enable+0xbc>)
  401c12:	4798      	blx	r3
	sysclk_enable_usb();
  401c14:	4b26      	ldr	r3, [pc, #152]	; (401cb0 <udd_enable+0xc0>)
  401c16:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  401c18:	4b26      	ldr	r3, [pc, #152]	; (401cb4 <udd_enable+0xc4>)
  401c1a:	2250      	movs	r2, #80	; 0x50
  401c1c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401c20:	2204      	movs	r2, #4
  401c22:	605a      	str	r2, [r3, #4]
  401c24:	4623      	mov	r3, r4
		udd_ep_job[i].bank = 0;
  401c26:	4824      	ldr	r0, [pc, #144]	; (401cb8 <udd_enable+0xc8>)
  401c28:	009a      	lsls	r2, r3, #2
  401c2a:	18d1      	adds	r1, r2, r3
  401c2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  401c30:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].b_buf_end = false;
  401c32:	441a      	add	r2, r3
  401c34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401c38:	f001 0183 	and.w	r1, r1, #131	; 0x83
  401c3c:	f36f 11c7 	bfc	r1, #7, #1
  401c40:	7451      	strb	r1, [r2, #17]
  401c42:	3301      	adds	r3, #1
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401c44:	2b03      	cmp	r3, #3
  401c46:	d1ef      	bne.n	401c28 <udd_enable+0x38>
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  401c48:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401c4c:	4b1b      	ldr	r3, [pc, #108]	; (401cbc <udd_enable+0xcc>)
  401c4e:	4798      	blx	r3
	udd_b_idle = false;
  401c50:	2200      	movs	r2, #0
  401c52:	4b1b      	ldr	r3, [pc, #108]	; (401cc0 <udd_enable+0xd0>)
  401c54:	701a      	strb	r2, [r3, #0]
	if(sleepmgr_locks[mode] >= 0xff) {
  401c56:	4b1b      	ldr	r3, [pc, #108]	; (401cc4 <udd_enable+0xd4>)
  401c58:	781b      	ldrb	r3, [r3, #0]
  401c5a:	2bff      	cmp	r3, #255	; 0xff
  401c5c:	d022      	beq.n	401ca4 <udd_enable+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401c5e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401c62:	fab3 f383 	clz	r3, r3
  401c66:	095b      	lsrs	r3, r3, #5
  401c68:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401c6a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401c6c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401c70:	2200      	movs	r2, #0
  401c72:	4b0d      	ldr	r3, [pc, #52]	; (401ca8 <udd_enable+0xb8>)
  401c74:	701a      	strb	r2, [r3, #0]
	return flags;
  401c76:	9901      	ldr	r1, [sp, #4]
	++sleepmgr_locks[mode];
  401c78:	4a12      	ldr	r2, [pc, #72]	; (401cc4 <udd_enable+0xd4>)
  401c7a:	7813      	ldrb	r3, [r2, #0]
  401c7c:	3301      	adds	r3, #1
  401c7e:	7013      	strb	r3, [r2, #0]
	if (cpu_irq_is_enabled_flags(flags))
  401c80:	b129      	cbz	r1, 401c8e <udd_enable+0x9e>
		cpu_irq_enable();
  401c82:	2201      	movs	r2, #1
  401c84:	4b08      	ldr	r3, [pc, #32]	; (401ca8 <udd_enable+0xb8>)
  401c86:	701a      	strb	r2, [r3, #0]
  401c88:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401c8c:	b662      	cpsie	i
	udd_attach();
  401c8e:	4b0e      	ldr	r3, [pc, #56]	; (401cc8 <udd_enable+0xd8>)
  401c90:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
  401c92:	b12d      	cbz	r5, 401ca0 <udd_enable+0xb0>
		cpu_irq_enable();
  401c94:	2201      	movs	r2, #1
  401c96:	4b04      	ldr	r3, [pc, #16]	; (401ca8 <udd_enable+0xb8>)
  401c98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401c9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401c9e:	b662      	cpsie	i
}
  401ca0:	b003      	add	sp, #12
  401ca2:	bd30      	pop	{r4, r5, pc}
  401ca4:	e7fe      	b.n	401ca4 <udd_enable+0xb4>
  401ca6:	bf00      	nop
  401ca8:	200000a0 	.word	0x200000a0
  401cac:	00402fbd 	.word	0x00402fbd
  401cb0:	00402d15 	.word	0x00402d15
  401cb4:	e000e100 	.word	0xe000e100
  401cb8:	200006c4 	.word	0x200006c4
  401cbc:	00403085 	.word	0x00403085
  401cc0:	200006bd 	.word	0x200006bd
  401cc4:	20002710 	.word	0x20002710
  401cc8:	00401b75 	.word	0x00401b75

00401ccc <udd_is_high_speed>:
}
  401ccc:	2000      	movs	r0, #0
  401cce:	4770      	bx	lr

00401cd0 <udd_set_address>:
	udd_disable_address_state();
  401cd0:	4b0d      	ldr	r3, [pc, #52]	; (401d08 <udd_set_address+0x38>)
  401cd2:	685a      	ldr	r2, [r3, #4]
  401cd4:	f022 0201 	bic.w	r2, r2, #1
  401cd8:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  401cda:	689a      	ldr	r2, [r3, #8]
  401cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  401ce0:	609a      	str	r2, [r3, #8]
	if (address) {
  401ce2:	4602      	mov	r2, r0
  401ce4:	b170      	cbz	r0, 401d04 <udd_set_address+0x34>
		udd_configure_address(address);
  401ce6:	6898      	ldr	r0, [r3, #8]
  401ce8:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  401cec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401cf0:	4310      	orrs	r0, r2
  401cf2:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  401cf4:	689a      	ldr	r2, [r3, #8]
  401cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  401cfa:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  401cfc:	685a      	ldr	r2, [r3, #4]
  401cfe:	f042 0201 	orr.w	r2, r2, #1
  401d02:	605a      	str	r2, [r3, #4]
  401d04:	4770      	bx	lr
  401d06:	bf00      	nop
  401d08:	40034000 	.word	0x40034000

00401d0c <udd_getaddress>:
	if (Is_udd_address_state_enabled())
  401d0c:	4b05      	ldr	r3, [pc, #20]	; (401d24 <udd_getaddress+0x18>)
  401d0e:	685b      	ldr	r3, [r3, #4]
  401d10:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  401d14:	bf1d      	ittte	ne
  401d16:	4b03      	ldrne	r3, [pc, #12]	; (401d24 <udd_getaddress+0x18>)
  401d18:	6898      	ldrne	r0, [r3, #8]
  401d1a:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  401d1e:	2000      	moveq	r0, #0
}
  401d20:	4770      	bx	lr
  401d22:	bf00      	nop
  401d24:	40034000 	.word	0x40034000

00401d28 <udd_get_frame_number>:
	return udd_frame_number();
  401d28:	4b02      	ldr	r3, [pc, #8]	; (401d34 <udd_get_frame_number+0xc>)
  401d2a:	6818      	ldr	r0, [r3, #0]
}
  401d2c:	f3c0 000a 	ubfx	r0, r0, #0, #11
  401d30:	4770      	bx	lr
  401d32:	bf00      	nop
  401d34:	40034000 	.word	0x40034000

00401d38 <udd_get_micro_frame_number>:
}
  401d38:	2000      	movs	r0, #0
  401d3a:	4770      	bx	lr

00401d3c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
  401d3c:	4b01      	ldr	r3, [pc, #4]	; (401d44 <udd_set_setup_payload+0x8>)
  401d3e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  401d40:	8199      	strh	r1, [r3, #12]
  401d42:	4770      	bx	lr
  401d44:	20002718 	.word	0x20002718

00401d48 <udd_ep_alloc>:
{
  401d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  401d4a:	b083      	sub	sp, #12
	ep = ep & USB_EP_ADDR_MASK;
  401d4c:	f000 040f 	and.w	r4, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
  401d50:	2c03      	cmp	r4, #3
  401d52:	d867      	bhi.n	401e24 <udd_ep_alloc+0xdc>
  401d54:	00a3      	lsls	r3, r4, #2
  401d56:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401d5a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_enabled(ep)) {
  401d5e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  401d60:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  401d64:	d161      	bne.n	401e2a <udd_ep_alloc+0xe2>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401d66:	f001 0503 	and.w	r5, r1, #3
  401d6a:	2d01      	cmp	r5, #1
  401d6c:	d050      	beq.n	401e10 <udd_ep_alloc+0xc8>
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  401d6e:	1f25      	subs	r5, r4, #4
  401d70:	b2ed      	uxtb	r5, r5
  401d72:	2d02      	cmp	r5, #2
  401d74:	bf34      	ite	cc
  401d76:	f44f 7500 	movcc.w	r5, #512	; 0x200
  401d7a:	2540      	movcs	r5, #64	; 0x40
  401d7c:	4295      	cmp	r5, r2
  401d7e:	db58      	blt.n	401e32 <udd_ep_alloc+0xea>
  401d80:	b240      	sxtb	r0, r0
	ptr_job = &udd_ep_job[ep - 1];
  401d82:	1e66      	subs	r6, r4, #1
	ptr_job->size = MaxEndpointSize;
  401d84:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  401d88:	4d2b      	ldr	r5, [pc, #172]	; (401e38 <udd_ep_alloc+0xf0>)
  401d8a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  401d8e:	f105 0710 	add.w	r7, r5, #16
  401d92:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  401d96:	f362 0e09 	bfi	lr, r2, #0, #10
  401d9a:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  401d9e:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  401da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  401da4:	f36f 1245 	bfc	r2, #5, #1
  401da8:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  401daa:	2800      	cmp	r0, #0
  401dac:	db35      	blt.n	401e1a <udd_ep_alloc+0xd2>
	udd_reset_endpoint(ep);
  401dae:	4e23      	ldr	r6, [pc, #140]	; (401e3c <udd_ep_alloc+0xf4>)
  401db0:	6ab5      	ldr	r5, [r6, #40]	; 0x28
  401db2:	2201      	movs	r2, #1
  401db4:	fa02 f404 	lsl.w	r4, r2, r4
  401db8:	4325      	orrs	r5, r4
  401dba:	62b5      	str	r5, [r6, #40]	; 0x28
  401dbc:	4635      	mov	r5, r6
  401dbe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401dc0:	4214      	tst	r4, r2
  401dc2:	d0fc      	beq.n	401dbe <udd_ep_alloc+0x76>
  401dc4:	4d1d      	ldr	r5, [pc, #116]	; (401e3c <udd_ep_alloc+0xf4>)
  401dc6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  401dc8:	ea22 0404 	bic.w	r4, r2, r4
  401dcc:	62ac      	str	r4, [r5, #40]	; 0x28
	udd_configure_endpoint(ep,
  401dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401dd0:	9201      	str	r2, [sp, #4]
  401dd2:	9a01      	ldr	r2, [sp, #4]
  401dd4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401dd8:	9201      	str	r2, [sp, #4]
  401dda:	9a01      	ldr	r2, [sp, #4]
  401ddc:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  401de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401de4:	9201      	str	r2, [sp, #4]
  401de6:	2800      	cmp	r0, #0
  401de8:	ea4f 2201 	mov.w	r2, r1, lsl #8
  401dec:	f402 7240 	and.w	r2, r2, #768	; 0x300
  401df0:	bfb4      	ite	lt
  401df2:	f442 4204 	orrlt.w	r2, r2, #33792	; 0x8400
  401df6:	f442 4200 	orrge.w	r2, r2, #32768	; 0x8000
  401dfa:	9901      	ldr	r1, [sp, #4]
  401dfc:	4311      	orrs	r1, r2
  401dfe:	9101      	str	r1, [sp, #4]
  401e00:	9901      	ldr	r1, [sp, #4]
  401e02:	6319      	str	r1, [r3, #48]	; 0x30
  401e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401e06:	ea32 0101 	bics.w	r1, r2, r1
  401e0a:	d1fb      	bne.n	401e04 <udd_ep_alloc+0xbc>
	return true;
  401e0c:	2001      	movs	r0, #1
  401e0e:	e00a      	b.n	401e26 <udd_ep_alloc+0xde>
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  401e10:	b16c      	cbz	r4, 401e2e <udd_ep_alloc+0xe6>
  401e12:	2c03      	cmp	r4, #3
  401e14:	d1ab      	bne.n	401d6e <udd_ep_alloc+0x26>
		return false;
  401e16:	2000      	movs	r0, #0
  401e18:	e005      	b.n	401e26 <udd_ep_alloc+0xde>
		ptr_job->bank = 0;
  401e1a:	787a      	ldrb	r2, [r7, #1]
  401e1c:	f36f 0283 	bfc	r2, #2, #2
  401e20:	707a      	strb	r2, [r7, #1]
  401e22:	e7c4      	b.n	401dae <udd_ep_alloc+0x66>
		return false;
  401e24:	2000      	movs	r0, #0
}
  401e26:	b003      	add	sp, #12
  401e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
  401e2a:	2000      	movs	r0, #0
  401e2c:	e7fb      	b.n	401e26 <udd_ep_alloc+0xde>
		return false;
  401e2e:	2000      	movs	r0, #0
  401e30:	e7f9      	b.n	401e26 <udd_ep_alloc+0xde>
		return false;
  401e32:	2000      	movs	r0, #0
  401e34:	e7f7      	b.n	401e26 <udd_ep_alloc+0xde>
  401e36:	bf00      	nop
  401e38:	200006c4 	.word	0x200006c4
  401e3c:	40034000 	.word	0x40034000

00401e40 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401e40:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401e44:	2a03      	cmp	r2, #3
  401e46:	d822      	bhi.n	401e8e <udd_ep_free+0x4e>
{
  401e48:	b500      	push	{lr}
  401e4a:	b083      	sub	sp, #12
  401e4c:	0091      	lsls	r1, r2, #2
  401e4e:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  401e52:	f501 3140 	add.w	r1, r1, #196608	; 0x30000
	udd_disable_endpoint(ep_index);
  401e56:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e58:	9301      	str	r3, [sp, #4]
  401e5a:	9b01      	ldr	r3, [sp, #4]
  401e5c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e60:	9301      	str	r3, [sp, #4]
  401e62:	9b01      	ldr	r3, [sp, #4]
  401e64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  401e68:	9301      	str	r3, [sp, #4]
  401e6a:	9b01      	ldr	r3, [sp, #4]
  401e6c:	630b      	str	r3, [r1, #48]	; 0x30
  401e6e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401e74:	d1fb      	bne.n	401e6e <udd_ep_free+0x2e>
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  401e76:	1e50      	subs	r0, r2, #1
  401e78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e7c:	2101      	movs	r1, #1
  401e7e:	4b04      	ldr	r3, [pc, #16]	; (401e90 <udd_ep_free+0x50>)
  401e80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e84:	4b03      	ldr	r3, [pc, #12]	; (401e94 <udd_ep_free+0x54>)
  401e86:	4798      	blx	r3
}
  401e88:	b003      	add	sp, #12
  401e8a:	f85d fb04 	ldr.w	pc, [sp], #4
  401e8e:	4770      	bx	lr
  401e90:	200006c4 	.word	0x200006c4
  401e94:	00400fa5 	.word	0x00400fa5

00401e98 <udd_ep_is_halted>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401e98:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401e9c:	2803      	cmp	r0, #3
  401e9e:	d815      	bhi.n	401ecc <udd_ep_is_halted+0x34>
	return ptr_job->b_stall_requested ||
  401ea0:	1e43      	subs	r3, r0, #1
  401ea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401ea6:	4a0a      	ldr	r2, [pc, #40]	; (401ed0 <udd_ep_is_halted+0x38>)
  401ea8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401eac:	7c5b      	ldrb	r3, [r3, #17]
  401eae:	f013 0f20 	tst.w	r3, #32
  401eb2:	d109      	bne.n	401ec8 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  401eb4:	300c      	adds	r0, #12
  401eb6:	4b07      	ldr	r3, [pc, #28]	; (401ed4 <udd_ep_is_halted+0x3c>)
  401eb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return ptr_job->b_stall_requested ||
  401ebc:	f013 0f28 	tst.w	r3, #40	; 0x28
  401ec0:	bf14      	ite	ne
  401ec2:	2001      	movne	r0, #1
  401ec4:	2000      	moveq	r0, #0
  401ec6:	4770      	bx	lr
  401ec8:	2001      	movs	r0, #1
  401eca:	4770      	bx	lr
		return false;
  401ecc:	2000      	movs	r0, #0
}
  401ece:	4770      	bx	lr
  401ed0:	200006c4 	.word	0x200006c4
  401ed4:	40034000 	.word	0x40034000

00401ed8 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  401ed8:	f000 010f 	and.w	r1, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  401edc:	2903      	cmp	r1, #3
  401ede:	d85f      	bhi.n	401fa0 <udd_ep_set_halt+0xc8>
{
  401ee0:	b410      	push	{r4}
  401ee2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401ee4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ee8:	fab3 f383 	clz	r3, r3
  401eec:	095b      	lsrs	r3, r3, #5
  401eee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401ef0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401ef2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ef6:	2200      	movs	r2, #0
  401ef8:	4b2c      	ldr	r3, [pc, #176]	; (401fac <udd_ep_set_halt+0xd4>)
  401efa:	701a      	strb	r2, [r3, #0]
	return flags;
  401efc:	9c01      	ldr	r4, [sp, #4]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401efe:	f010 0f80 	tst.w	r0, #128	; 0x80
  401f02:	d124      	bne.n	401f4e <udd_ep_set_halt+0x76>
  401f04:	008a      	lsls	r2, r1, #2
  401f06:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401f0a:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_enable_stall_handshake(ep_index);
  401f0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f10:	9300      	str	r3, [sp, #0]
  401f12:	9b00      	ldr	r3, [sp, #0]
  401f14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f18:	9300      	str	r3, [sp, #0]
  401f1a:	9b00      	ldr	r3, [sp, #0]
  401f1c:	f043 0320 	orr.w	r3, r3, #32
  401f20:	9300      	str	r3, [sp, #0]
  401f22:	9b00      	ldr	r3, [sp, #0]
  401f24:	6313      	str	r3, [r2, #48]	; 0x30
  401f26:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f28:	f013 0f20 	tst.w	r3, #32
  401f2c:	d0fb      	beq.n	401f26 <udd_ep_set_halt+0x4e>
		udd_enable_endpoint_interrupt(ep_index);
  401f2e:	2301      	movs	r3, #1
  401f30:	fa03 f101 	lsl.w	r1, r3, r1
  401f34:	4b1e      	ldr	r3, [pc, #120]	; (401fb0 <udd_ep_set_halt+0xd8>)
  401f36:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401f38:	2c00      	cmp	r4, #0
  401f3a:	d035      	beq.n	401fa8 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  401f3c:	2001      	movs	r0, #1
  401f3e:	4b1b      	ldr	r3, [pc, #108]	; (401fac <udd_ep_set_halt+0xd4>)
  401f40:	7018      	strb	r0, [r3, #0]
  401f42:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f46:	b662      	cpsie	i
}
  401f48:	b003      	add	sp, #12
  401f4a:	bc10      	pop	{r4}
  401f4c:	4770      	bx	lr
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  401f4e:	1e4b      	subs	r3, r1, #1
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  401f50:	f101 020c 	add.w	r2, r1, #12
  401f54:	4816      	ldr	r0, [pc, #88]	; (401fb0 <udd_ep_set_halt+0xd8>)
  401f56:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  401f5a:	f012 0f10 	tst.w	r2, #16
  401f5e:	d109      	bne.n	401f74 <udd_ep_set_halt+0x9c>
				|| ptr_job->bank > 1)) {
  401f60:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401f64:	4813      	ldr	r0, [pc, #76]	; (401fb4 <udd_ep_set_halt+0xdc>)
  401f66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  401f6a:	7c52      	ldrb	r2, [r2, #17]
  401f6c:	f3c2 0281 	ubfx	r2, r2, #2, #2
  401f70:	2a01      	cmp	r2, #1
  401f72:	ddc7      	ble.n	401f04 <udd_ep_set_halt+0x2c>
		ptr_job->b_stall_requested = true;
  401f74:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  401f78:	4b0e      	ldr	r3, [pc, #56]	; (401fb4 <udd_ep_set_halt+0xdc>)
  401f7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401f7e:	7c5a      	ldrb	r2, [r3, #17]
  401f80:	f042 0220 	orr.w	r2, r2, #32
  401f84:	745a      	strb	r2, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  401f86:	2301      	movs	r3, #1
  401f88:	fa03 f101 	lsl.w	r1, r3, r1
  401f8c:	4b08      	ldr	r3, [pc, #32]	; (401fb0 <udd_ep_set_halt+0xd8>)
  401f8e:	6119      	str	r1, [r3, #16]
	if (cpu_irq_is_enabled_flags(flags))
  401f90:	b144      	cbz	r4, 401fa4 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  401f92:	2001      	movs	r0, #1
  401f94:	4b05      	ldr	r3, [pc, #20]	; (401fac <udd_ep_set_halt+0xd4>)
  401f96:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401f98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401f9c:	b662      	cpsie	i
  401f9e:	e7d3      	b.n	401f48 <udd_ep_set_halt+0x70>
		return false;
  401fa0:	2000      	movs	r0, #0
  401fa2:	4770      	bx	lr
		return true;
  401fa4:	2001      	movs	r0, #1
  401fa6:	e7cf      	b.n	401f48 <udd_ep_set_halt+0x70>
	return true;
  401fa8:	2001      	movs	r0, #1
  401faa:	e7cd      	b.n	401f48 <udd_ep_set_halt+0x70>
  401fac:	200000a0 	.word	0x200000a0
  401fb0:	40034000 	.word	0x40034000
  401fb4:	200006c4 	.word	0x200006c4

00401fb8 <udd_ep_clear_halt>:
	ep &= USB_EP_ADDR_MASK;
  401fb8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  401fbc:	2803      	cmp	r0, #3
  401fbe:	d85e      	bhi.n	40207e <udd_ep_clear_halt+0xc6>
{
  401fc0:	b530      	push	{r4, r5, lr}
  401fc2:	b083      	sub	sp, #12
	ptr_job = &udd_ep_job[ep - 1];
  401fc4:	1e44      	subs	r4, r0, #1
	ptr_job->b_stall_requested = false;
  401fc6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  401fca:	4b2f      	ldr	r3, [pc, #188]	; (402088 <udd_ep_clear_halt+0xd0>)
  401fcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  401fd0:	7c5a      	ldrb	r2, [r3, #17]
  401fd2:	f36f 1245 	bfc	r2, #5, #1
  401fd6:	745a      	strb	r2, [r3, #17]
  401fd8:	0083      	lsls	r3, r0, #2
  401fda:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401fde:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  401fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fe4:	f012 0f20 	tst.w	r2, #32
  401fe8:	d04b      	beq.n	402082 <udd_ep_clear_halt+0xca>
		udd_disable_stall_handshake(ep);
  401fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fec:	9200      	str	r2, [sp, #0]
  401fee:	9a00      	ldr	r2, [sp, #0]
  401ff0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ff4:	9200      	str	r2, [sp, #0]
  401ff6:	9a00      	ldr	r2, [sp, #0]
  401ff8:	f022 0220 	bic.w	r2, r2, #32
  401ffc:	9200      	str	r2, [sp, #0]
  401ffe:	9a00      	ldr	r2, [sp, #0]
  402000:	631a      	str	r2, [r3, #48]	; 0x30
  402002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402004:	f012 0f20 	tst.w	r2, #32
  402008:	d1fb      	bne.n	402002 <udd_ep_clear_halt+0x4a>
		udd_reset_endpoint(ep);
  40200a:	4d20      	ldr	r5, [pc, #128]	; (40208c <udd_ep_clear_halt+0xd4>)
  40200c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  40200e:	2201      	movs	r2, #1
  402010:	fa02 f000 	lsl.w	r0, r2, r0
  402014:	4301      	orrs	r1, r0
  402016:	62a9      	str	r1, [r5, #40]	; 0x28
  402018:	4629      	mov	r1, r5
  40201a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  40201c:	4210      	tst	r0, r2
  40201e:	d0fc      	beq.n	40201a <udd_ep_clear_halt+0x62>
  402020:	491a      	ldr	r1, [pc, #104]	; (40208c <udd_ep_clear_halt+0xd4>)
  402022:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  402024:	ea22 0000 	bic.w	r0, r2, r0
  402028:	6288      	str	r0, [r1, #40]	; 0x28
		udd_ack_stall(ep);
  40202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40202c:	9201      	str	r2, [sp, #4]
  40202e:	9a01      	ldr	r2, [sp, #4]
  402030:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402034:	9201      	str	r2, [sp, #4]
  402036:	9a01      	ldr	r2, [sp, #4]
  402038:	f022 0208 	bic.w	r2, r2, #8
  40203c:	9201      	str	r2, [sp, #4]
  40203e:	9a01      	ldr	r2, [sp, #4]
  402040:	631a      	str	r2, [r3, #48]	; 0x30
  402042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402044:	f012 0f08 	tst.w	r2, #8
  402048:	d1fb      	bne.n	402042 <udd_ep_clear_halt+0x8a>
		if (ptr_job->busy == true) {
  40204a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  40204e:	4a0e      	ldr	r2, [pc, #56]	; (402088 <udd_ep_clear_halt+0xd0>)
  402050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402054:	7c5b      	ldrb	r3, [r3, #17]
  402056:	f013 0f10 	tst.w	r3, #16
  40205a:	d101      	bne.n	402060 <udd_ep_clear_halt+0xa8>
	return true;
  40205c:	2001      	movs	r0, #1
  40205e:	e011      	b.n	402084 <udd_ep_clear_halt+0xcc>
			ptr_job->busy = false;
  402060:	4611      	mov	r1, r2
  402062:	00a2      	lsls	r2, r4, #2
  402064:	1913      	adds	r3, r2, r4
  402066:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  40206a:	7c58      	ldrb	r0, [r3, #17]
  40206c:	f36f 1004 	bfc	r0, #4, #1
  402070:	7458      	strb	r0, [r3, #17]
			ptr_job->call_nohalt();
  402072:	4414      	add	r4, r2
  402074:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
  402078:	4798      	blx	r3
	return true;
  40207a:	2001      	movs	r0, #1
  40207c:	e002      	b.n	402084 <udd_ep_clear_halt+0xcc>
		return false;
  40207e:	2000      	movs	r0, #0
  402080:	4770      	bx	lr
	return true;
  402082:	2001      	movs	r0, #1
}
  402084:	b003      	add	sp, #12
  402086:	bd30      	pop	{r4, r5, pc}
  402088:	200006c4 	.word	0x200006c4
  40208c:	40034000 	.word	0x40034000

00402090 <udd_ep_run>:
{
  402090:	b5f0      	push	{r4, r5, r6, r7, lr}
  402092:	b083      	sub	sp, #12
	ep &= USB_EP_ADDR_MASK;
  402094:	f000 070f 	and.w	r7, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402098:	2f03      	cmp	r7, #3
  40209a:	f200 80a2 	bhi.w	4021e2 <udd_ep_run+0x152>
  40209e:	00bc      	lsls	r4, r7, #2
  4020a0:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4020a4:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
	if ((!Is_udd_endpoint_enabled(ep))
  4020a8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4020aa:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4020ae:	f000 809b 	beq.w	4021e8 <udd_ep_run+0x158>
	ptr_job = &udd_ep_job[ep - 1];
  4020b2:	1e7d      	subs	r5, r7, #1
			|| ptr_job->b_stall_requested
  4020b4:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4020b8:	4e50      	ldr	r6, [pc, #320]	; (4021fc <udd_ep_run+0x16c>)
  4020ba:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4020be:	7c76      	ldrb	r6, [r6, #17]
  4020c0:	f016 0f20 	tst.w	r6, #32
  4020c4:	f040 8092 	bne.w	4021ec <udd_ep_run+0x15c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4020c8:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4020ca:	f016 0f20 	tst.w	r6, #32
  4020ce:	f040 808f 	bne.w	4021f0 <udd_ep_run+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4020d2:	f3ef 8610 	mrs	r6, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4020d6:	fab6 f686 	clz	r6, r6
  4020da:	0976      	lsrs	r6, r6, #5
  4020dc:	9600      	str	r6, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4020de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4020e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4020e4:	f04f 0e00 	mov.w	lr, #0
  4020e8:	4e45      	ldr	r6, [pc, #276]	; (402200 <udd_ep_run+0x170>)
  4020ea:	f886 e000 	strb.w	lr, [r6]
	return flags;
  4020ee:	f8dd c000 	ldr.w	ip, [sp]
	if (ptr_job->busy == true) {
  4020f2:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  4020f6:	4e41      	ldr	r6, [pc, #260]	; (4021fc <udd_ep_run+0x16c>)
  4020f8:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  4020fc:	7c76      	ldrb	r6, [r6, #17]
  4020fe:	f016 0f10 	tst.w	r6, #16
  402102:	d00a      	beq.n	40211a <udd_ep_run+0x8a>
	if (cpu_irq_is_enabled_flags(flags))
  402104:	f1bc 0f00 	cmp.w	ip, #0
  402108:	d074      	beq.n	4021f4 <udd_ep_run+0x164>
		cpu_irq_enable();
  40210a:	2201      	movs	r2, #1
  40210c:	4b3c      	ldr	r3, [pc, #240]	; (402200 <udd_ep_run+0x170>)
  40210e:	701a      	strb	r2, [r3, #0]
  402110:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402114:	b662      	cpsie	i
		return false; // Job already on going
  402116:	2000      	movs	r0, #0
  402118:	e064      	b.n	4021e4 <udd_ep_run+0x154>
	ptr_job->busy = true;
  40211a:	eb05 0e85 	add.w	lr, r5, r5, lsl #2
  40211e:	4e37      	ldr	r6, [pc, #220]	; (4021fc <udd_ep_run+0x16c>)
  402120:	eb06 068e 	add.w	r6, r6, lr, lsl #2
  402124:	f896 e011 	ldrb.w	lr, [r6, #17]
  402128:	f04e 0e10 	orr.w	lr, lr, #16
  40212c:	f886 e011 	strb.w	lr, [r6, #17]
	if (cpu_irq_is_enabled_flags(flags))
  402130:	f1bc 0f00 	cmp.w	ip, #0
  402134:	d007      	beq.n	402146 <udd_ep_run+0xb6>
		cpu_irq_enable();
  402136:	f04f 0e01 	mov.w	lr, #1
  40213a:	4e31      	ldr	r6, [pc, #196]	; (402200 <udd_ep_run+0x170>)
  40213c:	f886 e000 	strb.w	lr, [r6]
  __ASM volatile ("dmb 0xF":::"memory");
  402140:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402144:	b662      	cpsie	i
	ptr_job->buf = buf;
  402146:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 4021fc <udd_ep_run+0x16c>
  40214a:	eb05 0685 	add.w	r6, r5, r5, lsl #2
  40214e:	00b6      	lsls	r6, r6, #2
  402150:	eb0c 0e06 	add.w	lr, ip, r6
  402154:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  402158:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  40215c:	2200      	movs	r2, #0
  40215e:	f8ce 200c 	str.w	r2, [lr, #12]
	ptr_job->call_trans = callback;
  402162:	9a08      	ldr	r2, [sp, #32]
  402164:	f84c 2006 	str.w	r2, [ip, r6]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402168:	b911      	cbnz	r1, 402170 <udd_ep_run+0xe0>
  40216a:	fab3 f183 	clz	r1, r3
  40216e:	0949      	lsrs	r1, r1, #5
  402170:	4a22      	ldr	r2, [pc, #136]	; (4021fc <udd_ep_run+0x16c>)
  402172:	00ae      	lsls	r6, r5, #2
  402174:	1973      	adds	r3, r6, r5
  402176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40217a:	7c5b      	ldrb	r3, [r3, #17]
  40217c:	f361 1386 	bfi	r3, r1, #6, #1
	ptr_job->b_buf_end = false;
  402180:	4435      	add	r5, r6
  402182:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  402186:	f36f 13c7 	bfc	r3, #7, #1
  40218a:	7453      	strb	r3, [r2, #17]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40218c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402190:	fab3 f383 	clz	r3, r3
  402194:	095b      	lsrs	r3, r3, #5
  402196:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  402198:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40219a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40219e:	2200      	movs	r2, #0
  4021a0:	4b17      	ldr	r3, [pc, #92]	; (402200 <udd_ep_run+0x170>)
  4021a2:	701a      	strb	r2, [r3, #0]
	return flags;
  4021a4:	9d01      	ldr	r5, [sp, #4]
	udd_enable_endpoint_interrupt(ep);
  4021a6:	2301      	movs	r3, #1
  4021a8:	40bb      	lsls	r3, r7
  4021aa:	4a16      	ldr	r2, [pc, #88]	; (402204 <udd_ep_run+0x174>)
  4021ac:	6113      	str	r3, [r2, #16]
	if (b_dir_in) {
  4021ae:	f010 0f80 	tst.w	r0, #128	; 0x80
  4021b2:	d107      	bne.n	4021c4 <udd_ep_run+0x134>
	if (cpu_irq_is_enabled_flags(flags))
  4021b4:	b305      	cbz	r5, 4021f8 <udd_ep_run+0x168>
		cpu_irq_enable();
  4021b6:	2001      	movs	r0, #1
  4021b8:	4b11      	ldr	r3, [pc, #68]	; (402200 <udd_ep_run+0x170>)
  4021ba:	7018      	strb	r0, [r3, #0]
  4021bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4021c0:	b662      	cpsie	i
  4021c2:	e00f      	b.n	4021e4 <udd_ep_run+0x154>
		if (Is_udd_in_pending(ep)) {
  4021c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4021c6:	f013 0f11 	tst.w	r3, #17
  4021ca:	d1f3      	bne.n	4021b4 <udd_ep_run+0x124>
			if (udd_ep_in_sent(ep, true)) {
  4021cc:	2101      	movs	r1, #1
  4021ce:	4638      	mov	r0, r7
  4021d0:	4b0d      	ldr	r3, [pc, #52]	; (402208 <udd_ep_run+0x178>)
  4021d2:	4798      	blx	r3
  4021d4:	2800      	cmp	r0, #0
  4021d6:	d0ed      	beq.n	4021b4 <udd_ep_run+0x124>
				udd_ep_in_sent(ep, false);
  4021d8:	2100      	movs	r1, #0
  4021da:	4638      	mov	r0, r7
  4021dc:	4b0a      	ldr	r3, [pc, #40]	; (402208 <udd_ep_run+0x178>)
  4021de:	4798      	blx	r3
  4021e0:	e7e8      	b.n	4021b4 <udd_ep_run+0x124>
		return false;
  4021e2:	2000      	movs	r0, #0
}
  4021e4:	b003      	add	sp, #12
  4021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false; // Endpoint is halted
  4021e8:	2000      	movs	r0, #0
  4021ea:	e7fb      	b.n	4021e4 <udd_ep_run+0x154>
  4021ec:	2000      	movs	r0, #0
  4021ee:	e7f9      	b.n	4021e4 <udd_ep_run+0x154>
  4021f0:	2000      	movs	r0, #0
  4021f2:	e7f7      	b.n	4021e4 <udd_ep_run+0x154>
		return false; // Job already on going
  4021f4:	2000      	movs	r0, #0
  4021f6:	e7f5      	b.n	4021e4 <udd_ep_run+0x154>
	return true;
  4021f8:	2001      	movs	r0, #1
  4021fa:	e7f3      	b.n	4021e4 <udd_ep_run+0x154>
  4021fc:	200006c4 	.word	0x200006c4
  402200:	200000a0 	.word	0x200000a0
  402204:	40034000 	.word	0x40034000
  402208:	004010b9 	.word	0x004010b9

0040220c <udd_ep_abort>:
{
  40220c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40220e:	b087      	sub	sp, #28
	ep &= USB_EP_ADDR_MASK;
  402210:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402214:	2d03      	cmp	r5, #3
  402216:	d840      	bhi.n	40229a <udd_ep_abort+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402218:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40221c:	fab3 f383 	clz	r3, r3
  402220:	095b      	lsrs	r3, r3, #5
  402222:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
  402224:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402226:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40222a:	2200      	movs	r2, #0
  40222c:	4b4b      	ldr	r3, [pc, #300]	; (40235c <udd_ep_abort+0x150>)
  40222e:	701a      	strb	r2, [r3, #0]
	return flags;
  402230:	9b05      	ldr	r3, [sp, #20]
	udd_disable_endpoint_interrupt(ep);
  402232:	2401      	movs	r4, #1
  402234:	40ac      	lsls	r4, r5
  402236:	4a4a      	ldr	r2, [pc, #296]	; (402360 <udd_ep_abort+0x154>)
  402238:	6154      	str	r4, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
  40223a:	b12b      	cbz	r3, 402248 <udd_ep_abort+0x3c>
		cpu_irq_enable();
  40223c:	2201      	movs	r2, #1
  40223e:	4b47      	ldr	r3, [pc, #284]	; (40235c <udd_ep_abort+0x150>)
  402240:	701a      	strb	r2, [r3, #0]
  402242:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402246:	b662      	cpsie	i
	if (b_dir_in) {
  402248:	f010 0f80 	tst.w	r0, #128	; 0x80
  40224c:	d127      	bne.n	40229e <udd_ep_abort+0x92>
  40224e:	00ae      	lsls	r6, r5, #2
  402250:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  402254:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		while(Is_udd_any_bank_received(ep)) {
  402258:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40225a:	f013 0f42 	tst.w	r3, #66	; 0x42
  40225e:	d006      	beq.n	40226e <udd_ep_abort+0x62>
			udd_ep_ack_out_received(ep);
  402260:	4f40      	ldr	r7, [pc, #256]	; (402364 <udd_ep_abort+0x158>)
  402262:	4628      	mov	r0, r5
  402264:	47b8      	blx	r7
		while(Is_udd_any_bank_received(ep)) {
  402266:	6b33      	ldr	r3, [r6, #48]	; 0x30
  402268:	f013 0f42 	tst.w	r3, #66	; 0x42
  40226c:	d1f9      	bne.n	402262 <udd_ep_abort+0x56>
	udd_reset_endpoint(ep);
  40226e:	4a3c      	ldr	r2, [pc, #240]	; (402360 <udd_ep_abort+0x154>)
  402270:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402272:	4323      	orrs	r3, r4
  402274:	6293      	str	r3, [r2, #40]	; 0x28
  402276:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402278:	421c      	tst	r4, r3
  40227a:	d0fc      	beq.n	402276 <udd_ep_abort+0x6a>
  40227c:	4a38      	ldr	r2, [pc, #224]	; (402360 <udd_ep_abort+0x154>)
  40227e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402280:	ea23 0404 	bic.w	r4, r3, r4
  402284:	6294      	str	r4, [r2, #40]	; 0x28
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402286:	1e68      	subs	r0, r5, #1
  402288:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40228c:	462a      	mov	r2, r5
  40228e:	2101      	movs	r1, #1
  402290:	4b35      	ldr	r3, [pc, #212]	; (402368 <udd_ep_abort+0x15c>)
  402292:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402296:	4b35      	ldr	r3, [pc, #212]	; (40236c <udd_ep_abort+0x160>)
  402298:	4798      	blx	r3
}
  40229a:	b007      	add	sp, #28
  40229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40229e:	00ab      	lsls	r3, r5, #2
  4022a0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4022a4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		if (Is_udd_transmit_ready(ep)) {
  4022a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022aa:	f012 0f10 	tst.w	r2, #16
  4022ae:	d03a      	beq.n	402326 <udd_ep_abort+0x11a>
			udd_kill_data_in_fifo(ep,
  4022b0:	b34d      	cbz	r5, 402306 <udd_ep_abort+0xfa>
  4022b2:	2d03      	cmp	r5, #3
  4022b4:	d027      	beq.n	402306 <udd_ep_abort+0xfa>
  4022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022b8:	9201      	str	r2, [sp, #4]
  4022ba:	9a01      	ldr	r2, [sp, #4]
  4022bc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022c0:	9201      	str	r2, [sp, #4]
  4022c2:	9a01      	ldr	r2, [sp, #4]
  4022c4:	f022 0210 	bic.w	r2, r2, #16
  4022c8:	9201      	str	r2, [sp, #4]
  4022ca:	9a01      	ldr	r2, [sp, #4]
  4022cc:	631a      	str	r2, [r3, #48]	; 0x30
  4022ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022d0:	f012 0f10 	tst.w	r2, #16
  4022d4:	d1fb      	bne.n	4022ce <udd_ep_abort+0xc2>
  4022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022d8:	f012 0f10 	tst.w	r2, #16
  4022dc:	d1fb      	bne.n	4022d6 <udd_ep_abort+0xca>
  4022de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022e0:	9202      	str	r2, [sp, #8]
  4022e2:	9a02      	ldr	r2, [sp, #8]
  4022e4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022e8:	9202      	str	r2, [sp, #8]
  4022ea:	9a02      	ldr	r2, [sp, #8]
  4022ec:	f042 0210 	orr.w	r2, r2, #16
  4022f0:	9202      	str	r2, [sp, #8]
  4022f2:	9a02      	ldr	r2, [sp, #8]
  4022f4:	631a      	str	r2, [r3, #48]	; 0x30
  4022f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022f8:	f012 0f10 	tst.w	r2, #16
  4022fc:	d0fb      	beq.n	4022f6 <udd_ep_abort+0xea>
  4022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402300:	f012 0f10 	tst.w	r2, #16
  402304:	d0fb      	beq.n	4022fe <udd_ep_abort+0xf2>
  402306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402308:	9203      	str	r2, [sp, #12]
  40230a:	9a03      	ldr	r2, [sp, #12]
  40230c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402310:	9203      	str	r2, [sp, #12]
  402312:	9a03      	ldr	r2, [sp, #12]
  402314:	f022 0210 	bic.w	r2, r2, #16
  402318:	9203      	str	r2, [sp, #12]
  40231a:	9a03      	ldr	r2, [sp, #12]
  40231c:	631a      	str	r2, [r3, #48]	; 0x30
  40231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402320:	f012 0f10 	tst.w	r2, #16
  402324:	d1fb      	bne.n	40231e <udd_ep_abort+0x112>
		udd_ack_in_sent(ep);
  402326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402328:	9204      	str	r2, [sp, #16]
  40232a:	9a04      	ldr	r2, [sp, #16]
  40232c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402330:	9204      	str	r2, [sp, #16]
  402332:	9a04      	ldr	r2, [sp, #16]
  402334:	f022 0201 	bic.w	r2, r2, #1
  402338:	9204      	str	r2, [sp, #16]
  40233a:	9a04      	ldr	r2, [sp, #16]
  40233c:	631a      	str	r2, [r3, #48]	; 0x30
  40233e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402340:	f012 0f01 	tst.w	r2, #1
  402344:	d1fb      	bne.n	40233e <udd_ep_abort+0x132>
		udd_ep_job[ep - 1].bank = 0;
  402346:	1e6b      	subs	r3, r5, #1
  402348:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40234c:	4b06      	ldr	r3, [pc, #24]	; (402368 <udd_ep_abort+0x15c>)
  40234e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402352:	7c5a      	ldrb	r2, [r3, #17]
  402354:	f36f 0283 	bfc	r2, #2, #2
  402358:	745a      	strb	r2, [r3, #17]
  40235a:	e788      	b.n	40226e <udd_ep_abort+0x62>
  40235c:	200000a0 	.word	0x200000a0
  402360:	40034000 	.word	0x40034000
  402364:	00400fe5 	.word	0x00400fe5
  402368:	200006c4 	.word	0x200006c4
  40236c:	00400fa5 	.word	0x00400fa5

00402370 <readHandler>:
	last_complete = millis();
}
// END PACKET TIMEOUT STUFF //

// modbus functions
void readHandler(uint8_t* responsePacket, uint16_t start_reg, uint16_t end_reg) {
  402370:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402372:	460c      	mov	r4, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402374:	29ff      	cmp	r1, #255	; 0xff
  402376:	dc15      	bgt.n	4023a4 <readHandler+0x34>
  402378:	4617      	mov	r7, r2
  40237a:	4291      	cmp	r1, r2
  40237c:	da12      	bge.n	4023a4 <readHandler+0x34>
  40237e:	1c83      	adds	r3, r0, #2
  402380:	4d36      	ldr	r5, [pc, #216]	; (40245c <readHandler+0xec>)
  402382:	eb05 0541 	add.w	r5, r5, r1, lsl #1
		uint16_t data = intRegisters[i-INT_REG_OFFSET];
  402386:	f835 1f02 	ldrh.w	r1, [r5, #2]!
  40238a:	4618      	mov	r0, r3
		responsePacket[0] = (data >> 8) & 0xFF;
  40238c:	0a0e      	lsrs	r6, r1, #8
  40238e:	f803 6c02 	strb.w	r6, [r3, #-2]
		responsePacket[1] = data & 0xFF;
  402392:	f803 1c01 	strb.w	r1, [r3, #-1]
		responsePacket += INT_REG_BYTE_SZ;
		i++;
  402396:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402398:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
  40239c:	d005      	beq.n	4023aa <readHandler+0x3a>
  40239e:	3302      	adds	r3, #2
  4023a0:	42bc      	cmp	r4, r7
  4023a2:	dbf0      	blt.n	402386 <readHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  4023a4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  4023a8:	da3a      	bge.n	402420 <readHandler+0xb0>
  4023aa:	4694      	mov	ip, r2
  4023ac:	4294      	cmp	r4, r2
  4023ae:	da51      	bge.n	402454 <readHandler+0xe4>
  4023b0:	4b2b      	ldr	r3, [pc, #172]	; (402460 <readHandler+0xf0>)
  4023b2:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  4023b6:	4e2b      	ldr	r6, [pc, #172]	; (402464 <readHandler+0xf4>)
  4023b8:	e006      	b.n	4023c8 <readHandler+0x58>
		uint8_t* floatConversionBytes = floatToBytes_union(floatRegisters[i-FLOAT_REG_OFFSET]);
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
			responsePacket[j] = floatConversionBytes[j];
		}
		responsePacket += FLOAT_REG_BYTE_SZ;
  4023ba:	3004      	adds	r0, #4
		i++;
  4023bc:	3401      	adds	r4, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  4023be:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  4023c2:	d030      	beq.n	402426 <readHandler+0xb6>
  4023c4:	4564      	cmp	r4, ip
  4023c6:	d012      	beq.n	4023ee <readHandler+0x7e>
	floatCoversionBytes[0] = (u.data >> 24) & 0xFF;
  4023c8:	f85e 3f04 	ldr.w	r3, [lr, #4]!
  4023cc:	0e19      	lsrs	r1, r3, #24
  4023ce:	7031      	strb	r1, [r6, #0]
	floatCoversionBytes[1] = (u.data >> 16) & 0xFF;
  4023d0:	0c19      	lsrs	r1, r3, #16
  4023d2:	7071      	strb	r1, [r6, #1]
	floatCoversionBytes[2] = (u.data >> 8) & 0xFF;
  4023d4:	0a19      	lsrs	r1, r3, #8
  4023d6:	70b1      	strb	r1, [r6, #2]
	floatCoversionBytes[3] = u.data & 0xFF;
  4023d8:	70f3      	strb	r3, [r6, #3]
  4023da:	4631      	mov	r1, r6
  4023dc:	1e43      	subs	r3, r0, #1
  4023de:	1cc7      	adds	r7, r0, #3
			responsePacket[j] = floatConversionBytes[j];
  4023e0:	f811 5b01 	ldrb.w	r5, [r1], #1
  4023e4:	f803 5f01 	strb.w	r5, [r3, #1]!
		for (int j = 0; j < FLOAT_REG_BYTE_SZ; j++) {
  4023e8:	42bb      	cmp	r3, r7
  4023ea:	d1f9      	bne.n	4023e0 <readHandler+0x70>
  4023ec:	e7e5      	b.n	4023ba <readHandler+0x4a>
		responsePacket += FLOAT_REG_BYTE_SZ;
  4023ee:	4603      	mov	r3, r0
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  4023f0:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  4023f4:	db30      	blt.n	402458 <readHandler+0xe8>
		responsePacket[0] = charRegisters[i-CHAR_REG_OFFSET];
		responsePacket += CHAR_REG_BYTE_SZ;
		i++;
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  4023f6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
  4023fa:	da2d      	bge.n	402458 <readHandler+0xe8>
  4023fc:	4294      	cmp	r4, r2
  4023fe:	da2b      	bge.n	402458 <readHandler+0xe8>
  402400:	4919      	ldr	r1, [pc, #100]	; (402468 <readHandler+0xf8>)
  402402:	4421      	add	r1, r4
  402404:	f5c4 6580 	rsb	r5, r4, #1024	; 0x400
  402408:	441d      	add	r5, r3
  40240a:	1b12      	subs	r2, r2, r4
  40240c:	441a      	add	r2, r3
		responsePacket[0] = boolRegisters[i-BOOL_REG_OFFSET];
  40240e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  402412:	f803 0b01 	strb.w	r0, [r3], #1
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  402416:	429d      	cmp	r5, r3
  402418:	d01e      	beq.n	402458 <readHandler+0xe8>
  40241a:	429a      	cmp	r2, r3
  40241c:	d1f7      	bne.n	40240e <readHandler+0x9e>
  40241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402420:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
  402424:	da14      	bge.n	402450 <readHandler+0xe0>
  402426:	42a2      	cmp	r2, r4
  402428:	dd16      	ble.n	402458 <readHandler+0xe8>
  40242a:	4910      	ldr	r1, [pc, #64]	; (40246c <readHandler+0xfc>)
  40242c:	4421      	add	r1, r4
  40242e:	f5c4 7540 	rsb	r5, r4, #768	; 0x300
  402432:	4405      	add	r5, r0
  402434:	1b16      	subs	r6, r2, r4
  402436:	4406      	add	r6, r0
  402438:	4603      	mov	r3, r0
  40243a:	1a20      	subs	r0, r4, r0
		responsePacket[0] = charRegisters[i-CHAR_REG_OFFSET];
  40243c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  402440:	f803 4b01 	strb.w	r4, [r3], #1
  402444:	181c      	adds	r4, r3, r0
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402446:	42ab      	cmp	r3, r5
  402448:	d0d5      	beq.n	4023f6 <readHandler+0x86>
  40244a:	42b3      	cmp	r3, r6
  40244c:	d1f6      	bne.n	40243c <readHandler+0xcc>
  40244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402450:	4603      	mov	r3, r0
  402452:	e7d0      	b.n	4023f6 <readHandler+0x86>
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  402454:	4603      	mov	r3, r0
  402456:	e7cb      	b.n	4023f0 <readHandler+0x80>
  402458:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40245a:	bf00      	nop
  40245c:	20004d32 	.word	0x20004d32
  402460:	2000452c 	.word	0x2000452c
  402464:	20000700 	.word	0x20000700
  402468:	2000252f 	.word	0x2000252f
  40246c:	2000252f 	.word	0x2000252f

00402470 <writeHandler>:
		responsePacket += BOOL_REG_BYTE_SZ;
		i++;
	}
}

void writeHandler(uint8_t* data_packet, uint16_t start_reg, uint16_t end_reg) {
  402470:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i = start_reg;
  402472:	460b      	mov	r3, r1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  402474:	29ff      	cmp	r1, #255	; 0xff
  402476:	dc16      	bgt.n	4024a6 <writeHandler+0x36>
  402478:	4614      	mov	r4, r2
  40247a:	4291      	cmp	r1, r2
  40247c:	da13      	bge.n	4024a6 <writeHandler+0x36>
  40247e:	1c85      	adds	r5, r0, #2
  402480:	4837      	ldr	r0, [pc, #220]	; (402560 <writeHandler+0xf0>)
  402482:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  402486:	4628      	mov	r0, r5
    return (data[0] << 8) | data[1];
  402488:	f815 7c02 	ldrb.w	r7, [r5, #-2]
  40248c:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  402490:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
		intRegisters[i-INT_REG_OFFSET] = convertToInt(data_packet);
  402494:	f821 6f02 	strh.w	r6, [r1, #2]!
		data_packet += INT_REG_BYTE_SZ;
		i++;
  402498:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+INT_REG_OFFSET && i < end_reg) {
  40249a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40249e:	d005      	beq.n	4024ac <writeHandler+0x3c>
  4024a0:	3502      	adds	r5, #2
  4024a2:	42a3      	cmp	r3, r4
  4024a4:	dbef      	blt.n	402486 <writeHandler+0x16>
	}
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  4024a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4024aa:	da3c      	bge.n	402526 <writeHandler+0xb6>
  4024ac:	4696      	mov	lr, r2
  4024ae:	429a      	cmp	r2, r3
  4024b0:	dd1b      	ble.n	4024ea <writeHandler+0x7a>
  4024b2:	1d04      	adds	r4, r0, #4
  4024b4:	4e2b      	ldr	r6, [pc, #172]	; (402564 <writeHandler+0xf4>)
  4024b6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
  4024ba:	4620      	mov	r0, r4
    u.data = MERGE_FOUR_BYTES(data);
  4024bc:	f814 7c04 	ldrb.w	r7, [r4, #-4]
  4024c0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
  4024c4:	0409      	lsls	r1, r1, #16
  4024c6:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
  4024ca:	f814 7c01 	ldrb.w	r7, [r4, #-1]
  4024ce:	4339      	orrs	r1, r7
  4024d0:	f814 7c02 	ldrb.w	r7, [r4, #-2]
		floatRegisters[i-FLOAT_REG_OFFSET] = convertToFloat_union(data_packet);
  4024d4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  4024d8:	f846 1f04 	str.w	r1, [r6, #4]!
		data_packet += FLOAT_REG_BYTE_SZ;
		i++;
  4024dc:	3301      	adds	r3, #1
	while (i < REGISTER_AR_SIZE+FLOAT_REG_OFFSET && i < end_reg) {
  4024de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4024e2:	d023      	beq.n	40252c <writeHandler+0xbc>
  4024e4:	3404      	adds	r4, #4
  4024e6:	4573      	cmp	r3, lr
  4024e8:	d1e7      	bne.n	4024ba <writeHandler+0x4a>
	}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  4024ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  4024ee:	db35      	blt.n	40255c <writeHandler+0xec>
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
		data_packet += CHAR_REG_BYTE_SZ;
		i++;
	}
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  4024f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  4024f4:	da32      	bge.n	40255c <writeHandler+0xec>
  4024f6:	4293      	cmp	r3, r2
  4024f8:	da30      	bge.n	40255c <writeHandler+0xec>
  4024fa:	3801      	subs	r0, #1
  4024fc:	f2a3 3301 	subw	r3, r3, #769	; 0x301
  402500:	4919      	ldr	r1, [pc, #100]	; (402568 <writeHandler+0xf8>)
  402502:	440b      	add	r3, r1
  402504:	f101 04ff 	add.w	r4, r1, #255	; 0xff
  402508:	f2a2 3201 	subw	r2, r2, #769	; 0x301
  40250c:	4411      	add	r1, r2
    return data[0];
  40250e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402512:	3200      	adds	r2, #0
  402514:	bf18      	it	ne
  402516:	2201      	movne	r2, #1
  402518:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (i < REGISTER_AR_SIZE+BOOL_REG_OFFSET && i < end_reg) {
  40251c:	42a3      	cmp	r3, r4
  40251e:	d01d      	beq.n	40255c <writeHandler+0xec>
  402520:	428b      	cmp	r3, r1
  402522:	d1f4      	bne.n	40250e <writeHandler+0x9e>
  402524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  40252a:	dae1      	bge.n	4024f0 <writeHandler+0x80>
  40252c:	429a      	cmp	r2, r3
  40252e:	dd15      	ble.n	40255c <writeHandler+0xec>
  402530:	f2a3 2101 	subw	r1, r3, #513	; 0x201
  402534:	4d0d      	ldr	r5, [pc, #52]	; (40256c <writeHandler+0xfc>)
  402536:	4429      	add	r1, r5
  402538:	f105 07ff 	add.w	r7, r5, #255	; 0xff
  40253c:	f2a2 2401 	subw	r4, r2, #513	; 0x201
  402540:	442c      	add	r4, r5
  402542:	4606      	mov	r6, r0
  402544:	1a1d      	subs	r5, r3, r0
    return data[0];
  402546:	f816 3b01 	ldrb.w	r3, [r6], #1
		charRegisters[i-CHAR_REG_OFFSET] = convertToChar(data_packet);
  40254a:	f801 3f01 	strb.w	r3, [r1, #1]!
		data_packet += CHAR_REG_BYTE_SZ;
  40254e:	4630      	mov	r0, r6
  402550:	19ab      	adds	r3, r5, r6
	while (i < REGISTER_AR_SIZE+CHAR_REG_OFFSET && i < end_reg) {
  402552:	42b9      	cmp	r1, r7
  402554:	d0cc      	beq.n	4024f0 <writeHandler+0x80>
  402556:	42a1      	cmp	r1, r4
  402558:	d1f5      	bne.n	402546 <writeHandler+0xd6>
  40255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40255e:	bf00      	nop
  402560:	20004d32 	.word	0x20004d32
  402564:	2000452c 	.word	0x2000452c
  402568:	20002830 	.word	0x20002830
  40256c:	20002730 	.word	0x20002730

00402570 <getReadResponseDataSize>:
}

uint16_t getReadResponseDataSize(uint16_t start_reg, uint16_t end_reg) {
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary

	if(start_reg < REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if starting register is within the data type range
  402570:	28ff      	cmp	r0, #255	; 0xff
  402572:	d823      	bhi.n	4025bc <getReadResponseDataSize+0x4c>
		if(end_reg > REGISTER_AR_SIZE+INT_REG_OFFSET){									//check if the ending register is past the data type range
  402574:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  402578:	d91c      	bls.n	4025b4 <getReadResponseDataSize+0x44>
			size += (REGISTER_AR_SIZE+INT_REG_OFFSET-start_reg)*INT_REG_BYTE_SZ;		//add the register size to the size variable
  40257a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
  40257e:	0040      	lsls	r0, r0, #1
  402580:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+INT_REG_OFFSET;								//set the new start range to the first float register
  402582:	f44f 7080 	mov.w	r0, #256	; 0x100
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg > REGISTER_AR_SIZE+FLOAT_REG_OFFSET){								//check if the ending register is past the data type range
  402586:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  40258a:	d924      	bls.n	4025d6 <getReadResponseDataSize+0x66>
			size += (REGISTER_AR_SIZE+FLOAT_REG_OFFSET-start_reg)*FLOAT_REG_BYTE_SZ;	//add the register size to the size variable
  40258c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  402590:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402594:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+FLOAT_REG_OFFSET;								//set the new start range to the first float register
  402596:	f44f 7000 	mov.w	r0, #512	; 0x200
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
		if(end_reg > REGISTER_AR_SIZE+CHAR_REG_OFFSET){								//check if the ending register is past the data type range
  40259a:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
  40259e:	d921      	bls.n	4025e4 <getReadResponseDataSize+0x74>
  4025a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
			size += (REGISTER_AR_SIZE+CHAR_REG_OFFSET-start_reg)*CHAR_REG_BYTE_SZ;		//add the register size to the size variable
  4025a4:	1a18      	subs	r0, r3, r0
  4025a6:	b283      	uxth	r3, r0
			start_reg = REGISTER_AR_SIZE+CHAR_REG_OFFSET;								//set the new start range to the first float register
  4025a8:	f44f 7040 	mov.w	r0, #768	; 0x300
  4025ac:	4419      	add	r1, r3
			return size;
		}
	}
	
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
		size += (end_reg - start_reg)*BOOL_REG_BYTE_SZ;								//return the size including this data type's registers
  4025ae:	1a08      	subs	r0, r1, r0
  4025b0:	b280      	uxth	r0, r0
		return size;
  4025b2:	4770      	bx	lr
			size += (end_reg - start_reg)*INT_REG_BYTE_SZ;							//return the size including this data type's registers
  4025b4:	1a08      	subs	r0, r1, r0
  4025b6:	0040      	lsls	r0, r0, #1
  4025b8:	b280      	uxth	r0, r0
			return size;
  4025ba:	4770      	bx	lr
	if(start_reg < REGISTER_AR_SIZE+FLOAT_REG_OFFSET){									//check if starting register is within the data type range
  4025bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  4025c0:	d307      	bcc.n	4025d2 <getReadResponseDataSize+0x62>
	if(start_reg < REGISTER_AR_SIZE+CHAR_REG_OFFSET){									//check if starting register is within the data type range
  4025c2:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  4025c6:	d30b      	bcc.n	4025e0 <getReadResponseDataSize+0x70>
	if(start_reg < REGISTER_AR_SIZE+BOOL_REG_OFFSET){
  4025c8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
  4025cc:	d30e      	bcc.n	4025ec <getReadResponseDataSize+0x7c>
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  4025ce:	2000      	movs	r0, #0
	}
		
	return size;	
}
  4025d0:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  4025d2:	2300      	movs	r3, #0
  4025d4:	e7d7      	b.n	402586 <getReadResponseDataSize+0x16>
			size += (end_reg - start_reg)*FLOAT_REG_BYTE_SZ;						//return the size including this data type's registers
  4025d6:	1a08      	subs	r0, r1, r0
  4025d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025dc:	b280      	uxth	r0, r0
			return size;
  4025de:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  4025e0:	2300      	movs	r3, #0
  4025e2:	e7da      	b.n	40259a <getReadResponseDataSize+0x2a>
  4025e4:	4419      	add	r1, r3
			size += (end_reg - start_reg)*CHAR_REG_BYTE_SZ;							//return the size including this data type's registers
  4025e6:	1a08      	subs	r0, r1, r0
  4025e8:	b280      	uxth	r0, r0
			return size;
  4025ea:	4770      	bx	lr
	uint16_t size = 0;																			//I don't like the previous implementation because it had several loops that were unnecessary
  4025ec:	2300      	movs	r3, #0
  4025ee:	e7dd      	b.n	4025ac <getReadResponseDataSize+0x3c>

004025f0 <modbus_init>:

void modbus_init(const uint8_t slave_id){
	slaveID = slave_id;
  4025f0:	4b03      	ldr	r3, [pc, #12]	; (402600 <modbus_init+0x10>)
  4025f2:	7018      	strb	r0, [r3, #0]
	rxBuffer.head = 0;
  4025f4:	4b03      	ldr	r3, [pc, #12]	; (402604 <modbus_init+0x14>)
  4025f6:	2200      	movs	r2, #0
  4025f8:	801a      	strh	r2, [r3, #0]
	rxBuffer.tail = 0;
  4025fa:	805a      	strh	r2, [r3, #2]
  4025fc:	4770      	bx	lr
  4025fe:	bf00      	nop
  402600:	20006f3c 	.word	0x20006f3c
  402604:	20004f34 	.word	0x20004f34

00402608 <pop_packet>:
	reset_timeout();
}

uint8_t* pop_packet(){
	static uint8_t returnPacket[RX_BUFFER_SIZE];
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  402608:	4b0d      	ldr	r3, [pc, #52]	; (402640 <pop_packet+0x38>)
  40260a:	8819      	ldrh	r1, [r3, #0]
  40260c:	b1a9      	cbz	r1, 40263a <pop_packet+0x32>
uint8_t* pop_packet(){
  40260e:	b410      	push	{r4}
  402610:	4b0c      	ldr	r3, [pc, #48]	; (402644 <pop_packet+0x3c>)
  402612:	885b      	ldrh	r3, [r3, #2]
  402614:	480c      	ldr	r0, [pc, #48]	; (402648 <pop_packet+0x40>)
  402616:	1e42      	subs	r2, r0, #1
  402618:	3901      	subs	r1, #1
  40261a:	4408      	add	r0, r1
		returnPacket[i] = rxBuffer.data[rxBuffer.tail];
  40261c:	4c09      	ldr	r4, [pc, #36]	; (402644 <pop_packet+0x3c>)
  40261e:	18e1      	adds	r1, r4, r3
  402620:	7909      	ldrb	r1, [r1, #4]
  402622:	f802 1f01 	strb.w	r1, [r2, #1]!
		rxBuffer.tail = PKT_WRAP_ARND(rxBuffer.tail + 1);	//iterate the tail
  402626:	3301      	adds	r3, #1
  402628:	f3c3 030c 	ubfx	r3, r3, #0, #13
	for(int i=0;i<packetSize;i++){							//copy packet data to return array
  40262c:	4282      	cmp	r2, r0
  40262e:	d1f6      	bne.n	40261e <pop_packet+0x16>
  402630:	4a04      	ldr	r2, [pc, #16]	; (402644 <pop_packet+0x3c>)
  402632:	8053      	strh	r3, [r2, #2]
	}
	return returnPacket;									//return
}
  402634:	4804      	ldr	r0, [pc, #16]	; (402648 <pop_packet+0x40>)
  402636:	bc10      	pop	{r4}
  402638:	4770      	bx	lr
  40263a:	4803      	ldr	r0, [pc, #12]	; (402648 <pop_packet+0x40>)
  40263c:	4770      	bx	lr
  40263e:	bf00      	nop
  402640:	20004d30 	.word	0x20004d30
  402644:	20004f34 	.word	0x20004f34
  402648:	20000708 	.word	0x20000708

0040264c <popToFc>:
{
  40264c:	b510      	push	{r4, lr}
	uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX + 1);
  40264e:	4a19      	ldr	r2, [pc, #100]	; (4026b4 <popToFc+0x68>)
  402650:	8854      	ldrh	r4, [r2, #2]
  402652:	1ca3      	adds	r3, r4, #2
  402654:	f3c3 030c 	ubfx	r3, r3, #0, #13
	uint8_t checkFCByte = rxBuffer.data[FCLoc];
  402658:	441a      	add	r2, r3
  40265a:	7912      	ldrb	r2, [r2, #4]
	while (checkFCByte != FC_READ_MULT && checkFCByte != FC_WRITE_MULT && FCLoc != rxBuffer.head)
  40265c:	2a03      	cmp	r2, #3
  40265e:	d012      	beq.n	402686 <popToFc+0x3a>
  402660:	2a10      	cmp	r2, #16
  402662:	d010      	beq.n	402686 <popToFc+0x3a>
  402664:	4a13      	ldr	r2, [pc, #76]	; (4026b4 <popToFc+0x68>)
  402666:	8811      	ldrh	r1, [r2, #0]
  402668:	428b      	cmp	r3, r1
  40266a:	d01c      	beq.n	4026a6 <popToFc+0x5a>
		checkFCByte = rxBuffer.data[FCLoc];
  40266c:	4610      	mov	r0, r2
		FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  40266e:	3301      	adds	r3, #1
  402670:	f3c3 030c 	ubfx	r3, r3, #0, #13
		checkFCByte = rxBuffer.data[FCLoc];
  402674:	18c2      	adds	r2, r0, r3
  402676:	7912      	ldrb	r2, [r2, #4]
	while (checkFCByte != FC_READ_MULT && checkFCByte != FC_WRITE_MULT && FCLoc != rxBuffer.head)
  402678:	2a03      	cmp	r2, #3
  40267a:	d004      	beq.n	402686 <popToFc+0x3a>
  40267c:	2a10      	cmp	r2, #16
  40267e:	d002      	beq.n	402686 <popToFc+0x3a>
  402680:	428b      	cmp	r3, r1
  402682:	d1f4      	bne.n	40266e <popToFc+0x22>
		FCLoc = PKT_WRAP_ARND(FCLoc + 1);
  402684:	460b      	mov	r3, r1
	if (PKT_WRAP_ARND(FCLoc - 1) >= rxBuffer.tail)
  402686:	1e5a      	subs	r2, r3, #1
  402688:	f3c2 020c 	ubfx	r2, r2, #0, #13
  40268c:	42a2      	cmp	r2, r4
  40268e:	da0c      	bge.n	4026aa <popToFc+0x5e>
		packetSize = (RX_BUFFER_SIZE - rxBuffer.tail) + PKT_WRAP_ARND(FCLoc - 1);
  402690:	3b01      	subs	r3, #1
  402692:	f3c3 030c 	ubfx	r3, r3, #0, #13
  402696:	f5c4 5400 	rsb	r4, r4, #8192	; 0x2000
  40269a:	4423      	add	r3, r4
  40269c:	4a06      	ldr	r2, [pc, #24]	; (4026b8 <popToFc+0x6c>)
  40269e:	8013      	strh	r3, [r2, #0]
	pop_packet();
  4026a0:	4b06      	ldr	r3, [pc, #24]	; (4026bc <popToFc+0x70>)
  4026a2:	4798      	blx	r3
  4026a4:	bd10      	pop	{r4, pc}
	uint16_t FCLoc = PKT_WRAP_ARND(rxBuffer.tail + FC_IDX + 1);
  4026a6:	460b      	mov	r3, r1
  4026a8:	e7ed      	b.n	402686 <popToFc+0x3a>
		packetSize = PKT_WRAP_ARND(FCLoc - 1) - rxBuffer.tail;
  4026aa:	1b13      	subs	r3, r2, r4
  4026ac:	4a02      	ldr	r2, [pc, #8]	; (4026b8 <popToFc+0x6c>)
  4026ae:	8013      	strh	r3, [r2, #0]
  4026b0:	e7f6      	b.n	4026a0 <popToFc+0x54>
  4026b2:	bf00      	nop
  4026b4:	20004f34 	.word	0x20004f34
  4026b8:	20004d30 	.word	0x20004d30
  4026bc:	00402609 	.word	0x00402609

004026c0 <buffer_get_data_sz>:

uint16_t buffer_get_data_sz(void) {
	if (rxBuffer.head >= rxBuffer.tail) {
  4026c0:	4b04      	ldr	r3, [pc, #16]	; (4026d4 <buffer_get_data_sz+0x14>)
  4026c2:	8818      	ldrh	r0, [r3, #0]
  4026c4:	885b      	ldrh	r3, [r3, #2]
  4026c6:	4298      	cmp	r0, r3
		return rxBuffer.head - rxBuffer.tail;
	} else {
		return (RX_BUFFER_SIZE - rxBuffer.tail) + rxBuffer.head;
  4026c8:	bf38      	it	cc
  4026ca:	f500 5000 	addcc.w	r0, r0, #8192	; 0x2000
  4026ce:	1ac0      	subs	r0, r0, r3
  4026d0:	b280      	uxth	r0, r0
	}
}
  4026d2:	4770      	bx	lr
  4026d4:	20004f34 	.word	0x20004f34

004026d8 <ModRTU_CRC>:

uint16_t ModRTU_CRC(uint8_t* buf, int len)
{
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++) {
  4026d8:	2900      	cmp	r1, #0
  4026da:	dd16      	ble.n	40270a <ModRTU_CRC+0x32>
{
  4026dc:	b410      	push	{r4}
  4026de:	4604      	mov	r4, r0
  4026e0:	4401      	add	r1, r0
	for (int pos = 0; pos < len; pos++) {
  4026e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc

		for (int i = 8; i != 0; i--) {    // Loop over each bit
			if ((crc & 0x0001) != 0) {      // If the LSB is set
				crc >>= 1;                    // Shift right and XOR 0xA001
				crc ^= 0xA001;
  4026e6:	f24a 0201 	movw	r2, #40961	; 0xa001
  4026ea:	e001      	b.n	4026f0 <ModRTU_CRC+0x18>
	for (int pos = 0; pos < len; pos++) {
  4026ec:	428c      	cmp	r4, r1
  4026ee:	d00f      	beq.n	402710 <ModRTU_CRC+0x38>
		crc ^= (uint8_t)buf[pos];          // XOR byte into least sig. byte of crc
  4026f0:	f814 3b01 	ldrb.w	r3, [r4], #1
  4026f4:	4058      	eors	r0, r3
  4026f6:	2308      	movs	r3, #8
			if ((crc & 0x0001) != 0) {      // If the LSB is set
  4026f8:	f010 0f01 	tst.w	r0, #1
				crc ^= 0xA001;
  4026fc:	bf14      	ite	ne
  4026fe:	ea82 0050 	eorne.w	r0, r2, r0, lsr #1
			}
			else                            // Else LSB is not set
			crc >>= 1;                    // Just shift right
  402702:	0840      	lsreq	r0, r0, #1
		for (int i = 8; i != 0; i--) {    // Loop over each bit
  402704:	3b01      	subs	r3, #1
  402706:	d1f7      	bne.n	4026f8 <ModRTU_CRC+0x20>
  402708:	e7f0      	b.n	4026ec <ModRTU_CRC+0x14>
	uint16_t crc = 0xFFFF;
  40270a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  40270e:	4770      	bx	lr
		}
	}
	
	return crc;
  402710:	bc10      	pop	{r4}
  402712:	4770      	bx	lr

00402714 <packet_complete>:
bool packet_complete(){
  402714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402716:	af00      	add	r7, sp, #0
	packetSize = 0;																	// Reset this in case packet is not complete
  402718:	2200      	movs	r2, #0
  40271a:	4b4f      	ldr	r3, [pc, #316]	; (402858 <packet_complete+0x144>)
  40271c:	801a      	strh	r2, [r3, #0]
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  40271e:	4b4f      	ldr	r3, [pc, #316]	; (40285c <packet_complete+0x148>)
  402720:	885c      	ldrh	r4, [r3, #2]
	uint8_t func_code = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + FC_IDX)];
  402722:	1c62      	adds	r2, r4, #1
  402724:	f3c2 020c 	ubfx	r2, r2, #0, #13
  402728:	4413      	add	r3, r2
  40272a:	791b      	ldrb	r3, [r3, #4]
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  40272c:	2b10      	cmp	r3, #16
  40272e:	d006      	beq.n	40273e <packet_complete+0x2a>
  402730:	2b03      	cmp	r3, #3
  402732:	d004      	beq.n	40273e <packet_complete+0x2a>
		popToFc();
  402734:	4b4a      	ldr	r3, [pc, #296]	; (402860 <packet_complete+0x14c>)
  402736:	4798      	blx	r3
		return false;
  402738:	2000      	movs	r0, #0
}
  40273a:	46bd      	mov	sp, r7
  40273c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t start_reg_hi = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + START_REG_H_IDX)];
  40273e:	1ca2      	adds	r2, r4, #2
  402740:	f3c2 010c 	ubfx	r1, r2, #0, #13
  402744:	4a45      	ldr	r2, [pc, #276]	; (40285c <packet_complete+0x148>)
  402746:	440a      	add	r2, r1
  402748:	7915      	ldrb	r5, [r2, #4]
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  40274a:	2d03      	cmp	r5, #3
  40274c:	d8f2      	bhi.n	402734 <packet_complete+0x20>
	uint8_t num_reg_hi = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + NUM_REG_H_IDX)];
  40274e:	1d22      	adds	r2, r4, #4
  402750:	f3c2 010c 	ubfx	r1, r2, #0, #13
  402754:	4a41      	ldr	r2, [pc, #260]	; (40285c <packet_complete+0x148>)
  402756:	440a      	add	r2, r1
  402758:	7911      	ldrb	r1, [r2, #4]
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  40275a:	2903      	cmp	r1, #3
  40275c:	d8ea      	bhi.n	402734 <packet_complete+0x20>
	uint8_t slave_id = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + SLAVE_ID_IDX)];
  40275e:	f3c4 060c 	ubfx	r6, r4, #0, #13
  402762:	4a3e      	ldr	r2, [pc, #248]	; (40285c <packet_complete+0x148>)
  402764:	4432      	add	r2, r6
	if ((func_code != FC_WRITE_MULT && func_code != FC_READ_MULT) || start_reg_hi >= 4 || num_reg_hi >= 4 || slave_id != slaveID)
  402766:	7916      	ldrb	r6, [r2, #4]
  402768:	4a3e      	ldr	r2, [pc, #248]	; (402864 <packet_complete+0x150>)
  40276a:	7812      	ldrb	r2, [r2, #0]
  40276c:	4296      	cmp	r6, r2
  40276e:	d1e1      	bne.n	402734 <packet_complete+0x20>
	if (func_code == 0x10 && num_data_bytes != getReadResponseDataSize(num_bytes_check_start, num_bytes_check_end)) // calc what size should be for write packet here????????????????????????????????????????????????
  402770:	2b10      	cmp	r3, #16
  402772:	d00a      	beq.n	40278a <packet_complete+0x76>
	else if (func_code == FC_READ_MULT) {
  402774:	2b03      	cmp	r3, #3
  402776:	d02d      	beq.n	4027d4 <packet_complete+0xc0>
	num_data_bytes = 0;														// Default 0 for packets with no data bytes
  402778:	2600      	movs	r6, #0
	uint16_t full_pkt_sz = num_data_bytes + base_pkt_sz;								//calculate full packet size
  40277a:	4430      	add	r0, r6
  40277c:	b285      	uxth	r5, r0
	if (buffer_get_data_sz() < full_pkt_sz) return false;								//make sure we have a full packet
  40277e:	4b3a      	ldr	r3, [pc, #232]	; (402868 <packet_complete+0x154>)
  402780:	4798      	blx	r3
  402782:	4285      	cmp	r5, r0
  402784:	d92d      	bls.n	4027e2 <packet_complete+0xce>
  402786:	2000      	movs	r0, #0
  402788:	e7d7      	b.n	40273a <packet_complete+0x26>
	uint8_t num_data_bytes = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + WR_DATA_SIZE_IDX)];
  40278a:	4b34      	ldr	r3, [pc, #208]	; (40285c <packet_complete+0x148>)
  40278c:	1da2      	adds	r2, r4, #6
  40278e:	f3c2 020c 	ubfx	r2, r2, #0, #13
  402792:	441a      	add	r2, r3
  402794:	7916      	ldrb	r6, [r2, #4]
	uint8_t start_reg_lo = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + START_REG_L_IDX)];
  402796:	1ce2      	adds	r2, r4, #3
  402798:	f3c2 020c 	ubfx	r2, r2, #0, #13
  40279c:	441a      	add	r2, r3
	uint16_t num_bytes_check_start = start_reg_hi << 8 | start_reg_lo;
  40279e:	7910      	ldrb	r0, [r2, #4]
  4027a0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
	uint8_t num_reg_lo = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + NUM_REG_L_IDX)];
  4027a4:	1d62      	adds	r2, r4, #5
  4027a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
  4027aa:	4413      	add	r3, r2
	uint16_t num_bytes_check_end = num_bytes_check_start + (num_reg_hi << 8 | num_reg_lo);
  4027ac:	791b      	ldrb	r3, [r3, #4]
  4027ae:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  4027b2:	4401      	add	r1, r0
	if (func_code == 0x10 && num_data_bytes != getReadResponseDataSize(num_bytes_check_start, num_bytes_check_end)) // calc what size should be for write packet here????????????????????????????????????????????????
  4027b4:	b289      	uxth	r1, r1
  4027b6:	4b2d      	ldr	r3, [pc, #180]	; (40286c <packet_complete+0x158>)
  4027b8:	4798      	blx	r3
  4027ba:	b2b3      	uxth	r3, r6
  4027bc:	4283      	cmp	r3, r0
  4027be:	d105      	bne.n	4027cc <packet_complete+0xb8>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  4027c0:	4b29      	ldr	r3, [pc, #164]	; (402868 <packet_complete+0x154>)
  4027c2:	4798      	blx	r3
  4027c4:	2809      	cmp	r0, #9
  4027c6:	d943      	bls.n	402850 <packet_complete+0x13c>
		base_pkt_sz = ABS_MIN_WRITE_PACKET_SIZE - 1;											
  4027c8:	2009      	movs	r0, #9
  4027ca:	e7d6      	b.n	40277a <packet_complete+0x66>
		popToFc();
  4027cc:	4b24      	ldr	r3, [pc, #144]	; (402860 <packet_complete+0x14c>)
  4027ce:	4798      	blx	r3
		return false;
  4027d0:	2000      	movs	r0, #0
  4027d2:	e7b2      	b.n	40273a <packet_complete+0x26>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  4027d4:	4b24      	ldr	r3, [pc, #144]	; (402868 <packet_complete+0x154>)
  4027d6:	4798      	blx	r3
  4027d8:	2807      	cmp	r0, #7
  4027da:	d93b      	bls.n	402854 <packet_complete+0x140>
		base_pkt_sz = WRITE_RES_PACKET_SIZE;											//we know the final packet size
  4027dc:	2008      	movs	r0, #8
	num_data_bytes = 0;														// Default 0 for packets with no data bytes
  4027de:	2600      	movs	r6, #0
  4027e0:	e7cb      	b.n	40277a <packet_complete+0x66>
	packetSize = full_pkt_sz;															// Set global packetSize to completed packet size
  4027e2:	4b1d      	ldr	r3, [pc, #116]	; (402858 <packet_complete+0x144>)
  4027e4:	801d      	strh	r5, [r3, #0]
	uint8_t packetNoCRC[packetSize - CRC_SIZE];											//pull packet into linear buffer for crc check
  4027e6:	1ea9      	subs	r1, r5, #2
  4027e8:	1d6b      	adds	r3, r5, #5
  4027ea:	f023 0307 	bic.w	r3, r3, #7
  4027ee:	ebad 0d03 	sub.w	sp, sp, r3
  4027f2:	4668      	mov	r0, sp
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  4027f4:	2900      	cmp	r1, #0
  4027f6:	dd0e      	ble.n	402816 <packet_complete+0x102>
  4027f8:	460d      	mov	r5, r1
  4027fa:	446d      	add	r5, sp
  4027fc:	466a      	mov	r2, sp
		packetNoCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + i)];
  4027fe:	f8df e05c 	ldr.w	lr, [pc, #92]	; 40285c <packet_complete+0x148>
  402802:	1a26      	subs	r6, r4, r0
  402804:	18b3      	adds	r3, r6, r2
  402806:	f3c3 030c 	ubfx	r3, r3, #0, #13
  40280a:	4473      	add	r3, lr
  40280c:	791b      	ldrb	r3, [r3, #4]
  40280e:	f802 3b01 	strb.w	r3, [r2], #1
	for(int i=0;i<packetSize - CRC_SIZE;i++){
  402812:	42aa      	cmp	r2, r5
  402814:	d1f6      	bne.n	402804 <packet_complete+0xf0>
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402816:	440c      	add	r4, r1
  402818:	4d10      	ldr	r5, [pc, #64]	; (40285c <packet_complete+0x148>)
  40281a:	f3c4 030c 	ubfx	r3, r4, #0, #13
  40281e:	442b      	add	r3, r5
  402820:	791e      	ldrb	r6, [r3, #4]
	uint16_t expectedCRC = ModRTU_CRC(packetNoCRC, packetSize - CRC_SIZE);				//calculate expected crc
  402822:	4b13      	ldr	r3, [pc, #76]	; (402870 <packet_complete+0x15c>)
  402824:	4798      	blx	r3
		packetCRC[i] = rxBuffer.data[PKT_WRAP_ARND(rxBuffer.tail + (packetSize - CRC_SIZE) + i)];
  402826:	3401      	adds	r4, #1
  402828:	f3c4 040c 	ubfx	r4, r4, #0, #13
  40282c:	442c      	add	r4, r5
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  40282e:	7922      	ldrb	r2, [r4, #4]
  402830:	f3c0 230f 	ubfx	r3, r0, #8, #16
  402834:	429a      	cmp	r2, r3
  402836:	d006      	beq.n	402846 <packet_complete+0x132>
		packetSize = 1;
  402838:	2201      	movs	r2, #1
  40283a:	4b07      	ldr	r3, [pc, #28]	; (402858 <packet_complete+0x144>)
  40283c:	801a      	strh	r2, [r3, #0]
		pop_packet();
  40283e:	4b0d      	ldr	r3, [pc, #52]	; (402874 <packet_complete+0x160>)
  402840:	4798      	blx	r3
		return false;
  402842:	2000      	movs	r0, #0
  402844:	e779      	b.n	40273a <packet_complete+0x26>
	if(((expectedCRC >> 8) & 0xFF) == packetCRC[1] && (expectedCRC & 0xFF) == packetCRC[0]){				//crc comparison
  402846:	b2c0      	uxtb	r0, r0
  402848:	42b0      	cmp	r0, r6
  40284a:	d1f5      	bne.n	402838 <packet_complete+0x124>
		return true;																	//packet is complete and passes crc
  40284c:	2001      	movs	r0, #1
  40284e:	e774      	b.n	40273a <packet_complete+0x26>
		if(buffer_get_data_sz() < ABS_MIN_WRITE_PACKET_SIZE) return false;						//if the data size is less than this, we know the packet is incomplete
  402850:	2000      	movs	r0, #0
  402852:	e772      	b.n	40273a <packet_complete+0x26>
		if(buffer_get_data_sz() < WRITE_RES_PACKET_SIZE) return false;					//if the data size is less than this, we know the packet is incomplete
  402854:	2000      	movs	r0, #0
  402856:	e770      	b.n	40273a <packet_complete+0x26>
  402858:	20004d30 	.word	0x20004d30
  40285c:	20004f34 	.word	0x20004f34
  402860:	0040264d 	.word	0x0040264d
  402864:	20006f3c 	.word	0x20006f3c
  402868:	004026c1 	.word	0x004026c1
  40286c:	00402571 	.word	0x00402571
  402870:	004026d9 	.word	0x004026d9
  402874:	00402609 	.word	0x00402609

00402878 <modbus_update>:
void modbus_update(void){
  402878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(buffer_get_data_sz() < ABS_MIN_PACKET_SIZE) return;			//if not enough data has been received just break out
  40287a:	4b30      	ldr	r3, [pc, #192]	; (40293c <modbus_update+0xc4>)
  40287c:	4798      	blx	r3
  40287e:	2806      	cmp	r0, #6
  402880:	d800      	bhi.n	402884 <modbus_update+0xc>
  402882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if( !packet_complete()) return;									//check if an entire packet has been received otherwise return, also resolves overflow errors
  402884:	4b2e      	ldr	r3, [pc, #184]	; (402940 <modbus_update+0xc8>)
  402886:	4798      	blx	r3
  402888:	2800      	cmp	r0, #0
  40288a:	d0fa      	beq.n	402882 <modbus_update+0xa>
	uint8_t* packet = pop_packet();									//packet is complete, so pull it out
  40288c:	4b2d      	ldr	r3, [pc, #180]	; (402944 <modbus_update+0xcc>)
  40288e:	4798      	blx	r3
  402890:	4604      	mov	r4, r0
	if(packet[SLAVE_ID_IDX] != slaveID) return;						//disregard if the packet doesn't apply to this slave
  402892:	7802      	ldrb	r2, [r0, #0]
  402894:	4b2c      	ldr	r3, [pc, #176]	; (402948 <modbus_update+0xd0>)
  402896:	781b      	ldrb	r3, [r3, #0]
  402898:	429a      	cmp	r2, r3
  40289a:	d1f2      	bne.n	402882 <modbus_update+0xa>
	uint16_t start_reg = packet[START_REG_H_IDX] << 8 | packet[START_REG_L_IDX];
  40289c:	7887      	ldrb	r7, [r0, #2]
  40289e:	78c5      	ldrb	r5, [r0, #3]
  4028a0:	ea45 2607 	orr.w	r6, r5, r7, lsl #8
	uint16_t num_registers = packet[NUM_REG_H_IDX] << 8 | packet[NUM_REG_L_IDX];
  4028a4:	7900      	ldrb	r0, [r0, #4]
  4028a6:	7961      	ldrb	r1, [r4, #5]
	int end_reg = start_reg + num_registers;                                    // this register number is exclusive, so all valid register numbers are less than end_reg
  4028a8:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
  4028ac:	4432      	add	r2, r6
	switch(packet[FC_IDX]) {
  4028ae:	7863      	ldrb	r3, [r4, #1]
  4028b0:	2b03      	cmp	r3, #3
  4028b2:	d017      	beq.n	4028e4 <modbus_update+0x6c>
  4028b4:	2b10      	cmp	r3, #16
  4028b6:	d029      	beq.n	40290c <modbus_update+0x94>
	uint16_t responceCRC = ModRTU_CRC(responsePacket, responsePacketSize-CRC_SIZE);			//calculate crc
  4028b8:	4b24      	ldr	r3, [pc, #144]	; (40294c <modbus_update+0xd4>)
  4028ba:	881d      	ldrh	r5, [r3, #0]
  4028bc:	1eae      	subs	r6, r5, #2
  4028be:	4c24      	ldr	r4, [pc, #144]	; (402950 <modbus_update+0xd8>)
  4028c0:	4631      	mov	r1, r6
  4028c2:	4620      	mov	r0, r4
  4028c4:	4b23      	ldr	r3, [pc, #140]	; (402954 <modbus_update+0xdc>)
  4028c6:	4798      	blx	r3
	responsePacket[responsePacketSize-2] = responceCRC & 0xff;								//add CRC
  4028c8:	55a0      	strb	r0, [r4, r6]
	responsePacket[responsePacketSize-1] = (responceCRC>>8) & 0xff;
  4028ca:	1963      	adds	r3, r4, r5
  4028cc:	0a00      	lsrs	r0, r0, #8
  4028ce:	f803 0c01 	strb.w	r0, [r3, #-1]
	portWrite(responsePacket, responsePacketSize);
  4028d2:	4629      	mov	r1, r5
  4028d4:	4620      	mov	r0, r4
  4028d6:	4b20      	ldr	r3, [pc, #128]	; (402958 <modbus_update+0xe0>)
  4028d8:	4798      	blx	r3
	last_complete = millis();
  4028da:	4b20      	ldr	r3, [pc, #128]	; (40295c <modbus_update+0xe4>)
  4028dc:	4798      	blx	r3
  4028de:	4b20      	ldr	r3, [pc, #128]	; (402960 <modbus_update+0xe8>)
  4028e0:	6018      	str	r0, [r3, #0]
  4028e2:	e7ce      	b.n	402882 <modbus_update+0xa>
			uint16_t read_num_bytes = getReadResponseDataSize(start_reg, end_reg);
  4028e4:	b295      	uxth	r5, r2
  4028e6:	4629      	mov	r1, r5
  4028e8:	4630      	mov	r0, r6
  4028ea:	4b1e      	ldr	r3, [pc, #120]	; (402964 <modbus_update+0xec>)
  4028ec:	4798      	blx	r3
			responsePacketSize = RD_RESP_PACKET_MIN_SIZE + read_num_bytes;
  4028ee:	1d42      	adds	r2, r0, #5
  4028f0:	4b16      	ldr	r3, [pc, #88]	; (40294c <modbus_update+0xd4>)
  4028f2:	801a      	strh	r2, [r3, #0]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;						//this is how the protocol is now to help identify when the master or slave is speaking
  4028f4:	4b16      	ldr	r3, [pc, #88]	; (402950 <modbus_update+0xd8>)
  4028f6:	2200      	movs	r2, #0
  4028f8:	701a      	strb	r2, [r3, #0]
			responsePacket[FC_IDX] = packet[FC_IDX];
  4028fa:	7862      	ldrb	r2, [r4, #1]
  4028fc:	705a      	strb	r2, [r3, #1]
			responsePacket[RD_DATA_SIZE_IDX] = read_num_bytes;
  4028fe:	7098      	strb	r0, [r3, #2]
			readHandler(responsePacket+RD_DATA_BYTE_START, start_reg, end_reg);
  402900:	462a      	mov	r2, r5
  402902:	4631      	mov	r1, r6
  402904:	1cd8      	adds	r0, r3, #3
  402906:	4b18      	ldr	r3, [pc, #96]	; (402968 <modbus_update+0xf0>)
  402908:	4798      	blx	r3
			break;
  40290a:	e7d5      	b.n	4028b8 <modbus_update+0x40>
			responsePacketSize = WR_RESP_PACKET_SIZE;
  40290c:	f04f 0e08 	mov.w	lr, #8
  402910:	4b0e      	ldr	r3, [pc, #56]	; (40294c <modbus_update+0xd4>)
  402912:	f8a3 e000 	strh.w	lr, [r3]
			responsePacket[SLAVE_ID_IDX] = MASTER_ADRESS;	
  402916:	4b0e      	ldr	r3, [pc, #56]	; (402950 <modbus_update+0xd8>)
  402918:	f04f 0e00 	mov.w	lr, #0
  40291c:	f883 e000 	strb.w	lr, [r3]
			responsePacket[FC_IDX] = packet[FC_IDX];
  402920:	f894 e001 	ldrb.w	lr, [r4, #1]
  402924:	f883 e001 	strb.w	lr, [r3, #1]
			responsePacket[START_REG_H_IDX] = packet[START_REG_H_IDX];
  402928:	709f      	strb	r7, [r3, #2]
			responsePacket[START_REG_L_IDX] = packet[START_REG_L_IDX];
  40292a:	70dd      	strb	r5, [r3, #3]
			responsePacket[NUM_REG_H_IDX] = packet[NUM_REG_H_IDX];
  40292c:	7118      	strb	r0, [r3, #4]
			responsePacket[NUM_REG_L_IDX] = packet[NUM_REG_L_IDX];
  40292e:	7159      	strb	r1, [r3, #5]
			writeHandler(&packet[WR_DATA_BYTE_START], start_reg, end_reg);
  402930:	b292      	uxth	r2, r2
  402932:	4631      	mov	r1, r6
  402934:	1de0      	adds	r0, r4, #7
  402936:	4b0d      	ldr	r3, [pc, #52]	; (40296c <modbus_update+0xf4>)
  402938:	4798      	blx	r3
			break;
  40293a:	e7bd      	b.n	4028b8 <modbus_update+0x40>
  40293c:	004026c1 	.word	0x004026c1
  402940:	00402715 	.word	0x00402715
  402944:	00402609 	.word	0x00402609
  402948:	20006f3c 	.word	0x20006f3c
  40294c:	20006f3a 	.word	0x20006f3a
  402950:	20002930 	.word	0x20002930
  402954:	004026d9 	.word	0x004026d9
  402958:	00402af9 	.word	0x00402af9
  40295c:	00402991 	.word	0x00402991
  402960:	20000704 	.word	0x20000704
  402964:	00402571 	.word	0x00402571
  402968:	00402371 	.word	0x00402371
  40296c:	00402471 	.word	0x00402471

00402970 <TC0_Handler>:
void TC0_Handler(void)
{
	// If an overflow occurred, increase elapsed by 2000 ms
	// since this happens every 2 seconds
	// We read the register status to clear overflow flag
	if (REG_TC0_SR0 & TC_SR_COVFS)
  402970:	4b05      	ldr	r3, [pc, #20]	; (402988 <TC0_Handler+0x18>)
  402972:	681b      	ldr	r3, [r3, #0]
  402974:	f013 0f01 	tst.w	r3, #1
  402978:	d004      	beq.n	402984 <TC0_Handler+0x14>
	{
		elapsed_ms += 2000;
  40297a:	4a04      	ldr	r2, [pc, #16]	; (40298c <TC0_Handler+0x1c>)
  40297c:	6813      	ldr	r3, [r2, #0]
  40297e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
  402982:	6013      	str	r3, [r2, #0]
  402984:	4770      	bx	lr
  402986:	bf00      	nop
  402988:	40010020 	.word	0x40010020
  40298c:	20002708 	.word	0x20002708

00402990 <millis>:

uint32_t millis(void)
{
	// Return elapsed ms plus the current value of the timer
	// Since the timer ticks 32000 times a second, divide by 32 to get ms
	return elapsed_ms + ((REG_TC0_CV0) / 32);
  402990:	4b03      	ldr	r3, [pc, #12]	; (4029a0 <millis+0x10>)
  402992:	6818      	ldr	r0, [r3, #0]
  402994:	4b03      	ldr	r3, [pc, #12]	; (4029a4 <millis+0x14>)
  402996:	681b      	ldr	r3, [r3, #0]
}
  402998:	eb03 1050 	add.w	r0, r3, r0, lsr #5
  40299c:	4770      	bx	lr
  40299e:	bf00      	nop
  4029a0:	40010010 	.word	0x40010010
  4029a4:	20002708 	.word	0x20002708

004029a8 <portSetup>:

void portSetup(Uart *port485, const uint32_t baud, Pio *enPinPort, const uint32_t enPin, const uint16_t serialTimeout)
{
  4029a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4029ac:	b086      	sub	sp, #24
  4029ae:	460f      	mov	r7, r1
  4029b0:	4616      	mov	r6, r2
  4029b2:	461d      	mov	r5, r3
	timeout = serialTimeout;
  4029b4:	4b3d      	ldr	r3, [pc, #244]	; (402aac <portSetup+0x104>)
  4029b6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  4029ba:	801a      	strh	r2, [r3, #0]
	RS485Port = port485;
  4029bc:	4b3c      	ldr	r3, [pc, #240]	; (402ab0 <portSetup+0x108>)
  4029be:	6018      	str	r0, [r3, #0]

	if (RS485Port == UART0)
  4029c0:	4b3c      	ldr	r3, [pc, #240]	; (402ab4 <portSetup+0x10c>)
  4029c2:	4298      	cmp	r0, r3
  4029c4:	d046      	beq.n	402a54 <portSetup+0xac>
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA9);  // Sets PA9 to RX
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA10); // Sets PA10 to TX
		NVIC_EnableIRQ(UART0_IRQn);                       // enables interrupts related to this port
	}

	if (RS485Port == UART1)
  4029c6:	4b3a      	ldr	r3, [pc, #232]	; (402ab0 <portSetup+0x108>)
  4029c8:	681a      	ldr	r2, [r3, #0]
  4029ca:	4b3b      	ldr	r3, [pc, #236]	; (402ab8 <portSetup+0x110>)
  4029cc:	429a      	cmp	r2, r3
  4029ce:	d058      	beq.n	402a82 <portSetup+0xda>
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB2); // Sets PB2 to RX
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB3); // Sets PB3 to TX
		NVIC_EnableIRQ(UART1_IRQn);                      // enables interrupts related to this port
	}

	uint32_t clockSpeed = sysclk_get_peripheral_bus_hz(RS485Port); // gets CPU speed to for baud counter
  4029d0:	4c37      	ldr	r4, [pc, #220]	; (402ab0 <portSetup+0x108>)

	sam_uart_opt_t UARTSettings = {
  4029d2:	4b3a      	ldr	r3, [pc, #232]	; (402abc <portSetup+0x114>)
  4029d4:	9303      	str	r3, [sp, #12]
  4029d6:	9704      	str	r7, [sp, #16]
  4029d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4029dc:	9305      	str	r3, [sp, #20]
		.ul_baudrate = baud,                               // sets baudrate
		.ul_mode = UART_MR_CHMODE_NORMAL | UART_MR_PAR_NO, // sets to normal mode
		.ul_mck = clockSpeed                               // sets baud counter clock
	};

	uart_init(RS485Port, &UARTSettings); // init the UART port
  4029de:	a903      	add	r1, sp, #12
  4029e0:	6820      	ldr	r0, [r4, #0]
  4029e2:	4b37      	ldr	r3, [pc, #220]	; (402ac0 <portSetup+0x118>)
  4029e4:	4798      	blx	r3
	uart_enable_rx(RS485Port);
  4029e6:	6820      	ldr	r0, [r4, #0]
  4029e8:	4b36      	ldr	r3, [pc, #216]	; (402ac4 <portSetup+0x11c>)
  4029ea:	4798      	blx	r3
	uart_enable_tx(RS485Port);
  4029ec:	6820      	ldr	r0, [r4, #0]
  4029ee:	4b36      	ldr	r3, [pc, #216]	; (402ac8 <portSetup+0x120>)
  4029f0:	4798      	blx	r3
	uart_enable_interrupt(RS485Port, UART_IER_RXRDY); // Enable interrupt for incoming data
  4029f2:	2101      	movs	r1, #1
  4029f4:	6820      	ldr	r0, [r4, #0]
  4029f6:	4b35      	ldr	r3, [pc, #212]	; (402acc <portSetup+0x124>)
  4029f8:	4798      	blx	r3

	pio_set_output(enPinPort, enPin, LOW, DISABLE, DISABLE); // init the enable pin
  4029fa:	2200      	movs	r2, #0
  4029fc:	9200      	str	r2, [sp, #0]
  4029fe:	4613      	mov	r3, r2
  402a00:	4629      	mov	r1, r5
  402a02:	4630      	mov	r0, r6
  402a04:	4c32      	ldr	r4, [pc, #200]	; (402ad0 <portSetup+0x128>)
  402a06:	47a0      	blx	r4
	globalEnPinPort = enPinPort;
  402a08:	4b32      	ldr	r3, [pc, #200]	; (402ad4 <portSetup+0x12c>)
  402a0a:	601e      	str	r6, [r3, #0]
	globalEnPin = enPin;
  402a0c:	4b32      	ldr	r3, [pc, #200]	; (402ad8 <portSetup+0x130>)
  402a0e:	601d      	str	r5, [r3, #0]
  402a10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  402a14:	4b31      	ldr	r3, [pc, #196]	; (402adc <portSetup+0x134>)
  402a16:	601a      	str	r2, [r3, #0]
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  402a18:	4a31      	ldr	r2, [pc, #196]	; (402ae0 <portSetup+0x138>)
  402a1a:	6813      	ldr	r3, [r2, #0]
  402a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  402a20:	6013      	str	r3, [r2, #0]
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK5;
  402a22:	f5a2 2250 	sub.w	r2, r2, #851968	; 0xd0000
  402a26:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
  402a2a:	6813      	ldr	r3, [r2, #0]
  402a2c:	f043 0304 	orr.w	r3, r3, #4
  402a30:	6013      	str	r3, [r2, #0]
	REG_TC0_IER0 |= TC_IER_COVFS;
  402a32:	3220      	adds	r2, #32
  402a34:	6813      	ldr	r3, [r2, #0]
  402a36:	f043 0301 	orr.w	r3, r3, #1
  402a3a:	6013      	str	r3, [r2, #0]
	REG_TC0_CCR0 |= TC_CCR_CLKEN;
  402a3c:	4b29      	ldr	r3, [pc, #164]	; (402ae4 <portSetup+0x13c>)
  402a3e:	681a      	ldr	r2, [r3, #0]
  402a40:	f042 0201 	orr.w	r2, r2, #1
  402a44:	601a      	str	r2, [r3, #0]
	REG_TC0_CCR0 |= TC_CCR_SWTRG;
  402a46:	681a      	ldr	r2, [r3, #0]
  402a48:	f042 0204 	orr.w	r2, r2, #4
  402a4c:	601a      	str	r2, [r3, #0]

	init_timer(); // Enable timer for timeout purposes
}
  402a4e:	b006      	add	sp, #24
  402a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pmc_enable_periph_clk(ID_UART0);                  // Enable the clocks to the UART modules
  402a54:	2008      	movs	r0, #8
  402a56:	4b24      	ldr	r3, [pc, #144]	; (402ae8 <portSetup+0x140>)
  402a58:	4798      	blx	r3
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA9);  // Sets PA9 to RX
  402a5a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402af0 <portSetup+0x148>
  402a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
  402a62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a66:	4640      	mov	r0, r8
  402a68:	4c20      	ldr	r4, [pc, #128]	; (402aec <portSetup+0x144>)
  402a6a:	47a0      	blx	r4
		pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA10); // Sets PA10 to TX
  402a6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402a70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a74:	4640      	mov	r0, r8
  402a76:	47a0      	blx	r4
  402a78:	f44f 7280 	mov.w	r2, #256	; 0x100
  402a7c:	4b17      	ldr	r3, [pc, #92]	; (402adc <portSetup+0x134>)
  402a7e:	601a      	str	r2, [r3, #0]
  402a80:	e7a1      	b.n	4029c6 <portSetup+0x1e>
		pmc_enable_periph_clk(ID_UART1);                 // Enable the clocks to the UART modules
  402a82:	2009      	movs	r0, #9
  402a84:	4b18      	ldr	r3, [pc, #96]	; (402ae8 <portSetup+0x140>)
  402a86:	4798      	blx	r3
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB2); // Sets PB2 to RX
  402a88:	f8df 8068 	ldr.w	r8, [pc, #104]	; 402af4 <portSetup+0x14c>
  402a8c:	2204      	movs	r2, #4
  402a8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a92:	4640      	mov	r0, r8
  402a94:	4c15      	ldr	r4, [pc, #84]	; (402aec <portSetup+0x144>)
  402a96:	47a0      	blx	r4
		pio_set_peripheral(PIOB, PIO_PERIPH_A, PIO_PB3); // Sets PB3 to TX
  402a98:	2208      	movs	r2, #8
  402a9a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402a9e:	4640      	mov	r0, r8
  402aa0:	47a0      	blx	r4
  402aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
  402aa6:	4b0d      	ldr	r3, [pc, #52]	; (402adc <portSetup+0x134>)
  402aa8:	601a      	str	r2, [r3, #0]
  402aaa:	e791      	b.n	4029d0 <portSetup+0x28>
  402aac:	20006f50 	.word	0x20006f50
  402ab0:	20006f40 	.word	0x20006f40
  402ab4:	400e0600 	.word	0x400e0600
  402ab8:	400e0800 	.word	0x400e0800
  402abc:	07270e00 	.word	0x07270e00
  402ac0:	0040322b 	.word	0x0040322b
  402ac4:	00403267 	.word	0x00403267
  402ac8:	00403261 	.word	0x00403261
  402acc:	0040326d 	.word	0x0040326d
  402ad0:	00402e93 	.word	0x00402e93
  402ad4:	20006f44 	.word	0x20006f44
  402ad8:	20006f4c 	.word	0x20006f4c
  402adc:	e000e100 	.word	0xe000e100
  402ae0:	400e0410 	.word	0x400e0410
  402ae4:	40010000 	.word	0x40010000
  402ae8:	00402fbd 	.word	0x00402fbd
  402aec:	00402dd1 	.word	0x00402dd1
  402af0:	400e0e00 	.word	0x400e0e00
  402af4:	400e1000 	.word	0x400e1000

00402af8 <portWrite>:

void portWrite(uint8_t *packet, uint16_t packetSize)
{
  402af8:	b508      	push	{r3, lr}
	// write out response packet
	pio_set(globalEnPinPort, globalEnPin); // transceiver transmit enable
  402afa:	4b07      	ldr	r3, [pc, #28]	; (402b18 <portWrite+0x20>)
  402afc:	6819      	ldr	r1, [r3, #0]
  402afe:	4b07      	ldr	r3, [pc, #28]	; (402b1c <portWrite+0x24>)
  402b00:	6818      	ldr	r0, [r3, #0]
  402b02:	4b07      	ldr	r3, [pc, #28]	; (402b20 <portWrite+0x28>)
  402b04:	4798      	blx	r3
	transmitIndex = 0;
  402b06:	2200      	movs	r2, #0
  402b08:	4b06      	ldr	r3, [pc, #24]	; (402b24 <portWrite+0x2c>)
  402b0a:	801a      	strh	r2, [r3, #0]
	uart_enable_interrupt(RS485Port, UART_IMR_TXRDY);
  402b0c:	2102      	movs	r1, #2
  402b0e:	4b06      	ldr	r3, [pc, #24]	; (402b28 <portWrite+0x30>)
  402b10:	6818      	ldr	r0, [r3, #0]
  402b12:	4b06      	ldr	r3, [pc, #24]	; (402b2c <portWrite+0x34>)
  402b14:	4798      	blx	r3
  402b16:	bd08      	pop	{r3, pc}
  402b18:	20006f4c 	.word	0x20006f4c
  402b1c:	20006f44 	.word	0x20006f44
  402b20:	00402dc9 	.word	0x00402dc9
  402b24:	20006f48 	.word	0x20006f48
  402b28:	20006f40 	.word	0x20006f40
  402b2c:	0040326d 	.word	0x0040326d

00402b30 <UART_Handler>:
}

// interrupt handler for incoming data
void UART_Handler(void)
{
  402b30:	b510      	push	{r4, lr}
	if (uart_is_rx_ready(RS485Port))
  402b32:	4b1d      	ldr	r3, [pc, #116]	; (402ba8 <UART_Handler+0x78>)
  402b34:	6818      	ldr	r0, [r3, #0]
  402b36:	4b1d      	ldr	r3, [pc, #116]	; (402bac <UART_Handler+0x7c>)
  402b38:	4798      	blx	r3
  402b3a:	b980      	cbnz	r0, 402b5e <UART_Handler+0x2e>
	{                                                          // confirm there is data ready to be read
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head])); // move the data into the next index of the rx buffer
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);      // iterate the head through the ring buffer
	}
	else if (uart_is_tx_ready(RS485Port))
  402b3c:	4b1a      	ldr	r3, [pc, #104]	; (402ba8 <UART_Handler+0x78>)
  402b3e:	6818      	ldr	r0, [r3, #0]
  402b40:	4b1b      	ldr	r3, [pc, #108]	; (402bb0 <UART_Handler+0x80>)
  402b42:	4798      	blx	r3
  402b44:	b150      	cbz	r0, 402b5c <UART_Handler+0x2c>
	{
		if (transmitIndex < responsePacketSize)
  402b46:	4b1b      	ldr	r3, [pc, #108]	; (402bb4 <UART_Handler+0x84>)
  402b48:	881b      	ldrh	r3, [r3, #0]
  402b4a:	4a1b      	ldr	r2, [pc, #108]	; (402bb8 <UART_Handler+0x88>)
  402b4c:	8812      	ldrh	r2, [r2, #0]
  402b4e:	429a      	cmp	r2, r3
  402b50:	d813      	bhi.n	402b7a <UART_Handler+0x4a>
		{
			uart_write(RS485Port, responsePacket[transmitIndex]);
			transmitIndex++;
		}
		else if (uart_is_tx_empty(RS485Port))
  402b52:	4b15      	ldr	r3, [pc, #84]	; (402ba8 <UART_Handler+0x78>)
  402b54:	6818      	ldr	r0, [r3, #0]
  402b56:	4b19      	ldr	r3, [pc, #100]	; (402bbc <UART_Handler+0x8c>)
  402b58:	4798      	blx	r3
  402b5a:	b9c8      	cbnz	r0, 402b90 <UART_Handler+0x60>
  402b5c:	bd10      	pop	{r4, pc}
		uart_read(RS485Port, &(rxBuffer.data[rxBuffer.head])); // move the data into the next index of the rx buffer
  402b5e:	4c18      	ldr	r4, [pc, #96]	; (402bc0 <UART_Handler+0x90>)
  402b60:	8821      	ldrh	r1, [r4, #0]
  402b62:	3104      	adds	r1, #4
  402b64:	4421      	add	r1, r4
  402b66:	4b10      	ldr	r3, [pc, #64]	; (402ba8 <UART_Handler+0x78>)
  402b68:	6818      	ldr	r0, [r3, #0]
  402b6a:	4b16      	ldr	r3, [pc, #88]	; (402bc4 <UART_Handler+0x94>)
  402b6c:	4798      	blx	r3
		rxBuffer.head = PKT_WRAP_ARND(rxBuffer.head + 1);      // iterate the head through the ring buffer
  402b6e:	8823      	ldrh	r3, [r4, #0]
  402b70:	3301      	adds	r3, #1
  402b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
  402b76:	8023      	strh	r3, [r4, #0]
  402b78:	bd10      	pop	{r4, pc}
			uart_write(RS485Port, responsePacket[transmitIndex]);
  402b7a:	4a13      	ldr	r2, [pc, #76]	; (402bc8 <UART_Handler+0x98>)
  402b7c:	5cd1      	ldrb	r1, [r2, r3]
  402b7e:	4b0a      	ldr	r3, [pc, #40]	; (402ba8 <UART_Handler+0x78>)
  402b80:	6818      	ldr	r0, [r3, #0]
  402b82:	4b12      	ldr	r3, [pc, #72]	; (402bcc <UART_Handler+0x9c>)
  402b84:	4798      	blx	r3
			transmitIndex++;
  402b86:	4a0b      	ldr	r2, [pc, #44]	; (402bb4 <UART_Handler+0x84>)
  402b88:	8813      	ldrh	r3, [r2, #0]
  402b8a:	3301      	adds	r3, #1
  402b8c:	8013      	strh	r3, [r2, #0]
  402b8e:	bd10      	pop	{r4, pc}
		{
			pio_clear(globalEnPinPort, globalEnPin);
  402b90:	4b0f      	ldr	r3, [pc, #60]	; (402bd0 <UART_Handler+0xa0>)
  402b92:	6819      	ldr	r1, [r3, #0]
  402b94:	4b0f      	ldr	r3, [pc, #60]	; (402bd4 <UART_Handler+0xa4>)
  402b96:	6818      	ldr	r0, [r3, #0]
  402b98:	4b0f      	ldr	r3, [pc, #60]	; (402bd8 <UART_Handler+0xa8>)
  402b9a:	4798      	blx	r3
			uart_disable_interrupt(RS485Port, UART_IMR_TXRDY);
  402b9c:	2102      	movs	r1, #2
  402b9e:	4b02      	ldr	r3, [pc, #8]	; (402ba8 <UART_Handler+0x78>)
  402ba0:	6818      	ldr	r0, [r3, #0]
  402ba2:	4b0e      	ldr	r3, [pc, #56]	; (402bdc <UART_Handler+0xac>)
  402ba4:	4798      	blx	r3
		}
	}
}
  402ba6:	e7d9      	b.n	402b5c <UART_Handler+0x2c>
  402ba8:	20006f40 	.word	0x20006f40
  402bac:	00403285 	.word	0x00403285
  402bb0:	00403275 	.word	0x00403275
  402bb4:	20006f48 	.word	0x20006f48
  402bb8:	20006f3a 	.word	0x20006f3a
  402bbc:	0040327d 	.word	0x0040327d
  402bc0:	20004f34 	.word	0x20004f34
  402bc4:	0040329d 	.word	0x0040329d
  402bc8:	20002930 	.word	0x20002930
  402bcc:	0040328d 	.word	0x0040328d
  402bd0:	20006f4c 	.word	0x20006f4c
  402bd4:	20006f44 	.word	0x20006f44
  402bd8:	00402dcd 	.word	0x00402dcd
  402bdc:	00403271 	.word	0x00403271

00402be0 <UART0_Handler>:

// Regardless of what UART port triggers the interrupt, the behavior is the same
void UART0_Handler()
{
  402be0:	b508      	push	{r3, lr}
	UART_Handler();
  402be2:	4b01      	ldr	r3, [pc, #4]	; (402be8 <UART0_Handler+0x8>)
  402be4:	4798      	blx	r3
  402be6:	bd08      	pop	{r3, pc}
  402be8:	00402b31 	.word	0x00402b31

00402bec <stepper_setup>:
	pwm_channel_disable(PWM, stepper->pwm_channel_num);
	pwm_channel_init(PWM, &stepper->pwm_channel);
	pwm_channel_enable(PWM, stepper->pwm_channel_num);
}

void stepper_setup(stepper_s *stepper, uint32_t pwm_channel_num, Pio *dir_port, uint32_t dir_pin, Pio *step_port, uint32_t step_pin) {
  402bec:	b570      	push	{r4, r5, r6, lr}
  402bee:	b086      	sub	sp, #24
  402bf0:	4604      	mov	r4, r0
  402bf2:	4610      	mov	r0, r2
  402bf4:	461e      	mov	r6, r3
	stepper->position = 0;
  402bf6:	2500      	movs	r5, #0
  402bf8:	6025      	str	r5, [r4, #0]
	
	stepper->dir_port = dir_port;
  402bfa:	6062      	str	r2, [r4, #4]
	stepper->dir_pin = dir_pin;
  402bfc:	60a3      	str	r3, [r4, #8]
	stepper->step_port = step_port;
  402bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402c00:	60e3      	str	r3, [r4, #12]
	stepper->step_pin = step_pin;
  402c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402c04:	6123      	str	r3, [r4, #16]
	stepper->pwm_channel_num = pwm_channel_num;
  402c06:	6161      	str	r1, [r4, #20]
	
	pio_set_output(dir_port, dir_pin, HIGH, DISABLE, DISABLE);
  402c08:	9500      	str	r5, [sp, #0]
  402c0a:	462b      	mov	r3, r5
  402c0c:	2201      	movs	r2, #1
  402c0e:	4631      	mov	r1, r6
  402c10:	4e0a      	ldr	r6, [pc, #40]	; (402c3c <stepper_setup+0x50>)
  402c12:	47b0      	blx	r6
	pmc_enable_periph_clk(ID_PWM);
  402c14:	201f      	movs	r0, #31
  402c16:	4b0a      	ldr	r3, [pc, #40]	; (402c40 <stepper_setup+0x54>)
  402c18:	4798      	blx	r3
	pwm_channel_disable(PWM, stepper->pwm_channel_num);
  402c1a:	4e0a      	ldr	r6, [pc, #40]	; (402c44 <stepper_setup+0x58>)
  402c1c:	6961      	ldr	r1, [r4, #20]
  402c1e:	4630      	mov	r0, r6
  402c20:	4b09      	ldr	r3, [pc, #36]	; (402c48 <stepper_setup+0x5c>)
  402c22:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  402c24:	f242 7310 	movw	r3, #10000	; 0x2710
  402c28:	9303      	str	r3, [sp, #12]
  402c2a:	9504      	str	r5, [sp, #16]
  402c2c:	4b07      	ldr	r3, [pc, #28]	; (402c4c <stepper_setup+0x60>)
  402c2e:	9305      	str	r3, [sp, #20]
	pwm_init(PWM, &clock_setting);
  402c30:	a903      	add	r1, sp, #12
  402c32:	4630      	mov	r0, r6
  402c34:	4b06      	ldr	r3, [pc, #24]	; (402c50 <stepper_setup+0x64>)
  402c36:	4798      	blx	r3
	_init_pwm(stepper);
}
  402c38:	b006      	add	sp, #24
  402c3a:	bd70      	pop	{r4, r5, r6, pc}
  402c3c:	00402e93 	.word	0x00402e93
  402c40:	00402fbd 	.word	0x00402fbd
  402c44:	40020000 	.word	0x40020000
  402c48:	00403221 	.word	0x00403221
  402c4c:	07270e00 	.word	0x07270e00
  402c50:	004030ed 	.word	0x004030ed

00402c54 <stepper_set_velocity>:

void stepper_set_velocity(stepper_s *stepper, unsigned steps_per_sec, const stepper_dir dir) {
  402c54:	b5f0      	push	{r4, r5, r6, r7, lr}
  402c56:	b08b      	sub	sp, #44	; 0x2c
  402c58:	4606      	mov	r6, r0
  402c5a:	460c      	mov	r4, r1
	if (dir == STEPPER_DIR_CW) {
  402c5c:	2a01      	cmp	r2, #1
		pio_set(stepper->dir_port, stepper->dir_pin);
  402c5e:	6881      	ldr	r1, [r0, #8]
  402c60:	6840      	ldr	r0, [r0, #4]
  402c62:	bf0c      	ite	eq
  402c64:	4b1c      	ldreq	r3, [pc, #112]	; (402cd8 <stepper_set_velocity+0x84>)
	} else {
		pio_clear(stepper->dir_port, stepper->dir_pin);
  402c66:	4b1d      	ldrne	r3, [pc, #116]	; (402cdc <stepper_set_velocity+0x88>)
  402c68:	4798      	blx	r3
	int period = PWM_CLK_SPEED / (freq <= PWM_CLK_SPEED ? freq : PWM_CLK_SPEED);
  402c6a:	f242 7310 	movw	r3, #10000	; 0x2710
  402c6e:	429c      	cmp	r4, r3
  402c70:	bf28      	it	cs
  402c72:	461c      	movcs	r4, r3
  402c74:	fbb3 f4f4 	udiv	r4, r3, r4
	pwm_channel_t pwm_channel_instance = {
  402c78:	2228      	movs	r2, #40	; 0x28
  402c7a:	2100      	movs	r1, #0
  402c7c:	4668      	mov	r0, sp
  402c7e:	4b18      	ldr	r3, [pc, #96]	; (402ce0 <stepper_set_velocity+0x8c>)
  402c80:	4798      	blx	r3
		.channel = stepper->pwm_channel_num
  402c82:	6977      	ldr	r7, [r6, #20]
	stepper->pwm_channel = pwm_channel_instance;
  402c84:	9700      	str	r7, [sp, #0]
  402c86:	230b      	movs	r3, #11
  402c88:	9301      	str	r3, [sp, #4]
		.ul_duty = period * PWM_DUTY_CYCLE,
  402c8a:	4620      	mov	r0, r4
  402c8c:	4b15      	ldr	r3, [pc, #84]	; (402ce4 <stepper_set_velocity+0x90>)
  402c8e:	4798      	blx	r3
  402c90:	2200      	movs	r2, #0
  402c92:	4b15      	ldr	r3, [pc, #84]	; (402ce8 <stepper_set_velocity+0x94>)
  402c94:	4d15      	ldr	r5, [pc, #84]	; (402cec <stepper_set_velocity+0x98>)
  402c96:	47a8      	blx	r5
	pwm_channel_t pwm_channel_instance = {
  402c98:	4b15      	ldr	r3, [pc, #84]	; (402cf0 <stepper_set_velocity+0x9c>)
  402c9a:	4798      	blx	r3
  402c9c:	9003      	str	r0, [sp, #12]
	stepper->pwm_channel = pwm_channel_instance;
  402c9e:	9404      	str	r4, [sp, #16]
  402ca0:	f106 0518 	add.w	r5, r6, #24
  402ca4:	466c      	mov	r4, sp
  402ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  402cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  402cae:	e894 0003 	ldmia.w	r4, {r0, r1}
  402cb2:	e885 0003 	stmia.w	r5, {r0, r1}
	pwm_channel_disable(PWM, stepper->pwm_channel_num);
  402cb6:	4c0f      	ldr	r4, [pc, #60]	; (402cf4 <stepper_set_velocity+0xa0>)
  402cb8:	4639      	mov	r1, r7
  402cba:	4620      	mov	r0, r4
  402cbc:	4b0e      	ldr	r3, [pc, #56]	; (402cf8 <stepper_set_velocity+0xa4>)
  402cbe:	4798      	blx	r3
	pwm_channel_init(PWM, &stepper->pwm_channel);
  402cc0:	f106 0118 	add.w	r1, r6, #24
  402cc4:	4620      	mov	r0, r4
  402cc6:	4b0d      	ldr	r3, [pc, #52]	; (402cfc <stepper_set_velocity+0xa8>)
  402cc8:	4798      	blx	r3
	pwm_channel_enable(PWM, stepper->pwm_channel_num);
  402cca:	6971      	ldr	r1, [r6, #20]
  402ccc:	4620      	mov	r0, r4
  402cce:	4b0c      	ldr	r3, [pc, #48]	; (402d00 <stepper_set_velocity+0xac>)
  402cd0:	4798      	blx	r3
	}
	
	_pwm_set_freq(stepper, steps_per_sec);
}
  402cd2:	b00b      	add	sp, #44	; 0x2c
  402cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402cd6:	bf00      	nop
  402cd8:	00402dc9 	.word	0x00402dc9
  402cdc:	00402dcd 	.word	0x00402dcd
  402ce0:	00403e7d 	.word	0x00403e7d
  402ce4:	004038fd 	.word	0x004038fd
  402ce8:	3fe00000 	.word	0x3fe00000
  402cec:	004039c9 	.word	0x004039c9
  402cf0:	00403ded 	.word	0x00403ded
  402cf4:	40020000 	.word	0x40020000
  402cf8:	00403221 	.word	0x00403221
  402cfc:	00403131 	.word	0x00403131
  402d00:	00403217 	.word	0x00403217

00402d04 <stepper_stop>:
	pwm_channel_disable(PWM, stepper->pwm_channel_num);
	
	stepper->position = pos;
}

void stepper_stop(stepper_s *stepper) {
  402d04:	b508      	push	{r3, lr}
	stepper_set_velocity(stepper, 0, STEPPER_DIR_CW);
  402d06:	2201      	movs	r2, #1
  402d08:	2100      	movs	r1, #0
  402d0a:	4b01      	ldr	r3, [pc, #4]	; (402d10 <stepper_stop+0xc>)
  402d0c:	4798      	blx	r3
  402d0e:	bd08      	pop	{r3, pc}
  402d10:	00402c55 	.word	0x00402c55

00402d14 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402d14:	b510      	push	{r4, lr}
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  402d16:	2020      	movs	r0, #32
  402d18:	4b0a      	ldr	r3, [pc, #40]	; (402d44 <sysclk_enable_usb+0x30>)
  402d1a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402d1c:	4c0a      	ldr	r4, [pc, #40]	; (402d48 <sysclk_enable_usb+0x34>)
  402d1e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402d20:	2800      	cmp	r0, #0
  402d22:	d0fc      	beq.n	402d1e <sysclk_enable_usb+0xa>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  402d24:	4b09      	ldr	r3, [pc, #36]	; (402d4c <sysclk_enable_usb+0x38>)
  402d26:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  402d28:	4a09      	ldr	r2, [pc, #36]	; (402d50 <sysclk_enable_usb+0x3c>)
  402d2a:	4b0a      	ldr	r3, [pc, #40]	; (402d54 <sysclk_enable_usb+0x40>)
  402d2c:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  402d2e:	4c0a      	ldr	r4, [pc, #40]	; (402d58 <sysclk_enable_usb+0x44>)
  402d30:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402d32:	2800      	cmp	r0, #0
  402d34:	d0fc      	beq.n	402d30 <sysclk_enable_usb+0x1c>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  402d36:	2001      	movs	r0, #1
  402d38:	4b08      	ldr	r3, [pc, #32]	; (402d5c <sysclk_enable_usb+0x48>)
  402d3a:	4798      	blx	r3
		pmc_enable_udpck();
  402d3c:	4b08      	ldr	r3, [pc, #32]	; (402d60 <sysclk_enable_usb+0x4c>)
  402d3e:	4798      	blx	r3
  402d40:	bd10      	pop	{r4, pc}
  402d42:	bf00      	nop
  402d44:	00402f25 	.word	0x00402f25
  402d48:	00402f71 	.word	0x00402f71
  402d4c:	00402fa1 	.word	0x00402fa1
  402d50:	000f3f02 	.word	0x000f3f02
  402d54:	400e0400 	.word	0x400e0400
  402d58:	00402fad 	.word	0x00402fad
  402d5c:	00403065 	.word	0x00403065
  402d60:	00403079 	.word	0x00403079

00402d64 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402d64:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402d66:	480e      	ldr	r0, [pc, #56]	; (402da0 <sysclk_init+0x3c>)
  402d68:	4b0e      	ldr	r3, [pc, #56]	; (402da4 <sysclk_init+0x40>)
  402d6a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  402d6c:	2020      	movs	r0, #32
  402d6e:	4b0e      	ldr	r3, [pc, #56]	; (402da8 <sysclk_init+0x44>)
  402d70:	4798      	blx	r3
		return pmc_osc_is_ready_mainck();
  402d72:	4c0e      	ldr	r4, [pc, #56]	; (402dac <sysclk_init+0x48>)
  402d74:	47a0      	blx	r4
  402d76:	2800      	cmp	r0, #0
  402d78:	d0fc      	beq.n	402d74 <sysclk_init+0x10>
		pmc_disable_pllack(); // Always stop PLL first!
  402d7a:	4b0d      	ldr	r3, [pc, #52]	; (402db0 <sysclk_init+0x4c>)
  402d7c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402d7e:	4a0d      	ldr	r2, [pc, #52]	; (402db4 <sysclk_init+0x50>)
  402d80:	4b0d      	ldr	r3, [pc, #52]	; (402db8 <sysclk_init+0x54>)
  402d82:	629a      	str	r2, [r3, #40]	; 0x28
		return pmc_is_locked_pllack();
  402d84:	4c0d      	ldr	r4, [pc, #52]	; (402dbc <sysclk_init+0x58>)
  402d86:	47a0      	blx	r4
  402d88:	2800      	cmp	r0, #0
  402d8a:	d0fc      	beq.n	402d86 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402d8c:	2010      	movs	r0, #16
  402d8e:	4b0c      	ldr	r3, [pc, #48]	; (402dc0 <sysclk_init+0x5c>)
  402d90:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402d92:	4b0c      	ldr	r3, [pc, #48]	; (402dc4 <sysclk_init+0x60>)
  402d94:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402d96:	4802      	ldr	r0, [pc, #8]	; (402da0 <sysclk_init+0x3c>)
  402d98:	4b02      	ldr	r3, [pc, #8]	; (402da4 <sysclk_init+0x40>)
  402d9a:	4798      	blx	r3
  402d9c:	bd10      	pop	{r4, pc}
  402d9e:	bf00      	nop
  402da0:	07270e00 	.word	0x07270e00
  402da4:	0040350d 	.word	0x0040350d
  402da8:	00402f25 	.word	0x00402f25
  402dac:	00402f71 	.word	0x00402f71
  402db0:	00402f81 	.word	0x00402f81
  402db4:	20133f01 	.word	0x20133f01
  402db8:	400e0400 	.word	0x400e0400
  402dbc:	00402f91 	.word	0x00402f91
  402dc0:	00402ec1 	.word	0x00402ec1
  402dc4:	004033fd 	.word	0x004033fd

00402dc8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402dc8:	6301      	str	r1, [r0, #48]	; 0x30
  402dca:	4770      	bx	lr

00402dcc <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402dcc:	6341      	str	r1, [r0, #52]	; 0x34
  402dce:	4770      	bx	lr

00402dd0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402dd0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402dd2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402dd6:	d039      	beq.n	402e4c <pio_set_peripheral+0x7c>
  402dd8:	d813      	bhi.n	402e02 <pio_set_peripheral+0x32>
  402dda:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402dde:	d025      	beq.n	402e2c <pio_set_peripheral+0x5c>
  402de0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402de4:	d10a      	bne.n	402dfc <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402de6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402de8:	4313      	orrs	r3, r2
  402dea:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402dec:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402dee:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402df0:	400b      	ands	r3, r1
  402df2:	ea23 0302 	bic.w	r3, r3, r2
  402df6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402df8:	6042      	str	r2, [r0, #4]
  402dfa:	4770      	bx	lr
	switch (ul_type) {
  402dfc:	2900      	cmp	r1, #0
  402dfe:	d1fb      	bne.n	402df8 <pio_set_peripheral+0x28>
  402e00:	4770      	bx	lr
  402e02:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402e06:	d020      	beq.n	402e4a <pio_set_peripheral+0x7a>
  402e08:	d809      	bhi.n	402e1e <pio_set_peripheral+0x4e>
  402e0a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402e0e:	d1f3      	bne.n	402df8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e10:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402e12:	4313      	orrs	r3, r2
  402e14:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402e16:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402e18:	4313      	orrs	r3, r2
  402e1a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402e1c:	e7ec      	b.n	402df8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  402e1e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402e22:	d012      	beq.n	402e4a <pio_set_peripheral+0x7a>
  402e24:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402e28:	d00f      	beq.n	402e4a <pio_set_peripheral+0x7a>
  402e2a:	e7e5      	b.n	402df8 <pio_set_peripheral+0x28>
{
  402e2c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e2e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402e30:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402e32:	43d3      	mvns	r3, r2
  402e34:	4021      	ands	r1, r4
  402e36:	461c      	mov	r4, r3
  402e38:	4019      	ands	r1, r3
  402e3a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402e3c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402e3e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402e40:	400b      	ands	r3, r1
  402e42:	4023      	ands	r3, r4
  402e44:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  402e46:	6042      	str	r2, [r0, #4]
}
  402e48:	bc10      	pop	{r4}
  402e4a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  402e4c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402e4e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402e50:	400b      	ands	r3, r1
  402e52:	ea23 0302 	bic.w	r3, r3, r2
  402e56:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  402e58:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402e5a:	4313      	orrs	r3, r2
  402e5c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402e5e:	e7cb      	b.n	402df8 <pio_set_peripheral+0x28>

00402e60 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402e60:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402e62:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  402e66:	bf14      	ite	ne
  402e68:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  402e6a:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402e6c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  402e70:	bf14      	ite	ne
  402e72:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  402e74:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  402e76:	f012 0f02 	tst.w	r2, #2
  402e7a:	d107      	bne.n	402e8c <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  402e7c:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  402e80:	bf18      	it	ne
  402e82:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  402e86:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402e88:	6001      	str	r1, [r0, #0]
  402e8a:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  402e8c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402e90:	e7f9      	b.n	402e86 <pio_set_input+0x26>

00402e92 <pio_set_output>:
{
  402e92:	b410      	push	{r4}
  402e94:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  402e96:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  402e98:	b944      	cbnz	r4, 402eac <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  402e9a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  402e9c:	b143      	cbz	r3, 402eb0 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  402e9e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  402ea0:	b942      	cbnz	r2, 402eb4 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  402ea2:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  402ea4:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402ea6:	6001      	str	r1, [r0, #0]
}
  402ea8:	bc10      	pop	{r4}
  402eaa:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  402eac:	6641      	str	r1, [r0, #100]	; 0x64
  402eae:	e7f5      	b.n	402e9c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  402eb0:	6541      	str	r1, [r0, #84]	; 0x54
  402eb2:	e7f5      	b.n	402ea0 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  402eb4:	6301      	str	r1, [r0, #48]	; 0x30
  402eb6:	e7f5      	b.n	402ea4 <pio_set_output+0x12>

00402eb8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402eb8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402eba:	4770      	bx	lr

00402ebc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402ebc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402ebe:	4770      	bx	lr

00402ec0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402ec0:	4a17      	ldr	r2, [pc, #92]	; (402f20 <pmc_switch_mck_to_pllack+0x60>)
  402ec2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402ec8:	4318      	orrs	r0, r3
  402eca:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ecc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402ece:	f013 0f08 	tst.w	r3, #8
  402ed2:	d10a      	bne.n	402eea <pmc_switch_mck_to_pllack+0x2a>
  402ed4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402ed8:	4911      	ldr	r1, [pc, #68]	; (402f20 <pmc_switch_mck_to_pllack+0x60>)
  402eda:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402edc:	f012 0f08 	tst.w	r2, #8
  402ee0:	d103      	bne.n	402eea <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402ee2:	3b01      	subs	r3, #1
  402ee4:	d1f9      	bne.n	402eda <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  402ee6:	2001      	movs	r0, #1
  402ee8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402eea:	4a0d      	ldr	r2, [pc, #52]	; (402f20 <pmc_switch_mck_to_pllack+0x60>)
  402eec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402eee:	f023 0303 	bic.w	r3, r3, #3
  402ef2:	f043 0302 	orr.w	r3, r3, #2
  402ef6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ef8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402efa:	f013 0f08 	tst.w	r3, #8
  402efe:	d10a      	bne.n	402f16 <pmc_switch_mck_to_pllack+0x56>
  402f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402f04:	4906      	ldr	r1, [pc, #24]	; (402f20 <pmc_switch_mck_to_pllack+0x60>)
  402f06:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402f08:	f012 0f08 	tst.w	r2, #8
  402f0c:	d105      	bne.n	402f1a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402f0e:	3b01      	subs	r3, #1
  402f10:	d1f9      	bne.n	402f06 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  402f12:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402f14:	4770      	bx	lr
	return 0;
  402f16:	2000      	movs	r0, #0
  402f18:	4770      	bx	lr
  402f1a:	2000      	movs	r0, #0
  402f1c:	4770      	bx	lr
  402f1e:	bf00      	nop
  402f20:	400e0400 	.word	0x400e0400

00402f24 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402f24:	4911      	ldr	r1, [pc, #68]	; (402f6c <pmc_switch_mainck_to_fastrc+0x48>)
  402f26:	6a0a      	ldr	r2, [r1, #32]
  402f28:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  402f2c:	f042 0208 	orr.w	r2, r2, #8
  402f30:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402f32:	460a      	mov	r2, r1
  402f34:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f36:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  402f3a:	d0fb      	beq.n	402f34 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402f3c:	4a0b      	ldr	r2, [pc, #44]	; (402f6c <pmc_switch_mainck_to_fastrc+0x48>)
  402f3e:	6a13      	ldr	r3, [r2, #32]
  402f40:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402f48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402f4c:	4318      	orrs	r0, r3
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402f4e:	6210      	str	r0, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402f50:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402f52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  402f56:	d0fb      	beq.n	402f50 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402f58:	4a04      	ldr	r2, [pc, #16]	; (402f6c <pmc_switch_mainck_to_fastrc+0x48>)
  402f5a:	6a13      	ldr	r3, [r2, #32]
  402f5c:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  402f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402f64:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402f68:	6213      	str	r3, [r2, #32]
  402f6a:	4770      	bx	lr
  402f6c:	400e0400 	.word	0x400e0400

00402f70 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402f70:	4b02      	ldr	r3, [pc, #8]	; (402f7c <pmc_osc_is_ready_mainck+0xc>)
  402f72:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402f74:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402f78:	4770      	bx	lr
  402f7a:	bf00      	nop
  402f7c:	400e0400 	.word	0x400e0400

00402f80 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402f80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402f84:	4b01      	ldr	r3, [pc, #4]	; (402f8c <pmc_disable_pllack+0xc>)
  402f86:	629a      	str	r2, [r3, #40]	; 0x28
  402f88:	4770      	bx	lr
  402f8a:	bf00      	nop
  402f8c:	400e0400 	.word	0x400e0400

00402f90 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402f90:	4b02      	ldr	r3, [pc, #8]	; (402f9c <pmc_is_locked_pllack+0xc>)
  402f92:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402f94:	f000 0002 	and.w	r0, r0, #2
  402f98:	4770      	bx	lr
  402f9a:	bf00      	nop
  402f9c:	400e0400 	.word	0x400e0400

00402fa0 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  402fa0:	2200      	movs	r2, #0
  402fa2:	4b01      	ldr	r3, [pc, #4]	; (402fa8 <pmc_disable_pllbck+0x8>)
  402fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  402fa6:	4770      	bx	lr
  402fa8:	400e0400 	.word	0x400e0400

00402fac <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  402fac:	4b02      	ldr	r3, [pc, #8]	; (402fb8 <pmc_is_locked_pllbck+0xc>)
  402fae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402fb0:	f000 0004 	and.w	r0, r0, #4
  402fb4:	4770      	bx	lr
  402fb6:	bf00      	nop
  402fb8:	400e0400 	.word	0x400e0400

00402fbc <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402fbc:	2822      	cmp	r0, #34	; 0x22
  402fbe:	d81e      	bhi.n	402ffe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402fc0:	281f      	cmp	r0, #31
  402fc2:	d80c      	bhi.n	402fde <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402fc4:	4b11      	ldr	r3, [pc, #68]	; (40300c <pmc_enable_periph_clk+0x50>)
  402fc6:	699a      	ldr	r2, [r3, #24]
  402fc8:	2301      	movs	r3, #1
  402fca:	4083      	lsls	r3, r0
  402fcc:	4393      	bics	r3, r2
  402fce:	d018      	beq.n	403002 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402fd0:	2301      	movs	r3, #1
  402fd2:	fa03 f000 	lsl.w	r0, r3, r0
  402fd6:	4b0d      	ldr	r3, [pc, #52]	; (40300c <pmc_enable_periph_clk+0x50>)
  402fd8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402fda:	2000      	movs	r0, #0
  402fdc:	4770      	bx	lr
		ul_id -= 32;
  402fde:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402fe0:	4b0a      	ldr	r3, [pc, #40]	; (40300c <pmc_enable_periph_clk+0x50>)
  402fe2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402fe6:	2301      	movs	r3, #1
  402fe8:	4083      	lsls	r3, r0
  402fea:	4393      	bics	r3, r2
  402fec:	d00b      	beq.n	403006 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402fee:	2301      	movs	r3, #1
  402ff0:	fa03 f000 	lsl.w	r0, r3, r0
  402ff4:	4b05      	ldr	r3, [pc, #20]	; (40300c <pmc_enable_periph_clk+0x50>)
  402ff6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  402ffa:	2000      	movs	r0, #0
  402ffc:	4770      	bx	lr
		return 1;
  402ffe:	2001      	movs	r0, #1
  403000:	4770      	bx	lr
	return 0;
  403002:	2000      	movs	r0, #0
  403004:	4770      	bx	lr
  403006:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403008:	4770      	bx	lr
  40300a:	bf00      	nop
  40300c:	400e0400 	.word	0x400e0400

00403010 <pmc_disable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  403010:	2822      	cmp	r0, #34	; 0x22
  403012:	d822      	bhi.n	40305a <pmc_disable_periph_clk+0x4a>
		return 1;
	}

	if (ul_id < 32) {
  403014:	281f      	cmp	r0, #31
  403016:	d80e      	bhi.n	403036 <pmc_disable_periph_clk+0x26>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  403018:	4b11      	ldr	r3, [pc, #68]	; (403060 <pmc_disable_periph_clk+0x50>)
  40301a:	699a      	ldr	r2, [r3, #24]
  40301c:	2301      	movs	r3, #1
  40301e:	4083      	lsls	r3, r0
  403020:	4393      	bics	r3, r2
  403022:	d001      	beq.n	403028 <pmc_disable_periph_clk+0x18>
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  403024:	2000      	movs	r0, #0
  403026:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
  403028:	2301      	movs	r3, #1
  40302a:	fa03 f000 	lsl.w	r0, r3, r0
  40302e:	4b0c      	ldr	r3, [pc, #48]	; (403060 <pmc_disable_periph_clk+0x50>)
  403030:	6158      	str	r0, [r3, #20]
	return 0;
  403032:	2000      	movs	r0, #0
  403034:	4770      	bx	lr
		ul_id -= 32;
  403036:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  403038:	4b09      	ldr	r3, [pc, #36]	; (403060 <pmc_disable_periph_clk+0x50>)
  40303a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40303e:	2301      	movs	r3, #1
  403040:	4083      	lsls	r3, r0
  403042:	4393      	bics	r3, r2
  403044:	d001      	beq.n	40304a <pmc_disable_periph_clk+0x3a>
	return 0;
  403046:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  403048:	4770      	bx	lr
			PMC->PMC_PCDR1 = 1 << ul_id;
  40304a:	2301      	movs	r3, #1
  40304c:	fa03 f000 	lsl.w	r0, r3, r0
  403050:	4b03      	ldr	r3, [pc, #12]	; (403060 <pmc_disable_periph_clk+0x50>)
  403052:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	return 0;
  403056:	2000      	movs	r0, #0
  403058:	4770      	bx	lr
		return 1;
  40305a:	2001      	movs	r0, #1
  40305c:	4770      	bx	lr
  40305e:	bf00      	nop
  403060:	400e0400 	.word	0x400e0400

00403064 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  403064:	0200      	lsls	r0, r0, #8
  403066:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  40306a:	f040 0001 	orr.w	r0, r0, #1
  40306e:	4b01      	ldr	r3, [pc, #4]	; (403074 <pmc_switch_udpck_to_pllbck+0x10>)
  403070:	6398      	str	r0, [r3, #56]	; 0x38
  403072:	4770      	bx	lr
  403074:	400e0400 	.word	0x400e0400

00403078 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  403078:	2280      	movs	r2, #128	; 0x80
  40307a:	4b01      	ldr	r3, [pc, #4]	; (403080 <pmc_enable_udpck+0x8>)
  40307c:	601a      	str	r2, [r3, #0]
  40307e:	4770      	bx	lr
  403080:	400e0400 	.word	0x400e0400

00403084 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  403084:	4b03      	ldr	r3, [pc, #12]	; (403094 <pmc_set_fast_startup_input+0x10>)
  403086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  403088:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  40308c:	4310      	orrs	r0, r2
  40308e:	6718      	str	r0, [r3, #112]	; 0x70
  403090:	4770      	bx	lr
  403092:	bf00      	nop
  403094:	400e0400 	.word	0x400e0400

00403098 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  403098:	b4f0      	push	{r4, r5, r6, r7}
  40309a:	b08c      	sub	sp, #48	; 0x30
  40309c:	4607      	mov	r7, r0
  40309e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4030a0:	ac01      	add	r4, sp, #4
  4030a2:	4d11      	ldr	r5, [pc, #68]	; (4030e8 <pwm_clocks_generate+0x50>)
  4030a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4030a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4030a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4030aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4030ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4030b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4030b4:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4030b6:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4030b8:	f852 0b04 	ldr.w	r0, [r2], #4
  4030bc:	fbb6 f0f0 	udiv	r0, r6, r0
  4030c0:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4030c4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4030c8:	d907      	bls.n	4030da <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  4030ca:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4030cc:	2b0b      	cmp	r3, #11
  4030ce:	d1f3      	bne.n	4030b8 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4030d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  4030d4:	b00c      	add	sp, #48	; 0x30
  4030d6:	bcf0      	pop	{r4, r5, r6, r7}
  4030d8:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4030da:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  4030dc:	bf94      	ite	ls
  4030de:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  4030e2:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  4030e6:	e7f5      	b.n	4030d4 <pwm_clocks_generate+0x3c>
  4030e8:	00404038 	.word	0x00404038

004030ec <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4030ec:	b570      	push	{r4, r5, r6, lr}
  4030ee:	4606      	mov	r6, r0
  4030f0:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4030f2:	680c      	ldr	r4, [r1, #0]
  4030f4:	b144      	cbz	r4, 403108 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4030f6:	6889      	ldr	r1, [r1, #8]
  4030f8:	4620      	mov	r0, r4
  4030fa:	4b0c      	ldr	r3, [pc, #48]	; (40312c <pwm_init+0x40>)
  4030fc:	4798      	blx	r3
  4030fe:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  403100:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403104:	4298      	cmp	r0, r3
  403106:	d00c      	beq.n	403122 <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  403108:	6868      	ldr	r0, [r5, #4]
  40310a:	b140      	cbz	r0, 40311e <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40310c:	68a9      	ldr	r1, [r5, #8]
  40310e:	4b07      	ldr	r3, [pc, #28]	; (40312c <pwm_init+0x40>)
  403110:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  403112:	f64f 73ff 	movw	r3, #65535	; 0xffff
  403116:	4298      	cmp	r0, r3
  403118:	d005      	beq.n	403126 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  40311a:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  40311e:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  403120:	2400      	movs	r4, #0
}
  403122:	4620      	mov	r0, r4
  403124:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  403126:	4604      	mov	r4, r0
  403128:	e7fb      	b.n	403122 <pwm_init+0x36>
  40312a:	bf00      	nop
  40312c:	00403099 	.word	0x00403099

00403130 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  403130:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  403132:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403134:	684b      	ldr	r3, [r1, #4]
  403136:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  40313a:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40313c:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  40313e:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403140:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  403142:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403144:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  403148:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40314a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  40314e:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403150:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  403154:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403156:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  40315a:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40315e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  403162:	68cb      	ldr	r3, [r1, #12]
  403164:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  403168:	690b      	ldr	r3, [r1, #16]
  40316a:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  40316e:	7d8b      	ldrb	r3, [r1, #22]
  403170:	b13b      	cbz	r3, 403182 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  403172:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  403174:	8b4b      	ldrh	r3, [r1, #26]
  403176:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  40317a:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  40317e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  403182:	6c85      	ldr	r5, [r0, #72]	; 0x48
  403184:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  403188:	4093      	lsls	r3, r2
  40318a:	43db      	mvns	r3, r3
  40318c:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  40318e:	7fcc      	ldrb	r4, [r1, #31]
  403190:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  403194:	7f8c      	ldrb	r4, [r1, #30]
  403196:	4094      	lsls	r4, r2
  403198:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  40319c:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  40319e:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  4031a0:	6c44      	ldr	r4, [r0, #68]	; 0x44
  4031a2:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  4031a4:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  4031a8:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4031ac:	f891 4020 	ldrb.w	r4, [r1, #32]
  4031b0:	4094      	lsls	r4, r2
  4031b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4031b6:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  4031b8:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4031ba:	2301      	movs	r3, #1
  4031bc:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  4031be:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  4031c2:	b31c      	cbz	r4, 40320c <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
  4031c4:	6a04      	ldr	r4, [r0, #32]
  4031c6:	431c      	orrs	r4, r3
  4031c8:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4031ca:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  4031ce:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4031d0:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4031d2:	bf0c      	ite	eq
  4031d4:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4031d6:	439c      	bicne	r4, r3
  4031d8:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4031da:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4031de:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  4031e0:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4031e2:	bf0c      	ite	eq
  4031e4:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  4031e8:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
  4031ec:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4031ee:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4031f0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4031f2:	23ff      	movs	r3, #255	; 0xff
  4031f4:	4093      	lsls	r3, r2
  4031f6:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4031fa:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  4031fe:	fa03 f202 	lsl.w	r2, r3, r2
  403202:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  403204:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  403206:	2000      	movs	r0, #0
  403208:	bc70      	pop	{r4, r5, r6}
  40320a:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  40320c:	6a04      	ldr	r4, [r0, #32]
  40320e:	ea24 0403 	bic.w	r4, r4, r3
  403212:	6204      	str	r4, [r0, #32]
  403214:	e7d9      	b.n	4031ca <pwm_channel_init+0x9a>

00403216 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  403216:	2301      	movs	r3, #1
  403218:	fa03 f101 	lsl.w	r1, r3, r1
  40321c:	6041      	str	r1, [r0, #4]
  40321e:	4770      	bx	lr

00403220 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  403220:	2301      	movs	r3, #1
  403222:	fa03 f101 	lsl.w	r1, r3, r1
  403226:	6081      	str	r1, [r0, #8]
  403228:	4770      	bx	lr

0040322a <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40322a:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40322c:	23ac      	movs	r3, #172	; 0xac
  40322e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  403230:	680b      	ldr	r3, [r1, #0]
  403232:	684a      	ldr	r2, [r1, #4]
  403234:	fbb3 f3f2 	udiv	r3, r3, r2
  403238:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40323a:	1e5c      	subs	r4, r3, #1
  40323c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  403240:	4294      	cmp	r4, r2
  403242:	d80b      	bhi.n	40325c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  403244:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  403246:	688b      	ldr	r3, [r1, #8]
  403248:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40324a:	f240 2302 	movw	r3, #514	; 0x202
  40324e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  403252:	2350      	movs	r3, #80	; 0x50
  403254:	6003      	str	r3, [r0, #0]

	return 0;
  403256:	2000      	movs	r0, #0
}
  403258:	bc10      	pop	{r4}
  40325a:	4770      	bx	lr
		return 1;
  40325c:	2001      	movs	r0, #1
  40325e:	e7fb      	b.n	403258 <uart_init+0x2e>

00403260 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  403260:	2340      	movs	r3, #64	; 0x40
  403262:	6003      	str	r3, [r0, #0]
  403264:	4770      	bx	lr

00403266 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  403266:	2310      	movs	r3, #16
  403268:	6003      	str	r3, [r0, #0]
  40326a:	4770      	bx	lr

0040326c <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  40326c:	6081      	str	r1, [r0, #8]
  40326e:	4770      	bx	lr

00403270 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  403270:	60c1      	str	r1, [r0, #12]
  403272:	4770      	bx	lr

00403274 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  403274:	6940      	ldr	r0, [r0, #20]
}
  403276:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40327a:	4770      	bx	lr

0040327c <uart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  40327c:	6940      	ldr	r0, [r0, #20]
}
  40327e:	f3c0 2040 	ubfx	r0, r0, #9, #1
  403282:	4770      	bx	lr

00403284 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  403284:	6940      	ldr	r0, [r0, #20]
}
  403286:	f000 0001 	and.w	r0, r0, #1
  40328a:	4770      	bx	lr

0040328c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40328c:	6943      	ldr	r3, [r0, #20]
  40328e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  403292:	bf1a      	itte	ne
  403294:	61c1      	strne	r1, [r0, #28]
	return 0;
  403296:	2000      	movne	r0, #0
		return 1;
  403298:	2001      	moveq	r0, #1
}
  40329a:	4770      	bx	lr

0040329c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40329c:	6943      	ldr	r3, [r0, #20]
  40329e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4032a2:	bf1d      	ittte	ne
  4032a4:	6983      	ldrne	r3, [r0, #24]
  4032a6:	700b      	strbne	r3, [r1, #0]
	return 0;
  4032a8:	2000      	movne	r0, #0
		return 1;
  4032aa:	2001      	moveq	r0, #1
}
  4032ac:	4770      	bx	lr
	...

004032b0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4032b0:	4b02      	ldr	r3, [pc, #8]	; (4032bc <pmc_is_wakeup_clocks_restored+0xc>)
  4032b2:	7818      	ldrb	r0, [r3, #0]
}
  4032b4:	f080 0001 	eor.w	r0, r0, #1
  4032b8:	4770      	bx	lr
  4032ba:	bf00      	nop
  4032bc:	2000270c 	.word	0x2000270c

004032c0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4032c0:	b570      	push	{r4, r5, r6, lr}
  4032c2:	b082      	sub	sp, #8
	WDT->WDT_MR |= WDT_MR_WDDIS; // Disable watchdog timer to prevent uC resetting every 15 seconds :)
  4032c4:	4a1b      	ldr	r2, [pc, #108]	; (403334 <board_init+0x74>)
  4032c6:	6853      	ldr	r3, [r2, #4]
  4032c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4032cc:	6053      	str	r3, [r2, #4]
	
	//Enable USB Comm port so we can send debug data over serial to a computer (could be useful)
	//Configuration for this is in conf_usb.h
	udc_start();
  4032ce:	4b1a      	ldr	r3, [pc, #104]	; (403338 <board_init+0x78>)
  4032d0:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);			//This enables GPIO Outpus, (necessary)
  4032d2:	200b      	movs	r0, #11
  4032d4:	4c19      	ldr	r4, [pc, #100]	; (40333c <board_init+0x7c>)
  4032d6:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  4032d8:	200c      	movs	r0, #12
  4032da:	47a0      	blx	r4
	
	pio_set_input(LSw1_PORT,LSw1_PIN,PIO_DEBOUNCE);
  4032dc:	4d18      	ldr	r5, [pc, #96]	; (403340 <board_init+0x80>)
  4032de:	2208      	movs	r2, #8
  4032e0:	2101      	movs	r1, #1
  4032e2:	4628      	mov	r0, r5
  4032e4:	4c17      	ldr	r4, [pc, #92]	; (403344 <board_init+0x84>)
  4032e6:	47a0      	blx	r4
	pio_set_input(LSw2_PORT,LSw2_PIN,PIO_DEBOUNCE);
  4032e8:	2208      	movs	r2, #8
  4032ea:	2102      	movs	r1, #2
  4032ec:	4628      	mov	r0, r5
  4032ee:	47a0      	blx	r4
	pio_set_input(LSw3_PORT,LSw3_PIN,PIO_DEBOUNCE);
  4032f0:	2208      	movs	r2, #8
  4032f2:	2104      	movs	r1, #4
  4032f4:	4628      	mov	r0, r5
  4032f6:	47a0      	blx	r4
	pio_set_input(LSw4_PORT,LSw4_PIN,PIO_DEBOUNCE);
  4032f8:	2208      	movs	r2, #8
  4032fa:	4611      	mov	r1, r2
  4032fc:	4628      	mov	r0, r5
  4032fe:	47a0      	blx	r4
	
	pio_set_output(Lazer_PORT,Lazer_PIN,LOW,DISABLE,DISABLE);
  403300:	2400      	movs	r4, #0
  403302:	9400      	str	r4, [sp, #0]
  403304:	4623      	mov	r3, r4
  403306:	4622      	mov	r2, r4
  403308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40330c:	4628      	mov	r0, r5
  40330e:	4e0e      	ldr	r6, [pc, #56]	; (403348 <board_init+0x88>)
  403310:	47b0      	blx	r6
	pio_set_output(vidSel0_PORT,vidSel0_PIN,LOW,DISABLE,DISABLE);
  403312:	9400      	str	r4, [sp, #0]
  403314:	4623      	mov	r3, r4
  403316:	4622      	mov	r2, r4
  403318:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  40331c:	4628      	mov	r0, r5
  40331e:	47b0      	blx	r6
	pio_set_output(vidSel1_PORT,vidSel1_PIN,LOW,DISABLE,DISABLE);
  403320:	9400      	str	r4, [sp, #0]
  403322:	4623      	mov	r3, r4
  403324:	4622      	mov	r2, r4
  403326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40332a:	4628      	mov	r0, r5
  40332c:	47b0      	blx	r6
}
  40332e:	b002      	add	sp, #8
  403330:	bd70      	pop	{r4, r5, r6, pc}
  403332:	bf00      	nop
  403334:	400e1450 	.word	0x400e1450
  403338:	0040077d 	.word	0x0040077d
  40333c:	00402fbd 	.word	0x00402fbd
  403340:	400e0e00 	.word	0x400e0e00
  403344:	00402e61 	.word	0x00402e61
  403348:	00402e93 	.word	0x00402e93

0040334c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40334c:	e7fe      	b.n	40334c <Dummy_Handler>
	...

00403350 <Reset_Handler>:
{
  403350:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  403352:	4b21      	ldr	r3, [pc, #132]	; (4033d8 <Reset_Handler+0x88>)
  403354:	4a21      	ldr	r2, [pc, #132]	; (4033dc <Reset_Handler+0x8c>)
  403356:	429a      	cmp	r2, r3
  403358:	d928      	bls.n	4033ac <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  40335a:	4b21      	ldr	r3, [pc, #132]	; (4033e0 <Reset_Handler+0x90>)
  40335c:	4a1e      	ldr	r2, [pc, #120]	; (4033d8 <Reset_Handler+0x88>)
  40335e:	429a      	cmp	r2, r3
  403360:	d20c      	bcs.n	40337c <Reset_Handler+0x2c>
  403362:	3b01      	subs	r3, #1
  403364:	1a9b      	subs	r3, r3, r2
  403366:	f023 0303 	bic.w	r3, r3, #3
  40336a:	3304      	adds	r3, #4
  40336c:	4413      	add	r3, r2
  40336e:	491b      	ldr	r1, [pc, #108]	; (4033dc <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  403370:	f851 0b04 	ldr.w	r0, [r1], #4
  403374:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  403378:	429a      	cmp	r2, r3
  40337a:	d1f9      	bne.n	403370 <Reset_Handler+0x20>
	__NOP();
  40337c:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40337e:	4b19      	ldr	r3, [pc, #100]	; (4033e4 <Reset_Handler+0x94>)
  403380:	4a19      	ldr	r2, [pc, #100]	; (4033e8 <Reset_Handler+0x98>)
  403382:	429a      	cmp	r2, r3
  403384:	d20a      	bcs.n	40339c <Reset_Handler+0x4c>
  403386:	3b01      	subs	r3, #1
  403388:	1a9b      	subs	r3, r3, r2
  40338a:	f023 0303 	bic.w	r3, r3, #3
  40338e:	3304      	adds	r3, #4
  403390:	4413      	add	r3, r2
		*pDest++ = 0;
  403392:	2100      	movs	r1, #0
  403394:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  403398:	429a      	cmp	r2, r3
  40339a:	d1fb      	bne.n	403394 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  40339c:	4b13      	ldr	r3, [pc, #76]	; (4033ec <Reset_Handler+0x9c>)
  40339e:	4a14      	ldr	r2, [pc, #80]	; (4033f0 <Reset_Handler+0xa0>)
  4033a0:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4033a2:	4b14      	ldr	r3, [pc, #80]	; (4033f4 <Reset_Handler+0xa4>)
  4033a4:	4798      	blx	r3
	main();
  4033a6:	4b14      	ldr	r3, [pc, #80]	; (4033f8 <Reset_Handler+0xa8>)
  4033a8:	4798      	blx	r3
  4033aa:	e7fe      	b.n	4033aa <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  4033ac:	4b0a      	ldr	r3, [pc, #40]	; (4033d8 <Reset_Handler+0x88>)
  4033ae:	4a0b      	ldr	r2, [pc, #44]	; (4033dc <Reset_Handler+0x8c>)
  4033b0:	429a      	cmp	r2, r3
  4033b2:	d2e3      	bcs.n	40337c <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4033b4:	4b0a      	ldr	r3, [pc, #40]	; (4033e0 <Reset_Handler+0x90>)
  4033b6:	4808      	ldr	r0, [pc, #32]	; (4033d8 <Reset_Handler+0x88>)
  4033b8:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4033ba:	4611      	mov	r1, r2
  4033bc:	3a04      	subs	r2, #4
  4033be:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  4033c0:	2800      	cmp	r0, #0
  4033c2:	d0db      	beq.n	40337c <Reset_Handler+0x2c>
  4033c4:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  4033c8:	f852 0904 	ldr.w	r0, [r2], #-4
  4033cc:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  4033d0:	42ca      	cmn	r2, r1
  4033d2:	d1f9      	bne.n	4033c8 <Reset_Handler+0x78>
  4033d4:	e7d2      	b.n	40337c <Reset_Handler+0x2c>
  4033d6:	bf00      	nop
  4033d8:	20000000 	.word	0x20000000
  4033dc:	0040408c 	.word	0x0040408c
  4033e0:	200004d4 	.word	0x200004d4
  4033e4:	20006f7c 	.word	0x20006f7c
  4033e8:	200004d4 	.word	0x200004d4
  4033ec:	e000ed00 	.word	0xe000ed00
  4033f0:	00400000 	.word	0x00400000
  4033f4:	00403e2d 	.word	0x00403e2d
  4033f8:	00403581 	.word	0x00403581

004033fc <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4033fc:	4b3c      	ldr	r3, [pc, #240]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  4033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403400:	f003 0303 	and.w	r3, r3, #3
  403404:	2b03      	cmp	r3, #3
  403406:	d80e      	bhi.n	403426 <SystemCoreClockUpdate+0x2a>
  403408:	e8df f003 	tbb	[pc, r3]
  40340c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403410:	4b38      	ldr	r3, [pc, #224]	; (4034f4 <SystemCoreClockUpdate+0xf8>)
  403412:	695b      	ldr	r3, [r3, #20]
  403414:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403418:	bf14      	ite	ne
  40341a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40341e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403422:	4b35      	ldr	r3, [pc, #212]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  403424:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403426:	4b32      	ldr	r3, [pc, #200]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  403428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40342a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40342e:	2b70      	cmp	r3, #112	; 0x70
  403430:	d055      	beq.n	4034de <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403432:	4b2f      	ldr	r3, [pc, #188]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  403434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  403436:	4930      	ldr	r1, [pc, #192]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403438:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  40343c:	680b      	ldr	r3, [r1, #0]
  40343e:	40d3      	lsrs	r3, r2
  403440:	600b      	str	r3, [r1, #0]
  403442:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403444:	4b2a      	ldr	r3, [pc, #168]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  403446:	6a1b      	ldr	r3, [r3, #32]
  403448:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40344c:	d003      	beq.n	403456 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40344e:	4a2b      	ldr	r2, [pc, #172]	; (4034fc <SystemCoreClockUpdate+0x100>)
  403450:	4b29      	ldr	r3, [pc, #164]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  403452:	601a      	str	r2, [r3, #0]
  403454:	e7e7      	b.n	403426 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403456:	4a2a      	ldr	r2, [pc, #168]	; (403500 <SystemCoreClockUpdate+0x104>)
  403458:	4b27      	ldr	r3, [pc, #156]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  40345a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40345c:	4b24      	ldr	r3, [pc, #144]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  40345e:	6a1b      	ldr	r3, [r3, #32]
  403460:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403464:	2b10      	cmp	r3, #16
  403466:	d005      	beq.n	403474 <SystemCoreClockUpdate+0x78>
  403468:	2b20      	cmp	r3, #32
  40346a:	d1dc      	bne.n	403426 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40346c:	4a23      	ldr	r2, [pc, #140]	; (4034fc <SystemCoreClockUpdate+0x100>)
  40346e:	4b22      	ldr	r3, [pc, #136]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  403470:	601a      	str	r2, [r3, #0]
			break;
  403472:	e7d8      	b.n	403426 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403474:	4a23      	ldr	r2, [pc, #140]	; (403504 <SystemCoreClockUpdate+0x108>)
  403476:	4b20      	ldr	r3, [pc, #128]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  403478:	601a      	str	r2, [r3, #0]
			break;
  40347a:	e7d4      	b.n	403426 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40347c:	4b1c      	ldr	r3, [pc, #112]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  40347e:	6a1b      	ldr	r3, [r3, #32]
  403480:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403484:	d018      	beq.n	4034b8 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403486:	4a1d      	ldr	r2, [pc, #116]	; (4034fc <SystemCoreClockUpdate+0x100>)
  403488:	4b1b      	ldr	r3, [pc, #108]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  40348a:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40348c:	4b18      	ldr	r3, [pc, #96]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  40348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403490:	f003 0303 	and.w	r3, r3, #3
  403494:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403496:	4a16      	ldr	r2, [pc, #88]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  403498:	bf07      	ittee	eq
  40349a:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40349c:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40349e:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4034a0:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4034a2:	4815      	ldr	r0, [pc, #84]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4034a4:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4034a8:	6803      	ldr	r3, [r0, #0]
  4034aa:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  4034ae:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4034b0:	fbb3 f3f2 	udiv	r3, r3, r2
  4034b4:	6003      	str	r3, [r0, #0]
  4034b6:	e7b6      	b.n	403426 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4034b8:	4a11      	ldr	r2, [pc, #68]	; (403500 <SystemCoreClockUpdate+0x104>)
  4034ba:	4b0f      	ldr	r3, [pc, #60]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  4034bc:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4034be:	4b0c      	ldr	r3, [pc, #48]	; (4034f0 <SystemCoreClockUpdate+0xf4>)
  4034c0:	6a1b      	ldr	r3, [r3, #32]
  4034c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4034c6:	2b10      	cmp	r3, #16
  4034c8:	d005      	beq.n	4034d6 <SystemCoreClockUpdate+0xda>
  4034ca:	2b20      	cmp	r3, #32
  4034cc:	d1de      	bne.n	40348c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4034ce:	4a0b      	ldr	r2, [pc, #44]	; (4034fc <SystemCoreClockUpdate+0x100>)
  4034d0:	4b09      	ldr	r3, [pc, #36]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  4034d2:	601a      	str	r2, [r3, #0]
					break;
  4034d4:	e7da      	b.n	40348c <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4034d6:	4a0b      	ldr	r2, [pc, #44]	; (403504 <SystemCoreClockUpdate+0x108>)
  4034d8:	4b07      	ldr	r3, [pc, #28]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  4034da:	601a      	str	r2, [r3, #0]
					break;
  4034dc:	e7d6      	b.n	40348c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4034de:	4a06      	ldr	r2, [pc, #24]	; (4034f8 <SystemCoreClockUpdate+0xfc>)
  4034e0:	6813      	ldr	r3, [r2, #0]
  4034e2:	4909      	ldr	r1, [pc, #36]	; (403508 <SystemCoreClockUpdate+0x10c>)
  4034e4:	fba1 1303 	umull	r1, r3, r1, r3
  4034e8:	085b      	lsrs	r3, r3, #1
  4034ea:	6013      	str	r3, [r2, #0]
  4034ec:	4770      	bx	lr
  4034ee:	bf00      	nop
  4034f0:	400e0400 	.word	0x400e0400
  4034f4:	400e1410 	.word	0x400e1410
  4034f8:	200000a4 	.word	0x200000a4
  4034fc:	00b71b00 	.word	0x00b71b00
  403500:	003d0900 	.word	0x003d0900
  403504:	007a1200 	.word	0x007a1200
  403508:	aaaaaaab 	.word	0xaaaaaaab

0040350c <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40350c:	4b12      	ldr	r3, [pc, #72]	; (403558 <system_init_flash+0x4c>)
  40350e:	4298      	cmp	r0, r3
  403510:	d911      	bls.n	403536 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403512:	4b12      	ldr	r3, [pc, #72]	; (40355c <system_init_flash+0x50>)
  403514:	4298      	cmp	r0, r3
  403516:	d913      	bls.n	403540 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403518:	4b11      	ldr	r3, [pc, #68]	; (403560 <system_init_flash+0x54>)
  40351a:	4298      	cmp	r0, r3
  40351c:	d914      	bls.n	403548 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40351e:	4b11      	ldr	r3, [pc, #68]	; (403564 <system_init_flash+0x58>)
  403520:	4298      	cmp	r0, r3
  403522:	d915      	bls.n	403550 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403524:	4b10      	ldr	r3, [pc, #64]	; (403568 <system_init_flash+0x5c>)
  403526:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403528:	bf94      	ite	ls
  40352a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40352e:	4a0f      	ldrhi	r2, [pc, #60]	; (40356c <system_init_flash+0x60>)
  403530:	4b0f      	ldr	r3, [pc, #60]	; (403570 <system_init_flash+0x64>)
  403532:	601a      	str	r2, [r3, #0]
  403534:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403536:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40353a:	4b0d      	ldr	r3, [pc, #52]	; (403570 <system_init_flash+0x64>)
  40353c:	601a      	str	r2, [r3, #0]
  40353e:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403540:	4a0c      	ldr	r2, [pc, #48]	; (403574 <system_init_flash+0x68>)
  403542:	4b0b      	ldr	r3, [pc, #44]	; (403570 <system_init_flash+0x64>)
  403544:	601a      	str	r2, [r3, #0]
  403546:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403548:	4a0b      	ldr	r2, [pc, #44]	; (403578 <system_init_flash+0x6c>)
  40354a:	4b09      	ldr	r3, [pc, #36]	; (403570 <system_init_flash+0x64>)
  40354c:	601a      	str	r2, [r3, #0]
  40354e:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403550:	4a0a      	ldr	r2, [pc, #40]	; (40357c <system_init_flash+0x70>)
  403552:	4b07      	ldr	r3, [pc, #28]	; (403570 <system_init_flash+0x64>)
  403554:	601a      	str	r2, [r3, #0]
  403556:	4770      	bx	lr
  403558:	01312cff 	.word	0x01312cff
  40355c:	026259ff 	.word	0x026259ff
  403560:	039386ff 	.word	0x039386ff
  403564:	04c4b3ff 	.word	0x04c4b3ff
  403568:	05f5e0ff 	.word	0x05f5e0ff
  40356c:	04000500 	.word	0x04000500
  403570:	400e0a00 	.word	0x400e0a00
  403574:	04000100 	.word	0x04000100
  403578:	04000200 	.word	0x04000200
  40357c:	04000300 	.word	0x04000300

00403580 <main>:
#include "modbus.h"
#include "stepper.h"
#include "registers.h"


int main(void) {
  403580:	b500      	push	{lr}
  403582:	b097      	sub	sp, #92	; 0x5c
	sysclk_init();
  403584:	4b29      	ldr	r3, [pc, #164]	; (40362c <main+0xac>)
  403586:	4798      	blx	r3
	board_init();
  403588:	4b29      	ldr	r3, [pc, #164]	; (403630 <main+0xb0>)
  40358a:	4798      	blx	r3
	
	portSetup(MODBUS_SER_PORT, MODBUS_BPS, MODBUS_EN_PORT, MODBUS_EN_PIN, MODBUS_TIMEOUT);
  40358c:	4c29      	ldr	r4, [pc, #164]	; (403634 <main+0xb4>)
  40358e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  403592:	9300      	str	r3, [sp, #0]
  403594:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403598:	4622      	mov	r2, r4
  40359a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  40359e:	4826      	ldr	r0, [pc, #152]	; (403638 <main+0xb8>)
  4035a0:	4d26      	ldr	r5, [pc, #152]	; (40363c <main+0xbc>)
  4035a2:	47a8      	blx	r5
	modbus_init(MODBUS_SLAVE_ID);
  4035a4:	200f      	movs	r0, #15
  4035a6:	4b26      	ldr	r3, [pc, #152]	; (403640 <main+0xc0>)
  4035a8:	4798      	blx	r3
	
	stepper_s stepper;
	stepper_setup(&stepper, STEPPER_PWM_CHANNEL, STEPPER_DIR_PORT, STEPPER_DIR_PIN, STEPPER_STEP_PORT, STEPPER_STEP_PIN);
  4035aa:	2380      	movs	r3, #128	; 0x80
  4035ac:	9301      	str	r3, [sp, #4]
  4035ae:	9400      	str	r4, [sp, #0]
  4035b0:	2340      	movs	r3, #64	; 0x40
  4035b2:	4622      	mov	r2, r4
  4035b4:	2103      	movs	r1, #3
  4035b6:	a806      	add	r0, sp, #24
  4035b8:	4c22      	ldr	r4, [pc, #136]	; (403644 <main+0xc4>)
  4035ba:	47a0      	blx	r4

	// Some tests for now switching between frequencies.
	for (volatile uint32_t i = 0; i < (12000000) * 3; i++);
  4035bc:	2300      	movs	r3, #0
  4035be:	9303      	str	r3, [sp, #12]
  4035c0:	9a03      	ldr	r2, [sp, #12]
  4035c2:	4b21      	ldr	r3, [pc, #132]	; (403648 <main+0xc8>)
  4035c4:	429a      	cmp	r2, r3
  4035c6:	d806      	bhi.n	4035d6 <main+0x56>
  4035c8:	461a      	mov	r2, r3
  4035ca:	9b03      	ldr	r3, [sp, #12]
  4035cc:	3301      	adds	r3, #1
  4035ce:	9303      	str	r3, [sp, #12]
  4035d0:	9b03      	ldr	r3, [sp, #12]
  4035d2:	4293      	cmp	r3, r2
  4035d4:	d9f9      	bls.n	4035ca <main+0x4a>
	stepper_set_velocity(&stepper, 2000, STEPPER_DIR_CW);
  4035d6:	2201      	movs	r2, #1
  4035d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  4035dc:	a806      	add	r0, sp, #24
  4035de:	4b1b      	ldr	r3, [pc, #108]	; (40364c <main+0xcc>)
  4035e0:	4798      	blx	r3
	for (volatile uint32_t i = 0; i < (12000000) * 3; i++);
  4035e2:	2300      	movs	r3, #0
  4035e4:	9304      	str	r3, [sp, #16]
  4035e6:	9a04      	ldr	r2, [sp, #16]
  4035e8:	4b17      	ldr	r3, [pc, #92]	; (403648 <main+0xc8>)
  4035ea:	429a      	cmp	r2, r3
  4035ec:	d806      	bhi.n	4035fc <main+0x7c>
  4035ee:	461a      	mov	r2, r3
  4035f0:	9b04      	ldr	r3, [sp, #16]
  4035f2:	3301      	adds	r3, #1
  4035f4:	9304      	str	r3, [sp, #16]
  4035f6:	9b04      	ldr	r3, [sp, #16]
  4035f8:	4293      	cmp	r3, r2
  4035fa:	d9f9      	bls.n	4035f0 <main+0x70>
	stepper_set_velocity(&stepper, 10, STEPPER_DIR_CCW);
  4035fc:	2200      	movs	r2, #0
  4035fe:	210a      	movs	r1, #10
  403600:	a806      	add	r0, sp, #24
  403602:	4b12      	ldr	r3, [pc, #72]	; (40364c <main+0xcc>)
  403604:	4798      	blx	r3
	for (volatile uint32_t i = 0; i < (12000000) * 3; i++);
  403606:	2300      	movs	r3, #0
  403608:	9305      	str	r3, [sp, #20]
  40360a:	9a05      	ldr	r2, [sp, #20]
  40360c:	4b0e      	ldr	r3, [pc, #56]	; (403648 <main+0xc8>)
  40360e:	429a      	cmp	r2, r3
  403610:	d806      	bhi.n	403620 <main+0xa0>
  403612:	461a      	mov	r2, r3
  403614:	9b05      	ldr	r3, [sp, #20]
  403616:	3301      	adds	r3, #1
  403618:	9305      	str	r3, [sp, #20]
  40361a:	9b05      	ldr	r3, [sp, #20]
  40361c:	4293      	cmp	r3, r2
  40361e:	d9f9      	bls.n	403614 <main+0x94>
	stepper_stop(&stepper);
  403620:	a806      	add	r0, sp, #24
  403622:	4b0b      	ldr	r3, [pc, #44]	; (403650 <main+0xd0>)
  403624:	4798      	blx	r3

	while (1) {
		modbus_update();
  403626:	4c0b      	ldr	r4, [pc, #44]	; (403654 <main+0xd4>)
  403628:	47a0      	blx	r4
  40362a:	e7fd      	b.n	403628 <main+0xa8>
  40362c:	00402d65 	.word	0x00402d65
  403630:	004032c1 	.word	0x004032c1
  403634:	400e0e00 	.word	0x400e0e00
  403638:	400e0600 	.word	0x400e0600
  40363c:	004029a9 	.word	0x004029a9
  403640:	004025f1 	.word	0x004025f1
  403644:	00402bed 	.word	0x00402bed
  403648:	022550ff 	.word	0x022550ff
  40364c:	00402c55 	.word	0x00402c55
  403650:	00402d05 	.word	0x00402d05
  403654:	00402879 	.word	0x00402879

00403658 <__aeabi_drsub>:
  403658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40365c:	e002      	b.n	403664 <__adddf3>
  40365e:	bf00      	nop

00403660 <__aeabi_dsub>:
  403660:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403664 <__adddf3>:
  403664:	b530      	push	{r4, r5, lr}
  403666:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40366a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40366e:	ea94 0f05 	teq	r4, r5
  403672:	bf08      	it	eq
  403674:	ea90 0f02 	teqeq	r0, r2
  403678:	bf1f      	itttt	ne
  40367a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40367e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403682:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403686:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40368a:	f000 80e2 	beq.w	403852 <__adddf3+0x1ee>
  40368e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403692:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403696:	bfb8      	it	lt
  403698:	426d      	neglt	r5, r5
  40369a:	dd0c      	ble.n	4036b6 <__adddf3+0x52>
  40369c:	442c      	add	r4, r5
  40369e:	ea80 0202 	eor.w	r2, r0, r2
  4036a2:	ea81 0303 	eor.w	r3, r1, r3
  4036a6:	ea82 0000 	eor.w	r0, r2, r0
  4036aa:	ea83 0101 	eor.w	r1, r3, r1
  4036ae:	ea80 0202 	eor.w	r2, r0, r2
  4036b2:	ea81 0303 	eor.w	r3, r1, r3
  4036b6:	2d36      	cmp	r5, #54	; 0x36
  4036b8:	bf88      	it	hi
  4036ba:	bd30      	pophi	{r4, r5, pc}
  4036bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4036c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4036c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4036c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4036cc:	d002      	beq.n	4036d4 <__adddf3+0x70>
  4036ce:	4240      	negs	r0, r0
  4036d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4036d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4036d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4036dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4036e0:	d002      	beq.n	4036e8 <__adddf3+0x84>
  4036e2:	4252      	negs	r2, r2
  4036e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4036e8:	ea94 0f05 	teq	r4, r5
  4036ec:	f000 80a7 	beq.w	40383e <__adddf3+0x1da>
  4036f0:	f1a4 0401 	sub.w	r4, r4, #1
  4036f4:	f1d5 0e20 	rsbs	lr, r5, #32
  4036f8:	db0d      	blt.n	403716 <__adddf3+0xb2>
  4036fa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4036fe:	fa22 f205 	lsr.w	r2, r2, r5
  403702:	1880      	adds	r0, r0, r2
  403704:	f141 0100 	adc.w	r1, r1, #0
  403708:	fa03 f20e 	lsl.w	r2, r3, lr
  40370c:	1880      	adds	r0, r0, r2
  40370e:	fa43 f305 	asr.w	r3, r3, r5
  403712:	4159      	adcs	r1, r3
  403714:	e00e      	b.n	403734 <__adddf3+0xd0>
  403716:	f1a5 0520 	sub.w	r5, r5, #32
  40371a:	f10e 0e20 	add.w	lr, lr, #32
  40371e:	2a01      	cmp	r2, #1
  403720:	fa03 fc0e 	lsl.w	ip, r3, lr
  403724:	bf28      	it	cs
  403726:	f04c 0c02 	orrcs.w	ip, ip, #2
  40372a:	fa43 f305 	asr.w	r3, r3, r5
  40372e:	18c0      	adds	r0, r0, r3
  403730:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403738:	d507      	bpl.n	40374a <__adddf3+0xe6>
  40373a:	f04f 0e00 	mov.w	lr, #0
  40373e:	f1dc 0c00 	rsbs	ip, ip, #0
  403742:	eb7e 0000 	sbcs.w	r0, lr, r0
  403746:	eb6e 0101 	sbc.w	r1, lr, r1
  40374a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40374e:	d31b      	bcc.n	403788 <__adddf3+0x124>
  403750:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403754:	d30c      	bcc.n	403770 <__adddf3+0x10c>
  403756:	0849      	lsrs	r1, r1, #1
  403758:	ea5f 0030 	movs.w	r0, r0, rrx
  40375c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403760:	f104 0401 	add.w	r4, r4, #1
  403764:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403768:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40376c:	f080 809a 	bcs.w	4038a4 <__adddf3+0x240>
  403770:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403774:	bf08      	it	eq
  403776:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40377a:	f150 0000 	adcs.w	r0, r0, #0
  40377e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403782:	ea41 0105 	orr.w	r1, r1, r5
  403786:	bd30      	pop	{r4, r5, pc}
  403788:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40378c:	4140      	adcs	r0, r0
  40378e:	eb41 0101 	adc.w	r1, r1, r1
  403792:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403796:	f1a4 0401 	sub.w	r4, r4, #1
  40379a:	d1e9      	bne.n	403770 <__adddf3+0x10c>
  40379c:	f091 0f00 	teq	r1, #0
  4037a0:	bf04      	itt	eq
  4037a2:	4601      	moveq	r1, r0
  4037a4:	2000      	moveq	r0, #0
  4037a6:	fab1 f381 	clz	r3, r1
  4037aa:	bf08      	it	eq
  4037ac:	3320      	addeq	r3, #32
  4037ae:	f1a3 030b 	sub.w	r3, r3, #11
  4037b2:	f1b3 0220 	subs.w	r2, r3, #32
  4037b6:	da0c      	bge.n	4037d2 <__adddf3+0x16e>
  4037b8:	320c      	adds	r2, #12
  4037ba:	dd08      	ble.n	4037ce <__adddf3+0x16a>
  4037bc:	f102 0c14 	add.w	ip, r2, #20
  4037c0:	f1c2 020c 	rsb	r2, r2, #12
  4037c4:	fa01 f00c 	lsl.w	r0, r1, ip
  4037c8:	fa21 f102 	lsr.w	r1, r1, r2
  4037cc:	e00c      	b.n	4037e8 <__adddf3+0x184>
  4037ce:	f102 0214 	add.w	r2, r2, #20
  4037d2:	bfd8      	it	le
  4037d4:	f1c2 0c20 	rsble	ip, r2, #32
  4037d8:	fa01 f102 	lsl.w	r1, r1, r2
  4037dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4037e0:	bfdc      	itt	le
  4037e2:	ea41 010c 	orrle.w	r1, r1, ip
  4037e6:	4090      	lslle	r0, r2
  4037e8:	1ae4      	subs	r4, r4, r3
  4037ea:	bfa2      	ittt	ge
  4037ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4037f0:	4329      	orrge	r1, r5
  4037f2:	bd30      	popge	{r4, r5, pc}
  4037f4:	ea6f 0404 	mvn.w	r4, r4
  4037f8:	3c1f      	subs	r4, #31
  4037fa:	da1c      	bge.n	403836 <__adddf3+0x1d2>
  4037fc:	340c      	adds	r4, #12
  4037fe:	dc0e      	bgt.n	40381e <__adddf3+0x1ba>
  403800:	f104 0414 	add.w	r4, r4, #20
  403804:	f1c4 0220 	rsb	r2, r4, #32
  403808:	fa20 f004 	lsr.w	r0, r0, r4
  40380c:	fa01 f302 	lsl.w	r3, r1, r2
  403810:	ea40 0003 	orr.w	r0, r0, r3
  403814:	fa21 f304 	lsr.w	r3, r1, r4
  403818:	ea45 0103 	orr.w	r1, r5, r3
  40381c:	bd30      	pop	{r4, r5, pc}
  40381e:	f1c4 040c 	rsb	r4, r4, #12
  403822:	f1c4 0220 	rsb	r2, r4, #32
  403826:	fa20 f002 	lsr.w	r0, r0, r2
  40382a:	fa01 f304 	lsl.w	r3, r1, r4
  40382e:	ea40 0003 	orr.w	r0, r0, r3
  403832:	4629      	mov	r1, r5
  403834:	bd30      	pop	{r4, r5, pc}
  403836:	fa21 f004 	lsr.w	r0, r1, r4
  40383a:	4629      	mov	r1, r5
  40383c:	bd30      	pop	{r4, r5, pc}
  40383e:	f094 0f00 	teq	r4, #0
  403842:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403846:	bf06      	itte	eq
  403848:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40384c:	3401      	addeq	r4, #1
  40384e:	3d01      	subne	r5, #1
  403850:	e74e      	b.n	4036f0 <__adddf3+0x8c>
  403852:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403856:	bf18      	it	ne
  403858:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40385c:	d029      	beq.n	4038b2 <__adddf3+0x24e>
  40385e:	ea94 0f05 	teq	r4, r5
  403862:	bf08      	it	eq
  403864:	ea90 0f02 	teqeq	r0, r2
  403868:	d005      	beq.n	403876 <__adddf3+0x212>
  40386a:	ea54 0c00 	orrs.w	ip, r4, r0
  40386e:	bf04      	itt	eq
  403870:	4619      	moveq	r1, r3
  403872:	4610      	moveq	r0, r2
  403874:	bd30      	pop	{r4, r5, pc}
  403876:	ea91 0f03 	teq	r1, r3
  40387a:	bf1e      	ittt	ne
  40387c:	2100      	movne	r1, #0
  40387e:	2000      	movne	r0, #0
  403880:	bd30      	popne	{r4, r5, pc}
  403882:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403886:	d105      	bne.n	403894 <__adddf3+0x230>
  403888:	0040      	lsls	r0, r0, #1
  40388a:	4149      	adcs	r1, r1
  40388c:	bf28      	it	cs
  40388e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403892:	bd30      	pop	{r4, r5, pc}
  403894:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403898:	bf3c      	itt	cc
  40389a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40389e:	bd30      	popcc	{r4, r5, pc}
  4038a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4038a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4038a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4038ac:	f04f 0000 	mov.w	r0, #0
  4038b0:	bd30      	pop	{r4, r5, pc}
  4038b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4038b6:	bf1a      	itte	ne
  4038b8:	4619      	movne	r1, r3
  4038ba:	4610      	movne	r0, r2
  4038bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4038c0:	bf1c      	itt	ne
  4038c2:	460b      	movne	r3, r1
  4038c4:	4602      	movne	r2, r0
  4038c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4038ca:	bf06      	itte	eq
  4038cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4038d0:	ea91 0f03 	teqeq	r1, r3
  4038d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4038d8:	bd30      	pop	{r4, r5, pc}
  4038da:	bf00      	nop

004038dc <__aeabi_ui2d>:
  4038dc:	f090 0f00 	teq	r0, #0
  4038e0:	bf04      	itt	eq
  4038e2:	2100      	moveq	r1, #0
  4038e4:	4770      	bxeq	lr
  4038e6:	b530      	push	{r4, r5, lr}
  4038e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4038ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4038f0:	f04f 0500 	mov.w	r5, #0
  4038f4:	f04f 0100 	mov.w	r1, #0
  4038f8:	e750      	b.n	40379c <__adddf3+0x138>
  4038fa:	bf00      	nop

004038fc <__aeabi_i2d>:
  4038fc:	f090 0f00 	teq	r0, #0
  403900:	bf04      	itt	eq
  403902:	2100      	moveq	r1, #0
  403904:	4770      	bxeq	lr
  403906:	b530      	push	{r4, r5, lr}
  403908:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40390c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403910:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403914:	bf48      	it	mi
  403916:	4240      	negmi	r0, r0
  403918:	f04f 0100 	mov.w	r1, #0
  40391c:	e73e      	b.n	40379c <__adddf3+0x138>
  40391e:	bf00      	nop

00403920 <__aeabi_f2d>:
  403920:	0042      	lsls	r2, r0, #1
  403922:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403926:	ea4f 0131 	mov.w	r1, r1, rrx
  40392a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40392e:	bf1f      	itttt	ne
  403930:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403934:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403938:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40393c:	4770      	bxne	lr
  40393e:	f092 0f00 	teq	r2, #0
  403942:	bf14      	ite	ne
  403944:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403948:	4770      	bxeq	lr
  40394a:	b530      	push	{r4, r5, lr}
  40394c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403954:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403958:	e720      	b.n	40379c <__adddf3+0x138>
  40395a:	bf00      	nop

0040395c <__aeabi_ul2d>:
  40395c:	ea50 0201 	orrs.w	r2, r0, r1
  403960:	bf08      	it	eq
  403962:	4770      	bxeq	lr
  403964:	b530      	push	{r4, r5, lr}
  403966:	f04f 0500 	mov.w	r5, #0
  40396a:	e00a      	b.n	403982 <__aeabi_l2d+0x16>

0040396c <__aeabi_l2d>:
  40396c:	ea50 0201 	orrs.w	r2, r0, r1
  403970:	bf08      	it	eq
  403972:	4770      	bxeq	lr
  403974:	b530      	push	{r4, r5, lr}
  403976:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40397a:	d502      	bpl.n	403982 <__aeabi_l2d+0x16>
  40397c:	4240      	negs	r0, r0
  40397e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403982:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403986:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40398a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40398e:	f43f aedc 	beq.w	40374a <__adddf3+0xe6>
  403992:	f04f 0203 	mov.w	r2, #3
  403996:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40399a:	bf18      	it	ne
  40399c:	3203      	addne	r2, #3
  40399e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4039a2:	bf18      	it	ne
  4039a4:	3203      	addne	r2, #3
  4039a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4039aa:	f1c2 0320 	rsb	r3, r2, #32
  4039ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4039b2:	fa20 f002 	lsr.w	r0, r0, r2
  4039b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4039ba:	ea40 000e 	orr.w	r0, r0, lr
  4039be:	fa21 f102 	lsr.w	r1, r1, r2
  4039c2:	4414      	add	r4, r2
  4039c4:	e6c1      	b.n	40374a <__adddf3+0xe6>
  4039c6:	bf00      	nop

004039c8 <__aeabi_dmul>:
  4039c8:	b570      	push	{r4, r5, r6, lr}
  4039ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4039ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4039d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4039d6:	bf1d      	ittte	ne
  4039d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4039dc:	ea94 0f0c 	teqne	r4, ip
  4039e0:	ea95 0f0c 	teqne	r5, ip
  4039e4:	f000 f8de 	bleq	403ba4 <__aeabi_dmul+0x1dc>
  4039e8:	442c      	add	r4, r5
  4039ea:	ea81 0603 	eor.w	r6, r1, r3
  4039ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4039f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4039f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4039fa:	bf18      	it	ne
  4039fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403a08:	d038      	beq.n	403a7c <__aeabi_dmul+0xb4>
  403a0a:	fba0 ce02 	umull	ip, lr, r0, r2
  403a0e:	f04f 0500 	mov.w	r5, #0
  403a12:	fbe1 e502 	umlal	lr, r5, r1, r2
  403a16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403a1a:	fbe0 e503 	umlal	lr, r5, r0, r3
  403a1e:	f04f 0600 	mov.w	r6, #0
  403a22:	fbe1 5603 	umlal	r5, r6, r1, r3
  403a26:	f09c 0f00 	teq	ip, #0
  403a2a:	bf18      	it	ne
  403a2c:	f04e 0e01 	orrne.w	lr, lr, #1
  403a30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403a34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403a38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403a3c:	d204      	bcs.n	403a48 <__aeabi_dmul+0x80>
  403a3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403a42:	416d      	adcs	r5, r5
  403a44:	eb46 0606 	adc.w	r6, r6, r6
  403a48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403a4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403a50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403a54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403a58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403a5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403a60:	bf88      	it	hi
  403a62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403a66:	d81e      	bhi.n	403aa6 <__aeabi_dmul+0xde>
  403a68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403a6c:	bf08      	it	eq
  403a6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403a72:	f150 0000 	adcs.w	r0, r0, #0
  403a76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403a7a:	bd70      	pop	{r4, r5, r6, pc}
  403a7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403a80:	ea46 0101 	orr.w	r1, r6, r1
  403a84:	ea40 0002 	orr.w	r0, r0, r2
  403a88:	ea81 0103 	eor.w	r1, r1, r3
  403a8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403a90:	bfc2      	ittt	gt
  403a92:	ebd4 050c 	rsbsgt	r5, r4, ip
  403a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403a9a:	bd70      	popgt	{r4, r5, r6, pc}
  403a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403aa0:	f04f 0e00 	mov.w	lr, #0
  403aa4:	3c01      	subs	r4, #1
  403aa6:	f300 80ab 	bgt.w	403c00 <__aeabi_dmul+0x238>
  403aaa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  403aae:	bfde      	ittt	le
  403ab0:	2000      	movle	r0, #0
  403ab2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403ab6:	bd70      	pople	{r4, r5, r6, pc}
  403ab8:	f1c4 0400 	rsb	r4, r4, #0
  403abc:	3c20      	subs	r4, #32
  403abe:	da35      	bge.n	403b2c <__aeabi_dmul+0x164>
  403ac0:	340c      	adds	r4, #12
  403ac2:	dc1b      	bgt.n	403afc <__aeabi_dmul+0x134>
  403ac4:	f104 0414 	add.w	r4, r4, #20
  403ac8:	f1c4 0520 	rsb	r5, r4, #32
  403acc:	fa00 f305 	lsl.w	r3, r0, r5
  403ad0:	fa20 f004 	lsr.w	r0, r0, r4
  403ad4:	fa01 f205 	lsl.w	r2, r1, r5
  403ad8:	ea40 0002 	orr.w	r0, r0, r2
  403adc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403ae0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403ae4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403ae8:	fa21 f604 	lsr.w	r6, r1, r4
  403aec:	eb42 0106 	adc.w	r1, r2, r6
  403af0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403af4:	bf08      	it	eq
  403af6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403afa:	bd70      	pop	{r4, r5, r6, pc}
  403afc:	f1c4 040c 	rsb	r4, r4, #12
  403b00:	f1c4 0520 	rsb	r5, r4, #32
  403b04:	fa00 f304 	lsl.w	r3, r0, r4
  403b08:	fa20 f005 	lsr.w	r0, r0, r5
  403b0c:	fa01 f204 	lsl.w	r2, r1, r4
  403b10:	ea40 0002 	orr.w	r0, r0, r2
  403b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403b18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403b1c:	f141 0100 	adc.w	r1, r1, #0
  403b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403b24:	bf08      	it	eq
  403b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403b2a:	bd70      	pop	{r4, r5, r6, pc}
  403b2c:	f1c4 0520 	rsb	r5, r4, #32
  403b30:	fa00 f205 	lsl.w	r2, r0, r5
  403b34:	ea4e 0e02 	orr.w	lr, lr, r2
  403b38:	fa20 f304 	lsr.w	r3, r0, r4
  403b3c:	fa01 f205 	lsl.w	r2, r1, r5
  403b40:	ea43 0302 	orr.w	r3, r3, r2
  403b44:	fa21 f004 	lsr.w	r0, r1, r4
  403b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403b4c:	fa21 f204 	lsr.w	r2, r1, r4
  403b50:	ea20 0002 	bic.w	r0, r0, r2
  403b54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403b58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403b5c:	bf08      	it	eq
  403b5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403b62:	bd70      	pop	{r4, r5, r6, pc}
  403b64:	f094 0f00 	teq	r4, #0
  403b68:	d10f      	bne.n	403b8a <__aeabi_dmul+0x1c2>
  403b6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403b6e:	0040      	lsls	r0, r0, #1
  403b70:	eb41 0101 	adc.w	r1, r1, r1
  403b74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403b78:	bf08      	it	eq
  403b7a:	3c01      	subeq	r4, #1
  403b7c:	d0f7      	beq.n	403b6e <__aeabi_dmul+0x1a6>
  403b7e:	ea41 0106 	orr.w	r1, r1, r6
  403b82:	f095 0f00 	teq	r5, #0
  403b86:	bf18      	it	ne
  403b88:	4770      	bxne	lr
  403b8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  403b8e:	0052      	lsls	r2, r2, #1
  403b90:	eb43 0303 	adc.w	r3, r3, r3
  403b94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403b98:	bf08      	it	eq
  403b9a:	3d01      	subeq	r5, #1
  403b9c:	d0f7      	beq.n	403b8e <__aeabi_dmul+0x1c6>
  403b9e:	ea43 0306 	orr.w	r3, r3, r6
  403ba2:	4770      	bx	lr
  403ba4:	ea94 0f0c 	teq	r4, ip
  403ba8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403bac:	bf18      	it	ne
  403bae:	ea95 0f0c 	teqne	r5, ip
  403bb2:	d00c      	beq.n	403bce <__aeabi_dmul+0x206>
  403bb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403bb8:	bf18      	it	ne
  403bba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403bbe:	d1d1      	bne.n	403b64 <__aeabi_dmul+0x19c>
  403bc0:	ea81 0103 	eor.w	r1, r1, r3
  403bc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403bc8:	f04f 0000 	mov.w	r0, #0
  403bcc:	bd70      	pop	{r4, r5, r6, pc}
  403bce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403bd2:	bf06      	itte	eq
  403bd4:	4610      	moveq	r0, r2
  403bd6:	4619      	moveq	r1, r3
  403bd8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403bdc:	d019      	beq.n	403c12 <__aeabi_dmul+0x24a>
  403bde:	ea94 0f0c 	teq	r4, ip
  403be2:	d102      	bne.n	403bea <__aeabi_dmul+0x222>
  403be4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403be8:	d113      	bne.n	403c12 <__aeabi_dmul+0x24a>
  403bea:	ea95 0f0c 	teq	r5, ip
  403bee:	d105      	bne.n	403bfc <__aeabi_dmul+0x234>
  403bf0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403bf4:	bf1c      	itt	ne
  403bf6:	4610      	movne	r0, r2
  403bf8:	4619      	movne	r1, r3
  403bfa:	d10a      	bne.n	403c12 <__aeabi_dmul+0x24a>
  403bfc:	ea81 0103 	eor.w	r1, r1, r3
  403c00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403c04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403c08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403c0c:	f04f 0000 	mov.w	r0, #0
  403c10:	bd70      	pop	{r4, r5, r6, pc}
  403c12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403c16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  403c1a:	bd70      	pop	{r4, r5, r6, pc}

00403c1c <__aeabi_ddiv>:
  403c1c:	b570      	push	{r4, r5, r6, lr}
  403c1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403c22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403c26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403c2a:	bf1d      	ittte	ne
  403c2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403c30:	ea94 0f0c 	teqne	r4, ip
  403c34:	ea95 0f0c 	teqne	r5, ip
  403c38:	f000 f8a7 	bleq	403d8a <__aeabi_ddiv+0x16e>
  403c3c:	eba4 0405 	sub.w	r4, r4, r5
  403c40:	ea81 0e03 	eor.w	lr, r1, r3
  403c44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403c48:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403c4c:	f000 8088 	beq.w	403d60 <__aeabi_ddiv+0x144>
  403c50:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403c54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403c58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403c5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403c60:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403c64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403c68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403c6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403c70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403c74:	429d      	cmp	r5, r3
  403c76:	bf08      	it	eq
  403c78:	4296      	cmpeq	r6, r2
  403c7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403c7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403c82:	d202      	bcs.n	403c8a <__aeabi_ddiv+0x6e>
  403c84:	085b      	lsrs	r3, r3, #1
  403c86:	ea4f 0232 	mov.w	r2, r2, rrx
  403c8a:	1ab6      	subs	r6, r6, r2
  403c8c:	eb65 0503 	sbc.w	r5, r5, r3
  403c90:	085b      	lsrs	r3, r3, #1
  403c92:	ea4f 0232 	mov.w	r2, r2, rrx
  403c96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403c9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  403c9e:	ebb6 0e02 	subs.w	lr, r6, r2
  403ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
  403ca6:	bf22      	ittt	cs
  403ca8:	1ab6      	subcs	r6, r6, r2
  403caa:	4675      	movcs	r5, lr
  403cac:	ea40 000c 	orrcs.w	r0, r0, ip
  403cb0:	085b      	lsrs	r3, r3, #1
  403cb2:	ea4f 0232 	mov.w	r2, r2, rrx
  403cb6:	ebb6 0e02 	subs.w	lr, r6, r2
  403cba:	eb75 0e03 	sbcs.w	lr, r5, r3
  403cbe:	bf22      	ittt	cs
  403cc0:	1ab6      	subcs	r6, r6, r2
  403cc2:	4675      	movcs	r5, lr
  403cc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403cc8:	085b      	lsrs	r3, r3, #1
  403cca:	ea4f 0232 	mov.w	r2, r2, rrx
  403cce:	ebb6 0e02 	subs.w	lr, r6, r2
  403cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
  403cd6:	bf22      	ittt	cs
  403cd8:	1ab6      	subcs	r6, r6, r2
  403cda:	4675      	movcs	r5, lr
  403cdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403ce0:	085b      	lsrs	r3, r3, #1
  403ce2:	ea4f 0232 	mov.w	r2, r2, rrx
  403ce6:	ebb6 0e02 	subs.w	lr, r6, r2
  403cea:	eb75 0e03 	sbcs.w	lr, r5, r3
  403cee:	bf22      	ittt	cs
  403cf0:	1ab6      	subcs	r6, r6, r2
  403cf2:	4675      	movcs	r5, lr
  403cf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403cf8:	ea55 0e06 	orrs.w	lr, r5, r6
  403cfc:	d018      	beq.n	403d30 <__aeabi_ddiv+0x114>
  403cfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403d02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403d06:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403d0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403d0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403d12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403d16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403d1a:	d1c0      	bne.n	403c9e <__aeabi_ddiv+0x82>
  403d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403d20:	d10b      	bne.n	403d3a <__aeabi_ddiv+0x11e>
  403d22:	ea41 0100 	orr.w	r1, r1, r0
  403d26:	f04f 0000 	mov.w	r0, #0
  403d2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403d2e:	e7b6      	b.n	403c9e <__aeabi_ddiv+0x82>
  403d30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403d34:	bf04      	itt	eq
  403d36:	4301      	orreq	r1, r0
  403d38:	2000      	moveq	r0, #0
  403d3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403d3e:	bf88      	it	hi
  403d40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403d44:	f63f aeaf 	bhi.w	403aa6 <__aeabi_dmul+0xde>
  403d48:	ebb5 0c03 	subs.w	ip, r5, r3
  403d4c:	bf04      	itt	eq
  403d4e:	ebb6 0c02 	subseq.w	ip, r6, r2
  403d52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403d56:	f150 0000 	adcs.w	r0, r0, #0
  403d5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403d5e:	bd70      	pop	{r4, r5, r6, pc}
  403d60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403d64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403d68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403d6c:	bfc2      	ittt	gt
  403d6e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403d72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403d76:	bd70      	popgt	{r4, r5, r6, pc}
  403d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403d7c:	f04f 0e00 	mov.w	lr, #0
  403d80:	3c01      	subs	r4, #1
  403d82:	e690      	b.n	403aa6 <__aeabi_dmul+0xde>
  403d84:	ea45 0e06 	orr.w	lr, r5, r6
  403d88:	e68d      	b.n	403aa6 <__aeabi_dmul+0xde>
  403d8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403d8e:	ea94 0f0c 	teq	r4, ip
  403d92:	bf08      	it	eq
  403d94:	ea95 0f0c 	teqeq	r5, ip
  403d98:	f43f af3b 	beq.w	403c12 <__aeabi_dmul+0x24a>
  403d9c:	ea94 0f0c 	teq	r4, ip
  403da0:	d10a      	bne.n	403db8 <__aeabi_ddiv+0x19c>
  403da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403da6:	f47f af34 	bne.w	403c12 <__aeabi_dmul+0x24a>
  403daa:	ea95 0f0c 	teq	r5, ip
  403dae:	f47f af25 	bne.w	403bfc <__aeabi_dmul+0x234>
  403db2:	4610      	mov	r0, r2
  403db4:	4619      	mov	r1, r3
  403db6:	e72c      	b.n	403c12 <__aeabi_dmul+0x24a>
  403db8:	ea95 0f0c 	teq	r5, ip
  403dbc:	d106      	bne.n	403dcc <__aeabi_ddiv+0x1b0>
  403dbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403dc2:	f43f aefd 	beq.w	403bc0 <__aeabi_dmul+0x1f8>
  403dc6:	4610      	mov	r0, r2
  403dc8:	4619      	mov	r1, r3
  403dca:	e722      	b.n	403c12 <__aeabi_dmul+0x24a>
  403dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403dd0:	bf18      	it	ne
  403dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403dd6:	f47f aec5 	bne.w	403b64 <__aeabi_dmul+0x19c>
  403dda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403dde:	f47f af0d 	bne.w	403bfc <__aeabi_dmul+0x234>
  403de2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403de6:	f47f aeeb 	bne.w	403bc0 <__aeabi_dmul+0x1f8>
  403dea:	e712      	b.n	403c12 <__aeabi_dmul+0x24a>

00403dec <__aeabi_d2uiz>:
  403dec:	004a      	lsls	r2, r1, #1
  403dee:	d211      	bcs.n	403e14 <__aeabi_d2uiz+0x28>
  403df0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403df4:	d211      	bcs.n	403e1a <__aeabi_d2uiz+0x2e>
  403df6:	d50d      	bpl.n	403e14 <__aeabi_d2uiz+0x28>
  403df8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403dfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403e00:	d40e      	bmi.n	403e20 <__aeabi_d2uiz+0x34>
  403e02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403e0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403e0e:	fa23 f002 	lsr.w	r0, r3, r2
  403e12:	4770      	bx	lr
  403e14:	f04f 0000 	mov.w	r0, #0
  403e18:	4770      	bx	lr
  403e1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403e1e:	d102      	bne.n	403e26 <__aeabi_d2uiz+0x3a>
  403e20:	f04f 30ff 	mov.w	r0, #4294967295
  403e24:	4770      	bx	lr
  403e26:	f04f 0000 	mov.w	r0, #0
  403e2a:	4770      	bx	lr

00403e2c <__libc_init_array>:
  403e2c:	b570      	push	{r4, r5, r6, lr}
  403e2e:	4e0f      	ldr	r6, [pc, #60]	; (403e6c <__libc_init_array+0x40>)
  403e30:	4d0f      	ldr	r5, [pc, #60]	; (403e70 <__libc_init_array+0x44>)
  403e32:	1b76      	subs	r6, r6, r5
  403e34:	10b6      	asrs	r6, r6, #2
  403e36:	bf18      	it	ne
  403e38:	2400      	movne	r4, #0
  403e3a:	d005      	beq.n	403e48 <__libc_init_array+0x1c>
  403e3c:	3401      	adds	r4, #1
  403e3e:	f855 3b04 	ldr.w	r3, [r5], #4
  403e42:	4798      	blx	r3
  403e44:	42a6      	cmp	r6, r4
  403e46:	d1f9      	bne.n	403e3c <__libc_init_array+0x10>
  403e48:	4e0a      	ldr	r6, [pc, #40]	; (403e74 <__libc_init_array+0x48>)
  403e4a:	4d0b      	ldr	r5, [pc, #44]	; (403e78 <__libc_init_array+0x4c>)
  403e4c:	1b76      	subs	r6, r6, r5
  403e4e:	f000 f90b 	bl	404068 <_init>
  403e52:	10b6      	asrs	r6, r6, #2
  403e54:	bf18      	it	ne
  403e56:	2400      	movne	r4, #0
  403e58:	d006      	beq.n	403e68 <__libc_init_array+0x3c>
  403e5a:	3401      	adds	r4, #1
  403e5c:	f855 3b04 	ldr.w	r3, [r5], #4
  403e60:	4798      	blx	r3
  403e62:	42a6      	cmp	r6, r4
  403e64:	d1f9      	bne.n	403e5a <__libc_init_array+0x2e>
  403e66:	bd70      	pop	{r4, r5, r6, pc}
  403e68:	bd70      	pop	{r4, r5, r6, pc}
  403e6a:	bf00      	nop
  403e6c:	00404074 	.word	0x00404074
  403e70:	00404074 	.word	0x00404074
  403e74:	0040407c 	.word	0x0040407c
  403e78:	00404074 	.word	0x00404074

00403e7c <memset>:
  403e7c:	b470      	push	{r4, r5, r6}
  403e7e:	0786      	lsls	r6, r0, #30
  403e80:	d046      	beq.n	403f10 <memset+0x94>
  403e82:	1e54      	subs	r4, r2, #1
  403e84:	2a00      	cmp	r2, #0
  403e86:	d041      	beq.n	403f0c <memset+0x90>
  403e88:	b2ca      	uxtb	r2, r1
  403e8a:	4603      	mov	r3, r0
  403e8c:	e002      	b.n	403e94 <memset+0x18>
  403e8e:	f114 34ff 	adds.w	r4, r4, #4294967295
  403e92:	d33b      	bcc.n	403f0c <memset+0x90>
  403e94:	f803 2b01 	strb.w	r2, [r3], #1
  403e98:	079d      	lsls	r5, r3, #30
  403e9a:	d1f8      	bne.n	403e8e <memset+0x12>
  403e9c:	2c03      	cmp	r4, #3
  403e9e:	d92e      	bls.n	403efe <memset+0x82>
  403ea0:	b2cd      	uxtb	r5, r1
  403ea2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403ea6:	2c0f      	cmp	r4, #15
  403ea8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403eac:	d919      	bls.n	403ee2 <memset+0x66>
  403eae:	f103 0210 	add.w	r2, r3, #16
  403eb2:	4626      	mov	r6, r4
  403eb4:	3e10      	subs	r6, #16
  403eb6:	2e0f      	cmp	r6, #15
  403eb8:	f842 5c10 	str.w	r5, [r2, #-16]
  403ebc:	f842 5c0c 	str.w	r5, [r2, #-12]
  403ec0:	f842 5c08 	str.w	r5, [r2, #-8]
  403ec4:	f842 5c04 	str.w	r5, [r2, #-4]
  403ec8:	f102 0210 	add.w	r2, r2, #16
  403ecc:	d8f2      	bhi.n	403eb4 <memset+0x38>
  403ece:	f1a4 0210 	sub.w	r2, r4, #16
  403ed2:	f022 020f 	bic.w	r2, r2, #15
  403ed6:	f004 040f 	and.w	r4, r4, #15
  403eda:	3210      	adds	r2, #16
  403edc:	2c03      	cmp	r4, #3
  403ede:	4413      	add	r3, r2
  403ee0:	d90d      	bls.n	403efe <memset+0x82>
  403ee2:	461e      	mov	r6, r3
  403ee4:	4622      	mov	r2, r4
  403ee6:	3a04      	subs	r2, #4
  403ee8:	2a03      	cmp	r2, #3
  403eea:	f846 5b04 	str.w	r5, [r6], #4
  403eee:	d8fa      	bhi.n	403ee6 <memset+0x6a>
  403ef0:	1f22      	subs	r2, r4, #4
  403ef2:	f022 0203 	bic.w	r2, r2, #3
  403ef6:	3204      	adds	r2, #4
  403ef8:	4413      	add	r3, r2
  403efa:	f004 0403 	and.w	r4, r4, #3
  403efe:	b12c      	cbz	r4, 403f0c <memset+0x90>
  403f00:	b2c9      	uxtb	r1, r1
  403f02:	441c      	add	r4, r3
  403f04:	f803 1b01 	strb.w	r1, [r3], #1
  403f08:	429c      	cmp	r4, r3
  403f0a:	d1fb      	bne.n	403f04 <memset+0x88>
  403f0c:	bc70      	pop	{r4, r5, r6}
  403f0e:	4770      	bx	lr
  403f10:	4614      	mov	r4, r2
  403f12:	4603      	mov	r3, r0
  403f14:	e7c2      	b.n	403e9c <memset+0x20>
  403f16:	bf00      	nop

00403f18 <register_fini>:
  403f18:	4b02      	ldr	r3, [pc, #8]	; (403f24 <register_fini+0xc>)
  403f1a:	b113      	cbz	r3, 403f22 <register_fini+0xa>
  403f1c:	4802      	ldr	r0, [pc, #8]	; (403f28 <register_fini+0x10>)
  403f1e:	f000 b805 	b.w	403f2c <atexit>
  403f22:	4770      	bx	lr
  403f24:	00000000 	.word	0x00000000
  403f28:	00403f39 	.word	0x00403f39

00403f2c <atexit>:
  403f2c:	2300      	movs	r3, #0
  403f2e:	4601      	mov	r1, r0
  403f30:	461a      	mov	r2, r3
  403f32:	4618      	mov	r0, r3
  403f34:	f000 b81e 	b.w	403f74 <__register_exitproc>

00403f38 <__libc_fini_array>:
  403f38:	b538      	push	{r3, r4, r5, lr}
  403f3a:	4c0a      	ldr	r4, [pc, #40]	; (403f64 <__libc_fini_array+0x2c>)
  403f3c:	4d0a      	ldr	r5, [pc, #40]	; (403f68 <__libc_fini_array+0x30>)
  403f3e:	1b64      	subs	r4, r4, r5
  403f40:	10a4      	asrs	r4, r4, #2
  403f42:	d00a      	beq.n	403f5a <__libc_fini_array+0x22>
  403f44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403f48:	3b01      	subs	r3, #1
  403f4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403f4e:	3c01      	subs	r4, #1
  403f50:	f855 3904 	ldr.w	r3, [r5], #-4
  403f54:	4798      	blx	r3
  403f56:	2c00      	cmp	r4, #0
  403f58:	d1f9      	bne.n	403f4e <__libc_fini_array+0x16>
  403f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403f5e:	f000 b88d 	b.w	40407c <_fini>
  403f62:	bf00      	nop
  403f64:	0040408c 	.word	0x0040408c
  403f68:	00404088 	.word	0x00404088

00403f6c <__retarget_lock_acquire_recursive>:
  403f6c:	4770      	bx	lr
  403f6e:	bf00      	nop

00403f70 <__retarget_lock_release_recursive>:
  403f70:	4770      	bx	lr
  403f72:	bf00      	nop

00403f74 <__register_exitproc>:
  403f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403f78:	4d2c      	ldr	r5, [pc, #176]	; (40402c <__register_exitproc+0xb8>)
  403f7a:	4606      	mov	r6, r0
  403f7c:	6828      	ldr	r0, [r5, #0]
  403f7e:	4698      	mov	r8, r3
  403f80:	460f      	mov	r7, r1
  403f82:	4691      	mov	r9, r2
  403f84:	f7ff fff2 	bl	403f6c <__retarget_lock_acquire_recursive>
  403f88:	4b29      	ldr	r3, [pc, #164]	; (404030 <__register_exitproc+0xbc>)
  403f8a:	681c      	ldr	r4, [r3, #0]
  403f8c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403f90:	2b00      	cmp	r3, #0
  403f92:	d03e      	beq.n	404012 <__register_exitproc+0x9e>
  403f94:	685a      	ldr	r2, [r3, #4]
  403f96:	2a1f      	cmp	r2, #31
  403f98:	dc1c      	bgt.n	403fd4 <__register_exitproc+0x60>
  403f9a:	f102 0e01 	add.w	lr, r2, #1
  403f9e:	b176      	cbz	r6, 403fbe <__register_exitproc+0x4a>
  403fa0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403fa4:	2401      	movs	r4, #1
  403fa6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  403faa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403fae:	4094      	lsls	r4, r2
  403fb0:	4320      	orrs	r0, r4
  403fb2:	2e02      	cmp	r6, #2
  403fb4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  403fb8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403fbc:	d023      	beq.n	404006 <__register_exitproc+0x92>
  403fbe:	3202      	adds	r2, #2
  403fc0:	f8c3 e004 	str.w	lr, [r3, #4]
  403fc4:	6828      	ldr	r0, [r5, #0]
  403fc6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  403fca:	f7ff ffd1 	bl	403f70 <__retarget_lock_release_recursive>
  403fce:	2000      	movs	r0, #0
  403fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403fd4:	4b17      	ldr	r3, [pc, #92]	; (404034 <__register_exitproc+0xc0>)
  403fd6:	b30b      	cbz	r3, 40401c <__register_exitproc+0xa8>
  403fd8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403fdc:	f3af 8000 	nop.w
  403fe0:	4603      	mov	r3, r0
  403fe2:	b1d8      	cbz	r0, 40401c <__register_exitproc+0xa8>
  403fe4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  403fe8:	6002      	str	r2, [r0, #0]
  403fea:	2100      	movs	r1, #0
  403fec:	6041      	str	r1, [r0, #4]
  403fee:	460a      	mov	r2, r1
  403ff0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403ff4:	f04f 0e01 	mov.w	lr, #1
  403ff8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  403ffc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404000:	2e00      	cmp	r6, #0
  404002:	d0dc      	beq.n	403fbe <__register_exitproc+0x4a>
  404004:	e7cc      	b.n	403fa0 <__register_exitproc+0x2c>
  404006:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40400a:	430c      	orrs	r4, r1
  40400c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404010:	e7d5      	b.n	403fbe <__register_exitproc+0x4a>
  404012:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404016:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40401a:	e7bb      	b.n	403f94 <__register_exitproc+0x20>
  40401c:	6828      	ldr	r0, [r5, #0]
  40401e:	f7ff ffa7 	bl	403f70 <__retarget_lock_release_recursive>
  404022:	f04f 30ff 	mov.w	r0, #4294967295
  404026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40402a:	bf00      	nop
  40402c:	200004d0 	.word	0x200004d0
  404030:	00404064 	.word	0x00404064
  404034:	00000000 	.word	0x00000000
  404038:	00000001 	.word	0x00000001
  40403c:	00000002 	.word	0x00000002
  404040:	00000004 	.word	0x00000004
  404044:	00000008 	.word	0x00000008
  404048:	00000010 	.word	0x00000010
  40404c:	00000020 	.word	0x00000020
  404050:	00000040 	.word	0x00000040
  404054:	00000080 	.word	0x00000080
  404058:	00000100 	.word	0x00000100
  40405c:	00000200 	.word	0x00000200
  404060:	00000400 	.word	0x00000400

00404064 <_global_impure_ptr>:
  404064:	200000a8                                ... 

00404068 <_init>:
  404068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40406a:	bf00      	nop
  40406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40406e:	bc08      	pop	{r3}
  404070:	469e      	mov	lr, r3
  404072:	4770      	bx	lr

00404074 <__init_array_start>:
  404074:	00403f19 	.word	0x00403f19

00404078 <__frame_dummy_init_array_entry>:
  404078:	004000f1                                ..@.

0040407c <_fini>:
  40407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40407e:	bf00      	nop
  404080:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404082:	bc08      	pop	{r3}
  404084:	469e      	mov	lr, r3
  404086:	4770      	bx	lr

00404088 <__fini_array_start>:
  404088:	004000cd 	.word	0x004000cd
